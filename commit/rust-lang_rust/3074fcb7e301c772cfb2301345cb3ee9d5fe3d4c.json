{"sha": "3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzRmY2I3ZTMwMWM3NzJjZmIyMzAxMzQ1Y2IzZWU5ZDVmZTNkNGM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-03T13:57:41Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-03T13:57:41Z"}, "message": "Monomorphize `AllocType`", "tree": {"sha": "19d01bb8d6dfff658aa4bcbf92e83189e61e2a31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d01bb8d6dfff658aa4bcbf92e83189e61e2a31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "html_url": "https://github.com/rust-lang/rust/commit/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e57c8055d25209cf1b06945dc628d7c0131394", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e57c8055d25209cf1b06945dc628d7c0131394", "html_url": "https://github.com/rust-lang/rust/commit/a5e57c8055d25209cf1b06945dc628d7c0131394"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "00ef3dd414bc9e9a4b75094171b38262dc5cdbe8", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "patch": "@@ -338,7 +338,7 @@ impl_stable_hash_for!(\n );\n \n impl_stable_hash_for!(\n-    impl<'tcx, M> for enum mir::interpret::AllocType<'tcx, M> [ mir::interpret::AllocType ] {\n+    impl<'tcx> for enum mir::interpret::AllocType<'tcx> [ mir::interpret::AllocType ] {\n         Function(instance),\n         Static(def_id),\n         Memory(mem),"}, {"sha": "35719e49723ecb21eb2e8ce4a301bdab916c8ac3", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "patch": "@@ -103,7 +103,7 @@ pub fn specialized_encode_alloc_id<\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     alloc_id: AllocId,\n ) -> Result<(), E::Error> {\n-    let alloc_type: AllocType<'tcx, &'tcx Allocation> =\n+    let alloc_type: AllocType<'tcx> =\n         tcx.alloc_map.lock().get(alloc_id).expect(\"no value for AllocId\");\n     match alloc_type {\n         AllocType::Memory(alloc) => {\n@@ -291,22 +291,22 @@ impl fmt::Display for AllocId {\n }\n \n #[derive(Debug, Clone, Eq, PartialEq, Hash, RustcDecodable, RustcEncodable)]\n-pub enum AllocType<'tcx, M> {\n+pub enum AllocType<'tcx> {\n     /// The alloc id is used as a function pointer\n     Function(Instance<'tcx>),\n     /// The alloc id points to a \"lazy\" static variable that did not get computed (yet).\n     /// This is also used to break the cycle in recursive statics.\n     Static(DefId),\n     /// The alloc id points to memory\n-    Memory(M)\n+    Memory(&'tcx Allocation),\n }\n \n pub struct AllocMap<'tcx> {\n     /// Lets you know what an AllocId refers to\n-    id_to_type: FxHashMap<AllocId, AllocType<'tcx, &'tcx Allocation>>,\n+    id_to_type: FxHashMap<AllocId, AllocType<'tcx>>,\n \n     /// Used to ensure that functions and statics only get one associated AllocId\n-    type_interner: FxHashMap<AllocType<'tcx, &'tcx Allocation>, AllocId>,\n+    type_interner: FxHashMap<AllocType<'tcx>, AllocId>,\n \n     /// The AllocId to assign to the next requested id.\n     /// Always incremented, never gets smaller.\n@@ -336,7 +336,7 @@ impl<'tcx> AllocMap<'tcx> {\n         next\n     }\n \n-    fn intern(&mut self, alloc_type: AllocType<'tcx, &'tcx Allocation>) -> AllocId {\n+    fn intern(&mut self, alloc_type: AllocType<'tcx>) -> AllocId {\n         if let Some(&alloc_id) = self.type_interner.get(&alloc_type) {\n             return alloc_id;\n         }\n@@ -354,7 +354,7 @@ impl<'tcx> AllocMap<'tcx> {\n         self.intern(AllocType::Function(instance))\n     }\n \n-    pub fn get(&self, id: AllocId) -> Option<AllocType<'tcx, &'tcx Allocation>> {\n+    pub fn get(&self, id: AllocId) -> Option<AllocType<'tcx>> {\n         self.id_to_type.get(&id).cloned()\n     }\n "}]}