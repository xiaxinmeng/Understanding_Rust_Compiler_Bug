{"sha": "3d6f4c85adcd78c3274e4117e379c57c6a38909c", "node_id": "C_kwDOAAsO6NoAKDNkNmY0Yzg1YWRjZDc4YzMyNzRlNDExN2UzNzljNTdjNmEzODkwOWM", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-07T18:04:07Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-08T16:00:23Z"}, "message": "remove ItemLikeVisitor impls and add fast paths using DefKind\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "622e04d61dd373f4cdfa570e8ce2f898f46c1ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622e04d61dd373f4cdfa570e8ce2f898f46c1ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d6f4c85adcd78c3274e4117e379c57c6a38909c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6f4c85adcd78c3274e4117e379c57c6a38909c", "html_url": "https://github.com/rust-lang/rust/commit/3d6f4c85adcd78c3274e4117e379c57c6a38909c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d6f4c85adcd78c3274e4117e379c57c6a38909c/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d01ee95583479b5cbcffe183075c7943099192a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d01ee95583479b5cbcffe183075c7943099192a", "html_url": "https://github.com/rust-lang/rust/commit/0d01ee95583479b5cbcffe183075c7943099192a"}], "stats": {"total": 67, "additions": 26, "deletions": 41}, "files": [{"sha": "60a8b8cfba4d29b1a9cc97a8b61ce2a648297e1f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f4c85adcd78c3274e4117e379c57c6a38909c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f4c85adcd78c3274e4117e379c57c6a38909c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=3d6f4c85adcd78c3274e4117e379c57c6a38909c", "patch": "@@ -1783,14 +1783,31 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_traits_and_impls()\");\n         empty_proc_macro!(self);\n         let tcx = self.tcx;\n-        let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };\n+        let mut fx_hash_map: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>> =\n+            FxHashMap::default();\n \n         for id in tcx.hir().items() {\n-            let item = tcx.hir().item(id);\n-            visitor.visit_item(item);\n+            match tcx.hir().def_kind(id.def_id) {\n+                DefKind::Impl => {\n+                    let item = tcx.hir().item(id);\n+                    if let Some(trait_ref) = tcx.impl_trait_ref(item.def_id.to_def_id()) {\n+                        let simplified_self_ty = fast_reject::simplify_type(\n+                            self.tcx,\n+                            trait_ref.self_ty(),\n+                            TreatParams::AsPlaceholders,\n+                        );\n+\n+                        fx_hash_map\n+                            .entry(trait_ref.def_id)\n+                            .or_default()\n+                            .push((item.def_id.local_def_index, simplified_self_ty));\n+                    }\n+                }\n+                _ => continue,\n+            }\n         }\n \n-        let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();\n+        let mut all_impls: Vec<_> = fx_hash_map.into_iter().collect();\n \n         // Bring everything into deterministic order for hashing\n         all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));\n@@ -2053,41 +2070,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n }\n \n-struct ImplsVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,\n-}\n-\n-impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        match item.kind {\n-            hir::ItemKind::Impl(..) => {\n-                if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {\n-                    let simplified_self_ty = fast_reject::simplify_type(\n-                        self.tcx,\n-                        trait_ref.self_ty(),\n-                        TreatParams::AsPlaceholders,\n-                    );\n-\n-                    self.impls\n-                        .entry(trait_ref.def_id)\n-                        .or_default()\n-                        .push((item.def_id.local_def_index, simplified_self_ty));\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}\n-\n-    fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {\n-        // handled in `visit_item` above\n-    }\n-\n-    fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}\n-}\n-\n /// Used to prefetch queries which will be needed later by metadata encoding.\n /// Only a subset of the queries are actually prefetched to keep this code smaller.\n fn prefetch_mir(tcx: TyCtxt<'_>) {"}, {"sha": "2ceb81b1fb3f6e6508f7bce25175962557266eca", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f4c85adcd78c3274e4117e379c57c6a38909c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f4c85adcd78c3274e4117e379c57c6a38909c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3d6f4c85adcd78c3274e4117e379c57c6a38909c", "patch": "@@ -9,7 +9,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n-use rustc_hir::ItemKind;\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -2683,8 +2682,12 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n     // Iterate all local crate items no matter where they are defined.\n     let hir = tcx.hir();\n     for id in hir.items() {\n+        if matches!(hir.def_kind(id.def_id), DefKind::Use) {\n+            continue;\n+        }\n+\n         let item = hir.item(id);\n-        if item.ident.name.as_str().is_empty() || matches!(item.kind, ItemKind::Use(_, _)) {\n+        if item.ident.name.as_str().is_empty() {\n             continue;\n         }\n "}]}