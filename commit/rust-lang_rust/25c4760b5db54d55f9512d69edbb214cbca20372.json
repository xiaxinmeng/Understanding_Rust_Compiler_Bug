{"sha": "25c4760b5db54d55f9512d69edbb214cbca20372", "node_id": "C_kwDOAAsO6NoAKDI1YzQ3NjBiNWRiNTRkNTVmOTUxMmQ2OWVkYmIyMTRjYmNhMjAzNzI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T13:28:32Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:34:56Z"}, "message": "Some cleanup around trait_method lookup", "tree": {"sha": "543e0f3b3eb3cacd2a640cc071c404c95967e8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543e0f3b3eb3cacd2a640cc071c404c95967e8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c4760b5db54d55f9512d69edbb214cbca20372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c4760b5db54d55f9512d69edbb214cbca20372", "html_url": "https://github.com/rust-lang/rust/commit/25c4760b5db54d55f9512d69edbb214cbca20372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c4760b5db54d55f9512d69edbb214cbca20372/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4c3f41c105a93178a6962bfc2e416f520134a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4c3f41c105a93178a6962bfc2e416f520134a9", "html_url": "https://github.com/rust-lang/rust/commit/9e4c3f41c105a93178a6962bfc2e416f520134a9"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "8ff7296c7b6626201ebf7433c13f2707b4a08368", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25c4760b5db54d55f9512d69edbb214cbca20372/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c4760b5db54d55f9512d69edbb214cbca20372/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=25c4760b5db54d55f9512d69edbb214cbca20372", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let ref_str_ty = tcx.mk_imm_ref(re_erased, tcx.types.str_);\n                     let ref_str = self.temp(ref_str_ty, test.span);\n                     let deref = tcx.require_lang_item(LangItem::Deref, None);\n-                    let method = trait_method(tcx, deref, sym::deref, ty, &[]);\n+                    let method = trait_method(tcx, deref, sym::deref, ty, []);\n                     let eq_block = self.cfg.start_new_block();\n                     self.cfg.push_assign(block, source_info, ref_string, Rvalue::Ref(re_erased, BorrowKind::Shared, place));\n                     self.cfg.terminate(\n@@ -444,8 +444,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             bug!(\"non_scalar_compare called on non-reference type: {}\", ty);\n         };\n \n-        let eq_def_id = self.tcx.require_lang_item(LangItem::PartialEq, None);\n-        let method = trait_method(self.tcx, eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n+        let eq_def_id = self.tcx.require_lang_item(LangItem::PartialEq, Some(source_info.span));\n+        let method = trait_method(self.tcx, eq_def_id, sym::eq, deref_ty, [deref_ty.into()]);\n \n         let bool_ty = self.tcx.types.bool;\n         let eq_result = self.temp(bool_ty, source_info.span);\n@@ -838,9 +838,9 @@ fn trait_method<'tcx>(\n     trait_def_id: DefId,\n     method_name: Symbol,\n     self_ty: Ty<'tcx>,\n-    params: &[GenericArg<'tcx>],\n+    params: impl IntoIterator<Item = GenericArg<'tcx>, IntoIter: ExactSizeIterator>,\n ) -> ConstantKind<'tcx> {\n-    let substs = tcx.mk_substs_trait(self_ty, params.iter().copied());\n+    let substs = tcx.mk_substs_trait(self_ty, params);\n \n     // The unhygienic comparison here is acceptable because this is only\n     // used on known traits.\n@@ -850,8 +850,7 @@ fn trait_method<'tcx>(\n         .find(|item| item.kind == ty::AssocKind::Fn)\n         .expect(\"trait method not found\");\n \n-    let method_ty = tcx.bound_type_of(item.def_id);\n-    let method_ty = method_ty.subst(tcx, substs);\n+    let method_ty = tcx.mk_fn_def(item.def_id, substs);\n \n     ConstantKind::zero_sized(method_ty)\n }"}, {"sha": "8797529459534610bc479c57a9f8dc75cb023059", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25c4760b5db54d55f9512d69edbb214cbca20372/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c4760b5db54d55f9512d69edbb214cbca20372/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=25c4760b5db54d55f9512d69edbb214cbca20372", "patch": "@@ -3,6 +3,7 @@\n //! This crate also contains the match exhaustiveness and usefulness checking.\n #![allow(rustc::potential_query_instability)]\n #![feature(assert_matches)]\n+#![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]"}]}