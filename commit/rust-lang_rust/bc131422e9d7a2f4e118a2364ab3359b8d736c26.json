{"sha": "bc131422e9d7a2f4e118a2364ab3359b8d736c26", "node_id": "C_kwDOAAsO6NoAKGJjMTMxNDIyZTlkN2EyZjRlMTE4YTIzNjRhYjMzNTliOGQ3MzZjMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T11:30:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T11:30:24Z"}, "message": "Auto merge of #13222 - BorysMinaiev:master, r=flodiebold\n\nRemove redundant 'resolve_obligations_as_possible' call\n\nHi! I was looking for a \"good first issue\" and saw this one: https://github.com/rust-lang/rust-analyzer/issues/7542. I like searching for performance improvements, so I wanted to try to find something useful there.\n\nThere are two tests in integrated_benchmarks.rs, I looked at 'integrated_highlighting_benchmark' (not the one discussed in the issue above).\n\nProfile from that test looks like this:\n```\n$ RUN_SLOW_BENCHES=1 cargo test --release --package rust-analyzer --lib -- integrated_benchmarks::integrated_highlighting_benchmark --exact --nocapture\n    Finished release [optimized] target(s) in 0.06s\n     Running unittests src/lib.rs (target/release/deps/rust_analyzer-a80ca6bb8f877458)\n\nrunning 1 test\nworkspace loading: 358.45ms\ninitial: 9.60s\nchange: 13.96\u00b5s\ncpu profiling is disabled, uncomment `default = [ \"cpu_profiler\" ]` in Cargo.toml to enable.\n  273ms - highlight\n      143ms - infer:wait @ per_query_memory_usage\n          143ms - infer_query\n                0   - crate_def_map:wait (3165 calls)\n                4ms - deref_by_trait (967 calls)\n               96ms - resolve_obligations_as_possible (22106 calls)\n                0   - trait_solve::wait (2068 calls)\n       21ms - Semantics::analyze_impl (18 calls)\n        0   - SourceBinder::to_module_def (20 calls)\n       36ms - classify_name (19 calls)\n       19ms - classify_name_ref (308 calls)\n        0   - crate_def_map:wait (461 calls)\n        4ms - descend_into_macros (628 calls)\n        0   - generic_params_query (4 calls)\n        0   - impl_data_with_diagnostics_query (1 calls)\n       45ms - infer:wait (37 calls)\n        0   - resolve_obligations_as_possible (2 calls)\n        0   - source_file_to_def (1 calls)\n        0   - trait_solve::wait (42 calls)\nafter change: 275.23ms\ntest integrated_benchmarks::integrated_highlighting_benchmark ... ok\n```\n22106 calls to `resolve_obligations_as_possible` seem like the main issue there.\n\nOne thing I noticed (and fixed in this PR) is that `InferenceContext::resolve_ty_shallow` first calls `resolve_obligations_as_possible`, and then calls `InferenceTable::resolve_ty_shallow`. But `InferenceTable::resolve_ty_shallow` [inside](https://github.com/rust-lang/rust-analyzer/blob/2e9f1204ca01c3e20898d4a67c8b84899d394a88/crates/hir-ty/src/infer/unify.rs#L372) again calls `resolve_obligations_as_possible`.\n\n`resolve_obligations_as_possible` inside has a while loop, which works until it can't find any helpful information. So calling this function for the second time does nothing, so one of the calls could be safely removed.\n\n`InferenceContext::resolve_ty_shallow` is actually quite a hot place, and after fixing it, the total number of `resolve_obligations_as_possible` in this test is reduced to 15516 (from 22106). \"After change\" time also improves from ~270ms to ~240ms, which is not a very huge win, but still something measurable.\n\nSame profile after PR:\n```\n$ RUN_SLOW_BENCHES=1 cargo test --release --package rust-analyzer --lib -- integrated_benchmarks::integrated_highlighting_benchmark --exact --nocapture\n    Finished release [optimized] target(s) in 0.06s\n     Running unittests src/lib.rs (target/release/deps/rust_analyzer-a80ca6bb8f877458)\n\nrunning 1 test\nworkspace loading: 339.86ms\ninitial: 9.28s\nchange: 10.69\u00b5s\ncpu profiling is disabled, uncomment `default = [ \"cpu_profiler\" ]` in Cargo.toml to enable.\n  236ms - highlight\n      110ms - infer:wait @ per_query_memory_usage\n          110ms - infer_query\n                0   - crate_def_map:wait (3165 calls)\n                4ms - deref_by_trait (967 calls)\n               64ms - resolve_obligations_as_possible (15516 calls)\n                0   - trait_solve::wait (2068 calls)\n       21ms - Semantics::analyze_impl (18 calls)\n        0   - SourceBinder::to_module_def (20 calls)\n       34ms - classify_name (19 calls)\n       18ms - classify_name_ref (308 calls)\n        0   - crate_def_map:wait (461 calls)\n        3ms - descend_into_macros (628 calls)\n        0   - generic_params_query (4 calls)\n        0   - impl_data_with_diagnostics_query (1 calls)\n       45ms - infer:wait (37 calls)\n        0   - resolve_obligations_as_possible (2 calls)\n        0   - source_file_to_def (1 calls)\n        0   - trait_solve::wait (42 calls)\nafter change: 238.15ms\ntest integrated_benchmarks::integrated_highlighting_benchmark ... ok\n```\n\nThe performance of this test could be further improved but at the cost of making code more complicated, so I wanted to check if such a change is desirable before sending another PR.\n\n`resolve_obligations_as_possible` is actually called a lot of times even when no new information was provided. As I understand, `resolve_obligations_as_possible` could do something useful only if some variables/values were unified since the last check. We can store a boolean variable inside `InferenceTable`, which indicates if `try_unify` was called after last `resolve_obligations_as_possible`. If it wasn't called, we can safely not call `resolve_obligations_as_possible` again.\n\nI tested this change locally, and it reduces the number of `resolve_obligations_as_possible` to several thousand (it is not shown in the profile anymore, so don't know the exact number), and the total time is reduced to ~180ms. Here is a generated profile:\n```\n$ RUN_SLOW_BENCHES=1 cargo test --release --package rust-analyzer --lib -- integrated_benchmarks::integrated_highlighting_benchmark --exact --nocapture\n    Finished release [optimized] target(s) in 0.06s\n     Running unittests src/lib.rs (target/release/deps/rust_analyzer-a80ca6bb8f877458)\n\nrunning 1 test\nworkspace loading: 349.92ms\ninitial: 8.56s\nchange: 11.32\u00b5s\ncpu profiling is disabled, uncomment `default = [ \"cpu_profiler\" ]` in Cargo.toml to enable.\n  175ms - highlight\n       21ms - Semantics::analyze_impl (18 calls)\n        0   - SourceBinder::to_module_def (20 calls)\n       33ms - classify_name (19 calls)\n       17ms - classify_name_ref (308 calls)\n        0   - crate_def_map:wait (461 calls)\n        3ms - descend_into_macros (628 calls)\n        0   - generic_params_query (4 calls)\n        0   - impl_data_with_diagnostics_query (1 calls)\n       97ms - infer:wait (38 calls)\n        0   - resolve_obligations_as_possible (2 calls)\n        0   - source_file_to_def (1 calls)\n        0   - trait_solve::wait (42 calls)\nafter change: 177.04ms\ntest integrated_benchmarks::integrated_highlighting_benchmark ... ok\n```\nLet me know if adding a new bool field seems like a reasonable tradeoff, so I can send a PR.", "tree": {"sha": "9ea800dcbe2342b4438110fd1b588387bbb34f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ea800dcbe2342b4438110fd1b588387bbb34f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc131422e9d7a2f4e118a2364ab3359b8d736c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc131422e9d7a2f4e118a2364ab3359b8d736c26", "html_url": "https://github.com/rust-lang/rust/commit/bc131422e9d7a2f4e118a2364ab3359b8d736c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc131422e9d7a2f4e118a2364ab3359b8d736c26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9f1204ca01c3e20898d4a67c8b84899d394a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9f1204ca01c3e20898d4a67c8b84899d394a88", "html_url": "https://github.com/rust-lang/rust/commit/2e9f1204ca01c3e20898d4a67c8b84899d394a88"}, {"sha": "32603baac383c081e035cb4433105e9d431c9332", "url": "https://api.github.com/repos/rust-lang/rust/commits/32603baac383c081e035cb4433105e9d431c9332", "html_url": "https://github.com/rust-lang/rust/commit/32603baac383c081e035cb4433105e9d431c9332"}], "stats": {"total": 5, "additions": 0, "deletions": 5}, "files": [{"sha": "e37763e8ea7f03075b5c19349d4c7d5ff1baf69d", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc131422e9d7a2f4e118a2364ab3359b8d736c26/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc131422e9d7a2f4e118a2364ab3359b8d736c26/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=bc131422e9d7a2f4e118a2364ab3359b8d736c26", "patch": "@@ -673,10 +673,6 @@ impl<'a> InferenceContext<'a> {\n         )\n     }\n \n-    fn resolve_obligations_as_possible(&mut self) {\n-        self.table.resolve_obligations_as_possible();\n-    }\n-\n     fn push_obligation(&mut self, o: DomainGoal) {\n         self.table.register_obligation(o.cast(Interner));\n     }\n@@ -696,7 +692,6 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_ty_shallow(&mut self, ty: &Ty) -> Ty {\n-        self.resolve_obligations_as_possible();\n         self.table.resolve_ty_shallow(ty)\n     }\n "}]}