{"sha": "ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "node_id": "C_kwDOAAsO6NoAKGZmYThkNmI0N2QyYjNmN2U4OTMxZWFlN2QwN2Y4N2UzNTg1NTk3Yjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-11T20:48:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-11T20:48:47Z"}, "message": "Rollup merge of #93660 - aDotInTheVoid:rustdoc-type-tests, r=CraftSpider\n\nrustdoc-json: Add some tests for typealias item\n\nr? ```@CraftSpider```\n\nImproves https://github.com/rust-lang/rust/issues/81359\n\nThe test's arn't pretty, and I think eventually we need a better way of doing repeated tests on a deeply nested path,\nwithout repeating the way to get to that path\n\n```@rustbot``` modify labels: +A-rustdoc-json +T-rustdoc +A-rustdoc +A-testsuite", "tree": {"sha": "caa031b9d6d47f40ee173dc7ae89ffea61e4b3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa031b9d6d47f40ee173dc7ae89ffea61e4b3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBsuvCRBK7hj4Ov3rIwAA34sIAJB8s3gE9Cws1xcg7JhVSrBH\nKltevU47lIeggJJzcMJ+7CPhxeOWGRpSYUFmmbA8XJI581WHGZzXJKtszV9XIpiz\nwIjt8IfpGKqoEiDpn29+S1+T5PVzj9Ikl/CPCAFF3dgIAnTHiPwA0kI5vtdft9PU\nfEgc3Q6o1EhO3TBLUuKMOss8gBtQuncnggQFFOH08lDKlFPpZW7xfXmiFvc+m/YR\nKrtSFX1ZEy3Cg3lqf9EYy0c8MVZXaU1hZj3aXnQtiq6LsLdef7jwArfYGCiGTjEo\n0DLMinWenRufRVMeEXV5M0+XLI9AF/4YWgqUFVJLeWv22NVhHDoVtugffWOEYOw=\n=rRbP\n-----END PGP SIGNATURE-----\n", "payload": "tree caa031b9d6d47f40ee173dc7ae89ffea61e4b3e2\nparent 15d71cff2d6286b0f281485637eace03dbe94916\nparent bf0e862903c4a799dd08dd00ffe68f9756fc6eb1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644612527 +0100\ncommitter GitHub <noreply@github.com> 1644612527 +0100\n\nRollup merge of #93660 - aDotInTheVoid:rustdoc-type-tests, r=CraftSpider\n\nrustdoc-json: Add some tests for typealias item\n\nr? ```@CraftSpider```\n\nImproves https://github.com/rust-lang/rust/issues/81359\n\nThe test's arn't pretty, and I think eventually we need a better way of doing repeated tests on a deeply nested path,\nwithout repeating the way to get to that path\n\n```@rustbot``` modify labels: +A-rustdoc-json +T-rustdoc +A-rustdoc +A-testsuite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "html_url": "https://github.com/rust-lang/rust/commit/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d71cff2d6286b0f281485637eace03dbe94916", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d71cff2d6286b0f281485637eace03dbe94916", "html_url": "https://github.com/rust-lang/rust/commit/15d71cff2d6286b0f281485637eace03dbe94916"}, {"sha": "bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "html_url": "https://github.com/rust-lang/rust/commit/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "f53dc03f4b47fad5e7fed37d995578ac4c3dba72", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items\" 1\n+// @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n+// @is - \"$.index[*][?(@.name=='dyn')].inner.items[0]\" $sync_int_gen\n+\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.name\" \\\"Fn\\\"\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[*]\" 3\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[0].trait_bound.trait.inner.name\" \\\"Send\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[1].trait_bound.trait.inner.name\" \\\"Sync\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[2]\" \"{\\\"outlives\\\": \\\"'static\\\"}\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;"}, {"sha": "e0d1e9649a0aaafcd887a4e6cdc6aac9cbc4917a", "filename": "src/test/rustdoc-json/type/fn_lifetime.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs?ref=ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "patch": "@@ -0,0 +1,28 @@\n+// ignore-tidy-linelength\n+\n+// @is fn_lifetime.json \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n+\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n+// @has   - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.kind\" \\\"function_pointer\\\"\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.generic_params[*]\" 0\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+\n+pub type GenericFn<'a> = fn(&'a i32) -> &'a i32;\n+\n+// @is fn_lifetime.json \"$.index[*][?(@.name=='ForAll')].kind\" \\\"typedef\\\"\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.params[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.where_predicates[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].name\" \\\"\\'a\\\"\n+// @has   - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime\"\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime.outlives[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+pub type ForAll = for<'a> fn(&'a i32) -> &'a i32;"}, {"sha": "b6bb6dcc5fe2d7a8d18f96185d9b82ddc8e30e82", "filename": "src/test/rustdoc-json/type/generic_default.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs?ref=ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+\n+// @set result = generic_default.json \"$.index[*][?(@.name=='Result')].id\"\n+pub enum Result<T, E> {\n+    Ok(T),\n+    Err(E),\n+}\n+\n+// @set my_error = - \"$.index[*][?(@.name=='MyError')].id\"\n+pub struct MyError {}\n+\n+// @is    - \"$.index[*][?(@.name=='MyResult')].kind\" \\\"typedef\\\"\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.where_predicates[*]\" 0\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[*]\" 2\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].name\" \\\"T\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].name\" \\\"E\\\"\n+// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type\"\n+// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type\"\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.bounds[*]\" 0\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.bounds[*]\" 0\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.default\" null\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.id\" $my_error\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.name\" \\\"MyError\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.id\" $result\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.name\" \\\"Result\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"generic\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.kind\" \\\"generic\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.inner\" \\\"T\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.inner\" \\\"E\\\"\n+pub type MyResult<T, E = MyError> = Result<T, E>;"}, {"sha": "d0f476955e1f79dbd2ded1263c3b2c67c8d80897", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "patch": "@@ -231,7 +231,21 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n \n             let val = cache.get_value(&command.args[0])?;\n             let results = select(&val, &command.args[1]).unwrap();\n-            results.len() == expected\n+            let eq = results.len() == expected;\n+            if !command.negated && !eq {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"`{}` matched to `{:?}` with length {}, but expected length {}\",\n+                        &command.args[1],\n+                        results,\n+                        results.len(),\n+                        expected\n+                    ),\n+                    command,\n+                ));\n+            } else {\n+                eq\n+            }\n         }\n         CommandKind::Is => {\n             // @has <path> <jsonpath> <value> = check *exactly one* item matched by path, and it equals value\n@@ -317,6 +331,6 @@ fn string_to_value<'a>(s: &str, cache: &'a Cache) -> Cow<'a, Value> {\n             panic!(\"No variable: `{}`. Current state: `{:?}`\", &s[1..], cache.variables)\n         }))\n     } else {\n-        Cow::Owned(serde_json::from_str(s).unwrap())\n+        Cow::Owned(serde_json::from_str(s).expect(&format!(\"Cannot convert `{}` to json\", s)))\n     }\n }"}]}