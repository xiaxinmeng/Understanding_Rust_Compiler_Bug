{"sha": "324384375537ef1e40f7fad550ba1da83e2d1458", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNDM4NDM3NTUzN2VmMWU0MGY3ZmFkNTUwYmExZGE4M2UyZDE0NTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-30T17:00:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-30T17:00:51Z"}, "message": "Merge pull request #323 from oli-obk/generators\n\nRustup (generator support)", "tree": {"sha": "b5cdd2c13f3cbcc9972541faa68315fd8aae425c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5cdd2c13f3cbcc9972541faa68315fd8aae425c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/324384375537ef1e40f7fad550ba1da83e2d1458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/324384375537ef1e40f7fad550ba1da83e2d1458", "html_url": "https://github.com/rust-lang/rust/commit/324384375537ef1e40f7fad550ba1da83e2d1458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/324384375537ef1e40f7fad550ba1da83e2d1458/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b67bfab52ab7e9ded0b7bef2f70c64a972d93ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b67bfab52ab7e9ded0b7bef2f70c64a972d93ee", "html_url": "https://github.com/rust-lang/rust/commit/4b67bfab52ab7e9ded0b7bef2f70c64a972d93ee"}, {"sha": "58a59e9d231e36e3d39dd398b80c96094de591aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a59e9d231e36e3d39dd398b80c96094de591aa", "html_url": "https://github.com/rust-lang/rust/commit/58a59e9d231e36e3d39dd398b80c96094de591aa"}], "stats": {"total": 107, "additions": 96, "deletions": 11}, "files": [{"sha": "b3d2617c9a3f781a15fa49b5bd683a5eece20fd4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/324384375537ef1e40f7fad550ba1da83e2d1458/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324384375537ef1e40f7fad550ba1da83e2d1458/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=324384375537ef1e40f7fad550ba1da83e2d1458", "patch": "@@ -480,15 +480,22 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n         // Subtract 1 because `local_decls` includes the ReturnMemoryPointer, but we don't store a local\n         // `Value` for that.\n-        let annotated_locals = collect_storage_annotations(mir);\n         let num_locals = mir.local_decls.len() - 1;\n-        let mut locals = vec![None; num_locals];\n-        for i in 0..num_locals {\n-            let local = mir::Local::new(i + 1);\n-            if !annotated_locals.contains(&local) {\n-                locals[i] = Some(Value::ByVal(PrimVal::Undef));\n+\n+        // FIXME: generators produce broken storage annotations (https://github.com/rust-lang/rust/issues/44179)\n+        let locals = if mir.generator_layout.is_some() {\n+            vec![Some(Value::ByVal(PrimVal::Undef)); num_locals]\n+        } else {\n+            let annotated_locals = collect_storage_annotations(mir);\n+            let mut locals = vec![None; num_locals];\n+            for i in 0..num_locals {\n+                let local = mir::Local::new(i + 1);\n+                if !annotated_locals.contains(&local) {\n+                    locals[i] = Some(Value::ByVal(PrimVal::Undef));\n+                }\n             }\n-        }\n+            locals\n+        };\n \n         self.stack.push(Frame {\n             mir,\n@@ -2426,6 +2433,12 @@ fn resolve_associated_item<'a, 'tcx>(\n             let substs = tcx.erase_regions(&substs);\n             ty::Instance::new(def_id, substs)\n         }\n+        ::rustc::traits::VtableGenerator(closure_data) => {\n+            ty::Instance {\n+                def: ty::InstanceDef::Item(closure_data.closure_def_id),\n+                substs: closure_data.substs.substs\n+            }\n+        }\n         ::rustc::traits::VtableClosure(closure_data) => {\n             let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n             resolve_closure("}, {"sha": "bee0fe23f7ff20e22ae6193c20577d109c22d3a5", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/324384375537ef1e40f7fad550ba1da83e2d1458/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324384375537ef1e40f7fad550ba1da83e2d1458/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=324384375537ef1e40f7fad550ba1da83e2d1458", "patch": "@@ -137,8 +137,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 if expected == cond_val {\n                     self.goto_block(target);\n                 } else {\n+                    use rustc::mir::AssertMessage::*;\n                     return match *msg {\n-                        mir::AssertMessage::BoundsCheck { ref len, ref index } => {\n+                        BoundsCheck { ref len, ref index } => {\n                             let span = terminator.source_info.span;\n                             let len = self.eval_operand_to_primval(len)\n                                 .expect(\"can't eval len\")\n@@ -148,13 +149,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                                 .to_u64()?;\n                             err!(ArrayIndexOutOfBounds(span, len, index))\n                         }\n-                        mir::AssertMessage::Math(ref err) => {\n+                        Math(ref err) => {\n                             err!(Math(terminator.source_info.span, err.clone()))\n                         }\n+                        GeneratorResumedAfterReturn |\n+                        GeneratorResumedAfterPanic => unimplemented!(),\n                     };\n                 }\n             }\n \n+            Yield { .. } => unimplemented!(\"{:#?}\", terminator.kind),\n+            GeneratorDrop => unimplemented!(),\n             DropAndReplace { .. } => unimplemented!(),\n             Resume => unimplemented!(),\n             Unreachable => return err!(Unreachable),"}, {"sha": "63872f3c9c669f98ba548c002e847652e7c1a403", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/324384375537ef1e40f7fad550ba1da83e2d1458/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324384375537ef1e40f7fad550ba1da83e2d1458/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=324384375537ef1e40f7fad550ba1da83e2d1458", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             TyRef(..) | TyFnPtr(..) | TyFnDef(..) | TyNever => true,\n             TyAdt(adt, _) if adt.is_box() => true,\n             TySlice(_) | TyAdt(_, _) | TyTuple(..) | TyClosure(..) | TyArray(..) |\n-            TyDynamic(..) => false,\n+            TyDynamic(..) | TyGenerator(..) => false,\n             TyParam(_) | TyInfer(_) | TyProjection(_) | TyAnon(..) | TyError => {\n                 bug!(\"I got an incomplete/unnormalized type for validation\")\n             }\n@@ -630,7 +630,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 // Is there other things we can/should check?  Like vtable pointers?\n                 Ok(())\n             }\n-            _ => bug!(\"We already establishd that this is a type we support.\"),\n+            // FIXME: generators aren't validated right now\n+            TyGenerator(..) => Ok(()),\n+            _ => bug!(\"We already established that this is a type we support. ({})\", query.ty),\n         }\n     }\n }"}, {"sha": "f15c7db9c2030020836a03fd23cfb06e0c907e21", "filename": "tests/run-pass/generator_control_flow.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/324384375537ef1e40f7fad550ba1da83e2d1458/tests%2Frun-pass%2Fgenerator_control_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324384375537ef1e40f7fad550ba1da83e2d1458/tests%2Frun-pass%2Fgenerator_control_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator_control_flow.rs?ref=324384375537ef1e40f7fad550ba1da83e2d1458", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{GeneratorState, Generator};\n+\n+fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n+    where T: Generator<Yield = ()>\n+{\n+    loop {\n+        match t.resume() {\n+            GeneratorState::Yielded(()) => amt -= 1,\n+            GeneratorState::Complete(ret) => {\n+                assert_eq!(amt, 0);\n+                return ret\n+            }\n+        }\n+    }\n+\n+}\n+\n+fn main() {\n+    finish(1, || yield);\n+    finish(3, || {\n+        let mut x = 0;\n+        yield;\n+        x += 1;\n+        yield;\n+        x += 1;\n+        yield;\n+        assert_eq!(x, 2);\n+    });\n+    finish(8, || {\n+        for _ in 0..8 {\n+            yield;\n+        }\n+    });\n+    finish(1, || {\n+        if true {\n+            yield;\n+        } else {\n+        }\n+    });\n+    finish(1, || {\n+        if false {\n+        } else {\n+            yield;\n+        }\n+    });\n+    finish(2, || {\n+        if { yield; false } {\n+            yield;\n+            panic!()\n+        }\n+        yield\n+    });\n+}"}]}