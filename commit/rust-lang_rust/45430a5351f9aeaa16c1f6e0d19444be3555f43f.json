{"sha": "45430a5351f9aeaa16c1f6e0d19444be3555f43f", "node_id": "C_kwDOAAsO6NoAKDQ1NDMwYTUzNTFmOWFlYWExNmMxZjZlMGQxOTQ0NGJlMzU1NWY0M2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T10:11:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T10:11:06Z"}, "message": "Rollup merge of #105524 - Ayush1325:libc-free, r=ChrisDenton\n\nReplace libc::{type} with crate::ffi::{type}\n\nReplace libc::{type} imports with crate::ffi::{type} outside of `std::sys` and `std::os`.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "c55014ae6993d5833451fa39f979358a0642f3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55014ae6993d5833451fa39f979358a0642f3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45430a5351f9aeaa16c1f6e0d19444be3555f43f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1PS6CRBK7hj4Ov3rIwAAsUkIADzJxFHMwbIx1Lir0K6hXVjn\nWEKjuOn+FR5YZOFm1MUfmtCkuITxhUr9NZHlF4SOJpVFMSDb92myOnKU/dvQgpan\nf7SFCRTPumMK12Wpw/m03bzWQu5yPIvPPemltXq4mPHrMzvkQKrUL9FLnwnEowOd\ncd4VXAX8Mb9w7G9eOfhSlWOl+AdWibz+xKfd/tlsIR4ZMDw6JWjCzHN+/JMYKroC\n87UoeVb93XlL9c4JlDrh28jKTFExxaS+uWqL40Omc8g3FGey383Xit0j759pjOEd\nkab2FhvAOKYfoFoXLw6yAd6w8nrt/SSiIJpDF14DW0uMbA/Pc9MvmNhZFh+hVvQ=\n=VA0m\n-----END PGP SIGNATURE-----\n", "payload": "tree c55014ae6993d5833451fa39f979358a0642f3d2\nparent 36ef4f15d3eb03d6a99657d13ef06209263c2cf9\nparent c50d3e28ab0bfaedd1f0f90a376e6f93e4e83c62\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674900666 +0100\ncommitter GitHub <noreply@github.com> 1674900666 +0100\n\nRollup merge of #105524 - Ayush1325:libc-free, r=ChrisDenton\n\nReplace libc::{type} with crate::ffi::{type}\n\nReplace libc::{type} imports with crate::ffi::{type} outside of `std::sys` and `std::os`.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45430a5351f9aeaa16c1f6e0d19444be3555f43f", "html_url": "https://github.com/rust-lang/rust/commit/45430a5351f9aeaa16c1f6e0d19444be3555f43f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45430a5351f9aeaa16c1f6e0d19444be3555f43f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ef4f15d3eb03d6a99657d13ef06209263c2cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ef4f15d3eb03d6a99657d13ef06209263c2cf9", "html_url": "https://github.com/rust-lang/rust/commit/36ef4f15d3eb03d6a99657d13ef06209263c2cf9"}, {"sha": "c50d3e28ab0bfaedd1f0f90a376e6f93e4e83c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50d3e28ab0bfaedd1f0f90a376e6f93e4e83c62", "html_url": "https://github.com/rust-lang/rust/commit/c50d3e28ab0bfaedd1f0f90a376e6f93e4e83c62"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "839fdc96632d1eea31a5e621d9ed66a24848d320", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=45430a5351f9aeaa16c1f6e0d19444be3555f43f", "patch": "@@ -12,6 +12,8 @@ use crate::time::{Duration, Instant};\n \n use rand::RngCore;\n \n+#[cfg(target_os = \"macos\")]\n+use crate::ffi::{c_char, c_int};\n #[cfg(unix)]\n use crate::os::unix::fs::symlink as symlink_dir;\n #[cfg(unix)]\n@@ -24,8 +26,6 @@ use crate::os::windows::fs::{symlink_dir, symlink_file};\n use crate::sys::fs::symlink_junction;\n #[cfg(target_os = \"macos\")]\n use crate::sys::weak::weak;\n-#[cfg(target_os = \"macos\")]\n-use libc::{c_char, c_int};\n \n macro_rules! check {\n     ($e:expr) => {"}, {"sha": "cb52ae89b1911e06a59acc2e047dc565ed1c225b", "filename": "library/std/src/personality/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fpersonality%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fpersonality%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Femcc.rs?ref=45430a5351f9aeaa16c1f6e0d19444be3555f43f", "patch": "@@ -1,7 +1,7 @@\n //! On Emscripten Rust panics are wrapped in C++ exceptions, so we just forward\n //! to `__gxx_personality_v0` which is provided by Emscripten.\n \n-use libc::c_int;\n+use crate::ffi::c_int;\n use unwind as uw;\n \n // This is required by the compiler to exist (e.g., it's a lang item), but it's"}, {"sha": "41c0fe725a540bff6e99936f30b25ac29ebbb966", "filename": "library/std/src/personality/gcc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs?ref=45430a5351f9aeaa16c1f6e0d19444be3555f43f", "patch": "@@ -37,7 +37,8 @@\n //! and the last personality routine transfers control to the catch block.\n \n use super::dwarf::eh::{self, EHAction, EHContext};\n-use libc::{c_int, uintptr_t};\n+use crate::ffi::c_int;\n+use libc::uintptr_t;\n use unwind as uw;\n \n // Register ids were lifted from LLVM's TargetLowering::getExceptionPointerRegister()"}, {"sha": "eb9167cd8552bb047fd7ef1a4707fd43b15a6be4", "filename": "library/std/src/sys/windows/thread_parking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs?ref=45430a5351f9aeaa16c1f6e0d19444be3555f43f", "patch": "@@ -221,7 +221,7 @@ impl Parker {\n \n fn keyed_event_handle() -> c::HANDLE {\n     const INVALID: c::HANDLE = ptr::invalid_mut(!0);\n-    static HANDLE: AtomicPtr<libc::c_void> = AtomicPtr::new(INVALID);\n+    static HANDLE: AtomicPtr<crate::ffi::c_void> = AtomicPtr::new(INVALID);\n     match HANDLE.load(Relaxed) {\n         INVALID => {\n             let mut handle = c::INVALID_HANDLE_VALUE;"}, {"sha": "2c38dfecf9734d75048cf2c3f2d92cb261ab8e75", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45430a5351f9aeaa16c1f6e0d19444be3555f43f/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=45430a5351f9aeaa16c1f6e0d19444be3555f43f", "patch": "@@ -14,7 +14,7 @@ use crate::sys::net::{cvt, cvt_gai, cvt_r, init, wrlen_t, Socket};\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n use crate::time::Duration;\n \n-use libc::{c_int, c_void};\n+use crate::ffi::{c_int, c_void};\n \n cfg_if::cfg_if! {\n     if #[cfg(any(\n@@ -47,7 +47,7 @@ cfg_if::cfg_if! {\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"openbsd\", target_os = \"netbsd\",\n         target_os = \"solaris\", target_os = \"illumos\"))] {\n-        use libc::c_uchar;\n+        use crate::ffi::c_uchar;\n         type IpV4MultiCastType = c_uchar;\n     } else {\n         type IpV4MultiCastType = c_int;\n@@ -127,8 +127,8 @@ fn to_ipv6mr_interface(value: u32) -> c_int {\n }\n \n #[cfg(not(target_os = \"android\"))]\n-fn to_ipv6mr_interface(value: u32) -> libc::c_uint {\n-    value as libc::c_uint\n+fn to_ipv6mr_interface(value: u32) -> crate::ffi::c_uint {\n+    value as crate::ffi::c_uint\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}