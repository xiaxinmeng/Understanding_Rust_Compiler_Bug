{"sha": "8b098325ec26834ec5eb056697b1fd733cca7be9", "node_id": "C_kwDOAAsO6NoAKDhiMDk4MzI1ZWMyNjgzNGVjNWViMDU2Njk3YjFmZDczM2NjYTdiZTk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T12:55:47Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T12:55:47Z"}, "message": "Round 2: make clean_middle_ty take a binder", "tree": {"sha": "06901e3902cd7065f53eb16803539050558ead45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06901e3902cd7065f53eb16803539050558ead45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b098325ec26834ec5eb056697b1fd733cca7be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b098325ec26834ec5eb056697b1fd733cca7be9", "html_url": "https://github.com/rust-lang/rust/commit/8b098325ec26834ec5eb056697b1fd733cca7be9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b098325ec26834ec5eb056697b1fd733cca7be9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "html_url": "https://github.com/rust-lang/rust/commit/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6"}], "stats": {"total": 148, "additions": 92, "deletions": 56}, "files": [{"sha": "4d6f1524732f77453e2ce2489cd3eee1b6f848e8", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=8b098325ec26834ec5eb056697b1fd733cca7be9", "patch": "@@ -124,7 +124,7 @@ where\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n                 trait_: Some(clean_trait_ref_with_bindings(self.cx, trait_ref, ThinVec::new())),\n-                for_: clean_middle_ty(ty, self.cx, None),\n+                for_: clean_middle_ty(ty::Binder::dummy(ty), self.cx, None),\n                 items: Vec::new(),\n                 polarity,\n                 kind: ImplKind::Auto,"}, {"sha": "4ef5747596bb39a7d4900a393c216f84626f3447", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=8b098325ec26834ec5eb056697b1fd733cca7be9", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             ty::Binder::dummy(trait_ref.0),\n                             ThinVec::new(),\n                         )),\n-                        for_: clean_middle_ty(ty.0, cx, None),\n+                        for_: clean_middle_ty(ty::Binder::dummy(ty.0), cx, None),\n                         items: cx\n                             .tcx\n                             .associated_items(impl_def_id)\n@@ -117,7 +117,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .collect::<Vec<_>>(),\n                         polarity: ty::ImplPolarity::Positive,\n                         kind: ImplKind::Blanket(Box::new(clean_middle_ty(\n-                            trait_ref.0.self_ty(),\n+                            ty::Binder::dummy(trait_ref.0.self_ty()),\n                             cx,\n                             None,\n                         ))),"}, {"sha": "50caef3553fdaf5f47d8e2248762494b06229750", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8b098325ec26834ec5eb056697b1fd733cca7be9", "patch": "@@ -293,7 +293,7 @@ fn build_union(cx: &mut DocContext<'_>, did: DefId) -> clean::Union {\n \n fn build_type_alias(cx: &mut DocContext<'_>, did: DefId) -> Box<clean::Typedef> {\n     let predicates = cx.tcx.explicit_predicates_of(did);\n-    let type_ = clean_middle_ty(cx.tcx.type_of(did), cx, Some(did));\n+    let type_ = clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(did)), cx, Some(did));\n \n     Box::new(clean::Typedef {\n         type_,\n@@ -405,7 +405,7 @@ pub(crate) fn build_impl(\n \n     let for_ = match &impl_item {\n         Some(impl_) => clean_ty(impl_.self_ty, cx),\n-        None => clean_middle_ty(tcx.type_of(did), cx, Some(did)),\n+        None => clean_middle_ty(ty::Binder::dummy(tcx.type_of(did)), cx, Some(did)),\n     };\n \n     // Only inline impl if the implementing type is\n@@ -641,14 +641,14 @@ pub(crate) fn print_inlined_const(tcx: TyCtxt<'_>, did: DefId) -> String {\n \n fn build_const(cx: &mut DocContext<'_>, def_id: DefId) -> clean::Constant {\n     clean::Constant {\n-        type_: clean_middle_ty(cx.tcx.type_of(def_id), cx, Some(def_id)),\n+        type_: clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(def_id)), cx, Some(def_id)),\n         kind: clean::ConstantKind::Extern { def_id },\n     }\n }\n \n fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {\n     clean::Static {\n-        type_: clean_middle_ty(cx.tcx.type_of(did), cx, Some(did)),\n+        type_: clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(did)), cx, Some(did)),\n         mutability: if mutable { Mutability::Mut } else { Mutability::Not },\n         expr: None,\n     }"}, {"sha": "0174b1a71b5dfd6dc4bf2f70328bef3184852f45", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 78, "deletions": 46, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b098325ec26834ec5eb056697b1fd733cca7be9", "patch": "@@ -213,19 +213,19 @@ fn clean_lifetime<'tcx>(lifetime: &hir::Lifetime, cx: &mut DocContext<'tcx>) ->\n pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n     let def_id = cx.tcx.hir().body_owner_def_id(constant.value.body).to_def_id();\n     Constant {\n-        type_: clean_middle_ty(cx.tcx.type_of(def_id), cx, Some(def_id)),\n+        type_: clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(def_id)), cx, Some(def_id)),\n         kind: ConstantKind::Anonymous { body: constant.value.body },\n     }\n }\n \n pub(crate) fn clean_middle_const<'tcx>(\n-    constant: ty::Const<'tcx>,\n+    constant: ty::Binder<'tcx, ty::Const<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n ) -> Constant {\n     // FIXME: instead of storing the stringified expression, store `self` directly instead.\n     Constant {\n-        type_: clean_middle_ty(constant.ty(), cx, None),\n-        kind: ConstantKind::TyConst { expr: constant.to_string().into() },\n+        type_: clean_middle_ty(constant.map_bound(|c| c.ty()), cx, None),\n+        kind: ConstantKind::TyConst { expr: constant.skip_binder().to_string().into() },\n     }\n }\n \n@@ -334,7 +334,7 @@ fn clean_poly_trait_predicate<'tcx>(\n \n     let poly_trait_ref = pred.map_bound(|pred| pred.trait_ref);\n     Some(WherePredicate::BoundPredicate {\n-        ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n+        ty: clean_middle_ty(poly_trait_ref.self_ty(), cx, None),\n         bounds: vec![clean_poly_trait_ref_with_bindings(cx, poly_trait_ref, ThinVec::new())],\n         bound_params: Vec::new(),\n     })\n@@ -360,18 +360,21 @@ fn clean_type_outlives_predicate<'tcx>(\n     let ty::OutlivesPredicate(ty, lt) = pred;\n \n     Some(WherePredicate::BoundPredicate {\n-        ty: clean_middle_ty(ty, cx, None),\n+        ty: clean_middle_ty(ty::Binder::dummy(ty), cx, None),\n         bounds: vec![GenericBound::Outlives(\n             clean_middle_region(lt).expect(\"failed to clean lifetimes\"),\n         )],\n         bound_params: Vec::new(),\n     })\n }\n \n-fn clean_middle_term<'tcx>(term: ty::Term<'tcx>, cx: &mut DocContext<'tcx>) -> Term {\n-    match term.unpack() {\n-        ty::TermKind::Ty(ty) => Term::Type(clean_middle_ty(ty, cx, None)),\n-        ty::TermKind::Const(c) => Term::Constant(clean_middle_const(c, cx)),\n+fn clean_middle_term<'tcx>(\n+    term: ty::Binder<'tcx, ty::Term<'tcx>>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Term {\n+    match term.skip_binder().unpack() {\n+        ty::TermKind::Ty(ty) => Term::Type(clean_middle_ty(term.rebind(ty), cx, None)),\n+        ty::TermKind::Const(c) => Term::Constant(clean_middle_const(term.rebind(c), cx)),\n     }\n }\n \n@@ -380,7 +383,10 @@ fn clean_hir_term<'tcx>(term: &hir::Term<'tcx>, cx: &mut DocContext<'tcx>) -> Te\n         hir::Term::Ty(ty) => Term::Type(clean_ty(ty, cx)),\n         hir::Term::Const(c) => {\n             let def_id = cx.tcx.hir().local_def_id(c.hir_id);\n-            Term::Constant(clean_middle_const(ty::Const::from_anon_const(cx.tcx, def_id), cx))\n+            Term::Constant(clean_middle_const(\n+                ty::Binder::dummy(ty::Const::from_anon_const(cx.tcx, def_id)),\n+                cx,\n+            ))\n         }\n     }\n }\n@@ -401,7 +407,7 @@ fn clean_projection_predicate<'tcx>(\n \n     WherePredicate::EqPredicate {\n         lhs: Box::new(clean_projection(pred.map_bound(|p| p.projection_ty), cx, None)),\n-        rhs: Box::new(clean_middle_term(pred.skip_binder().term, cx)),\n+        rhs: Box::new(clean_middle_term(pred.map_bound(|p| p.term), cx)),\n         bound_params: late_bound_regions,\n     }\n }\n@@ -423,7 +429,7 @@ fn clean_projection<'tcx>(\n \n     let trait_ =\n         clean_trait_ref_with_bindings(cx, ty.map_bound(|ty| ty.trait_ref(cx.tcx)), ThinVec::new());\n-    let self_type = clean_middle_ty(ty.skip_binder().self_ty(), cx, None);\n+    let self_type = clean_middle_ty(ty.map_bound(|ty| ty.self_ty()), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n     } else {\n@@ -470,7 +476,11 @@ fn clean_generic_param_def<'tcx>(\n         }\n         ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n             let default = if has_default {\n-                Some(clean_middle_ty(cx.tcx.type_of(def.def_id), cx, Some(def.def_id)))\n+                Some(clean_middle_ty(\n+                    ty::Binder::dummy(cx.tcx.type_of(def.def_id)),\n+                    cx,\n+                    Some(def.def_id),\n+                ))\n             } else {\n                 None\n             };\n@@ -488,7 +498,11 @@ fn clean_generic_param_def<'tcx>(\n             def.name,\n             GenericParamDefKind::Const {\n                 did: def.def_id,\n-                ty: Box::new(clean_middle_ty(cx.tcx.type_of(def.def_id), cx, Some(def.def_id))),\n+                ty: Box::new(clean_middle_ty(\n+                    ty::Binder::dummy(cx.tcx.type_of(def.def_id)),\n+                    cx,\n+                    Some(def.def_id),\n+                )),\n                 default: match has_default {\n                     true => Some(Box::new(cx.tcx.const_param_default(def.def_id).to_string())),\n                     false => None,\n@@ -733,8 +747,10 @@ fn clean_ty_generics<'tcx>(\n         .collect::<ThinVec<GenericParamDef>>();\n \n     // param index -> [(trait DefId, associated type name & generics, type, higher-ranked params)]\n-    let mut impl_trait_proj =\n-        FxHashMap::<u32, Vec<(DefId, PathSegment, Ty<'_>, Vec<GenericParamDef>)>>::default();\n+    let mut impl_trait_proj = FxHashMap::<\n+        u32,\n+        Vec<(DefId, PathSegment, ty::Binder<'_, Ty<'_>>, Vec<GenericParamDef>)>,\n+    >::default();\n \n     let where_predicates = preds\n         .predicates\n@@ -784,7 +800,7 @@ fn clean_ty_generics<'tcx>(\n                     let proj = projection.map(|p| {\n                         (\n                             clean_projection(p.map_bound(|p| p.projection_ty), cx, None),\n-                            p.skip_binder().term,\n+                            p.map_bound(|p| p.term),\n                         )\n                     });\n                     if let Some(((_, trait_did, name), rhs)) = proj\n@@ -795,7 +811,7 @@ fn clean_ty_generics<'tcx>(\n                         impl_trait_proj.entry(param_idx).or_default().push((\n                             trait_did,\n                             name,\n-                            rhs.ty().unwrap(),\n+                            rhs.map_bound(|rhs| rhs.ty().unwrap()),\n                             p.get_bound_params()\n                                 .into_iter()\n                                 .flatten()\n@@ -1066,7 +1082,7 @@ fn clean_fn_decl_from_did_and_sig<'tcx>(\n \n     // We assume all empty tuples are default return type. This theoretically can discard `-> ()`,\n     // but shouldn't change any code meaning.\n-    let output = match clean_middle_ty(sig.skip_binder().output(), cx, None) {\n+    let output = match clean_middle_ty(sig.output(), cx, None) {\n         Type::Tuple(inner) if inner.is_empty() => DefaultReturn,\n         ty => Return(ty),\n     };\n@@ -1079,7 +1095,7 @@ fn clean_fn_decl_from_did_and_sig<'tcx>(\n                 .inputs()\n                 .iter()\n                 .map(|t| Argument {\n-                    type_: clean_middle_ty(*t.skip_binder(), cx, None),\n+                    type_: clean_middle_ty(t.map_bound(|t| *t), cx, None),\n                     name: names\n                         .next()\n                         .map(|i| i.name)\n@@ -1133,7 +1149,8 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             hir::TraitItemKind::Type(bounds, Some(default)) => {\n                 let generics = enter_impl_trait(cx, |cx| clean_generics(trait_item.generics, cx));\n                 let bounds = bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect();\n-                let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, default), cx, None);\n+                let item_type =\n+                    clean_middle_ty(ty::Binder::dummy(hir_ty_to_ty(cx.tcx, default)), cx, None);\n                 AssocTypeItem(\n                     Box::new(Typedef {\n                         type_: clean_ty(default, cx),\n@@ -1172,7 +1189,8 @@ pub(crate) fn clean_impl_item<'tcx>(\n             hir::ImplItemKind::Type(hir_ty) => {\n                 let type_ = clean_ty(hir_ty, cx);\n                 let generics = clean_generics(impl_.generics, cx);\n-                let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);\n+                let item_type =\n+                    clean_middle_ty(ty::Binder::dummy(hir_ty_to_ty(cx.tcx, hir_ty)), cx, None);\n                 AssocTypeItem(\n                     Box::new(Typedef { type_, generics, item_type: Some(item_type) }),\n                     Vec::new(),\n@@ -1191,7 +1209,11 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n     let tcx = cx.tcx;\n     let kind = match assoc_item.kind {\n         ty::AssocKind::Const => {\n-            let ty = clean_middle_ty(tcx.type_of(assoc_item.def_id), cx, Some(assoc_item.def_id));\n+            let ty = clean_middle_ty(\n+                ty::Binder::dummy(tcx.type_of(assoc_item.def_id)),\n+                cx,\n+                Some(assoc_item.def_id),\n+            );\n \n             let provided = match assoc_item.container {\n                 ty::ImplContainer => true,\n@@ -1374,7 +1396,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                     AssocTypeItem(\n                         Box::new(Typedef {\n                             type_: clean_middle_ty(\n-                                tcx.type_of(assoc_item.def_id),\n+                                ty::Binder::dummy(tcx.type_of(assoc_item.def_id)),\n                                 cx,\n                                 Some(assoc_item.def_id),\n                             ),\n@@ -1392,7 +1414,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                 AssocTypeItem(\n                     Box::new(Typedef {\n                         type_: clean_middle_ty(\n-                            tcx.type_of(assoc_item.def_id),\n+                            ty::Binder::dummy(tcx.type_of(assoc_item.def_id)),\n                             cx,\n                             Some(assoc_item.def_id),\n                         ),\n@@ -1436,7 +1458,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n         hir::QPath::Resolved(Some(qself), p) => {\n             // Try to normalize `<X as Y>::T` to a type\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n-            if let Some(normalized_value) = normalize(cx, ty) {\n+            if let Some(normalized_value) = normalize(cx, ty::Binder::dummy(ty)) {\n                 return clean_middle_ty(normalized_value, cx, None);\n             }\n \n@@ -1464,7 +1486,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n                 // Rustdoc handles `ty::Error`s by turning them into `Type::Infer`s.\n                 ty::Error(_) => return Type::Infer,\n                 // Otherwise, this is an inherent associated type.\n-                _ => return clean_middle_ty(ty, cx, None),\n+                _ => return clean_middle_ty(ty::Binder::dummy(ty), cx, None),\n             };\n             let trait_ = clean_path(&hir::Path { span, res, segments: &[] }, cx);\n             register_res(cx, trait_.res);\n@@ -1631,7 +1653,10 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n }\n \n /// Returns `None` if the type could not be normalized\n-fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+fn normalize<'tcx>(\n+    cx: &mut DocContext<'tcx>,\n+    ty: ty::Binder<'tcx, Ty<'tcx>>,\n+) -> Option<ty::Binder<'tcx, Ty<'tcx>>> {\n     // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n     if !cx.tcx.sess.opts.unstable_opts.normalize_docs {\n         return None;\n@@ -1659,35 +1684,38 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>>\n     }\n }\n \n+#[instrument(level = \"trace\", skip(cx), ret)]\n pub(crate) fn clean_middle_ty<'tcx>(\n-    ty: Ty<'tcx>,\n+    bound_ty: ty::Binder<'tcx, Ty<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    trace!(\"cleaning type: {:?}\", ty);\n-    let ty = normalize(cx, ty).unwrap_or(ty);\n-    match *ty.kind() {\n+    let bound_ty = normalize(cx, bound_ty).unwrap_or(bound_ty);\n+    match *bound_ty.skip_binder().kind() {\n         ty::Never => Primitive(PrimitiveType::Never),\n         ty::Bool => Primitive(PrimitiveType::Bool),\n         ty::Char => Primitive(PrimitiveType::Char),\n         ty::Int(int_ty) => Primitive(int_ty.into()),\n         ty::Uint(uint_ty) => Primitive(uint_ty.into()),\n         ty::Float(float_ty) => Primitive(float_ty.into()),\n         ty::Str => Primitive(PrimitiveType::Str),\n-        ty::Slice(ty) => Slice(Box::new(clean_middle_ty(ty, cx, None))),\n+        ty::Slice(ty) => Slice(Box::new(clean_middle_ty(bound_ty.rebind(ty), cx, None))),\n         ty::Array(ty, mut n) => {\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n-            Array(Box::new(clean_middle_ty(ty, cx, None)), n.into())\n+            Array(Box::new(clean_middle_ty(bound_ty.rebind(ty), cx, None)), n.into())\n+        }\n+        ty::RawPtr(mt) => {\n+            RawPointer(mt.mutbl, Box::new(clean_middle_ty(bound_ty.rebind(mt.ty), cx, None)))\n         }\n-        ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(clean_middle_ty(mt.ty, cx, None))),\n         ty::Ref(r, ty, mutbl) => BorrowedRef {\n             lifetime: clean_middle_region(r),\n             mutability: mutbl,\n-            type_: Box::new(clean_middle_ty(ty, cx, None)),\n+            type_: Box::new(clean_middle_ty(bound_ty.rebind(ty), cx, None)),\n         },\n         ty::FnDef(..) | ty::FnPtr(_) => {\n-            let sig = ty.fn_sig(cx.tcx);\n+            // FIXME: should we merge the outer and inner binders somehow?\n+            let sig = bound_ty.skip_binder().fn_sig(cx.tcx);\n             let decl = clean_fn_decl_from_did_and_sig(cx, None, sig);\n             BareFunction(Box::new(BareFunctionDecl {\n                 unsafety: sig.unsafety(),\n@@ -1720,7 +1748,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let did = obj\n                 .principal_def_id()\n                 .or_else(|| dids.next())\n-                .unwrap_or_else(|| panic!(\"found trait object `{:?}` with no traits?\", ty));\n+                .unwrap_or_else(|| panic!(\"found trait object `{bound_ty:?}` with no traits?\"));\n             let substs = match obj.principal() {\n                 Some(principal) => principal.skip_binder().substs,\n                 // marker traits have no substs.\n@@ -1754,7 +1782,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                         cx,\n                     ),\n                     kind: TypeBindingKind::Equality {\n-                        term: clean_middle_term(pb.skip_binder().term, cx),\n+                        term: clean_middle_term(pb.map_bound(|pb| pb.term), cx),\n                     },\n                 })\n                 .collect();\n@@ -1778,9 +1806,11 @@ pub(crate) fn clean_middle_ty<'tcx>(\n \n             DynTrait(bounds, lifetime)\n         }\n-        ty::Tuple(t) => Tuple(t.iter().map(|t| clean_middle_ty(t, cx, None)).collect()),\n+        ty::Tuple(t) => {\n+            Tuple(t.iter().map(|t| clean_middle_ty(bound_ty.rebind(t), cx, None)).collect())\n+        }\n \n-        ty::Projection(ref data) => clean_projection(ty::Binder::dummy(*data), cx, def_id),\n+        ty::Projection(ref data) => clean_projection(bound_ty.rebind(*data), cx, def_id),\n \n         ty::Param(ref p) => {\n             if let Some(bounds) = cx.impl_trait_bounds.remove(&p.index.into()) {\n@@ -1855,7 +1885,7 @@ fn clean_middle_opaque_bounds<'tcx>(\n                             Some(TypeBinding {\n                                 assoc: projection_to_path_segment(proj.projection_ty, cx),\n                                 kind: TypeBindingKind::Equality {\n-                                    term: clean_middle_term(proj.term, cx),\n+                                    term: clean_middle_term(bound.kind().rebind(proj.term), cx),\n                                 },\n                             })\n                         } else {\n@@ -1886,7 +1916,7 @@ pub(crate) fn clean_middle_field<'tcx>(field: &ty::FieldDef, cx: &mut DocContext\n     clean_field_with_def_id(\n         field.did,\n         field.name,\n-        clean_middle_ty(cx.tcx.type_of(field.did), cx, Some(field.did)),\n+        clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(field.did)), cx, Some(field.did)),\n         cx,\n     )\n }\n@@ -2099,7 +2129,7 @@ fn clean_maybe_renamed_item<'tcx>(\n             }),\n             ItemKind::TyAlias(hir_ty, generics) => {\n                 let rustdoc_ty = clean_ty(hir_ty, cx);\n-                let ty = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);\n+                let ty = clean_middle_ty(ty::Binder::dummy(hir_ty_to_ty(cx.tcx, hir_ty)), cx, None);\n                 TypedefItem(Box::new(Typedef {\n                     type_: rustdoc_ty,\n                     generics: clean_generics(generics, cx),\n@@ -2210,7 +2240,9 @@ fn clean_impl<'tcx>(\n \n     let for_ = clean_ty(impl_.self_ty, cx);\n     let type_alias = for_.def_id(&cx.cache).and_then(|did| match tcx.def_kind(did) {\n-        DefKind::TyAlias => Some(clean_middle_ty(tcx.type_of(did), cx, Some(did))),\n+        DefKind::TyAlias => {\n+            Some(clean_middle_ty(ty::Binder::dummy(tcx.type_of(did)), cx, Some(did)))\n+        }\n         _ => None,\n     });\n     let mut make_item = |trait_: Option<Path>, for_: Type, items: Vec<Item>| {"}, {"sha": "6c1bc2801d81a8eb6ff07e812dc1c3dc86487f8c", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b098325ec26834ec5eb056697b1fd733cca7be9/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=8b098325ec26834ec5eb056697b1fd733cca7be9", "patch": "@@ -91,8 +91,12 @@ pub(crate) fn substs_to_args<'tcx>(\n             skip_first = false;\n             None\n         }\n-        GenericArgKind::Type(ty) => Some(GenericArg::Type(clean_middle_ty(ty, cx, None))),\n-        GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(clean_middle_const(ct, cx)))),\n+        GenericArgKind::Type(ty) => {\n+            Some(GenericArg::Type(clean_middle_ty(ty::Binder::dummy(ty), cx, None)))\n+        }\n+        GenericArgKind::Const(ct) => {\n+            Some(GenericArg::Const(Box::new(clean_middle_const(ty::Binder::dummy(ct), cx))))\n+        }\n     }));\n     ret_val\n }\n@@ -110,7 +114,7 @@ fn external_generic_args<'tcx>(\n         let inputs =\n             // The trait's first substitution is the one after self, if there is one.\n             match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {\n-                ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(t, cx, None)).collect::<Vec<_>>().into(),\n+                ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(ty::Binder::dummy(t), cx, None)).collect::<Vec<_>>().into(),\n                 _ => return GenericArgs::AngleBracketed { args: args.into(), bindings },\n             };\n         let output = bindings.into_iter().next().and_then(|binding| match binding.kind {"}]}