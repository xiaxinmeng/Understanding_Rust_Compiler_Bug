{"sha": "ba2e6c1e9516ecf01378e4e54fd857e069535826", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMmU2YzFlOTUxNmVjZjAxMzc4ZTRlNTRmZDg1N2UwNjk1MzU4MjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T00:14:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:23Z"}, "message": "librustc: De-`@mut` the `needs_unwind_cleanup_cache`", "tree": {"sha": "cfbbba3ca0b8b9d5f0635e4fb3cf07547faed476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfbbba3ca0b8b9d5f0635e4fb3cf07547faed476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2e6c1e9516ecf01378e4e54fd857e069535826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2e6c1e9516ecf01378e4e54fd857e069535826", "html_url": "https://github.com/rust-lang/rust/commit/ba2e6c1e9516ecf01378e4e54fd857e069535826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2e6c1e9516ecf01378e4e54fd857e069535826/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e46ac6449a48948cefeec2fa74032ff528f7871", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e46ac6449a48948cefeec2fa74032ff528f7871", "html_url": "https://github.com/rust-lang/rust/commit/2e46ac6449a48948cefeec2fa74032ff528f7871"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "3dee660c324c77ccd7b728e57f504d0501ffe46b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba2e6c1e9516ecf01378e4e54fd857e069535826/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2e6c1e9516ecf01378e4e54fd857e069535826/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ba2e6c1e9516ecf01378e4e54fd857e069535826", "patch": "@@ -308,7 +308,7 @@ struct ctxt_ {\n     tcache: type_cache,\n     rcache: creader_cache,\n     short_names_cache: RefCell<HashMap<t, @str>>,\n-    needs_unwind_cleanup_cache: @mut HashMap<t, bool>,\n+    needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n     tc_cache: @mut HashMap<uint, TypeContents>,\n     ast_ty_to_ty_cache: @mut HashMap<NodeId, ast_ty_to_ty_cache_entry>,\n     enum_var_cache: @mut HashMap<DefId, @~[@VariantInfo]>,\n@@ -994,7 +994,7 @@ pub fn mk_ctxt(s: session::Session,\n         tcache: @mut HashMap::new(),\n         rcache: mk_rcache(),\n         short_names_cache: RefCell::new(HashMap::new()),\n-        needs_unwind_cleanup_cache: new_ty_hash(),\n+        needs_unwind_cleanup_cache: RefCell::new(HashMap::new()),\n         tc_cache: @mut HashMap::new(),\n         ast_ty_to_ty_cache: @mut HashMap::new(),\n         enum_var_cache: @mut HashMap::new(),\n@@ -1668,15 +1668,21 @@ pub fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n // that only contain scalars and shared boxes can avoid unwind\n // cleanups.\n pub fn type_needs_unwind_cleanup(cx: ctxt, ty: t) -> bool {\n-    match cx.needs_unwind_cleanup_cache.find(&ty) {\n-      Some(&result) => return result,\n-      None => ()\n+    {\n+        let needs_unwind_cleanup_cache = cx.needs_unwind_cleanup_cache\n+                                           .borrow();\n+        match needs_unwind_cleanup_cache.get().find(&ty) {\n+            Some(&result) => return result,\n+            None => ()\n+        }\n     }\n \n     let mut tycache = HashSet::new();\n     let needs_unwind_cleanup =\n         type_needs_unwind_cleanup_(cx, ty, &mut tycache, false);\n-    cx.needs_unwind_cleanup_cache.insert(ty, needs_unwind_cleanup);\n+    let mut needs_unwind_cleanup_cache = cx.needs_unwind_cleanup_cache\n+                                           .borrow_mut();\n+    needs_unwind_cleanup_cache.get().insert(ty, needs_unwind_cleanup);\n     return needs_unwind_cleanup;\n }\n "}]}