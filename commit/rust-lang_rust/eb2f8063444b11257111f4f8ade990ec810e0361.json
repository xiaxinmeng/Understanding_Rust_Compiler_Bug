{"sha": "eb2f8063444b11257111f4f8ade990ec810e0361", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMmY4MDYzNDQ0YjExMjU3MTExZjRmOGFkZTk5MGVjODEwZTAzNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T13:25:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T13:25:46Z"}, "message": "Rename TypeAliasDef -> TypeAlias", "tree": {"sha": "999cef9fc647293699515f1e0ac59492e64c1116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/999cef9fc647293699515f1e0ac59492e64c1116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb2f8063444b11257111f4f8ade990ec810e0361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2f8063444b11257111f4f8ade990ec810e0361", "html_url": "https://github.com/rust-lang/rust/commit/eb2f8063444b11257111f4f8ade990ec810e0361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb2f8063444b11257111f4f8ade990ec810e0361/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1142112c70b705f59b7d559d9d72cdc831865158", "url": "https://api.github.com/repos/rust-lang/rust/commits/1142112c70b705f59b7d559d9d72cdc831865158", "html_url": "https://github.com/rust-lang/rust/commit/1142112c70b705f59b7d559d9d72cdc831865158"}], "stats": {"total": 301, "additions": 146, "deletions": 155}, "files": [{"sha": "1e4d4748c2a9acad268c74098712269a37dbd9e9", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -119,7 +119,7 @@ fn add_missing_impl_members_inner(\n     let def_name = |item: &ast::AssocItem| -> Option<SmolStr> {\n         match item {\n             ast::AssocItem::Fn(def) => def.name(),\n-            ast::AssocItem::TypeAliasDef(def) => def.name(),\n+            ast::AssocItem::TypeAlias(def) => def.name(),\n             ast::AssocItem::ConstDef(def) => def.name(),\n             ast::AssocItem::MacroCall(_) => None,\n         }\n@@ -130,7 +130,7 @@ fn add_missing_impl_members_inner(\n         .iter()\n         .map(|i| match i {\n             hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source(ctx.db()).value),\n-            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAliasDef(i.source(ctx.db()).value),\n+            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source(ctx.db()).value),\n             hir::AssocItem::Const(i) => ast::AssocItem::ConstDef(i.source(ctx.db()).value),\n         })\n         .filter(|t| def_name(&t).is_some())\n@@ -159,9 +159,7 @@ fn add_missing_impl_members_inner(\n             .map(|it| ast_transform::apply(&*ast_transform, it))\n             .map(|it| match it {\n                 ast::AssocItem::Fn(def) => ast::AssocItem::Fn(add_body(def)),\n-                ast::AssocItem::TypeAliasDef(def) => {\n-                    ast::AssocItem::TypeAliasDef(def.remove_bounds())\n-                }\n+                ast::AssocItem::TypeAlias(def) => ast::AssocItem::TypeAlias(def.remove_bounds()),\n                 _ => it,\n             })\n             .map(|it| edit::remove_attrs_and_docs(&it));"}, {"sha": "c3e1f280323da414abd752d754a8f7e213688662", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,9 +1,7 @@\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n-    SyntaxKind::{\n-        CONST_DEF, ENUM_DEF, FN, MODULE, STATIC_DEF, STRUCT_DEF, TRAIT_DEF, VISIBILITY,\n-    },\n+    SyntaxKind::{CONST_DEF, ENUM_DEF, FN, MODULE, STATIC_DEF, STRUCT_DEF, TRAIT_DEF, VISIBILITY},\n     T,\n };\n use test_utils::mark;"}, {"sha": "748be011b57f8b7f2ed62893361f4963201c03a2", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -72,7 +72,7 @@ pub fn get_missing_assoc_items(\n                     }\n                 }\n \n-                ast::AssocItem::TypeAliasDef(t) => {\n+                ast::AssocItem::TypeAlias(t) => {\n                     if let Some(n) = t.name() {\n                         impl_type.insert(n.syntax().to_string());\n                     }"}, {"sha": "1557b7c834311efdcaead2294e2e1f52e8b985a8", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -105,8 +105,8 @@ impl HasSource for Trait {\n     }\n }\n impl HasSource for TypeAlias {\n-    type Ast = ast::TypeAliasDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::TypeAliasDef> {\n+    type Ast = ast::TypeAlias;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::TypeAlias> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }"}, {"sha": "05440596691b4f6971f24ab847be6935c2be8d7e", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -582,7 +582,7 @@ to_def_impls![\n     (crate::Union, ast::UnionDef, union_to_def),\n     (crate::Trait, ast::TraitDef, trait_to_def),\n     (crate::ImplDef, ast::ImplDef, impl_to_def),\n-    (crate::TypeAlias, ast::TypeAliasDef, type_alias_to_def),\n+    (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),\n     (crate::Const, ast::ConstDef, const_to_def),\n     (crate::Static, ast::StaticDef, static_to_def),\n     (crate::Function, ast::Fn, fn_to_def),"}, {"sha": "d23a1974b0cf2a1ead147bd73111cd735c71e645", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -89,10 +89,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn const_to_def(&mut self, src: InFile<ast::ConstDef>) -> Option<ConstId> {\n         self.to_def(src, keys::CONST)\n     }\n-    pub(super) fn type_alias_to_def(\n-        &mut self,\n-        src: InFile<ast::TypeAliasDef>,\n-    ) -> Option<TypeAliasId> {\n+    pub(super) fn type_alias_to_def(&mut self, src: InFile<ast::TypeAlias>) -> Option<TypeAliasId> {\n         self.to_def(src, keys::TYPE_ALIAS)\n     }\n     pub(super) fn record_field_to_def(\n@@ -195,7 +192,7 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.const_to_def(container.with_value(it))?;\n                         DefWithBodyId::from(def).into()\n                     },\n-                    ast::TypeAliasDef(it) => {\n+                    ast::TypeAlias(it) => {\n                         let def = self.type_alias_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n@@ -217,7 +214,7 @@ impl SourceToDefCtx<'_, '_> {\n                     ast::StructDef(it) => self.struct_to_def(container.with_value(it))?.into(),\n                     ast::EnumDef(it) => self.enum_to_def(container.with_value(it))?.into(),\n                     ast::TraitDef(it) => self.trait_to_def(container.with_value(it))?.into(),\n-                    ast::TypeAliasDef(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n+                    ast::TypeAlias(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n                     ast::ImplDef(it) => self.impl_to_def(container.with_value(it))?.into(),\n                     _ => continue,\n                 }"}, {"sha": "f463997e72c93f19e2b7c134f23e397292740456", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -634,7 +634,7 @@ impl ExprCollector<'_> {\n                             def.name(),\n                         )\n                     }\n-                    ast::Item::TypeAliasDef(def) => {\n+                    ast::Item::TypeAlias(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (\n                             TypeAliasLoc { container: container.into(), id }.intern(self.db).into(),"}, {"sha": "ea61ac217730b08cf5b2c6fac64da0d989d2271d", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -421,7 +421,7 @@ mod_items! {\n     Static in statics -> ast::StaticDef,\n     Trait in traits -> ast::TraitDef,\n     Impl in impls -> ast::ImplDef,\n-    TypeAlias in type_aliases -> ast::TypeAliasDef,\n+    TypeAlias in type_aliases -> ast::TypeAlias,\n     Mod in mods -> ast::Module,\n     MacroCall in macro_calls -> ast::MacroCall,\n }\n@@ -592,7 +592,7 @@ pub struct TypeAlias {\n     pub bounds: Box<[TypeBound]>,\n     pub generic_params: GenericParamsId,\n     pub type_ref: Option<TypeRef>,\n-    pub ast_id: FileAstId<ast::TypeAliasDef>,\n+    pub ast_id: FileAstId<ast::TypeAlias>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "4cfc68f53a2737c1ca85f7dd483592969712c20b", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -79,7 +79,7 @@ impl Ctx {\n             | ast::Item::UnionDef(_)\n             | ast::Item::EnumDef(_)\n             | ast::Item::Fn(_)\n-            | ast::Item::TypeAliasDef(_)\n+            | ast::Item::TypeAlias(_)\n             | ast::Item::ConstDef(_)\n             | ast::Item::StaticDef(_)\n             | ast::Item::MacroCall(_) => {\n@@ -104,7 +104,7 @@ impl Ctx {\n             ast::Item::UnionDef(ast) => self.lower_union(ast).map(Into::into),\n             ast::Item::EnumDef(ast) => self.lower_enum(ast).map(Into::into),\n             ast::Item::Fn(ast) => self.lower_function(ast).map(Into::into),\n-            ast::Item::TypeAliasDef(ast) => self.lower_type_alias(ast).map(Into::into),\n+            ast::Item::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n             ast::Item::StaticDef(ast) => self.lower_static(ast).map(Into::into),\n             ast::Item::ConstDef(ast) => Some(self.lower_const(ast).into()),\n             ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n@@ -156,7 +156,7 @@ impl Ctx {\n     fn lower_assoc_item(&mut self, item: &ast::AssocItem) -> Option<AssocItem> {\n         match item {\n             ast::AssocItem::Fn(ast) => self.lower_function(ast).map(Into::into),\n-            ast::AssocItem::TypeAliasDef(ast) => self.lower_type_alias(ast).map(Into::into),\n+            ast::AssocItem::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n             ast::AssocItem::ConstDef(ast) => Some(self.lower_const(ast).into()),\n             ast::AssocItem::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n         }\n@@ -348,7 +348,7 @@ impl Ctx {\n \n     fn lower_type_alias(\n         &mut self,\n-        type_alias: &ast::TypeAliasDef,\n+        type_alias: &ast::TypeAlias,\n     ) -> Option<FileItemTreeId<TypeAlias>> {\n         let name = type_alias.name()?.as_name();\n         let type_ref = type_alias.type_ref().map(|it| self.lower_type_ref(&it));"}, {"sha": "a8f5da1c1244488be763b471f45a476e338c70ba", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -236,7 +236,7 @@ fn smoke() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n             Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n-            > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAliasDef>(8) }\n+            > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAlias>(8) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n             > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]"}, {"sha": "f627eab1f552e14deaca194abc7d046fb032ce8e", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -17,7 +17,7 @@ pub type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n pub const FUNCTION: Key<ast::Fn, FunctionId> = Key::new();\n pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();\n pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n-pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n+pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();"}, {"sha": "7d9050a6b6540700b80f70830f7b2c8405b79706", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This module adds the completion items related to implementing associated\n //! items within a `impl Trait for Struct` block. The current context node\n-//! must be within either a `FN`, `TYPE_ALIAS_DEF`, or `CONST_DEF` node\n+//! must be within either a `FN`, `TYPE_ALIAS`, or `CONST_DEF` node\n //! and an direct child of an `IMPL_DEF`.\n //!\n //! # Examples\n@@ -75,7 +75,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                 }\n             }\n \n-            SyntaxKind::TYPE_ALIAS_DEF => {\n+            SyntaxKind::TYPE_ALIAS => {\n                 for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n                     .into_iter()\n                     .filter_map(|item| match item {\n@@ -107,7 +107,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, ImplDef)> {\n     let (trigger, impl_def_offset) = ctx.token.ancestors().find_map(|p| match p.kind() {\n         SyntaxKind::FN\n-        | SyntaxKind::TYPE_ALIAS_DEF\n+        | SyntaxKind::TYPE_ALIAS\n         | SyntaxKind::CONST_DEF\n         | SyntaxKind::BLOCK_EXPR => Some((p, 2)),\n         SyntaxKind::NAME_REF => Some((p, 5)),"}, {"sha": "6d93726bf204f02091838b1de6faa709aa39686a", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn const_label(node: &ast::ConstDef) -> String {\n     label.trim().to_owned()\n }\n \n-pub(crate) fn type_label(node: &ast::TypeAliasDef) -> String {\n+pub(crate) fn type_label(node: &ast::TypeAlias) -> String {\n     let label: String = node\n         .syntax()\n         .children_with_tokens()"}, {"sha": "4f19c7ed42df1c88fe216b8de085a2736c03c775", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -384,7 +384,7 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n             ast::EnumDef(it) => it.doc_comment_text(),\n             ast::TraitDef(it) => it.doc_comment_text(),\n             ast::Module(it) => it.doc_comment_text(),\n-            ast::TypeAliasDef(it) => it.doc_comment_text(),\n+            ast::TypeAlias(it) => it.doc_comment_text(),\n             ast::ConstDef(it) => it.doc_comment_text(),\n             ast::StaticDef(it) => it.doc_comment_text(),\n             ast::RecordFieldDef(it) => it.doc_comment_text(),\n@@ -409,7 +409,7 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n             ast::EnumDef(it) => it.short_label(),\n             ast::TraitDef(it) => it.short_label(),\n             ast::Module(it) => it.short_label(),\n-            ast::TypeAliasDef(it) => it.short_label(),\n+            ast::TypeAlias(it) => it.short_label(),\n             ast::ConstDef(it) => it.short_label(),\n             ast::StaticDef(it) => it.short_label(),\n             ast::RecordFieldDef(it) => it.short_label(),"}, {"sha": "e2c95be06fda2a025d2f89771e0255c672352405", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -47,7 +47,7 @@ impl ShortLabel for ast::Module {\n     }\n }\n \n-impl ShortLabel for ast::TypeAliasDef {\n+impl ShortLabel for ast::TypeAlias {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"type \")\n     }"}, {"sha": "8ef977761d27d6e777133ca5fc83aacd835e8735", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -132,7 +132,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             ast::EnumVariant(it) => decl(it),\n             ast::TraitDef(it) => decl(it),\n             ast::Module(it) => decl(it),\n-            ast::TypeAliasDef(it) => {\n+            ast::TypeAlias(it) => {\n                 let ty = it.type_ref();\n                 decl_with_type_ref(it, ty)\n             },\n@@ -339,7 +339,7 @@ fn very_obsolete() {}\n                         label: \"T\",\n                         navigation_range: 186..187,\n                         node_range: 181..193,\n-                        kind: TYPE_ALIAS_DEF,\n+                        kind: TYPE_ALIAS,\n                         detail: Some(\n                             \"()\",\n                         ),"}, {"sha": "8d52fb6e49ad5fdbfd984157cbc3f0d64826fef6", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -709,7 +709,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n         ENUM_DEF => HighlightTag::Enum,\n         UNION_DEF => HighlightTag::Union,\n         TRAIT_DEF => HighlightTag::Trait,\n-        TYPE_ALIAS_DEF => HighlightTag::TypeAlias,\n+        TYPE_ALIAS => HighlightTag::TypeAlias,\n         TYPE_PARAM => HighlightTag::TypeParam,\n         RECORD_FIELD_DEF => HighlightTag::Field,\n         MODULE => HighlightTag::Module,"}, {"sha": "0e73a893200038013cb38791ea49629879a9bb42", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -182,7 +182,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                 let def: hir::Const = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::TypeAliasDef(it) => {\n+            ast::TypeAlias(it) => {\n                 let def: hir::TypeAlias = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },"}, {"sha": "b4e85b88e869c707ebd1729aab6ecf9a02dfad15", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -344,7 +344,7 @@ impl Query {\n }\n \n fn is_type(kind: SyntaxKind) -> bool {\n-    matches!(kind, STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF)\n+    matches!(kind, STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS)\n }\n \n /// The actual data that is stored in the index. It should be as compact as\n@@ -402,7 +402,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n             ast::EnumDef(it) => decl(it),\n             ast::TraitDef(it) => decl(it),\n             ast::Module(it) => decl(it),\n-            ast::TypeAliasDef(it) => decl(it),\n+            ast::TypeAlias(it) => decl(it),\n             ast::ConstDef(it) => decl(it),\n             ast::StaticDef(it) => decl(it),\n             ast::MacroCall(it) => {"}, {"sha": "664b23f6adb05b4f4f3d38926c794c551c132182", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -380,7 +380,7 @@ fn type_def(p: &mut Parser, m: Marker) {\n         types::type_(p);\n     }\n     p.expect(T![;]);\n-    m.complete(p, TYPE_ALIAS_DEF);\n+    m.complete(p, TYPE_ALIAS);\n }\n \n pub(crate) fn mod_item(p: &mut Parser, m: Marker) {"}, {"sha": "b84c3fc79b7d41a49e234d205bca9f4a16a025c1", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -135,7 +135,7 @@ pub enum SyntaxKind {\n     CONST_DEF,\n     TRAIT_DEF,\n     IMPL_DEF,\n-    TYPE_ALIAS_DEF,\n+    TYPE_ALIAS,\n     MACRO_CALL,\n     TOKEN_TREE,\n     MACRO_DEF,"}, {"sha": "0110300aff2a1f2acb94f556b56e6771cbc5380e", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -192,9 +192,9 @@ impl ast::RecordFieldList {\n     }\n }\n \n-impl ast::TypeAliasDef {\n+impl ast::TypeAlias {\n     #[must_use]\n-    pub fn remove_bounds(&self) -> ast::TypeAliasDef {\n+    pub fn remove_bounds(&self) -> ast::TypeAlias {\n         let colon = match self.colon_token() {\n             Some(it) => it,\n             None => return self.clone(),"}, {"sha": "ad8ccf1ceafa028de48b42c9f97d2c693f2efd5b", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -183,15 +183,15 @@ impl TraitDef {\n     pub fn assoc_item_list(&self) -> Option<AssocItemList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeAliasDef {\n+pub struct TypeAlias {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TypeAliasDef {}\n-impl ast::NameOwner for TypeAliasDef {}\n-impl ast::VisibilityOwner for TypeAliasDef {}\n-impl ast::TypeParamsOwner for TypeAliasDef {}\n-impl ast::TypeBoundsOwner for TypeAliasDef {}\n-impl TypeAliasDef {\n+impl ast::AttrsOwner for TypeAlias {}\n+impl ast::NameOwner for TypeAlias {}\n+impl ast::VisibilityOwner for TypeAlias {}\n+impl ast::TypeParamsOwner for TypeAlias {}\n+impl ast::TypeBoundsOwner for TypeAlias {}\n+impl TypeAlias {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![type]) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n@@ -384,6 +384,13 @@ impl SelfParam {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TypeBoundList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl TypeBoundList {\n+    pub fn bounds(&self) -> AstChildren<TypeBound> { support::children(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -444,13 +451,6 @@ impl EnumVariant {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeBoundList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl TypeBoundList {\n-    pub fn bounds(&self) -> AstChildren<TypeBound> { support::children(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AssocItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1284,7 +1284,7 @@ pub enum Item {\n     StaticDef(StaticDef),\n     StructDef(StructDef),\n     TraitDef(TraitDef),\n-    TypeAliasDef(TypeAliasDef),\n+    TypeAlias(TypeAlias),\n     UnionDef(UnionDef),\n     Use(Use),\n }\n@@ -1365,7 +1365,7 @@ pub enum Expr {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItem {\n     Fn(Fn),\n-    TypeAliasDef(TypeAliasDef),\n+    TypeAlias(TypeAlias),\n     ConstDef(ConstDef),\n     MacroCall(MacroCall),\n }\n@@ -1543,8 +1543,8 @@ impl AstNode for TraitDef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TypeAliasDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ALIAS_DEF }\n+impl AstNode for TypeAlias {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ALIAS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1752,6 +1752,17 @@ impl AstNode for SelfParam {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for TypeBoundList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for RecordFieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_DEF_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1818,17 +1829,6 @@ impl AstNode for EnumVariant {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TypeBoundList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for AssocItemList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ASSOC_ITEM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2808,8 +2808,8 @@ impl From<StructDef> for Item {\n impl From<TraitDef> for Item {\n     fn from(node: TraitDef) -> Item { Item::TraitDef(node) }\n }\n-impl From<TypeAliasDef> for Item {\n-    fn from(node: TypeAliasDef) -> Item { Item::TypeAliasDef(node) }\n+impl From<TypeAlias> for Item {\n+    fn from(node: TypeAlias) -> Item { Item::TypeAlias(node) }\n }\n impl From<UnionDef> for Item {\n     fn from(node: UnionDef) -> Item { Item::UnionDef(node) }\n@@ -2821,9 +2821,7 @@ impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL\n-            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | UNION_DEF | USE => {\n-                true\n-            }\n+            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS | UNION_DEF | USE => true,\n             _ => false,\n         }\n     }\n@@ -2840,7 +2838,7 @@ impl AstNode for Item {\n             STATIC_DEF => Item::StaticDef(StaticDef { syntax }),\n             STRUCT_DEF => Item::StructDef(StructDef { syntax }),\n             TRAIT_DEF => Item::TraitDef(TraitDef { syntax }),\n-            TYPE_ALIAS_DEF => Item::TypeAliasDef(TypeAliasDef { syntax }),\n+            TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n             UNION_DEF => Item::UnionDef(UnionDef { syntax }),\n             USE => Item::Use(Use { syntax }),\n             _ => return None,\n@@ -2860,7 +2858,7 @@ impl AstNode for Item {\n             Item::StaticDef(it) => &it.syntax,\n             Item::StructDef(it) => &it.syntax,\n             Item::TraitDef(it) => &it.syntax,\n-            Item::TypeAliasDef(it) => &it.syntax,\n+            Item::TypeAlias(it) => &it.syntax,\n             Item::UnionDef(it) => &it.syntax,\n             Item::Use(it) => &it.syntax,\n         }\n@@ -3258,8 +3256,8 @@ impl AstNode for Expr {\n impl From<Fn> for AssocItem {\n     fn from(node: Fn) -> AssocItem { AssocItem::Fn(node) }\n }\n-impl From<TypeAliasDef> for AssocItem {\n-    fn from(node: TypeAliasDef) -> AssocItem { AssocItem::TypeAliasDef(node) }\n+impl From<TypeAlias> for AssocItem {\n+    fn from(node: TypeAlias) -> AssocItem { AssocItem::TypeAlias(node) }\n }\n impl From<ConstDef> for AssocItem {\n     fn from(node: ConstDef) -> AssocItem { AssocItem::ConstDef(node) }\n@@ -3270,14 +3268,14 @@ impl From<MacroCall> for AssocItem {\n impl AstNode for AssocItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            FN | TYPE_ALIAS_DEF | CONST_DEF | MACRO_CALL => true,\n+            FN | TYPE_ALIAS | CONST_DEF | MACRO_CALL => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             FN => AssocItem::Fn(Fn { syntax }),\n-            TYPE_ALIAS_DEF => AssocItem::TypeAliasDef(TypeAliasDef { syntax }),\n+            TYPE_ALIAS => AssocItem::TypeAlias(TypeAlias { syntax }),\n             CONST_DEF => AssocItem::ConstDef(ConstDef { syntax }),\n             MACRO_CALL => AssocItem::MacroCall(MacroCall { syntax }),\n             _ => return None,\n@@ -3287,7 +3285,7 @@ impl AstNode for AssocItem {\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             AssocItem::Fn(it) => &it.syntax,\n-            AssocItem::TypeAliasDef(it) => &it.syntax,\n+            AssocItem::TypeAlias(it) => &it.syntax,\n             AssocItem::ConstDef(it) => &it.syntax,\n             AssocItem::MacroCall(it) => &it.syntax,\n         }\n@@ -3525,7 +3523,7 @@ impl std::fmt::Display for TraitDef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TypeAliasDef {\n+impl std::fmt::Display for TypeAlias {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3620,6 +3618,11 @@ impl std::fmt::Display for SelfParam {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for TypeBoundList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for RecordFieldDefList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3650,11 +3653,6 @@ impl std::fmt::Display for EnumVariant {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TypeBoundList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for AssocItemList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "a7a301d6b0fc20d1a143a613cd76acc347930d20", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -485,6 +485,6 @@ impl ast::DocCommentsOwner for ast::TraitDef {}\n impl ast::DocCommentsOwner for ast::Module {}\n impl ast::DocCommentsOwner for ast::StaticDef {}\n impl ast::DocCommentsOwner for ast::ConstDef {}\n-impl ast::DocCommentsOwner for ast::TypeAliasDef {}\n+impl ast::DocCommentsOwner for ast::TypeAlias {}\n impl ast::DocCommentsOwner for ast::ImplDef {}\n impl ast::DocCommentsOwner for ast::MacroCall {}"}, {"sha": "87a7acd0978316d4fac74f8576d8efa380a297ec", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -146,7 +146,7 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | CONST_DEF | TYPE_ALIAS_DEF | STRUCT_DEF | ENUM_DEF | ENUM_VARIANT | FN\n+        MACRO_CALL | CONST_DEF | TYPE_ALIAS | STRUCT_DEF | ENUM_DEF | ENUM_VARIANT | FN\n         | TRAIT_DEF | MODULE | RECORD_FIELD_DEF | STATIC_DEF => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();"}, {"sha": "6a274938167c9c84e57fbefece84cbac71fcf622", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -4,7 +4,7 @@ mod block;\n \n use crate::{\n     ast, match_ast, AstNode, SyntaxError,\n-    SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST_DEF, FN, INT_NUMBER, STRING, TYPE_ALIAS_DEF},\n+    SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST_DEF, FN, INT_NUMBER, STRING, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n };\n use rustc_lexer::unescape::{\n@@ -200,7 +200,7 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         None => return,\n     };\n     match parent.kind() {\n-        FN | CONST_DEF | TYPE_ALIAS_DEF => (),\n+        FN | CONST_DEF | TYPE_ALIAS => (),\n         _ => return,\n     }\n "}, {"sha": "c0ba4fba91aacac11c3ddf933058276dcc6ea61d", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -46,7 +46,7 @@ SOURCE_FILE@0..118\n           L_CURLY@49..50 \"{\"\n           R_CURLY@50..51 \"}\"\n       WHITESPACE@51..56 \"\\n    \"\n-      TYPE_ALIAS_DEF@56..81\n+      TYPE_ALIAS@56..81\n         VISIBILITY@56..66\n           PUB_KW@56..59 \"pub\"\n           L_PAREN@59..60 \"(\""}, {"sha": "19b3540e971ffa2725edc1d04c52056dba8734f2", "filename": "crates/ra_syntax/test_data/parser/err/0044_unexpected_for_type.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..239\n-  TYPE_ALIAS_DEF@0..30\n+  TYPE_ALIAS@0..30\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..11\n@@ -26,7 +26,7 @@ SOURCE_FILE@0..239\n                 IDENT@26..29 \"u32\"\n     SEMICOLON@29..30 \";\"\n   WHITESPACE@30..31 \"\\n\"\n-  TYPE_ALIAS_DEF@31..64\n+  TYPE_ALIAS@31..64\n     TYPE_KW@31..35 \"type\"\n     WHITESPACE@35..36 \" \"\n     NAME@36..42\n@@ -57,7 +57,7 @@ SOURCE_FILE@0..239\n         R_PAREN@62..63 \")\"\n     SEMICOLON@63..64 \";\"\n   WHITESPACE@64..65 \"\\n\"\n-  TYPE_ALIAS_DEF@65..95\n+  TYPE_ALIAS@65..95\n     TYPE_KW@65..69 \"type\"\n     WHITESPACE@69..70 \" \"\n     NAME@70..78\n@@ -83,7 +83,7 @@ SOURCE_FILE@0..239\n         R_BRACK@93..94 \"]\"\n     SEMICOLON@94..95 \";\"\n   WHITESPACE@95..96 \"\\n\"\n-  TYPE_ALIAS_DEF@96..149\n+  TYPE_ALIAS@96..149\n     TYPE_KW@96..100 \"type\"\n     WHITESPACE@100..101 \" \"\n     NAME@101..109"}, {"sha": "0b9bbec0776803e92e5632ce67307eea1ecb3031", "filename": "crates/ra_syntax/test_data/parser/inline/err/0001_array_type_missing_semi.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..18\n-  TYPE_ALIAS_DEF@0..12\n+  TYPE_ALIAS@0..12\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "2409eefe7b4a93b1a23d7c5ba7f704bf7debfb7f", "filename": "crates/ra_syntax/test_data/parser/inline/err/0003_pointer_type_no_mutability.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..14\n-  TYPE_ALIAS_DEF@0..13\n+  TYPE_ALIAS@0..13\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "776022fd936d1bbef313e58a54b43738ab56f219", "filename": "crates/ra_syntax/test_data/parser/inline/err/0005_fn_pointer_type_missing_fn.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..20\n-  TYPE_ALIAS_DEF@0..15\n+  TYPE_ALIAS@0..15\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "22c7c5f0d491ada24534894dafdca3a6c3d370ed", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -14,7 +14,7 @@ SOURCE_FILE@0..62\n             NAME_REF@14..21\n               IDENT@14..21 \"default\"\n       WHITESPACE@21..22 \" \"\n-      TYPE_ALIAS_DEF@22..35\n+      TYPE_ALIAS@22..35\n         TYPE_KW@22..26 \"type\"\n         WHITESPACE@26..27 \" \"\n         NAME@27..28"}, {"sha": "a62ce23e6a155758b35febdef5d60f7841bca8c0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0001_trait_item_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -11,7 +11,7 @@ SOURCE_FILE@0..83\n     ASSOC_ITEM_LIST@7..82\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..13 \"\\n    \"\n-      TYPE_ALIAS_DEF@13..27\n+      TYPE_ALIAS@13..27\n         TYPE_KW@13..17 \"type\"\n         WHITESPACE@17..18 \" \"\n         NAME@18..19"}, {"sha": "ace8ad050ad5e28664257f30a575feaed2cfe455", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0004_value_parameters_no_patterns.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..39\n-  TYPE_ALIAS_DEF@0..38\n+  TYPE_ALIAS@0..38\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "28c94bfd64fb5436f090bd8611d92cb307877bcd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0012_type_item_where_clause.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..31\n-  TYPE_ALIAS_DEF@0..30\n+  TYPE_ALIAS@0..30\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..8"}, {"sha": "845b32e6d49666eb91be9b94301648d1020754b0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0013_pointer_type_mut.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..36\n-  TYPE_ALIAS_DEF@0..17\n+  TYPE_ALIAS@0..17\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -16,7 +16,7 @@ SOURCE_FILE@0..36\n         R_PAREN@15..16 \")\"\n     SEMICOLON@16..17 \";\"\n   WHITESPACE@17..18 \"\\n\"\n-  TYPE_ALIAS_DEF@18..35\n+  TYPE_ALIAS@18..35\n     TYPE_KW@18..22 \"type\"\n     WHITESPACE@22..23 \" \"\n     NAME@23..24"}, {"sha": "b1d5106ce9acc9d7a9d4fe9946637c83eb7a2c05", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0014_never_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  TYPE_ALIAS_DEF@0..15\n+  TYPE_ALIAS@0..15\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..10"}, {"sha": "c131df1c95137fa3148f07a4845acb0a36f00602", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0017_array_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..19\n-  TYPE_ALIAS_DEF@0..18\n+  TYPE_ALIAS@0..18\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "3ae870e17aecd82e89b3fc1f1fed715379a153a5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0021_impl_item_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -11,7 +11,7 @@ SOURCE_FILE@0..89\n     ASSOC_ITEM_LIST@7..88\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..13 \"\\n    \"\n-      TYPE_ALIAS_DEF@13..26\n+      TYPE_ALIAS@13..26\n         TYPE_KW@13..17 \"type\"\n         WHITESPACE@17..18 \" \"\n         NAME@18..19"}, {"sha": "57008e5fea48af01fc93925e50a4f8d17c897b7e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0023_placeholder_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..22\n-  TYPE_ALIAS_DEF@0..21\n+  TYPE_ALIAS@0..21\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..16"}, {"sha": "fd819ea370e60c0cd37073e646d1ba93d96f0ea0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0025_slice_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..15\n-  TYPE_ALIAS_DEF@0..14\n+  TYPE_ALIAS@0..14\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "f45f3cab89c4475c8e4a4e5c1d39e65bebe8b7a2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0028_impl_trait_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..43\n-  TYPE_ALIAS_DEF@0..42\n+  TYPE_ALIAS@0..42\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "79a5ee339a23ad7c5738065130e858f847483ea5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0032_fn_pointer_type.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..113\n-  TYPE_ALIAS_DEF@0..14\n+  TYPE_ALIAS@0..14\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..113\n         R_PAREN@12..13 \")\"\n     SEMICOLON@13..14 \";\"\n   WHITESPACE@14..15 \"\\n\"\n-  TYPE_ALIAS_DEF@15..36\n+  TYPE_ALIAS@15..36\n     TYPE_KW@15..19 \"type\"\n     WHITESPACE@19..20 \" \"\n     NAME@20..21\n@@ -31,7 +31,7 @@ SOURCE_FILE@0..113\n         R_PAREN@34..35 \")\"\n     SEMICOLON@35..36 \";\"\n   WHITESPACE@36..37 \"\\n\"\n-  TYPE_ALIAS_DEF@37..69\n+  TYPE_ALIAS@37..69\n     TYPE_KW@37..41 \"type\"\n     WHITESPACE@41..42 \" \"\n     NAME@42..43\n@@ -53,7 +53,7 @@ SOURCE_FILE@0..113\n         R_PAREN@67..68 \")\"\n     SEMICOLON@68..69 \";\"\n   WHITESPACE@69..70 \"\\n\"\n-  TYPE_ALIAS_DEF@70..112\n+  TYPE_ALIAS@70..112\n     TYPE_KW@70..74 \"type\"\n     WHITESPACE@74..75 \" \"\n     NAME@75..76"}, {"sha": "c522f76cff0a098771dd353290b9a42e00ed88c1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0033_reference_type;.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..54\n-  TYPE_ALIAS_DEF@0..13\n+  TYPE_ALIAS@0..13\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..54\n         R_PAREN@11..12 \")\"\n     SEMICOLON@12..13 \";\"\n   WHITESPACE@13..14 \"\\n\"\n-  TYPE_ALIAS_DEF@14..35\n+  TYPE_ALIAS@14..35\n     TYPE_KW@14..18 \"type\"\n     WHITESPACE@18..19 \" \"\n     NAME@19..20\n@@ -31,7 +31,7 @@ SOURCE_FILE@0..54\n         R_PAREN@33..34 \")\"\n     SEMICOLON@34..35 \";\"\n   WHITESPACE@35..36 \"\\n\"\n-  TYPE_ALIAS_DEF@36..53\n+  TYPE_ALIAS@36..53\n     TYPE_KW@36..40 \"type\"\n     WHITESPACE@40..41 \" \"\n     NAME@41..42"}, {"sha": "b6379e62f8c1590eebbd5f5b1e43aef3aa5c7cce", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0037_qual_paths.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..71\n-  TYPE_ALIAS_DEF@0..26\n+  TYPE_ALIAS@0..26\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "2185d3c9152ae9fcfaba3aa67cc08062f094469c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0039_type_arg.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..46\n-  TYPE_ALIAS_DEF@0..45\n+  TYPE_ALIAS@0..45\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "e89284c1405b2d6f4113bb6897d4057eab86066b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0046_singleton_tuple_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..17\n-  TYPE_ALIAS_DEF@0..16\n+  TYPE_ALIAS@0..16\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "6330dbf9e6041f093da5a0629114813d81afeca8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0051_unit_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..13\n-  TYPE_ALIAS_DEF@0..12\n+  TYPE_ALIAS@0..12\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "9bc36bea70a4bfb416b57ba00ac30aac79a8dc05", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0052_path_type.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..71\n-  TYPE_ALIAS_DEF@0..13\n+  TYPE_ALIAS@0..13\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..71\n             IDENT@9..12 \"Foo\"\n     SEMICOLON@12..13 \";\"\n   WHITESPACE@13..14 \"\\n\"\n-  TYPE_ALIAS_DEF@14..29\n+  TYPE_ALIAS@14..29\n     TYPE_KW@14..18 \"type\"\n     WHITESPACE@18..19 \" \"\n     NAME@19..20\n@@ -30,7 +30,7 @@ SOURCE_FILE@0..71\n             IDENT@25..28 \"Foo\"\n     SEMICOLON@28..29 \";\"\n   WHITESPACE@29..30 \"\\n\"\n-  TYPE_ALIAS_DEF@30..49\n+  TYPE_ALIAS@30..49\n     TYPE_KW@30..34 \"type\"\n     WHITESPACE@34..35 \" \"\n     NAME@35..36\n@@ -49,7 +49,7 @@ SOURCE_FILE@0..71\n             IDENT@45..48 \"Foo\"\n     SEMICOLON@48..49 \";\"\n   WHITESPACE@49..50 \"\\n\"\n-  TYPE_ALIAS_DEF@50..70\n+  TYPE_ALIAS@50..70\n     TYPE_KW@50..54 \"type\"\n     WHITESPACE@54..55 \" \"\n     NAME@55..56"}, {"sha": "629fea99d4f4fb21edc097d1ab197a7447ce8a2a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0065_dyn_trait_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..42\n-  TYPE_ALIAS_DEF@0..41\n+  TYPE_ALIAS@0..41\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "0123cb1080e0d24d12dfc1feaae0d393bf089134", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0073_type_item_type_params.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..21\n-  TYPE_ALIAS_DEF@0..20\n+  TYPE_ALIAS@0..20\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..11"}, {"sha": "2befc8388ec70abcb7c245c0b679a425780f0850", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0078_type_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  TYPE_ALIAS_DEF@0..15\n+  TYPE_ALIAS@0..15\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..8"}, {"sha": "175ec984407659fd3116074763c66049e002fc29", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0081_for_type.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..121\n-  TYPE_ALIAS_DEF@0..28\n+  TYPE_ALIAS@0..28\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -29,7 +29,7 @@ SOURCE_FILE@0..121\n             R_PAREN@26..27 \")\"\n     SEMICOLON@27..28 \";\"\n   WHITESPACE@28..29 \"\\n\"\n-  TYPE_ALIAS_DEF@29..81\n+  TYPE_ALIAS@29..81\n     TYPE_KW@29..33 \"type\"\n     WHITESPACE@33..34 \" \"\n     NAME@34..35\n@@ -74,7 +74,7 @@ SOURCE_FILE@0..121\n             R_PAREN@79..80 \")\"\n     SEMICOLON@80..81 \";\"\n   WHITESPACE@81..82 \"\\n\"\n-  TYPE_ALIAS_DEF@82..120\n+  TYPE_ALIAS@82..120\n     TYPE_KW@82..86 \"type\"\n     WHITESPACE@86..87 \" \"\n     NAME@87..90"}, {"sha": "ee889496686f7e125c6a61eadbb755dee3e8dac2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0084_paren_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0084_paren_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0084_paren_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0084_paren_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  TYPE_ALIAS_DEF@0..15\n+  TYPE_ALIAS@0..15\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "95686977fee88adc82e9e4a7d97d6efdc4e5dd21", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0092_fn_pointer_type_with_ret.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0092_fn_pointer_type_with_ret.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0092_fn_pointer_type_with_ret.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0092_fn_pointer_type_with_ret.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..21\n-  TYPE_ALIAS_DEF@0..20\n+  TYPE_ALIAS@0..20\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "3f53d60c09e939a6265e0d03bf34366acf369e3b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0104_path_fn_trait_args.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..29\n-  TYPE_ALIAS_DEF@0..28\n+  TYPE_ALIAS@0..28\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "f3d4ad72c325ff0728ff3a08c5416383a3127d63", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0117_macro_call_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..41\n-  TYPE_ALIAS_DEF@0..16\n+  TYPE_ALIAS@0..16\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -18,7 +18,7 @@ SOURCE_FILE@0..41\n         R_PAREN@14..15 \")\"\n     SEMICOLON@15..16 \";\"\n   WHITESPACE@16..17 \"\\n\"\n-  TYPE_ALIAS_DEF@17..40\n+  TYPE_ALIAS@17..40\n     TYPE_KW@17..21 \"type\"\n     WHITESPACE@21..22 \" \"\n     NAME@22..23"}, {"sha": "d47071a911a9e039edcd48df382b24264d3392b2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0131_existential_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0131_existential_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0131_existential_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0131_existential_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..37\n-  TYPE_ALIAS_DEF@0..36\n+  TYPE_ALIAS@0..36\n     EXISTENTIAL_KW@0..11 \"existential\"\n     WHITESPACE@11..12 \" \"\n     TYPE_KW@12..16 \"type\""}, {"sha": "de02238df782cf38670b306687deb142deadcd98", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_default_fn_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -19,7 +19,7 @@ SOURCE_FILE@0..69\n     ASSOC_ITEM_LIST@15..68\n       L_CURLY@15..16 \"{\"\n       WHITESPACE@16..21 \"\\n    \"\n-      TYPE_ALIAS_DEF@21..42\n+      TYPE_ALIAS@21..42\n         DEFAULT_KW@21..28 \"default\"\n         WHITESPACE@28..29 \" \"\n         TYPE_KW@29..33 \"type\""}, {"sha": "69b4d73d728fdc7cd187f77426eefed1cf09a7a9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0154_fn_pointer_param_ident_path.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0154_fn_pointer_param_ident_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0154_fn_pointer_param_ident_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0154_fn_pointer_param_ident_path.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..55\n-  TYPE_ALIAS_DEF@0..24\n+  TYPE_ALIAS@0..24\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..8\n@@ -25,7 +25,7 @@ SOURCE_FILE@0..55\n         R_PAREN@22..23 \")\"\n     SEMICOLON@23..24 \";\"\n   WHITESPACE@24..25 \"\\n\"\n-  TYPE_ALIAS_DEF@25..54\n+  TYPE_ALIAS@25..54\n     TYPE_KW@25..29 \"type\"\n     WHITESPACE@29..30 \" \"\n     NAME@30..33"}, {"sha": "ccca045b6b6977613cc7777df84ddb7475bd9a6a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0157_fn_pointer_unnamed_arg.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_fn_pointer_unnamed_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_fn_pointer_unnamed_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_fn_pointer_unnamed_arg.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..23\n-  TYPE_ALIAS_DEF@0..22\n+  TYPE_ALIAS@0..22\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..8"}, {"sha": "7447d516ed10760673537b4b968c11f2c10c98a8", "filename": "crates/ra_syntax/test_data/parser/ok/0055_dot_dot_dot.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..49\n-  TYPE_ALIAS_DEF@0..12\n+  TYPE_ALIAS@0..12\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "34a0d039c7f27508cc55fc753f33a70ac518acc5", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n         SyntaxKind::TRAIT_DEF => lsp_types::SymbolKind::Interface,\n         SyntaxKind::MACRO_CALL => lsp_types::SymbolKind::Function,\n         SyntaxKind::MODULE => lsp_types::SymbolKind::Module,\n-        SyntaxKind::TYPE_ALIAS_DEF => lsp_types::SymbolKind::TypeParameter,\n+        SyntaxKind::TYPE_ALIAS => lsp_types::SymbolKind::TypeParameter,\n         SyntaxKind::RECORD_FIELD_DEF => lsp_types::SymbolKind::Field,\n         SyntaxKind::STATIC_DEF => lsp_types::SymbolKind::Constant,\n         SyntaxKind::CONST_DEF => lsp_types::SymbolKind::Constant,"}, {"sha": "e66e96d64952a207f61f5bc98c1d3e2cbe10aa3f", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -105,7 +105,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"CONST_DEF\",\n         \"TRAIT_DEF\",\n         \"IMPL_DEF\",\n-        \"TYPE_ALIAS_DEF\",\n+        \"TYPE_ALIAS\",\n         \"MACRO_CALL\",\n         \"TOKEN_TREE\",\n         \"MACRO_DEF\","}, {"sha": "760a8dd95a994c12b8ef357e0b7e37c0263bbf32", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb2f8063444b11257111f4f8ade990ec810e0361/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/eb2f8063444b11257111f4f8ade990ec810e0361/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=eb2f8063444b11257111f4f8ade990ec810e0361", "patch": "@@ -15,7 +15,7 @@ Item =\n | StaticDef\n | StructDef\n | TraitDef\n-| TypeAliasDef\n+| TypeAlias\n | UnionDef\n | Use\n \n@@ -72,6 +72,10 @@ Param =\n RetType =\n   '->' TypeRef\n \n+TypeAlias =\n+  Attr* Visibility? 'default'? 'type' Name TypeParamList? (':' TypeBoundList?)? WhereClause?\n+  '=' TypeRef ';'\n+\n StructDef =\n   Attr* Visibility? 'struct' Name TypeParamList? (\n     WhereClause?  (RecordFieldDefList | ';')\n@@ -124,10 +128,6 @@ StaticDef =\n   Attr* Visibility? 'static'? 'mut'? 'static' Name ':' ascribed_type:TypeRef\n   '=' body:Expr ';'\n \n-TypeAliasDef =\n-  Attr* Visibility? 'default'? 'type' Name TypeParamList? WhereClause? (':' TypeBoundList?)?\n-  '=' TypeRef ';'\n-\n ImplDef =\n  Attr* Visibility? 'const'? 'default'? 'unsafe'? 'impl' TypeParamList? '!'? 'for'\n  WhereClause?\n@@ -474,7 +474,7 @@ TypeRef =\n \n AssocItem =\n   Fn\n-| TypeAliasDef\n+| TypeAlias\n | ConstDef\n | MacroCall\n "}]}