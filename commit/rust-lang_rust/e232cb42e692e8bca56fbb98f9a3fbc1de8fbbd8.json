{"sha": "e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "node_id": "C_kwDOAAsO6NoAKGUyMzJjYjQyZTY5MmU4YmNhNTZmYmI5OGY5YTNmYmMxZGU4ZmJiZDg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-09T10:52:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-09T10:52:02Z"}, "message": "Rollup merge of #95308 - bjorn3:more_stable_proc_macro, r=Mark-Simulacrum\n\nReduce the amount of unstable features used in libproc_macro\n\nThis makes it easier to adapt the source for stable when copying it into rust-analyzer to load rustc compiled proc macros.", "tree": {"sha": "b3b188efa6158941453b3af0c44a096c3176317c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3b188efa6158941453b3af0c44a096c3176317c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUWVSCRBK7hj4Ov3rIwAA0CIIAJJuQJ5riZenbTbGWP3vTLkt\nyMa494MWWd2xzMFuqjWDBUKQxcu1yoHXSnDymW+Ph5h8leGm3RR7qEDkbrqHK6Ye\ns8CF9BBGHOL+QTxV5UJS+lsBJ+T8K+rJTwyKyERzVA2LycciY1s34WqOycfRcuD8\n31x3S6FVmVymCX93L/I61G5W4lFdyrXhdOAYL5i6m7AjIcMP1D7c8EKLMEjFX159\nt/50w2FmwZze0AAP2eieQsGgIgvrF2p5ToNnj2ygqQ4xmDDkdG/glFjXvT9RxHrV\nElEjGR1sar8sqd+wXg+vX6oZKC/06s2zA1OoY9GwQoIdcz9bpSNfvanhjpILWe0=\n=pMOS\n-----END PGP SIGNATURE-----\n", "payload": "tree b3b188efa6158941453b3af0c44a096c3176317c\nparent 399dd8049d4b27329350937e3e17077205bdc0bf\nparent 7eda975b06a0896139e6ab0d23df22c6d357e146\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649501522 +0200\ncommitter GitHub <noreply@github.com> 1649501522 +0200\n\nRollup merge of #95308 - bjorn3:more_stable_proc_macro, r=Mark-Simulacrum\n\nReduce the amount of unstable features used in libproc_macro\n\nThis makes it easier to adapt the source for stable when copying it into rust-analyzer to load rustc compiled proc macros.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "html_url": "https://github.com/rust-lang/rust/commit/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399dd8049d4b27329350937e3e17077205bdc0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/399dd8049d4b27329350937e3e17077205bdc0bf", "html_url": "https://github.com/rust-lang/rust/commit/399dd8049d4b27329350937e3e17077205bdc0bf"}, {"sha": "7eda975b06a0896139e6ab0d23df22c6d357e146", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eda975b06a0896139e6ab0d23df22c6d357e146", "html_url": "https://github.com/rust-lang/rust/commit/7eda975b06a0896139e6ab0d23df22c6d357e146"}], "stats": {"total": 86, "additions": 54, "deletions": 32}, "files": [{"sha": "cf51d8da16db5afd3136797712fcb56230b751d9", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "patch": "@@ -2,6 +2,8 @@\n \n use super::*;\n \n+use std::marker::PhantomData;\n+\n macro_rules! define_handles {\n     (\n         'owned: $($oty:ident,)*\n@@ -45,20 +47,25 @@ macro_rules! define_handles {\n \n         $(\n             #[repr(C)]\n-            pub(crate) struct $oty(handle::Handle);\n-            impl !Send for $oty {}\n-            impl !Sync for $oty {}\n+            pub(crate) struct $oty {\n+                handle: handle::Handle,\n+                // Prevent Send and Sync impls\n+                _marker: PhantomData<*mut ()>,\n+            }\n \n             // Forward `Drop::drop` to the inherent `drop` method.\n             impl Drop for $oty {\n                 fn drop(&mut self) {\n-                    $oty(self.0).drop();\n+                    $oty {\n+                        handle: self.handle,\n+                        _marker: PhantomData,\n+                    }.drop();\n                 }\n             }\n \n             impl<S> Encode<S> for $oty {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    let handle = self.0;\n+                    let handle = self.handle;\n                     mem::forget(self);\n                     handle.encode(w, s);\n                 }\n@@ -74,7 +81,7 @@ macro_rules! define_handles {\n \n             impl<S> Encode<S> for &$oty {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    self.0.encode(w, s);\n+                    self.handle.encode(w, s);\n                 }\n             }\n \n@@ -88,7 +95,7 @@ macro_rules! define_handles {\n \n             impl<S> Encode<S> for &mut $oty {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    self.0.encode(w, s);\n+                    self.handle.encode(w, s);\n                 }\n             }\n \n@@ -113,21 +120,26 @@ macro_rules! define_handles {\n \n             impl<S> DecodeMut<'_, '_, S> for $oty {\n                 fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n-                    $oty(handle::Handle::decode(r, s))\n+                    $oty {\n+                        handle: handle::Handle::decode(r, s),\n+                        _marker: PhantomData,\n+                    }\n                 }\n             }\n         )*\n \n         $(\n             #[repr(C)]\n             #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-            pub(crate) struct $ity(handle::Handle);\n-            impl !Send for $ity {}\n-            impl !Sync for $ity {}\n+            pub(crate) struct $ity {\n+                handle: handle::Handle,\n+                // Prevent Send and Sync impls\n+                _marker: PhantomData<*mut ()>,\n+            }\n \n             impl<S> Encode<S> for $ity {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    self.0.encode(w, s);\n+                    self.handle.encode(w, s);\n                 }\n             }\n \n@@ -149,7 +161,10 @@ macro_rules! define_handles {\n \n             impl<S> DecodeMut<'_, '_, S> for $ity {\n                 fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n-                    $ity(handle::Handle::decode(r, s))\n+                    $ity {\n+                        handle: handle::Handle::decode(r, s),\n+                        _marker: PhantomData,\n+                    }\n                 }\n             }\n         )*\n@@ -310,15 +325,16 @@ impl Bridge<'_> {\n         // NB. the server can't do this because it may use a different libstd.\n         static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();\n         HIDE_PANICS_DURING_EXPANSION.call_once(|| {\n-            panic::update_hook(move |prev, info| {\n+            let prev = panic::take_hook();\n+            panic::set_hook(Box::new(move |info| {\n                 let show = BridgeState::with(|state| match state {\n                     BridgeState::NotConnected => true,\n                     BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,\n                 });\n                 if show {\n                     prev(info)\n                 }\n-            });\n+            }));\n         });\n \n         BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))"}, {"sha": "06f76d2fc9140aa903bc91f36c7d12cfc63e16ec", "filename": "library/proc_macro/src/bridge/closure.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclosure.rs?ref=e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "patch": "@@ -1,24 +1,23 @@\n //! Closure type (equivalent to `&mut dyn FnMut(A) -> R`) that's `repr(C)`.\n \n+use std::marker::PhantomData;\n+\n #[repr(C)]\n pub struct Closure<'a, A, R> {\n-    call: unsafe extern \"C\" fn(&mut Env, A) -> R,\n-    env: &'a mut Env,\n-}\n-\n-extern \"C\" {\n-    type Env;\n+    call: unsafe extern \"C\" fn(*mut Env, A) -> R,\n+    env: *mut Env,\n+    // Ensure Closure is !Send and !Sync\n+    _marker: PhantomData<*mut &'a mut ()>,\n }\n \n-impl<'a, A, R> !Sync for Closure<'a, A, R> {}\n-impl<'a, A, R> !Send for Closure<'a, A, R> {}\n+struct Env;\n \n impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {\n     fn from(f: &'a mut F) -> Self {\n-        unsafe extern \"C\" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {\n+        unsafe extern \"C\" fn call<A, R, F: FnMut(A) -> R>(env: *mut Env, arg: A) -> R {\n             (*(env as *mut _ as *mut F))(arg)\n         }\n-        Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }\n+        Closure { call: call::<A, R, F>, env: f as *mut _ as *mut Env, _marker: PhantomData }\n     }\n }\n "}, {"sha": "f7c9df6564f873753fce668e298ce399489e9e07", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "patch": "@@ -231,10 +231,10 @@ pub struct Bridge<'a> {\n \n     /// If 'true', always invoke the default panic hook\n     force_show_panics: bool,\n-}\n \n-impl<'a> !Sync for Bridge<'a> {}\n-impl<'a> !Send for Bridge<'a> {}\n+    // Prevent Send and Sync impls\n+    _marker: marker::PhantomData<*mut ()>,\n+}\n \n #[forbid(unsafe_code)]\n #[allow(non_camel_case_types)]"}, {"sha": "2e0400d32a0af0024776ad05d6efb3c80b6bc22d", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "patch": "@@ -153,7 +153,12 @@ impl ExecutionStrategy for SameThread {\n         let mut dispatch = |b| dispatcher.dispatch(b);\n \n         run_client(\n-            Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },\n+            Bridge {\n+                cached_buffer: input,\n+                dispatch: (&mut dispatch).into(),\n+                force_show_panics,\n+                _marker: marker::PhantomData,\n+            },\n             client_data,\n         )\n     }\n@@ -189,6 +194,7 @@ impl ExecutionStrategy for CrossThread1 {\n                     cached_buffer: input,\n                     dispatch: (&mut dispatch).into(),\n                     force_show_panics,\n+                    _marker: marker::PhantomData,\n                 },\n                 client_data,\n             )\n@@ -241,6 +247,7 @@ impl ExecutionStrategy for CrossThread2 {\n                     cached_buffer: input,\n                     dispatch: (&mut dispatch).into(),\n                     force_show_panics,\n+                    _marker: marker::PhantomData,\n                 },\n                 client_data,\n             );"}, {"sha": "00b8bb1eb2637706833f8bd1b6eea3909cc5c87c", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=e232cb42e692e8bca56fbb98f9a3fbc1de8fbbd8", "patch": "@@ -17,18 +17,18 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n+// This library is copied into rust-analyzer to allow loading rustc compiled proc macros.\n+// Please avoid unstable features where possible to minimize the amount of changes necessary\n+// to make it compile with rust-analyzer on stable.\n #![feature(rustc_allow_const_fn_unstable)]\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n-#![feature(extern_types)]\n #![feature(negative_impls)]\n-#![feature(auto_traits)]\n #![feature(restricted_std)]\n #![feature(rustc_attrs)]\n #![feature(min_specialization)]\n-#![feature(panic_update_hook)]\n #![recursion_limit = \"256\"]\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]"}]}