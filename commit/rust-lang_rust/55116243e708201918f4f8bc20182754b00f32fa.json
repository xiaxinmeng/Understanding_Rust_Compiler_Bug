{"sha": "55116243e708201918f4f8bc20182754b00f32fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MTE2MjQzZTcwODIwMTkxOGY0ZjhiYzIwMTgyNzU0YjAwZjMyZmE=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-03-15T10:39:44Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-03-18T12:18:21Z"}, "message": "remove unneeded where clause", "tree": {"sha": "1220daf682ca61ae2f371d1418a5eebfd2b5f27e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1220daf682ca61ae2f371d1418a5eebfd2b5f27e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55116243e708201918f4f8bc20182754b00f32fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55116243e708201918f4f8bc20182754b00f32fa", "html_url": "https://github.com/rust-lang/rust/commit/55116243e708201918f4f8bc20182754b00f32fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55116243e708201918f4f8bc20182754b00f32fa/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62d9eb729deec2437ad36220207cd4720452274", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62d9eb729deec2437ad36220207cd4720452274", "html_url": "https://github.com/rust-lang/rust/commit/c62d9eb729deec2437ad36220207cd4720452274"}], "stats": {"total": 40, "additions": 4, "deletions": 36}, "files": [{"sha": "5e15348de5e718a76632bf2e11c1daeceb341e4b", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/55116243e708201918f4f8bc20182754b00f32fa/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55116243e708201918f4f8bc20182754b00f32fa/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=55116243e708201918f4f8bc20182754b00f32fa", "patch": "@@ -52,19 +52,17 @@ impl Origin {\n     }\n }\n \n-pub trait BorrowckErrors<'cx> {\n+pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn struct_span_err_with_code<S: Into<MultiSpan>>(self,\n                                                      sp: S,\n                                                      msg: &str,\n                                                      code: DiagnosticId)\n-                                                     -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy;\n+                                                     -> DiagnosticBuilder<'cx>;\n \n     fn struct_span_err<S: Into<MultiSpan>>(self,\n                                            sp: S,\n                                            msg: &str)\n-                                           -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy;\n+                                           -> DiagnosticBuilder<'cx>;\n \n     /// Cancels the given error if we shouldn't emit errors for a given\n     /// origin in the current mode.\n@@ -74,12 +72,10 @@ pub trait BorrowckErrors<'cx> {\n     fn cancel_if_wrong_origin(self,\n                               diag: DiagnosticBuilder<'cx>,\n                               o: Origin)\n-                              -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy;\n+                              -> DiagnosticBuilder<'cx>;\n \n     fn cannot_move_when_borrowed(self, span: Span, desc: &str, o: Origin)\n                                  -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0505,\n                                    \"cannot move out of `{}` because it is borrowed{OGN}\",\n@@ -94,7 +90,6 @@ pub trait BorrowckErrors<'cx> {\n                                         borrow_desc: &str,\n                                         o: Origin)\n                                         -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, span, E0503,\n                          \"cannot use `{}` because it was mutably borrowed{OGN}\",\n@@ -112,7 +107,6 @@ pub trait BorrowckErrors<'cx> {\n                                             desc: &str,\n                                             o: Origin)\n                                             -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0381,\n                                    \"{} of possibly uninitialized variable: `{}`{OGN}\",\n@@ -129,7 +123,6 @@ pub trait BorrowckErrors<'cx> {\n                                       old_load_end_span: Option<Span>,\n                                       o: Origin)\n                                       -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, new_loan_span, E0499,\n                          \"cannot borrow `{}`{} as mutable more than once at a time{OGN}\",\n@@ -162,7 +155,6 @@ pub trait BorrowckErrors<'cx> {\n                                               old_load_end_span: Option<Span>,\n                                               o: Origin)\n                                               -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, new_loan_span, E0524,\n                          \"two closures require unique access to `{}` at the same time{OGN}\",\n@@ -191,7 +183,6 @@ pub trait BorrowckErrors<'cx> {\n                                              previous_end_span: Option<Span>,\n                                              o: Origin)\n                                              -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, new_loan_span, E0500,\n                          \"closure requires unique access to `{}` but {} is already borrowed{}{OGN}\",\n@@ -216,7 +207,6 @@ pub trait BorrowckErrors<'cx> {\n                                                  previous_end_span: Option<Span>,\n                                                  o: Origin)\n                                                  -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, new_loan_span, E0501,\n                          \"cannot borrow `{}`{} as {} because previous closure \\\n@@ -244,7 +234,6 @@ pub trait BorrowckErrors<'cx> {\n                                         old_load_end_span: Option<Span>,\n                                         o: Origin)\n                                         -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, span, E0502,\n                          \"cannot borrow `{}`{} as {} because {} is also borrowed as {}{}{OGN}\",\n@@ -259,7 +248,6 @@ pub trait BorrowckErrors<'cx> {\n \n     fn cannot_assign_to_borrowed(self, span: Span, borrow_span: Span, desc: &str, o: Origin)\n                                  -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, span, E0506,\n                          \"cannot assign to `{}` because it is borrowed{OGN}\",\n@@ -273,7 +261,6 @@ pub trait BorrowckErrors<'cx> {\n \n     fn cannot_move_into_closure(self, span: Span, desc: &str, o: Origin)\n                                 -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0504,\n                                    \"cannot move `{}` into closure because it is borrowed{OGN}\",\n@@ -284,7 +271,6 @@ pub trait BorrowckErrors<'cx> {\n \n     fn cannot_reassign_immutable(self, span: Span, desc: &str, is_arg: bool, o: Origin)\n                                  -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let msg = if is_arg {\n             \"to immutable argument\"\n@@ -299,7 +285,6 @@ pub trait BorrowckErrors<'cx> {\n     }\n \n     fn cannot_assign(self, span: Span, desc: &str, o: Origin) -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0594,\n                                   \"cannot assign to {}{OGN}\",\n@@ -309,14 +294,12 @@ pub trait BorrowckErrors<'cx> {\n \n     fn cannot_assign_static(self, span: Span, desc: &str, o: Origin)\n                             -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o)\n     }\n \n     fn cannot_move_out_of(self, move_from_span: Span, move_from_desc: &str, o: Origin)\n                           -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, move_from_span, E0507,\n                                        \"cannot move out of {}{OGN}\",\n@@ -334,7 +317,6 @@ pub trait BorrowckErrors<'cx> {\n                                            is_index: bool,\n                                            o: Origin)\n                                            -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let type_name = match (&ty.sty, is_index) {\n             (&ty::TyArray(_, _), true) => \"array\",\n@@ -355,7 +337,6 @@ pub trait BorrowckErrors<'cx> {\n                                            container_ty: ty::Ty,\n                                            o: Origin)\n                                            -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, move_from_span, E0509,\n                                        \"cannot move out of type `{}`, \\\n@@ -373,7 +354,6 @@ pub trait BorrowckErrors<'cx> {\n                                  moved_path: &str,\n                                  o: Origin)\n                                  -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, use_span, E0382,\n                                    \"{} of {}moved value: `{}`{OGN}\",\n@@ -387,7 +367,6 @@ pub trait BorrowckErrors<'cx> {\n                                                 uninit_path: &str,\n                                                 o: Origin)\n                                                 -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self,\n                                    span,\n@@ -403,7 +382,6 @@ pub trait BorrowckErrors<'cx> {\n                                          descr: &str,\n                                          o: Origin)\n                                          -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0595, \"closure cannot assign to {}{OGN}\",\n                                    descr, OGN=o);\n@@ -416,7 +394,6 @@ pub trait BorrowckErrors<'cx> {\n                                      path: &str,\n                                      o: Origin)\n                                      -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0596, \"cannot borrow {} as mutable{OGN}\",\n                                    path, OGN=o);\n@@ -429,7 +406,6 @@ pub trait BorrowckErrors<'cx> {\n                                             yield_span: Span,\n                                             o: Origin)\n                                             -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self,\n                                        span,\n@@ -446,7 +422,6 @@ pub trait BorrowckErrors<'cx> {\n                                       path: &str,\n                                       o: Origin)\n                                       -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0597, \"{} does not live long enough{OGN}\",\n                                    path, OGN=o);\n@@ -459,7 +434,6 @@ pub trait BorrowckErrors<'cx> {\n                                        path: &str,\n                                        o: Origin)\n                                        -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let err = struct_span_err!(self, span, E0598,\n                                    \"lifetime of {} is too short to guarantee \\\n@@ -475,7 +449,6 @@ pub trait BorrowckErrors<'cx> {\n                                             help: (Span, &str),\n                                             o: Origin)\n                                             -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let (help_span, help_msg) = help;\n         let mut err = struct_span_err!(self, span, E0387,\n@@ -491,7 +464,6 @@ pub trait BorrowckErrors<'cx> {\n                                               bad_thing: &str,\n                                               o: Origin)\n                                               -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, span, E0389, \"{} in a `&` reference{OGN}\",\n                                        bad_thing, OGN=o);\n@@ -506,7 +478,6 @@ pub trait BorrowckErrors<'cx> {\n                                             capture_span: Span,\n                                             o: Origin)\n                                             -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         let mut err = struct_span_err!(self, closure_span, E0373,\n                                        \"closure may outlive the current function, \\\n@@ -526,7 +497,6 @@ impl<'cx, 'gcx, 'tcx> BorrowckErrors<'cx> for TyCtxt<'cx, 'gcx, 'tcx> {\n                                                      msg: &str,\n                                                      code: DiagnosticId)\n                                                      -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         self.sess.struct_span_err_with_code(sp, msg, code)\n     }\n@@ -535,7 +505,6 @@ impl<'cx, 'gcx, 'tcx> BorrowckErrors<'cx> for TyCtxt<'cx, 'gcx, 'tcx> {\n                                            sp: S,\n                                            msg: &str)\n                                            -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         self.sess.struct_span_err(sp, msg)\n     }\n@@ -544,7 +513,6 @@ impl<'cx, 'gcx, 'tcx> BorrowckErrors<'cx> for TyCtxt<'cx, 'gcx, 'tcx> {\n                               mut diag: DiagnosticBuilder<'cx>,\n                               o: Origin)\n                               -> DiagnosticBuilder<'cx>\n-        where Self: Sized + Copy\n     {\n         if !o.should_emit_errors(self.borrowck_mode()) {\n             self.sess.diagnostic().cancel(&mut diag);"}]}