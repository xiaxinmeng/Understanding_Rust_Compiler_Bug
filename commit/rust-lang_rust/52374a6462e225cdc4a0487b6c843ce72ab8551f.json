{"sha": "52374a6462e225cdc4a0487b6c843ce72ab8551f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMzc0YTY0NjJlMjI1Y2RjNGEwNDg3YjZjODQzY2U3MmFiODU1MWY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T16:13:44Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T16:13:44Z"}, "message": "Add anon to query macro and move a query over", "tree": {"sha": "118f6db8f8807dee72f98697a93a443f237f1d11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/118f6db8f8807dee72f98697a93a443f237f1d11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52374a6462e225cdc4a0487b6c843ce72ab8551f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52374a6462e225cdc4a0487b6c843ce72ab8551f", "html_url": "https://github.com/rust-lang/rust/commit/52374a6462e225cdc4a0487b6c843ce72ab8551f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52374a6462e225cdc4a0487b6c843ce72ab8551f/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d060e7df444923a015df58295fd1bc2a7150a807", "url": "https://api.github.com/repos/rust-lang/rust/commits/d060e7df444923a015df58295fd1bc2a7150a807", "html_url": "https://github.com/rust-lang/rust/commit/d060e7df444923a015df58295fd1bc2a7150a807"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "cdbd01620fb3c9389a2ab866af932e4f00ea994e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=52374a6462e225cdc4a0487b6c843ce72ab8551f", "patch": "@@ -614,14 +614,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [input] UsedCrateSource(CrateNum),\n     [input] PostorderCnums,\n \n-    // These queries are not expected to have inputs -- as a result, they\n-    // are not good candidates for \"replay\" because they are essentially\n-    // pure functions of their input (and hence the expectation is that\n-    // no caller would be green **apart** from just these\n-    // queries). Making them anonymous avoids hashing the result, which\n-    // may save a bit of time.\n-    [anon] EraseRegionsTy { ty: Ty<'tcx> },\n-\n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),\n     [input] MaybeUnusedExternCrates,"}, {"sha": "b8c91f9193495561b98f98570d417062a3564362", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=52374a6462e225cdc4a0487b6c843ce72ab8551f", "patch": "@@ -1,7 +1,6 @@\n use crate::ty::query::QueryDescription;\n use crate::ty::query::queries;\n-use crate::ty::TyCtxt;\n-use crate::ty;\n+use crate::ty::{self, Ty, TyCtxt};\n use crate::hir::def_id::{DefId, CrateNum};\n use crate::dep_graph::SerializedDepNodeIndex;\n use crate::traits;\n@@ -109,6 +108,21 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n+        // Erases regions from `ty` to yield a new type.\n+        // Normally you would just use `tcx.erase_regions(&value)`,\n+        // however, which uses this query as a kind of cache.\n+        query erase_regions_ty(ty: Ty<'tcx>) -> Ty<'tcx> {\n+            // This query is not expected to have input -- as a result, it\n+            // is not a good candidates for \"replay\" because it is essentially a\n+            // pure function of its input (and hence the expectation is that\n+            // no caller would be green **apart** from just these\n+            // queries). Making it anonymous avoids hashing the result, which\n+            // may save a bit of time.\n+            anon\n+            no_force\n+            desc { \"erasing regions from `{:?}`\", ty }\n+        }\n+\n         query program_clauses_for(_: DefId) -> Clauses<'tcx> {\n             desc { \"generating chalk-style clauses\" }\n         }"}, {"sha": "47ef09820b08ddf1a0ef99d6500fffb13fd7d4ca", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=52374a6462e225cdc4a0487b6c843ce72ab8551f", "patch": "@@ -305,12 +305,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::erase_regions_ty<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>) -> Cow<'static, str> {\n-        format!(\"erasing regions from `{:?}`\", ty).into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::type_param_predicates<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, (_, def_id): (DefId, DefId)) -> Cow<'static, str> {\n         let id = tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "5eafb87592e8affe23267e66c04fe0a231d6f43e", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=52374a6462e225cdc4a0487b6c843ce72ab8551f", "patch": "@@ -555,11 +555,6 @@ rustc_query_append! { [define_queries!][ <'tcx>\n     },\n \n     TypeChecking {\n-        // Erases regions from `ty` to yield a new type.\n-        // Normally you would just use `tcx.erase_regions(&value)`,\n-        // however, which uses this query as a kind of cache.\n-        [] fn erase_regions_ty: erase_regions_ty(Ty<'tcx>) -> Ty<'tcx>,\n-\n         /// Do not call this query directly: invoke `normalize` instead.\n         [] fn normalize_projection_ty: NormalizeProjectionTy(\n             CanonicalProjectionGoal<'tcx>\n@@ -698,10 +693,6 @@ fn codegen_fn_attrs<'tcx>(id: DefId) -> DepConstructor<'tcx> {\n     DepConstructor::CodegenFnAttrs { 0: id }\n }\n \n-fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n-    DepConstructor::EraseRegionsTy { ty }\n-}\n-\n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::TypeParamPredicates {\n         item_id,"}, {"sha": "c364d15027d571425fbaf62e1ab54e5ae34172ac", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=52374a6462e225cdc4a0487b6c843ce72ab8551f", "patch": "@@ -1223,7 +1223,6 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::CompileCodegenUnit |\n         DepKind::FulfillObligation |\n         DepKind::VtableMethods |\n-        DepKind::EraseRegionsTy |\n         DepKind::NormalizeProjectionTy |\n         DepKind::NormalizeTyAfterErasingRegions |\n         DepKind::ImpliedOutlivesBounds |"}, {"sha": "fa5ab4737d89089140db0f9e814d9d464f7eaacc", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52374a6462e225cdc4a0487b6c843ce72ab8551f/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=52374a6462e225cdc4a0487b6c843ce72ab8551f", "patch": "@@ -48,6 +48,9 @@ enum QueryModifier {\n \n     /// Don't force the query\n     NoForce,\n+\n+    /// Generate a dep node based on the dependencies of the query\n+    Anon,\n }\n \n impl Parse for QueryModifier {\n@@ -99,6 +102,8 @@ impl Parse for QueryModifier {\n             Ok(QueryModifier::NoHash)\n         } else if modifier == \"no_force\" {\n             Ok(QueryModifier::NoForce)\n+        } else if modifier == \"anon\" {\n+            Ok(QueryModifier::Anon)\n         } else {\n             Err(Error::new(modifier.span(), \"unknown query modifier\"))\n         }\n@@ -202,6 +207,9 @@ struct QueryModifiers {\n \n     /// Don't force the query\n     no_force: bool,\n+\n+    /// Generate a dep node based on the dependencies of the query\n+    anon: bool,\n }\n \n /// Process query modifiers into a struct, erroring on duplicates\n@@ -212,6 +220,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     let mut fatal_cycle = false;\n     let mut no_hash = false;\n     let mut no_force = false;\n+    let mut anon = false;\n     for modifier in query.modifiers.0.drain(..) {\n         match modifier {\n             QueryModifier::LoadCached(tcx, id, block) => {\n@@ -250,6 +259,12 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 }\n                 no_force = true;\n             }\n+            QueryModifier::Anon => {\n+                if anon {\n+                    panic!(\"duplicate modifier `anon` for query `{}`\", query.name);\n+                }\n+                anon = true;\n+            }\n         }\n     }\n     QueryModifiers {\n@@ -259,6 +274,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n         fatal_cycle,\n         no_hash,\n         no_force,\n+        anon,\n     }\n }\n \n@@ -381,9 +397,20 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 [#attribute_stream] fn #name: #name(#arg) #result,\n             });\n \n+            let mut attributes = Vec::new();\n+\n+            // Pass on the anon modifier\n+            if modifiers.anon {\n+                attributes.push(quote! { anon });\n+            };\n+\n+            let mut attribute_stream = quote! {};\n+            for e in attributes.into_iter().intersperse(quote! {,}) {\n+                attribute_stream.extend(e);\n+            }\n             // Create a dep node for the query\n             dep_node_def_stream.extend(quote! {\n-                [] #name(#arg),\n+                [#attribute_stream] #name(#arg),\n             });\n \n             if modifiers.no_force {"}]}