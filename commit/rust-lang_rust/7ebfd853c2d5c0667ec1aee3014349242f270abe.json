{"sha": "7ebfd853c2d5c0667ec1aee3014349242f270abe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmZkODUzYzJkNWMwNjY3ZWMxYWVlMzAxNDM0OTI0MmYyNzBhYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T02:02:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T02:02:03Z"}, "message": "Auto merge of #28615 - sfackler:formatter-methods, r=alexcrichton\n\ncc #27726 \r\n\r\nr? @alexcrichton", "tree": {"sha": "5179629dcb108ecbbc53360486f34d00c76dc260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5179629dcb108ecbbc53360486f34d00c76dc260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebfd853c2d5c0667ec1aee3014349242f270abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebfd853c2d5c0667ec1aee3014349242f270abe", "html_url": "https://github.com/rust-lang/rust/commit/7ebfd853c2d5c0667ec1aee3014349242f270abe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebfd853c2d5c0667ec1aee3014349242f270abe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ce46ffddfed7dee58569b5f30242b00d299dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ce46ffddfed7dee58569b5f30242b00d299dfe", "html_url": "https://github.com/rust-lang/rust/commit/78ce46ffddfed7dee58569b5f30242b00d299dfe"}, {"sha": "e5ee13f139b95212961661701011f501447ea593", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ee13f139b95212961661701011f501447ea593", "html_url": "https://github.com/rust-lang/rust/commit/e5ee13f139b95212961661701011f501447ea593"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "8c596eb3e997b12910ab9c6a16f040dfffe3e5ba", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7ebfd853c2d5c0667ec1aee3014349242f270abe/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebfd853c2d5c0667ec1aee3014349242f270abe/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7ebfd853c2d5c0667ec1aee3014349242f270abe", "patch": "@@ -865,12 +865,12 @@ impl<'a> Formatter<'a> {\n         let mut sign = None;\n         if !is_positive {\n             sign = Some('-'); width += 1;\n-        } else if self.flags & (1 << (FlagV1::SignPlus as u32)) != 0 {\n+        } else if self.sign_plus() {\n             sign = Some('+'); width += 1;\n         }\n \n         let mut prefixed = false;\n-        if self.flags & (1 << (FlagV1::Alternate as u32)) != 0 {\n+        if self.alternate() {\n             prefixed = true; width += prefix.char_len();\n         }\n \n@@ -900,7 +900,7 @@ impl<'a> Formatter<'a> {\n             }\n             // The sign and prefix goes before the padding if the fill character\n             // is zero\n-            Some(min) if self.flags & (1 << (FlagV1::SignAwareZeroPad as u32)) != 0 => {\n+            Some(min) if self.sign_aware_zero_pad() => {\n                 self.fill = '0';\n                 try!(write_prefix(self));\n                 self.with_padding(min - width, Alignment::Right, |f| {\n@@ -1013,7 +1013,7 @@ impl<'a> Formatter<'a> {\n             let mut formatted = formatted.clone();\n             let mut align = self.align;\n             let old_fill = self.fill;\n-            if self.flags & (1 << (FlagV1::SignAwareZeroPad as u32)) != 0 {\n+            if self.sign_aware_zero_pad() {\n                 // a sign always goes first\n                 let sign = unsafe { str::from_utf8_unchecked(formatted.sign) };\n                 try!(self.buf.write_str(sign));\n@@ -1117,6 +1117,28 @@ impl<'a> Formatter<'a> {\n                issue = \"27726\")]\n     pub fn precision(&self) -> Option<usize> { self.precision }\n \n+    /// Determines if the `+` flag was specified.\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n+    pub fn sign_plus(&self) -> bool { self.flags & (1 << FlagV1::SignPlus as u32) != 0 }\n+\n+    /// Determines if the `-` flag was specified.\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n+    pub fn sign_minus(&self) -> bool { self.flags & (1 << FlagV1::SignMinus as u32) != 0 }\n+\n+    /// Determines if the `#` flag was specified.\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n+    pub fn alternate(&self) -> bool { self.flags & (1 << FlagV1::Alternate as u32) != 0 }\n+\n+    /// Determines if the `0` flag was specified.\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n+    pub fn sign_aware_zero_pad(&self) -> bool {\n+        self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0\n+    }\n+\n     /// Creates a `DebugStruct` builder designed to assist with creation of\n     /// `fmt::Debug` implementations for structs.\n     ///\n@@ -1361,7 +1383,7 @@ impl<T> Pointer for *const T {\n         // it denotes whether to prefix with 0x. We use it to work out whether\n         // or not to zero extend, and then unconditionally set it to get the\n         // prefix.\n-        if f.flags & 1 << (FlagV1::Alternate as u32) > 0 {\n+        if f.alternate() {\n             f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n \n             if let None = f.width {\n@@ -1410,7 +1432,7 @@ impl<'a, T> Pointer for &'a mut T {\n fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n-    let force_sign = fmt.flags & (1 << (FlagV1::SignPlus as u32)) != 0;\n+    let force_sign = fmt.sign_plus();\n     let sign = match (force_sign, negative_zero) {\n         (false, false) => flt2dec::Sign::Minus,\n         (false, true)  => flt2dec::Sign::MinusRaw,\n@@ -1434,7 +1456,7 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool)\n fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n-    let force_sign = fmt.flags & (1 << (FlagV1::SignPlus as u32)) != 0;\n+    let force_sign = fmt.sign_plus();\n     let sign = match force_sign {\n         false => flt2dec::Sign::Minus,\n         true  => flt2dec::Sign::MinusPlus,"}]}