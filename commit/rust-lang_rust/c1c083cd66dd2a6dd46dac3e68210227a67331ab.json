{"sha": "c1c083cd66dd2a6dd46dac3e68210227a67331ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzA4M2NkNjZkZDJhNmRkNDZkYWMzZTY4MjEwMjI3YTY3MzMxYWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T08:46:40Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T08:46:40Z"}, "message": "Refactor parse_ret_ty, start parsing by-alias return specs", "tree": {"sha": "fe1a51f1a3fa0cd2ce8e696cbdccf6601db85670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1a51f1a3fa0cd2ce8e696cbdccf6601db85670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c083cd66dd2a6dd46dac3e68210227a67331ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c083cd66dd2a6dd46dac3e68210227a67331ab", "html_url": "https://github.com/rust-lang/rust/commit/c1c083cd66dd2a6dd46dac3e68210227a67331ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c083cd66dd2a6dd46dac3e68210227a67331ab/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb9738a661f577eeb972032b5570013e6bcafdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9738a661f577eeb972032b5570013e6bcafdd", "html_url": "https://github.com/rust-lang/rust/commit/6eb9738a661f577eeb972032b5570013e6bcafdd"}], "stats": {"total": 75, "additions": 24, "deletions": 51}, "files": [{"sha": "15d05cfe2430a1453ed42b00c8049a833cbfdec8", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c083cd66dd2a6dd46dac3e68210227a67331ab/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c083cd66dd2a6dd46dac3e68210227a67331ab/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=c1c083cd66dd2a6dd46dac3e68210227a67331ab", "patch": "@@ -381,7 +381,7 @@ tag ret_style {\n     noreturn; // functions with return type _|_ that always\n               // raise an error or exit (i.e. never return to the caller)\n     return_val; // everything else\n-    return_alias;\n+    return_ref;\n }\n \n type _fn = {decl: fn_decl, proto: proto, body: blk};"}, {"sha": "8309afb85a24b3bb6f1be9da73f8b0e41e9509d5", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 50, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c1c083cd66dd2a6dd46dac3e68210227a67331ab/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c083cd66dd2a6dd46dac3e68210227a67331ab/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=c1c083cd66dd2a6dd46dac3e68210227a67331ab", "patch": "@@ -13,8 +13,6 @@ tag restriction { UNRESTRICTED; RESTRICT_NO_CALL_EXPRS; }\n \n tag file_type { CRATE_FILE; SOURCE_FILE; }\n \n-tag ty_or_bang { a_ty(@ast::ty); a_bang; }\n-\n type parse_sess = @{cm: codemap::codemap, mutable next_id: node_id};\n \n fn next_node_id(sess: parse_sess) -> node_id {\n@@ -281,27 +279,14 @@ fn parse_ty_fn(proto: ast::proto, p: parser) -> ast::ty_ {\n         let t = parse_ty(p, false);\n         ret spanned(lo, t.span.hi, {mode: mode, ty: t});\n     }\n-    let lo = p.get_lo_pos();\n     let inputs =\n         parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n                   parse_fn_input_ty, p);\n     // FIXME: there's no syntax for this right now anyway\n     //  auto constrs = parse_constrs(~[], p);\n     let constrs: [@ast::constr] = [];\n-    let output: @ast::ty;\n-    let cf = ast::return_val;\n-    if p.peek() == token::RARROW {\n-        p.bump();\n-        let tmp = parse_ret_ty(p);\n-        alt tmp {\n-          a_ty(t) { output = t; }\n-          a_bang. {\n-            output = @spanned(lo, inputs.span.hi, ast::ty_bot);\n-            cf = ast::noreturn;\n-          }\n-        }\n-    } else { output = @spanned(lo, inputs.span.hi, ast::ty_nil); }\n-    ret ast::ty_fn(proto, inputs.node, output, cf, constrs);\n+    let (ret_style, ret_ty) = parse_ret_ty(p);\n+    ret ast::ty_fn(proto, inputs.node, ret_ty, ret_style, constrs);\n }\n \n fn parse_proto(p: parser) -> ast::proto {\n@@ -452,15 +437,21 @@ fn parse_ty_postfix(orig_t: ast::ty_, p: parser, colons_before_params: bool)\n     }\n }\n \n-fn parse_ret_ty(p: parser) -> ty_or_bang {\n-/*    if eat(p, token::RARROW) {\n-\n+fn parse_ret_ty(p: parser) -> (ast::ret_style, @ast::ty) {\n+    ret if eat(p, token::RARROW) {\n+        let lo = p.get_lo_pos();\n+        if eat(p, token::NOT) {\n+            (ast::noreturn, @spanned(lo, p.get_last_hi_pos(), ast::ty_bot))\n+        } else {\n+            let style = ast::return_val;\n+            if eat(p, token::BINOP(token::AND)) {\n+                style = ast::return_ref;\n+            };\n+            (style, parse_ty(p, false))\n+        }\n     } else {\n-\n-    }*/\n-    alt p.peek() {\n-      token::NOT. { p.bump(); ret a_bang; }\n-      _ { ret a_ty(parse_ty(p, false)); }\n+        let pos = p.get_lo_pos();\n+        (ast::return_val, @spanned(pos, pos, ast::ty_nil))\n     }\n }\n \n@@ -1760,7 +1751,6 @@ fn parse_fn_decl(p: parser, purity: ast::purity, il: ast::inlineness) ->\n     let inputs: ast::spanned<[ast::arg]> =\n         parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA), parse_arg,\n                   p);\n-    let rslt: ty_or_bang;\n     // Use the args list to translate each bound variable\n     // mentioned in a constraint to an arg index.\n     // Seems weird to do this in the parser, but I'm not sure how else to.\n@@ -1769,30 +1759,13 @@ fn parse_fn_decl(p: parser, purity: ast::purity, il: ast::inlineness) ->\n         p.bump();\n         constrs = parse_constrs(bind parse_ty_constr(inputs.node, _), p);\n     }\n-    if p.peek() == token::RARROW {\n-        p.bump();\n-        rslt = parse_ret_ty(p);\n-    } else {\n-        rslt = a_ty(@spanned(inputs.span.lo, inputs.span.hi, ast::ty_nil));\n-    }\n-    alt rslt {\n-      a_ty(t) {\n-        ret {inputs: inputs.node,\n-             output: t,\n-             purity: purity,\n-             il: il,\n-             cf: ast::return_val,\n-             constraints: constrs};\n-      }\n-      a_bang. {\n-        ret {inputs: inputs.node,\n-             output: @spanned(p.get_lo_pos(), p.get_hi_pos(), ast::ty_bot),\n-             purity: purity,\n-             il: il,\n-             cf: ast::noreturn,\n-             constraints: constrs};\n-      }\n-    }\n+    let (ret_style, ret_ty) = parse_ret_ty(p);\n+    ret {inputs: inputs.node,\n+         output: ret_ty,\n+         purity: purity,\n+         il: il,\n+         cf: ret_style,\n+         constraints: constrs};\n }\n \n fn parse_fn_block_decl(p: parser) -> ast::fn_decl {"}]}