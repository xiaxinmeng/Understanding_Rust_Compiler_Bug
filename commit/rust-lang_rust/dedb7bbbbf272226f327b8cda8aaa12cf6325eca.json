{"sha": "dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGI3YmJiYmYyNzIyMjZmMzI3YjhjZGE4YWFhMTJjZjYzMjVlY2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-04T15:10:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-04T15:13:27Z"}, "message": "Merge branch 'master' into issue-32540", "tree": {"sha": "9c7c7b656750a53b5ca4f7646ee1dfe60829b271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7c7b656750a53b5ca4f7646ee1dfe60829b271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "html_url": "https://github.com/rust-lang/rust/commit/dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b477682dca3343eb89a467f0d3c73986a53d49d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b477682dca3343eb89a467f0d3c73986a53d49d9", "html_url": "https://github.com/rust-lang/rust/commit/b477682dca3343eb89a467f0d3c73986a53d49d9"}, {"sha": "5309a3e31d88def1f3ea966162ed4f81f161d500", "url": "https://api.github.com/repos/rust-lang/rust/commits/5309a3e31d88def1f3ea966162ed4f81f161d500", "html_url": "https://github.com/rust-lang/rust/commit/5309a3e31d88def1f3ea966162ed4f81f161d500"}], "stats": {"total": 20213, "additions": 11547, "deletions": 8666}, "files": [{"sha": "53d17874924093c298f0f111f1c4c4d680c68f55", "filename": ".gitmodules", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -5,10 +5,6 @@\n [submodule \"src/compiler-rt\"]\n \tpath = src/compiler-rt\n \turl = https://github.com/rust-lang/compiler-rt.git\n-[submodule \"src/rt/hoedown\"]\n-\tpath = src/rt/hoedown\n-\turl = https://github.com/rust-lang/hoedown.git\n-\tbranch = rust-2015-09-21-do-not-delete\n [submodule \"src/jemalloc\"]\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git"}, {"sha": "8fe92ff7d028831174ed7eb433966d1cf4d37321", "filename": ".travis.yml", "status": "modified", "additions": 55, "deletions": 21, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -40,7 +40,10 @@ matrix:\n     - env: IMAGE=x86_64-gnu-distcheck\n     - env: IMAGE=x86_64-gnu-incremental\n \n-    # OSX builders\n+    # OSX builders running tests, these run the full test suite.\n+    #\n+    # Note that the compiler is compiled to target 10.8 here because the Xcode\n+    # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n     - env: >\n         RUST_CHECK_TARGET=check\n         RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin\n@@ -52,8 +55,10 @@ matrix:\n       os: osx\n       osx_image: xcode8.2\n       install: &osx_install_sccache >\n-        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-apple-darwin &&\n-          chmod +x /usr/local/bin/sccache\n+        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-apple-darwin &&\n+          chmod +x /usr/local/bin/sccache &&\n+        travis_retry curl -o /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n+          chmod +x /usr/local/bin/stamp\n     - env: >\n         RUST_CHECK_TARGET=check\n         RUST_CONFIGURE_ARGS=--build=i686-apple-darwin\n@@ -66,31 +71,33 @@ matrix:\n       osx_image: xcode8.2\n       install: *osx_install_sccache\n \n+    # OSX builders producing releases. These do not run the full test suite and\n+    # just produce a bunch of artifacts.\n+    #\n+    # Note that these are running in the `xcode7` image instead of the\n+    # `xcode8.2` image as above. That's because we want to build releases for\n+    # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        MACOSX_DEPLOYMENT_TARGET=10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n-      install: >\n-        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-apple-darwin &&\n-          chmod +x /usr/local/bin/sccache\n+      osx_image: xcode7\n+      install: *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        MACOSX_DEPLOYMENT_TARGET=10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n+      osx_image: xcode7\n       install: *osx_install_sccache\n \n     # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n@@ -105,10 +112,9 @@ matrix:\n         DEPLOY_ALT=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        MACOSX_DEPLOYMENT_TARGET=10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n+      osx_image: xcode7\n       install: *osx_install_sccache\n \n env:\n@@ -118,6 +124,12 @@ env:\n     # AWS_SECRET_ACCESS_KEY=...\n     - secure: \"Pixhh0hXDqGCdOyLtGFjli3J2AtDWIpyb2btIrLe956nCBDRutRoMm6rv5DI9sFZN07Mms7VzNNvhc9wCW1y63JAm414d2Co7Ob8kWMZlz9l9t7ACHuktUiis8yr+S4Quq1Vqd6pqi7pf2J++UxC8R/uLeqVrubzr6+X7AbmEFE=\"\n \n+# Note that this is overridden on OSX builders\n+install: >\n+  travis_retry curl -o $HOME/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n+    chmod +x $HOME/stamp &&\n+    export PATH=$PATH:$HOME\n+\n before_script:\n   - >\n       echo \"#### Disk usage before running script:\";\n@@ -127,13 +139,14 @@ before_script:\n script:\n   - >\n       if [ \"$ALLOW_PR\" = \"\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n-          echo skipping, not a full build;\n-      elif [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-          travis_retry sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          src/ci/run.sh;\n+          echo skipping, not a full build\n       else\n-          travis_retry sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          src/ci/docker/run.sh $IMAGE;\n+          stamp src/ci/init_repo.sh . \"$HOME/rustsrc\" &&\n+          if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+              stamp src/ci/run.sh;\n+          else\n+              stamp src/ci/docker/run.sh $IMAGE;\n+          fi\n       fi\n \n after_success:\n@@ -147,24 +160,45 @@ after_failure:\n       echo \"#### Build failed; Disk usage after running script:\";\n       df -h;\n       du . | sort -nr | head -n100\n+\n+  # One of these is the linux sccache log, one is the OSX sccache log. Instead\n+  # of worrying about what system we are just cat both. One of these commands\n+  # will fail but that's ok, they'll both get executed.\n   - cat obj/tmp/sccache.log\n   - cat /tmp/sccache.log\n \n+  # Random attempt at debugging currently. Just poking around in here to see if\n+  # anything shows up.\n+  - ls $HOME/Library/Logs/DiagnosticReports/\n+\n+  # attempt to debug anything killed by the oom killer on linux, just to see if\n+  # it happened\n+  - dmesg | grep -i kill\n+\n # Save tagged docker images we created and load them if they're available\n+# Travis saves caches whether the build failed or not, nuke rustsrc if\n+# the failure was while updating it (as it may be in an bad state)\n+# https://github.com/travis-ci/travis-ci/issues/4472\n before_cache:\n   - docker history -q rust-ci |\n     grep -v missing |\n     xargs docker save |\n     gzip > $HOME/docker/rust-ci.tar.gz\n+  - if [ ! -f $HOME/rustsrc/cache_valid1 ]; then\n+        echo \"WARNING rustsrc cache was invalid when saving\";\n+        rm -rf $HOME/rustsrc && mkdir $HOME/rustsrc;\n+    fi\n before_install:\n   - zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n+  - mkdir -p $HOME/rustsrc\n \n notifications:\n   email: false\n \n cache:\n   directories:\n     - $HOME/docker\n+    - $HOME/rustsrc\n \n before_deploy:\n   - mkdir -p deploy/$TRAVIS_COMMIT"}, {"sha": "0314a5dfd8d02a5b283d317ef83cadad445fd8ce", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -311,9 +311,13 @@ To save @bors some work, and to get small changes through more quickly, when\n the other rollup-eligible patches too, and they'll get tested and merged at\n the same time.\n \n-To find documentation-related issues, sort by the [A-docs label][adocs].\n+To find documentation-related issues, sort by the [T-doc label][tdoc].\n \n-[adocs]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-docs\n+[tdoc]: https://github.com/rust-lang/rust/issues?q=is%3Aopen%20is%3Aissue%20label%3AT-doc\n+\n+You can find documentation style guidelines in [RFC 1574][rfc1574].\n+\n+[rfc1574]: https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#appendix-a-full-conventions-text\n \n In many cases, you don't need a full `./x.py doc`. You can use `rustdoc` directly\n to check small fixes. For example, `rustdoc src/doc/reference.md` will render"}, {"sha": "68b2a239aff1babc31c622fd0631dd4abaac9c78", "filename": "appveyor.yml", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -45,14 +45,14 @@ environment:\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-ninja\n     SCRIPT: python x.py test\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: i686-6.2.0-release-win32-dwarf-rt_v5-rev1.7z\n     MINGW_DIR: mingw32\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-ninja\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: x86_64-6.2.0-release-win32-seh-rt_v5-rev1.7z\n     MINGW_DIR: mingw64\n \n   # 32/64 bit MSVC and GNU deployment\n@@ -70,15 +70,15 @@ environment:\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended --enable-ninja\n     SCRIPT: python x.py dist\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: i686-6.2.0-release-win32-dwarf-rt_v5-rev1.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended --enable-ninja\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: x86_64-6.2.0-release-win32-seh-rt_v5-rev1.7z\n     MINGW_DIR: mingw64\n     DEPLOY: 1\n \n@@ -115,8 +115,8 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-pc-windows-msvc\n-  - mv 2017-03-16-sccache-x86_64-pc-windows-msvc sccache.exe\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-pc-windows-msvc\n+  - mv 2017-03-24-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n   # Download and install ninja\n@@ -182,6 +182,7 @@ deploy:\n     on:\n       branch: auto\n       DEPLOY: 1\n+    max_error_retry: 5\n \n   # This provider is the same as the one above except that it has a slightly\n   # different upload directory and a slightly different trigger\n@@ -198,6 +199,7 @@ deploy:\n     on:\n       branch: auto\n       DEPLOY_ALT: 1\n+    max_error_retry: 5\n \n # init:\n #   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))"}, {"sha": "4e95c6b41eca3388f54dd5f7787366ad2df637b5", "filename": "cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1 +1 @@\n-Subproject commit c995e9eb5acf3976ae8674a0dc6d9e958053d9fd\n+Subproject commit 4e95c6b41eca3388f54dd5f7787366ad2df637b5"}, {"sha": "1fa256197ce528a537269316cc7e2c873b2b9ef0", "filename": "src/Cargo.lock", "status": "modified", "additions": 60, "deletions": 58, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -8,7 +8,7 @@ dependencies = [\n \n [[package]]\n name = \"aho-corasick\"\n-version = \"0.6.2\"\n+version = \"0.6.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -27,7 +27,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -65,7 +65,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"bitflags\"\n-version = \"0.8.0\"\n+version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -75,7 +75,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -104,12 +104,12 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"clap\"\n-version = \"2.21.1\"\n+version = \"2.22.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term_size 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -122,7 +122,7 @@ name = \"cmake\"\n version = \"0.1.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -140,14 +140,14 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n- \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -162,14 +162,6 @@ name = \"dtoa\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"env_logger\"\n-version = \"0.3.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"env_logger\"\n version = \"0.4.2\"\n@@ -196,7 +188,7 @@ name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -205,7 +197,7 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.44\"\n+version = \"0.3.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -223,10 +215,10 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"handlebars\"\n-version = \"0.25.1\"\n+version = \"0.25.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -251,7 +243,7 @@ dependencies = [\n \n [[package]]\n name = \"lazy_static\"\n-version = \"0.2.4\"\n+version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -270,10 +262,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"linkchecker\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"log\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"log\"\n version = \"0.3.7\"\n@@ -284,9 +272,9 @@ name = \"mdbook\"\n version = \"0.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.21.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -370,6 +358,14 @@ dependencies = [\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"pulldown-cmark\"\n+version = \"0.0.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"qemu-test-client\"\n version = \"0.1.0\"\n@@ -395,7 +391,7 @@ name = \"regex\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"aho-corasick 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -428,7 +424,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.21.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mdbook 0.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -439,7 +435,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -479,7 +475,7 @@ dependencies = [\n name = \"rustc_back\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -493,7 +489,7 @@ name = \"rustc_borrowck\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -508,7 +504,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -530,7 +526,7 @@ dependencies = [\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n ]\n \n@@ -539,8 +535,9 @@ name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro_plugin 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -579,7 +576,7 @@ name = \"rustc_incremental\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -591,7 +588,7 @@ dependencies = [\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -604,7 +601,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -623,7 +620,7 @@ name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -642,7 +639,7 @@ name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -666,7 +663,7 @@ dependencies = [\n name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -705,7 +702,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -716,7 +713,7 @@ dependencies = [\n name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -730,7 +727,7 @@ name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n@@ -762,7 +759,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -780,8 +777,10 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.0.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -828,7 +827,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -857,7 +856,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -870,7 +869,7 @@ name = \"syntax_ext\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -927,6 +926,9 @@ dependencies = [\n [[package]]\n name = \"tidy\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"toml\"\n@@ -988,23 +990,22 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n-\"checksum aho-corasick 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0638fd549427caa90c499814196d1b9e3725eb4d15d7339d6de073a680ed0ca2\"\n+\"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n \"checksum atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d912da0db7fa85514874458ca3651fe2cddace8d0b0505571dbdcd41ab490159\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n-\"checksum bitflags 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e1ab483fc81a8143faa7203c4a3c02888ebd1a782e37e41fa34753ba9a162\"\n-\"checksum clap 2.21.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74a80f603221c9cd9aa27a28f52af452850051598537bb6b359c38a7d61e5cda\"\n+\"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n+\"checksum clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e17a4a72ffea176f77d6e2db609c6c919ef221f23862c9915e687fb54d833485\"\n \"checksum cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d18d68987ed4c516dcc3e7913659bfa4076f5182eea4a7e0038bb060953e76ac\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n-\"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a32cd40070d7611ab76343dcb3204b2bb28c8a9450989a83a3d590248142f439\"\n+\"checksum gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40899336fb50db0c78710f53e87afc54d8c7266fb76262fecc78ca1a7f09deae\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2249f6f0dc5a3bb2b3b1a8f797dfccbc4b053344d773d654ad565e51427d335\"\n+\"checksum handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"663e1728d8037fb0d4e13bcd1b1909fb5d913690a9929eb385922df157c2ff8f\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7291b1dd97d331f752620b02dfdbc231df7fc01bf282a00769e1cdb963c460dc\"\n+\"checksum lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4732c563b9a21a406565c4747daa7b46742f082911ae4753f390dc9ec7ee1a97\"\n \"checksum libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88ee81885f9f04bff991e306fea7c1c60a5f0f9e409e99f6b40e3311a3363135\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n \"checksum mdbook 0.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06a68e8738e42b38a02755d3ce5fa12d559e17acb238e4326cbc3cc056e65280\"\n@@ -1013,6 +1014,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\"\n \"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n \"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\""}, {"sha": "3a1a9c3e40d66066b708f48e2de876d38d7fa702", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -40,6 +40,14 @@ fn main() {\n         .arg(sysroot)\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n+\n+    // Pass the `rustbuild` feature flag to crates which rustbuild is\n+    // building. See the comment in bootstrap/lib.rs where this env var is\n+    // set for more details.\n+    if env::var_os(\"RUSTBUILD_UNSTABLE\").is_some() {\n+        cmd.arg(\"--cfg\").arg(\"rustbuild\");\n+    }\n+\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),"}, {"sha": "d5bc6127a1e7fe31d9db5b50a7c0f597b0d17456", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -160,11 +160,8 @@ class RustBuild(object):\n     def download_stage0(self):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, self.stage0_rustc_date())\n-        cargo_cache = os.path.join(cache_dst, self.stage0_cargo_rev())\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n-        if not os.path.exists(cargo_cache):\n-            os.makedirs(cargo_cache)\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n@@ -195,15 +192,15 @@ def download_stage0(self):\n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n-            filename = \"cargo-nightly-{}.tar.gz\".format(self.build)\n-            url = \"https://s3.amazonaws.com/rust-lang-ci/cargo-builds/\" + self.stage0_cargo_rev()\n-            tarball = os.path.join(cargo_cache, filename)\n+            filename = \"cargo-{}-{}.tar.gz\".format(channel, self.build)\n+            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(), match=\"cargo\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/cargo\")\n             with open(self.cargo_stamp(), 'w') as f:\n-                f.write(self.stage0_cargo_rev())\n+                f.write(self.stage0_rustc_date())\n \n     def fix_executable(self, fname):\n         # If we're on NixOS we need to change the path to the dynamic loader\n@@ -258,9 +255,6 @@ def fix_executable(self, fname):\n             print(\"warning: failed to call patchelf: %s\" % e)\n             return\n \n-    def stage0_cargo_rev(self):\n-        return self._cargo_rev\n-\n     def stage0_rustc_date(self):\n         return self._rustc_date\n \n@@ -283,7 +277,7 @@ def cargo_out_of_date(self):\n         if not os.path.exists(self.cargo_stamp()) or self.clean:\n             return True\n         with open(self.cargo_stamp(), 'r') as f:\n-            return self.stage0_cargo_rev() != f.read()\n+            return self.stage0_rustc_date() != f.read()\n \n     def bin_root(self):\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n@@ -578,7 +572,6 @@ def bootstrap():\n \n     data = stage0_data(rb.rust_root)\n     rb._rustc_channel, rb._rustc_date = data['rustc'].split('-', 1)\n-    rb._cargo_rev = data['cargo']\n \n     # Fetch/build the bootstrap\n     rb.build = rb.build_triple()"}, {"sha": "a95bdcb3d26087af41d779d201b2a4fa4ccdcf68", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -23,7 +23,7 @@ use build_helper::output;\n use Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &'static str = \"1.17.0\";\n+pub const CFG_RELEASE_NUM: &'static str = \"1.18.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release"}, {"sha": "f8f641060c442674f4d7b9a03b8d8bcde5008fec", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -586,7 +586,7 @@ fn android_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n                       .arg(ADB_TEST_DIR));\n \n     let target_dir = format!(\"{}/{}\", ADB_TEST_DIR, target);\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir[..]]));\n+    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir]));\n \n     for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n         let f = t!(f);"}, {"sha": "ec992b47a6e4b0d3865cc071a31fa0b05dd3552a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -37,8 +37,12 @@ use channel;\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n \n fn pkgname(build: &Build, component: &str) -> String {\n-    assert!(component.starts_with(\"rust\")); // does not work with cargo\n-    format!(\"{}-{}\", component, build.rust_package_vers())\n+    if component == \"cargo\" {\n+        format!(\"{}-{}\", component, build.cargo_package_vers())\n+    } else {\n+        assert!(component.starts_with(\"rust\"));\n+        format!(\"{}-{}\", component, build.rust_package_vers())\n+    }\n }\n \n fn distdir(build: &Build) -> PathBuf {\n@@ -533,7 +537,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     let src = build.src.join(\"cargo\");\n     let etc = src.join(\"src/etc\");\n     let release_num = build.cargo_release_num();\n-    let name = format!(\"cargo-{}\", build.package_vers(&release_num));\n+    let name = pkgname(build, \"cargo\");\n     let version = build.cargo_info.version(build, &release_num);\n \n     let tmp = tmpdir(build);\n@@ -591,12 +595,11 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist extended stage{} ({})\", stage, target);\n \n     let dist = distdir(build);\n-    let cargo_vers = build.cargo_release_num();\n     let rustc_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                             pkgname(build, \"rustc\"),\n                                             target));\n-    let cargo_installer = dist.join(format!(\"cargo-{}-{}.tar.gz\",\n-                                            build.package_vers(&cargo_vers),\n+    let cargo_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                            pkgname(build, \"cargo\"),\n                                             target));\n     let docs_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                            pkgname(build, \"rust-docs\"),\n@@ -674,7 +677,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n \n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target)),\n              &pkg.join(\"rustc\"));\n-        cp_r(&work.join(&format!(\"cargo-nightly-{}\", target)),\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"cargo\"), target)),\n              &pkg.join(\"cargo\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-docs\"), target)),\n              &pkg.join(\"rust-docs\"));\n@@ -726,7 +729,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target))\n                   .join(\"rustc\"),\n              &exe.join(\"rustc\"));\n-        cp_r(&work.join(&format!(\"cargo-nightly-{}\", target))\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"cargo\"), target))\n                   .join(\"cargo\"),\n              &exe.join(\"cargo\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-docs\"), target))"}, {"sha": "84254d7d6ae515b2f49afaa647e58aec2bcb2b63", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1015,6 +1015,11 @@ impl Build {\n         self.package_vers(channel::CFG_RELEASE_NUM)\n     }\n \n+    /// Returns the value of `package_vers` above for Cargo\n+    fn cargo_package_vers(&self) -> String {\n+        self.package_vers(&self.cargo_release_num())\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///"}, {"sha": "933562c79e5821837b8fae00fa23bc908d750900", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -74,7 +74,7 @@ RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "8dc02ab522c21bf9604a500048734714fc33faa6", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -22,7 +22,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "44d6863bf0bbdc8430f7cab91cd0c289f41e63a6", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -32,7 +32,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV TARGETS=arm-linux-androideabi"}, {"sha": "7facc52390ff4a294b1f5111a46cfe340dc7614b", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -65,6 +61,10 @@ RUN ./build-toolchains.sh\n \n USER root\n \n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabi/bin\n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin\n "}, {"sha": "369e5a7dffe2a8048c84023e861a322a280a0194", "filename": "src/ci/docker/dist-armv7-aarch64-linux/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -66,6 +62,10 @@ RUN ./build-toolchains.sh\n \n USER root\n \n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n ENV PATH=$PATH:/x-tools/aarch64-unknown-linux-gnueabi/bin\n ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin\n "}, {"sha": "633f58ea474b4eccc623af0cd2d03e29fa1b622d", "filename": "src/ci/docker/dist-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-freebsd%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -26,7 +26,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "ed37a9e842e227a9219599bf00b70e947a8c90d5", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -29,7 +29,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "d88ec7aab34643da663133c818c5bfadf58f7f1c", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -26,7 +26,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "938c53ae48837d057b653cced3a47d190b2b0b03", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -18,7 +18,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "45de8100b4f27f9f3aed69d309e70a678e4840b3", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -18,7 +18,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "c1e5e863ae06c3b710900cdc6f03d81dbb9d4596", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -66,6 +62,10 @@ RUN ./build-powerpc-toolchain.sh\n \n USER root\n \n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n ENV PATH=$PATH:/x-tools/powerpc-unknown-linux-gnu/bin\n \n ENV \\"}, {"sha": "7413c327323e5072aca0e34050286b13a552eebd", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -25,11 +25,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   wget \\\n   xz-utils \\\n   libssl-dev \\\n-  pkg-config\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n+ pkg-config\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n@@ -70,6 +66,10 @@ RUN apt-get install -y --no-install-recommends rpm2cpio cpio\n COPY build-powerpc64le-toolchain.sh /tmp/\n RUN ./build-powerpc64le-toolchain.sh\n \n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n ENV PATH=$PATH:/x-tools/powerpc64-unknown-linux-gnu/bin\n \n ENV \\"}, {"sha": "4180006690fc902c76eb19eda0b3cf9c91d62edb", "filename": "src/ci/docker/dist-s390x-linux-netbsd/Dockerfile", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -64,17 +60,21 @@ COPY patches/ /tmp/patches/\n COPY s390x-linux-gnu.config build-s390x-toolchain.sh /tmp/\n RUN ./build-s390x-toolchain.sh\n \n-USER root\n-\n COPY build-netbsd-toolchain.sh /tmp/\n RUN ./build-netbsd-toolchain.sh\n \n-ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin\n+USER root\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin:/x-tools/x86_64-unknown-netbsd/bin\n \n ENV \\\n-    AR_x86_64_unknown_netbsd=x86_64-unknown-netbsd-ar \\\n-    CC_x86_64_unknown_netbsd=x86_64-unknown-netbsd-gcc \\\n-    CXX_x86_64_unknown_netbsd=x86_64-unknown-netbsd-g++ \\\n+    AR_x86_64_unknown_netbsd=x86_64--netbsd-ar \\\n+    CC_x86_64_unknown_netbsd=x86_64--netbsd-gcc-sysroot \\\n+    CXX_x86_64_unknown_netbsd=x86_64--netbsd-g++-sysroot \\\n     CC_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-gcc \\\n     AR_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-ar \\\n     CXX_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-g++"}, {"sha": "ea335a249736c703296840774638e609961625c1", "filename": "src/ci/docker/dist-s390x-linux-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 64, "deletions": 101, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -13,108 +13,71 @@\n \n set -ex\n \n-BINUTILS=2.25.1\n-GCC=5.3.0\n-\n-# First up, build binutils\n-mkdir binutils\n-cd binutils\n-curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n-mkdir binutils-build\n-cd binutils-build\n-../binutils-$BINUTILS/configure \\\n-  --target=x86_64-unknown-netbsd\n-make -j10\n-make install\n-cd ../..\n-rm -rf binutils\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n \n-# Next, download the NetBSD libc and relevant header files\n mkdir netbsd\n-# originally from:\n-# https://ftp.netbsd.org/pub/NetBSD/NetBSD-7.0/amd64/binary/sets/base.tgz\n-curl https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-16-netbsd-base.tgz | \\\n-  tar xzf - -C netbsd ./usr/include ./usr/lib ./lib\n-# originally from:\n-# https://ftp.netbsd.org/pub/NetBSD/NetBSD-7.0/amd64/binary/sets/comp.tgz\n-curl https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-16-netbsd-comp.tgz | \\\n-  tar xzf - -C netbsd ./usr/include ./usr/lib\n-\n-dst=/usr/local/x86_64-unknown-netbsd\n-cp -r netbsd/usr/include $dst\n-cp netbsd/usr/lib/crt0.o $dst/lib\n-cp netbsd/usr/lib/crti.o $dst/lib\n-cp netbsd/usr/lib/crtn.o $dst/lib\n-cp netbsd/usr/lib/crtbeginS.o $dst/lib\n-cp netbsd/usr/lib/crtendS.o $dst/lib\n-cp netbsd/usr/lib/crtbegin.o $dst/lib\n-cp netbsd/usr/lib/crtend.o $dst/lib\n-cp netbsd/usr/lib/gcrt0.o $dst/lib\n-cp netbsd/usr/lib/libc.a $dst/lib\n-cp netbsd/usr/lib/libc_p.a $dst/lib\n-cp netbsd/usr/lib/libc_pic.a $dst/lib\n-cp netbsd/lib/libc.so.12.193.1 $dst/lib\n-cp netbsd/lib/libutil.so.7.21 $dst/lib\n-cp netbsd/usr/lib/libm.a $dst/lib\n-cp netbsd/usr/lib/libm_p.a $dst/lib\n-cp netbsd/usr/lib/libm_pic.a $dst/lib\n-cp netbsd/lib/libm.so.0.11 $dst/lib\n-cp netbsd/usr/lib/librt.so.1.1 $dst/lib\n-cp netbsd/usr/lib/libpthread.a $dst/lib\n-cp netbsd/usr/lib/libpthread_p.a $dst/lib\n-cp netbsd/usr/lib/libpthread_pic.a $dst/lib\n-cp netbsd/usr/lib/libpthread.so.1.2 $dst/lib\n-\n-ln -s libc.so.12.193.1 $dst/lib/libc.so\n-ln -s libc.so.12.193.1 $dst/lib/libc.so.12\n-ln -s libm.so.0.11 $dst/lib/libm.so\n-ln -s libm.so.0.11 $dst/lib/libm.so.0\n-ln -s libutil.so.7.21 $dst/lib/libutil.so\n-ln -s libutil.so.7.21 $dst/lib/libutil.so.7\n-ln -s libpthread.so.1.2 $dst/lib/libpthread.so\n-ln -s libpthread.so.1.2 $dst/lib/libpthread.so.1\n-ln -s librt.so.1.1 $dst/lib/librt.so\n-\n-rm -rf netbsd\n-\n-# Finally, download and build gcc to target NetBSD\n-mkdir gcc\n-cd gcc\n-curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n-cd gcc-$GCC\n-./contrib/download_prerequisites\n-\n-# Originally from\n-# ftp://ftp.netbsd.org/pub/pkgsrc/pkgsrc-2016Q4/pkgsrc/lang/gcc5/patches/patch-libstdc%2B%2B-v3_config_os_bsd_netbsd_ctype__base.h\n-PATCHES=\"https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-13-netbsd-patch1.patch\"\n-\n-# Originally from\n-# ftp://ftp.netbsd.org/pub/pkgsrc/pkgsrc-2016Q4/pkgsrc/lang/gcc5/patches/patch-libstdc%2B%2B-v3_config_os_bsd_netbsd_ctype__configure__char.cc\n-PATCHES=\"$PATCHES https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-13-netbsd-patch2.patch\"\n-\n-for patch in $PATCHES; do\n-  curl $patch | patch -Np0\n-done\n-\n-mkdir ../gcc-build\n-cd ../gcc-build\n-../gcc-$GCC/configure                            \\\n-  --enable-languages=c,c++                       \\\n-  --target=x86_64-unknown-netbsd                 \\\n-  --disable-libcilkrts                           \\\n-  --disable-multilib                             \\\n-  --disable-nls                                  \\\n-  --disable-libgomp                              \\\n-  --disable-libquadmath                          \\\n-  --disable-libssp                               \\\n-  --disable-libvtv                               \\\n-  --disable-libcilkrt                            \\\n-  --disable-libada                               \\\n-  --disable-libsanitizer                         \\\n-  --disable-libquadmath-support                  \\\n-  --disable-lto\n-make -j10\n-make install\n+cd netbsd\n+\n+mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n+\n+URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+\n+# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n+curl $URL/2017-03-17-netbsd-src.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-gnusrc.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-sharesrc.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-syssrc.tgz | tar xzf -\n+\n+# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/amd64/binary/sets/*.tgz\n+curl $URL/2017-03-17-netbsd-base.tgz | \\\n+  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib ./lib\n+curl $URL/2017-03-17-netbsd-comp.tgz | \\\n+  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib\n+\n+cd usr/src\n+\n+# The options, in order, do the following\n+# * this is an unpriviledged build\n+# * output to a predictable location\n+# * disable various uneeded stuff\n+MKUNPRIVED=yes TOOLDIR=/x-tools/x86_64-unknown-netbsd \\\n+MKSHARE=no MKDOC=no MKHTML=no MKINFO=no MKKMOD=no MKLINT=no MKMAN=no MKNLS=no MKPROFILE=no \\\n+hide_output ./build.sh -j10 -m amd64 tools\n \n cd ../..\n-rm -rf gcc\n+\n+rm -rf usr\n+\n+cat > /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot <<'EOF'\n+#!/bin/bash\n+exec /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc --sysroot=/x-tools/x86_64-unknown-netbsd/sysroot \"$@\"\n+EOF\n+\n+cat > /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot <<'EOF'\n+#!/bin/bash\n+exec /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++ --sysroot=/x-tools/x86_64-unknown-netbsd/sysroot \"$@\"\n+EOF\n+\n+GCC_SHA1=`sha1sum -b /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc | cut -d' ' -f1`\n+GPP_SHA1=`sha1sum -b /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++ | cut -d' ' -f1`\n+\n+echo \"# $GCC_SHA1\" >> /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot\n+echo \"# $GPP_SHA1\" >> /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot\n+\n+chmod +x /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot\n+chmod +x /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot"}, {"sha": "18c7a4d2b3e7f54306fd5dba0f4e9056d6a927d7", "filename": "src/ci/docker/dist-x86-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -6,6 +6,7 @@ RUN yum upgrade -y && yum install -y \\\n       curl \\\n       bzip2 \\\n       gcc \\\n+      gcc-c++ \\\n       make \\\n       glibc-devel \\\n       perl \\\n@@ -75,7 +76,7 @@ RUN curl -Lo /rustroot/dumb-init \\\n ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV HOSTS=i686-unknown-linux-gnu"}, {"sha": "ab2562538d6d7376e942a219ce0f00664082be9f", "filename": "src/ci/docker/dist-x86-linux/build-gcc.sh", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-gcc.sh?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -13,12 +13,14 @@ set -ex\n \n source shared.sh\n \n-curl https://ftp.gnu.org/gnu/gcc/gcc-4.7.4/gcc-4.7.4.tar.bz2 | tar xjf -\n-cd gcc-4.7.4\n+GCC=4.8.5\n+\n+curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n+cd gcc-$GCC\n ./contrib/download_prerequisites\n mkdir ../gcc-build\n cd ../gcc-build\n-hide_output ../gcc-4.7.4/configure \\\n+hide_output ../gcc-$GCC/configure \\\n     --prefix=/rustroot \\\n     --enable-languages=c,c++\n hide_output make -j10\n@@ -27,5 +29,5 @@ ln -nsf gcc /rustroot/bin/cc\n \n cd ..\n rm -rf gcc-build\n-rm -rf gcc-4.7.4\n-yum erase -y gcc binutils\n+rm -rf gcc-$GCC\n+yum erase -y gcc gcc-c++ binutils"}, {"sha": "085aa351659905c2af0da4113bd96c7d4a19207f", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -26,7 +26,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "77cf54a19a7fd9ee510066f3a9ed19a9aa0f4b16", "filename": "src/ci/docker/emscripten/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   lib32stdc++6\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "e39767357ad6301a56f463ec24d49a0ab7e97181", "filename": "src/ci/docker/emscripten/build-emscripten.sh", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -29,7 +29,24 @@ exit 1\n }\n \n curl https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n-      tar xzf -\n+    tar xzf -\n+\n+# Some versions of the EMSDK archive have their contents in .emsdk-portable\n+# and others in emsdk_portable. Make sure the EMSDK ends up in a fixed path.\n+if [ -d emsdk-portable ]; then\n+    mv emsdk-portable emsdk_portable\n+fi\n+\n+if [ ! -d emsdk_portable ]; then\n+    echo \"ERROR: Invalid emsdk archive. Dumping working directory.\" >&2\n+    ls -l\n+    exit 1\n+fi\n+\n+# Some versions of the EMSDK set the permissions of the root directory to\n+# 0700. Ensure the directory is readable by all users.\n+chmod 755 emsdk_portable\n+\n source emsdk_portable/emsdk_env.sh\n hide_output emsdk update\n hide_output emsdk install --build=Release sdk-tag-1.37.1-32bit"}, {"sha": "c84cf56e4e858bdaf788b30371b8fc00a672099b", "filename": "src/ci/docker/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "f4bb9083b85827ece5f152af18aaa1a4009761f7", "filename": "src/ci/docker/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "71a4bfae3caf9424b930bf81aeba9a26b15e1a7e", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -57,6 +57,7 @@ exec docker \\\n   --env DEPLOY_ALT=$DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n+  --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --privileged \\\n   --rm \\\n   rust-ci \\"}, {"sha": "68184c65cf17ffcf75ac8728c2d4de0a5889f279", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "6320a806fc301d3b7d9b7afd29d409ec46fcfc6e", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "180f53ec33f31f173ebd1dcd230ebf44272cda40", "filename": "src/ci/docker/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "4500fc0f642deec293c20ca4c7e68e6514a1a9ca", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "ad1227fa581f9ca745e74752d23333ab8b3b65eb", "filename": "src/ci/docker/x86_64-gnu-incremental/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "f1240201805718819fed02848b084ba7debbb263", "filename": "src/ci/docker/x86_64-gnu-llvm-3.7/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "fa9707d1a7352c9f54d1b7bcd91acf4ba79639a0", "filename": "src/ci/docker/x86_64-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "e5d89034dbe4268b6e46dcdf6dae3d914bbd591e", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "4e22907d9794c733251fa1ad0a79679b47b14f57", "filename": "src/ci/init_repo.sh", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,71 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -o errexit\n+set -o pipefail\n+set -o nounset\n+\n+set -o xtrace\n+\n+ci_dir=$(cd $(dirname $0) && pwd)\n+. \"$ci_dir/shared.sh\"\n+\n+REPO_DIR=\"$1\"\n+CACHE_DIR=\"$2\"\n+\n+cache_src_dir=\"$CACHE_DIR/src\"\n+# If the layout of the cache directory changes, bump the number here\n+# (and anywhere else this file is referenced) so the cache is wiped\n+cache_valid_file=\"$CACHE_DIR/cache_valid1\"\n+\n+if [ ! -d \"$REPO_DIR\" -o ! -d \"$REPO_DIR/.git\" ]; then\n+    echo \"Error: $REPO_DIR does not exist or is not a git repo\"\n+    exit 1\n+fi\n+cd $REPO_DIR\n+if [ ! -d \"$CACHE_DIR\" ]; then\n+    echo \"Error: $CACHE_DIR does not exist or is not an absolute path\"\n+    exit 1\n+fi\n+\n+# Wipe the cache if it's not valid, or mark it as invalid while we update it\n+if [ ! -f \"$cache_valid_file\" ]; then\n+    rm -rf \"$CACHE_DIR\" && mkdir \"$CACHE_DIR\"\n+else\n+    rm \"$cache_valid_file\"\n+fi\n+\n+# Update the cache (a pristine copy of the rust source master)\n+if [ ! -d \"$cache_src_dir/.git\" ]; then\n+    retry sh -c \"rm -rf $cache_src_dir && mkdir -p $cache_src_dir && \\\n+        git clone https://github.com/rust-lang/rust.git $cache_src_dir\"\n+fi\n+retry sh -c \"cd $cache_src_dir && git reset --hard && git pull\"\n+retry sh -c \"cd $cache_src_dir && \\\n+    git submodule deinit -f . && git submodule sync && git submodule update --init\"\n+\n+# Cache was updated without errors, mark it as valid\n+touch \"$cache_valid_file\"\n+\n+# Update the submodules of the repo we're in, using the pristine repo as\n+# a cache for any object files\n+# No, `git submodule foreach` won't work:\n+# http://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository\n+modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n+for module in $modules; do\n+    if [ ! -d \"$cache_src_dir/$module\" ]; then\n+        echo \"WARNING: $module not found in pristine repo\"\n+        retry sh -c \"git submodule deinit -f $module && git submodule update --init $module\"\n+        continue\n+    fi\n+    retry sh -c \"git submodule deinit -f $module && \\\n+        git submodule update --init --reference $cache_src_dir/$module $module\"\n+done"}, {"sha": "6c6a49ada15d9b72fb97eb0015c84bd5dbaea513", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -24,7 +24,6 @@ ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\"\n-RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-quiet-tests\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-cargo-openssl-static\""}, {"sha": "f2e13fc73ae4778930fcd635a8c85f21a9e91d7a", "filename": "src/ci/shared.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/bin/false\n # Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n@@ -9,13 +9,16 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# This file is intended to be sourced with `. shared.sh` or\n+# `source shared.sh`, hence the invalid shebang and not being\n+# marked as an executable file in git.\n+\n # See http://unix.stackexchange.com/questions/82598\n function retry {\n+  echo \"Attempting with retry:\" \"$@\"\n   local n=1\n   local max=5\n-  local delay=15\n   while true; do\n-    echo \"Attempting:\" \"$@\"\n     \"$@\" && break || {\n       if [[ $n -lt $max ]]; then\n         ((n++))"}, {"sha": "a2c56870d4dc589237102cc5e0fe7b9ebd0d14a1", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1 +1 @@\n-Subproject commit 9bd223ca406b1170a24942d6474f9e8a56f4a420\n+Subproject commit a2c56870d4dc589237102cc5e0fe7b9ebd0d14a1"}, {"sha": "616b98444ff4eb5260deee95ee3e090dfd98b947", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1 +1 @@\n-Subproject commit d08fe97d12b41c1ed8cc7701e545864132783941\n+Subproject commit 616b98444ff4eb5260deee95ee3e090dfd98b947"}, {"sha": "acedc32cacae80cf2f4925753a4ce7f7ffd7c86a", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1 +1 @@\n-Subproject commit 516549972d61c8946542d1a34afeae97167ff77b\n+Subproject commit acedc32cacae80cf2f4925753a4ce7f7ffd7c86a"}, {"sha": "5008b228c5c85fe04df289f4180a83fd4f5ce7b9", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1,3 +1,3 @@\n % The Rust Reference Manual\n \n-The manual has moved, and is now called [the reference](reference.html).\n+The manual has moved, and is now called [the reference](reference/index.html)."}, {"sha": "292f5a1ec816af92e6569d03e0084ee4b0c957b5", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -7,90 +7,207 @@\n - [abi_vectorcall](abi-vectorcall.md)\n - [abi_x86_interrupt](abi-x86-interrupt.md)\n - [advanced_slice_patterns](advanced-slice-patterns.md)\n+- [alloc](alloc.md)\n - [alloc_jemalloc](alloc-jemalloc.md)\n - [alloc_system](alloc-system.md)\n - [allocator](allocator.md)\n - [allow_internal_unstable](allow-internal-unstable.md)\n+- [as_unsafe_cell](as-unsafe-cell.md)\n+- [ascii_ctype](ascii-ctype.md)\n - [asm](asm.md)\n - [associated_consts](associated-consts.md)\n - [associated_type_defaults](associated-type-defaults.md)\n - [attr_literals](attr-literals.md)\n+- [binary_heap_extras](binary-heap-extras.md)\n+- [binary_heap_peek_mut_pop](binary-heap-peek-mut-pop.md)\n+- [borrow_state](borrow-state.md)\n+- [box_heap](box-heap.md)\n - [box_patterns](box-patterns.md)\n - [box_syntax](box-syntax.md)\n+- [c_void_variant](c-void-variant.md)\n+- [catch_expr](catch-expr.md)\n - [cfg_target_feature](cfg-target-feature.md)\n - [cfg_target_has_atomic](cfg-target-has-atomic.md)\n - [cfg_target_thread_local](cfg-target-thread-local.md)\n - [cfg_target_vendor](cfg-target-vendor.md)\n+- [char_escape_debug](char-escape-debug.md)\n+- [closure_to_fn_coercion](closure-to-fn-coercion.md)\n+- [coerce_unsized](coerce-unsized.md)\n+- [collection_placement](collection-placement.md)\n+- [collections](collections.md)\n+- [collections_range](collections-range.md)\n+- [command_envs](command-envs.md)\n - [compiler_builtins](compiler-builtins.md)\n+- [compiler_builtins_lib](compiler-builtins-lib.md)\n - [concat_idents](concat-idents.md)\n+- [concat_idents_macro](concat-idents-macro.md)\n - [conservative_impl_trait](conservative-impl-trait.md)\n - [const_fn](const-fn.md)\n - [const_indexing](const-indexing.md)\n+- [core_char_ext](core-char-ext.md)\n+- [core_float](core-float.md)\n+- [core_intrinsics](core-intrinsics.md)\n+- [core_panic](core-panic.md)\n+- [core_private_bignum](core-private-bignum.md)\n+- [core_private_diy_float](core-private-diy-float.md)\n+- [core_slice_ext](core-slice-ext.md)\n+- [core_str_ext](core-str-ext.md)\n - [custom_attribute](custom-attribute.md)\n - [custom_derive](custom-derive.md)\n+- [dec2flt](dec2flt.md)\n+- [decode_utf8](decode-utf8.md)\n - [default_type_parameter_fallback](default-type-parameter-fallback.md)\n+- [derive_clone_copy](derive-clone-copy.md)\n+- [derive_eq](derive-eq.md)\n+- [discriminant_value](discriminant-value.md)\n - [drop_types_in_const](drop-types-in-const.md)\n - [dropck_eyepatch](dropck-eyepatch.md)\n - [dropck_parametricity](dropck-parametricity.md)\n+- [enumset](enumset.md)\n+- [error_type_id](error-type-id.md)\n+- [exact_size_is_empty](exact-size-is-empty.md)\n - [exclusive_range_pattern](exclusive-range-pattern.md)\n-- [field_init_shorthand](field-init-shorthand.md)\n+- [fd](fd.md)\n+- [fd_read](fd-read.md)\n+- [fixed_size_array](fixed-size-array.md)\n+- [float_extras](float-extras.md)\n+- [flt2dec](flt2dec.md)\n+- [fmt_flags_align](fmt-flags-align.md)\n+- [fmt_internals](fmt-internals.md)\n+- [fn_traits](fn-traits.md)\n+- [fnbox](fnbox.md)\n - [fundamental](fundamental.md)\n+- [fused](fused.md)\n+- [future_atomic_orderings](future-atomic-orderings.md)\n - [generic_param_attrs](generic-param-attrs.md)\n+- [get_type_id](get-type-id.md)\n+- [heap_api](heap-api.md)\n+- [i128](i128.md)\n - [i128_type](i128-type.md)\n+- [inclusive_range](inclusive-range.md)\n - [inclusive_range_syntax](inclusive-range-syntax.md)\n+- [int_error_internals](int-error-internals.md)\n+- [integer_atomics](integer-atomics.md)\n+- [into_boxed_c_str](into-boxed-c-str.md)\n+- [into_boxed_os_str](into-boxed-os-str.md)\n+- [into_boxed_path](into-boxed-path.md)\n - [intrinsics](intrinsics.md)\n+- [io](io.md)\n+- [io_error_internals](io-error-internals.md)\n+- [ip](ip.md)\n+- [is_unique](is-unique.md)\n+- [iter_rfind](iter-rfind.md)\n - [lang_items](lang-items.md)\n+- [libstd_io_internals](libstd-io-internals.md)\n+- [libstd_sys_internals](libstd-sys-internals.md)\n+- [libstd_thread_internals](libstd-thread-internals.md)\n - [link_args](link-args.md)\n - [link_cfg](link-cfg.md)\n - [link_llvm_intrinsics](link-llvm-intrinsics.md)\n - [linkage](linkage.md)\n+- [linked_list_extras](linked-list-extras.md)\n - [log_syntax](log-syntax.md)\n+- [lookup_host](lookup-host.md)\n - [loop_break_value](loop-break-value.md)\n - [macro_reexport](macro-reexport.md)\n - [main](main.md)\n+- [map_entry_recover_keys](map-entry-recover-keys.md)\n+- [mpsc_select](mpsc-select.md)\n+- [n16](n16.md)\n - [naked_functions](naked-functions.md)\n - [needs_allocator](needs-allocator.md)\n - [needs_panic_runtime](needs-panic-runtime.md)\n - [never_type](never-type.md)\n+- [never_type_impls](never-type-impls.md)\n - [no_core](no-core.md)\n - [no_debug](no-debug.md)\n - [non_ascii_idents](non-ascii-idents.md)\n+- [nonzero](nonzero.md)\n - [omit_gdb_pretty_printer_section](omit-gdb-pretty-printer-section.md)\n - [on_unimplemented](on-unimplemented.md)\n+- [once_poison](once-poison.md)\n+- [oom](oom.md)\n - [optin_builtin_traits](optin-builtin-traits.md)\n+- [option_entry](option-entry.md)\n+- [osstring_shrink_to_fit](osstring-shrink-to-fit.md)\n+- [panic_abort](panic-abort.md)\n - [panic_runtime](panic-runtime.md)\n+- [panic_unwind](panic-unwind.md)\n+- [pattern](pattern.md)\n+- [peek](peek.md)\n+- [placement_in](placement-in.md)\n - [placement_in_syntax](placement-in-syntax.md)\n+- [placement_new_protocol](placement-new-protocol.md)\n - [platform_intrinsics](platform-intrinsics.md)\n - [plugin](plugin.md)\n - [plugin_registrar](plugin-registrar.md)\n - [prelude_import](prelude-import.md)\n+- [print](print.md)\n - [proc_macro](proc-macro.md)\n+- [proc_macro_internals](proc-macro-internals.md)\n+- [process_try_wait](process-try-wait.md)\n+- [question_mark_carrier](question-mark-carrier.md)\n - [quote](quote.md)\n+- [rand](rand.md)\n+- [range_contains](range-contains.md)\n+- [raw](raw.md)\n+- [rc_would_unwrap](rc-would-unwrap.md)\n - [relaxed_adts](relaxed-adts.md)\n - [repr_simd](repr-simd.md)\n+- [retain_hash_collection](retain-hash-collection.md)\n+- [reverse_cmp_key](reverse-cmp-key.md)\n+- [rt](rt.md)\n - [rustc_attrs](rustc-attrs.md)\n - [rustc_diagnostic_macros](rustc-diagnostic-macros.md)\n+- [rustc_private](rustc-private.md)\n - [rvalue_static_promotion](rvalue-static-promotion.md)\n - [sanitizer_runtime](sanitizer-runtime.md)\n+- [sanitizer_runtime_lib](sanitizer-runtime-lib.md)\n+- [set_stdio](set-stdio.md)\n+- [shared](shared.md)\n - [simd](simd.md)\n - [simd_ffi](simd-ffi.md)\n+- [sip_hash_13](sip-hash-13.md)\n+- [slice_concat_ext](slice-concat-ext.md)\n+- [slice_get_slice](slice-get-slice.md)\n - [slice_patterns](slice-patterns.md)\n+- [sort_internals](sort-internals.md)\n - [sort_unstable](sort-unstable.md)\n - [specialization](specialization.md)\n - [staged_api](staged-api.md)\n - [start](start.md)\n - [static_nobundle](static-nobundle.md)\n-- [static_recursion](static-recursion.md)\n+- [step_by](step-by.md)\n+- [step_trait](step-trait.md)\n - [stmt_expr_attributes](stmt-expr-attributes.md)\n+- [str_checked_slicing](str-checked-slicing.md)\n+- [str_escape](str-escape.md)\n+- [str_internals](str-internals.md)\n - [struct_field_attributes](struct-field-attributes.md)\n - [structural_match](structural-match.md)\n - [target_feature](target-feature.md)\n - [test](test.md)\n+- [thread_id](thread-id.md)\n - [thread_local](thread-local.md)\n+- [thread_local_internals](thread-local-internals.md)\n+- [thread_local_state](thread-local-state.md)\n - [trace_macros](trace-macros.md)\n+- [trusted_len](trusted-len.md)\n+- [try_from](try-from.md)\n - [type_ascription](type-ascription.md)\n - [unboxed_closures](unboxed-closures.md)\n+- [unicode](unicode.md)\n+- [unique](unique.md)\n+- [unsize](unsize.md)\n - [untagged_unions](untagged-unions.md)\n - [unwind_attributes](unwind-attributes.md)\n+- [update_panic_count](update-panic-count.md)\n - [use_extern_macros](use-extern-macros.md)\n+- [utf8_error_error_len](utf8-error-error-len.md)\n+- [vec_remove_item](vec-remove-item.md)\n+- [windows_c](windows-c.md)\n+- [windows_handle](windows-handle.md)\n+- [windows_net](windows-net.md)\n+- [windows_stdio](windows-stdio.md)\n - [windows_subsystem](windows-subsystem.md)\n+- [zero_one](zero-one.md)"}, {"sha": "47eeb0874fba1edf8a4e9b6b683de52a54181f09", "filename": "src/doc/unstable-book/src/alloc.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `alloc`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "79d7a7cad0b6e232c869ec59bf1ccc6a2eb11f7a", "filename": "src/doc/unstable-book/src/as-unsafe-cell.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fas-unsafe-cell.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fas-unsafe-cell.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fas-unsafe-cell.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `as_unsafe_cell`\n+\n+The tracking issue for this feature is: [#27708]\n+\n+[#27708]: https://github.com/rust-lang/rust/issues/27708\n+\n+------------------------"}, {"sha": "e253b4dcd9b5a1e6e456af8dcd0f235869d43b01", "filename": "src/doc/unstable-book/src/ascii-ctype.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fascii-ctype.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fascii-ctype.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fascii-ctype.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `ascii_ctype`\n+\n+The tracking issue for this feature is: [#39658]\n+\n+[#39658]: https://github.com/rust-lang/rust/issues/39658"}, {"sha": "aa535f3b67840cd51a80aec11c38d9648be17cbd", "filename": "src/doc/unstable-book/src/binary-heap-extras.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-extras.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `binary_heap_extras`\n+\n+The tracking issue for this feature is: [#28147]\n+\n+[#28147]: https://github.com/rust-lang/rust/issues/28147\n+\n+------------------------"}, {"sha": "f3863ab2a2abb4f98d65648b503c8ac32f09d3bb", "filename": "src/doc/unstable-book/src/binary-heap-peek-mut-pop.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-peek-mut-pop.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-peek-mut-pop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-peek-mut-pop.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `binary_heap_peek_mut_pop`\n+\n+The tracking issue for this feature is: [#38863]\n+\n+[#38863]: https://github.com/rust-lang/rust/issues/38863\n+\n+------------------------"}, {"sha": "304b8dffe98679c9f6fea3e7d2558757c1797563", "filename": "src/doc/unstable-book/src/borrow-state.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fborrow-state.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fborrow-state.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fborrow-state.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `borrow_state`\n+\n+The tracking issue for this feature is: [#27733]\n+\n+[#27733]: https://github.com/rust-lang/rust/issues/27733\n+\n+------------------------"}, {"sha": "0f3f01ba0e164e0fddbf343c1d38687738cd0297", "filename": "src/doc/unstable-book/src/box-heap.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-heap.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `box_heap`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------"}, {"sha": "a2fdc99363007b0ee90445d0045f59cc39f069d6", "filename": "src/doc/unstable-book/src/c-void-variant.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fc-void-variant.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fc-void-variant.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fc-void-variant.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `c_void_variant`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "44eb2a6dd4fdbda5f4ff346ddf8a36bbf7c85618", "filename": "src/doc/unstable-book/src/catch-expr.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcatch-expr.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `catch_expr`\n+\n+The tracking issue for this feature is: [#31436]\n+\n+[#31436]: https://github.com/rust-lang/rust/issues/31436\n+\n+------------------------"}, {"sha": "21aa486219e0de17b2a699c35cc8d34f84b52160", "filename": "src/doc/unstable-book/src/char-escape-debug.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fchar-escape-debug.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fchar-escape-debug.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fchar-escape-debug.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `char_escape_debug`\n+\n+The tracking issue for this feature is: [#35068]\n+\n+[#35068]: https://github.com/rust-lang/rust/issues/35068\n+\n+------------------------"}, {"sha": "4e3b735e24fb6de326475324f7ad416b619328f9", "filename": "src/doc/unstable-book/src/closure-to-fn-coercion.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fclosure-to-fn-coercion.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fclosure-to-fn-coercion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fclosure-to-fn-coercion.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `closure_to_fn_coercion`\n+\n+The tracking issue for this feature is: [#39817]\n+\n+[#39817]: https://github.com/rust-lang/rust/issues/39817\n+\n+------------------------"}, {"sha": "078d3faf42a7b19f032cd3e855ed7a55bf87357a", "filename": "src/doc/unstable-book/src/coerce-unsized.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcoerce-unsized.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcoerce-unsized.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcoerce-unsized.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `coerce_unsized`\n+\n+The tracking issue for this feature is: [#27732]\n+\n+[#27732]: https://github.com/rust-lang/rust/issues/27732\n+\n+------------------------"}, {"sha": "268ca6ea590d52557083f82ede375cc2e42a69c1", "filename": "src/doc/unstable-book/src/collection-placement.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollection-placement.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollection-placement.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollection-placement.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `collection_placement`\n+\n+The tracking issue for this feature is: [#30172]\n+\n+[#30172]: https://github.com/rust-lang/rust/issues/30172\n+\n+------------------------"}, {"sha": "ea4f999ba0f9ac6ca1dd640b8a8a6a47cf9339d0", "filename": "src/doc/unstable-book/src/collections-range.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections-range.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections-range.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections-range.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `collections_range`\n+\n+The tracking issue for this feature is: [#30877]\n+\n+[#30877]: https://github.com/rust-lang/rust/issues/30877\n+\n+------------------------"}, {"sha": "5c937833c9e26a4489893b4680a58285f3833a37", "filename": "src/doc/unstable-book/src/collections.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `collections`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "0ab89e278cdf7bfba028ceb0ebd3152e53059f2f", "filename": "src/doc/unstable-book/src/command-envs.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcommand-envs.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcommand-envs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcommand-envs.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `command_envs`\n+\n+The tracking issue for this feature is: [#38526]\n+\n+[#38526]: https://github.com/rust-lang/rust/issues/38526\n+\n+------------------------"}, {"sha": "8986b968ca6c4368b5c384ff011744dcc0f9b2ae", "filename": "src/doc/unstable-book/src/compiler-builtins-lib.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `compiler_builtins_lib`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ac2fdd4fceb6dafc9239b52d65484c3d83ce2ce5", "filename": "src/doc/unstable-book/src/concat-idents-macro.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents-macro.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `concat_idents_macro`\n+\n+The tracking issue for this feature is: [#29599]\n+\n+[#29599]: https://github.com/rust-lang/rust/issues/29599\n+\n+------------------------"}, {"sha": "d37d6b5c6d0bafd9b3025e2940bd9bd996e6be92", "filename": "src/doc/unstable-book/src/core-char-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-char-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-char-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-char-ext.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `core_char_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "194b2608dd02bfb5c89fe45b456bfab629115a0b", "filename": "src/doc/unstable-book/src/core-float.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-float.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-float.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-float.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `core_float`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "28ad3525ef7a6af41f573733feb5462db15bde97", "filename": "src/doc/unstable-book/src/core-intrinsics.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-intrinsics.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `core_intrinsics`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "c197588404c9329512da4902c7b1fdbe7c5d7b63", "filename": "src/doc/unstable-book/src/core-panic.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-panic.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-panic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-panic.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `core_panic`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "f85811c545e43de4ccbbaa22c6342c829894ccb3", "filename": "src/doc/unstable-book/src/core-private-bignum.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-bignum.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-bignum.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-bignum.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `core_private_bignum`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "8465921d673b1d464d8e728151b894aa53d6de45", "filename": "src/doc/unstable-book/src/core-private-diy-float.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-diy-float.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-diy-float.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-diy-float.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `core_private_diy_float`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "c50d44ac0ce3e1cd44b212f03b38715a798fa12d", "filename": "src/doc/unstable-book/src/core-slice-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-slice-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-slice-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-slice-ext.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `core_slice_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "08c68f11c6eca6e41b0c1d45ea94dadcabf82355", "filename": "src/doc/unstable-book/src/core-str-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-str-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-str-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-str-ext.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `core_str_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "311ab4adcfd75a3560f49d380ae47a6230fb1b94", "filename": "src/doc/unstable-book/src/dec2flt.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fdec2flt.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fdec2flt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdec2flt.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `dec2flt`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b96854ebcd461a27b405c0c77631f5259fb05b6a", "filename": "src/doc/unstable-book/src/decode-utf8.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fdecode-utf8.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fdecode-utf8.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdecode-utf8.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `decode_utf8`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "cc603911cbd29c8b349b210f9aa48a90cb1d0e0e", "filename": "src/doc/unstable-book/src/derive-clone-copy.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-clone-copy.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-clone-copy.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-clone-copy.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `derive_clone_copy`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "68a275f5419d41a17f860c9370532024ef0fa300", "filename": "src/doc/unstable-book/src/derive-eq.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-eq.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-eq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-eq.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `derive_eq`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "2f99f5ecab39f6cb11609680d6b723a360197a3d", "filename": "src/doc/unstable-book/src/discriminant-value.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fdiscriminant-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fdiscriminant-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdiscriminant-value.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `discriminant_value`\n+\n+The tracking issue for this feature is: [#24263]\n+\n+[#24263]: https://github.com/rust-lang/rust/issues/24263\n+\n+------------------------"}, {"sha": "24c8d8fa7dbb914ae7243fb81af9b67bb544791e", "filename": "src/doc/unstable-book/src/enumset.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fenumset.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fenumset.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fenumset.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `enumset`\n+\n+The tracking issue for this feature is: [#37966]\n+\n+[#37966]: https://github.com/rust-lang/rust/issues/37966\n+\n+------------------------"}, {"sha": "be7a3ffd4dc43ff20f939ba59806cca9117be0d6", "filename": "src/doc/unstable-book/src/error-type-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ferror-type-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ferror-type-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ferror-type-id.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `error_type_id`\n+\n+The tracking issue for this feature is: [#27745]\n+\n+[#27745]: https://github.com/rust-lang/rust/issues/27745\n+\n+------------------------"}, {"sha": "200ec38725176b0235ceec6d67c85aecfe46ba90", "filename": "src/doc/unstable-book/src/exact-size-is-empty.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fexact-size-is-empty.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fexact-size-is-empty.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fexact-size-is-empty.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `exact_size_is_empty`\n+\n+The tracking issue for this feature is: [#35428]\n+\n+[#35428]: https://github.com/rust-lang/rust/issues/35428\n+\n+------------------------"}, {"sha": "e78d4330abfc04da7467c26f7131869146cfef58", "filename": "src/doc/unstable-book/src/fd-read.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd-read.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd-read.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd-read.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `fd_read`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "0414244285ba72de76a9f562569edfd6f6d9c6ce", "filename": "src/doc/unstable-book/src/fd.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `fd`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "e737dbaa4ec02cbeb7e24c347a72bdb9441cb48e", "filename": "src/doc/unstable-book/src/field-init-shorthand.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "raw_url": "https://github.com/rust-lang/rust/raw/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md?ref=b477682dca3343eb89a467f0d3c73986a53d49d9", "patch": "@@ -1,10 +0,0 @@\n-# `field_init_shorthand`\n-\n-The tracking issue for this feature is: [#37340]\n-\n-[#37340]: https://github.com/rust-lang/rust/issues/37340\n-\n-------------------------\n-\n-\n-"}, {"sha": "9e24e6a0850d1acc27b73c7d1ac55caeb5da5102", "filename": "src/doc/unstable-book/src/fixed-size-array.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffixed-size-array.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffixed-size-array.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffixed-size-array.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `fixed_size_array`\n+\n+The tracking issue for this feature is: [#27778]\n+\n+[#27778]: https://github.com/rust-lang/rust/issues/27778\n+\n+------------------------"}, {"sha": "ff2d20a545fe5d1dfc4f5daadf332e113411ce81", "filename": "src/doc/unstable-book/src/float-extras.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffloat-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffloat-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffloat-extras.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `float_extras`\n+\n+The tracking issue for this feature is: [#27752]\n+\n+[#27752]: https://github.com/rust-lang/rust/issues/27752\n+\n+------------------------"}, {"sha": "15e62a3a7dad0bd115a51c3a309da0311f2fb9be", "filename": "src/doc/unstable-book/src/flt2dec.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fflt2dec.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fflt2dec.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fflt2dec.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `flt2dec`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "755263bd9a61fbf60589745d5101abb90f1cb72c", "filename": "src/doc/unstable-book/src/fmt-flags-align.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-flags-align.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-flags-align.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-flags-align.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `fmt_flags_align`\n+\n+The tracking issue for this feature is: [#27726]\n+\n+[#27726]: https://github.com/rust-lang/rust/issues/27726\n+\n+------------------------"}, {"sha": "7cbe3c89a644164c448bfbb4f450f042aeafce61", "filename": "src/doc/unstable-book/src/fmt-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `fmt_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "3942cda553889a0374d38aafada58cd688e81fe0", "filename": "src/doc/unstable-book/src/fn-traits.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffn-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffn-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffn-traits.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `fn_traits`\n+\n+The tracking issue for this feature is: [#29625]\n+\n+[#29625]: https://github.com/rust-lang/rust/issues/29625\n+\n+------------------------"}, {"sha": "a9b74d4f00470a16aaa18a5d149782ffec60df45", "filename": "src/doc/unstable-book/src/fnbox.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffnbox.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffnbox.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffnbox.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `fnbox`\n+\n+The tracking issue for this feature is: [#28796]\n+\n+[#28796]: https://github.com/rust-lang/rust/issues/28796\n+\n+------------------------"}, {"sha": "460555bf1b0dbee4a6b1e501d65c294726eef506", "filename": "src/doc/unstable-book/src/fused.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffused.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffused.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `fused`\n+\n+The tracking issue for this feature is: [#35602]\n+\n+[#35602]: https://github.com/rust-lang/rust/issues/35602\n+\n+------------------------"}, {"sha": "40c2ef2db0551ec64fbe1b671bb6c5cb62582e74", "filename": "src/doc/unstable-book/src/future-atomic-orderings.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffuture-atomic-orderings.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ffuture-atomic-orderings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffuture-atomic-orderings.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `future_atomic_orderings`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "afdb030c406dd194ace707858584d537be1ce232", "filename": "src/doc/unstable-book/src/get-type-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fget-type-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fget-type-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fget-type-id.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `get_type_id`\n+\n+The tracking issue for this feature is: [#27745]\n+\n+[#27745]: https://github.com/rust-lang/rust/issues/27745\n+\n+------------------------"}, {"sha": "01404e49dbda369559530ea824e2a14d6e21aed8", "filename": "src/doc/unstable-book/src/heap-api.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fheap-api.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fheap-api.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fheap-api.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `heap_api`\n+\n+The tracking issue for this feature is: [#27700]\n+\n+[#27700]: https://github.com/rust-lang/rust/issues/27700\n+\n+------------------------"}, {"sha": "a1a7ce8e63f443d3cdcc11fe57726c6874e3e466", "filename": "src/doc/unstable-book/src/i128.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `i128`\n+\n+The tracking issue for this feature is: [#35118]\n+\n+[#35118]: https://github.com/rust-lang/rust/issues/35118\n+\n+------------------------"}, {"sha": "255445c318dca7c830e4e325df5155715259ba44", "filename": "src/doc/unstable-book/src/inclusive-range-syntax.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -6,5 +6,15 @@ The tracking issue for this feature is: [#28237]\n \n ------------------------\n \n+To get a range that goes from 0 to 10 and includes the value 10, you\n+can write `0...10`:\n \n+```rust\n+#![feature(inclusive_range_syntax)]\n \n+fn main() {\n+    for i in 0...10 {\n+        println!(\"{}\", i);\n+    }\n+}\n+```"}, {"sha": "2e88e2047868d2a9029ae11d4c8b73fd4c2636c3", "filename": "src/doc/unstable-book/src/inclusive-range.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `inclusive_range`\n+\n+The tracking issue for this feature is: [#28237]\n+\n+[#28237]: https://github.com/rust-lang/rust/issues/28237\n+\n+------------------------"}, {"sha": "402e4fa5ef6d73fcf3f4f2ef0a610add95f9d018", "filename": "src/doc/unstable-book/src/int-error-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fint-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fint-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fint-error-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `int_error_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "50db9fd4ca45c6976b58981296bc305e381a02bd", "filename": "src/doc/unstable-book/src/integer-atomics.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finteger-atomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finteger-atomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finteger-atomics.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `integer_atomics`\n+\n+The tracking issue for this feature is: [#32976]\n+\n+[#32976]: https://github.com/rust-lang/rust/issues/32976\n+\n+------------------------"}, {"sha": "0d94b4fc560571a2c18701369ef6797f1b606ec3", "filename": "src/doc/unstable-book/src/into-boxed-c-str.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-c-str.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-c-str.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-c-str.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_c_str`\n+\n+The tracking issue for this feature is: [#40380]\n+\n+[#40380]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "7636e20b14d88fc4f52875ea6257ef8775c044f8", "filename": "src/doc/unstable-book/src/into-boxed-os-str.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-os-str.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-os-str.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-os-str.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_os_str`\n+\n+The tracking issue for this feature is: [#into_boxed_os_str]\n+\n+[#into_boxed_os_str]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "754c6042f07f6a2360050876e29a39a7c1cd925a", "filename": "src/doc/unstable-book/src/into-boxed-path.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-path.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-path.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-path.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_path`\n+\n+The tracking issue for this feature is: [#40380]\n+\n+[#40380]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "5bee18d33d61bcf21538e1f4c21bf36bf76facce", "filename": "src/doc/unstable-book/src/io-error-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fio-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fio-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fio-error-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `io_error_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ed6cae24e32de7267f1d8693f9900eb7707fa708", "filename": "src/doc/unstable-book/src/io.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fio.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fio.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `io`\n+\n+The tracking issue for this feature is: [#27802]\n+\n+[#27802]: https://github.com/rust-lang/rust/issues/27802\n+\n+------------------------"}, {"sha": "7e7d52adbdb0fd76bafbdc14703e0b8dc6323b89", "filename": "src/doc/unstable-book/src/ip.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fip.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fip.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fip.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `ip`\n+\n+The tracking issue for this feature is: [#27709]\n+\n+[#27709]: https://github.com/rust-lang/rust/issues/27709\n+\n+------------------------"}, {"sha": "6070006758b7ac86a29f3c01de14a22ad9d1080f", "filename": "src/doc/unstable-book/src/is-unique.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fis-unique.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fis-unique.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fis-unique.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `is_unique`\n+\n+The tracking issue for this feature is: [#28356]\n+\n+[#28356]: https://github.com/rust-lang/rust/issues/28356\n+\n+------------------------"}, {"sha": "444714490345b3b0a2938a65ec66a85d3b5431cc", "filename": "src/doc/unstable-book/src/iter-rfind.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fiter-rfind.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fiter-rfind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fiter-rfind.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `iter_rfind`\n+\n+The tracking issue for this feature is: [#39480]\n+\n+[#39480]: https://github.com/rust-lang/rust/issues/39480\n+\n+------------------------"}, {"sha": "8bcc2769db71e3a32c84e67a58f19b191f10a3ff", "filename": "src/doc/unstable-book/src/libstd-io-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-io-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-io-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-io-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_io_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "1b53faa8a0071170aebf00bbba17de7525a18ddf", "filename": "src/doc/unstable-book/src/libstd-sys-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-sys-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-sys-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-sys-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_sys_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b682d12e7cdd1e9b2cf76b0823652c931da1dae8", "filename": "src/doc/unstable-book/src/libstd-thread-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-thread-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-thread-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-thread-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_thread_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "be3b96aea70d8933ec5d0b2275dcd17aab91f1a1", "filename": "src/doc/unstable-book/src/linked-list-extras.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flinked-list-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flinked-list-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flinked-list-extras.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `linked_list_extras`\n+\n+The tracking issue for this feature is: [#27794]\n+\n+[#27794]: https://github.com/rust-lang/rust/issues/27794\n+\n+------------------------"}, {"sha": "b60e7a010945a423269242cdf77f463c469ed3ce", "filename": "src/doc/unstable-book/src/lookup-host.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flookup-host.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Flookup-host.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flookup-host.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `lookup_host`\n+\n+The tracking issue for this feature is: [#27705]\n+\n+[#27705]: https://github.com/rust-lang/rust/issues/27705\n+\n+------------------------"}, {"sha": "2d15aa0e90de8e18b4b6dfafe7ab1ae759e3ddf8", "filename": "src/doc/unstable-book/src/map-entry-recover-keys.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fmap-entry-recover-keys.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fmap-entry-recover-keys.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmap-entry-recover-keys.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `map_entry_recover_keys`\n+\n+The tracking issue for this feature is: [#34285]\n+\n+[#34285]: https://github.com/rust-lang/rust/issues/34285"}, {"sha": "1405b6c5cb245f48883efa2fa20de5feeac70426", "filename": "src/doc/unstable-book/src/mpsc-select.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fmpsc-select.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fmpsc-select.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmpsc-select.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `mpsc_select`\n+\n+The tracking issue for this feature is: [#27800]\n+\n+[#27800]: https://github.com/rust-lang/rust/issues/27800"}, {"sha": "e556adaa13ea738db2fdb9b30069fa8ac06583ea", "filename": "src/doc/unstable-book/src/n16.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fn16.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fn16.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fn16.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `n16`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "4063cd0db01d60c0d7ac647b726df7f9bac37f12", "filename": "src/doc/unstable-book/src/never-type-impls.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type-impls.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type-impls.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type-impls.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `never_type_impls`\n+\n+The tracking issue for this feature is: [#35121]\n+\n+[#35121]: https://github.com/rust-lang/rust/issues/35121\n+\n+------------------------"}, {"sha": "f200f8e2786fa40c262299f14136c3357d5f2c20", "filename": "src/doc/unstable-book/src/nonzero.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fnonzero.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fnonzero.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnonzero.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `nonzero`\n+\n+The tracking issue for this feature is: [#27730]\n+\n+[#27730]: https://github.com/rust-lang/rust/issues/27730\n+\n+------------------------"}, {"sha": "3c16cafae5014ff95d4116fdbf22dd801c7e2b89", "filename": "src/doc/unstable-book/src/once-poison.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fonce-poison.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fonce-poison.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fonce-poison.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `once_poison`\n+\n+The tracking issue for this feature is: [#33577]\n+\n+[#33577]: https://github.com/rust-lang/rust/issues/33577\n+\n+------------------------"}, {"sha": "908caeb75c60166333fa3bbc9ff824d75093c2cd", "filename": "src/doc/unstable-book/src/oom.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Foom.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Foom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foom.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `oom`\n+\n+The tracking issue for this feature is: [#27700]\n+\n+[#27700]: https://github.com/rust-lang/rust/issues/27700\n+\n+------------------------"}, {"sha": "edb4efc09e5877de1103df4954c08397d5e788e0", "filename": "src/doc/unstable-book/src/option-entry.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Foption-entry.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Foption-entry.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foption-entry.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `option_entry`\n+\n+The tracking issue for this feature is: [#39288]\n+\n+[#39288]: https://github.com/rust-lang/rust/issues/39288\n+\n+------------------------"}, {"sha": "21dc7d095c808c5845267a54b39d15379453ada0", "filename": "src/doc/unstable-book/src/osstring-shrink-to-fit.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fosstring-shrink-to-fit.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fosstring-shrink-to-fit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fosstring-shrink-to-fit.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `osstring_shrink_to_fit`\n+\n+The tracking issue for this feature is: [#40421]\n+\n+[#40421]: https://github.com/rust-lang/rust/issues/40421\n+\n+------------------------"}, {"sha": "07a957626905ed4da2bf52197fe50bad96050aa2", "filename": "src/doc/unstable-book/src/panic-abort.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-abort.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-abort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-abort.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `panic_abort`\n+\n+The tracking issue for this feature is: [#32837]\n+\n+[#32837]: https://github.com/rust-lang/rust/issues/32837\n+\n+------------------------"}, {"sha": "840e492597b54c0f93a5587edae2f786cce4dba7", "filename": "src/doc/unstable-book/src/panic-unwind.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-unwind.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `panic_unwind`\n+\n+The tracking issue for this feature is: [#32837]\n+\n+[#32837]: https://github.com/rust-lang/rust/issues/32837\n+\n+------------------------"}, {"sha": "e76ee6beb675b450d28acc8fdf32a6b4c4c542b0", "filename": "src/doc/unstable-book/src/pattern.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpattern.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `pattern`\n+\n+The tracking issue for this feature is: [#27721]\n+\n+[#27721]: https://github.com/rust-lang/rust/issues/27721\n+\n+------------------------"}, {"sha": "c42b4e995ec58179ca5b25e7efeb9258acf24a13", "filename": "src/doc/unstable-book/src/peek.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpeek.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fpeek.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpeek.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `peek`\n+\n+The tracking issue for this feature is: [#38980]\n+\n+[#38980]: https://github.com/rust-lang/rust/issues/38980\n+\n+------------------------"}, {"sha": "6ff010b7e3855f4d195e0a9ce78142d1007750b9", "filename": "src/doc/unstable-book/src/placement-in.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `placement_in`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------"}, {"sha": "d53225f0a352eaeb84f5232c30496a4ba7c037fb", "filename": "src/doc/unstable-book/src/placement-new-protocol.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-new-protocol.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-new-protocol.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-new-protocol.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `placement_new_protocol`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------"}, {"sha": "dc25cb237e3b55b8fa195b9147a496e64312c79e", "filename": "src/doc/unstable-book/src/print.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fprint.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fprint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fprint.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `print`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ea087c0a4f7b0182f0a8c5182eda7121584db97b", "filename": "src/doc/unstable-book/src/proc-macro-internals.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `proc_macro_internals`\n+\n+The tracking issue for this feature is: [#27812]\n+\n+[#27812]: https://github.com/rust-lang/rust/issues/27812\n+\n+------------------------"}, {"sha": "3593b6423495aa9fb5ee7c459bf72f20e5c2c5d6", "filename": "src/doc/unstable-book/src/process-try-wait.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fprocess-try-wait.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fprocess-try-wait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fprocess-try-wait.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `process_try_wait`\n+\n+The tracking issue for this feature is: [#38903]\n+\n+[#38903]: https://github.com/rust-lang/rust/issues/38903\n+\n+------------------------"}, {"sha": "56154acc02bbfab46fb4766fac29ed44b1e7b0ce", "filename": "src/doc/unstable-book/src/question-mark-carrier.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fquestion-mark-carrier.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fquestion-mark-carrier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fquestion-mark-carrier.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `question_mark_carrier`\n+\n+The tracking issue for this feature is: [#31436]\n+\n+[#31436]: https://github.com/rust-lang/rust/issues/31436\n+\n+------------------------"}, {"sha": "d0229d94c20bfab71f398fad760c5d2a1d2ceb40", "filename": "src/doc/unstable-book/src/rand.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frand.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frand.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `rand`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ac4581faf2ae410089dcaad17552522398ba0fa9", "filename": "src/doc/unstable-book/src/range-contains.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frange-contains.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frange-contains.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frange-contains.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `range_contains`\n+\n+The tracking issue for this feature is: [#32311]\n+\n+[#32311]: https://github.com/rust-lang/rust/issues/32311\n+\n+------------------------"}, {"sha": "d7caf22813dc727fd690f7eca4e18c8e7c5c014a", "filename": "src/doc/unstable-book/src/raw.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fraw.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fraw.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fraw.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `raw`\n+\n+The tracking issue for this feature is: [#27751]\n+\n+[#27751]: https://github.com/rust-lang/rust/issues/27751\n+\n+------------------------"}, {"sha": "462387dfdcc4024034cfaef26b369010969fc095", "filename": "src/doc/unstable-book/src/rc-would-unwrap.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frc-would-unwrap.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frc-would-unwrap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frc-would-unwrap.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `rc_would_unwrap`\n+\n+The tracking issue for this feature is: [#28356]\n+\n+[#28356]: https://github.com/rust-lang/rust/issues/28356"}, {"sha": "c9ba5acf02003a92ea3ebd017f3c35d0c521a329", "filename": "src/doc/unstable-book/src/retain-hash-collection.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fretain-hash-collection.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fretain-hash-collection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fretain-hash-collection.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `retain_hash_collection`\n+\n+The tracking issue for this feature is: [#36648]\n+\n+[#36648]: https://github.com/rust-lang/rust/issues/36648\n+\n+------------------------"}, {"sha": "a1a851d6ed6328847bcc9c9a130df9ebe4ff74f1", "filename": "src/doc/unstable-book/src/reverse-cmp-key.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Freverse-cmp-key.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Freverse-cmp-key.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Freverse-cmp-key.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `reverse_cmp_key`\n+\n+The tracking issue for this feature is: [#40893]\n+\n+[#40893]: https://github.com/rust-lang/rust/issues/40893\n+\n+------------------------"}, {"sha": "007acc207a6553cbf33efd2c6e5afefb5753943f", "filename": "src/doc/unstable-book/src/rt.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frt.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frt.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `rt`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "2453475efe59970f6c993c6fcb193c3d373e15b4", "filename": "src/doc/unstable-book/src/rustc-private.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-private.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-private.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-private.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `rustc_private`\n+\n+The tracking issue for this feature is: [#27812]\n+\n+[#27812]: https://github.com/rust-lang/rust/issues/27812\n+\n+------------------------"}, {"sha": "82ae67fc05ac3ce680f6bad3c4e8871252229690", "filename": "src/doc/unstable-book/src/sanitizer-runtime-lib.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime-lib.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `sanitizer_runtime_lib`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "7dbdcdaa1a2ff21816e4c7b8a255667b20458057", "filename": "src/doc/unstable-book/src/set-stdio.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fset-stdio.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fset-stdio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fset-stdio.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `set_stdio`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b79d1212c62f0d9a2829bcf598a46f5eb5f943b2", "filename": "src/doc/unstable-book/src/shared.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fshared.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fshared.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fshared.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `shared`\n+\n+The tracking issue for this feature is: [#27730]\n+\n+[#27730]: https://github.com/rust-lang/rust/issues/27730\n+\n+------------------------"}, {"sha": "8f69c3ab2def7c31da3cb399c08ceda9dbc9f99b", "filename": "src/doc/unstable-book/src/sip-hash-13.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fsip-hash-13.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fsip-hash-13.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsip-hash-13.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `sip_hash_13`\n+\n+The tracking issue for this feature is: [#34767]\n+\n+[#34767]: https://github.com/rust-lang/rust/issues/34767\n+\n+------------------------"}, {"sha": "9ba2de5adc7268eb9752e3a2afd14d4ffd2d9e5e", "filename": "src/doc/unstable-book/src/slice-concat-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-concat-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-concat-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-concat-ext.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `slice_concat_ext`\n+\n+The tracking issue for this feature is: [#27747]\n+\n+[#27747]: https://github.com/rust-lang/rust/issues/27747\n+\n+------------------------"}, {"sha": "57e2c148e7963acc23c096538bc48974d3b6bd80", "filename": "src/doc/unstable-book/src/slice-get-slice.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-get-slice.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-get-slice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-get-slice.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `slice_get_slice`\n+\n+The tracking issue for this feature is: [#35729]\n+\n+[#35729]: https://github.com/rust-lang/rust/issues/35729\n+\n+------------------------"}, {"sha": "6f2385e53008a3a586ef099538607c43da99ea62", "filename": "src/doc/unstable-book/src/sort-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `sort_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "efc380df6e1194e1de0fa7183b81b39b604a6968", "filename": "src/doc/unstable-book/src/specialization.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -2,6 +2,8 @@\n \n The tracking issue for this feature is: [#31844]\n \n+[#31844]: https://github.com/rust-lang/rust/issues/31844\n+\n ------------------------\n \n "}, {"sha": "d419ea41c6ffb264b330ec100b6ab386078f6c3e", "filename": "src/doc/unstable-book/src/static-recursion.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "raw_url": "https://github.com/rust-lang/rust/raw/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md?ref=b477682dca3343eb89a467f0d3c73986a53d49d9", "patch": "@@ -1,10 +0,0 @@\n-# `static_recursion`\n-\n-The tracking issue for this feature is: [#29719]\n-\n-[#29719]: https://github.com/rust-lang/rust/issues/29719\n-\n-------------------------\n-\n-\n-"}, {"sha": "b649496cdd80b7ef47e9c0f036482c3cd37bc710", "filename": "src/doc/unstable-book/src/step-by.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-by.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-by.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-by.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `step_by`\n+\n+The tracking issue for this feature is: [#27741]\n+\n+[#27741]: https://github.com/rust-lang/rust/issues/27741\n+\n+------------------------"}, {"sha": "e53ca13f7b6f5a6f653a7c631a8df29c0582b3a4", "filename": "src/doc/unstable-book/src/step-trait.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-trait.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `step_trait`\n+\n+The tracking issue for this feature is: [#27741]\n+\n+[#27741]: https://github.com/rust-lang/rust/issues/27741\n+\n+------------------------"}, {"sha": "d390139a6befaef8024cbac2fe7fefa32417264f", "filename": "src/doc/unstable-book/src/str-checked-slicing.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-checked-slicing.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-checked-slicing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-checked-slicing.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `str_checked_slicing`\n+\n+The tracking issue for this feature is: [#39932]\n+\n+[#39932]: https://github.com/rust-lang/rust/issues/39932\n+\n+------------------------"}, {"sha": "61e31c89443261dd66b6bad58cb720f2b4824b2b", "filename": "src/doc/unstable-book/src/str-escape.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-escape.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-escape.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-escape.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `str_escape`\n+\n+The tracking issue for this feature is: [#27791]\n+\n+[#27791]: https://github.com/rust-lang/rust/issues/27791\n+\n+------------------------"}, {"sha": "af8ef056dbe275612e6c7cf24fb08c237a0ca632", "filename": "src/doc/unstable-book/src/str-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `str_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "af3ea991025f7958f72b6e884f6426bb74fc84c3", "filename": "src/doc/unstable-book/src/thread-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-id.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `thread_id`\n+\n+The tracking issue for this feature is: [#21507]\n+\n+[#21507]: https://github.com/rust-lang/rust/issues/21507\n+\n+------------------------"}, {"sha": "e1cdcc339d2294a4f23fbc914e51e60ce38551d6", "filename": "src/doc/unstable-book/src/thread-local-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-internals.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `thread_local_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "113c1e910dca349cf2be8b5df6bfe376d36bc3a6", "filename": "src/doc/unstable-book/src/thread-local-state.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-state.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-state.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-state.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `thread_local_state`\n+\n+The tracking issue for this feature is: [#27716]\n+\n+[#27716]: https://github.com/rust-lang/rust/issues/27716\n+\n+------------------------"}, {"sha": "80213cf1fdbb99c31017fc92a7c91e70cdb995f5", "filename": "src/doc/unstable-book/src/trusted-len.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrusted-len.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrusted-len.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrusted-len.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `trusted_len`\n+\n+The tracking issue for this feature is: [#37572]\n+\n+[#37572]: https://github.com/rust-lang/rust/issues/37572\n+\n+------------------------"}, {"sha": "d763caff5aacbdbaadba6daa563c809430024e1b", "filename": "src/doc/unstable-book/src/try-from.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ftry-from.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Ftry-from.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftry-from.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `try_from`\n+\n+The tracking issue for this feature is: [#33417]\n+\n+[#33417]: https://github.com/rust-lang/rust/issues/33417\n+\n+------------------------"}, {"sha": "9fecec2ac36d33a4548802622d5be3c227f0c469", "filename": "src/doc/unstable-book/src/unicode.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Funicode.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Funicode.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funicode.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `unicode`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "99a3490d106bb6c2bce9fdace851b8b835c65666", "filename": "src/doc/unstable-book/src/unique.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Funique.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Funique.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funique.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `unique`\n+\n+The tracking issue for this feature is: [#27730]\n+\n+[#27730]: https://github.com/rust-lang/rust/issues/27730\n+\n+------------------------"}, {"sha": "92807e2858ffdcabd6c288790c90f0521547fd16", "filename": "src/doc/unstable-book/src/unsize.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Funsize.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Funsize.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funsize.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `unsize`\n+\n+The tracking issue for this feature is: [#27732]\n+\n+[#27732]: https://github.com/rust-lang/rust/issues/27732\n+\n+------------------------"}, {"sha": "d315647ba104949ec39925737afca1ae297bdbd1", "filename": "src/doc/unstable-book/src/update-panic-count.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fupdate-panic-count.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fupdate-panic-count.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fupdate-panic-count.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `update_panic_count`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "1c14a5a9fa08b214752a9bb5b4cf4fd7a32693bc", "filename": "src/doc/unstable-book/src/utf8-error-error-len.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Futf8-error-error-len.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Futf8-error-error-len.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Futf8-error-error-len.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `utf8_error_error_len`\n+\n+The tracking issue for this feature is: [#40494]\n+\n+[#40494]: https://github.com/rust-lang/rust/issues/40494\n+\n+------------------------"}, {"sha": "2b8c9f046eefd92fa4a86ceb0fae62a6af8f6498", "filename": "src/doc/unstable-book/src/vec-remove-item.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fvec-remove-item.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fvec-remove-item.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fvec-remove-item.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `vec_remove_item`\n+\n+The tracking issue for this feature is: [#40062]\n+\n+[#40062]: https://github.com/rust-lang/rust/issues/40062\n+\n+------------------------"}, {"sha": "3f833eb3d093ed08f215b3fc4607b200ab8e6ab2", "filename": "src/doc/unstable-book/src/windows-c.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-c.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-c.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-c.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `windows_c`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "f47a8425045b9f25d51673ea21fbc7d60254bebc", "filename": "src/doc/unstable-book/src/windows-handle.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-handle.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-handle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-handle.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `windows_handle`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "174960d4f0048ae244317de41bad401b04eb9f10", "filename": "src/doc/unstable-book/src/windows-net.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-net.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-net.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-net.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `windows_net`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "4d361442386a2422fdbfb2b17e5621254058bbfe", "filename": "src/doc/unstable-book/src/windows-stdio.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-stdio.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-stdio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-stdio.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,5 @@\n+# `windows_stdio`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "4d1cf38c3c2ea6205823e9c8c461f734afe51a2d", "filename": "src/doc/unstable-book/src/zero-one.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fzero-one.md", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fdoc%2Funstable-book%2Fsrc%2Fzero-one.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fzero-one.md?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,7 @@\n+# `zero_one`\n+\n+The tracking issue for this feature is: [#27739]\n+\n+[#27739]: https://github.com/rust-lang/rust/issues/27739\n+\n+------------------------"}, {"sha": "bd28a63c5f4dfb947edce379ac569c3c1af43519", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -196,7 +196,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_\n     let toknum = &s[content_end + 3 .. toknum_end];\n \n     let not_found = format!(\"didn't find token {:?} in the map\", toknum);\n-    let proto_tok = tokens.get(toknum).expect(&not_found[..]);\n+    let proto_tok = tokens.get(toknum).expect(&not_found);\n \n     let nm = Symbol::intern(content);\n \n@@ -304,14 +304,14 @@ fn main() {\n     let mut token_file = File::open(&Path::new(&args.next().unwrap())).unwrap();\n     let mut token_list = String::new();\n     token_file.read_to_string(&mut token_list).unwrap();\n-    let token_map = parse_token_list(&token_list[..]);\n+    let token_map = parse_token_list(&token_list);\n \n     let stdin = std::io::stdin();\n     let lock = stdin.lock();\n     let lines = lock.lines();\n     let antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n                                                        &token_map,\n-                                                       &surrogate_pairs_pos[..],\n+                                                       &surrogate_pairs_pos,\n                                                        has_bom));\n \n     for antlr_tok in antlr_tokens {"}, {"sha": "dcacef4f0f0d5f301cb189c1647693659e2fc393", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -141,8 +141,7 @@ pub struct BTreeMap<K, V> {\n unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {\n     fn drop(&mut self) {\n         unsafe {\n-            for _ in ptr::read(self).into_iter() {\n-            }\n+            drop(ptr::read(self).into_iter());\n         }\n     }\n }"}, {"sha": "00448b6abb2cf3937ab36f2c8416bea36f1e31ca", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -60,6 +60,7 @@\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(untagged_unions)]\n+#![cfg_attr(not(test), feature(str_checked_slicing))]\n #![cfg_attr(test, feature(rand, test))]\n \n #![no_std]"}, {"sha": "8f0488f69369e5d905c18c906e1cfa5c459e34f0", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1376,7 +1376,7 @@ mod tests {\n         thread::spawn(move || {\n                 check_links(&n);\n                 let a: &[_] = &[&1, &2, &3];\n-                assert_eq!(a, &n.iter().collect::<Vec<_>>()[..]);\n+                assert_eq!(a, &*n.iter().collect::<Vec<_>>());\n             })\n             .join()\n             .ok()"}, {"sha": "6f8843c2374bc1b1cb9c0bdf52bded19948b3529", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -362,7 +362,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn get<I>(&self, index: I) -> Option<&I::Output>\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<Self>\n     {\n         core_slice::SliceExt::get(self, index)\n     }\n@@ -385,7 +385,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<Self>\n     {\n         core_slice::SliceExt::get_mut(self, index)\n     }\n@@ -405,7 +405,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<Self>\n     {\n         core_slice::SliceExt::get_unchecked(self, index)\n     }\n@@ -427,7 +427,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<Self>\n     {\n         core_slice::SliceExt::get_unchecked_mut(self, index)\n     }\n@@ -1162,7 +1162,7 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on Orson Peters' [pdqsort][pattern-defeating quicksort],\n+    /// The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],\n     /// which is a quicksort variant designed to be very fast on certain kinds of patterns,\n     /// sometimes achieving linear time. It is randomized but deterministic, and falls back to\n     /// heapsort on degenerate inputs.\n@@ -1199,7 +1199,7 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on Orson Peters' [pdqsort][pattern-defeating quicksort],\n+    /// The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],\n     /// which is a quicksort variant designed to be very fast on certain kinds of patterns,\n     /// sometimes achieving linear time. It is randomized but deterministic, and falls back to\n     /// heapsort on degenerate inputs.\n@@ -1239,7 +1239,7 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on Orson Peters' [pdqsort][pattern-defeating quicksort],\n+    /// The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],\n     /// which is a quicksort variant designed to be very fast on certain kinds of patterns,\n     /// sometimes achieving linear time. It is randomized but deterministic, and falls back to\n     /// heapsort on degenerate inputs."}, {"sha": "c37a4fa6b5572757681971170e2984577d7d3385", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 137, "deletions": 4, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,9 +10,28 @@\n \n //! Unicode string slices.\n //!\n+//! The `&str` type is one of the two main string types, the other being `String`.\n+//! Unlike its `String` counterpart, its contents are borrowed.\n+//!\n+//! # Basic Usage\n+//!\n+//! A basic string declaration of `&str` type:\n+//!\n+//! ```\n+//! let hello_world = \"Hello, World!\";\n+//! ```\n+//!\n+//! Here we have declared a string literal, also known as a string slice.\n+//! String literals have a static lifetime, which means the string `hello_world`\n+//! is guaranteed to be valid for the duration of the entire program.\n+//! We can explicitly specify `hello_world`'s lifetime as well:\n+//!\n+//! ```\n+//! let hello_world: &'static str = \"Hello, world!\";\n+//! ```\n+//!\n //! *[See also the `str` primitive type](../../std/primitive.str.html).*\n \n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // Many of the usings in this module are only used in the test configuration.\n@@ -32,7 +51,7 @@ use borrow::{Borrow, ToOwned};\n use string::String;\n use std_unicode;\n use vec::Vec;\n-use slice::SliceConcatExt;\n+use slice::{SliceConcatExt, SliceIndex};\n use boxed::Box;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -114,9 +133,15 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     }\n }\n \n-/// External iterator for a string's UTF-16 code units.\n+/// An iterator of [`u16`] over the string encoded as UTF-16.\n+///\n+/// [`u16`]: ../../std/primitive.u16.html\n ///\n-/// For use with the `std::iter` module.\n+/// This struct is created by the [`encode_utf16`] method on [`str`].\n+/// See its documentation for more.\n+///\n+/// [`encode_utf16`]: ../../std/primitive.str.html#method.encode_utf16\n+/// [`str`]: ../../std/primitive.str.html\n #[derive(Clone)]\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n pub struct EncodeUtf16<'a> {\n@@ -291,6 +316,114 @@ impl str {\n         core_str::StrExt::as_ptr(self)\n     }\n \n+    /// Returns a subslice of `str`.\n+    ///\n+    /// This is the non-panicking alternative to indexing the `str`. Returns `None` whenever\n+    /// equivalent indexing operation would panic.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(str_checked_slicing)]\n+    /// let v = \"\ud83d\uddfb\u2208\ud83c\udf0f\";\n+    /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get(0..4));\n+    /// assert!(v.get(1..).is_none());\n+    /// assert!(v.get(..8).is_none());\n+    /// assert!(v.get(..42).is_none());\n+    /// ```\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[inline]\n+    pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+        core_str::StrExt::get(self, i)\n+    }\n+\n+    /// Returns a mutable subslice of `str`.\n+    ///\n+    /// This is the non-panicking alternative to indexing the `str`. Returns `None` whenever\n+    /// equivalent indexing operation would panic.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(str_checked_slicing)]\n+    /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n+    /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get_mut(0..4).map(|v| &*v));\n+    /// assert!(v.get_mut(1..).is_none());\n+    /// assert!(v.get_mut(..8).is_none());\n+    /// assert!(v.get_mut(..42).is_none());\n+    /// ```\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[inline]\n+    pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+        core_str::StrExt::get_mut(self, i)\n+    }\n+\n+    /// Returns a unchecked subslice of `str`.\n+    ///\n+    /// This is the unchecked alternative to indexing the `str`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Callers of this function are responsible that these preconditions are\n+    /// satisfied:\n+    ///\n+    /// * The starting index must come before the ending index;\n+    /// * Indexes must be within bounds of the original slice;\n+    /// * Indexes must lie on UTF-8 sequence boundaries.\n+    ///\n+    /// Failing that, the returned string slice may reference invalid memory or\n+    /// violate the invariants communicated by the `str` type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(str_checked_slicing)]\n+    /// let v = \"\ud83d\uddfb\u2208\ud83c\udf0f\";\n+    /// unsafe {\n+    ///     assert_eq!(\"\ud83d\uddfb\", v.get_unchecked(0..4));\n+    ///     assert_eq!(\"\u2208\", v.get_unchecked(4..7));\n+    ///     assert_eq!(\"\ud83c\udf0f\", v.get_unchecked(7..11));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[inline]\n+    pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n+        core_str::StrExt::get_unchecked(self, i)\n+    }\n+\n+    /// Returns a mutable, unchecked subslice of `str`.\n+    ///\n+    /// This is the unchecked alternative to indexing the `str`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Callers of this function are responsible that these preconditions are\n+    /// satisfied:\n+    ///\n+    /// * The starting index must come before the ending index;\n+    /// * Indexes must be within bounds of the original slice;\n+    /// * Indexes must lie on UTF-8 sequence boundaries.\n+    ///\n+    /// Failing that, the returned string slice may reference invalid memory or\n+    /// violate the invariants communicated by the `str` type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(str_checked_slicing)]\n+    /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n+    /// unsafe {\n+    ///     assert_eq!(\"\ud83d\uddfb\", v.get_unchecked_mut(0..4));\n+    ///     assert_eq!(\"\u2208\", v.get_unchecked_mut(4..7));\n+    ///     assert_eq!(\"\ud83c\udf0f\", v.get_unchecked_mut(7..11));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[inline]\n+    pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n+        core_str::StrExt::get_unchecked_mut(self, i)\n+    }\n+\n     /// Creates a string slice from another string slice, bypassing safety\n     /// checks.\n     ///"}, {"sha": "56b60a3e00341b6b4eb6605b65d16d3350e0c2b5", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1563,7 +1563,7 @@ impl<T> ops::DerefMut for Vec<T> {\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {\n-        <Self as SpecExtend<_, _>>::from_iter(iter.into_iter())\n+        <Self as SpecExtend<T, I::IntoIter>>::from_iter(iter.into_iter())\n     }\n }\n \n@@ -1631,7 +1631,7 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        self.spec_extend(iter.into_iter())\n+        <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n     }\n }\n \n@@ -1662,7 +1662,7 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n                 vector\n             }\n         };\n-        vector.spec_extend(iterator);\n+        <Vec<T> as SpecExtend<T, I>>::spec_extend(&mut vector, iterator);\n         vector\n     }\n \n@@ -1674,7 +1674,7 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n impl<T, I> SpecExtend<T, I> for Vec<T>\n     where I: TrustedLen<Item=T>,\n {\n-    fn from_iter(iterator: I) -> Self {\n+    default fn from_iter(iterator: I) -> Self {\n         let mut vector = Vec::new();\n         vector.spec_extend(iterator);\n         vector\n@@ -1706,6 +1706,27 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n     }\n }\n \n+impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> {\n+    fn from_iter(iterator: IntoIter<T>) -> Self {\n+        // A common case is passing a vector into a function which immediately\n+        // re-collects into a vector. We can short circuit this if the IntoIter\n+        // has not been advanced at all.\n+        if *iterator.buf == iterator.ptr as *mut T {\n+            unsafe {\n+                let vec = Vec::from_raw_parts(*iterator.buf as *mut T,\n+                                              iterator.len(),\n+                                              iterator.cap);\n+                mem::forget(iterator);\n+                vec\n+            }\n+        } else {\n+            let mut vector = Vec::new();\n+            vector.spec_extend(iterator);\n+            vector\n+        }\n+    }\n+}\n+\n impl<'a, T: 'a, I> SpecExtend<&'a T, I> for Vec<T>\n     where I: Iterator<Item=&'a T>,\n           T: Clone,"}, {"sha": "c3e5304fb2b3544b855e7441d7ab32d88e0b7b09", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -383,9 +383,11 @@ fn test_reverse() {\n \n #[test]\n fn test_sort() {\n+    let mut rng = thread_rng();\n+\n     for len in (2..25).chain(500..510) {\n         for _ in 0..100 {\n-            let mut v: Vec<_> = thread_rng().gen_iter::<i32>().take(len).collect();\n+            let mut v: Vec<_> = rng.gen_iter::<i32>().take(len).collect();\n             let mut v1 = v.clone();\n \n             v.sort();\n@@ -399,6 +401,18 @@ fn test_sort() {\n         }\n     }\n \n+    // Sort using a completely random comparison function.\n+    // This will reorder the elements *somehow*, but won't panic.\n+    let mut v = [0; 500];\n+    for i in 0..v.len() {\n+        v[i] = i as i32;\n+    }\n+    v.sort_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort();\n+    for i in 0..v.len() {\n+        assert_eq!(v[i], i as i32);\n+    }\n+\n     // Should not panic.\n     [0i32; 0].sort();\n     [(); 10].sort();"}, {"sha": "63df0eb73050971b86dad86fe7e4814f53d23d32", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -680,3 +680,19 @@ fn test_placement_panic() {\n     let _ = panic::catch_unwind(panic::AssertUnwindSafe(|| { vec.place_back() <- mkpanic(); }));\n     assert_eq!(vec.len(), 3);\n }\n+\n+#[test]\n+fn from_into_inner() {\n+    let vec = vec![1, 2, 3];\n+    let ptr = vec.as_ptr();\n+    let vec = vec.into_iter().collect::<Vec<_>>();\n+    assert_eq!(vec, [1, 2, 3]);\n+    assert_eq!(vec.as_ptr(), ptr);\n+\n+    let ptr = &vec[1] as *const _;\n+    let mut it = vec.into_iter();\n+    it.next().unwrap();\n+    let vec = it.collect::<Vec<_>>();\n+    assert_eq!(vec, [2, 3]);\n+    assert!(ptr != vec.as_ptr());\n+}"}, {"sha": "b27c801cf89d5d26f3d74ba331a3b0e497e5ddc5", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -187,7 +187,7 @@ impl From<char> for u32 {\n /// with the character encoding that IANA calls ISO-8859-1.\n /// This encoding is compatible with ASCII.\n ///\n-/// Note that this is different from ISO/IEC 8859-1 a.k.a. ISO 8859-1 (with one less hypen),\n+/// Note that this is different from ISO/IEC 8859-1 a.k.a. ISO 8859-1 (with one less hyphen),\n /// which leaves some \"blanks\", byte values that are not assigned to any character.\n /// ISO-8859-1 (the IANA one) assigns them to the C0 and C1 control codes.\n ///"}, {"sha": "74ded948b18e74a8dad5126880f24bea19585372", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -322,6 +322,50 @@ impl Ordering {\n     }\n }\n \n+/// A helper struct for reverse ordering.\n+///\n+/// This struct is a helper to be used with functions like `Vec::sort_by_key` and\n+/// can be used to reverse order a part of a key.\n+///\n+/// Example usage:\n+///\n+/// ```\n+/// #![feature(reverse_cmp_key)]\n+/// use std::cmp::Reverse;\n+///\n+/// let mut v = vec![1, 2, 3, 4, 5, 6];\n+/// v.sort_by_key(|&num| (num > 3, Reverse(num)));\n+/// assert_eq!(v, vec![3, 2, 1, 6, 5, 4]);\n+/// ```\n+#[derive(PartialEq, Eq, Debug)]\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+pub struct Reverse<T>(pub T);\n+\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+impl<T: PartialOrd> PartialOrd for Reverse<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Reverse<T>) -> Option<Ordering> {\n+        other.0.partial_cmp(&self.0)\n+    }\n+\n+    #[inline]\n+    fn lt(&self, other: &Self) -> bool { other.0 < self.0 }\n+    #[inline]\n+    fn le(&self, other: &Self) -> bool { other.0 <= self.0 }\n+    #[inline]\n+    fn ge(&self, other: &Self) -> bool { other.0 >= self.0 }\n+    #[inline]\n+    fn gt(&self, other: &Self) -> bool { other.0 > self.0 }\n+}\n+\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+impl<T: Ord> Ord for Reverse<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Reverse<T>) -> Ordering {\n+        other.0.cmp(&self.0)\n+    }\n+}\n+\n /// Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).\n ///\n /// An order is a total order if it is (for all `a`, `b` and `c`):"}, {"sha": "34f14ef53f8935e890f6459472aa02c971cbf677", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -536,17 +536,17 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n /// #     }\n /// # }\n /// impl ExactSizeIterator for Counter {\n-///     // We already have the number of iterations, so we can use it directly.\n+///     // We can easily calculate the remaining number of iterations.\n ///     fn len(&self) -> usize {\n-///         self.count\n+///         5 - self.count\n ///     }\n /// }\n ///\n /// // And now we can use it!\n ///\n /// let counter = Counter::new();\n ///\n-/// assert_eq!(0, counter.len());\n+/// assert_eq!(5, counter.len());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExactSizeIterator: Iterator {"}, {"sha": "2a28d108df77d168332424977fe3328b73d0fdd2", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -337,27 +337,20 @@ macro_rules! try {\n \n /// Write formatted data into a buffer\n ///\n-/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n-/// list of arguments to format.\n+/// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n+/// formatted according to the specified format string and the result will be passed to the writer.\n+/// The writer may be any value with a `write_fmt` method; generally this comes from an\n+/// implementation of either the [`std::fmt::Write`] or the [`std::io::Write`] trait. The macro\n+/// returns whatever the 'write_fmt' method returns; commonly a [`std::fmt::Result`], or an\n+/// [`io::Result`].\n ///\n-/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n-/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n-/// these two traits.\n+/// See [`std::fmt`] for more information on the format string syntax.\n ///\n-/// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer.\n-///\n-/// See [`std::fmt`][fmt] for more information on format syntax.\n-///\n-/// `write!` returns whatever the 'write_fmt' method returns.\n-///\n-/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n-///\n-/// [fmt]: ../std/fmt/index.html\n-/// [fmt_write]: ../std/fmt/trait.Write.html\n-/// [io_write]: ../std/io/trait.Write.html\n-/// [fmt_result]: ../std/fmt/type.Result.html\n-/// [io_result]: ../std/io/type.Result.html\n+/// [`std::fmt`]: ../std/fmt/index.html\n+/// [`std::fmt::Write`]: ../std/fmt/trait.Write.html\n+/// [`std::io::Write`]: ../std/io/trait.Write.html\n+/// [`std::fmt::Result`]: ../std/fmt/type.Result.html\n+/// [`io::Result`]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///\n@@ -396,27 +389,12 @@ macro_rules! write {\n /// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n /// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n-/// list of arguments to format.\n-///\n-/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n-/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n-/// these two traits.\n-///\n-/// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer, along with the appended newline.\n-///\n-/// See [`std::fmt`][fmt] for more information on format syntax.\n-///\n-/// `write!` returns whatever the 'write_fmt' method returns.\n+/// For more information, see [`write!`]. For information on the format string syntax, see\n+/// [`std::fmt`].\n ///\n-/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n+/// [`write!`]: macro.write.html\n+/// [`std::fmt`]: ../std/fmt/index.html\n ///\n-/// [fmt]: ../std/fmt/index.html\n-/// [fmt_write]: ../std/fmt/trait.Write.html\n-/// [io_write]: ../std/io/trait.Write.html\n-/// [fmt_result]: ../std/fmt/type.Result.html\n-/// [io_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///"}, {"sha": "60dab943a3acfa094b93b275162bacc294610b78", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -141,7 +141,7 @@ pub fn fast_path<T: RawFloat>(integral: &[u8], fractional: &[u8], e: i64) -> Opt\n ///\n /// It rounds ``f`` to a float with 64 bit significand and multiplies it by the best approximation\n /// of `10^e` (in the same floating point format). This is often enough to get the correct result.\n-/// However, when the result is close to halfway between two adjecent (ordinary) floats, the\n+/// However, when the result is close to halfway between two adjacent (ordinary) floats, the\n /// compound rounding error from multiplying two approximation means the result may be off by a\n /// few bits. When this happens, the iterative Algorithm R fixes things up.\n ///\n@@ -392,7 +392,7 @@ fn underflow<T: RawFloat>(x: Big, v: Big, rem: Big) -> T {\n     //\n     // Therefore, when the rounded-off bits are != 0.5 ULP, they decide the rounding\n     // on their own. When they are equal and the remainder is non-zero, the value still\n-    // needs to be rounded up. Only when the rounded off bits are 1/2 and the remainer\n+    // needs to be rounded up. Only when the rounded off bits are 1/2 and the remainder\n     // is zero, we have a half-to-even situation.\n     let bits = x.bit_length();\n     let lsb = bits - T::sig_bits() as usize;"}, {"sha": "d203b68c0dfd57fd1e8461968bf607a9089de01c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -196,7 +196,7 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n-/// The `Add` trait is used to specify the functionality of `+`.\n+/// The addition operator `+`.\n ///\n /// # Examples\n ///\n@@ -269,7 +269,7 @@ macro_rules! add_impl {\n \n add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Sub` trait is used to specify the functionality of `-`.\n+/// The subtraction operator `-`.\n ///\n /// # Examples\n ///\n@@ -342,7 +342,7 @@ macro_rules! sub_impl {\n \n sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Mul` trait is used to specify the functionality of `*`.\n+/// The multiplication operator `*`.\n ///\n /// # Examples\n ///\n@@ -464,7 +464,7 @@ macro_rules! mul_impl {\n \n mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Div` trait is used to specify the functionality of `/`.\n+/// The division operator `/`.\n ///\n /// # Examples\n ///\n@@ -609,7 +609,7 @@ macro_rules! div_impl_float {\n \n div_impl_float! { f32 f64 }\n \n-/// The `Rem` trait is used to specify the functionality of `%`.\n+/// The remainder operator `%`.\n ///\n /// # Examples\n ///\n@@ -689,7 +689,7 @@ macro_rules! rem_impl_float {\n \n rem_impl_float! { f32 f64 }\n \n-/// The `Neg` trait is used to specify the functionality of unary `-`.\n+/// The unary negation operator `-`.\n ///\n /// # Examples\n ///\n@@ -768,7 +768,7 @@ macro_rules! neg_impl_unsigned {\n // neg_impl_unsigned! { usize u8 u16 u32 u64 }\n neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Not` trait is used to specify the functionality of unary `!`.\n+/// The unary logical negation operator `!`.\n ///\n /// # Examples\n ///\n@@ -826,7 +826,7 @@ macro_rules! not_impl {\n \n not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitAnd` trait is used to specify the functionality of `&`.\n+/// The bitwise AND operator `&`.\n ///\n /// # Examples\n ///\n@@ -909,7 +909,7 @@ macro_rules! bitand_impl {\n \n bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitOr` trait is used to specify the functionality of `|`.\n+/// The bitwise OR operator `|`.\n ///\n /// # Examples\n ///\n@@ -992,7 +992,7 @@ macro_rules! bitor_impl {\n \n bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitXor` trait is used to specify the functionality of `^`.\n+/// The bitwise XOR operator `^`.\n ///\n /// # Examples\n ///\n@@ -1078,7 +1078,7 @@ macro_rules! bitxor_impl {\n \n bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `Shl` trait is used to specify the functionality of `<<`.\n+/// The left shift operator `<<`.\n ///\n /// # Examples\n ///\n@@ -1181,7 +1181,7 @@ macro_rules! shl_impl_all {\n \n shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n \n-/// The `Shr` trait is used to specify the functionality of `>>`.\n+/// The right shift operator `>>`.\n ///\n /// # Examples\n ///\n@@ -1284,7 +1284,7 @@ macro_rules! shr_impl_all {\n \n shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n-/// The `AddAssign` trait is used to specify the functionality of `+=`.\n+/// The addition assignment operator `+=`.\n ///\n /// # Examples\n ///\n@@ -1340,7 +1340,7 @@ macro_rules! add_assign_impl {\n \n add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `SubAssign` trait is used to specify the functionality of `-=`.\n+/// The subtraction assignment operator `-=`.\n ///\n /// # Examples\n ///\n@@ -1396,7 +1396,7 @@ macro_rules! sub_assign_impl {\n \n sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `MulAssign` trait is used to specify the functionality of `*=`.\n+/// The multiplication assignment operator `*=`.\n ///\n /// # Examples\n ///\n@@ -1441,7 +1441,7 @@ macro_rules! mul_assign_impl {\n \n mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `DivAssign` trait is used to specify the functionality of `/=`.\n+/// The division assignment operator `/=`.\n ///\n /// # Examples\n ///\n@@ -1485,7 +1485,7 @@ macro_rules! div_assign_impl {\n \n div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `RemAssign` trait is used to specify the functionality of `%=`.\n+/// The remainder assignment operator `%=`.\n ///\n /// # Examples\n ///\n@@ -1529,7 +1529,7 @@ macro_rules! rem_assign_impl {\n \n rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `BitAndAssign` trait is used to specify the functionality of `&=`.\n+/// The bitwise AND assignment operator `&=`.\n ///\n /// # Examples\n ///\n@@ -1615,7 +1615,7 @@ macro_rules! bitand_assign_impl {\n \n bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitOrAssign` trait is used to specify the functionality of `|=`.\n+/// The bitwise OR assignment operator `|=`.\n ///\n /// # Examples\n ///\n@@ -1659,7 +1659,7 @@ macro_rules! bitor_assign_impl {\n \n bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitXorAssign` trait is used to specify the functionality of `^=`.\n+/// The bitwise XOR assignment operator `^=`.\n ///\n /// # Examples\n ///\n@@ -1703,7 +1703,7 @@ macro_rules! bitxor_assign_impl {\n \n bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `ShlAssign` trait is used to specify the functionality of `<<=`.\n+/// The left shift assignment operator `<<=`.\n ///\n /// # Examples\n ///\n@@ -1768,7 +1768,7 @@ macro_rules! shl_assign_impl_all {\n \n shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n-/// The `ShrAssign` trait is used to specify the functionality of `>>=`.\n+/// The right shift assignment operator `>>=`.\n ///\n /// # Examples\n ///"}, {"sha": "c46b0c1324de6e1987df9afd69382ec53275ebda", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -838,10 +838,10 @@ impl<T: Default, E> Result<T, E> {\n     ///\n     /// assert_eq!(1909, good_year);\n     /// assert_eq!(0, bad_year);\n+    /// ```\n     ///\n     /// [`parse`]: ../../std/primitive.str.html#method.parse\n     /// [`FromStr`]: ../../std/str/trait.FromStr.html\n-    /// ```\n     #[inline]\n     #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n     pub fn unwrap_or_default(self) -> T {"}, {"sha": "45667bb42993da8568246b7409321be821f8e464", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -97,8 +97,7 @@ pub trait SliceExt {\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn get<I>(&self, index: I) -> Option<&I::Output>\n-        where I: SliceIndex<Self::Item>;\n-\n+        where I: SliceIndex<Self>;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn first(&self) -> Option<&Self::Item>;\n \n@@ -113,8 +112,7 @@ pub trait SliceExt {\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n-        where I: SliceIndex<Self::Item>;\n-\n+        where I: SliceIndex<Self>;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_ptr(&self) -> *const Self::Item;\n \n@@ -141,8 +139,7 @@ pub trait SliceExt {\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n-        where I: SliceIndex<Self::Item>;\n-\n+        where I: SliceIndex<Self>;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn iter_mut(&mut self) -> IterMut<Self::Item>;\n \n@@ -184,8 +181,7 @@ pub trait SliceExt {\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n-        where I: SliceIndex<Self::Item>;\n-\n+        where I: SliceIndex<Self>;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_mut_ptr(&mut self) -> *mut Self::Item;\n \n@@ -337,7 +333,7 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     fn get<I>(&self, index: I) -> Option<&I::Output>\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<[T]>\n     {\n         index.get(self)\n     }\n@@ -365,7 +361,7 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<[T]>\n     {\n         index.get_unchecked(self)\n     }\n@@ -406,7 +402,7 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<[T]>\n     {\n         index.get_mut(self)\n     }\n@@ -538,7 +534,7 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n-        where I: SliceIndex<T>\n+        where I: SliceIndex<[T]>\n     {\n         index.get_unchecked_mut(self)\n     }\n@@ -631,7 +627,7 @@ impl<T> SliceExt for [T] {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"slice indices are of type `usize` or ranges of `usize`\"]\n impl<T, I> ops::Index<I> for [T]\n-    where I: SliceIndex<T>\n+    where I: SliceIndex<[T]>\n {\n     type Output = I::Output;\n \n@@ -644,7 +640,7 @@ impl<T, I> ops::Index<I> for [T]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"slice indices are of type `usize` or ranges of `usize`\"]\n impl<T, I> ops::IndexMut<I> for [T]\n-    where I: SliceIndex<T>\n+    where I: SliceIndex<[T]>\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut I::Output {\n@@ -667,37 +663,37 @@ fn slice_index_order_fail(index: usize, end: usize) -> ! {\n /// A helper trait used for indexing operations.\n #[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n #[rustc_on_unimplemented = \"slice indices are of type `usize` or ranges of `usize`\"]\n-pub trait SliceIndex<T> {\n+pub trait SliceIndex<T: ?Sized> {\n     /// The output type returned by methods.\n     type Output: ?Sized;\n \n     /// Returns a shared reference to the output at this location, if in\n     /// bounds.\n-    fn get(self, slice: &[T]) -> Option<&Self::Output>;\n+    fn get(self, slice: &T) -> Option<&Self::Output>;\n \n     /// Returns a mutable reference to the output at this location, if in\n     /// bounds.\n-    fn get_mut(self, slice: &mut [T]) -> Option<&mut Self::Output>;\n+    fn get_mut(self, slice: &mut T) -> Option<&mut Self::Output>;\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n-    unsafe fn get_unchecked(self, slice: &[T]) -> &Self::Output;\n+    unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n-    unsafe fn get_unchecked_mut(self, slice: &mut [T]) -> &mut Self::Output;\n+    unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n \n     /// Returns a shared reference to the output at this location, panicking\n     /// if out of bounds.\n-    fn index(self, slice: &[T]) -> &Self::Output;\n+    fn index(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, panicking\n     /// if out of bounds.\n-    fn index_mut(self, slice: &mut [T]) -> &mut Self::Output;\n+    fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n \n #[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n-impl<T> SliceIndex<T> for usize {\n+impl<T> SliceIndex<[T]> for usize {\n     type Output = T;\n \n     #[inline]\n@@ -746,7 +742,7 @@ impl<T> SliceIndex<T> for usize {\n }\n \n #[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n-impl<T> SliceIndex<T> for  ops::Range<usize> {\n+impl<T> SliceIndex<[T]> for  ops::Range<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -807,7 +803,7 @@ impl<T> SliceIndex<T> for  ops::Range<usize> {\n }\n \n #[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n-impl<T> SliceIndex<T> for ops::RangeTo<usize> {\n+impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -842,7 +838,7 @@ impl<T> SliceIndex<T> for ops::RangeTo<usize> {\n }\n \n #[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n-impl<T> SliceIndex<T> for ops::RangeFrom<usize> {\n+impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -877,7 +873,7 @@ impl<T> SliceIndex<T> for ops::RangeFrom<usize> {\n }\n \n #[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n-impl<T> SliceIndex<T> for ops::RangeFull {\n+impl<T> SliceIndex<[T]> for ops::RangeFull {\n     type Output = [T];\n \n     #[inline]\n@@ -913,7 +909,7 @@ impl<T> SliceIndex<T> for ops::RangeFull {\n \n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-impl<T> SliceIndex<T> for ops::RangeInclusive<usize> {\n+impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -976,7 +972,7 @@ impl<T> SliceIndex<T> for ops::RangeInclusive<usize> {\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-impl<T> SliceIndex<T> for ops::RangeToInclusive<usize> {\n+impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n     type Output = [T];\n \n     #[inline]"}, {"sha": "7065fdb79fc4040a6ca225634408141e1871a830", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -152,8 +152,8 @@ fn partial_insertion_sort<T, F>(v: &mut [T], is_less: &mut F) -> bool\n fn insertion_sort<T, F>(v: &mut [T], is_less: &mut F)\n     where F: FnMut(&T, &T) -> bool\n {\n-    for i in 2..v.len()+1 {\n-        shift_tail(&mut v[..i], is_less);\n+    for i in 1..v.len() {\n+        shift_tail(&mut v[..i+1], is_less);\n     }\n }\n \n@@ -498,32 +498,42 @@ fn partition_equal<T, F>(v: &mut [T], pivot: usize, is_less: &mut F) -> usize\n #[cold]\n fn break_patterns<T>(v: &mut [T]) {\n     let len = v.len();\n-\n     if len >= 8 {\n-        // A random number will be taken modulo this one. The modulus is a power of two so that we\n-        // can simply take bitwise \"and\", thus avoiding costly CPU operations.\n-        let modulus = (len / 4).next_power_of_two();\n-        debug_assert!(modulus >= 1 && modulus <= len / 2);\n-\n-        // Pseudorandom number generation from the \"Xorshift RNGs\" paper by George Marsaglia.\n-        let mut random = len;\n-        random ^= random << 13;\n-        random ^= random >> 17;\n-        random ^= random << 5;\n-        random &= modulus - 1;\n-        debug_assert!(random < len / 2);\n-\n-        // The first index.\n-        let a = len / 4 * 2;\n-        debug_assert!(a >= 1 && a < len - 2);\n-\n-        // The second index.\n-        let b = len / 4 + random;\n-        debug_assert!(b >= 1 && b < len - 2);\n-\n-        // Swap neighbourhoods of `a` and `b`.\n+        // Pseudorandom number generator from the \"Xorshift RNGs\" paper by George Marsaglia.\n+        let mut random = len as u32;\n+        let mut gen_u32 = || {\n+            random ^= random << 13;\n+            random ^= random >> 17;\n+            random ^= random << 5;\n+            random\n+        };\n+        let mut gen_usize = || {\n+            if mem::size_of::<usize>() <= 4 {\n+                gen_u32() as usize\n+            } else {\n+                (((gen_u32() as u64) << 32) | (gen_u32() as u64)) as usize\n+            }\n+        };\n+\n+        // Take random numbers modulo this number.\n+        // The number fits into `usize` because `len` is not greater than `isize::MAX`.\n+        let modulus = len.next_power_of_two();\n+\n+        // Some pivot candidates will be in the nearby of this index. Let's randomize them.\n+        let pos = len / 4 * 2;\n+\n         for i in 0..3 {\n-            v.swap(a - 1 + i, b - 1 + i);\n+            // Generate a random number modulo `len`. However, in order to avoid costly operations\n+            // we first take it modulo a power of two, and then decrease by `len` until it fits\n+            // into the range `[0, len - 1]`.\n+            let mut other = gen_usize() & (modulus - 1);\n+\n+            // `other` is guaranteed to be less than `2 * len`.\n+            if other >= len {\n+                other -= len;\n+            }\n+\n+            v.swap(pos - 1 + i, other);\n         }\n     }\n }"}, {"sha": "f75a1f7ab6e0f07fa720b8abf8a81f8bfb0f9515", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 366, "deletions": 32, "changes": 398, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -22,7 +22,7 @@ use convert::TryFrom;\n use fmt;\n use iter::{Map, Cloned, FusedIterator};\n use mem;\n-use slice;\n+use slice::{self, SliceIndex};\n \n pub mod pattern;\n \n@@ -35,6 +35,39 @@ pub mod pattern;\n /// [`from_str`]: #tymethod.from_str\n /// [`str`]: ../../std/primitive.str.html\n /// [`parse`]: ../../std/primitive.str.html#method.parse\n+///\n+/// # Examples\n+///\n+/// Basic implementation of `FromStr` on an example `Point` type:\n+///\n+/// ```\n+/// use std::str::FromStr;\n+/// use std::num::ParseIntError;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32\n+/// }\n+///\n+/// impl FromStr for Point {\n+///     type Err = ParseIntError;\n+///\n+///     fn from_str(s: &str) -> Result<Self, Self::Err> {\n+///         let coords: Vec<&str> = s.trim_matches(|p| p == '(' || p == ')' )\n+///                                  .split(\",\")\n+///                                  .collect();\n+///\n+///         let x_fromstr = coords[0].parse::<i32>()?;\n+///         let y_fromstr = coords[1].parse::<i32>()?;\n+///\n+///         Ok(Point { x: x_fromstr, y: y_fromstr })\n+///     }\n+/// }\n+///\n+/// let p = Point::from_str(\"(1,2)\");\n+/// assert_eq!(p.unwrap(), Point{ x: 1, y: 2} )\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait FromStr: Sized {\n     /// The associated error which can be returned from parsing.\n@@ -101,7 +134,9 @@ impl FromStr for bool {\n     }\n }\n \n-/// An error returned when parsing a `bool` from a string fails.\n+/// An error returned when parsing a `bool` using [`from_str`] fails\n+///\n+/// [`from_str`]: ../../std/primitive.bool.html#method.from_str\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseBoolError { _priv: () }\n@@ -292,7 +327,9 @@ unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n ///\n /// This function is unsafe because it does not check that the bytes passed to\n /// it are valid UTF-8. If this constraint is violated, undefined behavior\n-/// results, as the rest of Rust assumes that `&str`s are valid UTF-8.\n+/// results, as the rest of Rust assumes that [`&str`]s are valid UTF-8.\n+///\n+/// [`&str`]: ../../std/primitive.str.html\n ///\n /// # Examples\n ///\n@@ -332,11 +369,15 @@ impl fmt::Display for Utf8Error {\n Section: Iterators\n */\n \n-/// Iterator for the char (representing *Unicode Scalar Values*) of a string.\n+/// An iterator over the [`char`]s of a string slice.\n+///\n+/// [`char`]: ../../std/primitive.char.html\n ///\n-/// Created with the method [`chars`].\n+/// This struct is created by the [`chars`] method on [`str`].\n+/// See its documentation for more.\n ///\n /// [`chars`]: ../../std/primitive.str.html#method.chars\n+/// [`str`]: ../../std/primitive.str.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n@@ -516,7 +557,15 @@ impl<'a> Chars<'a> {\n     }\n }\n \n-/// Iterator for a string's characters and their byte offsets.\n+/// An iterator over the [`char`]s of a string slice, and their positions.\n+///\n+/// [`char`]: ../../std/primitive.char.html\n+///\n+/// This struct is created by the [`char_indices`] method on [`str`].\n+/// See its documentation for more.\n+///\n+/// [`char_indices`]: ../../std/primitive.str.html#method.char_indices\n+/// [`str`]: ../../std/primitive.str.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CharIndices<'a> {\n@@ -588,12 +637,13 @@ impl<'a> CharIndices<'a> {\n     }\n }\n \n-/// External iterator for a string's bytes.\n-/// Use with the `std::iter` module.\n+/// An iterator over the bytes of a string slice.\n ///\n-/// Created with the method [`bytes`].\n+/// This struct is created by the [`bytes`] method on [`str`].\n+/// See its documentation for more.\n ///\n /// [`bytes`]: ../../std/primitive.str.html#method.bytes\n+/// [`str`]: ../../std/primitive.str.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Bytes<'a>(Cloned<slice::Iter<'a, u8>>);\n@@ -1124,9 +1174,13 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n-/// Created with the method [`lines`].\n+/// An iterator over the lines of a string, as string slices.\n+///\n+/// This struct is created with the [`lines`] method on [`str`].\n+/// See its documentation for more.\n ///\n /// [`lines`]: ../../std/primitive.str.html#method.lines\n+/// [`str`]: ../../std/primitive.str.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Lines<'a>(Map<SplitTerminator<'a, char>, LinesAnyMap>);\n@@ -1408,6 +1462,8 @@ Section: Trait implementations\n mod traits {\n     use cmp::Ordering;\n     use ops;\n+    use mem;\n+    use slice::{self, SliceIndex};\n     use str::eq_slice;\n \n     /// Implements ordering of strings.\n@@ -1490,14 +1546,7 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn index(&self, index: ops::Range<usize>) -> &str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if index.start <= index.end &&\n-               self.is_char_boundary(index.start) &&\n-               self.is_char_boundary(index.end) {\n-                unsafe { self.slice_unchecked(index.start, index.end) }\n-            } else {\n-                super::slice_error_fail(self, index.start, index.end)\n-            }\n+            index.index(self)\n         }\n     }\n \n@@ -1519,14 +1568,7 @@ mod traits {\n     impl ops::IndexMut<ops::Range<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if index.start <= index.end &&\n-               self.is_char_boundary(index.start) &&\n-               self.is_char_boundary(index.end) {\n-                unsafe { self.slice_mut_unchecked(index.start, index.end) }\n-            } else {\n-                super::slice_error_fail(self, index.start, index.end)\n-            }\n+            index.index_mut(self)\n         }\n     }\n \n@@ -1694,8 +1736,276 @@ mod traits {\n             self.index_mut(0...index.end)\n         }\n     }\n+\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    impl SliceIndex<str> for ops::RangeFull {\n+        type Output = str;\n+        #[inline]\n+        fn get(self, slice: &str) -> Option<&Self::Output> {\n+            Some(slice)\n+        }\n+        #[inline]\n+        fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n+            Some(slice)\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n+            slice\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n+            slice\n+        }\n+        #[inline]\n+        fn index(self, slice: &str) -> &Self::Output {\n+            slice\n+        }\n+        #[inline]\n+        fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            slice\n+        }\n+    }\n+\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    impl SliceIndex<str> for ops::Range<usize> {\n+        type Output = str;\n+        #[inline]\n+        fn get(self, slice: &str) -> Option<&Self::Output> {\n+            if self.start <= self.end &&\n+               slice.is_char_boundary(self.start) &&\n+               slice.is_char_boundary(self.end) {\n+                Some(unsafe { self.get_unchecked(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n+            if self.start <= self.end &&\n+               slice.is_char_boundary(self.start) &&\n+               slice.is_char_boundary(self.end) {\n+                Some(unsafe { self.get_unchecked_mut(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n+            let ptr = slice.as_ptr().offset(self.start as isize);\n+            let len = self.end - self.start;\n+            super::from_utf8_unchecked(slice::from_raw_parts(ptr, len))\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n+            let ptr = slice.as_ptr().offset(self.start as isize);\n+            let len = self.end - self.start;\n+            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+        }\n+        #[inline]\n+        fn index(self, slice: &str) -> &Self::Output {\n+            let (start, end) = (self.start, self.end);\n+            self.get(slice).unwrap_or_else(|| super::slice_error_fail(slice, start, end))\n+        }\n+        #[inline]\n+        fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            // is_char_boundary checks that the index is in [0, .len()]\n+            // canot reuse `get` as above, because of NLL trouble\n+            if self.start <= self.end &&\n+               slice.is_char_boundary(self.start) &&\n+               slice.is_char_boundary(self.end) {\n+                unsafe { self.get_unchecked_mut(slice) }\n+            } else {\n+                super::slice_error_fail(slice, self.start, self.end)\n+            }\n+        }\n+    }\n+\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    impl SliceIndex<str> for ops::RangeTo<usize> {\n+        type Output = str;\n+        #[inline]\n+        fn get(self, slice: &str) -> Option<&Self::Output> {\n+            if slice.is_char_boundary(self.end) {\n+                Some(unsafe { self.get_unchecked(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n+            if slice.is_char_boundary(self.end) {\n+                Some(unsafe { self.get_unchecked_mut(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n+            let ptr = slice.as_ptr();\n+            super::from_utf8_unchecked(slice::from_raw_parts(ptr, self.end))\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n+            let ptr = slice.as_ptr();\n+            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, self.end))\n+        }\n+        #[inline]\n+        fn index(self, slice: &str) -> &Self::Output {\n+            let end = self.end;\n+            self.get(slice).unwrap_or_else(|| super::slice_error_fail(slice, 0, end))\n+        }\n+        #[inline]\n+        fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            if slice.is_char_boundary(self.end) {\n+                unsafe { self.get_unchecked_mut(slice) }\n+            } else {\n+                super::slice_error_fail(slice, 0, self.end)\n+            }\n+        }\n+    }\n+\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    impl SliceIndex<str> for ops::RangeFrom<usize> {\n+        type Output = str;\n+        #[inline]\n+        fn get(self, slice: &str) -> Option<&Self::Output> {\n+            if slice.is_char_boundary(self.start) {\n+                Some(unsafe { self.get_unchecked(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n+            if slice.is_char_boundary(self.start) {\n+                Some(unsafe { self.get_unchecked_mut(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n+            let ptr = slice.as_ptr().offset(self.start as isize);\n+            let len = slice.len() - self.start;\n+            super::from_utf8_unchecked(slice::from_raw_parts(ptr, len))\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n+            let ptr = slice.as_ptr().offset(self.start as isize);\n+            let len = slice.len() - self.start;\n+            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+        }\n+        #[inline]\n+        fn index(self, slice: &str) -> &Self::Output {\n+            let (start, end) = (self.start, slice.len());\n+            self.get(slice).unwrap_or_else(|| super::slice_error_fail(slice, start, end))\n+        }\n+        #[inline]\n+        fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            if slice.is_char_boundary(self.start) {\n+                unsafe { self.get_unchecked_mut(slice) }\n+            } else {\n+                super::slice_error_fail(slice, self.start, slice.len())\n+            }\n+        }\n+    }\n+\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    impl SliceIndex<str> for ops::RangeInclusive<usize> {\n+        type Output = str;\n+        #[inline]\n+        fn get(self, slice: &str) -> Option<&Self::Output> {\n+            match self {\n+                ops::RangeInclusive::Empty { .. } => 0..0,\n+                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n+            }.get(slice)\n+        }\n+        #[inline]\n+        fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n+            match self {\n+                ops::RangeInclusive::Empty { .. } => 0..0,\n+                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n+            }.get_mut(slice)\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n+            match self {\n+                ops::RangeInclusive::Empty { .. } => 0..0,\n+                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n+            }.get_unchecked(slice)\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n+            match self {\n+                ops::RangeInclusive::Empty { .. } => 0..0,\n+                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n+            }.get_unchecked_mut(slice)\n+        }\n+        #[inline]\n+        fn index(self, slice: &str) -> &Self::Output {\n+            match self {\n+                ops::RangeInclusive::Empty { .. } => 0..0,\n+                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n+            }.index(slice)\n+        }\n+        #[inline]\n+        fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            match self {\n+                ops::RangeInclusive::Empty { .. } => 0..0,\n+                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n+            }.index_mut(slice)\n+        }\n+    }\n+\n+\n+\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n+        type Output = str;\n+        #[inline]\n+        fn get(self, slice: &str) -> Option<&Self::Output> {\n+            if slice.is_char_boundary(self.end + 1) {\n+                Some(unsafe { self.get_unchecked(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n+            if slice.is_char_boundary(self.end + 1) {\n+                Some(unsafe { self.get_unchecked_mut(slice) })\n+            } else {\n+                None\n+            }\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n+            let ptr = slice.as_ptr();\n+            super::from_utf8_unchecked(slice::from_raw_parts(ptr, self.end + 1))\n+        }\n+        #[inline]\n+        unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n+            let ptr = slice.as_ptr();\n+            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, self.end + 1))\n+        }\n+        #[inline]\n+        fn index(self, slice: &str) -> &Self::Output {\n+            let end = self.end + 1;\n+            self.get(slice).unwrap_or_else(|| super::slice_error_fail(slice, 0, end))\n+        }\n+        #[inline]\n+        fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            if slice.is_char_boundary(self.end) {\n+                unsafe { self.get_unchecked_mut(slice) }\n+            } else {\n+                super::slice_error_fail(slice, 0, self.end + 1)\n+            }\n+        }\n+    }\n+\n }\n \n+\n /// Methods for string slices\n #[allow(missing_docs)]\n #[doc(hidden)]\n@@ -1745,6 +2055,14 @@ pub trait StrExt {\n     #[rustc_deprecated(since = \"1.6.0\", reason = \"use lines() instead now\")]\n     #[allow(deprecated)]\n     fn lines_any(&self) -> LinesAny;\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output>;\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output>;\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output;\n+    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -1934,18 +2252,34 @@ impl StrExt for str {\n         LinesAny(self.lines())\n     }\n \n+    #[inline]\n+    fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+        i.get(self)\n+    }\n+\n+    #[inline]\n+    fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+        i.get_mut(self)\n+    }\n+\n+    #[inline]\n+    unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n+        i.get_unchecked(self)\n+    }\n+\n+    #[inline]\n+    unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n+        i.get_unchecked_mut(self)\n+    }\n+\n     #[inline]\n     unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n-        let ptr = self.as_ptr().offset(begin as isize);\n-        let len = end - begin;\n-        from_utf8_unchecked(slice::from_raw_parts(ptr, len))\n+        (begin..end).get_unchecked(self)\n     }\n \n     #[inline]\n     unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n-        let ptr = self.as_ptr().offset(begin as isize);\n-        let len = end - begin;\n-        mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+        (begin..end).get_unchecked_mut(self)\n     }\n \n     #[inline]"}, {"sha": "ae47e6fdfa928ee6b037d9d7e1c1e80cd74bfdfc", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -15,27 +15,37 @@\n //! types.\n //!\n //! This module defines atomic versions of a select number of primitive\n-//! types, including `AtomicBool`, `AtomicIsize`, and `AtomicUsize`.\n+//! types, including [`AtomicBool`], [`AtomicIsize`], and [`AtomicUsize`].\n //! Atomic types present operations that, when used correctly, synchronize\n //! updates between threads.\n //!\n-//! Each method takes an `Ordering` which represents the strength of\n+//! [`AtomicBool`]: struct.AtomicBool.html\n+//! [`AtomicIsize`]: struct.AtomicIsize.html\n+//! [`AtomicUsize`]: struct.AtomicUsize.html\n+//!\n+//! Each method takes an [`Ordering`] which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n //! same as [LLVM atomic orderings][1]. For more information see the [nomicon][2].\n //!\n+//! [`Ordering`]: enum.Ordering.html\n+//!\n //! [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\n //! [2]: ../../../nomicon/atomics.html\n //!\n-//! Atomic variables are safe to share between threads (they implement `Sync`)\n+//! Atomic variables are safe to share between threads (they implement [`Sync`])\n //! but they do not themselves provide the mechanism for sharing and follow the\n //! [threading model](../../../std/thread/index.html#the-threading-model) of rust.\n-//! The most common way to share an atomic variable is to put it into an `Arc` (an\n+//! The most common way to share an atomic variable is to put it into an [`Arc`][arc] (an\n //! atomically-reference-counted shared pointer).\n //!\n+//! [`Sync`]: ../../marker/trait.Sync.html\n+//! [arc]: ../../../std/sync/struct.Arc.html\n+//!\n //! Most atomic types may be stored in static variables, initialized using\n-//! the provided static initializers like `ATOMIC_BOOL_INIT`. Atomic statics\n+//! the provided static initializers like [`ATOMIC_BOOL_INIT`]. Atomic statics\n //! are often used for lazy global initialization.\n //!\n+//! [`ATOMIC_BOOL_INIT`]: constant.ATOMIC_BOOL_INIT.html\n //!\n //! # Examples\n //!\n@@ -148,22 +158,32 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n pub enum Ordering {\n-    /// No ordering constraints, only atomic operations. Corresponds to LLVM's\n-    /// `Monotonic` ordering.\n+    /// No ordering constraints, only atomic operations.\n+    ///\n+    /// Corresponds to LLVM's [`Monotonic`] ordering.\n+    ///\n+    /// [`Monotonic`]: http://llvm.org/docs/Atomics.html#monotonic\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Relaxed,\n     /// When coupled with a store, all previous writes become visible\n-    /// to the other threads that perform a load with `Acquire` ordering\n+    /// to the other threads that perform a load with [`Acquire`] ordering\n     /// on the same value.\n+    ///\n+    /// [`Acquire`]: http://llvm.org/docs/Atomics.html#acquire\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Release,\n     /// When coupled with a load, all subsequent loads will see data\n-    /// written before a store with `Release` ordering on the same value\n+    /// written before a store with [`Release`] ordering on the same value\n     /// in other threads.\n+    ///\n+    /// [`Release`]: http://llvm.org/docs/Atomics.html#release\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Acquire,\n-    /// When coupled with a load, uses `Acquire` ordering, and with a store\n-    /// `Release` ordering.\n+    /// When coupled with a load, uses [`Acquire`] ordering, and with a store\n+    /// [`Release`] ordering.\n+    ///\n+    /// [`Acquire`]: http://llvm.org/docs/Atomics.html#acquire\n+    /// [`Release`]: http://llvm.org/docs/Atomics.html#release\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     AcqRel,\n     /// Like `AcqRel` with the additional guarantee that all threads see all\n@@ -176,7 +196,9 @@ pub enum Ordering {\n     __Nonexhaustive,\n }\n \n-/// An `AtomicBool` initialized to `false`.\n+/// An [`AtomicBool`] initialized to `false`.\n+///\n+/// [`AtomicBool`]: struct.AtomicBool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n@@ -250,7 +272,7 @@ impl AtomicBool {\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`AcqRel`]: enum.Ordering.html#variant.Release\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///\n@@ -287,7 +309,10 @@ impl AtomicBool {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `order` is `Acquire` or `AcqRel`.\n+    /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n+    ///\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, val: bool, order: Ordering) {\n@@ -404,7 +429,7 @@ impl AtomicBool {\n \n     /// Stores a value into the `bool` if the current value is the same as the `current` value.\n     ///\n-    /// Unlike `compare_exchange`, this function is allowed to spuriously fail even when the\n+    /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n     /// return value is a result indicating whether the new value was written and containing the\n     /// previous value.\n@@ -415,6 +440,7 @@ impl AtomicBool {\n     /// failure ordering can't be [`Release`] or [`AcqRel`] and must be equivalent or\n     /// weaker than the success ordering.\n     ///\n+    /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Release`]: enum.Ordering.html#variant.Release\n     /// [`AcqRel`]: enum.Ordering.html#variant.Release\n@@ -694,7 +720,10 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `order` is `Acquire` or `AcqRel`.\n+    /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n+    ///\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, ptr: *mut T, order: Ordering) {\n@@ -1008,7 +1037,10 @@ macro_rules! atomic_int {\n             ///\n             /// # Panics\n             ///\n-            /// Panics if `order` is `Acquire` or `AcqRel`.\n+            /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n+            ///\n+            /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+            /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n             #[inline]\n             #[$stable]\n             pub fn store(&self, val: $int_type, order: Ordering) {"}, {"sha": "ec38345030fa5897423ff55d2f4f882dcff4c1ee", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::cmp::Ordering::{Equal, Greater, Less};\n use core::slice::heapsort;\n use core::result::Result::{Ok, Err};\n use rand::{Rng, XorShiftRng};\n@@ -268,6 +269,17 @@ fn sort_unstable() {\n         }\n     }\n \n+    // Sort using a completely random comparison function.\n+    // This will reorder the elements *somehow*, but won't panic.\n+    for i in 0..v.len() {\n+        v[i] = i as i32;\n+    }\n+    v.sort_unstable_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort_unstable();\n+    for i in 0..v.len() {\n+        assert_eq!(v[i], i as i32);\n+    }\n+\n     // Should not panic.\n     [0i32; 0].sort_unstable();\n     [(); 10].sort_unstable();"}, {"sha": "1b2c7775185f78d9dbf9e318236f8d3e4e5c0426", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -554,7 +554,7 @@ impl<'a> LabelText<'a> {\n     pub fn to_dot_string(&self) -> String {\n         match self {\n             &LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),\n-            &EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s[..])),\n+            &EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s)),\n             &HtmlStr(ref s) => format!(\"<{}>\", s),\n         }\n     }\n@@ -587,7 +587,7 @@ impl<'a> LabelText<'a> {\n         let mut prefix = self.pre_escaped_content().into_owned();\n         let suffix = suffix.pre_escaped_content();\n         prefix.push_str(r\"\\n\\n\");\n-        prefix.push_str(&suffix[..]);\n+        prefix.push_str(&suffix);\n         EscStr(prefix.into_cow())\n     }\n }\n@@ -878,7 +878,7 @@ mod tests {\n         type Node = Node;\n         type Edge = &'a Edge;\n         fn graph_id(&'a self) -> Id<'a> {\n-            Id::new(&self.name[..]).unwrap()\n+            Id::new(self.name).unwrap()\n         }\n         fn node_id(&'a self, n: &Node) -> Id<'a> {\n             id_name(n)"}, {"sha": "05a2d197356ef253dfd985166576619ac9b6947f", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1 +1 @@\n-Subproject commit 64d954c6a76e896fbf7ed5c17e77c40e388abe84\n+Subproject commit 05a2d197356ef253dfd985166576619ac9b6947f"}, {"sha": "31a862478d034f8353f3a14132748aa6e1ddb3f2", "filename": "src/liblog/Cargo.toml", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2FCargo.toml?ref=b477682dca3343eb89a467f0d3c73986a53d49d9", "patch": "@@ -1,9 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"log\"\n-version = \"0.0.0\"\n-\n-[lib]\n-name = \"log\"\n-path = \"lib.rs\"\n-crate-type = [\"dylib\", \"rlib\"]"}, {"sha": "eb50d6e6135ef2124e10987519d18225fdf566f4", "filename": "src/liblog/directive.rs", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=b477682dca3343eb89a467f0d3c73986a53d49d9", "patch": "@@ -1,193 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::ascii::AsciiExt;\n-use std::cmp;\n-\n-#[derive(Debug, Clone)]\n-pub struct LogDirective {\n-    pub name: Option<String>,\n-    pub level: u32,\n-}\n-\n-pub const LOG_LEVEL_NAMES: [&'static str; 5] = [\"ERROR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\"];\n-\n-/// Parse an individual log level that is either a number or a symbolic log level\n-fn parse_log_level(level: &str) -> Option<u32> {\n-    level.parse::<u32>()\n-        .ok()\n-        .or_else(|| {\n-            let pos = LOG_LEVEL_NAMES.iter().position(|&name| name.eq_ignore_ascii_case(level));\n-            pos.map(|p| p as u32 + 1)\n-        })\n-        .map(|p| cmp::min(p, ::MAX_LOG_LEVEL))\n-}\n-\n-/// Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=1/foo\")\n-/// and return a vector with log directives.\n-///\n-/// Valid log levels are 0-255, with the most likely ones being 1-4 (defined in\n-/// std::).  Also supports string log levels of error, warn, info, and debug\n-pub fn parse_logging_spec(spec: &str) -> (Vec<LogDirective>, Option<String>) {\n-    let mut dirs = Vec::new();\n-\n-    let mut parts = spec.split('/');\n-    let mods = parts.next();\n-    let filter = parts.next();\n-    if parts.next().is_some() {\n-        println!(\"warning: invalid logging spec '{}', ignoring it (too many '/'s)\",\n-                 spec);\n-        return (dirs, None);\n-    }\n-    if let Some(m) = mods {\n-        for s in m.split(',') {\n-            if s.is_empty() {\n-                continue;\n-            }\n-            let mut parts = s.split('=');\n-            let (log_level, name) =\n-                match (parts.next(), parts.next().map(|s| s.trim()), parts.next()) {\n-                    (Some(part0), None, None) => {\n-                        // if the single argument is a log-level string or number,\n-                        // treat that as a global fallback\n-                        match parse_log_level(part0) {\n-                            Some(num) => (num, None),\n-                            None => (::MAX_LOG_LEVEL, Some(part0)),\n-                        }\n-                    }\n-                    (Some(part0), Some(\"\"), None) => (::MAX_LOG_LEVEL, Some(part0)),\n-                    (Some(part0), Some(part1), None) => {\n-                        match parse_log_level(part1) {\n-                            Some(num) => (num, Some(part0)),\n-                            _ => {\n-                                println!(\"warning: invalid logging spec '{}', ignoring it\", part1);\n-                                continue;\n-                            }\n-                        }\n-                    }\n-                    _ => {\n-                        println!(\"warning: invalid logging spec '{}', ignoring it\", s);\n-                        continue;\n-                    }\n-                };\n-            dirs.push(LogDirective {\n-                name: name.map(str::to_owned),\n-                level: log_level,\n-            });\n-        }\n-    }\n-\n-    (dirs, filter.map(str::to_owned))\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::parse_logging_spec;\n-\n-    #[test]\n-    fn parse_logging_spec_valid() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4\");\n-        assert_eq!(dirs.len(), 3);\n-        assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_owned()));\n-        assert_eq!(dirs[0].level, 1);\n-\n-        assert_eq!(dirs[1].name, Some(\"crate1::mod2\".to_owned()));\n-        assert_eq!(dirs[1].level, ::MAX_LOG_LEVEL);\n-\n-        assert_eq!(dirs[2].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[2].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_invalid_crate() {\n-        // test parse_logging_spec with multiple = in specification\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1=2,crate2=4\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_invalid_log_level() {\n-        // test parse_logging_spec with 'noNumber' as log level\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=noNumber,crate2=4\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_string_log_level() {\n-        // test parse_logging_spec with 'warn' as log level\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=wrong,crate2=warn\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, ::WARN);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_empty_log_level() {\n-        // test parse_logging_spec with '' as log level\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=wrong,crate2=\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, ::MAX_LOG_LEVEL);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_global() {\n-        // test parse_logging_spec with no crate\n-        let (dirs, filter) = parse_logging_spec(\"warn,crate2=4\");\n-        assert_eq!(dirs.len(), 2);\n-        assert_eq!(dirs[0].name, None);\n-        assert_eq!(dirs[0].level, 2);\n-        assert_eq!(dirs[1].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[1].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_valid_filter() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4/abc\");\n-        assert_eq!(dirs.len(), 3);\n-        assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_owned()));\n-        assert_eq!(dirs[0].level, 1);\n-\n-        assert_eq!(dirs[1].name, Some(\"crate1::mod2\".to_owned()));\n-        assert_eq!(dirs[1].level, ::MAX_LOG_LEVEL);\n-\n-        assert_eq!(dirs[2].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[2].level, 4);\n-        assert!(filter.is_some() && filter.unwrap().to_owned() == \"abc\");\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_invalid_crate_filter() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1=2,crate2=4/a.c\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, 4);\n-        assert!(filter.is_some() && filter.unwrap().to_owned() == \"a.c\");\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_empty_with_filter() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1/a*c\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate1\".to_owned()));\n-        assert_eq!(dirs[0].level, ::MAX_LOG_LEVEL);\n-        assert!(filter.is_some() && filter.unwrap().to_owned() == \"a*c\");\n-    }\n-}"}, {"sha": "057df647c7257df027fd7d6eab6d8ab52c2a64a9", "filename": "src/liblog/lib.rs", "status": "removed", "additions": 0, "deletions": 506, "changes": 506, "blob_url": "https://github.com/rust-lang/rust/blob/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=b477682dca3343eb89a467f0d3c73986a53d49d9", "patch": "@@ -1,506 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Utilities for program-wide and customizable logging\n-//!\n-//! # Examples\n-//!\n-//! ```\n-//! # #![feature(rustc_private)]\n-//! #[macro_use] extern crate log;\n-//!\n-//! fn main() {\n-//!     debug!(\"this is a debug {:?}\", \"message\");\n-//!     error!(\"this is printed by default\");\n-//!\n-//!     if log_enabled!(log::INFO) {\n-//!         let x = 3 * 4; // expensive computation\n-//!         info!(\"the answer was: {:?}\", x);\n-//!     }\n-//! }\n-//! ```\n-//!\n-//! Assumes the binary is `main`:\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=error ./main\n-//! ERROR:main: this is printed by default\n-//! ```\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=info ./main\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=debug ./main\n-//! DEBUG:main: this is a debug message\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! You can also set the log level on a per module basis:\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=main=info ./main\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! And enable all logging:\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=main ./main\n-//! DEBUG:main: this is a debug message\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! # Logging Macros\n-//!\n-//! There are five macros that the logging subsystem uses:\n-//!\n-//! * `log!(level, ...)` - the generic logging macro, takes a level as a u32 and any\n-//!                        related `format!` arguments\n-//! * `debug!(...)` - a macro hard-wired to the log level of `DEBUG`\n-//! * `info!(...)` - a macro hard-wired to the log level of `INFO`\n-//! * `warn!(...)` - a macro hard-wired to the log level of `WARN`\n-//! * `error!(...)` - a macro hard-wired to the log level of `ERROR`\n-//!\n-//! All of these macros use the same style of syntax as the `format!` syntax\n-//! extension. Details about the syntax can be found in the documentation of\n-//! `std::fmt` along with the Rust tutorial/manual.\n-//!\n-//! If you want to check at runtime if a given logging level is enabled (e.g. if the\n-//! information you would want to log is expensive to produce), you can use the\n-//! following macro:\n-//!\n-//! * `log_enabled!(level)` - returns true if logging of the given level is enabled\n-//!\n-//! # Enabling logging\n-//!\n-//! Log levels are controlled on a per-module basis, and by default all logging is\n-//! disabled except for `error!` (a log level of 1). Logging is controlled via the\n-//! `RUST_LOG` environment variable. The value of this environment variable is a\n-//! comma-separated list of logging directives. A logging directive is of the form:\n-//!\n-//! ```text\n-//! path::to::module=log_level\n-//! ```\n-//!\n-//! The path to the module is rooted in the name of the crate it was compiled for,\n-//! so if your program is contained in a file `hello.rs`, for example, to turn on\n-//! logging for this file you would use a value of `RUST_LOG=hello`.\n-//! Furthermore, this path is a prefix-search, so all modules nested in the\n-//! specified module will also have logging enabled.\n-//!\n-//! The actual `log_level` is optional to specify. If omitted, all logging will be\n-//! enabled. If specified, the it must be either a numeric in the range of 1-255, or\n-//! it must be one of the strings `debug`, `error`, `info`, or `warn`. If a numeric\n-//! is specified, then all logging less than or equal to that numeral is enabled.\n-//! For example, if logging level 3 is active, error, warn, and info logs will be\n-//! printed, but debug will be omitted.\n-//!\n-//! As the log level for a module is optional, the module to enable logging for is\n-//! also optional. If only a `log_level` is provided, then the global log level for\n-//! all modules is set to this value.\n-//!\n-//! Some examples of valid values of `RUST_LOG` are:\n-//!\n-//! * `hello` turns on all logging for the 'hello' module\n-//! * `info` turns on all info logging\n-//! * `hello=debug` turns on debug logging for 'hello'\n-//! * `hello=3` turns on info logging for 'hello'\n-//! * `hello,std::option` turns on hello, and std's option logging\n-//! * `error,hello=warn` turn on global error logging and also warn for hello\n-//!\n-//! # Filtering results\n-//!\n-//! A RUST_LOG directive may include a string filter. The syntax is to append\n-//! `/` followed by a string. Each message is checked against the string and is\n-//! only logged if it contains the string. Note that the matching is done after\n-//! formatting the log string but before adding any logging meta-data. There is\n-//! a single filter for all modules.\n-//!\n-//! Some examples:\n-//!\n-//! * `hello/foo` turns on all logging for the 'hello' module where the log message\n-//! includes 'foo'.\n-//! * `info/f.o` turns on all info logging where the log message includes 'foo',\n-//! 'f1o', 'fao', etc.\n-//! * `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n-//! message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n-//! * `error,hello=warn/[0-9] scopes` turn on global error logging and also warn for\n-//!  hello. In both cases the log message must include a single digit number\n-//!  followed by 'scopes'\n-//!\n-//! # Performance and Side Effects\n-//!\n-//! Each of these macros will expand to code similar to:\n-//!\n-//! ```rust,ignore\n-//! if log_level <= my_module_log_level() {\n-//!     ::log::log(log_level, format!(...));\n-//! }\n-//! ```\n-//!\n-//! What this means is that each of these macros are very cheap at runtime if\n-//! they're turned off (just a load and an integer comparison). This also means that\n-//! if logging is disabled, none of the components of the log will be executed.\n-\n-#![crate_name = \"log\"]\n-#![unstable(feature = \"rustc_private\",\n-            reason = \"use the crates.io `log` library instead\",\n-            issue = \"27812\")]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\",\n-       test(attr(deny(warnings))))]\n-#![deny(missing_docs)]\n-#![deny(warnings)]\n-\n-#![feature(staged_api)]\n-\n-use std::cell::RefCell;\n-use std::fmt;\n-use std::io::{self, Stderr};\n-use std::io::prelude::*;\n-use std::mem;\n-use std::env;\n-use std::slice;\n-use std::sync::{Mutex, ONCE_INIT, Once};\n-\n-use directive::LOG_LEVEL_NAMES;\n-\n-#[macro_use]\n-pub mod macros;\n-\n-mod directive;\n-\n-/// Maximum logging level of a module that can be specified. Common logging\n-/// levels are found in the DEBUG/INFO/WARN/ERROR constants.\n-pub const MAX_LOG_LEVEL: u32 = 255;\n-\n-/// The default logging level of a crate if no other is specified.\n-const DEFAULT_LOG_LEVEL: u32 = 1;\n-\n-static mut LOCK: *mut Mutex<(Vec<directive::LogDirective>, Option<String>)> = 0 as *mut _;\n-\n-/// An unsafe constant that is the maximum logging level of any module\n-/// specified. This is the first line of defense to determining whether a\n-/// logging statement should be run.\n-static mut LOG_LEVEL: u32 = MAX_LOG_LEVEL;\n-\n-/// Debug log level\n-pub const DEBUG: u32 = 4;\n-/// Info log level\n-pub const INFO: u32 = 3;\n-/// Warn log level\n-pub const WARN: u32 = 2;\n-/// Error log level\n-pub const ERROR: u32 = 1;\n-\n-thread_local! {\n-    static LOCAL_LOGGER: RefCell<Option<Box<Logger + Send>>> = {\n-        RefCell::new(None)\n-    }\n-}\n-\n-/// A trait used to represent an interface to a thread-local logger. Each thread\n-/// can have its own custom logger which can respond to logging messages\n-/// however it likes.\n-pub trait Logger {\n-    /// Logs a single message described by the `record`.\n-    fn log(&mut self, record: &LogRecord);\n-}\n-\n-struct DefaultLogger {\n-    handle: Stderr,\n-}\n-\n-/// Wraps the log level with fmt implementations.\n-#[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]\n-pub struct LogLevel(pub u32);\n-\n-impl fmt::Display for LogLevel {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let LogLevel(level) = *self;\n-        match LOG_LEVEL_NAMES.get(level as usize - 1) {\n-            Some(ref name) => fmt::Display::fmt(name, fmt),\n-            None => fmt::Display::fmt(&level, fmt),\n-        }\n-    }\n-}\n-\n-impl Logger for DefaultLogger {\n-    fn log(&mut self, record: &LogRecord) {\n-        match writeln!(&mut self.handle,\n-                       \"{}:{}: {}\",\n-                       record.level,\n-                       record.module_path,\n-                       record.args) {\n-            Err(e) => panic!(\"failed to log: {:?}\", e),\n-            Ok(()) => {}\n-        }\n-    }\n-}\n-\n-impl Drop for DefaultLogger {\n-    fn drop(&mut self) {\n-        // FIXME(#12628): is panicking the right thing to do?\n-        match self.handle.flush() {\n-            Err(e) => panic!(\"failed to flush a logger: {:?}\", e),\n-            Ok(()) => {}\n-        }\n-    }\n-}\n-\n-/// This function is called directly by the compiler when using the logging\n-/// macros. This function does not take into account whether the log level\n-/// specified is active or not, it will always log something if this method is\n-/// called.\n-///\n-/// It is not recommended to call this function directly, rather it should be\n-/// invoked through the logging family of macros.\n-#[doc(hidden)]\n-pub fn log(level: u32, loc: &'static LogLocation, args: fmt::Arguments) {\n-    // Test the literal string from args against the current filter, if there\n-    // is one.\n-    unsafe {\n-        let filter = (*LOCK).lock().unwrap();\n-        if let Some(ref filter) = filter.1 {\n-            if !args.to_string().contains(filter) {\n-                return;\n-            }\n-        }\n-    }\n-\n-    // Completely remove the local logger from TLS in case anyone attempts to\n-    // frob the slot while we're doing the logging. This will destroy any logger\n-    // set during logging.\n-    let logger = LOCAL_LOGGER.with(|s| s.borrow_mut().take());\n-    let mut logger = logger.unwrap_or_else(|| Box::new(DefaultLogger { handle: io::stderr() }));\n-    logger.log(&LogRecord {\n-        level: LogLevel(level),\n-        args: args,\n-        file: loc.file,\n-        module_path: loc.module_path,\n-        line: loc.line,\n-    });\n-    set_logger(logger);\n-}\n-\n-/// Getter for the global log level. This is a function so that it can be called\n-/// safely\n-#[doc(hidden)]\n-#[inline(always)]\n-pub fn log_level() -> u32 {\n-    unsafe { LOG_LEVEL }\n-}\n-\n-/// Replaces the thread-local logger with the specified logger, returning the old\n-/// logger.\n-pub fn set_logger(logger: Box<Logger + Send>) -> Option<Box<Logger + Send>> {\n-    LOCAL_LOGGER.with(|slot| mem::replace(&mut *slot.borrow_mut(), Some(logger)))\n-}\n-\n-/// A LogRecord is created by the logging macros, and passed as the only\n-/// argument to Loggers.\n-#[derive(Debug)]\n-pub struct LogRecord<'a> {\n-    /// The module path of where the LogRecord originated.\n-    pub module_path: &'a str,\n-\n-    /// The LogLevel of this record.\n-    pub level: LogLevel,\n-\n-    /// The arguments from the log line.\n-    pub args: fmt::Arguments<'a>,\n-\n-    /// The file of where the LogRecord originated.\n-    pub file: &'a str,\n-\n-    /// The line number of where the LogRecord originated.\n-    pub line: u32,\n-}\n-\n-#[doc(hidden)]\n-#[derive(Copy, Clone)]\n-pub struct LogLocation {\n-    pub module_path: &'static str,\n-    pub file: &'static str,\n-    pub line: u32,\n-}\n-\n-/// Tests whether a given module's name is enabled for a particular level of\n-/// logging. This is the second layer of defense about determining whether a\n-/// module's log statement should be emitted or not.\n-#[doc(hidden)]\n-pub fn mod_enabled(level: u32, module: &str) -> bool {\n-    static INIT: Once = ONCE_INIT;\n-    INIT.call_once(init);\n-\n-    // It's possible for many threads are in this function, only one of them\n-    // will perform the global initialization, but all of them will need to check\n-    // again to whether they should really be here or not. Hence, despite this\n-    // check being expanded manually in the logging macro, this function checks\n-    // the log level again.\n-    if level > unsafe { LOG_LEVEL } {\n-        return false;\n-    }\n-\n-    // This assertion should never get tripped unless we're in an at_exit\n-    // handler after logging has been torn down and a logging attempt was made.\n-\n-    unsafe {\n-        let directives = (*LOCK).lock().unwrap();\n-        enabled(level, module, directives.0.iter())\n-    }\n-}\n-\n-fn enabled(level: u32, module: &str, iter: slice::Iter<directive::LogDirective>) -> bool {\n-    // Search for the longest match, the vector is assumed to be pre-sorted.\n-    for directive in iter.rev() {\n-        match directive.name {\n-            Some(ref name) if !module.starts_with(&name[..]) => {}\n-            Some(..) | None => return level <= directive.level,\n-        }\n-    }\n-    level <= DEFAULT_LOG_LEVEL\n-}\n-\n-/// Initialize logging for the current process.\n-///\n-/// This is not threadsafe at all, so initialization is performed through a\n-/// `Once` primitive (and this function is called from that primitive).\n-fn init() {\n-    let (mut directives, filter) = match env::var(\"RUST_LOG\") {\n-        Ok(spec) => directive::parse_logging_spec(&spec[..]),\n-        Err(..) => (Vec::new(), None),\n-    };\n-\n-    // Sort the provided directives by length of their name, this allows a\n-    // little more efficient lookup at runtime.\n-    directives.sort_by(|a, b| {\n-        let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);\n-        let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);\n-        alen.cmp(&blen)\n-    });\n-\n-    let max_level = {\n-        let max = directives.iter().max_by_key(|d| d.level);\n-        max.map(|d| d.level).unwrap_or(DEFAULT_LOG_LEVEL)\n-    };\n-\n-    unsafe {\n-        LOG_LEVEL = max_level;\n-\n-        assert!(LOCK.is_null());\n-        LOCK = Box::into_raw(Box::new(Mutex::new((directives, filter))));\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::enabled;\n-    use directive::LogDirective;\n-\n-    #[test]\n-    fn match_full_path() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n-        assert!(!enabled(3, \"crate1::mod1\", dirs.iter()));\n-        assert!(enabled(3, \"crate2\", dirs.iter()));\n-        assert!(!enabled(4, \"crate2\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn no_match() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(!enabled(2, \"crate3\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn match_beginning() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(3, \"crate2::mod1\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn match_beginning_longest_match() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate2::mod\".to_string()),\n-                        level: 4,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(4, \"crate2::mod1\", dirs.iter()));\n-        assert!(!enabled(4, \"crate2\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn match_default() {\n-        let dirs = [LogDirective {\n-                        name: None,\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n-        assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn zero_level() {\n-        let dirs = [LogDirective {\n-                        name: None,\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 0,\n-                    }];\n-        assert!(!enabled(1, \"crate1::mod1\", dirs.iter()));\n-        assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n-    }\n-}"}, {"sha": "803a2df9ccc8baff67d46d6a3b15db71c8d49602", "filename": "src/liblog/macros.rs", "status": "removed", "additions": 0, "deletions": 205, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b477682dca3343eb89a467f0d3c73986a53d49d9/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=b477682dca3343eb89a467f0d3c73986a53d49d9", "patch": "@@ -1,205 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Logging macros\n-\n-/// The standard logging macro\n-///\n-/// This macro will generically log over a provided level (of type u32) with a\n-/// format!-based argument list. See documentation in `std::fmt` for details on\n-/// how to use the syntax.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     log!(log::WARN, \"this is a warning {}\", \"message\");\n-///     log!(log::DEBUG, \"this is a debug message\");\n-///     log!(6, \"this is a custom logging level: {level}\", level=6);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=warn ./main\n-/// WARN:main: this is a warning message\n-/// ```\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=debug ./main\n-/// DEBUG:main: this is a debug message\n-/// WARN:main: this is a warning message\n-/// ```\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=6 ./main\n-/// DEBUG:main: this is a debug message\n-/// WARN:main: this is a warning message\n-/// 6:main: this is a custom logging level: 6\n-/// ```\n-#[macro_export]\n-macro_rules! log {\n-    ($lvl:expr, $($arg:tt)+) => ({\n-        static LOC: ::log::LogLocation = ::log::LogLocation {\n-            line: line!(),\n-            file: file!(),\n-            module_path: module_path!(),\n-        };\n-        let lvl = $lvl;\n-        if log_enabled!(lvl) {\n-            ::log::log(lvl, &LOC, format_args!($($arg)+))\n-        }\n-    })\n-}\n-\n-/// A convenience macro for logging at the error log level.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     let error = 3;\n-///     error!(\"the build has failed with error code: {}\", error);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=error ./main\n-/// ERROR:main: the build has failed with error code: 3\n-/// ```\n-///\n-#[macro_export]\n-macro_rules! error {\n-    ($($arg:tt)*) => (log!(::log::ERROR, $($arg)*))\n-}\n-\n-/// A convenience macro for logging at the warning log level.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     let code = 3;\n-///     warn!(\"you may like to know that a process exited with: {}\", code);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=warn ./main\n-/// WARN:main: you may like to know that a process exited with: 3\n-/// ```\n-#[macro_export]\n-macro_rules! warn {\n-    ($($arg:tt)*) => (log!(::log::WARN, $($arg)*))\n-}\n-\n-/// A convenience macro for logging at the info log level.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     let ret = 3;\n-///     info!(\"this function is about to return: {}\", ret);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=info ./main\n-/// INFO:main: this function is about to return: 3\n-/// ```\n-#[macro_export]\n-macro_rules! info {\n-    ($($arg:tt)*) => (log!(::log::INFO, $($arg)*))\n-}\n-\n-/// A convenience macro for logging at the debug log level. This macro will\n-/// be omitted at compile time in an optimized build unless `-C debug-assertions`\n-/// is passed to the compiler.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     debug!(\"x = {x}, y = {y}\", x=10, y=20);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=debug ./main\n-/// DEBUG:main: x = 10, y = 20\n-/// ```\n-#[macro_export]\n-macro_rules! debug {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { log!(::log::DEBUG, $($arg)*) })\n-}\n-\n-/// A macro to test whether a log level is enabled for the current module.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// struct Point { x: i32, y: i32 }\n-/// fn some_expensive_computation() -> Point { Point { x: 1, y: 2 } }\n-///\n-/// fn main() {\n-///     if log_enabled!(log::DEBUG) {\n-///         let x = some_expensive_computation();\n-///         debug!(\"x.x = {}, x.y = {}\", x.x, x.y);\n-///     }\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=error ./main\n-/// ```\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=debug ./main\n-/// DEBUG:main: x.x = 1, x.y = 2\n-/// ```\n-#[macro_export]\n-macro_rules! log_enabled {\n-    ($lvl:expr) => ({\n-        let lvl = $lvl;\n-        (lvl != ::log::DEBUG || cfg!(debug_assertions)) &&\n-        lvl <= ::log::log_level() &&\n-        ::log::mod_enabled(lvl, module_path!())\n-    })\n-}"}, {"sha": "fa217acd9f9bf5e4eed1ea2feaede465f4450cbd", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -12,7 +12,7 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }"}, {"sha": "20b322ec189511bde830fb8ecb8ae0f45cd278e4", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -74,11 +74,11 @@ pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     fn block(&mut self, blk: &hir::Block, pred: CFGIndex) -> CFGIndex {\n-        if let Some(break_to_expr_id) = blk.break_to_expr_id {\n+        if blk.targeted_by_break {\n             let expr_exit = self.add_ast_node(blk.id, &[]);\n \n             self.breakable_block_scopes.push(BlockScope {\n-                block_expr_id: break_to_expr_id,\n+                block_expr_id: blk.id,\n                 break_index: expr_exit,\n             });\n \n@@ -195,7 +195,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 //   [..expr..]\n                 //\n                 let cond_exit = self.expr(&cond, pred);                // 1\n-                let then_exit = self.block(&then, cond_exit);          // 2\n+                let then_exit = self.expr(&then, cond_exit);          // 2\n                 self.add_ast_node(expr.id, &[cond_exit, then_exit])      // 3,4\n             }\n \n@@ -215,7 +215,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 //   [..expr..]\n                 //\n                 let cond_exit = self.expr(&cond, pred);                // 1\n-                let then_exit = self.block(&then, cond_exit);          // 2\n+                let then_exit = self.expr(&then, cond_exit);          // 2\n                 let else_exit = self.expr(&otherwise, cond_exit);      // 3\n                 self.add_ast_node(expr.id, &[then_exit, else_exit])      // 4, 5\n             }"}, {"sha": "5aea2bcaa4f5c5fd5f4979df6ddb5183f4a9dcc5", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir::def_id::CrateNum;\n use std::fmt::Debug;\n use std::sync::Arc;\n \n@@ -74,14 +75,13 @@ pub enum DepNode<D: Clone + Debug> {\n     CoherenceCheckImpl(D),\n     CoherenceOverlapCheck(D),\n     CoherenceOverlapCheckSpecial(D),\n-    CoherenceOverlapInherentCheck(D),\n     CoherenceOrphanCheck(D),\n     Variance,\n     WfCheck(D),\n     TypeckItemType(D),\n     UnusedTraitCheck,\n     CheckConst(D),\n-    Privacy,\n+    PrivacyAccessLevels(CrateNum),\n     IntrinsicCheck(D),\n     MatchCheck(D),\n \n@@ -230,7 +230,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             CheckEntryFn => Some(CheckEntryFn),\n             Variance => Some(Variance),\n             UnusedTraitCheck => Some(UnusedTraitCheck),\n-            Privacy => Some(Privacy),\n+            PrivacyAccessLevels(k) => Some(PrivacyAccessLevels(k)),\n             Reachability => Some(Reachability),\n             DeadCheck => Some(DeadCheck),\n             LateLintCheck => Some(LateLintCheck),\n@@ -251,7 +251,6 @@ impl<D: Clone + Debug> DepNode<D> {\n             CoherenceCheckImpl(ref d) => op(d).map(CoherenceCheckImpl),\n             CoherenceOverlapCheck(ref d) => op(d).map(CoherenceOverlapCheck),\n             CoherenceOverlapCheckSpecial(ref d) => op(d).map(CoherenceOverlapCheckSpecial),\n-            CoherenceOverlapInherentCheck(ref d) => op(d).map(CoherenceOverlapInherentCheck),\n             CoherenceOrphanCheck(ref d) => op(d).map(CoherenceOrphanCheck),\n             WfCheck(ref d) => op(d).map(WfCheck),\n             TypeckItemType(ref d) => op(d).map(TypeckItemType),"}, {"sha": "b6a2360211cac92610410d081de314d4c45a2148", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -81,21 +81,6 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n     pub fn keys(&self) -> Vec<M::Key> {\n         self.map.keys().cloned().collect()\n     }\n-\n-    /// Append `elem` to the vector stored for `k`, creating a new vector if needed.\n-    /// This is considered a write to `k`.\n-    ///\n-    /// NOTE: Caution is required when using this method. You should\n-    /// be sure that nobody is **reading from the vector** while you\n-    /// are writing to it. Eventually, it'd be nice to remove this.\n-    pub fn push<E: Clone>(&mut self, k: M::Key, elem: E)\n-        where M: DepTrackingMapConfig<Value=Vec<E>>\n-    {\n-        self.write(&k);\n-        self.map.entry(k)\n-                .or_insert(Vec::new())\n-                .push(elem);\n-    }\n }\n \n impl<M: DepTrackingMapConfig> MemoizationMap for RefCell<DepTrackingMap<M>> {"}, {"sha": "5dbabcc923048482f8f06884ac3ec25c1ae7e82c", "filename": "src/librustc/dep_graph/edges.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fedges.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -101,11 +101,15 @@ impl<D: Clone + Debug + Eq + Hash> DepGraphEdges<D> {\n     }\n \n     /// Indicates that the current task `C` reads `v` by adding an\n-    /// edge from `v` to `C`. If there is no current task, panics. If\n-    /// you want to suppress this edge, use `ignore`.\n+    /// edge from `v` to `C`. If there is no current task, has no\n+    /// effect. Note that *reading* from tracked state is harmless if\n+    /// you are not in a task; what is bad is *writing* to tracked\n+    /// state (and leaking data that you read into a tracked task).\n     pub fn read(&mut self, v: DepNode<D>) {\n-        let source = self.make_node(v);\n-        self.add_edge_from_current_node(|current| (source, current))\n+        if self.current_node().is_some() {\n+            let source = self.make_node(v);\n+            self.add_edge_from_current_node(|current| (source, current))\n+        }\n     }\n \n     /// Indicates that the current task `C` writes `v` by adding an"}, {"sha": "bedb6ff2771f064e468b5789a0ffb0a04b33fc85", "filename": "src/librustc/dep_graph/shadow.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fshadow.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -80,7 +80,13 @@ impl ShadowGraph {\n \n             let mut stack = self.stack.borrow_mut();\n             match *message {\n-                DepMessage::Read(ref n) => self.check_edge(Some(Some(n)), top(&stack)),\n+                // It is ok to READ shared state outside of a\n+                // task. That can't do any harm (at least, the only\n+                // way it can do harm is by leaking that data into a\n+                // query or task, which would be a problem\n+                // anyway). What would be bad is WRITING to that\n+                // state.\n+                DepMessage::Read(_) => { }\n                 DepMessage::Write(ref n) => self.check_edge(top(&stack), Some(Some(n))),\n                 DepMessage::PushTask(ref n) => stack.push(Some(n.clone())),\n                 DepMessage::PushIgnore => stack.push(None),\n@@ -116,7 +122,7 @@ impl ShadowGraph {\n             (None, None) => unreachable!(),\n \n             // nothing on top of the stack\n-            (None, Some(n)) | (Some(n), None) => bug!(\"read/write of {:?} but no current task\", n),\n+            (None, Some(n)) | (Some(n), None) => bug!(\"write of {:?} but no current task\", n),\n \n             // this corresponds to an Ignore being top of the stack\n             (Some(None), _) | (_, Some(None)) => (),"}, {"sha": "5a0fbf8efb70778cc07954fe2c60d8436b1d7e0b", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1336,7 +1336,7 @@ trait SecondTrait : FirstTrait {\n \n E0398: r##\"\n In Rust 1.3, the default object lifetime bounds are expected to change, as\n-described in RFC #1156 [1]. You are getting a warning because the compiler\n+described in [RFC 1156]. You are getting a warning because the compiler\n thinks it is possible that this change will cause a compilation error in your\n code. It is possible, though unlikely, that this is a false alarm.\n \n@@ -1365,7 +1365,7 @@ fn foo<'a>(arg: &Box<SomeTrait+'a>) { ... }\n This explicitly states that you expect the trait object `SomeTrait` to contain\n references (with a maximum lifetime of `'a`).\n \n-[1]: https://github.com/rust-lang/rfcs/pull/1156\n+[RFC 1156]: https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md\n \"##,\n \n E0452: r##\"\n@@ -1771,6 +1771,7 @@ This pattern is incorrect because, because the type of `foo` is a function\n **item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n is a function pointer, which is not zero-sized.\n This pattern should be rewritten. There are a few possible ways to do this:\n+\n - change the original fn declaration to match the expected signature,\n   and do the cast in the fn body (the prefered option)\n - cast the fn item fo a fn pointer before calling transmute, as shown here:"}, {"sha": "a6b18ac10a79074bb35d0c3e39a5c590fce391f5", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -78,33 +78,86 @@ impl serialize::UseSpecializedDecodable for CrateNum {\n /// A DefIndex is an index into the hir-map for a crate, identifying a\n /// particular definition. It should really be considered an interned\n /// shorthand for a particular DefPath.\n+///\n+/// At the moment we are allocating the numerical values of DefIndexes into two\n+/// ranges: the \"low\" range (starting at zero) and the \"high\" range (starting at\n+/// DEF_INDEX_HI_START). This allows us to allocate the DefIndexes of all\n+/// item-likes (Items, TraitItems, and ImplItems) into one of these ranges and\n+/// consequently use a simple array for lookup tables keyed by DefIndex and\n+/// known to be densely populated. This is especially important for the HIR map.\n+///\n+/// Since the DefIndex is mostly treated as an opaque ID, you probably\n+/// don't have to care about these ranges.\n #[derive(Clone, Debug, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n            RustcDecodable, Hash, Copy)]\n pub struct DefIndex(u32);\n \n impl DefIndex {\n+    #[inline]\n     pub fn new(x: usize) -> DefIndex {\n         assert!(x < (u32::MAX as usize));\n         DefIndex(x as u32)\n     }\n \n+    #[inline]\n     pub fn from_u32(x: u32) -> DefIndex {\n         DefIndex(x)\n     }\n \n+    #[inline]\n     pub fn as_usize(&self) -> usize {\n         self.0 as usize\n     }\n \n+    #[inline]\n     pub fn as_u32(&self) -> u32 {\n         self.0\n     }\n+\n+    #[inline]\n+    pub fn address_space(&self) -> DefIndexAddressSpace {\n+        if self.0 < DEF_INDEX_HI_START.0 {\n+            DefIndexAddressSpace::Low\n+        } else {\n+            DefIndexAddressSpace::High\n+        }\n+    }\n+\n+    /// Converts this DefIndex into a zero-based array index.\n+    /// This index is the offset within the given \"range\" of the DefIndex,\n+    /// that is, if the DefIndex is part of the \"high\" range, the resulting\n+    /// index will be (DefIndex - DEF_INDEX_HI_START).\n+    #[inline]\n+    pub fn as_array_index(&self) -> usize {\n+        (self.0 & !DEF_INDEX_HI_START.0) as usize\n+    }\n }\n \n+/// The start of the \"high\" range of DefIndexes.\n+const DEF_INDEX_HI_START: DefIndex = DefIndex(1 << 31);\n+\n /// The crate root is always assigned index 0 by the AST Map code,\n /// thanks to `NodeCollector::new`.\n pub const CRATE_DEF_INDEX: DefIndex = DefIndex(0);\n \n+#[derive(Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum DefIndexAddressSpace {\n+    Low = 0,\n+    High = 1,\n+}\n+\n+impl DefIndexAddressSpace {\n+    #[inline]\n+    pub fn index(&self) -> usize {\n+        *self as usize\n+    }\n+\n+    #[inline]\n+    pub fn start(&self) -> usize {\n+        self.index() * DEF_INDEX_HI_START.as_usize()\n+    }\n+}\n+\n /// A DefId identifies a particular *definition*, by combining a crate\n /// index and a def index.\n #[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable, RustcDecodable, Hash, Copy)]"}, {"sha": "c7ad143c94979762f7ac060dc2be4ba9e91a865a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -960,7 +960,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         }\n         ExprIf(ref head_expression, ref if_block, ref optional_else) => {\n             visitor.visit_expr(head_expression);\n-            visitor.visit_block(if_block);\n+            visitor.visit_expr(if_block);\n             walk_list!(visitor, visit_expr, optional_else);\n         }\n         ExprWhile(ref subexpression, ref block, ref opt_sp_name) => {"}, {"sha": "17185a6ab69f493399e327afc94c8504c5f84a11", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1022, "deletions": 800, "changes": 1822, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca"}, {"sha": "afdb9059ea7c012ccf21de861bf492fcb59b35d9", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 47, "deletions": 22, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -9,13 +9,15 @@\n // except according to those terms.\n \n use hir::map::definitions::*;\n-use hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n+use hir::def_id::{CRATE_DEF_INDEX, DefIndex, DefIndexAddressSpace};\n \n use syntax::ast::*;\n use syntax::ext::hygiene::Mark;\n use syntax::visit;\n use syntax::symbol::{Symbol, keywords};\n \n+use hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n+\n /// Creates def ids for nodes in the AST.\n pub struct DefCollector<'a> {\n     definitions: &'a mut Definitions,\n@@ -39,23 +41,31 @@ impl<'a> DefCollector<'a> {\n     }\n \n     pub fn collect_root(&mut self) {\n-        let root = self.create_def_with_parent(None, CRATE_NODE_ID, DefPathData::CrateRoot);\n+        let root = self.create_def_with_parent(None,\n+                                               CRATE_NODE_ID,\n+                                               DefPathData::CrateRoot,\n+                                               ITEM_LIKE_SPACE);\n         assert_eq!(root, CRATE_DEF_INDEX);\n         self.parent_def = Some(root);\n     }\n \n-    fn create_def(&mut self, node_id: NodeId, data: DefPathData) -> DefIndex {\n+    fn create_def(&mut self,\n+                  node_id: NodeId,\n+                  data: DefPathData,\n+                  address_space: DefIndexAddressSpace)\n+                  -> DefIndex {\n         let parent_def = self.parent_def;\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n-        self.definitions.create_def_with_parent(parent_def, node_id, data)\n+        self.definitions.create_def_with_parent(parent_def, node_id, data, address_space)\n     }\n \n     fn create_def_with_parent(&mut self,\n                               parent: Option<DefIndex>,\n                               node_id: NodeId,\n-                              data: DefPathData)\n+                              data: DefPathData,\n+                              address_space: DefIndexAddressSpace)\n                               -> DefIndex {\n-        self.definitions.create_def_with_parent(parent, node_id, data)\n+        self.definitions.create_def_with_parent(parent, node_id, data, address_space)\n     }\n \n     pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n@@ -76,13 +86,13 @@ impl<'a> DefCollector<'a> {\n             _ => {}\n         }\n \n-        self.create_def(expr.id, DefPathData::Initializer);\n+        self.create_def(expr.id, DefPathData::Initializer, REGULAR_SPACE);\n     }\n \n     fn visit_macro_invoc(&mut self, id: NodeId, const_expr: bool) {\n         if let Some(ref mut visit) = self.visit_macro_invoc {\n             visit(MacroInvocationData {\n-                mark: Mark::from_placeholder_id(id),\n+                mark: id.placeholder_to_mark(),\n                 const_expr: const_expr,\n                 def_index: self.parent_def.unwrap(),\n             })\n@@ -118,27 +128,32 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     ViewPathSimple(..) => {}\n                     ViewPathList(_, ref imports) => {\n                         for import in imports {\n-                            self.create_def(import.node.id, DefPathData::Misc);\n+                            self.create_def(import.node.id,\n+                                            DefPathData::Misc,\n+                                            ITEM_LIKE_SPACE);\n                         }\n                     }\n                 }\n                 DefPathData::Misc\n             }\n         };\n-        let def = self.create_def(i.id, def_data);\n+        let def = self.create_def(i.id, def_data, ITEM_LIKE_SPACE);\n \n         self.with_parent(def, |this| {\n             match i.node {\n                 ItemKind::Enum(ref enum_definition, _) => {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.name.name.as_str()));\n+                                            DefPathData::EnumVariant(v.node.name.name.as_str()),\n+                                            REGULAR_SPACE);\n                         this.with_parent(variant_def_index, |this| {\n                             for (index, field) in v.node.data.fields().iter().enumerate() {\n                                 let name = field.ident.map(|ident| ident.name)\n                                     .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n-                                this.create_def(field.id, DefPathData::Field(name.as_str()));\n+                                this.create_def(field.id,\n+                                                DefPathData::Field(name.as_str()),\n+                                                REGULAR_SPACE);\n                             }\n \n                             if let Some(ref expr) = v.node.disr_expr {\n@@ -151,13 +166,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     // If this is a tuple-like struct, register the constructor.\n                     if !struct_def.is_struct() {\n                         this.create_def(struct_def.id(),\n-                                        DefPathData::StructCtor);\n+                                        DefPathData::StructCtor,\n+                                        REGULAR_SPACE);\n                     }\n \n                     for (index, field) in struct_def.fields().iter().enumerate() {\n                         let name = field.ident.map(|ident| ident.name.as_str())\n                             .unwrap_or(Symbol::intern(&index.to_string()).as_str());\n-                        this.create_def(field.id, DefPathData::Field(name));\n+                        this.create_def(field.id, DefPathData::Field(name), REGULAR_SPACE);\n                     }\n                 }\n                 _ => {}\n@@ -168,7 +184,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.name.as_str()));\n+                                  DefPathData::ValueNs(foreign_item.ident.name.as_str()),\n+                                  REGULAR_SPACE);\n \n         self.with_parent(def, |this| {\n             visit::walk_foreign_item(this, foreign_item);\n@@ -177,7 +194,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n         for ty_param in generics.ty_params.iter() {\n-            self.create_def(ty_param.id, DefPathData::TypeParam(ty_param.ident.name.as_str()));\n+            self.create_def(ty_param.id,\n+                            DefPathData::TypeParam(ty_param.ident.name.as_str()),\n+                            REGULAR_SPACE);\n         }\n \n         visit::walk_generics(self, generics);\n@@ -191,7 +210,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n-        let def = self.create_def(ti.id, def_data);\n+        let def = self.create_def(ti.id, def_data, ITEM_LIKE_SPACE);\n         self.with_parent(def, |this| {\n             if let TraitItemKind::Const(_, Some(ref expr)) = ti.node {\n                 this.visit_const_expr(expr);\n@@ -209,7 +228,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n \n-        let def = self.create_def(ii.id, def_data);\n+        let def = self.create_def(ii.id, def_data, ITEM_LIKE_SPACE);\n         self.with_parent(def, |this| {\n             if let ImplItemKind::Const(_, ref expr) = ii.node {\n                 this.visit_const_expr(expr);\n@@ -225,7 +244,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         match pat.node {\n             PatKind::Mac(..) => return self.visit_macro_invoc(pat.id, false),\n             PatKind::Ident(_, id, _) => {\n-                let def = self.create_def(pat.id, DefPathData::Binding(id.node.name.as_str()));\n+                let def = self.create_def(pat.id,\n+                                          DefPathData::Binding(id.node.name.as_str()),\n+                                          REGULAR_SPACE);\n                 self.parent_def = Some(def);\n             }\n             _ => {}\n@@ -242,7 +263,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id, false),\n             ExprKind::Repeat(_, ref count) => self.visit_const_expr(count),\n             ExprKind::Closure(..) => {\n-                let def = self.create_def(expr.id, DefPathData::ClosureExpr);\n+                let def = self.create_def(expr.id,\n+                                          DefPathData::ClosureExpr,\n+                                          REGULAR_SPACE);\n                 self.parent_def = Some(def);\n             }\n             _ => {}\n@@ -257,7 +280,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             TyKind::Mac(..) => return self.visit_macro_invoc(ty.id, false),\n             TyKind::Array(_, ref length) => self.visit_const_expr(length),\n             TyKind::ImplTrait(..) => {\n-                self.create_def(ty.id, DefPathData::ImplTrait);\n+                self.create_def(ty.id, DefPathData::ImplTrait, REGULAR_SPACE);\n             }\n             TyKind::Typeof(ref expr) => self.visit_const_expr(expr),\n             _ => {}\n@@ -266,7 +289,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_lifetime_def(&mut self, def: &'a LifetimeDef) {\n-        self.create_def(def.lifetime.id, DefPathData::LifetimeDef(def.lifetime.name.as_str()));\n+        self.create_def(def.lifetime.id,\n+                        DefPathData::LifetimeDef(def.lifetime.name.as_str()),\n+                        REGULAR_SPACE);\n     }\n \n     fn visit_stmt(&mut self, stmt: &'a Stmt) {"}, {"sha": "809d5db3071d7be75607974035a056b28ef3c377", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 108, "deletions": 26, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -14,8 +14,10 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use hir;\n+use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::fmt::Write;\n@@ -29,24 +31,44 @@ use util::nodemap::NodeMap;\n /// Internally the DefPathTable holds a tree of DefKeys, where each DefKey\n /// stores the DefIndex of its parent.\n /// There is one DefPathTable for each crate.\n-#[derive(Clone)]\n pub struct DefPathTable {\n-    index_to_key: Vec<DefKey>,\n+    index_to_key: [Vec<DefKey>; 2],\n     key_to_index: FxHashMap<DefKey, DefIndex>,\n }\n \n+// Unfortunately we have to provide a manual impl of Clone because of the\n+// fixed-sized array field.\n+impl Clone for DefPathTable {\n+    fn clone(&self) -> Self {\n+        DefPathTable {\n+            index_to_key: [self.index_to_key[0].clone(),\n+                           self.index_to_key[1].clone()],\n+            key_to_index: self.key_to_index.clone(),\n+        }\n+    }\n+}\n+\n impl DefPathTable {\n-    fn insert(&mut self, key: DefKey) -> DefIndex {\n-        let index = DefIndex::new(self.index_to_key.len());\n-        debug!(\"DefPathTable::insert() - {:?} <-> {:?}\", key, index);\n-        self.index_to_key.push(key.clone());\n+\n+    fn allocate(&mut self,\n+                key: DefKey,\n+                address_space: DefIndexAddressSpace)\n+                -> DefIndex {\n+        let index = {\n+            let index_to_key = &mut self.index_to_key[address_space.index()];\n+            let index = DefIndex::new(index_to_key.len() + address_space.start());\n+            debug!(\"DefPathTable::insert() - {:?} <-> {:?}\", key, index);\n+            index_to_key.push(key.clone());\n+            index\n+        };\n         self.key_to_index.insert(key, index);\n         index\n     }\n \n     #[inline(always)]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n-        self.index_to_key[index.as_usize()].clone()\n+        self.index_to_key[index.address_space().index()]\n+                         [index.as_array_index()].clone()\n     }\n \n     #[inline(always)]\n@@ -94,17 +116,28 @@ impl DefPathTable {\n \n impl Encodable for DefPathTable {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        self.index_to_key.encode(s)\n+        self.index_to_key[DefIndexAddressSpace::Low.index()].encode(s)?;\n+        self.index_to_key[DefIndexAddressSpace::High.index()].encode(s)\n     }\n }\n \n impl Decodable for DefPathTable {\n     fn decode<D: Decoder>(d: &mut D) -> Result<DefPathTable, D::Error> {\n-        let index_to_key: Vec<DefKey> = Decodable::decode(d)?;\n-        let key_to_index = index_to_key.iter()\n-                                       .enumerate()\n-                                       .map(|(index, key)| (key.clone(), DefIndex::new(index)))\n-                                       .collect();\n+        let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n+        let index_to_key_high: Vec<DefKey> = Decodable::decode(d)?;\n+\n+        let index_to_key = [index_to_key_lo, index_to_key_high];\n+\n+        let mut key_to_index = FxHashMap();\n+\n+        for space in &[DefIndexAddressSpace::Low, DefIndexAddressSpace::High] {\n+            key_to_index.extend(index_to_key[space.index()]\n+                .iter()\n+                .enumerate()\n+                .map(|(index, key)| (key.clone(),\n+                                     DefIndex::new(index + space.start()))))\n+        }\n+\n         Ok(DefPathTable {\n             index_to_key: index_to_key,\n             key_to_index: key_to_index,\n@@ -116,11 +149,27 @@ impl Decodable for DefPathTable {\n /// The definition table containing node definitions.\n /// It holds the DefPathTable for local DefIds/DefPaths and it also stores a\n /// mapping from NodeIds to local DefIds.\n-#[derive(Clone)]\n pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n-    def_index_to_node: Vec<ast::NodeId>,\n+    def_index_to_node: [Vec<ast::NodeId>; 2],\n+    pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n+}\n+\n+// Unfortunately we have to provide a manual impl of Clone because of the\n+// fixed-sized array field.\n+impl Clone for Definitions {\n+    fn clone(&self) -> Self {\n+        Definitions {\n+            table: self.table.clone(),\n+            node_to_def_index: self.node_to_def_index.clone(),\n+            def_index_to_node: [\n+                self.def_index_to_node[0].clone(),\n+                self.def_index_to_node[1].clone(),\n+            ],\n+            node_to_hir_id: self.node_to_hir_id.clone(),\n+        }\n+    }\n }\n \n /// A unique identifier that we can use to lookup a definition\n@@ -206,6 +255,23 @@ impl DefPath {\n         s\n     }\n \n+    /// Returns a string representation of the DefPath without\n+    /// the crate-prefix. This method is useful if you don't have\n+    /// a TyCtxt available.\n+    pub fn to_string_no_crate(&self) -> String {\n+        let mut s = String::with_capacity(self.data.len() * 16);\n+\n+        for component in &self.data {\n+            write!(s,\n+                   \"::{}[{}]\",\n+                   component.data.as_interned_str(),\n+                   component.disambiguator)\n+                .unwrap();\n+        }\n+\n+        s\n+    }\n+\n     pub fn deterministic_hash(&self, tcx: TyCtxt) -> u64 {\n         debug!(\"deterministic_hash({:?})\", self);\n         let mut state = StableHasher::new();\n@@ -270,11 +336,12 @@ impl Definitions {\n     pub fn new() -> Definitions {\n         Definitions {\n             table: DefPathTable {\n-                index_to_key: vec![],\n+                index_to_key: [vec![], vec![]],\n                 key_to_index: FxHashMap(),\n             },\n             node_to_def_index: NodeMap(),\n-            def_index_to_node: vec![],\n+            def_index_to_node: [vec![], vec![]],\n+            node_to_hir_id: IndexVec::new(),\n         }\n     }\n \n@@ -283,8 +350,9 @@ impl Definitions {\n     }\n \n     /// Get the number of definitions.\n-    pub fn len(&self) -> usize {\n-        self.def_index_to_node.len()\n+    pub fn def_index_counts_lo_hi(&self) -> (usize, usize) {\n+        (self.def_index_to_node[DefIndexAddressSpace::Low.index()].len(),\n+         self.def_index_to_node[DefIndexAddressSpace::High.index()].len())\n     }\n \n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n@@ -318,8 +386,9 @@ impl Definitions {\n \n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n-            assert!(def_id.index.as_usize() < self.def_index_to_node.len());\n-            Some(self.def_index_to_node[def_id.index.as_usize()])\n+            let space_index = def_id.index.address_space().index();\n+            let array_index = def_id.index.as_array_index();\n+            Some(self.def_index_to_node[space_index][array_index])\n         } else {\n             None\n         }\n@@ -329,7 +398,9 @@ impl Definitions {\n     pub fn create_def_with_parent(&mut self,\n                                   parent: Option<DefIndex>,\n                                   node_id: ast::NodeId,\n-                                  data: DefPathData)\n+                                  data: DefPathData,\n+                                  // is_owner: bool)\n+                                  address_space: DefIndexAddressSpace)\n                                   -> DefIndex {\n         debug!(\"create_def_with_parent(parent={:?}, node_id={:?}, data={:?})\",\n                parent, node_id, data);\n@@ -359,14 +430,25 @@ impl Definitions {\n         debug!(\"create_def_with_parent: after disambiguation, key = {:?}\", key);\n \n         // Create the definition.\n-        let index = self.table.insert(key);\n+        let index = self.table.allocate(key, address_space);\n+        assert_eq!(index.as_array_index(),\n+                   self.def_index_to_node[address_space.index()].len());\n+        self.def_index_to_node[address_space.index()].push(node_id);\n+\n         debug!(\"create_def_with_parent: def_index_to_node[{:?} <-> {:?}\", index, node_id);\n         self.node_to_def_index.insert(node_id, index);\n-        assert_eq!(index.as_usize(), self.def_index_to_node.len());\n-        self.def_index_to_node.push(node_id);\n \n         index\n     }\n+\n+    /// Initialize the ast::NodeId to HirId mapping once it has been generated during\n+    /// AST to HIR lowering.\n+    pub fn init_node_id_to_hir_id_mapping(&mut self,\n+                                          mapping: IndexVec<ast::NodeId, hir::HirId>) {\n+        assert!(self.node_to_hir_id.is_empty(),\n+                \"Trying initialize NodeId -> HirId mapping twice\");\n+        self.node_to_hir_id = mapping;\n+    }\n }\n \n impl DefPathData {"}, {"sha": "b3cc0c542ef9da217dfb225c0bcbc9746e193397", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,184 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use hir::{self, intravisit, HirId, ItemLocalId};\n+use syntax::ast::NodeId;\n+use hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_data_structures::fx::FxHashMap;\n+\n+pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n+    let mut outer_visitor = OuterVisitor {\n+        hir_map: hir_map,\n+        errors: vec![],\n+    };\n+\n+    hir_map.dep_graph.with_ignore(|| {\n+        hir_map.krate().visit_all_item_likes(&mut outer_visitor);\n+        if !outer_visitor.errors.is_empty() {\n+            let message = outer_visitor\n+                .errors\n+                .iter()\n+                .fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n+            bug!(\"{}\", message);\n+        }\n+    });\n+}\n+\n+struct HirIdValidator<'a, 'hir: 'a> {\n+    hir_map: &'a hir::map::Map<'hir>,\n+    owner_def_index: Option<DefIndex>,\n+    hir_ids_seen: FxHashMap<ItemLocalId, NodeId>,\n+    errors: Vec<String>,\n+}\n+\n+struct OuterVisitor<'a, 'hir: 'a> {\n+    hir_map: &'a hir::map::Map<'hir>,\n+    errors: Vec<String>,\n+}\n+\n+impl<'a, 'hir: 'a> OuterVisitor<'a, 'hir> {\n+    fn new_inner_visitor(&self,\n+                         hir_map: &'a hir::map::Map<'hir>)\n+                         -> HirIdValidator<'a, 'hir> {\n+        HirIdValidator {\n+            hir_map: hir_map,\n+            owner_def_index: None,\n+            hir_ids_seen: FxHashMap(),\n+            errors: Vec::new(),\n+        }\n+    }\n+}\n+\n+impl<'a, 'hir: 'a> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n+    fn visit_item(&mut self, i: &'hir hir::Item) {\n+        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n+        inner_visitor.check(i.id, |this| intravisit::walk_item(this, i));\n+        self.errors.extend(inner_visitor.errors.drain(..));\n+    }\n+\n+    fn visit_trait_item(&mut self, i: &'hir hir::TraitItem) {\n+        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n+        inner_visitor.check(i.id, |this| intravisit::walk_trait_item(this, i));\n+        self.errors.extend(inner_visitor.errors.drain(..));\n+    }\n+\n+    fn visit_impl_item(&mut self, i: &'hir hir::ImplItem) {\n+        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n+        inner_visitor.check(i.id, |this| intravisit::walk_impl_item(this, i));\n+        self.errors.extend(inner_visitor.errors.drain(..));\n+    }\n+}\n+\n+impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n+\n+    fn check<F: FnOnce(&mut HirIdValidator<'a, 'hir>)>(&mut self,\n+                                                       node_id: NodeId,\n+                                                       walk: F) {\n+        assert!(self.owner_def_index.is_none());\n+        let owner_def_index = self.hir_map.local_def_id(node_id).index;\n+        self.owner_def_index = Some(owner_def_index);\n+        walk(self);\n+\n+        if owner_def_index == CRATE_DEF_INDEX {\n+            return\n+        }\n+\n+        // There's always at least one entry for the owning item itself\n+        let max = self.hir_ids_seen\n+                      .keys()\n+                      .map(|local_id| local_id.as_usize())\n+                      .max()\n+                      .unwrap();\n+\n+        if max != self.hir_ids_seen.len() - 1 {\n+            // Collect the missing ItemLocalIds\n+            let missing: Vec<_> = (0 .. max + 1)\n+              .filter(|&i| !self.hir_ids_seen.contains_key(&ItemLocalId(i as u32)))\n+              .collect();\n+\n+            // Try to map those to something more useful\n+            let mut missing_items = vec![];\n+\n+            for local_id in missing {\n+                let hir_id = HirId {\n+                    owner: owner_def_index,\n+                    local_id: ItemLocalId(local_id as u32),\n+                };\n+\n+                // We are already in ICE mode here, so doing a linear search\n+                // should be fine.\n+                let (node_id, _) = self.hir_map\n+                                       .definitions()\n+                                       .node_to_hir_id\n+                                       .iter()\n+                                       .enumerate()\n+                                       .find(|&(_, &entry)| hir_id == entry)\n+                                       .unwrap();\n+                let node_id = NodeId::new(node_id);\n+                missing_items.push(format!(\"[local_id: {}, node:{}]\",\n+                                           local_id,\n+                                           self.hir_map.node_to_string(node_id)));\n+            }\n+\n+            self.errors.push(format!(\n+                \"ItemLocalIds not assigned densely in {}. \\\n+                Max ItemLocalId = {}, missing IDs = {:?}\",\n+                self.hir_map.def_path(DefId::local(owner_def_index)).to_string_no_crate(),\n+                max,\n+                missing_items));\n+        }\n+    }\n+}\n+\n+impl<'a, 'hir: 'a> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n+\n+    fn nested_visit_map<'this>(&'this mut self)\n+                               -> intravisit::NestedVisitorMap<'this, 'hir> {\n+        intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n+    }\n+\n+    fn visit_id(&mut self, node_id: NodeId) {\n+        let owner = self.owner_def_index.unwrap();\n+        let stable_id = self.hir_map.definitions().node_to_hir_id[node_id];\n+\n+        if stable_id == hir::DUMMY_HIR_ID {\n+            self.errors.push(format!(\"HirIdValidator: No HirId assigned for NodeId {}: {:?}\",\n+                                     node_id,\n+                                     self.hir_map.node_to_string(node_id)));\n+        }\n+\n+        if owner != stable_id.owner {\n+            self.errors.push(format!(\n+                \"HirIdValidator: The recorded owner of {} is {} instead of {}\",\n+                self.hir_map.node_to_string(node_id),\n+                self.hir_map.def_path(DefId::local(stable_id.owner)).to_string_no_crate(),\n+                self.hir_map.def_path(DefId::local(owner)).to_string_no_crate()));\n+        }\n+\n+        if let Some(prev) = self.hir_ids_seen.insert(stable_id.local_id, node_id) {\n+            if prev != node_id {\n+                self.errors.push(format!(\n+                    \"HirIdValidator: Same HirId {}/{} assigned for nodes {} and {}\",\n+                    self.hir_map.def_path(DefId::local(stable_id.owner)).to_string_no_crate(),\n+                    stable_id.local_id.as_usize(),\n+                    self.hir_map.node_to_string(prev),\n+                    self.hir_map.node_to_string(node_id)));\n+            }\n+        }\n+    }\n+\n+    fn visit_impl_item_ref(&mut self, _: &'hir hir::ImplItemRef) {\n+        // Explicitly do nothing here. ImplItemRefs contain hir::Visibility\n+        // values that actually belong to an ImplItem instead of the ItemImpl\n+        // we are currently in. So for those it's correct that they have a\n+        // different owner.\n+    }\n+}"}, {"sha": "d7aa36b24f94279ba345399f7276a1e6fe609fff", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -17,7 +17,7 @@ pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n \n use dep_graph::{DepGraph, DepNode};\n \n-use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex, DefIndexAddressSpace};\n \n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n@@ -36,6 +36,10 @@ pub mod blocks;\n mod collector;\n mod def_collector;\n pub mod definitions;\n+mod hir_id_validator;\n+\n+pub const ITEM_LIKE_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::Low;\n+pub const REGULAR_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::High;\n \n #[derive(Copy, Clone, Debug)]\n pub enum Node<'hir> {\n@@ -346,10 +350,6 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn num_local_def_ids(&self) -> usize {\n-        self.definitions.len()\n-    }\n-\n     pub fn definitions(&self) -> &Definitions {\n         &self.definitions\n     }\n@@ -948,7 +948,7 @@ pub fn map_crate<'hir>(forest: &'hir mut Forest,\n     intravisit::walk_crate(&mut collector, &forest.krate);\n     let map = collector.map;\n \n-    if log_enabled!(::log::DEBUG) {\n+    if log_enabled!(::log::LogLevel::Debug) {\n         // This only makes sense for ordered stores; note the\n         // enumerate to count the number of entries.\n         let (entries_less_1, _) = map.iter().filter(|&x| {\n@@ -964,13 +964,17 @@ pub fn map_crate<'hir>(forest: &'hir mut Forest,\n               entries, vector_length, (entries as f64 / vector_length as f64) * 100.);\n     }\n \n-    Map {\n+    let map = Map {\n         forest: forest,\n         dep_graph: forest.dep_graph.clone(),\n         map: map,\n         definitions: definitions,\n         inlined_bodies: RefCell::new(DefIdMap()),\n-    }\n+    };\n+\n+    hir_id_validator::check_crate(&map);\n+\n+    map\n }\n \n /// Identical to the `PpAnn` implementation for `hir::Crate`,"}, {"sha": "d5000ac9c18669a3940bbea0a4629eaa6645d614", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 77, "deletions": 8, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -30,19 +30,22 @@ pub use self::Visibility::{Public, Inherited};\n pub use self::PathParameters::*;\n \n use hir::def::Def;\n-use hir::def_id::DefId;\n+use hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use util::nodemap::{NodeMap, FxHashSet};\n \n-use syntax_pos::{Span, ExpnId, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n use syntax::codemap::{self, Spanned};\n use syntax::abi::Abi;\n use syntax::ast::{Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};\n+use syntax::ext::hygiene::SyntaxContext;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n \n+use rustc_data_structures::indexed_vec;\n+\n use std::collections::BTreeMap;\n use std::fmt;\n \n@@ -73,6 +76,63 @@ pub mod pat_util;\n pub mod print;\n pub mod svh;\n \n+/// A HirId uniquely identifies a node in the HIR of then current crate. It is\n+/// composed of the `owner`, which is the DefIndex of the directly enclosing\n+/// hir::Item, hir::TraitItem, or hir::ImplItem (i.e. the closest \"item-like\"),\n+/// and the `local_id` which is unique within the given owner.\n+///\n+/// This two-level structure makes for more stable values: One can move an item\n+/// around within the source code, or add or remove stuff before it, without\n+/// the local_id part of the HirId changing, which is a very useful property\n+/// incremental compilation where we have to persist things through changes to\n+/// the code base.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, Debug,\n+         RustcEncodable, RustcDecodable)]\n+pub struct HirId {\n+    pub owner: DefIndex,\n+    pub local_id: ItemLocalId,\n+}\n+\n+/// An `ItemLocalId` uniquely identifies something within a given \"item-like\",\n+/// that is within a hir::Item, hir::TraitItem, or hir::ImplItem. There is no\n+/// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n+/// the node's position within the owning item in any way, but there is a\n+/// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n+/// integers starting at zero, so a mapping that maps all or most nodes within\n+/// an \"item-like\" to something else can be implement by a `Vec` instead of a\n+/// tree or hash map.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, Debug,\n+         RustcEncodable, RustcDecodable)]\n+pub struct ItemLocalId(pub u32);\n+\n+impl ItemLocalId {\n+    pub fn as_usize(&self) -> usize {\n+        self.0 as usize\n+    }\n+}\n+\n+impl indexed_vec::Idx for ItemLocalId {\n+    fn new(idx: usize) -> Self {\n+        debug_assert!((idx as u32) as usize == idx);\n+        ItemLocalId(idx as u32)\n+    }\n+\n+    fn index(self) -> usize {\n+        self.0 as usize\n+    }\n+}\n+\n+/// The `HirId` corresponding to CRATE_NODE_ID and CRATE_DEF_INDEX\n+pub const CRATE_HIR_ID: HirId = HirId {\n+    owner: CRATE_DEF_INDEX,\n+    local_id: ItemLocalId(0)\n+};\n+\n+pub const DUMMY_HIR_ID: HirId = HirId {\n+    owner: CRATE_DEF_INDEX,\n+    local_id: ItemLocalId(!0)\n+};\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n@@ -100,6 +160,10 @@ impl Lifetime {\n     pub fn is_elided(&self) -> bool {\n         self.name == keywords::Invalid.name()\n     }\n+\n+    pub fn is_static(&self) -> bool {\n+        self.name == keywords::StaticLifetime.name()\n+    }\n }\n \n /// A lifetime definition, eg `'a: 'b+'c+'d`\n@@ -485,9 +549,11 @@ pub struct Block {\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`\n     pub rules: BlockCheckMode,\n     pub span: Span,\n-    /// The id of the expression that `break` breaks to if the block can be broken out of.\n-    /// Currently only `Some(_)` for `catch {}` blocks\n-    pub break_to_expr_id: Option<NodeId>,\n+    /// If true, then there may exist `break 'a` values that aim to\n+    /// break out of this block early. As of this writing, this is not\n+    /// currently permitted in Rust itself, but it is generated as\n+    /// part of `catch` statements.\n+    pub targeted_by_break: bool,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n@@ -929,8 +995,8 @@ pub enum Expr_ {\n     ExprType(P<Expr>, P<Ty>),\n     /// An `if` block, with an optional else block\n     ///\n-    /// `if expr { block } else { expr }`\n-    ExprIf(P<Expr>, P<Block>, Option<P<Expr>>),\n+    /// `if expr { expr } else { expr }`\n+    ExprIf(P<Expr>, P<Expr>, Option<P<Expr>>),\n     /// A while loop, with an optional label\n     ///\n     /// `'label: while expr { block }`\n@@ -1304,7 +1370,7 @@ pub struct InlineAsm {\n     pub volatile: bool,\n     pub alignstack: bool,\n     pub dialect: AsmDialect,\n-    pub expn_id: ExpnId,\n+    pub ctxt: SyntaxContext,\n }\n \n /// represents an argument in a function header\n@@ -1320,6 +1386,9 @@ pub struct FnDecl {\n     pub inputs: HirVec<P<Ty>>,\n     pub output: FunctionRetTy,\n     pub variadic: bool,\n+    /// True if this function has an `self`, `&self` or `&mut self` receiver\n+    /// (but not a `self: Xxx` one).\n+    pub has_implicit_self: bool,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "04a65fd5e3aa47c0a748993578135da24124bf5b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -1036,7 +1036,7 @@ impl<'a> State<'a> {\n                         word(&mut self.s, \" else if \")?;\n                         self.print_expr(&i)?;\n                         space(&mut self.s)?;\n-                        self.print_block(&then)?;\n+                        self.print_expr(&then)?;\n                         self.print_else(e.as_ref().map(|e| &**e))\n                     }\n                     // \"final else\"\n@@ -1058,13 +1058,13 @@ impl<'a> State<'a> {\n \n     pub fn print_if(&mut self,\n                     test: &hir::Expr,\n-                    blk: &hir::Block,\n+                    blk: &hir::Expr,\n                     elseopt: Option<&hir::Expr>)\n                     -> io::Result<()> {\n         self.head(\"if\")?;\n         self.print_expr(test)?;\n         space(&mut self.s)?;\n-        self.print_block(blk)?;\n+        self.print_expr(blk)?;\n         self.print_else(elseopt)\n     }\n "}, {"sha": "1278d9f5171b3be590be3880fd4804a4d6f7242a", "filename": "src/librustc/ich/caching_codemap_view.rs", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::TyCtxt;\n+use ty::TyCtxt;\n use std::rc::Rc;\n use syntax::codemap::CodeMap;\n use syntax_pos::{BytePos, FileMap};\n@@ -47,10 +47,6 @@ impl<'tcx> CachingCodemapView<'tcx> {\n         }\n     }\n \n-    pub fn codemap(&self) -> &'tcx CodeMap {\n-        self.codemap\n-    }\n-\n     pub fn byte_pos_to_line_and_col(&mut self,\n                                     pos: BytePos)\n                                     -> Option<(Rc<FileMap>, usize, BytePos)> {", "previous_filename": "src/librustc_incremental/calculate_svh/caching_codemap_view.rs"}, {"sha": "03051dc0034204a7dde4cc65c3882432c3070ef2", "filename": "src/librustc/ich/def_path_hash.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Fdef_path_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Fdef_path_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fdef_path_hash.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir::def_id::DefId;\n-use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::DefIdMap;\n+use hir::def_id::DefId;\n+use ty::TyCtxt;\n+use util::nodemap::DefIdMap;\n \n pub struct DefPathHashes<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,", "previous_filename": "src/librustc_incremental/calculate_svh/def_path_hash.rs"}, {"sha": "e760f7efc93d912645454213f9b42b5707836261", "filename": "src/librustc/ich/fingerprint.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -55,7 +55,7 @@ impl Fingerprint {\n impl Encodable for Fingerprint {\n     #[inline]\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        for &byte in &self.0[..] {\n+        for &byte in &self.0 {\n             s.emit_u8(byte)?;\n         }\n         Ok(())\n@@ -66,7 +66,7 @@ impl Decodable for Fingerprint {\n     #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Fingerprint, D::Error> {\n         let mut result = Fingerprint([0u8; FINGERPRINT_LENGTH]);\n-        for byte in &mut result.0[..] {\n+        for byte in &mut result.0 {\n             *byte = d.read_u8()?;\n         }\n         Ok(result)", "previous_filename": "src/librustc_incremental/ich/fingerprint.rs"}, {"sha": "209953f3c686b85b99c1f136d90a1bf6def1924c", "filename": "src/librustc/ich/mod.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use self::fingerprint::Fingerprint;\n+pub use self::def_path_hash::DefPathHashes;\n+pub use self::caching_codemap_view::CachingCodemapView;\n+\n+mod fingerprint;\n+mod def_path_hash;\n+mod caching_codemap_view;\n+\n+pub const ATTR_DIRTY: &'static str = \"rustc_dirty\";\n+pub const ATTR_CLEAN: &'static str = \"rustc_clean\";\n+pub const ATTR_DIRTY_METADATA: &'static str = \"rustc_metadata_dirty\";\n+pub const ATTR_CLEAN_METADATA: &'static str = \"rustc_metadata_clean\";\n+pub const ATTR_IF_THIS_CHANGED: &'static str = \"rustc_if_this_changed\";\n+pub const ATTR_THEN_THIS_WOULD_NEED: &'static str = \"rustc_then_this_would_need\";\n+\n+pub const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\n+    \"cfg\",\n+    ATTR_IF_THIS_CHANGED,\n+    ATTR_THEN_THIS_WOULD_NEED,\n+    ATTR_DIRTY,\n+    ATTR_CLEAN,\n+    ATTR_DIRTY_METADATA,\n+    ATTR_CLEAN_METADATA\n+];"}, {"sha": "9fa2bc8a2a7a96f5290c4be26adaaccdc78b3918", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -426,30 +426,26 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"note_issue_32330: terr={:?}\", terr);\n         match *terr {\n-            TypeError::RegionsInsufficientlyPolymorphic(_, &Region::ReVar(vid)) |\n-            TypeError::RegionsOverlyPolymorphic(_, &Region::ReVar(vid)) => {\n-                match self.region_vars.var_origin(vid) {\n-                    RegionVariableOrigin::EarlyBoundRegion(_, _, Some(Issue32330 {\n-                        fn_def_id,\n-                        region_name\n-                    })) => {\n-                        diag.note(\n-                            &format!(\"lifetime parameter `{0}` declared on fn `{1}` \\\n-                                      appears only in the return type, \\\n-                                      but here is required to be higher-ranked, \\\n-                                      which means that `{0}` must appear in both \\\n-                                      argument and return types\",\n-                                     region_name,\n-                                     self.tcx.item_path_str(fn_def_id)));\n-                        diag.note(\n-                            &format!(\"this error is the result of a recent bug fix; \\\n-                                      for more information, see issue #33685 \\\n-                                      <https://github.com/rust-lang/rust/issues/33685>\"));\n-                    }\n-                    _ => { }\n-                }\n+            TypeError::RegionsInsufficientlyPolymorphic(_, _, Some(box Issue32330 {\n+                fn_def_id, region_name\n+            })) |\n+            TypeError::RegionsOverlyPolymorphic(_, _, Some(box Issue32330 {\n+                fn_def_id, region_name\n+            })) => {\n+                diag.note(\n+                    &format!(\"lifetime parameter `{0}` declared on fn `{1}` \\\n+                              appears only in the return type, \\\n+                              but here is required to be higher-ranked, \\\n+                              which means that `{0}` must appear in both \\\n+                              argument and return types\",\n+                             region_name,\n+                             self.tcx.item_path_str(fn_def_id)));\n+                diag.note(\n+                    &format!(\"this error is the result of a recent bug fix; \\\n+                              for more information, see issue #33685 \\\n+                              <https://github.com/rust-lang/rust/issues/33685>\"));\n             }\n-            _ => { }\n+            _ => {}\n         }\n     }\n "}, {"sha": "e3ffc99c0e9677bc667494e388492c2201369aa3", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -15,6 +15,7 @@ use super::{CombinedSnapshot,\n             InferCtxt,\n             LateBoundRegion,\n             HigherRankedType,\n+            RegionVariableOrigin,\n             SubregionOrigin,\n             SkolemizationMap};\n use super::combine::CombineFields;\n@@ -656,14 +657,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        skol_br,\n                        tainted_region);\n \n+                let issue_32330 = if let &ty::ReVar(vid) = tainted_region {\n+                    match self.region_vars.var_origin(vid) {\n+                        RegionVariableOrigin::EarlyBoundRegion(_, _, issue_32330) => {\n+                            issue_32330.map(Box::new)\n+                        }\n+                        _ => None\n+                    }\n+                } else {\n+                    None\n+                };\n+\n                 if overly_polymorphic {\n                     debug!(\"Overly polymorphic!\");\n                     return Err(TypeError::RegionsOverlyPolymorphic(skol_br,\n-                                                                   tainted_region));\n+                                                                   tainted_region,\n+                                                                   issue_32330));\n                 } else {\n                     debug!(\"Not as polymorphic!\");\n                     return Err(TypeError::RegionsInsufficientlyPolymorphic(skol_br,\n-                                                                           tainted_region));\n+                                                                           tainted_region,\n+                                                                           issue_32330));\n                 }\n             }\n         }"}, {"sha": "67f37e5f9272e85c058beb616995a89dbd92b227", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -30,6 +30,7 @@ pub struct TypeVariableTable<'tcx> {\n }\n \n /// Reasons to create a type inference variable\n+#[derive(Debug)]\n pub enum TypeVariableOrigin {\n     MiscVariable(Span),\n     NormalizeProjectionType(Span),\n@@ -41,6 +42,7 @@ pub enum TypeVariableOrigin {\n     AdjustmentType(Span),\n     DivergingStmt(Span),\n     DivergingBlockExpr(Span),\n+    DivergingFn(Span),\n     LatticeVariable(Span),\n }\n \n@@ -196,14 +198,15 @@ impl<'tcx> TypeVariableTable<'tcx> {\n                    diverging: bool,\n                    origin: TypeVariableOrigin,\n                    default: Option<Default<'tcx>>,) -> ty::TyVid {\n+        debug!(\"new_var(diverging={:?}, origin={:?})\", diverging, origin);\n         self.eq_relations.new_key(());\n         let index = self.values.push(TypeVariableData {\n             value: Bounded { relations: vec![], default: default },\n             origin: origin,\n             diverging: diverging\n         });\n         let v = ty::TyVid { index: index as u32 };\n-        debug!(\"new_var() -> {:?}\", v);\n+        debug!(\"new_var: diverging={:?} index={:?}\", diverging, v);\n         v\n     }\n "}, {"sha": "294f80d7d2301b570787e74cb5b6db3cbf4ccc96", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -29,7 +29,6 @@\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(stage0,feature(field_init_shorthand))]\n #![feature(i128_type)]\n #![feature(libc)]\n #![feature(loop_break_value)]\n@@ -72,6 +71,7 @@ pub mod diagnostics;\n pub mod cfg;\n pub mod dep_graph;\n pub mod hir;\n+pub mod ich;\n pub mod infer;\n pub mod lint;\n "}, {"sha": "20bf241a99906e3afe1a5196fb29718bc88f9cc1", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -40,13 +40,13 @@ use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n use std::fmt;\n-use std::ops::Deref;\n use syntax::attr;\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::{MultiSpan, Span};\n+use syntax_pos::{DUMMY_SP, MultiSpan, Span};\n use errors::{self, Diagnostic, DiagnosticBuilder};\n use hir;\n+use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n \n@@ -484,7 +484,7 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n                 Allow => bug!(\"earlier conditional return should handle Allow case\")\n             };\n             let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n-            if lint_flag_val.as_str().deref() == name {\n+            if lint_flag_val.as_str() == name {\n                 err.note(&format!(\"requested on the command line with `{} {}`\",\n                                   flag, hyphen_case_lint_name));\n             } else {\n@@ -495,7 +495,7 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n         },\n         Node(lint_attr_name, src) => {\n             def = Some(src);\n-            if lint_attr_name.as_str().deref() != name {\n+            if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n                 err.note(&format!(\"#[{}({})] implied by #[{}({})]\",\n                                   level_str, name, level_str, lint_attr_name));\n@@ -1231,10 +1231,11 @@ fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,\n /// Perform lint checking on a crate.\n ///\n /// Consumes the `lint_store` field of the `Session`.\n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             access_levels: &AccessLevels) {\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::LateLintCheck);\n \n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+\n     let krate = tcx.hir.krate();\n \n     // We want to own the lint store, so move it out of the session."}, {"sha": "8bc0cf2577b5db05761ebbbf9a4b966875383605", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -176,7 +176,6 @@ pub trait CrateStore {\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n     fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;\n-    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>;\n \n     // trait info\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>;\n@@ -255,8 +254,8 @@ pub trait CrateStore {\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)>;\n     fn used_crate_source(&self, cnum: CrateNum) -> CrateSource;\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>;\n-    fn encode_metadata<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 reexports: &def::ExportMap,\n+    fn encode_metadata<'a, 'tcx>(&self,\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet) -> Vec<u8>;\n     fn metadata_encoding_version(&self) -> &[u8];\n@@ -310,7 +309,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"item_generics_cloned\") }\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { bug!(\"item_attrs\") }\n     fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name> { bug!(\"fn_arg_names\") }\n-    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId> { vec![] }\n \n     // trait info\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId> { vec![] }\n@@ -412,10 +410,10 @@ impl CrateStore for DummyCrateStore {\n         { vec![] }\n     fn used_crate_source(&self, cnum: CrateNum) -> CrateSource { bug!(\"used_crate_source\") }\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> { None }\n-    fn encode_metadata<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           reexports: &def::ExportMap,\n-                           link_meta: &LinkMeta,\n-                           reachable: &NodeSet) -> Vec<u8> { vec![] }\n+    fn encode_metadata<'a, 'tcx>(&self,\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 link_meta: &LinkMeta,\n+                                 reachable: &NodeSet) -> Vec<u8> { vec![] }\n     fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }\n }\n "}, {"sha": "8926ff5c1fbbb080dce5afbfe165418548395d66", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -21,12 +21,13 @@ use hir::itemlikevisit::ItemLikeVisitor;\n use middle::privacy;\n use ty::{self, TyCtxt};\n use hir::def::Def;\n-use hir::def_id::{DefId};\n+use hir::def_id::{DefId, LOCAL_CRATE};\n use lint;\n use util::nodemap::FxHashSet;\n \n use syntax::{ast, codemap};\n use syntax::attr;\n+use syntax::codemap::DUMMY_SP;\n use syntax_pos;\n \n // Any local node that may call something in its body block should be\n@@ -592,9 +593,9 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             access_levels: &privacy::AccessLevels) {\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::DeadCheck);\n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };"}, {"sha": "a10f52e2d4cc06457553dbb5d59a2a15f7dad5bc", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -288,6 +288,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn consume_body(&mut self, body: &hir::Body) {\n+        debug!(\"consume_body(body={:?})\", body);\n+\n         for arg in &body.arguments {\n             let arg_ty = return_if_err!(self.mc.infcx.node_ty(arg.pat.id));\n \n@@ -414,9 +416,9 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_exprs(exprs);\n             }\n \n-            hir::ExprIf(ref cond_expr, ref then_blk, ref opt_else_expr) => {\n+            hir::ExprIf(ref cond_expr, ref then_expr, ref opt_else_expr) => {\n                 self.consume_expr(&cond_expr);\n-                self.walk_block(&then_blk);\n+                self.walk_expr(&then_expr);\n                 if let Some(ref else_expr) = *opt_else_expr {\n                     self.consume_expr(&else_expr);\n                 }"}, {"sha": "7cae08efc0de057a14815832c82db859f5c907c7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -821,8 +821,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn propagate_through_block(&mut self, blk: &hir::Block, succ: LiveNode)\n                                -> LiveNode {\n-        if let Some(break_to_expr_id) = blk.break_to_expr_id {\n-            self.breakable_block_ln.insert(break_to_expr_id, succ);\n+        if blk.targeted_by_break {\n+            self.breakable_block_ln.insert(blk.id, succ);\n         }\n         let succ = self.propagate_through_opt_expr(blk.expr.as_ref().map(|e| &**e), succ);\n         blk.stmts.iter().rev().fold(succ, |succ, stmt| {\n@@ -951,7 +951,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             //   (  succ  )\n             //\n             let else_ln = self.propagate_through_opt_expr(els.as_ref().map(|e| &**e), succ);\n-            let then_ln = self.propagate_through_block(&then, succ);\n+            let then_ln = self.propagate_through_expr(&then, succ);\n             let ln = self.live_node(expr.id, expr.span);\n             self.init_from_succ(ln, else_ln);\n             self.merge_from_succ(ln, then_ln, false);"}, {"sha": "3b52e85e08e329c798316505a993f1ca9c267ba8", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 61, "deletions": 79, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -194,76 +194,75 @@ pub struct cmt_<'tcx> {\n \n pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n+pub enum ImmutabilityBlame<'tcx> {\n+    ImmLocal(ast::NodeId),\n+    ClosureEnv(ast::NodeId),\n+    LocalDeref(ast::NodeId),\n+    AdtFieldDeref(&'tcx ty::AdtDef, &'tcx ty::FieldDef)\n+}\n+\n impl<'tcx> cmt_<'tcx> {\n-    pub fn get_def(&self) -> Option<ast::NodeId> {\n-        match self.cat {\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Interior(ref cmt, _) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                if let Categorization::Local(nid) = cmt.cat {\n-                    Some(nid)\n-                } else {\n-                    None\n-                }\n+    fn resolve_field(&self, field_name: FieldName) -> (&'tcx ty::AdtDef, &'tcx ty::FieldDef)\n+    {\n+        let adt_def = self.ty.ty_adt_def().unwrap_or_else(|| {\n+            bug!(\"interior cmt {:?} is not an ADT\", self)\n+        });\n+        let variant_def = match self.cat {\n+            Categorization::Downcast(_, variant_did) => {\n+                adt_def.variant_with_id(variant_did)\n             }\n-            _ => None\n-        }\n+            _ => {\n+                assert!(adt_def.is_univariant());\n+                &adt_def.variants[0]\n+            }\n+        };\n+        let field_def = match field_name {\n+            NamedField(name) => variant_def.field_named(name),\n+            PositionalField(idx) => &variant_def.fields[idx]\n+        };\n+        (adt_def, field_def)\n     }\n \n-    pub fn get_field(&self, name: ast::Name) -> Option<DefId> {\n+    pub fn immutability_blame(&self) -> Option<ImmutabilityBlame<'tcx>> {\n         match self.cat {\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Interior(ref cmt, _) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                if let Categorization::Local(_) = cmt.cat {\n-                    if let ty::TyAdt(def, _) = self.ty.sty {\n-                        if def.is_struct() {\n-                            return def.struct_variant().find_field_named(name).map(|x| x.did);\n+            Categorization::Deref(ref base_cmt, _, BorrowedPtr(ty::ImmBorrow, _)) |\n+            Categorization::Deref(ref base_cmt, _, Implicit(ty::ImmBorrow, _)) => {\n+                // try to figure out where the immutable reference came from\n+                match base_cmt.cat {\n+                    Categorization::Local(node_id) =>\n+                        Some(ImmutabilityBlame::LocalDeref(node_id)),\n+                    Categorization::Interior(ref base_cmt, InteriorField(field_name)) => {\n+                        let (adt_def, field_def) = base_cmt.resolve_field(field_name);\n+                        Some(ImmutabilityBlame::AdtFieldDeref(adt_def, field_def))\n+                    }\n+                    Categorization::Upvar(Upvar { id, .. }) => {\n+                        if let NoteClosureEnv(..) = self.note {\n+                            Some(ImmutabilityBlame::ClosureEnv(id.closure_expr_id))\n+                        } else {\n+                            None\n                         }\n                     }\n-                    None\n-                } else {\n-                    cmt.get_field(name)\n+                    _ => None\n                 }\n             }\n-            _ => None\n-        }\n-    }\n-\n-    pub fn get_field_name(&self) -> Option<ast::Name> {\n-        match self.cat {\n-            Categorization::Interior(_, ref ik) => {\n-                if let InteriorKind::InteriorField(FieldName::NamedField(name)) = *ik {\n-                    Some(name)\n-                } else {\n-                    None\n-                }\n+            Categorization::Local(node_id) => {\n+                Some(ImmutabilityBlame::ImmLocal(node_id))\n             }\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                cmt.get_field_name()\n+            Categorization::Rvalue(..) |\n+            Categorization::Upvar(..) |\n+            Categorization::Deref(.., UnsafePtr(..)) => {\n+                // This should not be reachable up to inference limitations.\n+                None\n             }\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn get_arg_if_immutable(&self, map: &hir_map::Map) -> Option<ast::NodeId> {\n-        match self.cat {\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Interior(ref cmt, _) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                if let Categorization::Local(nid) = cmt.cat {\n-                    if let ty::TyAdt(_, _) = self.ty.sty {\n-                        if let ty::TyRef(_, ty::TypeAndMut{mutbl: MutImmutable, ..}) = cmt.ty.sty {\n-                            return Some(nid);\n-                        }\n-                    }\n-                    None\n-                } else {\n-                    cmt.get_arg_if_immutable(map)\n-                }\n+            Categorization::Interior(ref base_cmt, _) |\n+            Categorization::Downcast(ref base_cmt, _) |\n+            Categorization::Deref(ref base_cmt, _, _) => {\n+                base_cmt.immutability_blame()\n+            }\n+            Categorization::StaticItem => {\n+                // Do we want to do something here?\n+                None\n             }\n-            _ => None\n         }\n     }\n }\n@@ -1282,9 +1281,6 @@ pub enum Aliasability {\n #[derive(Copy, Clone, Debug)]\n pub enum AliasableReason {\n     AliasableBorrowed,\n-    AliasableClosure(ast::NodeId), // Aliasable due to capture Fn closure env\n-    AliasableOther,\n-    UnaliasableImmutable, // Created as needed upon seeing ImmutableUnique\n     AliasableStatic,\n     AliasableStaticMut,\n }\n@@ -1324,23 +1320,13 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Deref(ref b, _, Implicit(ty::MutBorrow, _)) |\n             Categorization::Deref(ref b, _, BorrowedPtr(ty::UniqueImmBorrow, _)) |\n             Categorization::Deref(ref b, _, Implicit(ty::UniqueImmBorrow, _)) |\n+            Categorization::Deref(ref b, _, Unique) |\n             Categorization::Downcast(ref b, _) |\n             Categorization::Interior(ref b, _) => {\n                 // Aliasability depends on base cmt\n                 b.freely_aliasable()\n             }\n \n-            Categorization::Deref(ref b, _, Unique) => {\n-                let sub = b.freely_aliasable();\n-                if b.mutbl.is_mutable() {\n-                    // Aliasability depends on base cmt alone\n-                    sub\n-                } else {\n-                    // Do not allow mutation through an immutable box.\n-                    ImmutableUnique(Box::new(sub))\n-                }\n-            }\n-\n             Categorization::Rvalue(..) |\n             Categorization::Local(..) |\n             Categorization::Upvar(..) |\n@@ -1356,13 +1342,9 @@ impl<'tcx> cmt_<'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(ref base, _, BorrowedPtr(ty::ImmBorrow, _)) |\n-            Categorization::Deref(ref base, _, Implicit(ty::ImmBorrow, _)) => {\n-                match base.cat {\n-                    Categorization::Upvar(Upvar{ id, .. }) =>\n-                        FreelyAliasable(AliasableClosure(id.closure_expr_id)),\n-                    _ => FreelyAliasable(AliasableBorrowed)\n-                }\n+            Categorization::Deref(_, _, BorrowedPtr(ty::ImmBorrow, _)) |\n+            Categorization::Deref(_, _, Implicit(ty::ImmBorrow, _)) => {\n+                FreelyAliasable(AliasableBorrowed)\n             }\n         }\n     }"}, {"sha": "b0e39442af98c9997f9885949d3b2e56e07d3178", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -27,7 +27,9 @@ use util::nodemap::{NodeSet, FxHashSet};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n+use syntax::codemap::DUMMY_SP;\n use hir;\n+use hir::def_id::LOCAL_CRATE;\n use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::itemlikevisit::ItemLikeVisitor;\n use hir::intravisit;\n@@ -359,11 +361,11 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n     }\n }\n \n-pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                access_levels: &privacy::AccessLevels)\n-                                -> NodeSet {\n+pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n     let _task = tcx.dep_graph.in_task(DepNode::Reachability);\n \n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+\n     let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||\n         *ty == config::CrateTypeProcMacro"}, {"sha": "0676075930dc3c99f28d4845126e6a1dcfec0617", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -236,7 +236,7 @@ impl CodeExtent {\n                         // (This is the special case aluded to in the\n                         // doc-comment for this method)\n                         let stmt_span = blk.stmts[r.first_statement_index as usize].span;\n-                        Some(Span { lo: stmt_span.hi, hi: blk.span.hi, expn_id: stmt_span.expn_id })\n+                        Some(Span { lo: stmt_span.hi, hi: blk.span.hi, ctxt: stmt_span.ctxt })\n                     }\n                 }\n             }"}, {"sha": "8037570d24a808bb6ab7983d85d4ae7c4686d400", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -434,7 +434,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             self.resolve_elided_lifetimes(slice::ref_slice(lifetime_ref));\n             return;\n         }\n-        if lifetime_ref.name == keywords::StaticLifetime.name() {\n+        if lifetime_ref.is_static() {\n             self.insert_lifetime(lifetime_ref, Region::Static);\n             return;\n         }\n@@ -1434,7 +1434,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             let lifetime_i = &lifetimes[i];\n \n             for lifetime in lifetimes {\n-                if lifetime.lifetime.name == keywords::StaticLifetime.name() {\n+                if lifetime.lifetime.is_static() {\n                     let lifetime = lifetime.lifetime;\n                     let mut err = struct_span_err!(self.sess, lifetime.span, E0262,\n                                   \"invalid lifetime parameter name: `{}`\", lifetime.name);\n@@ -1464,7 +1464,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             self.check_lifetime_def_for_shadowing(old_scope, &lifetime_i.lifetime);\n \n             for bound in &lifetime_i.bounds {\n-                self.resolve_lifetime_ref(bound);\n+                if !bound.is_static() {\n+                    self.resolve_lifetime_ref(bound);\n+                } else {\n+                    self.insert_lifetime(bound, Region::Static);\n+                    self.sess.struct_span_warn(lifetime_i.lifetime.span.to(bound.span),\n+                        &format!(\"unnecessary lifetime parameter `{}`\", lifetime_i.lifetime.name))\n+                        .help(&format!(\"you can use the `'static` lifetime directly, in place \\\n+                                        of `{}`\", lifetime_i.lifetime.name))\n+                        .emit();\n+                }\n             }\n         }\n     }"}, {"sha": "2b5ea61d4e85454a181d8cf8aeefb7c31b3db6fb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -467,7 +467,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) {\n-        if self.sess.codemap().span_allows_unstable(span) {\n+        if span.allows_unstable() {\n             debug!(\"stability: \\\n                     skipping span={:?} since it is internal\", span);\n             return;\n@@ -536,7 +536,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 if !self.stability.borrow().active_features.contains(feature) {\n                     let msg = match *reason {\n                         Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n-                                               &feature.as_str(), &r),\n+                                               feature.as_str(), &r),\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n                     emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n@@ -656,10 +656,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n /// Given the list of enabled features that were not language features (i.e. that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                 access_levels: &AccessLevels) {\n+pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n \n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+\n     if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n         let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();"}, {"sha": "01dc7f51e29d9938c2b63e36086094414dd2dad8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -983,16 +983,16 @@ impl<'tcx> Debug for Operand<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n-    pub fn item<'a>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-                    def_id: DefId,\n-                    substs: &'tcx Substs<'tcx>,\n-                    span: Span)\n-                    -> Self\n-    {\n+    pub fn function_handle<'a>(\n+        tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+        def_id: DefId,\n+        substs: &'tcx Substs<'tcx>,\n+        span: Span,\n+    ) -> Self {\n         Operand::Constant(Constant {\n             span: span,\n             ty: tcx.item_type(def_id).subst(tcx, substs),\n-            literal: Literal::Item { def_id, substs }\n+            literal: Literal::Value { value: ConstVal::Function(def_id, substs) },\n         })\n     }\n "}, {"sha": "a0603c5795247c75fb98911daae1c1b3c7ddd284", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -82,6 +82,7 @@ pub enum OutputType {\n     Bitcode,\n     Assembly,\n     LlvmAssembly,\n+    Mir,\n     Metadata,\n     Object,\n     Exe,\n@@ -96,6 +97,7 @@ impl OutputType {\n             OutputType::Bitcode |\n             OutputType::Assembly |\n             OutputType::LlvmAssembly |\n+            OutputType::Mir |\n             OutputType::Object |\n             OutputType::Metadata => false,\n         }\n@@ -106,6 +108,7 @@ impl OutputType {\n             OutputType::Bitcode => \"llvm-bc\",\n             OutputType::Assembly => \"asm\",\n             OutputType::LlvmAssembly => \"llvm-ir\",\n+            OutputType::Mir => \"mir\",\n             OutputType::Object => \"obj\",\n             OutputType::Metadata => \"metadata\",\n             OutputType::Exe => \"link\",\n@@ -118,6 +121,7 @@ impl OutputType {\n             OutputType::Bitcode => \"bc\",\n             OutputType::Assembly => \"s\",\n             OutputType::LlvmAssembly => \"ll\",\n+            OutputType::Mir => \"mir\",\n             OutputType::Object => \"o\",\n             OutputType::Metadata => \"rmeta\",\n             OutputType::DepInfo => \"d\",\n@@ -172,6 +176,7 @@ impl OutputTypes {\n             OutputType::Bitcode |\n             OutputType::Assembly |\n             OutputType::LlvmAssembly |\n+            OutputType::Mir |\n             OutputType::Object |\n             OutputType::Exe => true,\n             OutputType::Metadata |\n@@ -1370,6 +1375,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n                 let output_type = match parts.next().unwrap() {\n                     \"asm\" => OutputType::Assembly,\n                     \"llvm-ir\" => OutputType::LlvmAssembly,\n+                    \"mir\" => OutputType::Mir,\n                     \"llvm-bc\" => OutputType::Bitcode,\n                     \"obj\" => OutputType::Object,\n                     \"metadata\" => OutputType::Metadata,"}, {"sha": "152dd6ac3000f71f8b6beb69a5525b64350cd3ff", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -904,6 +904,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::StartFunctionType |\n             ObligationCauseCode::IntrinsicType |\n             ObligationCauseCode::MethodReceiver |\n+            ObligationCauseCode::ReturnNoExpression |\n             ObligationCauseCode::MiscObligation => {\n             }\n             ObligationCauseCode::SliceOrArrayElem => {"}, {"sha": "47cbccdd2ab107ef673483a8e201cf88ead77ce4", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -173,6 +173,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     // method receiver\n     MethodReceiver,\n+\n+    // `return` with no expression\n+    ReturnNoExpression,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]"}, {"sha": "7cd0b26940d9118284e3adcc03b35a3fda36972d", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -46,7 +46,7 @@ impl ObjectSafetyViolation {\n                 \"the trait cannot require that `Self : Sized`\".into(),\n             ObjectSafetyViolation::SupertraitSelf =>\n                 \"the trait cannot use `Self` as a type parameter \\\n-                 in the supertrait listing\".into(),\n+                 in the supertraits or where-clauses\".into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod) =>\n                 format!(\"method `{}` has no receiver\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>"}, {"sha": "44ef461327ddbf868837dd5b2b00559a3af4528e", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -167,6 +167,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n     type Lifted = traits::ObligationCauseCode<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n+            super::ReturnNoExpression => Some(super::ReturnNoExpression),\n             super::MiscObligation => Some(super::MiscObligation),\n             super::SliceOrArrayElem => Some(super::SliceOrArrayElem),\n             super::TupleElem => Some(super::TupleElem),\n@@ -489,6 +490,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::StructInitializerSized |\n             super::VariableType(_) |\n             super::ReturnType |\n+            super::ReturnNoExpression |\n             super::RepeatVec |\n             super::FieldSized |\n             super::ConstSized |\n@@ -533,6 +535,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::StructInitializerSized |\n             super::VariableType(_) |\n             super::ReturnType |\n+            super::ReturnNoExpression |\n             super::RepeatVec |\n             super::FieldSized |\n             super::ConstSized |"}, {"sha": "d8ca30477205c53ccfcfd0e5bc61dab9c16828ae", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -139,6 +139,21 @@ pub enum AutoBorrow<'tcx> {\n     RawPtr(hir::Mutability),\n }\n \n+/// Information for `CoerceUnsized` impls, storing information we\n+/// have computed about the coercion.\n+///\n+/// This struct can be obtained via the `coerce_impl_info` query.\n+/// Demanding this struct also has the side-effect of reporting errors\n+/// for inappropriate impls.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub struct CoerceUnsizedInfo {\n+    /// If this is a \"custom coerce\" impl, then what kind of custom\n+    /// coercion is it? This applies to impls of `CoerceUnsized` for\n+    /// structs, primarily, where we store a bit of info about which\n+    /// fields need to be coerced.\n+    pub custom_kind: Option<CustomCoerceUnsized>\n+}\n+\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub enum CustomCoerceUnsized {\n     /// Records the index of the field being coerced."}, {"sha": "da56514ea82fbf9e485c3f1f761ff9253f9b54cc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -15,7 +15,7 @@ use session::Session;\n use lint;\n use middle;\n use hir::TraitMap;\n-use hir::def::Def;\n+use hir::def::{Def, ExportMap};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DisambiguatedDefPathData;\n@@ -416,6 +416,9 @@ pub struct GlobalCtxt<'tcx> {\n     /// is relevant; generated by resolve.\n     pub trait_map: TraitMap,\n \n+    /// Export map produced by name resolution.\n+    pub export_map: ExportMap,\n+\n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n     pub region_maps: RegionMaps,\n@@ -698,6 +701,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             region_maps: region_maps,\n             variance_computed: Cell::new(false),\n             trait_map: resolutions.trait_map,\n+            export_map: resolutions.export_map,\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             hir: hir,\n             maps: maps::Maps::new(dep_graph, providers),"}, {"sha": "73d9c8b00ae472656765a3e2dd892df1b9720903", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -39,8 +39,8 @@ pub enum TypeError<'tcx> {\n     RegionsDoesNotOutlive(&'tcx Region, &'tcx Region),\n     RegionsNotSame(&'tcx Region, &'tcx Region),\n     RegionsNoOverlap(&'tcx Region, &'tcx Region),\n-    RegionsInsufficientlyPolymorphic(BoundRegion, &'tcx Region),\n-    RegionsOverlyPolymorphic(BoundRegion, &'tcx Region),\n+    RegionsInsufficientlyPolymorphic(BoundRegion, &'tcx Region, Option<Box<ty::Issue32330>>),\n+    RegionsOverlyPolymorphic(BoundRegion, &'tcx Region, Option<Box<ty::Issue32330>>),\n     Sorts(ExpectedFound<Ty<'tcx>>),\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n     FloatMismatch(ExpectedFound<ast::FloatTy>),\n@@ -116,11 +116,11 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             RegionsNoOverlap(..) => {\n                 write!(f, \"lifetimes do not intersect\")\n             }\n-            RegionsInsufficientlyPolymorphic(br, _) => {\n+            RegionsInsufficientlyPolymorphic(br, _, _) => {\n                 write!(f, \"expected bound lifetime parameter {}, \\\n                            found concrete lifetime\", br)\n             }\n-            RegionsOverlyPolymorphic(br, _) => {\n+            RegionsOverlyPolymorphic(br, _, _) => {\n                 write!(f, \"expected concrete lifetime, \\\n                            found bound lifetime parameter {}\", br)\n             }\n@@ -253,15 +253,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 self.note_and_explain_region(db, \"...does not overlap \",\n                                            region2, \"\");\n             }\n-            RegionsInsufficientlyPolymorphic(_, conc_region) => {\n+            RegionsInsufficientlyPolymorphic(_, conc_region, _) => {\n                 self.note_and_explain_region(db, \"concrete lifetime that was found is \",\n                                            conc_region, \"\");\n             }\n-            RegionsOverlyPolymorphic(_, &ty::ReVar(_)) => {\n+            RegionsOverlyPolymorphic(_, &ty::ReVar(_), _) => {\n                 // don't bother to print out the message below for\n                 // inference variables, it's not very illuminating.\n             }\n-            RegionsOverlyPolymorphic(_, conc_region) => {\n+            RegionsOverlyPolymorphic(_, conc_region, _) => {\n                 self.note_and_explain_region(db, \"expected concrete lifetime is \",\n                                            conc_region, \"\");\n             }"}, {"sha": "38699105290551e97d7a344ca5d1ff75db8cf532", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -202,7 +202,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             // for local crates, check whether type info is\n             // available; typeck might not have completed yet\n-            self.maps.impl_trait_ref.borrow().contains_key(&impl_def_id)\n+            self.maps.impl_trait_ref.borrow().contains_key(&impl_def_id) &&\n+                self.maps.ty.borrow().contains_key(&impl_def_id)\n         };\n \n         if !use_types {"}, {"sha": "4a183191cef29c70c82920b26f1873cf04e37c73", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -11,8 +11,10 @@\n use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use middle::const_val::ConstVal;\n+use middle::privacy::AccessLevels;\n use mir;\n-use ty::{self, Ty, TyCtxt};\n+use session::CompileResult;\n+use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n \n use rustc_data_structures::indexed_vec::IndexVec;\n use std::cell::{RefCell, RefMut};\n@@ -176,9 +178,15 @@ impl<'tcx> QueryDescription for queries::coherent_trait<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::coherent_inherent_impls<'tcx> {\n+impl<'tcx> QueryDescription for queries::crate_inherent_impls<'tcx> {\n+    fn describe(_: TyCtxt, k: CrateNum) -> String {\n+        format!(\"all inherent impls defined in crate `{:?}`\", k)\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::crate_inherent_impls_overlap_check<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n-        format!(\"coherence checking all inherent impls\")\n+        format!(\"check for overlap between inherent impls defined in this crate\")\n     }\n }\n \n@@ -189,6 +197,19 @@ impl<'tcx> QueryDescription for queries::mir_shims<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::privacy_access_levels<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        format!(\"privacy access levels\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::typeck_item_bodies<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        format!(\"type-checking all item bodies\")\n+    }\n+}\n+\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -368,7 +389,7 @@ define_maps! { <'tcx>\n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n     /// Methods in these implementations don't need to be exported.\n-    pub inherent_impls: InherentImpls(DefId) -> Vec<DefId>,\n+    pub inherent_impls: InherentImpls(DefId) -> Rc<Vec<DefId>>,\n \n     /// Maps from the def-id of a function/method or const/static\n     /// to its MIR. Mutation is done at an item granularity to\n@@ -393,30 +414,47 @@ define_maps! { <'tcx>\n     pub closure_type: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n \n     /// Caches CoerceUnsized kinds for impls on custom types.\n-    pub custom_coerce_unsized_kind: ItemSignature(DefId)\n-        -> ty::adjustment::CustomCoerceUnsized,\n+    pub coerce_unsized_info: ItemSignature(DefId)\n+        -> ty::adjustment::CoerceUnsizedInfo,\n+\n+    pub typeck_item_bodies: typeck_item_bodies_dep_node(CrateNum) -> CompileResult,\n \n     pub typeck_tables: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n \n     pub coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n \n-    pub coherent_inherent_impls: coherent_inherent_impls_dep_node(CrateNum) -> (),\n+    /// Gets a complete map from all types to their inherent impls.\n+    /// Not meant to be used directly outside of coherence.\n+    /// (Defined only for LOCAL_CRATE)\n+    pub crate_inherent_impls: crate_inherent_impls_dep_node(CrateNum) -> CrateInherentImpls,\n+\n+    /// Checks all types in the krate for overlap in their inherent impls. Reports errors.\n+    /// Not meant to be used directly outside of coherence.\n+    /// (Defined only for LOCAL_CRATE)\n+    pub crate_inherent_impls_overlap_check: crate_inherent_impls_dep_node(CrateNum) -> (),\n \n     /// Results of evaluating monomorphic constants embedded in\n     /// other items, such as enum variant explicit discriminants.\n     pub monomorphic_const_eval: MonomorphicConstEval(DefId) -> Result<ConstVal<'tcx>, ()>,\n \n+    /// Performs the privacy check and computes \"access levels\".\n+    pub privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n+\n     pub mir_shims: mir_shim(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n     DepNode::CoherenceCheckTrait(def_id)\n }\n \n-fn coherent_inherent_impls_dep_node(_: CrateNum) -> DepNode<DefId> {\n+fn crate_inherent_impls_dep_node(_: CrateNum) -> DepNode<DefId> {\n     DepNode::Coherence\n }\n \n fn mir_shim(instance: ty::InstanceDef) -> DepNode<DefId> {\n     instance.dep_node()\n }\n+\n+fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n+    DepNode::TypeckBodiesKrate\n+}"}, {"sha": "6a4e7db21dd127d2d20bf57cb32a2517e4b1d0d1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 65, "deletions": 83, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -17,11 +17,11 @@ pub use self::fold::TypeFoldable;\n \n use dep_graph::{self, DepNode};\n use hir::{map as hir_map, FreevarMap, TraitMap};\n-use middle;\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n+use middle::privacy::AccessLevels;\n use middle::region::{CodeExtent, ROOT_CODE_EXTENT};\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n@@ -31,7 +31,7 @@ use ty::subst::{Subst, Substs};\n use ty::util::IntTypeExt;\n use ty::walk::TypeWalker;\n use util::common::MemoizationMap;\n-use util::nodemap::{NodeSet, FxHashMap};\n+use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n \n use serialize::{self, Encodable, Encoder};\n use std::borrow::Cow;\n@@ -108,10 +108,12 @@ mod sty;\n \n /// The complete set of all analyses described in this module. This is\n /// produced by the driver and fed to trans and later passes.\n+///\n+/// NB: These contents are being migrated into queries using the\n+/// *on-demand* infrastructure.\n #[derive(Clone)]\n pub struct CrateAnalysis {\n-    pub export_map: ExportMap,\n-    pub access_levels: middle::privacy::AccessLevels,\n+    pub access_levels: Rc<AccessLevels>,\n     pub reachable: NodeSet,\n     pub name: String,\n     pub glob_map: Option<hir::GlobMap>,\n@@ -122,6 +124,7 @@ pub struct Resolutions {\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n+    pub export_map: ExportMap,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n@@ -2054,60 +2057,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    pub fn custom_coerce_unsized_kind(self, did: DefId) -> adjustment::CustomCoerceUnsized {\n-        queries::custom_coerce_unsized_kind::get(self, DUMMY_SP, did)\n+    pub fn coerce_unsized_info(self, did: DefId) -> adjustment::CoerceUnsizedInfo {\n+        queries::coerce_unsized_info::get(self, DUMMY_SP, did)\n     }\n \n     pub fn associated_item(self, def_id: DefId) -> AssociatedItem {\n-        if !def_id.is_local() {\n-            return queries::associated_item::get(self, DUMMY_SP, def_id);\n-        }\n-\n-        self.maps.associated_item.memoize(def_id, || {\n-            // When the user asks for a given associated item, we\n-            // always go ahead and convert all the associated items in\n-            // the container. Note that we are also careful only to\n-            // ever register a read on the *container* of the assoc\n-            // item, not the assoc item itself. This prevents changes\n-            // in the details of an item (for example, the type to\n-            // which an associated type is bound) from contaminating\n-            // those tasks that just need to scan the names of items\n-            // and so forth.\n-\n-            let id = self.hir.as_local_node_id(def_id).unwrap();\n-            let parent_id = self.hir.get_parent(id);\n-            let parent_def_id = self.hir.local_def_id(parent_id);\n-            let parent_item = self.hir.expect_item(parent_id);\n-            match parent_item.node {\n-                hir::ItemImpl(.., ref impl_trait_ref, _, ref impl_item_refs) => {\n-                    for impl_item_ref in impl_item_refs {\n-                        let assoc_item =\n-                            self.associated_item_from_impl_item_ref(parent_def_id,\n-                                                                    impl_trait_ref.is_some(),\n-                                                                    impl_item_ref);\n-                        self.maps.associated_item.borrow_mut()\n-                            .insert(assoc_item.def_id, assoc_item);\n-                    }\n-                }\n-\n-                hir::ItemTrait(.., ref trait_item_refs) => {\n-                    for trait_item_ref in trait_item_refs {\n-                        let assoc_item =\n-                            self.associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n-                        self.maps.associated_item.borrow_mut()\n-                            .insert(assoc_item.def_id, assoc_item);\n-                    }\n-                }\n-\n-                ref r => {\n-                    panic!(\"unexpected container of associated items: {:?}\", r)\n-                }\n-            }\n-\n-            // memoize wants us to return something, so return\n-            // the one we generated for this def-id\n-            *self.maps.associated_item.borrow().get(&def_id).unwrap()\n-        })\n+        queries::associated_item::get(self, DUMMY_SP, def_id)\n     }\n \n     fn associated_item_from_trait_item_ref(self,\n@@ -2393,34 +2348,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         def.flags.get().intersects(TraitFlags::HAS_DEFAULT_IMPL)\n     }\n \n-    /// Populates the type context with all the inherent implementations for\n-    /// the given type if necessary.\n-    pub fn populate_inherent_implementations_for_type_if_necessary(self,\n-                                                                   span: Span,\n-                                                                   type_id: DefId) {\n-        if type_id.is_local() {\n-            // Make sure coherence of inherent impls ran already.\n-            ty::queries::coherent_inherent_impls::force(self, span, LOCAL_CRATE);\n-            return\n-        }\n-\n-        // The type is not local, hence we are reading this out of\n-        // metadata and don't need to track edges.\n-        let _ignore = self.dep_graph.in_ignore();\n-\n-        if self.populated_external_types.borrow().contains(&type_id) {\n-            return\n-        }\n-\n-        debug!(\"populate_inherent_implementations_for_type_if_necessary: searching for {:?}\",\n-               type_id);\n-\n-        let inherent_impls = self.sess.cstore.inherent_implementations_for_type(type_id);\n-\n-        self.maps.inherent_impls.borrow_mut().insert(type_id, inherent_impls);\n-        self.populated_external_types.borrow_mut().insert(type_id);\n-    }\n-\n     /// Populates the type context with all the implementations for the given\n     /// trait if necessary.\n     pub fn populate_implementations_for_trait_if_necessary(self, trait_id: DefId) {\n@@ -2643,3 +2570,58 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n }\n+\n+fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n+    -> AssociatedItem\n+{\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    let parent_id = tcx.hir.get_parent(id);\n+    let parent_def_id = tcx.hir.local_def_id(parent_id);\n+    let parent_item = tcx.hir.expect_item(parent_id);\n+    match parent_item.node {\n+        hir::ItemImpl(.., ref impl_trait_ref, _, ref impl_item_refs) => {\n+            if let Some(impl_item_ref) = impl_item_refs.iter().find(|i| i.id.node_id == id) {\n+                let assoc_item =\n+                    tcx.associated_item_from_impl_item_ref(parent_def_id,\n+                                                            impl_trait_ref.is_some(),\n+                                                            impl_item_ref);\n+                debug_assert_eq!(assoc_item.def_id, def_id);\n+                return assoc_item;\n+            }\n+        }\n+\n+        hir::ItemTrait(.., ref trait_item_refs) => {\n+            if let Some(trait_item_ref) = trait_item_refs.iter().find(|i| i.id.node_id == id) {\n+                let assoc_item =\n+                    tcx.associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n+                debug_assert_eq!(assoc_item.def_id, def_id);\n+                return assoc_item;\n+            }\n+        }\n+\n+        ref r => {\n+            panic!(\"unexpected container of associated items: {:?}\", r)\n+        }\n+    }\n+    panic!(\"associated item not found for def_id: {:?}\", def_id);\n+}\n+\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    *providers = ty::maps::Providers {\n+        associated_item,\n+        ..*providers\n+    };\n+}\n+\n+\n+/// A map for the local crate mapping each type to a vector of its\n+/// inherent impls. This is not meant to be used outside of coherence;\n+/// rather, you should request the vector for a specific type via\n+/// `ty::queries::inherent_impls::get(def_id)` so as to minimize your\n+/// dependencies (constructing this map requires touching the entire\n+/// crate).\n+#[derive(Clone, Debug)]\n+pub struct CrateInherentImpls {\n+    pub inherent_impls: DefIdMap<Rc<Vec<DefId>>>,\n+}\n+"}, {"sha": "9126600e3f65393d2eff900e06bcbd077535be8d", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -293,11 +293,13 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             RegionsNoOverlap(a, b) => {\n                 return tcx.lift(&(a, b)).map(|(a, b)| RegionsNoOverlap(a, b))\n             }\n-            RegionsInsufficientlyPolymorphic(a, b) => {\n-                return tcx.lift(&b).map(|b| RegionsInsufficientlyPolymorphic(a, b))\n+            RegionsInsufficientlyPolymorphic(a, b, ref c) => {\n+                let c = c.clone();\n+                return tcx.lift(&b).map(|b| RegionsInsufficientlyPolymorphic(a, b, c))\n             }\n-            RegionsOverlyPolymorphic(a, b) => {\n-                return tcx.lift(&b).map(|b| RegionsOverlyPolymorphic(a, b))\n+            RegionsOverlyPolymorphic(a, b, ref c) => {\n+                let c = c.clone();\n+                return tcx.lift(&b).map(|b| RegionsOverlyPolymorphic(a, b, c))\n             }\n             IntMismatch(x) => IntMismatch(x),\n             FloatMismatch(x) => FloatMismatch(x),"}, {"sha": "1c1e0d91cb4d6cd0deac1c46b955ef7a43feae9b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -509,18 +509,21 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n     }\n \n     fn visit_region(&mut self, r: &'tcx ty::Region) -> bool {\n+        self.hash_discriminant_u8(r);\n         match *r {\n-            ty::ReErased => {\n-                self.hash::<u32>(0);\n+            ty::ReErased |\n+            ty::ReStatic |\n+            ty::ReEmpty => {\n+                // No variant fields to hash for these ...\n             }\n             ty::ReLateBound(db, ty::BrAnon(i)) => {\n-                assert!(db.depth > 0);\n-                self.hash::<u32>(db.depth);\n+                self.hash(db.depth);\n                 self.hash(i);\n             }\n-            ty::ReStatic |\n-            ty::ReEmpty |\n-            ty::ReEarlyBound(..) |\n+            ty::ReEarlyBound(ty::EarlyBoundRegion { index, name }) => {\n+                self.hash(index);\n+                self.hash(name.as_str());\n+            }\n             ty::ReLateBound(..) |\n             ty::ReFree(..) |\n             ty::ReScope(..) |"}, {"sha": "54941362e845091861e06dba9cabea1e9310cdc2", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n-#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![sanitizer_runtime]\n+#![feature(sanitizer_runtime)]\n #![feature(alloc_system)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "730abc54568e1364e12747db4329b8caea0acd1d", "filename": "src/librustc_back/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_back%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_back%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -11,7 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n syntax = { path = \"../libsyntax\" }\n serialize = { path = \"../libserialize\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n \n [features]\n jemalloc = []"}, {"sha": "af99c0e938724d95023ff8c3831fdbb6e3d44670", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }"}, {"sha": "b728d4d534516672e436312a336f40f627017943", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -267,11 +267,11 @@ pub fn fixup_fragment_sets<'a, 'tcx>(this: &MoveData<'tcx>, tcx: TyCtxt<'a, 'tcx\n     // First, filter out duplicates\n     moved.sort();\n     moved.dedup();\n-    debug!(\"fragments 1 moved: {:?}\", path_lps(&moved[..]));\n+    debug!(\"fragments 1 moved: {:?}\", path_lps(&moved));\n \n     assigned.sort();\n     assigned.dedup();\n-    debug!(\"fragments 1 assigned: {:?}\", path_lps(&assigned[..]));\n+    debug!(\"fragments 1 assigned: {:?}\", path_lps(&assigned));\n \n     // Second, build parents from the moved and assigned.\n     for m in &moved {\n@@ -291,14 +291,14 @@ pub fn fixup_fragment_sets<'a, 'tcx>(this: &MoveData<'tcx>, tcx: TyCtxt<'a, 'tcx\n \n     parents.sort();\n     parents.dedup();\n-    debug!(\"fragments 2 parents: {:?}\", path_lps(&parents[..]));\n+    debug!(\"fragments 2 parents: {:?}\", path_lps(&parents));\n \n     // Third, filter the moved and assigned fragments down to just the non-parents\n-    moved.retain(|f| non_member(*f, &parents[..]));\n-    debug!(\"fragments 3 moved: {:?}\", path_lps(&moved[..]));\n+    moved.retain(|f| non_member(*f, &parents));\n+    debug!(\"fragments 3 moved: {:?}\", path_lps(&moved));\n \n-    assigned.retain(|f| non_member(*f, &parents[..]));\n-    debug!(\"fragments 3 assigned: {:?}\", path_lps(&assigned[..]));\n+    assigned.retain(|f| non_member(*f, &parents));\n+    debug!(\"fragments 3 assigned: {:?}\", path_lps(&assigned));\n \n     // Fourth, build the leftover from the moved, assigned, and parents.\n     for m in &moved {\n@@ -316,16 +316,16 @@ pub fn fixup_fragment_sets<'a, 'tcx>(this: &MoveData<'tcx>, tcx: TyCtxt<'a, 'tcx\n \n     unmoved.sort();\n     unmoved.dedup();\n-    debug!(\"fragments 4 unmoved: {:?}\", frag_lps(&unmoved[..]));\n+    debug!(\"fragments 4 unmoved: {:?}\", frag_lps(&unmoved));\n \n     // Fifth, filter the leftover fragments down to its core.\n     unmoved.retain(|f| match *f {\n         AllButOneFrom(_) => true,\n-        Just(mpi) => non_member(mpi, &parents[..]) &&\n-            non_member(mpi, &moved[..]) &&\n-            non_member(mpi, &assigned[..])\n+        Just(mpi) => non_member(mpi, &parents) &&\n+            non_member(mpi, &moved) &&\n+            non_member(mpi, &assigned)\n     });\n-    debug!(\"fragments 5 unmoved: {:?}\", frag_lps(&unmoved[..]));\n+    debug!(\"fragments 5 unmoved: {:?}\", frag_lps(&unmoved));\n \n     // Swap contents back in.\n     fragments.unmoved_fragments = unmoved;"}, {"sha": "cedb9e1cd1cfffc6c1b0df1b98cc60dcd6ec0982", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -188,14 +188,6 @@ fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             // user knows what they're doing in these cases.\n             Ok(())\n         }\n-        (mc::Aliasability::ImmutableUnique(_), ty::MutBorrow) => {\n-            bccx.report_aliasability_violation(\n-                        borrow_span,\n-                        loan_cause,\n-                        mc::AliasableReason::UnaliasableImmutable,\n-                        cmt);\n-            Err(())\n-        }\n         (mc::Aliasability::FreelyAliasable(alias_cause), ty::UniqueImmBorrow) |\n         (mc::Aliasability::FreelyAliasable(alias_cause), ty::MutBorrow) => {\n             bccx.report_aliasability_violation(\n@@ -510,4 +502,3 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         self.move_error_collector.report_potential_errors(self.bccx);\n     }\n }\n-"}, {"sha": "0915c57b588eb1a7c2c33b091682fd4fce4790e7", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 138, "deletions": 112, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -34,6 +34,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n+use rustc::middle::mem_categorization::ImmutabilityBlame;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n \n@@ -112,7 +113,7 @@ fn borrowck_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, body_id: hir::BodyId) {\n                                                  &flowed_moves.move_data,\n                                                  owner_id);\n \n-    check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans[..], body);\n+    check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans, body);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n@@ -659,12 +660,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx.sess.span_err_with_code(s, msg, code);\n     }\n \n-    pub fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n+    fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n         let span = err.span.clone();\n-        let mut immutable_field = None;\n-        let mut local_def = None;\n \n-        let msg = &match err.code {\n+        let msg = match err.code {\n             err_mutbl => {\n                 let descr = match err.cmt.note {\n                     mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n@@ -700,27 +699,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     BorrowViolation(euv::AutoUnsafe) |\n                     BorrowViolation(euv::ForLoop) |\n                     BorrowViolation(euv::MatchDiscriminant) => {\n-                        // Check for this field's definition to see if it is an immutable reference\n-                        // and suggest making it mutable if that is the case.\n-                        immutable_field = err.cmt.get_field_name()\n-                            .and_then(|name| err.cmt.get_field(name))\n-                            .and_then(|did| self.tcx.hir.as_local_node_id(did))\n-                            .and_then(|nid| {\n-                                if let hir_map::Node::NodeField(ref field) = self.tcx.hir.get(nid) {\n-                                    return self.suggest_mut_for_immutable(&field.ty)\n-                                        .map(|msg| (self.tcx.hir.span(nid), msg));\n-                                }\n-                                None\n-                            });\n-                        local_def = err.cmt.get_def()\n-                            .and_then(|nid| {\n-                                if !self.tcx.hir.is_argument(nid) {\n-                                    Some(self.tcx.hir.span(nid))\n-                                } else {\n-                                    None\n-                                }\n-                            });\n-\n                         format!(\"cannot borrow {} as mutable\", descr)\n                     }\n                     BorrowViolation(euv::ClosureInvocation) => {\n@@ -746,16 +724,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let mut db = self.struct_span_err(span, msg);\n-        if let Some((span, msg)) = immutable_field {\n-            db.span_label(span, &msg);\n-        }\n-        if let Some(let_span) = local_def {\n-            if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(let_span) {\n-                db.span_label(let_span, &format!(\"consider changing this to `mut {}`\", snippet));\n-            }\n-        }\n-        db\n+        self.struct_span_err(span, &msg)\n     }\n \n     pub fn report_aliasability_violation(&self,\n@@ -788,55 +757,49 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let mut err = match cause {\n-            mc::AliasableOther => {\n-                struct_span_err!(\n-                    self.tcx.sess, span, E0385,\n-                    \"{} in an aliasable location\", prefix)\n-            }\n-            mc::AliasableReason::UnaliasableImmutable => {\n-                struct_span_err!(\n-                    self.tcx.sess, span, E0386,\n-                    \"{} in an immutable container\", prefix)\n+        match cause {\n+            mc::AliasableStatic |\n+            mc::AliasableStaticMut => {\n+                // This path cannot occur. It happens when we have an\n+                // `&mut` or assignment to a static. But in the case\n+                // of `static X`, we get a mutability violation first,\n+                // and never get here. In the case of `static mut X`,\n+                // that is unsafe and hence the aliasability error is\n+                // ignored.\n+                span_bug!(span, \"aliasability violation for static `{}`\", prefix)\n             }\n-            mc::AliasableClosure(id) => {\n+            mc::AliasableBorrowed => {}\n+        };\n+        let blame = cmt.immutability_blame();\n+        let mut err = match blame {\n+            Some(ImmutabilityBlame::ClosureEnv(id)) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess, span, E0387,\n                     \"{} in a captured outer variable in an `Fn` closure\", prefix);\n-                if let BorrowViolation(euv::ClosureCapture(_)) = kind {\n+\n+                // FIXME: the distinction between these 2 messages looks wrong.\n+                let help = if let BorrowViolation(euv::ClosureCapture(_)) = kind {\n                     // The aliasability violation with closure captures can\n                     // happen for nested closures, so we know the enclosing\n                     // closure incorrectly accepts an `Fn` while it needs to\n                     // be `FnMut`.\n-                    span_help!(&mut err, self.tcx.hir.span(id),\n-                           \"consider changing this to accept closures that implement `FnMut`\");\n+                    \"consider changing this to accept closures that implement `FnMut`\"\n+\n                 } else {\n-                    span_help!(&mut err, self.tcx.hir.span(id),\n-                           \"consider changing this closure to take self by mutable reference\");\n-                }\n+                    \"consider changing this closure to take self by mutable reference\"\n+                };\n+                err.span_help(self.tcx.hir.span(id), help);\n                 err\n             }\n-            mc::AliasableStatic |\n-            mc::AliasableStaticMut => {\n-                // This path cannot occur. It happens when we have an\n-                // `&mut` or assignment to a static. But in the case\n-                // of `static X`, we get a mutability violation first,\n-                // and never get here. In the case of `static mut X`,\n-                // that is unsafe and hence the aliasability error is\n-                // ignored.\n-                span_bug!(span, \"aliasability violation for static `{}`\", prefix)\n-            }\n-            mc::AliasableBorrowed => {\n-                let mut e = struct_span_err!(\n+            _ =>  {\n+                let mut err = struct_span_err!(\n                     self.tcx.sess, span, E0389,\n                     \"{} in a `&` reference\", prefix);\n-                e.span_label(span, &\"assignment into an immutable reference\");\n-                if let Some(nid) = cmt.get_arg_if_immutable(&self.tcx.hir) {\n-                    self.immutable_argument_should_be_mut(nid, &mut e);\n-                }\n-                e\n+                err.span_label(span, &\"assignment into an immutable reference\");\n+                err\n             }\n         };\n+        self.note_immutability_blame(&mut err, blame);\n \n         if is_closure {\n             err.help(\"closures behind references must be called via `&mut`\");\n@@ -845,49 +808,124 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     }\n \n     /// Given a type, if it is an immutable reference, return a suggestion to make it mutable\n-    fn suggest_mut_for_immutable(&self, pty: &hir::Ty) -> Option<String> {\n+    fn suggest_mut_for_immutable(&self, pty: &hir::Ty, is_implicit_self: bool) -> Option<String> {\n         // Check wether the argument is an immutable reference\n+        debug!(\"suggest_mut_for_immutable({:?}, {:?})\", pty, is_implicit_self);\n         if let hir::TyRptr(lifetime, hir::MutTy {\n             mutbl: hir::Mutability::MutImmutable,\n             ref ty\n         }) = pty.node {\n             // Account for existing lifetimes when generating the message\n-            if !lifetime.is_elided() {\n-                if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(ty.span) {\n-                    if let Ok(lifetime_snippet) = self.tcx.sess.codemap()\n-                        .span_to_snippet(lifetime.span) {\n-                            return Some(format!(\"use `&{} mut {}` here to make mutable\",\n-                                                lifetime_snippet,\n-                                                snippet));\n-                    }\n-                }\n-            } else if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(pty.span) {\n-                if snippet.starts_with(\"&\") {\n-                    return Some(format!(\"use `{}` here to make mutable\",\n-                                        snippet.replace(\"&\", \"&mut \")));\n-                }\n+            let pointee_snippet = match self.tcx.sess.codemap().span_to_snippet(ty.span) {\n+                Ok(snippet) => snippet,\n+                _ => return None\n+            };\n+\n+            let lifetime_snippet = if !lifetime.is_elided() {\n+                format!(\"{} \", match self.tcx.sess.codemap().span_to_snippet(lifetime.span) {\n+                    Ok(lifetime_snippet) => lifetime_snippet,\n+                    _ => return None\n+                })\n             } else {\n-                bug!(\"couldn't find a snippet for span: {:?}\", pty.span);\n-            }\n+                String::new()\n+            };\n+            Some(format!(\"use `&{}mut {}` here to make mutable\",\n+                         lifetime_snippet,\n+                         if is_implicit_self { \"self\" } else { &*pointee_snippet }))\n+        } else {\n+            None\n         }\n-        None\n     }\n \n-    fn immutable_argument_should_be_mut(&self, nid: ast::NodeId, db: &mut DiagnosticBuilder) {\n-        let parent = self.tcx.hir.get_parent_node(nid);\n+    fn local_binding_mode(&self, node_id: ast::NodeId) -> hir::BindingMode {\n+        let pat = match self.tcx.hir.get(node_id) {\n+            hir_map::Node::NodeLocal(pat) => pat,\n+            node => bug!(\"bad node for local: {:?}\", node)\n+        };\n+\n+        match pat.node {\n+            hir::PatKind::Binding(mode, ..) => mode,\n+            _ => bug!(\"local is not a binding: {:?}\", pat)\n+        }\n+    }\n+\n+    fn local_ty(&self, node_id: ast::NodeId) -> (Option<&hir::Ty>, bool) {\n+        let parent = self.tcx.hir.get_parent_node(node_id);\n         let parent_node = self.tcx.hir.get(parent);\n \n         // The parent node is like a fn\n         if let Some(fn_like) = FnLikeNode::from_node(parent_node) {\n             // `nid`'s parent's `Body`\n             let fn_body = self.tcx.hir.body(fn_like.body());\n-            // Get the position of `nid` in the arguments list\n-            let arg_pos = fn_body.arguments.iter().position(|arg| arg.pat.id == nid);\n+            // Get the position of `node_id` in the arguments list\n+            let arg_pos = fn_body.arguments.iter().position(|arg| arg.pat.id == node_id);\n             if let Some(i) = arg_pos {\n                 // The argument's `Ty`\n-                let arg_ty = &fn_like.decl().inputs[i];\n-                if let Some(msg) = self.suggest_mut_for_immutable(&arg_ty) {\n-                    db.span_label(arg_ty.span, &msg);\n+                (Some(&fn_like.decl().inputs[i]),\n+                 i == 0 && fn_like.decl().has_implicit_self)\n+            } else {\n+                (None, false)\n+            }\n+        } else {\n+            (None, false)\n+        }\n+    }\n+\n+    fn note_immutability_blame(&self,\n+                               db: &mut DiagnosticBuilder,\n+                               blame: Option<ImmutabilityBlame>) {\n+        match blame {\n+            None => {}\n+            Some(ImmutabilityBlame::ClosureEnv(_)) => {}\n+            Some(ImmutabilityBlame::ImmLocal(node_id)) => {\n+                let let_span = self.tcx.hir.span(node_id);\n+                if let hir::BindingMode::BindByValue(..) = self.local_binding_mode(node_id) {\n+                    if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(let_span) {\n+                        let (_, is_implicit_self) = self.local_ty(node_id);\n+                        if is_implicit_self && snippet != \"self\" {\n+                            // avoid suggesting `mut &self`.\n+                            return\n+                        }\n+                        db.span_label(\n+                            let_span,\n+                            &format!(\"consider changing this to `mut {}`\", snippet)\n+                        );\n+                    }\n+                }\n+            }\n+            Some(ImmutabilityBlame::LocalDeref(node_id)) => {\n+                let let_span = self.tcx.hir.span(node_id);\n+                match self.local_binding_mode(node_id) {\n+                    hir::BindingMode::BindByRef(..) => {\n+                        let snippet = self.tcx.sess.codemap().span_to_snippet(let_span);\n+                        if let Ok(snippet) = snippet {\n+                            db.span_label(\n+                                let_span,\n+                                &format!(\"consider changing this to `{}`\",\n+                                         snippet.replace(\"ref \", \"ref mut \"))\n+                            );\n+                        }\n+                    }\n+                    hir::BindingMode::BindByValue(..) => {\n+                        if let (Some(local_ty), is_implicit_self) = self.local_ty(node_id) {\n+                            if let Some(msg) =\n+                                 self.suggest_mut_for_immutable(local_ty, is_implicit_self) {\n+                                db.span_label(local_ty.span, &msg);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            Some(ImmutabilityBlame::AdtFieldDeref(_, field)) => {\n+                let node_id = match self.tcx.hir.as_local_node_id(field.did) {\n+                    Some(node_id) => node_id,\n+                    None => return\n+                };\n+\n+                if let hir_map::Node::NodeField(ref field) = self.tcx.hir.get(node_id) {\n+                    if let Some(msg) = self.suggest_mut_for_immutable(&field.ty, false) {\n+                        db.span_label(field.ty.span, &msg);\n+                    }\n                 }\n             }\n         }\n@@ -941,10 +979,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>) {\n+    fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>) {\n         let error_span = err.span.clone();\n         match err.code {\n-            err_mutbl => self.note_and_explain_mutbl_error(db, &err, &error_span),\n+            err_mutbl => {\n+                self.note_and_explain_mutbl_error(db, &err, &error_span);\n+                self.note_immutability_blame(db, err.cmt.immutability_blame());\n+            }\n             err_out_of_scope(super_scope, sub_scope, cause) => {\n                 let (value_kind, value_msg) = match err.cmt.cat {\n                     mc::Categorization::Rvalue(..) =>\n@@ -1096,28 +1137,13 @@ before rustc 1.16, this temporary lived longer - see issue #39283 \\\n             _ => {\n                 if let Categorization::Deref(..) = err.cmt.cat {\n                     db.span_label(*error_span, &\"cannot borrow as mutable\");\n-                    if let Some(local_id) = err.cmt.get_arg_if_immutable(&self.tcx.hir) {\n-                        self.immutable_argument_should_be_mut(local_id, db);\n-                    } else if let Categorization::Deref(ref inner_cmt, ..) = err.cmt.cat {\n-                        if let Categorization::Local(local_id) = inner_cmt.cat {\n-                            self.immutable_argument_should_be_mut(local_id, db);\n-                        }\n-                    }\n                 } else if let Categorization::Local(local_id) = err.cmt.cat {\n                     let span = self.tcx.hir.span(local_id);\n                     if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n                         if snippet.starts_with(\"ref mut \") || snippet.starts_with(\"&mut \") {\n                             db.span_label(*error_span, &format!(\"cannot reborrow mutably\"));\n                             db.span_label(*error_span, &format!(\"try removing `&mut` here\"));\n                         } else {\n-                            if snippet.starts_with(\"ref \") {\n-                                db.span_label(span, &format!(\"use `{}` here to make mutable\",\n-                                                             snippet.replace(\"ref \", \"ref mut \")));\n-                            } else if snippet != \"self\" {\n-                                db.span_label(span,\n-                                              &format!(\"use `mut {}` here to make mutable\",\n-                                                       snippet));\n-                            }\n                             db.span_label(*error_span, &format!(\"cannot borrow mutably\"));\n                         }\n                     } else {"}, {"sha": "bfd342a9f213465a9e52b7630bce4e85672cd8e0", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -198,7 +198,7 @@ fn main() {\n ```\n \"##,\n \n-E0386: r##\"\n+/*E0386: r##\"\n This error occurs when an attempt is made to mutate the target of a mutable\n reference stored inside an immutable container.\n \n@@ -228,7 +228,7 @@ let x: i64 = 1;\n let y: Box<Cell<_>> = Box::new(Cell::new(x));\n y.set(2);\n ```\n-\"##,\n+\"##,*/\n \n E0387: r##\"\n This error occurs when an attempt is made to mutate or mutably reference data\n@@ -1117,6 +1117,6 @@ fn main() {\n }\n \n register_diagnostics! {\n-    E0385, // {} in an aliasable location\n+//    E0385, // {} in an aliasable location\n     E0524, // two closures require unique access to `..` at the same time\n }"}, {"sha": "e3a2bfa392738586fe06cd374082d3222c6bf50d", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n                 set.push_str(\", \");\n             }\n             let loan_str = self.borrowck_ctxt.loan_path_to_string(&lp);\n-            set.push_str(&loan_str[..]);\n+            set.push_str(&loan_str);\n             saw_some = true;\n             true\n         });"}, {"sha": "907410f74dca4f268697e32d036a606894924996", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n arena = { path = \"../libarena\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }"}, {"sha": "c1dc5f5f7a2b8d10e0f5a99565480dfab83f9993", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -680,10 +680,10 @@ fn is_useful_specialized<'p, 'a:'p, 'tcx: 'a>(\n     }).collect();\n     let wild_patterns: Vec<_> = wild_patterns_owned.iter().collect();\n     let matrix = Matrix(m.iter().flat_map(|r| {\n-        specialize(cx, &r[..], &ctor, &wild_patterns)\n+        specialize(cx, &r, &ctor, &wild_patterns)\n     }).collect());\n     match specialize(cx, v, &ctor, &wild_patterns) {\n-        Some(v) => match is_useful(cx, &matrix, &v[..], witness) {\n+        Some(v) => match is_useful(cx, &matrix, &v, witness) {\n             UsefulWithWitness(witnesses) => UsefulWithWitness(\n                 witnesses.into_iter()\n                     .map(|witness| witness.apply_constructor(cx, &ctor, lty))"}, {"sha": "9d55281d019d9ee579a4d755e47b6303d674ec04", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -311,7 +311,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         for &(pat, hir_pat) in pats {\n             let v = vec![pat];\n \n-            match is_useful(cx, &seen, &v[..], LeaveOutWitness) {\n+            match is_useful(cx, &seen, &v, LeaveOutWitness) {\n                 NotUseful => {\n                     match source {\n                         hir::MatchSource::IfLetDesugar { .. } => {"}, {"sha": "343b1ed68b80431cb3e734dff8adc4764073cd87", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -9,5 +9,5 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n serialize = { path = \"../libserialize\" }"}, {"sha": "c03c2890ba34c6cb4723c3eb00ed514a8bf2e5a5", "filename": "src/librustc_data_structures/accumulate_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Faccumulate_vec.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -91,17 +91,17 @@ impl<A: Array> Deref for AccumulateVec<A> {\n     type Target = [A::Element];\n     fn deref(&self) -> &Self::Target {\n         match *self {\n-            AccumulateVec::Array(ref v) => &v[..],\n-            AccumulateVec::Heap(ref v) => &v[..],\n+            AccumulateVec::Array(ref v) => v,\n+            AccumulateVec::Heap(ref v) => v,\n         }\n     }\n }\n \n impl<A: Array> DerefMut for AccumulateVec<A> {\n     fn deref_mut(&mut self) -> &mut [A::Element] {\n         match *self {\n-            AccumulateVec::Array(ref mut v) => &mut v[..],\n-            AccumulateVec::Heap(ref mut v) => &mut v[..],\n+            AccumulateVec::Array(ref mut v) => v,\n+            AccumulateVec::Heap(ref mut v) => v,\n         }\n     }\n }"}, {"sha": "cf54229fa7f52e59130cbd39c43ee7656c90d1f4", "filename": "src/librustc_data_structures/base_n.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbase_n.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -48,7 +48,7 @@ pub fn encode(n: u64, base: u64) -> String {\n #[test]\n fn test_encode() {\n     fn test(n: u64, base: u64) {\n-        assert_eq!(Ok(n), u64::from_str_radix(&encode(n, base)[..], base as u32));\n+        assert_eq!(Ok(n), u64::from_str_radix(&encode(n, base), base as u32));\n     }\n \n     for base in 2..37 {"}, {"sha": "9d97a83f693c32f7cb528def5b49ff3ac47f1178", "filename": "src/librustc_data_structures/blake2b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Fblake2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Fblake2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fblake2b.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -35,7 +35,7 @@ pub struct Blake2bCtx {\n impl ::std::fmt::Debug for Blake2bCtx {\n     fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n         try!(write!(fmt, \"hash: \"));\n-        for v in &self.h[..] {\n+        for v in &self.h {\n             try!(write!(fmt, \"{:x}\", v));\n         }\n         Ok(())"}, {"sha": "572ce98d3ae8e30a0f19a8b9a69b887c9873eb3e", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -91,13 +91,13 @@ impl<T: Idx> IdxSet<T> {\n impl<T: Idx> Deref for IdxSetBuf<T> {\n     type Target = IdxSet<T>;\n     fn deref(&self) -> &IdxSet<T> {\n-        unsafe { IdxSet::from_slice(&self.bits[..]) }\n+        unsafe { IdxSet::from_slice(&self.bits) }\n     }\n }\n \n impl<T: Idx> DerefMut for IdxSetBuf<T> {\n     fn deref_mut(&mut self) -> &mut IdxSet<T> {\n-        unsafe { IdxSet::from_slice_mut(&mut self.bits[..]) }\n+        unsafe { IdxSet::from_slice_mut(&mut self.bits) }\n     }\n }\n \n@@ -135,11 +135,11 @@ impl<T: Idx> IdxSet<T> {\n     }\n \n     pub fn words(&self) -> &[Word] {\n-        &self.bits[..]\n+        &self.bits\n     }\n \n     pub fn words_mut(&mut self) -> &mut [Word] {\n-        &mut self.bits[..]\n+        &mut self.bits\n     }\n \n     pub fn clone_from(&mut self, other: &IdxSet<T>) {"}, {"sha": "62c430dda327fe1c48c4a9537c50daecbd87ecce", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -189,6 +189,13 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n }\n \n+impl<I: Idx, T: Clone> IndexVec<I, T> {\n+    #[inline]\n+    pub fn resize(&mut self, new_len: usize, value: T) {\n+        self.raw.resize(new_len, value)\n+    }\n+}\n+\n impl<I: Idx, T> Index<I> for IndexVec<I, T> {\n     type Output = T;\n "}, {"sha": "9ccd95dd8d805966060a3dc81c3a379115bd73f7", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -27,7 +27,6 @@\n \n #![feature(shared)]\n #![feature(collections_range)]\n-#![cfg_attr(stage0,feature(field_init_shorthand))]\n #![feature(nonzero)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "5b5113caa8e8c0dd9d68e7e8078b71991efa107e", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -11,7 +11,8 @@ crate-type = [\"dylib\"]\n [dependencies]\n arena = { path = \"../libarena\" }\n graphviz = { path = \"../libgraphviz\" }\n-log = { path = \"../liblog\" }\n+log = { version = \"0.3\", features = [\"release_max_level_info\"] }\n+env_logger = { version = \"0.4\", default-features = false }\n proc_macro_plugin = { path = \"../libproc_macro_plugin\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }"}, {"sha": "977382b33adf75a429eb566390c9471f3793d65c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,6 +10,7 @@\n \n use rustc::hir::{self, map as hir_map};\n use rustc::hir::lowering::lower_crate;\n+use rustc::ich::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_mir as mir;\n use rustc::session::{Session, CompileResult, compile_result_from_err_count};\n@@ -25,7 +26,6 @@ use rustc::util::nodemap::NodeSet;\n use rustc::util::fs::rename_or_copy_remove;\n use rustc_borrowck as borrowck;\n use rustc_incremental::{self, IncrementalHashesMap};\n-use rustc_incremental::ich::Fingerprint;\n use rustc_resolve::{MakeGlobMap, Resolver};\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n@@ -48,6 +48,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::iter;\n use std::path::{Path, PathBuf};\n+use std::rc::Rc;\n use syntax::{ast, diagnostics, visit};\n use syntax::attr;\n use syntax::ext::base::ExtCtxt;\n@@ -198,17 +199,24 @@ pub fn compile_input(sess: &Session,\n \n             result?;\n \n-            if log_enabled!(::log::INFO) {\n+            if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Pre-trans\");\n                 tcx.print_debug_stats();\n             }\n             let trans = phase_4_translate_to_llvm(tcx, analysis, &incremental_hashes_map);\n \n-            if log_enabled!(::log::INFO) {\n+            if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Post-trans\");\n                 tcx.print_debug_stats();\n             }\n \n+            if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n+                if let Err(e) = mir::transform::dump_mir::emit_mir(tcx, &outputs) {\n+                    sess.err(&format!(\"could not emit MIR: {}\", e));\n+                    sess.abort_if_errors();\n+                }\n+            }\n+\n             Ok((outputs, trans))\n         })??\n     };\n@@ -250,10 +258,7 @@ fn keep_hygiene_data(sess: &Session) -> bool {\n }\n \n fn keep_ast(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.keep_ast ||\n-    sess.opts.debugging_opts.save_analysis ||\n-    sess.opts.debugging_opts.save_analysis_csv ||\n-    sess.opts.debugging_opts.save_analysis_api\n+    sess.opts.debugging_opts.keep_ast || ::save_analysis(sess)\n }\n \n /// The name used for source code that doesn't originate in a file\n@@ -575,7 +580,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n     krate = time(time_passes, \"crate injection\", || {\n         let alt_std_name = sess.opts.alt_std_name.clone();\n-        syntax::std_inject::maybe_inject_crates_ref(&sess.parse_sess, krate, alt_std_name)\n+        syntax::std_inject::maybe_inject_crates_ref(krate, alt_std_name)\n     });\n \n     let mut addl_plugins = Some(addl_plugins);\n@@ -793,25 +798,25 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !keep_hygiene_data(sess) {\n-        syntax::ext::hygiene::reset_hygiene_data();\n+        syntax::ext::hygiene::clear_markings();\n     }\n \n     Ok(ExpansionResult {\n         expanded_crate: krate,\n         defs: resolver.definitions,\n         analysis: ty::CrateAnalysis {\n-            export_map: resolver.export_map,\n-            access_levels: AccessLevels::default(),\n+            access_levels: Rc::new(AccessLevels::default()),\n             reachable: NodeSet(),\n             name: crate_name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n         },\n         resolutions: Resolutions {\n             freevars: resolver.freevars,\n+            export_map: resolver.export_map,\n             trait_map: resolver.trait_map,\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n         },\n-        hir_forest: hir_forest\n+        hir_forest: hir_forest,\n     })\n }\n \n@@ -881,7 +886,9 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let mut local_providers = ty::maps::Providers::default();\n     mir::provide(&mut local_providers);\n+    rustc_privacy::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n+    ty::provide(&mut local_providers);\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);\n@@ -923,9 +930,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              || consts::check_crate(tcx));\n \n         analysis.access_levels =\n-            time(time_passes, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx, &analysis.export_map)\n-            });\n+            time(time_passes, \"privacy checking\", || rustc_privacy::check_crate(tcx));\n \n         time(time_passes,\n              \"intrinsic checking\",\n@@ -992,19 +997,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         analysis.reachable =\n             time(time_passes,\n                  \"reachability checking\",\n-                 || reachable::find_reachable(tcx, &analysis.access_levels));\n+                 || reachable::find_reachable(tcx));\n \n-        time(time_passes, \"death checking\", || {\n-            middle::dead::check_crate(tcx, &analysis.access_levels);\n-        });\n+        time(time_passes, \"death checking\", || middle::dead::check_crate(tcx));\n \n         time(time_passes, \"unused lib feature checking\", || {\n-            stability::check_unused_or_stable_features(tcx, &analysis.access_levels)\n+            stability::check_unused_or_stable_features(tcx)\n         });\n \n-        time(time_passes,\n-             \"lint checking\",\n-             || lint::check_crate(tcx, &analysis.access_levels));\n+        time(time_passes, \"lint checking\", || lint::check_crate(tcx));\n \n         // The above three passes generate errors w/o aborting\n         if sess.err_count() > 0 {"}, {"sha": "c90dde3a5f6e0232694ae37dec7e11e70c91b446", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -35,6 +35,7 @@\n extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n+extern crate env_logger;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_back;\n@@ -66,6 +67,7 @@ use pretty::{PpMode, UserIdentifiedItem};\n \n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n+use rustc_save_analysis::DumpHandler;\n use rustc_trans::back::link;\n use rustc_trans::back::write::{create_target_machine, RELOC_MODEL_ARGS, CODE_GEN_MODEL_ARGS};\n use rustc::dep_graph::DepGraph;\n@@ -232,7 +234,7 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n // Extract input (string or file and optional path) from matches.\n fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>)> {\n     if free_matches.len() == 1 {\n-        let ifile = &free_matches[0][..];\n+        let ifile = &free_matches[0];\n         if ifile == \"-\" {\n             let mut src = String::new();\n             io::stdin().read_to_string(&mut src).unwrap();\n@@ -506,8 +508,9 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                         state.expanded_crate.unwrap(),\n                                         state.analysis.unwrap(),\n                                         state.crate_name.unwrap(),\n-                                        state.out_dir,\n-                                        save_analysis_format(state.session))\n+                                        DumpHandler::new(save_analysis_format(state.session),\n+                                                         state.out_dir,\n+                                                         state.crate_name.unwrap()))\n                 });\n             };\n             control.after_analysis.run_callback_on_error = true;\n@@ -799,7 +802,7 @@ Available lint options:\n         for lint in lints {\n             let name = lint.name_lower().replace(\"_\", \"-\");\n             println!(\"    {}  {:7.7}  {}\",\n-                     padded(&name[..]),\n+                     padded(&name),\n                      lint.default_level.as_str(),\n                      lint.desc);\n         }\n@@ -837,7 +840,7 @@ Available lint options:\n                          .map(|x| x.to_string().replace(\"_\", \"-\"))\n                          .collect::<Vec<String>>()\n                          .join(\", \");\n-            println!(\"    {}  {}\", padded(&name[..]), desc);\n+            println!(\"    {}  {}\", padded(&name), desc);\n         }\n         println!(\"\\n\");\n     };\n@@ -944,7 +947,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n                                                  .into_iter()\n                                                  .map(|x| x.opt_group)\n                                                  .collect();\n-    let matches = match getopts::getopts(&args[..], &all_groups) {\n+    let matches = match getopts::getopts(&args, &all_groups) {\n         Ok(m) => m,\n         Err(f) => early_error(ErrorOutputType::default(), &f.to_string()),\n     };\n@@ -1083,7 +1086,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                       format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL)];\n             for note in &xs {\n                 handler.emit(&MultiSpan::new(),\n-                             &note[..],\n+                             &note,\n                              errors::Level::Note);\n             }\n             if match env::var_os(\"RUST_BACKTRACE\") {\n@@ -1127,6 +1130,7 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n }\n \n pub fn main() {\n+    env_logger::init().unwrap();\n     let result = run(|| run_compiler(&env::args().collect::<Vec<_>>(),\n                                      &mut RustcDefaultCalls,\n                                      None,"}, {"sha": "18dc504ca8aa913568bbf5fd48fae2c8ff5728db", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -589,7 +589,7 @@ impl UserIdentifiedItem {\n                                        -> NodesMatchingUII<'a, 'hir> {\n         match *self {\n             ItemViaNode(node_id) => NodesMatchingDirect(Some(node_id).into_iter()),\n-            ItemViaPath(ref parts) => NodesMatchingSuffix(map.nodes_matching_suffix(&parts[..])),\n+            ItemViaPath(ref parts) => NodesMatchingSuffix(map.nodes_matching_suffix(&parts)),\n         }\n     }\n \n@@ -600,7 +600,7 @@ impl UserIdentifiedItem {\n                                   user_option,\n                                   self.reconstructed_input(),\n                                   is_wrong_because);\n-            sess.fatal(&message[..])\n+            sess.fatal(&message)\n         };\n \n         let mut saw_node = ast::DUMMY_NODE_ID;\n@@ -771,7 +771,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     fn expand_err_details(r: io::Result<()>) -> io::Result<()> {\n         r.map_err(|ioerr| {\n             io::Error::new(io::ErrorKind::Other,\n-                           &format!(\"graphviz::render failed: {}\", ioerr)[..])\n+                           format!(\"graphviz::render failed: {}\", ioerr))\n         })\n     }\n }"}, {"sha": "af2416f787ea4669e693fa0162bca977c6ac7ece", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n         let name = format!(\"T{}\", index);\n-        self.infcx.tcx.mk_param(index, Symbol::intern(&name[..]))\n+        self.infcx.tcx.mk_param(index, Symbol::intern(&name))\n     }\n \n     pub fn re_early_bound(&self, index: u32, name: &'static str) -> &'tcx ty::Region {"}, {"sha": "367b85ac726db0aa49be0add1b7a59971713e526", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,7 +10,7 @@\n \n use self::Destination::*;\n \n-use syntax_pos::{COMMAND_LINE_SP, DUMMY_SP, FileMap, Span, MultiSpan, CharPos};\n+use syntax_pos::{DUMMY_SP, FileMap, Span, MultiSpan, CharPos};\n \n use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, CodeMapper};\n use RenderSpan::*;\n@@ -151,7 +151,7 @@ impl EmitterWriter {\n \n         if let Some(ref cm) = self.cm {\n             for span_label in msp.span_labels() {\n-                if span_label.span == DUMMY_SP || span_label.span == COMMAND_LINE_SP {\n+                if span_label.span == DUMMY_SP {\n                     continue;\n                 }\n                 let lo = cm.lookup_char_pos(span_label.span.lo);\n@@ -615,15 +615,15 @@ impl EmitterWriter {\n         let mut max = 0;\n         if let Some(ref cm) = self.cm {\n             for primary_span in msp.primary_spans() {\n-                if primary_span != &DUMMY_SP && primary_span != &COMMAND_LINE_SP {\n+                if primary_span != &DUMMY_SP {\n                     let hi = cm.lookup_char_pos(primary_span.hi);\n                     if hi.line > max {\n                         max = hi.line;\n                     }\n                 }\n             }\n             for span_label in msp.span_labels() {\n-                if span_label.span != DUMMY_SP && span_label.span != COMMAND_LINE_SP {\n+                if span_label.span != DUMMY_SP {\n                     let hi = cm.lookup_char_pos(span_label.span.hi);\n                     if hi.line > max {\n                         max = hi.line;\n@@ -659,20 +659,20 @@ impl EmitterWriter {\n \n             // First, find all the spans in <*macros> and point instead at their use site\n             for sp in span.primary_spans() {\n-                if (*sp == COMMAND_LINE_SP) || (*sp == DUMMY_SP) {\n+                if *sp == DUMMY_SP {\n                     continue;\n                 }\n                 if cm.span_to_filename(sp.clone()).contains(\"macros>\") {\n-                    let v = cm.macro_backtrace(sp.clone());\n+                    let v = sp.macro_backtrace();\n                     if let Some(use_site) = v.last() {\n                         before_after.push((sp.clone(), use_site.call_site.clone()));\n                     }\n                 }\n-                for trace in cm.macro_backtrace(sp.clone()).iter().rev() {\n+                for trace in sp.macro_backtrace().iter().rev() {\n                     // Only show macro locations that are local\n                     // and display them like a span_note\n                     if let Some(def_site) = trace.def_site_span {\n-                        if (def_site == COMMAND_LINE_SP) || (def_site == DUMMY_SP) {\n+                        if def_site == DUMMY_SP {\n                             continue;\n                         }\n                         // Check to make sure we're not in any <*macros>\n@@ -689,11 +689,11 @@ impl EmitterWriter {\n                 span.push_span_label(label_span, label_text);\n             }\n             for sp_label in span.span_labels() {\n-                if (sp_label.span == COMMAND_LINE_SP) || (sp_label.span == DUMMY_SP) {\n+                if sp_label.span == DUMMY_SP {\n                     continue;\n                 }\n                 if cm.span_to_filename(sp_label.span.clone()).contains(\"macros>\") {\n-                    let v = cm.macro_backtrace(sp_label.span.clone());\n+                    let v = sp_label.span.macro_backtrace();\n                     if let Some(use_site) = v.last() {\n                         before_after.push((sp_label.span.clone(), use_site.call_site.clone()));\n                     }\n@@ -848,7 +848,7 @@ impl EmitterWriter {\n         // Make sure our primary file comes first\n         let primary_lo = if let (Some(ref cm), Some(ref primary_span)) =\n             (self.cm.as_ref(), msp.primary_span().as_ref()) {\n-            if primary_span != &&DUMMY_SP && primary_span != &&COMMAND_LINE_SP {\n+            if primary_span != &&DUMMY_SP {\n                 cm.lookup_char_pos(primary_span.lo)\n             } else {\n                 emit_to_destination(&buffer.render(), level, &mut self.dst)?;"}, {"sha": "2efdaa57fba36bf68ad45c2f635745574a1b2791", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -48,7 +48,6 @@ pub mod styled_buffer;\n mod lock;\n \n use syntax_pos::{BytePos, Loc, FileLinesResult, FileName, MultiSpan, Span, NO_EXPANSION};\n-use syntax_pos::MacroBacktrace;\n \n #[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum RenderSpan {\n@@ -75,7 +74,6 @@ pub trait CodeMapper {\n     fn span_to_lines(&self, sp: Span) -> FileLinesResult;\n     fn span_to_string(&self, sp: Span) -> String;\n     fn span_to_filename(&self, sp: Span) -> FileName;\n-    fn macro_backtrace(&self, span: Span) -> Vec<MacroBacktrace>;\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n }\n \n@@ -120,7 +118,7 @@ impl CodeSuggestion {\n         let bounding_span = Span {\n             lo: lo,\n             hi: hi,\n-            expn_id: NO_EXPANSION,\n+            ctxt: NO_EXPANSION,\n         };\n         let lines = cm.span_to_lines(bounding_span).unwrap();\n         assert!(!lines.lines.is_empty());"}, {"sha": "7bf2efa4b885f8eef332581957e4a84f795f75c8", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -13,6 +13,6 @@ graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n serialize = { path = \"../libserialize\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "897ca0f29576181d18a5faf7005662ea61861582", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -52,13 +52,13 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::{Direction, INCOMING, OUTGOING, NodeIndex};\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::ich::{ATTR_IF_THIS_CHANGED, ATTR_THEN_THIS_WOULD_NEED};\n use graphviz::IntoCow;\n use std::env;\n use std::fs::File;\n use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n-use {ATTR_IF_THIS_CHANGED, ATTR_THEN_THIS_WOULD_NEED};\n \n pub fn assert_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _ignore = tcx.dep_graph.in_ignore();"}, {"sha": "c9496a4deb8eb84293b3834cf67f20a3f33912f3", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -35,20 +35,16 @@ use rustc::hir;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::intravisit as visit;\n use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n+use rustc::ich::{Fingerprint, DefPathHashes, CachingCodemapView};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::record_time;\n use rustc::session::config::DebugInfoLevel::NoDebugInfo;\n \n-use self::def_path_hash::DefPathHashes;\n use self::svh_visitor::StrictVersionHashVisitor;\n-use self::caching_codemap_view::CachingCodemapView;\n \n-mod def_path_hash;\n mod svh_visitor;\n-mod caching_codemap_view;\n \n pub type IchHasher = StableHasher<Fingerprint>;\n "}, {"sha": "5401b371888e939c58b6b3145b5f3faf67aa5315", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -17,32 +17,22 @@ use self::SawTraitOrImplItemComponent::*;\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n+use syntax::ext::hygiene::SyntaxContext;\n use syntax::parse::token;\n use syntax::symbol::InternedString;\n-use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n+use syntax_pos::{Span, BytePos};\n use syntax::tokenstream;\n use rustc::hir;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self as visit, Visitor};\n+use rustc::ich::{DefPathHashes, CachingCodemapView, IGNORED_ATTRIBUTES};\n use rustc::ty::TyCtxt;\n use std::hash::{Hash, Hasher};\n \n-use super::def_path_hash::DefPathHashes;\n-use super::caching_codemap_view::CachingCodemapView;\n use super::IchHasher;\n \n-const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\n-    \"cfg\",\n-    ::ATTR_IF_THIS_CHANGED,\n-    ::ATTR_THEN_THIS_WOULD_NEED,\n-    ::ATTR_DIRTY,\n-    ::ATTR_CLEAN,\n-    ::ATTR_DIRTY_METADATA,\n-    ::ATTR_CLEAN_METADATA\n-];\n-\n pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     pub tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n     pub st: &'a mut IchHasher,\n@@ -103,10 +93,10 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             span.hi\n         };\n \n-        let expn_kind = match span.expn_id {\n-            NO_EXPANSION => SawSpanExpnKind::NoExpansion,\n-            COMMAND_LINE_EXPN => SawSpanExpnKind::CommandLine,\n-            _ => SawSpanExpnKind::SomeExpansion,\n+        let expn_kind = if span.ctxt == SyntaxContext::empty() {\n+            SawSpanExpnKind::NoExpansion\n+        } else {\n+            SawSpanExpnKind::SomeExpansion\n         };\n \n         let loc1 = self.codemap.byte_pos_to_line_and_col(span.lo);\n@@ -132,8 +122,7 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n         saw.hash(self.st);\n \n         if expn_kind == SawSpanExpnKind::SomeExpansion {\n-            let call_site = self.codemap.codemap().source_callsite(span);\n-            self.hash_span(call_site);\n+            self.hash_span(span.source_callsite());\n         }\n     }\n \n@@ -494,7 +483,6 @@ fn saw_impl_item(ii: &ImplItemKind) -> SawTraitOrImplItemComponent {\n #[derive(Clone, Copy, Hash, Eq, PartialEq)]\n enum SawSpanExpnKind {\n     NoExpansion,\n-    CommandLine,\n     SomeExpansion,\n }\n \n@@ -512,7 +500,7 @@ impl<'a> Hash for StableInlineAsm<'a> {\n             volatile,\n             alignstack,\n             dialect,\n-            expn_id: _, // This is used for error reporting\n+            ctxt: _, // This is used for error reporting\n         } = *self.0;\n \n         asm.as_str().hash(state);"}, {"sha": "477777c975db245a48dc57543fa47afd7253092e", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -24,7 +24,6 @@\n #![feature(rand)]\n #![feature(core_intrinsics)]\n #![feature(conservative_impl_trait)]\n-#![cfg_attr(stage0,feature(field_init_shorthand))]\n #![cfg_attr(stage0, feature(pub_restricted))]\n \n extern crate graphviz;\n@@ -36,17 +35,9 @@ extern crate serialize as rustc_serialize;\n extern crate syntax;\n extern crate syntax_pos;\n \n-const ATTR_DIRTY: &'static str = \"rustc_dirty\";\n-const ATTR_CLEAN: &'static str = \"rustc_clean\";\n-const ATTR_DIRTY_METADATA: &'static str = \"rustc_metadata_dirty\";\n-const ATTR_CLEAN_METADATA: &'static str = \"rustc_metadata_clean\";\n-const ATTR_IF_THIS_CHANGED: &'static str = \"rustc_if_this_changed\";\n-const ATTR_THEN_THIS_WOULD_NEED: &'static str = \"rustc_then_this_would_need\";\n-\n mod assert_dep_graph;\n mod calculate_svh;\n mod persist;\n-pub mod ich;\n \n pub use assert_dep_graph::assert_dep_graph;\n pub use calculate_svh::compute_incremental_hashes_map;"}, {"sha": "d900907395656d9c140df0839fe0ee52bcab30b9", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -12,9 +12,9 @@\n \n use rustc::dep_graph::{DepNode, WorkProduct, WorkProductId};\n use rustc::hir::def_id::DefIndex;\n+use rustc::ich::Fingerprint;\n use std::sync::Arc;\n use rustc_data_structures::fx::FxHashMap;\n-use ich::Fingerprint;\n \n use super::directory::DefPathIndex;\n "}, {"sha": "d931f64d579e1a7f254baab3bddce755221dcc12", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -47,13 +47,12 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit;\n+use rustc::ich::{Fingerprint, ATTR_DIRTY, ATTR_CLEAN, ATTR_DIRTY_METADATA,\n+                 ATTR_CLEAN_METADATA};\n use syntax::ast::{self, Attribute, NestedMetaItem};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use syntax_pos::Span;\n use rustc::ty::TyCtxt;\n-use ich::Fingerprint;\n-\n-use {ATTR_DIRTY, ATTR_CLEAN, ATTR_DIRTY_METADATA, ATTR_CLEAN_METADATA};\n \n const LABEL: &'static str = \"label\";\n const CFG: &'static str = \"cfg\";"}, {"sha": "5c20f65274f54ffbcd86a5323b3bb704dbe328fb", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -99,9 +99,9 @@ pub fn read_file(sess: &Session, path: &Path) -> io::Result<Option<Vec<u8>>> {\n         let rustc_version_str_len = rustc_version_str_len[0] as usize;\n         let mut buffer = Vec::with_capacity(rustc_version_str_len);\n         buffer.resize(rustc_version_str_len, 0);\n-        file.read_exact(&mut buffer[..])?;\n+        file.read_exact(&mut buffer)?;\n \n-        if &buffer[..] != rustc_version().as_bytes() {\n+        if buffer != rustc_version().as_bytes() {\n             report_format_mismatch(sess, path, \"Different compiler version\");\n             return Ok(None);\n         }"}, {"sha": "9d8ff57e03bcc4b39d9144653e8b77cfc2f0f2bc", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -11,14 +11,14 @@\n use rustc::dep_graph::DepNode;\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::svh::Svh;\n+use rustc::ich::Fingerprint;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::flock;\n use rustc_serialize::Decodable;\n use rustc_serialize::opaque::Decoder;\n \n use IncrementalHashesMap;\n-use ich::Fingerprint;\n use super::data::*;\n use super::fs::*;\n use super::file_format;"}, {"sha": "ed2e2e72ee79f7381db081082f6d5a608b4ac8d9", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -13,6 +13,7 @@\n use rustc::dep_graph::{DepNode, WorkProductId};\n use rustc::hir::def_id::DefId;\n use rustc::hir::svh::Svh;\n+use rustc::ich::Fingerprint;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n@@ -22,7 +23,6 @@ use std::path::{Path};\n use std::sync::Arc;\n \n use IncrementalHashesMap;\n-use ich::Fingerprint;\n use super::data::*;\n use super::directory::*;\n use super::dirty_clean;"}, {"sha": "fe8cf72996e15d8b1359e20a4338c6746f81cc0e", "filename": "src/librustc_incremental/persist/preds/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,11 +10,11 @@\n \n use rustc::dep_graph::{DepGraphQuery, DepNode};\n use rustc::hir::def_id::DefId;\n+use rustc::ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::graph::{Graph, NodeIndex};\n \n use super::hash::*;\n-use ich::Fingerprint;\n \n mod compress;\n "}, {"sha": "2e5186493370b5d3fd1829f239fe4a3bf617da43", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -11,6 +11,7 @@\n use rustc::dep_graph::DepNode;\n use rustc::hir::def_id::DefId;\n use rustc::hir::svh::Svh;\n+use rustc::ich::Fingerprint;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n@@ -23,7 +24,6 @@ use std::fs::{self, File};\n use std::path::PathBuf;\n \n use IncrementalHashesMap;\n-use ich::Fingerprint;\n use super::data::*;\n use super::directory::*;\n use super::hash::*;"}, {"sha": "c3c5461ff7c506a612d45564e01aa6b8a8a41938", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }"}, {"sha": "c4220e9a0d3dc1420022e6a7b5b2a3c1ff9c8c98", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -88,7 +88,7 @@ impl NonCamelCaseTypes {\n             } else {\n                 format!(\"{} `{}` should have a camel case name such as `{}`\", sort, name, c)\n             };\n-            cx.span_lint(NON_CAMEL_CASE_TYPES, span, &m[..]);\n+            cx.span_lint(NON_CAMEL_CASE_TYPES, span, &m);\n         }\n     }\n }"}, {"sha": "0ee9d4a42c7f81a26c15efdb0a37ab3eb5af6b45", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -334,7 +334,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             attr.check_name(\"doc\") &&\n             match attr.meta_item_list() {\n                 None => false,\n-                Some(l) => attr::list_contains_name(&l[..], \"hidden\"),\n+                Some(l) => attr::list_contains_name(&l, \"hidden\"),\n             }\n         });\n         self.doc_hidden_stack.push(doc_hidden);"}, {"sha": "8d759d89135ac90ca505853dce307c241b666c29", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -196,10 +196,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(SUPER_OR_SELF_IN_GLOBAL_PATH),\n             reference: \"issue #36888 <https://github.com/rust-lang/rust/issues/36888>\",\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(OVERLAPPING_INHERENT_IMPLS),\n-            reference: \"issue #36889 <https://github.com/rust-lang/rust/issues/36889>\",\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN),\n             reference: \"issue #36890 <https://github.com/rust-lang/rust/issues/36890>\",\n@@ -263,4 +259,5 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"drop_with_repr_extern\", \"drop flags have been removed\");\n     store.register_removed(\"transmute_from_fn_item_types\",\n         \"always cast functions before transmuting them\");\n+    store.register_removed(\"overlapping_inherent_impls\", \"converted into hard error, see #36889\");\n }"}, {"sha": "86bf209ccf8c8d92c5c841f684f356f869293b20", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty::TyBool => return,\n             ty::TyAdt(def, _) => {\n                 let attrs = cx.tcx.get_attrs(def.did);\n-                check_must_use(cx, &attrs[..], s.span)\n+                check_must_use(cx, &attrs, s.span)\n             }\n             _ => false,\n         };"}, {"sha": "2b945e0a3afaff2f8e7d8ffe10335be2e719bbea", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -131,10 +131,16 @@ fn main() {\n         if is_crossed && flag.starts_with(\"-m\") {\n             continue;\n         }\n+\n+        // -Wdate-time is not supported by the netbsd cross compiler\n+        if is_crossed && target.contains(\"netbsd\") && flag.contains(\"date-time\") {\n+            continue;\n+        }\n+\n         cfg.flag(flag);\n     }\n \n-    for component in &components[..] {\n+    for component in &components {\n         let mut flag = String::from(\"-DLLVM_COMPONENT_\");\n         flag.push_str(&component.to_uppercase());\n         cfg.flag(&flag);\n@@ -167,7 +173,7 @@ fn main() {\n     if !is_crossed {\n         cmd.arg(\"--system-libs\");\n     }\n-    cmd.args(&components[..]);\n+    cmd.args(&components);\n \n     for lib in output(&mut cmd).split_whitespace() {\n         let name = if lib.starts_with(\"-l\") {\n@@ -227,16 +233,21 @@ fn main() {\n         }\n     }\n \n-    // OpenBSD has a particular C++ runtime library name\n+    let llvm_static_stdcpp = env::var_os(\"LLVM_STATIC_STDCPP\");\n+\n     let stdcppname = if target.contains(\"openbsd\") {\n+        // OpenBSD has a particular C++ runtime library name\n         \"estdc++\"\n+    } else if target.contains(\"netbsd\") && llvm_static_stdcpp.is_some() {\n+        // NetBSD uses a separate library when relocation is required\n+        \"stdc++_pic\"\n     } else {\n         \"stdc++\"\n     };\n \n     // C++ runtime library\n     if !target.contains(\"msvc\") {\n-        if let Some(s) = env::var_os(\"LLVM_STATIC_STDCPP\") {\n+        if let Some(s) = llvm_static_stdcpp {\n             assert!(!cxxflags.contains(\"stdlib=libc++\"));\n             let path = PathBuf::from(s);\n             println!(\"cargo:rustc-link-search=native={}\","}, {"sha": "54941362e845091861e06dba9cabea1e9310cdc2", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n-#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![sanitizer_runtime]\n+#![feature(sanitizer_runtime)]\n #![feature(alloc_system)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "e8b906092730e5cbee6f873daa302fd57eaf46a6", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n flate = { path = \"../libflate\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }"}, {"sha": "04a8b88f8a594a694537722cfda51677330f75f6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -236,7 +236,8 @@ impl<'a> CrateLoader<'a> {\n             // path (this is a top-level dependency) as we don't want to\n             // implicitly load anything inside the dependency lookup path.\n             let prev_kind = source.dylib.as_ref().or(source.rlib.as_ref())\n-                                  .unwrap().1;\n+                                  .or(source.rmeta.as_ref())\n+                                  .expect(\"No sources for crate\").1;\n             if ret.is_none() && (prev_kind == kind || prev_kind == PathKind::All) {\n                 ret = Some(cnum);\n             }\n@@ -668,7 +669,7 @@ impl<'a> CrateLoader<'a> {\n                                   name,\n                                   config::host_triple(),\n                                   self.sess.opts.target_triple);\n-            span_fatal!(self.sess, span, E0456, \"{}\", &message[..]);\n+            span_fatal!(self.sess, span, E0456, \"{}\", &message);\n         }\n \n         let root = ekrate.metadata.get_root();\n@@ -1057,7 +1058,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         self.inject_allocator_crate();\n         self.inject_panic_runtime(krate);\n \n-        if log_enabled!(log::INFO) {\n+        if log_enabled!(log::LogLevel::Info) {\n             dump_crates(&self.cstore);\n         }\n "}, {"sha": "41a2e8a8d55e3e2da627f460fe7a5faef3e571b8", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -36,7 +36,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::parse::filemap_to_stream;\n use syntax::symbol::Symbol;\n-use syntax_pos::{mk_sp, Span};\n+use syntax_pos::{Span, NO_EXPANSION};\n use rustc::hir::svh::Svh;\n use rustc_back::target::Target;\n use rustc::hir;\n@@ -88,9 +88,9 @@ provide! { <'tcx> tcx, def_id, cdata\n     }\n     associated_item => { cdata.get_associated_item(def_id.index) }\n     impl_trait_ref => { cdata.get_impl_trait(def_id.index, tcx) }\n-    custom_coerce_unsized_kind => {\n-        cdata.get_custom_coerce_unsized_kind(def_id.index).unwrap_or_else(|| {\n-            bug!(\"custom_coerce_unsized_kind: `{:?}` is missing its kind\", def_id);\n+    coerce_unsized_info => {\n+        cdata.get_coerce_unsized_info(def_id.index).unwrap_or_else(|| {\n+            bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n         })\n     }\n     mir => {\n@@ -109,6 +109,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     typeck_tables => { cdata.item_body_tables(def_id.index, tcx) }\n     closure_kind => { cdata.closure_kind(def_id.index) }\n     closure_type => { cdata.closure_ty(def_id.index, tcx) }\n+    inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n }\n \n impl CrateStore for cstore::CStore {\n@@ -162,12 +163,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(did.krate).get_fn_arg_names(did.index)\n     }\n \n-    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>\n-    {\n-        self.dep_graph.read(DepNode::MetaData(def_id));\n-        self.get_crate_data(def_id.krate).get_inherent_implementations_for_type(def_id.index)\n-    }\n-\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>\n     {\n         if let Some(def_id) = filter {\n@@ -400,7 +395,7 @@ impl CrateStore for cstore::CStore {\n         let source_name = format!(\"<{} macros>\", name);\n \n         let filemap = sess.parse_sess.codemap().new_filemap(source_name, None, def.body);\n-        let local_span = mk_sp(filemap.start_pos, filemap.end_pos);\n+        let local_span = Span { lo: filemap.start_pos, hi: filemap.end_pos, ctxt: NO_EXPANSION };\n         let body = filemap_to_stream(&sess.parse_sess, filemap);\n \n         // Mark the attrs as used\n@@ -496,12 +491,12 @@ impl CrateStore for cstore::CStore {\n         self.do_extern_mod_stmt_cnum(emod_id)\n     }\n \n-    fn encode_metadata<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 reexports: &def::ExportMap,\n+    fn encode_metadata<'a, 'tcx>(&self,\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet) -> Vec<u8>\n     {\n-        encoder::encode_metadata(tcx, self, reexports, link_meta, reachable)\n+        encoder::encode_metadata(tcx, self, link_meta, reachable)\n     }\n \n     fn metadata_encoding_version(&self) -> &[u8]"}, {"sha": "43e076e799b3d07fedf223d537fdee94813e7666", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -39,7 +39,7 @@ use syntax::attr;\n use syntax::ast;\n use syntax::codemap;\n use syntax::ext::base::MacroKind;\n-use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n+use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Decoder<'a>,\n@@ -243,7 +243,7 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n         let sess = if let Some(sess) = self.sess {\n             sess\n         } else {\n-            return Ok(syntax_pos::mk_sp(lo, hi));\n+            return Ok(Span { lo: lo, hi: hi, ctxt: NO_EXPANSION });\n         };\n \n         let (lo, hi) = if lo > hi {\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n         let lo = (lo - filemap.original_start_pos) + filemap.translated_filemap.start_pos;\n         let hi = (hi - filemap.original_start_pos) + filemap.translated_filemap.start_pos;\n \n-        Ok(syntax_pos::mk_sp(lo, hi))\n+        Ok(Span { lo: lo, hi: hi, ctxt: NO_EXPANSION })\n     }\n }\n \n@@ -558,7 +558,6 @@ impl<'a, 'tcx> CrateMetadata {\n             EntryKind::Union(_, _) => ty::AdtKind::Union,\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n-        let mut ctor_index = None;\n         let variants = if let ty::AdtKind::Enum = kind {\n             item.children\n                 .decode(self)\n@@ -570,8 +569,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 })\n                 .collect()\n         } else {\n-            let (variant, struct_ctor) = self.get_variant(&item, item_id, tcx);\n-            ctor_index = struct_ctor;\n+            let (variant, _struct_ctor) = self.get_variant(&item, item_id, tcx);\n             vec![variant]\n         };\n         let (kind, repr) = match item.kind {\n@@ -581,13 +579,7 @@ impl<'a, 'tcx> CrateMetadata {\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n \n-        let adt = tcx.alloc_adt_def(did, kind, variants, repr);\n-        if let Some(ctor_index) = ctor_index {\n-            // Make adt definition available through constructor id as well.\n-            tcx.maps.adt_def.borrow_mut().insert(self.local_def_id(ctor_index), adt);\n-        }\n-\n-        adt\n+        tcx.alloc_adt_def(did, kind, variants, repr)\n     }\n \n     pub fn get_predicates(&self,\n@@ -651,10 +643,10 @@ impl<'a, 'tcx> CrateMetadata {\n         self.get_impl_data(id).polarity\n     }\n \n-    pub fn get_custom_coerce_unsized_kind(&self,\n-                                          id: DefIndex)\n-                                          -> Option<ty::adjustment::CustomCoerceUnsized> {\n-        self.get_impl_data(id).coerce_unsized_kind\n+    pub fn get_coerce_unsized_info(&self,\n+                                   id: DefIndex)\n+                                   -> Option<ty::adjustment::CoerceUnsizedInfo> {\n+        self.get_impl_data(id).coerce_unsized_info\n     }\n \n     pub fn get_impl_trait(&self,"}, {"sha": "38d774992a55111b8d901b75a5d192730f76ba38", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -13,7 +13,6 @@ use index::Index;\n use schema::*;\n \n use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary};\n-use rustc::hir::def;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::dependency_format::Linkage;\n@@ -48,7 +47,6 @@ use super::index_builder::{FromId, IndexBuilder, Untracked};\n pub struct EncodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Encoder<'a>,\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    reexports: &'a def::ExportMap,\n     link_meta: &'a LinkMeta,\n     cstore: &'a cstore::CStore,\n     exported_symbols: &'a NodeSet,\n@@ -306,7 +304,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let def_id = tcx.hir.local_def_id(id);\n \n         let data = ModData {\n-            reexports: match self.reexports.get(&id) {\n+            reexports: match tcx.export_map.get(&id) {\n                 Some(exports) if *vis == hir::Public => self.lazy_seq_ref(exports),\n                 _ => LazySeq::empty(),\n             },\n@@ -695,7 +693,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let data = ImplData {\n                     polarity: hir::ImplPolarity::Positive,\n                     parent_impl: None,\n-                    coerce_unsized_kind: None,\n+                    coerce_unsized_info: None,\n                     trait_ref: tcx.impl_trait_ref(def_id).map(|trait_ref| self.lazy(&trait_ref)),\n                 };\n \n@@ -715,13 +713,21 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     None\n                 };\n \n+                // if this is an impl of `CoerceUnsized`, create its\n+                // \"unsized info\", else just store None\n+                let coerce_unsized_info =\n+                    trait_ref.and_then(|t| {\n+                        if Some(t.def_id) == tcx.lang_items.coerce_unsized_trait() {\n+                            Some(ty::queries::coerce_unsized_info::get(tcx, item.span, def_id))\n+                        } else {\n+                            None\n+                        }\n+                    });\n+\n                 let data = ImplData {\n                     polarity: polarity,\n                     parent_impl: parent,\n-                    coerce_unsized_kind: tcx.maps.custom_coerce_unsized_kind\n-                        .borrow()\n-                        .get(&def_id)\n-                        .cloned(),\n+                    coerce_unsized_info: coerce_unsized_info,\n                     trait_ref: trait_ref.map(|trait_ref| self.lazy(&trait_ref)),\n                 };\n \n@@ -920,14 +926,14 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n                 self.encode_fields(def_id);\n             }\n             hir::ItemImpl(..) => {\n-                for &trait_item_def_id in &self.tcx.associated_item_def_ids(def_id)[..] {\n+                for &trait_item_def_id in self.tcx.associated_item_def_ids(def_id).iter() {\n                     self.record(trait_item_def_id,\n                                 EncodeContext::encode_info_for_impl_item,\n                                 trait_item_def_id);\n                 }\n             }\n             hir::ItemTrait(..) => {\n-                for &item_def_id in &self.tcx.associated_item_def_ids(def_id)[..] {\n+                for &item_def_id in self.tcx.associated_item_def_ids(def_id).iter() {\n                     self.record(item_def_id,\n                                 EncodeContext::encode_info_for_trait_item,\n                                 item_def_id);\n@@ -1423,7 +1429,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  cstore: &cstore::CStore,\n-                                 reexports: &def::ExportMap,\n                                  link_meta: &LinkMeta,\n                                  exported_symbols: &NodeSet)\n                                  -> Vec<u8> {\n@@ -1437,7 +1442,6 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let mut ecx = EncodeContext {\n             opaque: opaque::Encoder::new(&mut cursor),\n             tcx: tcx,\n-            reexports: reexports,\n             link_meta: link_meta,\n             cstore: cstore,\n             exported_symbols: exported_symbols,"}, {"sha": "970a401177ba54e600e3b67aa5a7786717a0a4d3", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 50, "deletions": 17, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -10,7 +10,7 @@\n \n use schema::*;\n \n-use rustc::hir::def_id::{DefId, DefIndex};\n+use rustc::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace};\n use std::io::{Cursor, Write};\n use std::slice;\n use std::u32;\n@@ -23,12 +23,15 @@ use std::u32;\n /// appropriate spot by calling `record_position`. We should never\n /// visit the same index twice.\n pub struct Index {\n-    positions: Vec<u32>,\n+    positions: [Vec<u32>; 2]\n }\n \n impl Index {\n-    pub fn new(max_index: usize) -> Index {\n-        Index { positions: vec![u32::MAX; max_index] }\n+    pub fn new((max_index_lo, max_index_hi): (usize, usize)) -> Index {\n+        Index {\n+            positions: [vec![u32::MAX; max_index_lo],\n+                        vec![u32::MAX; max_index_hi]],\n+        }\n     }\n \n     pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry>) {\n@@ -37,24 +40,31 @@ impl Index {\n     }\n \n     pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry>) {\n-        let item = item.as_usize();\n-\n         assert!(entry.position < (u32::MAX as usize));\n         let position = entry.position as u32;\n+        let space_index = item.address_space().index();\n+        let array_index = item.as_array_index();\n \n-        assert!(self.positions[item] == u32::MAX,\n+        assert!(self.positions[space_index][array_index] == u32::MAX,\n                 \"recorded position for item {:?} twice, first at {:?} and now at {:?}\",\n                 item,\n-                self.positions[item],\n+                self.positions[space_index][array_index],\n                 position);\n \n-        self.positions[item] = position.to_le();\n+        self.positions[space_index][array_index] = position.to_le();\n     }\n \n     pub fn write_index(&self, buf: &mut Cursor<Vec<u8>>) -> LazySeq<Index> {\n         let pos = buf.position();\n-        buf.write_all(words_to_bytes(&self.positions)).unwrap();\n-        LazySeq::with_position_and_length(pos as usize, self.positions.len())\n+\n+        // First we write the length of the lower range ...\n+        buf.write_all(words_to_bytes(&[self.positions[0].len() as u32])).unwrap();\n+        // ... then the values in the lower range ...\n+        buf.write_all(words_to_bytes(&self.positions[0][..])).unwrap();\n+        // ... then the values in the higher range.\n+        buf.write_all(words_to_bytes(&self.positions[1][..])).unwrap();\n+        LazySeq::with_position_and_length(pos as usize,\n+            self.positions[0].len() + self.positions[1].len() + 1)\n     }\n }\n \n@@ -70,7 +80,18 @@ impl<'tcx> LazySeq<Index> {\n                index,\n                words.len());\n \n-        let position = u32::from_le(words[index].get());\n+        let positions = match def_index.address_space() {\n+            DefIndexAddressSpace::Low => &words[1..],\n+            DefIndexAddressSpace::High => {\n+                // This is a DefIndex in the higher range, so find out where\n+                // that starts:\n+                let lo_count = u32::from_le(words[0].get()) as usize;\n+                &words[lo_count + 1 .. ]\n+            }\n+        };\n+\n+        let array_index = def_index.as_array_index();\n+        let position = u32::from_le(positions[array_index].get());\n         if position == u32::MAX {\n             debug!(\"Index::lookup: position=u32::MAX\");\n             None\n@@ -84,14 +105,26 @@ impl<'tcx> LazySeq<Index> {\n                                bytes: &'a [u8])\n                                -> impl Iterator<Item = (DefIndex, Lazy<Entry<'tcx>>)> + 'a {\n         let words = &bytes_to_words(&bytes[self.position..])[..self.len];\n-        words.iter().map(|word| word.get()).enumerate().filter_map(|(index, position)| {\n-            if position == u32::MAX {\n+        let lo_count = u32::from_le(words[0].get()) as usize;\n+        let lo = &words[1 .. lo_count + 1];\n+        let hi = &words[1 + lo_count ..];\n+\n+        lo.iter().map(|word| word.get()).enumerate().filter_map(|(index, pos)| {\n+            if pos == u32::MAX {\n+                None\n+            } else {\n+                let pos = u32::from_le(pos) as usize;\n+                Some((DefIndex::new(index), Lazy::with_position(pos)))\n+            }\n+        }).chain(hi.iter().map(|word| word.get()).enumerate().filter_map(|(index, pos)| {\n+            if pos == u32::MAX {\n                 None\n             } else {\n-                let position = u32::from_le(position) as usize;\n-                Some((DefIndex::new(index), Lazy::with_position(position)))\n+                let pos = u32::from_le(pos) as usize;\n+                Some((DefIndex::new(index + DefIndexAddressSpace::High.start()),\n+                                    Lazy::with_position(pos)))\n             }\n-        })\n+        }))\n     }\n }\n "}, {"sha": "a811f72bc956cbe1408c0ff27753d0583ce0f111", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'b, 'tcx> DerefMut for IndexBuilder<'a, 'b, 'tcx> {\n impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     pub fn new(ecx: &'a mut EncodeContext<'b, 'tcx>) -> Self {\n         IndexBuilder {\n-            items: Index::new(ecx.tcx.hir.num_local_def_ids()),\n+            items: Index::new(ecx.tcx.hir.definitions().def_index_counts_lo_hi()),\n             ecx: ecx,\n         }\n     }"}, {"sha": "2fbdb8c0de676dec7f7921e3037e9c6410811c0f", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedb7bbbbf272226f327b8cda8aaa12cf6325eca/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=dedb7bbbbf272226f327b8cda8aaa12cf6325eca", "patch": "@@ -20,7 +20,6 @@\n #![feature(box_patterns)]\n #![feature(conservative_impl_trait)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(stage0, feature(field_init_shorthand))]\n #![feature(i128_type)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]"}]}