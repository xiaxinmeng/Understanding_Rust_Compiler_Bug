{"sha": "92034e20c86bf3497b855dc3a756bfadae8ec006", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMDM0ZTIwYzg2YmYzNDk3Yjg1NWRjM2E3NTZiZmFkYWU4ZWMwMDY=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-15T16:14:08Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-09-20T12:38:47Z"}, "message": "Use span_suggestion_with_applicability instead of span_suggestion", "tree": {"sha": "37e5067ff89dc46415d332f77fa761b5c1e12818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e5067ff89dc46415d332f77fa761b5c1e12818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92034e20c86bf3497b855dc3a756bfadae8ec006", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAlujlNcACgkQnxhOEWSD\nEYGG6g//bcbBjbARheOtjD0Z39RNwhbpxze6pmteCHhQC81uLQxXfxLmYXQTZ+pi\nOQ89R5Jv1oX/93sRPuNvfw652kGGWOBtrwbJ0usPEt4+Ak0jPtMFS3rl1AkKGIy1\nqd/DwB/ROBIjD6BxqZNzpSZUcAduW4uEBQ7rr2PwDKrv9UrF8pGbS8DXNBKLepnL\n1Ftxsb5mSu9/M+dlIwTaBrR7HGuWucoQbwzncVzDXUewIsbZQmvX7WJIZp3Xy7Hc\nUeHEiqscNpSNYD6TsWo4KjDUTjOHKA90EFln1YGpzyNrM2GasWjJxtqgsajjtADd\ngP6iuFzzV0WGHB2DoIoR5BqMAW1BFHpxWjLufYu9dNdCpffx6AdB1I2g0n5opOlO\nOgqMcFQ6A36q9WRCTYns3IV5khHH861Q7k37gthuwif7EJ/CZhKeSS6HEaltzqaI\nJvE02qlYKOOvbngZ5u0PBvfoGk6Axwslko8UF+u04EmXun7qCqGH7oazkovzF8n9\n0vgCeDdESoqJiikqrlBxmUt/pgnhrg9m+SsOIw8a2bIPvyCVeZfzcTkQOCxVb6s7\ndQjymJntD5tjA7en/4KLd2Fw7XIA9IJMYdd6iHynOs5BLuG6rT4wlO7yknGvG1XD\neMW0qTWZdUImCObmoPPNTrbUNfrW27F8PdafnIrYP6q47kWR9iw=\n=pg2o\n-----END PGP SIGNATURE-----", "payload": "tree 37e5067ff89dc46415d332f77fa761b5c1e12818\nparent c0c770c60bb52f50c27f9d32c13842737906509e\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537028048 +0300\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1537447127 +0200\n\nUse span_suggestion_with_applicability instead of span_suggestion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92034e20c86bf3497b855dc3a756bfadae8ec006", "html_url": "https://github.com/rust-lang/rust/commit/92034e20c86bf3497b855dc3a756bfadae8ec006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92034e20c86bf3497b855dc3a756bfadae8ec006/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0c770c60bb52f50c27f9d32c13842737906509e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c770c60bb52f50c27f9d32c13842737906509e", "html_url": "https://github.com/rust-lang/rust/commit/c0c770c60bb52f50c27f9d32c13842737906509e"}], "stats": {"total": 449, "additions": 367, "deletions": 82}, "files": [{"sha": "5cf714bed86a08cc897baf18befa4315edc5fd4d", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -6,6 +6,7 @@ use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::syntax::ast;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for `a = a op b` or `a = b commutative_op a`\n /// patterns.\n@@ -78,7 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n                                         let long =\n                                             format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             expr.span,\n                                             &format!(\n                                                 \"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n@@ -89,8 +90,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                                 long\n                                             ),\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                            Applicability::Unspecified,\n                                         );\n-                                        db.span_suggestion(expr.span, \"or\", long);\n+                                        db.span_suggestion_with_applicability(\n+                                            expr.span, \n+                                            \"or\", \n+                                            long,\n+                                            Applicability::Unspecified,\n+                                            );\n                                     }\n                                 },\n                             );\n@@ -172,10 +179,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                     if let (Some(snip_a), Some(snip_r)) =\n                                         (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n                                     {\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             expr.span,\n                                             \"replace it with\",\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                            Applicability::Unspecified,\n                                         );\n                                     }\n                                 },"}, {"sha": "197aa88cbbea39351214a4dd9642d29a482405ac", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -13,6 +13,7 @@ use crate::rustc::ty::{self, TyCtxt};\n use semver::Version;\n use crate::syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use crate::syntax::source_map::Span;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics.\n@@ -203,7 +204,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                                             \"useless lint attribute\",\n                                             |db| {\n                                                 sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                db.span_suggestion(line_span, \"if you just forgot a `!`, use\", sugg);\n+                                                db.span_suggestion_with_applicability(\n+                                                    line_span,\n+                                                    \"if you just forgot a `!`, use\",\n+                                                    sugg,\n+                                                    Applicability::Unspecified,\n+                                                    );\n                                             },\n                                         );\n                                     }"}, {"sha": "52c6d4c71dcf0660be5031efe59b39b0d7548068", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::source_map::Span;\n use crate::utils::{span_lint, span_lint_and_then};\n use crate::utils::sugg::Sugg;\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for incompatible bit masks in comparisons.\n ///\n@@ -138,7 +139,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n                                    \"bit mask could be simplified with a call to `trailing_zeros`\",\n                                    |db| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n-                    db.span_suggestion(e.span, \"try\", format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()));\n+                    db.span_suggestion_with_applicability(\n+                        e.span,\n+                        \"try\",\n+                        format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n+                        Applicability::Unspecified,\n+                        );\n                 });\n             }\n         }"}, {"sha": "85f6eeb19ef9f22294710dd27dfd218ed3aa6f83", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -6,6 +6,7 @@ use crate::syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n use crate::syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n use crate::rustc_data_structures::thin_vec::ThinVec;\n use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq, get_trait_def_id, implements_trait};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for boolean expressions that can be written more\n /// concisely.\n@@ -390,10 +391,11 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                     \"this expression can be optimized out by applying boolean operations to the \\\n                                      outer expression\",\n                                 );\n-                                db.span_suggestion(\n+                                db.span_suggestion_with_applicability(\n                                     e.span,\n                                     \"it would look like the following\",\n                                     suggest(self.cx, suggestion, &h2q.terminals).0,\n+                                    Applicability::Unspecified,\n                                 );\n                             },\n                         );"}, {"sha": "c139b0f0c1f15029542e8e332ae00306235b7859", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -19,6 +19,7 @@ use crate::syntax::ast;\n \n use crate::utils::{in_macro, snippet_block, span_lint_and_sugg, span_lint_and_then};\n use crate::utils::sugg::Sugg;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for nested `if` statements which can be collapsed\n /// by `&&`-combining their conditions and for `else { if ... }` expressions\n@@ -133,11 +134,13 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n-                db.span_suggestion(expr.span,\n+                db.span_suggestion_with_applicability(expr.span,\n                                    \"try\",\n                                    format!(\"if {} {}\",\n                                            lhs.and(&rhs),\n-                                           snippet_block(cx, content.span, \"..\")));\n+                                           snippet_block(cx, content.span, \"..\")),\n+                                    Applicability::Unspecified,\n+                                    );\n             });\n         }\n     }"}, {"sha": "92c609d9858d47e656abc0e58a782abad895254c", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -2,6 +2,7 @@ use crate::syntax::ast::*;\n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime.\n ///\n@@ -60,7 +61,12 @@ impl StaticConst {\n                                     lifetime.ident.span,\n                                     \"Constants have by default a `'static` lifetime\",\n                                     |db| {\n-                                        db.span_suggestion(ty.span, \"consider removing `'static`\", sugg);\n+                                        db.span_suggestion_with_applicability(\n+                                            ty.span, \n+                                            \"consider removing `'static`\",\n+                                            sugg,\n+                                            Applicability::Unspecified,\n+                                            );\n                                     },\n                                 );\n                             }"}, {"sha": "04a297e5e7e99413e1e3757497a47dfcba5159f5", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -202,7 +202,8 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n                 |db| {\n                     db.span_note(i.body.span, \"same as this\");\n \n-                    // Note: this does not use `span_suggestion` on purpose: there is no clean way\n+                    // Note: this does not use `span_suggestion_with_applicability` on purpose:\n+                    // there is no clean way\n                     // to remove the other arm. Building a span and suggest to replace it to \"\"\n                     // makes an even more confusing error message. Also in order not to make up a\n                     // span for the whole pattern, the suggestion is only shown when there is only"}, {"sha": "be9af18c911225ea146e8e63d61418db0c09a9a0", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -6,6 +6,7 @@ use if_chain::if_chain;\n use crate::syntax::source_map::Span;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for uses of `contains_key` + `insert` on `HashMap`\n /// or `BTreeMap`.\n@@ -139,14 +140,24 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, params[1].span, \"..\"),\n                                            snippet(self.cx, params[2].span, \"..\"));\n \n-                        db.span_suggestion(self.span, \"consider using\", help);\n+                        db.span_suggestion_with_applicability(\n+                                self.span,\n+                                \"consider using\",\n+                                help,\n+                                Applicability::Unspecified,\n+                                );\n                     }\n                     else {\n                         let help = format!(\"{}.entry({})\",\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_suggestion(self.span, \"consider using\", help);\n+                        db.span_suggestion_with_applicability(\n+                                self.span,\n+                                \"consider using\",\n+                                help,\n+                                Applicability::Unspecified,\n+                                );\n                     }\n                 });\n             }"}, {"sha": "2ad04cd6fbe284107c5bb0065be2fa788cfff574", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -2,6 +2,7 @@ use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for equal operands to comparison, logical and\n /// bitwise, difference and division binary operators (`==`, `>`, etc., `&&`,\n@@ -113,7 +114,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         } else if lcpy && !rcpy && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n+                                db.span_suggestion_with_applicability(\n+                                        left.span,\n+                                        \"use the left value directly\",\n+                                        lsnip,\n+                                        Applicability::Unspecified,\n+                                        );\n                             })\n                         } else if !lcpy && rcpy && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()]) {\n                             span_lint_and_then(\n@@ -123,7 +129,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                 \"needlessly taken reference of right operand\",\n                                 |db| {\n                                     let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                    db.span_suggestion(right.span, \"use the right value directly\", rsnip);\n+                                    db.span_suggestion_with_applicability(\n+                                        right.span,\n+                                        \"use the right value directly\",\n+                                        rsnip,\n+                                        Applicability::Unspecified,);\n                                 },\n                             )\n                         }\n@@ -135,7 +145,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         if (requires_ref || lcpy) && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n+                                db.span_suggestion_with_applicability(\n+                                        left.span,\n+                                        \"use the left value directly\",\n+                                        lsnip,\n+                                        Applicability::Unspecified,\n+                                        );\n                             })\n                         }\n                     },\n@@ -146,7 +161,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         if (requires_ref || rcpy) && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n                                 let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                db.span_suggestion(right.span, \"use the right value directly\", rsnip);\n+                                db.span_suggestion_with_applicability(\n+                                        right.span,\n+                                        \"use the right value directly\",\n+                                        rsnip,\n+                                        Applicability::Unspecified,\n+                                        );\n                             })\n                         }\n                     },"}, {"sha": "b40ff8b51cd193b265d55f55cfac9a9fbba6e49b", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -3,6 +3,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::ty;\n use crate::rustc::hir::*;\n use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n #[allow(missing_copy_implementations)]\n pub struct EtaPass;\n@@ -96,7 +97,12 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n             }\n             span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n                 if let Some(snippet) = snippet_opt(cx, caller.span) {\n-                    db.span_suggestion(expr.span, \"remove closure as shown\", snippet);\n+                    db.span_suggestion_with_applicability(\n+                            expr.span,\n+                            \"remove closure as shown\",\n+                            snippet,\n+                            Applicability::Unspecified,\n+                            );\n                 }\n             });\n         }"}, {"sha": "868b7c19cef1f730e6d93b4ad4fa313889b84039", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::ast::LitKind;\n use crate::syntax_pos::Span;\n use crate::utils::paths;\n use crate::utils::{in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for the use of `format!(\"string literal with no\n /// argument\")` and `format!(\"{}\", foo)` where `foo` is a string.\n@@ -60,7 +61,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         then {\n                             let sugg = format!(\"{}.to_string()\", snippet(cx, format_arg, \"<arg>\").into_owned());\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion(expr.span, \"consider using .to_string()\", sugg);\n+                                db.span_suggestion_with_applicability(\n+                                        expr.span,\n+                                        \"consider using .to_string()\",\n+                                        sugg,\n+                                        Applicability::Unspecified,\n+                                        );\n                             });\n                         }\n                     }\n@@ -70,7 +76,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     if tup.is_empty() {\n                         let sugg = format!(\"{}.to_string()\", snippet(cx, expr.span, \"<expr>\").into_owned());\n                         span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                            db.span_suggestion(span, \"consider using .to_string()\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                    span,\n+                                    \"consider using .to_string()\",\n+                                    sugg,\n+                                    Applicability::Unspecified,\n+                                    );\n                         });\n                     }\n                 },"}, {"sha": "2a764ad73d4763b84a5c4264f489d5d640cc1a10", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -4,6 +4,7 @@ use crate::rustc::hir::*;\n use crate::syntax::ast::NodeId;\n use crate::utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n use crate::utils::{opt_def_id, paths, resolve_node};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for always-identical `Into`/`From`/`IntoIter` conversions.\n ///\n@@ -63,7 +64,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion(e.span, \"consider removing `.into()`\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                    e.span,\n+                                    \"consider removing `.into()`\",\n+                                    sugg,\n+                                    Applicability::Unspecified,\n+                                    );\n                         });\n                     }\n                 }\n@@ -73,7 +79,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion(e.span, \"consider removing `.into_iter()`\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                    e.span,\n+                                    \"consider removing `.into_iter()`\",\n+                                    sugg,\n+                                    Applicability::Unspecified,\n+                                    );\n                         });\n                     }\n                 }\n@@ -88,7 +99,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                             let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                             let sugg_msg = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                             span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                                db.span_suggestion(e.span, &sugg_msg, sugg);\n+                                db.span_suggestion_with_applicability(\n+                                        e.span,\n+                                        &sugg_msg,\n+                                        sugg,\n+                                        Applicability::Unspecified,\n+                                        );\n                             });\n                         }\n                     }"}, {"sha": "64d088d2a9912368d8db7bf0c3b1acf0cff2d4f4", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -2,6 +2,7 @@ use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Lint for redundant pattern matching over `Result` or\n /// `Option`\n@@ -77,10 +78,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n                     |db| {\n                         let span = expr.span.with_hi(op.span.hi());\n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             span,\n                             \"try this\",\n                             format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method),\n+                            Applicability::Unspecified,\n                         );\n                     },\n                 );"}, {"sha": "4608ca696e1e72d92c5d3e8ebbd8891c6556ea15", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -2,6 +2,7 @@\n \n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n@@ -152,7 +153,12 @@ impl IntPlusOne {\n \n     fn emit_warning(&self, cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n         span_lint_and_then(cx, INT_PLUS_ONE, block.span, \"Unnecessary `>= y + 1` or `x - 1 >=`\", |db| {\n-            db.span_suggestion(block.span, \"change `>= y + 1` to `> y` as shown\", recommendation);\n+            db.span_suggestion_with_applicability(\n+                    block.span,\n+                    \"change `>= y + 1` to `> y` as shown\",\n+                    recommendation,\n+                    Applicability::Unspecified,\n+                    );\n         });\n     }\n }"}, {"sha": "8ff53e15c314bcc9fb669d94ef2a6600c02c63ef", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -5,6 +5,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use crate::utils::{snippet_opt, span_lint_and_then};\n use crate::rustc::ty::layout::LayoutOf;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for large size differences between variants on\n /// `enum`s.\n@@ -96,11 +97,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                                     VariantData::Unit(_) => unreachable!(),\n                                 };\n                                 if let Some(snip) = snippet_opt(cx, span) {\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         span,\n                                         \"consider boxing the large fields to reduce the total size of the \\\n                                          enum\",\n                                         format!(\"Box<{}>\", snip),\n+                                        Applicability::Unspecified,\n                                     );\n                                     return;\n                                 }"}, {"sha": "4947715e293d6778fcb96678542a8f061a83763e", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -6,6 +6,7 @@ use crate::rustc::hir::BindingAnnotation;\n use crate::rustc::hir::def::Def;\n use crate::syntax::ast;\n use crate::utils::{snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for variable declarations immediately followed by a\n /// conditional affectation.\n@@ -120,9 +121,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                                        span,\n                                        \"`if _ { .. } else { .. }` is an expression\",\n                                        |db| {\n-                                           db.span_suggestion(span,\n-                                                              \"it is more idiomatic to write\",\n-                                                              sug);\n+                                           db.span_suggestion_with_applicability(\n+                                                    span,\n+                                                    \"it is more idiomatic to write\",\n+                                                    sug,\n+                                                    Applicability::Unspecified,\n+                                                    );\n                                            if !mutability.is_empty() {\n                                                db.note(\"you might not need `mut` at all\");\n                                            }"}, {"sha": "70608b9895fdc27ca75ea23098b748d1a8fee5ac", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -1196,7 +1196,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                         expr.span,\n                         \"this range is empty so this for loop will never run\",\n                         |db| {\n-                            db.span_suggestion(\n+                            db.span_suggestion_with_applicability(\n                                 arg.span,\n                                 \"consider using the following if you are attempting to iterate over this \\\n                                  range in reverse\",\n@@ -1206,6 +1206,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                                     dots = dots,\n                                     start = start_snippet\n                                 ),\n+                                Applicability::Unspecified,\n                             );\n                         },\n                     );"}, {"sha": "5f592a722d1d4f43033ed111ea5dea371112107a", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -228,7 +228,12 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                                          snippet(cx, binding.pat.span, \"_\"),\n                                          snippet(cx, var_arg.span, \"_\"),\n                                          snippet(cx, reduced_expr_span, \"_\"));\n-                db.span_suggestion(stmt.span, \"try this\", suggestion);\n+                db.span_suggestion_with_applicability(\n+                        stmt.span,\n+                        \"try this\",\n+                        suggestion,\n+                        Applicability::Unspecified,\n+                        );\n             } else {\n                 let suggestion = format!(\"if let {0}({1}) = {2} {{ ... }}\",\n                                          variant,"}, {"sha": "7cc70cb0834b0589e453dec5a9232479d4d8f45d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -12,6 +12,7 @@ use crate::utils::{expr_block, is_allowed, is_expn_of, match_qpath, match_type,\n             remove_blocks, snippet, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty};\n use crate::utils::sugg::Sugg;\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n /// will usually suffice.\n@@ -339,7 +340,12 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Ex\n                         };\n \n                         if let Some(sugg) = sugg {\n-                            db.span_suggestion(expr.span, \"consider using an if/else expression\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"consider using an if/else expression\",\n+                                    sugg,\n+                                    Applicability::Unspecified,\n+                                    );\n                         }\n                     }\n                 }"}, {"sha": "f61995cf26509cd472c64c57fc13ae855da609f6", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -17,6 +17,7 @@ use crate::utils::{get_arg_name, get_trait_def_id, implements_trait, in_macro, i\n use crate::utils::paths;\n use crate::utils::sugg;\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n #[derive(Clone)]\n pub struct Pass;\n@@ -1127,8 +1128,18 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                     let refs: String = iter::repeat('&').take(n + 1).collect();\n                     let derefs: String = iter::repeat('*').take(n).collect();\n                     let explicit = format!(\"{}{}::clone({})\", refs, ty, snip);\n-                    db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()));\n-                    db.span_suggestion(expr.span, \"or try being explicit about what type to clone\", explicit);\n+                    db.span_suggestion_with_applicability(\n+                            expr.span,\n+                            \"try dereferencing it\",\n+                            format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n+                            Applicability::Unspecified,\n+                            );\n+                    db.span_suggestion_with_applicability(\n+                            expr.span, \n+                            \"or try being explicit about what type to clone\", \n+                            explicit,\n+                            Applicability::Unspecified,\n+                            );\n                 },\n             );\n             return; // don't report clone_on_copy\n@@ -1169,7 +1180,12 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n         }\n         span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |db| {\n             if let Some((text, snip)) = snip {\n-                db.span_suggestion(expr.span, text, snip);\n+                db.span_suggestion_with_applicability(\n+                    expr.span,\n+                    text,\n+                    snip,\n+                    Applicability::Unspecified,\n+                    );\n             }\n         });\n     }\n@@ -1639,7 +1655,12 @@ fn lint_map_or_none<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n             let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n             span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n-                db.span_suggestion(expr.span, \"try using and_then instead\", hint);\n+                db.span_suggestion_with_applicability(\n+                        expr.span,\n+                        \"try using and_then instead\",\n+                        hint,\n+                        Applicability::Unspecified,\n+                        );\n             });\n         }\n     }"}, {"sha": "ac4e93f633a20ec4628102f204fc0cf8dc23be2a", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -13,6 +13,7 @@ use crate::utils::{get_item_name, get_parent_expr, implements_trait, in_constant\n use crate::utils::sugg::Sugg;\n use crate::syntax::ast::{LitKind, CRATE_NODE_ID};\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for function arguments and let bindings denoted as\n /// `ref`.\n@@ -294,12 +295,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         l.pat.span,\n                         \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n                         |db| {\n-                            db.span_suggestion(s.span,\n+                            db.span_suggestion_with_applicability(s.span,\n                                                \"try\",\n                                                format!(\"let {name}{tyopt} = {initref};\",\n                                                        name=snippet(cx, i.span, \"_\"),\n                                                        tyopt=tyopt,\n-                                                       initref=initref));\n+                                                       initref=initref),\n+                                               Applicability::Unspecified,\n+                                               );\n                         }\n                     );\n                 }\n@@ -317,8 +320,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n                     |db| {\n                         let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n-                        db.span_suggestion(s.span, \"replace it with\",\n-                                           format!(\"if {} {{ {}; }}\", sugg, &snippet(cx, b.span, \"..\")));\n+                        db.span_suggestion_with_applicability(\n+                                           s.span, \n+                                           \"replace it with\",\n+                                           format!(\"if {} {{ {}; }}\",\n+                                                sugg, \n+                                                &snippet(cx, b.span, \"..\")),\n+                                           Applicability::Unspecified,\n+                                           );\n                     });\n             }\n         };\n@@ -363,10 +372,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             expr.span,\n                             \"consider comparing them within some error\",\n                             format!(\"({}).abs() < error\", lhs - rhs),\n+                            Applicability::Unspecified,\n                         );\n                         db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n                     });\n@@ -534,7 +544,12 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n                     }\n                 }\n             }\n-            db.span_suggestion(expr.span, \"try\", snip.to_string());\n+            db.span_suggestion_with_applicability(\n+                        expr.span, \n+                        \"try\",\n+                        snip.to_string(),\n+                        Applicability::Unspecified,\n+                        );\n         },\n     );\n }"}, {"sha": "c66fb5d6e47f66a93be1bbc03f191aed69bc5a83", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::ast::*;\n use crate::syntax::source_map::Span;\n use crate::syntax::visit::FnKind;\n use crate::utils::{constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for structure field patterns bound to wildcards.\n ///\n@@ -307,7 +308,12 @@ impl EarlyLintPass for MiscEarly {\n                         \"Try not to call a closure in the expression where it is declared.\",\n                         |db| if decl.inputs.is_empty() {\n                             let hint = snippet(cx, block.span, \"..\").into_owned();\n-                            db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n+                            db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"Try doing something like: \",\n+                                    hint,\n+                                    Applicability::Unspecified,\n+                                    );\n                         },\n                     );\n                 }\n@@ -392,15 +398,17 @@ impl MiscEarly {\n                                         lit.span,\n                                         \"this is a decimal constant\",\n                                         |db| {\n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             lit.span,\n                             \"if you mean to use a decimal constant, remove the `0` to remove confusion\",\n                             src.trim_left_matches(|c| c == '_' || c == '0').to_string(),\n+                            Applicability::Unspecified,\n                         );\n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             lit.span,\n                             \"if you mean to use an octal constant, use `0o`\",\n                             format!(\"0o{}\", src.trim_left_matches(|c| c == '_' || c == '0')),\n+                            Applicability::Unspecified,\n                         );\n                     });\n                 }"}, {"sha": "11e1a99fd7fcdf1e82e0630bdde2334bf8e81f07", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -9,6 +9,7 @@ use crate::rustc::hir::{BindingAnnotation, Expr, ExprKind, MutImmutable, Pat, Pa\n use crate::rustc::ty;\n use crate::rustc::ty::adjustment::{Adjust, Adjustment};\n use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for address of operations (`&`) that are going to\n /// be dereferenced immediately by the compiler.\n@@ -75,7 +76,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                              by the compiler\",\n                             |db| {\n                                 if let Some(snippet) = snippet_opt(cx, inner.span) {\n-                                    db.span_suggestion(e.span, \"change this to\", snippet);\n+                                    db.span_suggestion_with_applicability(\n+                                                e.span, \n+                                                \"change this to\",\n+                                                snippet,\n+                                                Applicability::Unspecified,\n+                                                );\n                                 }\n                             },\n                         );\n@@ -103,7 +109,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                     \"this pattern creates a reference to a reference\",\n                     |db| {\n                         if let Some(snippet) = snippet_opt(cx, name.span) {\n-                            db.span_suggestion(pat.span, \"change this to\", snippet);\n+                            db.span_suggestion_with_applicability(\n+                                    pat.span,\n+                                    \"change this to\",\n+                                    snippet,\n+                                    Applicability::Unspecified,\n+                                    );\n                         }\n                     }\n                 )"}, {"sha": "08ce0de21c6f531372ed70b36be848277524ee14", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -7,6 +7,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for useless borrowed references.\n ///\n@@ -77,7 +78,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n                                    \"this pattern takes a reference on something that is being de-referenced\",\n                                    |db| {\n                                        let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n-                                       db.span_suggestion(pat.span, \"try removing the `&ref` part and just keep\", hint);\n+                                       db.span_suggestion_with_applicability(\n+                                            pat.span, \n+                                            \"try removing the `&ref` part and just keep\",\n+                                            hint,\n+                                            Applicability::Unspecified,\n+                                            );\n                                    });\n             }\n         }"}, {"sha": "aa644e4c3398f902f68486370482fa1e6b348447", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -17,6 +17,7 @@ use crate::utils::{get_trait_def_id, implements_trait, in_macro, is_copy, is_sel\n             snippet, snippet_opt, span_lint_and_then};\n use crate::utils::ptr::get_spans;\n use std::borrow::Cow;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for functions taking arguments by value, but not\n /// consuming them in its\n@@ -227,19 +228,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 }).unwrap());\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n-                                db.span_suggestion(input.span,\n+                                db.span_suggestion_with_applicability(\n+                                                input.span,\n                                                 \"consider changing the type to\",\n-                                                slice_ty);\n+                                                slice_ty,\n+                                                Applicability::Unspecified,\n+                                                );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x)),\n                                             ),\n-                                        suggestion.into()\n+                                        suggestion.into(),\n+                                        Applicability::Unspecified,\n                                     );\n                                 }\n \n@@ -252,17 +257,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         if match_type(cx, ty, &paths::STRING) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n-                                db.span_suggestion(input.span, \"consider changing the type to\", \"&str\".to_string());\n+                                db.span_suggestion_with_applicability(\n+                                            input.span,\n+                                            \"consider changing the type to\",\n+                                            \"&str\".to_string(),\n+                                            Applicability::Unspecified,\n+                                            );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x))\n                                             ),\n                                         suggestion.into(),\n+                                        Applicability::Unspecified,\n                                     );\n                                 }\n "}, {"sha": "f8d872cb4e6d2d99a37503f99d08f066f2bca92f", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -12,6 +12,7 @@ use crate::syntax::source_map::Span;\n use crate::syntax_pos::MultiSpan;\n use crate::utils::{match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n use crate::utils::ptr::get_spans;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** This lint checks for function arguments of type `&String`\n /// or `&Vec` unless the references are mutable. It will also suggest you\n@@ -181,16 +182,22 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                          with non-Vec-based slices.\",\n                         |db| {\n                             if let Some(ref snippet) = ty_snippet {\n-                                db.span_suggestion(arg.span, \"change this to\", format!(\"&[{}]\", snippet));\n+                                db.span_suggestion_with_applicability(\n+                                            arg.span,\n+                                            \"change this to\",\n+                                            format!(\"&[{}]\", snippet),\n+                                            Applicability::Unspecified,\n+                                            );\n                             }\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion(\n+                                db.span_suggestion_with_applicability(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\n                                         \"change the call to\".into(),\n                                         |x| Cow::Owned(format!(\"change `{}` to\", x)),\n                                     ),\n                                     suggestion.into(),\n+                                    Applicability::Unspecified,\n                                 );\n                             }\n                         },\n@@ -204,15 +211,21 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                         arg.span,\n                         \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n                         |db| {\n-                            db.span_suggestion(arg.span, \"change this to\", \"&str\".into());\n+                            db.span_suggestion_with_applicability(\n+                                    arg.span,\n+                                    \"change this to\",\n+                                    \"&str\".into(),\n+                                    Applicability::Unspecified,\n+                                    );\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion_short(\n+                                db.span_suggestion_short_with_applicability(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\n                                         \"change the call to\".into(),\n                                         |x| Cow::Owned(format!(\"change `{}` to\", x)),\n                                     ),\n                                     suggestion.into(),\n+                                    Applicability::Unspecified,\n                                 );\n                             }\n                         },\n@@ -239,7 +252,12 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                                 arg.span,\n                                 \"using a reference to `Cow` is not recommended.\",\n                                 |db| {\n-                                    db.span_suggestion(arg.span, \"change this to\", \"&\".to_owned() + &r);\n+                                    db.span_suggestion_with_applicability(\n+                                            arg.span,\n+                                            \"change this to\",\n+                                            \"&\".to_owned() + &r,\n+                                            Applicability::Unspecified,\n+                                            );\n                                 },\n                             );\n                         }"}, {"sha": "f4920e52a71035fad9f6972a49680560ba2babf8", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -8,6 +8,7 @@ use crate::syntax::ptr::P;\n \n use crate::utils::{match_def_path, match_type, span_lint_and_then};\n use crate::utils::paths::*;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for expressions that could be replaced by the question mark operator\n ///\n@@ -70,10 +71,11 @@ impl QuestionMarkPass {\n                     |db| {\n                         let receiver_str = &Sugg::hir(cx, subject, \"..\");\n \n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             expr.span,\n                             \"replace_it_with\",\n                             format!(\"{}?;\", receiver_str),\n+                            Applicability::Unspecified,\n                         );\n                     }\n                 )"}, {"sha": "8ca0750684e1e8b1d0fb3538b7cf4069160a170a", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::source_map::Spanned;\n use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then, snippet_opt};\n use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n use crate::utils::sugg::Sugg;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n /// which never terminates.\n@@ -150,13 +151,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let end = Sugg::hir(cx, y, \"y\");\n                         if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n                             if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n-                                db.span_suggestion(expr.span,\n+                                db.span_suggestion_with_applicability(expr.span,\n                                            \"use\",\n-                                           format!(\"({}..={})\", start, end));\n+                                           format!(\"({}..={})\", start, end),\n+                                           Applicability::Unspecified,\n+                                           );\n                             } else {\n-                                db.span_suggestion(expr.span,\n+                                db.span_suggestion_with_applicability(expr.span,\n                                            \"use\",\n-                                           format!(\"{}..={}\", start, end));\n+                                           format!(\"{}..={}\", start, end),\n+                                           Applicability::Unspecified,\n+                                           );\n                             }\n                         }\n                     },\n@@ -177,9 +182,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion(expr.span,\n+                        db.span_suggestion_with_applicability(expr.span,\n                                            \"use\",\n-                                           format!(\"{}..{}\", start, end));\n+                                           format!(\"{}..{}\", start, end),\n+                                           Applicability::Unspecified,\n+                                           );\n                     },\n                 );\n             }"}, {"sha": "34b7614e43964876891c8f58bbc44f31bb59812a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -4,6 +4,7 @@ use if_chain::if_chain;\n use crate::syntax::ast;\n use crate::syntax::source_map::Span;\n use crate::syntax::visit::FnKind;\n+use crate::rustc_errors::Applicability;\n \n use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n \n@@ -108,7 +109,12 @@ impl ReturnPass {\n         }\n         span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion(ret_span, \"remove `return` as shown\", snippet);\n+                db.span_suggestion_with_applicability(\n+                            ret_span,\n+                            \"remove `return` as shown\",\n+                            snippet,\n+                            Applicability::Unspecified,\n+                            );\n             }\n         });\n     }"}, {"sha": "8859d545194697d4a75e70e490d07ffc0738ee41", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -6,6 +6,7 @@ use if_chain::if_chain;\n use crate::rustc::ty;\n use crate::utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use crate::utils::sugg::Sugg;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for manual swapping.\n ///\n@@ -136,7 +137,12 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are swapping{} manually\", what),\n                                    |db| {\n                                        if !sugg.is_empty() {\n-                                           db.span_suggestion(span, \"try\", sugg);\n+                                           db.span_suggestion_with_applicability(\n+                                                        span,\n+                                                        \"try\",\n+                                                        sugg,\n+                                                        Applicability::Unspecified,\n+                                                        );\n \n                                            if replace {\n                                                db.note(\"or maybe you should use `std::mem::replace`?\");\n@@ -180,8 +186,14 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are trying to swap{}\", what),\n                                    |db| {\n                                        if !what.is_empty() {\n-                                           db.span_suggestion(span, \"try\",\n-                                                              format!(\"std::mem::swap({}, {})\", lhs, rhs));\n+                                           db.span_suggestion_with_applicability(\n+                                                              span,\n+                                                              \"try\",\n+                                                              format!(\"std::mem::swap({}, {})\",\n+                                                                    lhs,\n+                                                                    rhs),\n+                                                              Applicability::Unspecified,\n+                                                              );\n                                            db.note(\"or maybe you should use `std::mem::replace`?\");\n                                        }\n                                    });"}, {"sha": "cdd0260b4fee5fb4363bf31a274fdfe08d7c5040", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -7,6 +7,7 @@ use std::borrow::Cow;\n use crate::syntax::ast;\n use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use crate::utils::{opt_def_id, sugg};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for transmutes that can't ever be correct on any\n /// architecture.\n@@ -245,7 +246,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                                     };\n \n-                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                    db.span_suggestion_with_applicability(\n+                                                e.span,\n+                                                \"try\",\n+                                                sugg.to_string(),\n+                                                Applicability::Unspecified,\n+                                                );\n                                 },\n                             ),\n                             (&ty::Int(_), &ty::RawPtr(_)) | (&ty::Uint(_), &ty::RawPtr(_)) => {\n@@ -255,7 +261,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     e.span,\n                                     \"transmute from an integer to a pointer\",\n                                     |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                        db.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()).to_string());\n+                                        db.span_suggestion_with_applicability(\n+                                                e.span,\n+                                                \"try\",\n+                                                arg.as_ty(&to_ty.to_string()).to_string(),\n+                                                Applicability::Unspecified,\n+                                                );\n                                     },\n                                 )\n                             },\n@@ -312,7 +323,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))\n                                     };\n \n-                                    db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n+                                    db.span_suggestion_with_applicability(\n+                                                e.span,\n+                                                \"try\",\n+                                                sugg::make_unop(deref, arg).to_string(),\n+                                                Applicability::Unspecified,\n+                                                );\n                                 },\n                             ),\n                             (&ty::Int(ast::IntTy::I32), &ty::Char) |\n@@ -328,10 +344,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     } else {\n                                         arg\n                                     };\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         e.span,\n                                         \"consider using\",\n                                         format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n+                                        Applicability::Unspecified,\n                                     );\n                                 },\n                             ),\n@@ -353,14 +370,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             e.span,\n                                             &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                                             |db| {\n-                                                db.span_suggestion(\n+                                                db.span_suggestion_with_applicability(\n                                                     e.span,\n                                                     \"consider using\",\n                                                     format!(\n                                                         \"std::str::from_utf8{}({}).unwrap()\",\n                                                         postfix,\n                                                         snippet(cx, args[0].span, \"..\"),\n                                                     ),\n+                                                    Applicability::Unspecified,\n                                                 );\n                                             }\n                                         )\n@@ -380,7 +398,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                     } else {\n                                                         sugg_paren.addr_deref()\n                                                     };\n-                                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                                    db.span_suggestion_with_applicability(\n+                                                            e.span,\n+                                                            \"try\",\n+                                                            sugg.to_string(),\n+                                                            Applicability::Unspecified,\n+                                                            );\n                                                 },\n                                             )\n                                         }\n@@ -394,7 +417,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 \"transmute from a pointer to a pointer\",\n                                 |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                     let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n-                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                    db.span_suggestion_with_applicability(\n+                                            e.span,\n+                                            \"try\",\n+                                            sugg.to_string(),\n+                                            Applicability::Unspecified,\n+                                            );\n                                 },\n                             ),\n                             (&ty::Int(ast::IntTy::I8), &ty::Bool) | (&ty::Uint(ast::UintTy::U8), &ty::Bool) => {\n@@ -406,10 +434,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     |db| {\n                                         let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                         let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             e.span,\n                                             \"consider using\",\n                                             sugg::make_binop(ast::BinOpKind::Ne, &arg, &zero).to_string(),\n+                                            Applicability::Unspecified,\n                                         );\n                                     },\n                                 )\n@@ -432,10 +461,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         } else {\n                                             arg\n                                         };\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             e.span,\n                                             \"consider using\",\n                                             format!(\"{}::from_bits({})\", to_ty, arg.to_string()),\n+                                            Applicability::Unspecified,\n                                         );\n                                     },\n                                 )"}, {"sha": "856fa80569f771a0e55a55896da861d861a55a4c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -575,7 +575,7 @@ pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     sugg: String,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |db| {\n-        db.span_suggestion(sp, help, sugg);\n+        db.span_suggestion_with_applicability(sp, help, sugg, Applicability::Unspecified);\n     });\n }\n "}, {"sha": "f7d8c1fc15122526660cdbe2b7b124d680ce630a", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92034e20c86bf3497b855dc3a756bfadae8ec006/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=92034e20c86bf3497b855dc3a756bfadae8ec006", "patch": "@@ -15,6 +15,7 @@ use crate::syntax::util::parser::AssocOp;\n use crate::syntax::ast;\n use crate::utils::{higher, snippet, snippet_opt};\n use crate::syntax_pos::{BytePos, Pos};\n+use crate::rustc_errors::Applicability;\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -496,7 +497,12 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent));\n+            self.span_suggestion_with_applicability(\n+                        span,\n+                        msg,\n+                        format!(\"{}\\n{}\", attr, indent),\n+                        Applicability::Unspecified,\n+                        );\n         }\n     }\n \n@@ -517,7 +523,12 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent));\n+            self.span_suggestion_with_applicability(\n+                        span,\n+                        msg,\n+                        format!(\"{}\\n{}\", new_item, indent),\n+                        Applicability::Unspecified,\n+                        );\n         }\n     }\n \n@@ -534,6 +545,11 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n             }\n         }\n \n-        self.span_suggestion(remove_span, msg, String::new());\n+        self.span_suggestion_with_applicability(\n+                    remove_span,\n+                    msg,\n+                    String::new(),\n+                    Applicability::Unspecified,\n+                    );\n     }\n }"}]}