{"sha": "d95549775143113816133145c82c420e7e782879", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTU0OTc3NTE0MzExMzgxNjEzMzE0NWM4MmM0MjBlN2U3ODI4Nzk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-02T14:26:35Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-02T14:26:35Z"}, "message": "Factor out boolean flags for rewrite_where_clause()", "tree": {"sha": "26d7858b0421f7c64ce0595a0739b12c0591ba18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d7858b0421f7c64ce0595a0739b12c0591ba18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95549775143113816133145c82c420e7e782879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95549775143113816133145c82c420e7e782879", "html_url": "https://github.com/rust-lang/rust/commit/d95549775143113816133145c82c420e7e782879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95549775143113816133145c82c420e7e782879/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae00a44987a0d88bbd8fc5d7f97dcf9f6cfa653", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae00a44987a0d88bbd8fc5d7f97dcf9f6cfa653", "html_url": "https://github.com/rust-lang/rust/commit/9ae00a44987a0d88bbd8fc5d7f97dcf9f6cfa653"}], "stats": {"total": 92, "additions": 55, "deletions": 37}, "files": [{"sha": "172c56b81c71f72cabf1e3c35451c06e070b5483", "filename": "src/items.rs", "status": "modified", "additions": 55, "deletions": 37, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d95549775143113816133145c82c420e7e782879/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95549775143113816133145c82c420e7e782879/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d95549775143113816133145c82c420e7e782879", "patch": "@@ -581,18 +581,17 @@ pub fn format_impl(\n                 .checked_sub(last_line_width(&result))\n                 .unwrap_or(0)\n         };\n+        let option = WhereClauseOption::snuggled(&ref_and_type);\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n             &generics.where_clause,\n             context.config.item_brace_style(),\n             Shape::legacy(where_budget, offset.block_only()),\n             context.config.where_density(),\n             \"{\",\n-            false,\n-            last_line_width(&ref_and_type) == 1,\n-            false,\n             where_span_end,\n             self_ty.span.hi,\n+            option,\n         ));\n \n         if try_opt!(is_impl_single_line(\n@@ -973,18 +972,17 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         } else {\n             type_param_bounds[type_param_bounds.len() - 1].span().hi\n         };\n+        let option = WhereClauseOption::snuggled(&generics_str);\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n             &generics.where_clause,\n             context.config.item_brace_style(),\n             Shape::legacy(where_budget, offset.block_only()),\n             where_density,\n             \"{\",\n-            false,\n-            trait_bound_str.is_empty() && last_line_width(&generics_str) == 1,\n-            false,\n             None,\n             pos_before_where,\n+            option,\n         ));\n         // If the where clause cannot fit on the same line,\n         // put the where clause on a new line\n@@ -1206,18 +1204,17 @@ fn format_tuple_struct(\n             result.push_str(&generics_str);\n \n             let where_budget = context.budget(last_line_width(&result));\n+            let option = WhereClauseOption::new(true, false);\n             try_opt!(rewrite_where_clause(\n                 context,\n                 &generics.where_clause,\n                 context.config.item_brace_style(),\n                 Shape::legacy(where_budget, offset.block_only()),\n                 Density::Compressed,\n                 \";\",\n-                true,\n-                false,\n-                false,\n                 None,\n                 body_hi,\n+                option,\n             ))\n         }\n         None => \"\".to_owned(),\n@@ -1303,18 +1300,17 @@ pub fn rewrite_type_alias(\n             .max_width()\n             .checked_sub(last_line_width(&result))\n     );\n+    let option = WhereClauseOption::snuggled(&result);\n     let where_clause_str = try_opt!(rewrite_where_clause(\n         context,\n         &generics.where_clause,\n         context.config.item_brace_style(),\n         Shape::legacy(where_budget, indent),\n         context.config.where_density(),\n         \"=\",\n-        true,\n-        true,\n-        false,\n         Some(span.hi),\n         generics.span.hi,\n+        option,\n     ));\n     result.push_str(&where_clause_str);\n     result.push_str(\" = \");\n@@ -2052,30 +2048,27 @@ fn rewrite_fn_base(\n             Shape::legacy(budget, indent),\n             Density::Compressed,\n             \"{\",\n-            true,\n-            false, // Force where clause on the next line\n-            true,  // Compress where\n             Some(span.hi),\n             pos_before_where,\n+            WhereClauseOption::compressed(),\n         ) {\n             result.push_str(&where_clause_str);\n             force_new_line_for_brace |= last_line_contains_single_line_comment(&result);\n             return Some((result, force_new_line_for_brace));\n         }\n     }\n \n+    let option = WhereClauseOption::new(!has_braces, put_args_in_block && ret_str.is_empty());\n     let where_clause_str = try_opt!(rewrite_where_clause(\n         context,\n         where_clause,\n         context.config.fn_brace_style(),\n         Shape::indented(indent, context.config),\n         Density::Tall,\n         \"{\",\n-        !has_braces,\n-        put_args_in_block && ret_str.is_empty(),\n-        false,\n         Some(span.hi),\n         pos_before_where,\n+        option,\n     ));\n \n     result.push_str(&where_clause_str);\n@@ -2084,6 +2077,38 @@ fn rewrite_fn_base(\n     return Some((result, force_new_line_for_brace));\n }\n \n+struct WhereClauseOption {\n+    suppress_comma: bool, // Force no trailing comma\n+    snuggle: bool,        // Do not insert newline before `where`\n+    compress_where: bool, // Try single line where clause instead of vertical layout\n+}\n+\n+impl WhereClauseOption {\n+    pub fn new(suppress_comma: bool, snuggle: bool) -> WhereClauseOption {\n+        WhereClauseOption {\n+            suppress_comma: suppress_comma,\n+            snuggle: snuggle,\n+            compress_where: false,\n+        }\n+    }\n+\n+    pub fn compressed() -> WhereClauseOption {\n+        WhereClauseOption {\n+            suppress_comma: true,\n+            snuggle: false,\n+            compress_where: true,\n+        }\n+    }\n+\n+    pub fn snuggled(current: &str) -> WhereClauseOption {\n+        WhereClauseOption {\n+            suppress_comma: false,\n+            snuggle: trimmed_last_line_width(current) == 1,\n+            compress_where: false,\n+        }\n+    }\n+}\n+\n fn last_line_contains_single_line_comment(s: &str) -> bool {\n     s.lines().last().map_or(false, |l| l.contains(\"//\"))\n }\n@@ -2487,13 +2512,9 @@ fn rewrite_where_clause_rfc_style(\n     where_clause: &ast::WhereClause,\n     shape: Shape,\n     terminator: &str,\n-    suppress_comma: bool,\n-    // where clause can be kept on the current line.\n-    snuggle: bool,\n-    // copmressed single where clause\n-    compress_where: bool,\n     span_end: Option<BytePos>,\n     span_end_before_where: BytePos,\n+    where_clause_option: WhereClauseOption,\n ) -> Option<String> {\n     let block_shape = shape.block().with_max_width(context.config);\n \n@@ -2506,7 +2527,7 @@ fn rewrite_where_clause_rfc_style(\n         shape,\n     ));\n \n-    let starting_newline = if snuggle && comment_before.is_empty() {\n+    let starting_newline = if where_clause_option.snuggle && comment_before.is_empty() {\n         \" \".to_owned()\n     } else {\n         \"\\n\".to_owned() + &block_shape.indent.to_string(context.config)\n@@ -2530,7 +2551,7 @@ fn rewrite_where_clause_rfc_style(\n         span_start,\n         span_end,\n     );\n-    let comma_tactic = if suppress_comma {\n+    let comma_tactic = if where_clause_option.suppress_comma {\n         SeparatorTactic::Never\n     } else {\n         context.config.trailing_comma()\n@@ -2557,8 +2578,10 @@ fn rewrite_where_clause_rfc_style(\n     } else {\n         \"\\n\".to_owned() + &clause_shape.indent.to_string(context.config)\n     };\n-    let clause_sep = if compress_where && comment_before.is_empty() && comment_after.is_empty() &&\n-        !preds_str.contains('\\n') && 6 + preds_str.len() <= shape.width\n+    // 6 = `where `\n+    let clause_sep = if where_clause_option.compress_where && comment_before.is_empty() &&\n+        comment_after.is_empty() && !preds_str.contains('\\n') &&\n+        6 + preds_str.len() <= shape.width\n     {\n         String::from(\" \")\n     } else {\n@@ -2583,11 +2606,9 @@ fn rewrite_where_clause(\n     shape: Shape,\n     density: Density,\n     terminator: &str,\n-    suppress_comma: bool,\n-    snuggle: bool,\n-    compress_where: bool,\n     span_end: Option<BytePos>,\n     span_end_before_where: BytePos,\n+    where_clause_option: WhereClauseOption,\n ) -> Option<String> {\n     if where_clause.predicates.is_empty() {\n         return Some(String::new());\n@@ -2599,11 +2620,9 @@ fn rewrite_where_clause(\n             where_clause,\n             shape,\n             terminator,\n-            suppress_comma,\n-            snuggle,\n-            compress_where,\n             span_end,\n             span_end_before_where,\n+            where_clause_option,\n         );\n     }\n \n@@ -2646,7 +2665,7 @@ fn rewrite_where_clause(\n \n     let mut comma_tactic = context.config.trailing_comma();\n     // Kind of a hack because we don't usually have trailing commas in where clauses.\n-    if comma_tactic == SeparatorTactic::Vertical || suppress_comma {\n+    if comma_tactic == SeparatorTactic::Vertical || where_clause_option.suppress_comma {\n         comma_tactic = SeparatorTactic::Never;\n     }\n \n@@ -2753,18 +2772,17 @@ fn format_generics(\n             .max_width()\n             .checked_sub(last_line_used_width(&result, offset.width()))\n             .unwrap_or(0);\n+        let option = WhereClauseOption::snuggled(&result);\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n             &generics.where_clause,\n             brace_style,\n             Shape::legacy(budget, offset.block_only()),\n             Density::Tall,\n             terminator,\n-            false,\n-            trimmed_last_line_width(&result) == 1,\n-            false,\n             Some(span.hi),\n             generics.span.hi,\n+            option,\n         ));\n         result.push_str(&where_clause_str);\n         force_same_line_brace || brace_style == BraceStyle::PreferSameLine ||"}]}