{"sha": "99be5221bcb958dd8532ac34ba9166d8c784a341", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YmU1MjIxYmNiOTU4ZGQ4NTMyYWMzNGJhOTE2NmQ4Yzc4NGEzNDE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-13T06:20:27Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-13T06:31:24Z"}, "message": "Apply review suggestions\n\nFix grammar errors and use `Pat::is_rest` instead of own function.", "tree": {"sha": "d96df46bd6ab3b470049059ac2a0611b1ba98d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96df46bd6ab3b470049059ac2a0611b1ba98d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99be5221bcb958dd8532ac34ba9166d8c784a341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99be5221bcb958dd8532ac34ba9166d8c784a341", "html_url": "https://github.com/rust-lang/rust/commit/99be5221bcb958dd8532ac34ba9166d8c784a341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99be5221bcb958dd8532ac34ba9166d8c784a341/comments", "author": null, "committer": null, "parents": [{"sha": "00ca42fe5bcd1eb412f4486237abf4ae586de99a", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ca42fe5bcd1eb412f4486237abf4ae586de99a", "html_url": "https://github.com/rust-lang/rust/commit/00ca42fe5bcd1eb412f4486237abf4ae586de99a"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "d991d499764c87f590a9149d7e3e640060055f51", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99be5221bcb958dd8532ac34ba9166d8c784a341/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be5221bcb958dd8532ac34ba9166d8c784a341/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=99be5221bcb958dd8532ac34ba9166d8c784a341", "patch": "@@ -197,7 +197,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for tuple patterns with a wildcard\n-    /// pattern (`_`) is next to a rest pattern (`..`) pattern.\n+    /// pattern (`_`) is next to a rest pattern (`..`).\n     ///\n     /// **Why is this bad?** The wildcard pattern is unneeded as the rest pattern\n     /// can match that element as well.\n@@ -226,7 +226,7 @@ declare_clippy_lint! {\n     /// ```\n     pub UNNEEDED_WILDCARD_PATTERN,\n     complexity,\n-    \"tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`) pattern\"\n+    \"tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`)\"\n }\n \n declare_lint_pass!(MiscEarlyLints => [\n@@ -576,14 +576,6 @@ fn check_unneeded_wildcard_pattern(cx: &EarlyContext<'_>, pat: &Pat) {\n             );\n         }\n \n-        fn is_rest<P: std::ops::Deref<Target = Pat>>(pat: &P) -> bool {\n-            if let PatKind::Rest = pat.node {\n-                true\n-            } else {\n-                false\n-            }\n-        }\n-\n         #[allow(clippy::trivially_copy_pass_by_ref)]\n         fn is_wild<P: std::ops::Deref<Target = Pat>>(pat: &&P) -> bool {\n             if let PatKind::Wild = pat.node {\n@@ -593,7 +585,7 @@ fn check_unneeded_wildcard_pattern(cx: &EarlyContext<'_>, pat: &Pat) {\n             }\n         }\n \n-        if let Some(rest_index) = patterns.iter().position(is_rest) {\n+        if let Some(rest_index) = patterns.iter().position(|pat| pat.is_rest()) {\n             if let Some((left_index, left_pat)) = patterns[..rest_index]\n                 .iter()\n                 .rev()"}]}