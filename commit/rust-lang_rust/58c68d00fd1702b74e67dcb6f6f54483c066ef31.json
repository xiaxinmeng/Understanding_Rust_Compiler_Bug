{"sha": "58c68d00fd1702b74e67dcb6f6f54483c066ef31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YzY4ZDAwZmQxNzAyYjc0ZTY3ZGNiNmY2ZjU0NDgzYzA2NmVmMzE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-22T04:41:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-27T03:58:38Z"}, "message": "Pass symbols to `ExtCtxt::std_path` instead of strings.\n\nBecause this function is hot.\n\nAlso remove the dead `ty_option` function.", "tree": {"sha": "7f5f87e82208384ba738310d095861cc3d108c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f5f87e82208384ba738310d095861cc3d108c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58c68d00fd1702b74e67dcb6f6f54483c066ef31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58c68d00fd1702b74e67dcb6f6f54483c066ef31", "html_url": "https://github.com/rust-lang/rust/commit/58c68d00fd1702b74e67dcb6f6f54483c066ef31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58c68d00fd1702b74e67dcb6f6f54483c066ef31/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26451ef7b5e00887dc8f27717ff34262df23d655", "url": "https://api.github.com/repos/rust-lang/rust/commits/26451ef7b5e00887dc8f27717ff34262df23d655", "html_url": "https://github.com/rust-lang/rust/commit/26451ef7b5e00887dc8f27717ff34262df23d655"}], "stats": {"total": 128, "additions": 71, "deletions": 57}, "files": [{"sha": "d72193ffe1205a269405d007db7b17e9f4cd8272", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -969,10 +969,10 @@ impl<'a> ExtCtxt<'a> {\n     pub fn ident_of(&self, st: &str) -> ast::Ident {\n         ast::Ident::from_str(st)\n     }\n-    pub fn std_path(&self, components: &[&str]) -> Vec<ast::Ident> {\n+    pub fn std_path(&self, components: &[Symbol]) -> Vec<ast::Ident> {\n         let def_site = DUMMY_SP.apply_mark(self.current_expansion.mark);\n         iter::once(Ident::new(kw::DollarCrate, def_site))\n-            .chain(components.iter().map(|s| self.ident_of(s)))\n+            .chain(components.iter().map(|&s| Ident::with_empty_ctxt(s)))\n             .collect()\n     }\n     pub fn name_of(&self, st: &str) -> ast::Name {"}, {"sha": "9c0ffc1f6e8cb39174077c0ffcacbe465d6fd510", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -3,11 +3,11 @@ use crate::attr;\n use crate::source_map::{dummy_spanned, respan, Spanned};\n use crate::ext::base::ExtCtxt;\n use crate::ptr::P;\n-use crate::symbol::{Symbol, kw};\n+use crate::symbol::{kw, sym, Symbol};\n use crate::ThinVec;\n \n use rustc_target::spec::abi::Abi;\n-use syntax_pos::{Pos, Span, DUMMY_SP};\n+use syntax_pos::{Pos, Span};\n \n pub trait AstBuilder {\n     // paths\n@@ -49,7 +49,6 @@ pub trait AstBuilder {\n               ty: P<ast::Ty>,\n               mutbl: ast::Mutability) -> P<ast::Ty>;\n \n-    fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty>;\n     fn ty_infer(&self, sp: Span) -> P<ast::Ty>;\n \n     fn typaram(&self,\n@@ -425,15 +424,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 ast::TyKind::Ptr(self.ty_mt(ty, mutbl)))\n     }\n \n-    fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty> {\n-        self.ty_path(\n-            self.path_all(DUMMY_SP,\n-                          true,\n-                          self.std_path(&[\"option\", \"Option\"]),\n-                          vec![ast::GenericArg::Type(ty)],\n-                          Vec::new()))\n-    }\n-\n     fn ty_infer(&self, span: Span) -> P<ast::Ty> {\n         self.ty(span, ast::TyKind::Infer)\n     }\n@@ -735,7 +725,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprKind::Array(exprs))\n     }\n     fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr> {\n-        self.expr_call_global(sp, self.std_path(&[\"vec\", \"Vec\", \"new\"]),\n+        self.expr_call_global(sp, self.std_path(&[sym::vec, sym::Vec, sym::new]),\n                               Vec::new())\n     }\n     fn expr_vec_slice(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n@@ -751,12 +741,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n \n     fn expr_some(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let some = self.std_path(&[\"option\", \"Option\", \"Some\"]);\n+        let some = self.std_path(&[sym::option, sym::Option, sym::Some]);\n         self.expr_call_global(sp, some, vec![expr])\n     }\n \n     fn expr_none(&self, sp: Span) -> P<ast::Expr> {\n-        let none = self.std_path(&[\"option\", \"Option\", \"None\"]);\n+        let none = self.std_path(&[sym::option, sym::Option, sym::None]);\n         let none = self.path_global(sp, none);\n         self.expr_path(none)\n     }\n@@ -780,7 +770,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let expr_loc_ptr = self.expr_addr_of(span, expr_loc_tuple);\n         self.expr_call_global(\n             span,\n-            self.std_path(&[\"rt\", \"begin_panic\"]),\n+            self.std_path(&[sym::rt, sym::begin_panic]),\n             vec![\n                 self.expr_str(span, msg),\n                 expr_loc_ptr])\n@@ -791,19 +781,19 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_ok(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let ok = self.std_path(&[\"result\", \"Result\", \"Ok\"]);\n+        let ok = self.std_path(&[sym::result, sym::Result, sym::Ok]);\n         self.expr_call_global(sp, ok, vec![expr])\n     }\n \n     fn expr_err(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let err = self.std_path(&[\"result\", \"Result\", \"Err\"]);\n+        let err = self.std_path(&[sym::result, sym::Result, sym::Err]);\n         self.expr_call_global(sp, err, vec![expr])\n     }\n \n     fn expr_try(&self, sp: Span, head: P<ast::Expr>) -> P<ast::Expr> {\n-        let ok = self.std_path(&[\"result\", \"Result\", \"Ok\"]);\n+        let ok = self.std_path(&[sym::result, sym::Result, sym::Ok]);\n         let ok_path = self.path_global(sp, ok);\n-        let err = self.std_path(&[\"result\", \"Result\", \"Err\"]);\n+        let err = self.std_path(&[sym::result, sym::Result, sym::Err]);\n         let err_path = self.path_global(sp, err);\n \n         let binding_variable = self.ident_of(\"__try_var\");\n@@ -867,25 +857,25 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = self.std_path(&[\"option\", \"Option\", \"Some\"]);\n+        let some = self.std_path(&[sym::option, sym::Option, sym::Some]);\n         let path = self.path_global(span, some);\n         self.pat_tuple_struct(span, path, vec![pat])\n     }\n \n     fn pat_none(&self, span: Span) -> P<ast::Pat> {\n-        let some = self.std_path(&[\"option\", \"Option\", \"None\"]);\n+        let some = self.std_path(&[sym::option, sym::Option, sym::None]);\n         let path = self.path_global(span, some);\n         self.pat_path(span, path)\n     }\n \n     fn pat_ok(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = self.std_path(&[\"result\", \"Result\", \"Ok\"]);\n+        let some = self.std_path(&[sym::result, sym::Result, sym::Ok]);\n         let path = self.path_global(span, some);\n         self.pat_tuple_struct(span, path, vec![pat])\n     }\n \n     fn pat_err(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = self.std_path(&[\"result\", \"Result\", \"Err\"]);\n+        let some = self.std_path(&[sym::result, sym::Result, sym::Err]);\n         let path = self.path_global(span, some);\n         self.pat_tuple_struct(span, path, vec![pat])\n     }"}, {"sha": "b3b6328e2ca7306536dff1787ca2ac07fcd8d2bb", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -7,7 +7,7 @@ use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::{kw, sym};\n+use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n \n pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n@@ -115,7 +115,7 @@ fn cs_clone_shallow(name: &str,\n         // set the expn ID so we can use the unstable struct.\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n-                                        cx.std_path(&[\"clone\", helper_name]),\n+                                        cx.std_path(&[sym::clone, Symbol::intern(helper_name)]),\n                                         vec![GenericArg::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n@@ -157,7 +157,7 @@ fn cs_clone(name: &str,\n             -> P<Expr> {\n     let ctor_path;\n     let all_fields;\n-    let fn_path = cx.std_path(&[\"clone\", \"Clone\", \"clone\"]);\n+    let fn_path = cx.std_path(&[sym::clone, sym::Clone, sym::clone]);\n     let subcall = |cx: &mut ExtCtxt<'_>, field: &FieldInfo<'_>| {\n         let args = vec![cx.expr_addr_of(field.span, field.self_.clone())];\n         cx.expr_call_global(field.span, fn_path.clone(), args)"}, {"sha": "1d981e0ff7906ba8b4788c6bb9cbcdbfa84c19d6", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::{self, Expr, MetaItem, GenericArg};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::sym;\n+use syntax::symbol::{sym, Symbol};\n use syntax_pos::Span;\n \n pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n@@ -54,7 +54,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt<'_>,\n         // set the expn ID so we can use the unstable struct.\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n-                                        cx.std_path(&[\"cmp\", helper_name]),\n+                                        cx.std_path(&[sym::cmp, Symbol::intern(helper_name)]),\n                                         vec![GenericArg::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }"}, {"sha": "b25a9e4c50fbe9e87735ede37ae3a3b03e094e3c", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -55,9 +55,9 @@ pub fn ordering_collapsed(cx: &mut ExtCtxt<'_>,\n \n pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n     let test_id = cx.ident_of(\"cmp\").gensym();\n-    let equals_path = cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n+    let equals_path = cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::Equal]));\n \n-    let cmp_path = cx.std_path(&[\"cmp\", \"Ord\", \"cmp\"]);\n+    let cmp_path = cx.std_path(&[sym::cmp, sym::Ord, sym::cmp]);\n \n     // Builds:\n     //"}, {"sha": "3980741f252dd947e92e15fc7644405728c97bdf", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::{self, BinOpKind, Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::sym;\n+use syntax::symbol::{sym, Symbol};\n use syntax_pos::Span;\n \n pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt<'_>,\n@@ -114,11 +114,11 @@ pub fn some_ordering_collapsed(cx: &mut ExtCtxt<'_>,\n \n pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n     let test_id = cx.ident_of(\"cmp\").gensym();\n-    let ordering = cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n+    let ordering = cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::Equal]));\n     let ordering_expr = cx.expr_path(ordering.clone());\n     let equals_expr = cx.expr_some(span, ordering_expr);\n \n-    let partial_cmp_path = cx.std_path(&[\"cmp\", \"PartialOrd\", \"partial_cmp\"]);\n+    let partial_cmp_path = cx.std_path(&[sym::cmp, sym::PartialOrd, sym::partial_cmp]);\n \n     // Builds:\n     //\n@@ -188,7 +188,8 @@ fn cs_op(less: bool,\n          span: Span,\n          substr: &Substructure<'_>) -> P<Expr> {\n     let ordering_path = |cx: &mut ExtCtxt<'_>, name: &str| {\n-        cx.expr_path(cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", name])))\n+        cx.expr_path(cx.path_global(\n+            span, cx.std_path(&[sym::cmp, sym::Ordering, Symbol::intern(name)])))\n     };\n \n     let par_cmp = |cx: &mut ExtCtxt<'_>, span, self_f: P<Expr>, other_fs: &[P<Expr>], default| {\n@@ -198,19 +199,19 @@ fn cs_op(less: bool,\n         };\n \n         // `PartialOrd::partial_cmp(self.fi, other.fi)`\n-        let cmp_path = cx.expr_path(cx.path_global(span, cx.std_path(&[\"cmp\",\n-                                                                       \"PartialOrd\",\n-                                                                       \"partial_cmp\"])));\n+        let cmp_path = cx.expr_path(cx.path_global(span, cx.std_path(&[sym::cmp,\n+                                                                       sym::PartialOrd,\n+                                                                       sym::partial_cmp])));\n         let cmp = cx.expr_call(span,\n                                cmp_path,\n                                vec![cx.expr_addr_of(span, self_f),\n                                     cx.expr_addr_of(span, other_f.clone())]);\n \n         let default = ordering_path(cx, default);\n         // `Option::unwrap_or(_, Ordering::Equal)`\n-        let unwrap_path = cx.expr_path(cx.path_global(span, cx.std_path(&[\"option\",\n-                                                                          \"Option\",\n-                                                                          \"unwrap_or\"])));\n+        let unwrap_path = cx.expr_path(cx.path_global(span, cx.std_path(&[sym::option,\n+                                                                          sym::Option,\n+                                                                          sym::unwrap_or])));\n         cx.expr_call(span, unwrap_path, vec![cmp, default])\n     };\n \n@@ -256,9 +257,9 @@ fn cs_op(less: bool,\n \n             // `Ordering::then_with(Option::unwrap_or(..), ..)`\n             let then_with_path = cx.expr_path(cx.path_global(span,\n-                                                             cx.std_path(&[\"cmp\",\n-                                                                           \"Ordering\",\n-                                                                           \"then_with\"])));\n+                                                             cx.std_path(&[sym::cmp,\n+                                                                           sym::Ordering,\n+                                                                           sym::then_with])));\n             cx.expr_call(span, then_with_path, vec![par_cmp, cx.lambda0(span, subexpr)])\n         },\n         |cx, args| {"}, {"sha": "fd8e87e2fefd17fc0674a7f096d4deb45e58a2ff", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::{Expr, MetaItem};\n use syntax::ext::base::{Annotatable, DummyResult, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::sym;\n+use syntax::symbol::{kw, sym};\n use syntax::span_err;\n use syntax_pos::Span;\n \n@@ -47,7 +47,8 @@ fn default_substructure(cx: &mut ExtCtxt<'_>,\n                         trait_span: Span,\n                         substr: &Substructure<'_>)\n                         -> P<Expr> {\n-    let default_ident = cx.std_path(&[\"default\", \"Default\", \"default\"]);\n+    // Note that `kw::Default` is \"default\" and `sym::Default` is \"Default\"!\n+    let default_ident = cx.std_path(&[kw::Default, sym::Default, kw::Default]);\n     let default_call = |span| cx.expr_call_global(span, default_ident.clone(), Vec::new());\n \n     return match *substr.fields {"}, {"sha": "e7f99d4578226382ea4c67f501c4488433bde4ff", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -6,6 +6,7 @@ use syntax::ast::{Expr, MetaItem, Mutability};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n+use syntax::symbol::sym;\n use syntax_pos::Span;\n \n pub fn expand_deriving_hash(cx: &mut ExtCtxt<'_>,\n@@ -60,7 +61,7 @@ fn hash_substructure(cx: &mut ExtCtxt<'_>, trait_span: Span, substr: &Substructu\n     };\n     let call_hash = |span, thing_expr| {\n         let hash_path = {\n-            let strs = cx.std_path(&[\"hash\", \"Hash\", \"hash\"]);\n+            let strs = cx.std_path(&[sym::hash, sym::Hash, sym::hash]);\n \n             cx.expr_path(cx.path_global(span, strs))\n         };"}, {"sha": "ac41f30e6b39fafd57748a06c5010d50588bda8d", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -150,7 +150,7 @@ fn call_intrinsic(cx: &ExtCtxt<'_>,\n         mark.set_expn_info(info);\n         span = span.with_ctxt(SyntaxContext::empty().apply_mark(mark));\n     }\n-    let path = cx.std_path(&[\"intrinsics\", intrinsic]);\n+    let path = cx.std_path(&[sym::intrinsics, Symbol::intern(intrinsic)]);\n     let call = cx.expr_call_global(span, path, args);\n \n     cx.expr_block(P(ast::Block {"}, {"sha": "b7f2ecf0f9137b9931b40aecca232d8df3a18f5f", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -27,7 +27,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n             let lt = cx.lifetime(sp, Ident::with_empty_ctxt(kw::StaticLifetime));\n             cx.expr_path(cx.path_all(sp,\n                                      true,\n-                                     cx.std_path(&[\"option\", \"Option\", \"None\"]),\n+                                     cx.std_path(&[sym::option, sym::Option, sym::None]),\n                                      vec![GenericArg::Type(cx.ty_rptr(sp,\n                                                      cx.ty_ident(sp,\n                                                                  Ident::with_empty_ctxt(sym::str)),\n@@ -37,7 +37,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n         }\n         Ok(s) => {\n             cx.expr_call_global(sp,\n-                                cx.std_path(&[\"option\", \"Option\", \"Some\"]),\n+                                cx.std_path(&[sym::option, sym::Option, sym::Some]),\n                                 vec![cx.expr_str(sp, Symbol::intern(&s))])\n         }\n     };"}, {"sha": "b5be45547cfbe3149545aa775736162bdef7ac7b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn rtpath(ecx: &ExtCtxt<'_>, s: &str) -> Vec<ast::Ident> {\n-        ecx.std_path(&[\"fmt\", \"rt\", \"v1\", s])\n+        ecx.std_path(&[sym::fmt, sym::rt, sym::v1, Symbol::intern(s)])\n     }\n \n     fn build_count(&self, c: parse::Count<'_>) -> P<ast::Expr> {\n@@ -644,7 +644,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             (\"new_v1_formatted\", vec![pieces, args_slice, fmt])\n         };\n \n-        let path = self.ecx.std_path(&[\"fmt\", \"Arguments\", fn_name]);\n+        let path = self.ecx.std_path(&[sym::fmt, sym::Arguments, Symbol::intern(fn_name)]);\n         self.ecx.expr_call_global(self.macsp, path, fn_args)\n     }\n \n@@ -675,14 +675,14 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n             }\n             Count => {\n-                let path = ecx.std_path(&[\"fmt\", \"ArgumentV1\", \"from_usize\"]);\n+                let path = ecx.std_path(&[sym::fmt, sym::ArgumentV1, sym::from_usize]);\n                 return ecx.expr_call_global(macsp, path, vec![arg]);\n             }\n         };\n \n-        let path = ecx.std_path(&[\"fmt\", trait_, \"fmt\"]);\n+        let path = ecx.std_path(&[sym::fmt, Symbol::intern(trait_), sym::fmt]);\n         let format_fn = ecx.path_global(sp, path);\n-        let path = ecx.std_path(&[\"fmt\", \"ArgumentV1\", \"new\"]);\n+        let path = ecx.std_path(&[sym::fmt, sym::ArgumentV1, sym::new]);\n         ecx.expr_call_global(macsp, path, vec![arg, ecx.expr_path(format_fn)])\n     }\n }"}, {"sha": "ce75094de59600ea52e4a4501dac64ee96659761", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c68d00fd1702b74e67dcb6f6f54483c066ef31/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=58c68d00fd1702b74e67dcb6f6f54483c066ef31", "patch": "@@ -132,6 +132,8 @@ symbols! {\n         always,\n         any,\n         arbitrary_self_types,\n+        Arguments,\n+        ArgumentV1,\n         arm_target_feature,\n         asm,\n         associated_consts,\n@@ -145,6 +147,7 @@ symbols! {\n         automatically_derived,\n         avx512_target_feature,\n         await_macro,\n+        begin_panic,\n         bench,\n         bin,\n         bind_by_move_pattern_guards,\n@@ -164,9 +167,11 @@ symbols! {\n         cfg_target_thread_local,\n         cfg_target_vendor,\n         clone,\n+        Clone,\n         clone_closures,\n         clone_from,\n         closure_to_fn_coercion,\n+        cmp,\n         cmpxchg16b_target_feature,\n         cold,\n         compile_error,\n@@ -200,6 +205,7 @@ symbols! {\n         custom_test_frameworks,\n         c_variadic,\n         decl_macro,\n+        Default,\n         default_lib_allocator,\n         default_type_parameter_fallback,\n         default_type_params,\n@@ -234,6 +240,7 @@ symbols! {\n         enable,\n         err,\n         Err,\n+        Equal,\n         except,\n         exclusive_range_pattern,\n         exhaustive_integer_patterns,\n@@ -256,6 +263,7 @@ symbols! {\n         field,\n         field_init_shorthand,\n         file,\n+        fmt,\n         fmt_internals,\n         fn_must_use,\n         forbid,\n@@ -265,6 +273,7 @@ symbols! {\n         from_error,\n         from_generator,\n         from_ok,\n+        from_usize,\n         fundamental,\n         future,\n         Future,\n@@ -275,6 +284,8 @@ symbols! {\n         global_allocator,\n         global_asm,\n         globs,\n+        hash,\n+        Hash,\n         hexagon_target_feature,\n         hidden,\n         homogeneous_aggregate,\n@@ -371,6 +382,7 @@ symbols! {\n         negate_unsigned,\n         never,\n         never_type,\n+        new,\n         next,\n         __next,\n         nll,\n@@ -405,6 +417,8 @@ symbols! {\n         option,\n         Option,\n         opt_out_copy,\n+        Ord,\n+        Ordering,\n         Output,\n         overlapping_marker_traits,\n         packed,\n@@ -413,6 +427,8 @@ symbols! {\n         panic_impl,\n         panic_implementation,\n         panic_runtime,\n+        partial_cmp,\n+        PartialOrd,\n         passes,\n         path,\n         pattern_parentheses,\n@@ -473,6 +489,7 @@ symbols! {\n         Result,\n         Return,\n         rlib,\n+        rt,\n         rtm_target_feature,\n         rust,\n         rust_2015_preview,\n@@ -576,6 +593,7 @@ symbols! {\n         test_case,\n         test_removed_feature,\n         test_runner,\n+        then_with,\n         thread_local,\n         tool_attributes,\n         tool_lints,\n@@ -615,12 +633,15 @@ symbols! {\n         untagged_unions,\n         unwind,\n         unwind_attributes,\n+        unwrap_or,\n         used,\n         use_extern_macros,\n         use_nested_groups,\n         usize,\n         v1,\n         val,\n+        vec,\n+        Vec,\n         vis,\n         visible_private_types,\n         volatile,"}]}