{"sha": "40f20b5327cdd8cf26601962d3a9cc01ce8b177c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZjIwYjUzMjdjZGQ4Y2YyNjYwMTk2MmQzYTljYzAxY2U4YjE3N2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-09T03:41:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-09T03:41:31Z"}, "message": "Auto merge of #51359 - cramertj:fdio_spawn, r=sfackler\n\n[fuchsia] Migrate from launchpad to fdio_spawn_etc\n\nfdio_spawn_etc is the preferred way of creating processes on Fuchsia\nnow.\n\ncc @abarth", "tree": {"sha": "c0fbf509b47e14052766948f6573ece0ec039c03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0fbf509b47e14052766948f6573ece0ec039c03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f20b5327cdd8cf26601962d3a9cc01ce8b177c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f20b5327cdd8cf26601962d3a9cc01ce8b177c", "html_url": "https://github.com/rust-lang/rust/commit/40f20b5327cdd8cf26601962d3a9cc01ce8b177c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f20b5327cdd8cf26601962d3a9cc01ce8b177c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "html_url": "https://github.com/rust-lang/rust/commit/1c5626f55123a6f0bce97e4236dc1c6bf09c548f"}, {"sha": "0c6cd26aecb7aec3407014c4b0ece7e6278631c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6cd26aecb7aec3407014c4b0ece7e6278631c4", "html_url": "https://github.com/rust-lang/rust/commit/0c6cd26aecb7aec3407014c4b0ece7e6278631c4"}], "stats": {"total": 161, "additions": 51, "deletions": 110}, "files": [{"sha": "c001e4e8cebf914e80f615e5d628fd12bcd4963e", "filename": "src/libstd/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40f20b5327cdd8cf26601962d3a9cc01ce8b177c/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f20b5327cdd8cf26601962d3a9cc01ce8b177c/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=40f20b5327cdd8cf26601962d3a9cc01ce8b177c", "patch": "@@ -74,7 +74,6 @@ fn main() {\n         }\n         println!(\"cargo:rustc-link-lib=zircon\");\n         println!(\"cargo:rustc-link-lib=fdio\");\n-        println!(\"cargo:rustc-link-lib=launchpad\"); // for std::process\n     } else if target.contains(\"cloudabi\") {\n         if cfg!(feature = \"backtrace\") {\n             println!(\"cargo:rustc-link-lib=unwind\");"}, {"sha": "fa48001179e05569c8eb21d6fd570e620ea15f16", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 28, "deletions": 47, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/40f20b5327cdd8cf26601962d3a9cc01ce8b177c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f20b5327cdd8cf26601962d3a9cc01ce8b177c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=40f20b5327cdd8cf26601962d3a9cc01ce8b177c", "patch": "@@ -56,68 +56,49 @@ impl Command {\n                       -> io::Result<zx_handle_t> {\n         use sys::process::zircon::*;\n \n-        let job_handle = zx_job_default();\n         let envp = match maybe_envp {\n             Some(envp) => envp.as_ptr(),\n             None => ptr::null(),\n         };\n \n-        // To make sure launchpad_destroy gets called on the launchpad if this function fails\n-        struct LaunchpadDestructor(*mut launchpad_t);\n-        impl Drop for LaunchpadDestructor {\n-            fn drop(&mut self) { unsafe { launchpad_destroy(self.0); } }\n-        }\n-\n-        // Duplicate the job handle\n-        let mut job_copy: zx_handle_t = ZX_HANDLE_INVALID;\n-        zx_cvt(zx_handle_duplicate(job_handle, ZX_RIGHT_SAME_RIGHTS, &mut job_copy))?;\n-        // Create a launchpad\n-        let mut launchpad: *mut launchpad_t = ptr::null_mut();\n-        zx_cvt(launchpad_create(job_copy, self.get_argv()[0], &mut launchpad))?;\n-        let launchpad_destructor = LaunchpadDestructor(launchpad);\n-\n-        // Set the process argv\n-        zx_cvt(launchpad_set_args(launchpad, self.get_argv().len() as i32 - 1,\n-                                  self.get_argv().as_ptr()))?;\n-        // Setup the environment vars\n-        zx_cvt(launchpad_set_environ(launchpad, envp))?;\n-        zx_cvt(launchpad_add_vdso_vmo(launchpad))?;\n-        // Load the executable\n-        zx_cvt(launchpad_elf_load(launchpad, launchpad_vmo_from_file(self.get_argv()[0])))?;\n-        zx_cvt(launchpad_load_vdso(launchpad, ZX_HANDLE_INVALID))?;\n-        zx_cvt(launchpad_clone(launchpad, LP_CLONE_FDIO_NAMESPACE | LP_CLONE_FDIO_CWD))?;\n+        let transfer_or_clone = |opt_fd, target_fd| if let Some(local_fd) = opt_fd {\n+            fdio_spawn_action_t {\n+                action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n+                local_fd,\n+                target_fd,\n+                ..Default::default()\n+            }\n+        } else {\n+            fdio_spawn_action_t {\n+                action: FDIO_SPAWN_ACTION_CLONE_FD,\n+                local_fd: target_fd,\n+                target_fd,\n+                ..Default::default()\n+            }\n+        };\n \n         // Clone stdin, stdout, and stderr\n-        if let Some(fd) = stdio.stdin.fd() {\n-            zx_cvt(launchpad_transfer_fd(launchpad, fd, 0))?;\n-        } else {\n-            zx_cvt(launchpad_clone_fd(launchpad, 0, 0))?;\n-        }\n-        if let Some(fd) = stdio.stdout.fd() {\n-            zx_cvt(launchpad_transfer_fd(launchpad, fd, 1))?;\n-        } else {\n-            zx_cvt(launchpad_clone_fd(launchpad, 1, 1))?;\n-        }\n-        if let Some(fd) = stdio.stderr.fd() {\n-            zx_cvt(launchpad_transfer_fd(launchpad, fd, 2))?;\n-        } else {\n-            zx_cvt(launchpad_clone_fd(launchpad, 2, 2))?;\n-        }\n+        let action1 = transfer_or_clone(stdio.stdin.fd(), 0);\n+        let action2 = transfer_or_clone(stdio.stdout.fd(), 1);\n+        let action3 = transfer_or_clone(stdio.stderr.fd(), 2);\n+        let actions = [action1, action2, action3];\n \n-        // We don't want FileDesc::drop to be called on any stdio. It would close their fds. The\n-        // fds will be closed once the child process finishes.\n+        // We don't want FileDesc::drop to be called on any stdio. fdio_spawn_etc\n+        // always consumes transferred file descriptors.\n         mem::forget(stdio);\n \n         for callback in self.get_closures().iter_mut() {\n             callback()?;\n         }\n \n-        // `launchpad_go` destroys the launchpad, so we must not\n-        mem::forget(launchpad_destructor);\n-\n         let mut process_handle: zx_handle_t = 0;\n-        let mut err_msg: *const libc::c_char = ptr::null();\n-        zx_cvt(launchpad_go(launchpad, &mut process_handle, &mut err_msg))?;\n+        zx_cvt(fdio_spawn_etc(\n+            0,\n+            FDIO_SPAWN_CLONE_JOB | FDIO_SPAWN_CLONE_LDSVC | FDIO_SPAWN_CLONE_NAMESPACE,\n+            self.get_argv()[0], self.get_argv().as_ptr(), envp, 3, actions.as_ptr(),\n+            &mut process_handle,\n+            ptr::null_mut(),\n+        ))?;\n         // FIXME: See if we want to do something with that err_msg\n \n         Ok(process_handle)"}, {"sha": "a06c73ee263c29178e8e17c4601428b0d41f05f4", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 23, "deletions": 62, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/40f20b5327cdd8cf26601962d3a9cc01ce8b177c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f20b5327cdd8cf26601962d3a9cc01ce8b177c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=40f20b5327cdd8cf26601962d3a9cc01ce8b177c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_camel_case_types)]\n+#![allow(non_camel_case_types, unused)]\n \n use convert::TryInto;\n use io;\n@@ -117,75 +117,36 @@ extern {\n                               avail: *mut size_t) -> zx_status_t;\n }\n \n-// From `enum special_handles` in system/ulib/launchpad/launchpad.c\n-// HND_LOADER_SVC = 0\n-// HND_EXEC_VMO = 1\n-// HND_SEGMENTS_VMAR = 2\n-const HND_SPECIAL_COUNT: c_int = 3;\n-\n+#[derive(Default)]\n #[repr(C)]\n-pub struct launchpad_t {\n-    argc: u32,\n-    envc: u32,\n-    args: *const c_char,\n-    args_len: size_t,\n-    env: *const c_char,\n-    env_len: size_t,\n-\n-    handles: *mut zx_handle_t,\n-    handles_info: *mut u32,\n-    handle_count: size_t,\n-    handle_alloc: size_t,\n-\n-    entry: zx_vaddr_t,\n-    base: zx_vaddr_t,\n-    vdso_base: zx_vaddr_t,\n-\n-    stack_size: size_t,\n-\n-    special_handles: [zx_handle_t; HND_SPECIAL_COUNT as usize],\n-    loader_message: bool,\n+pub struct fdio_spawn_action_t {\n+    pub action: u32,\n+    pub reserved0: u32,\n+    pub local_fd: i32,\n+    pub target_fd: i32,\n+    pub reserved1: u64,\n }\n \n extern {\n-    pub fn launchpad_create(job: zx_handle_t, name: *const c_char,\n-                            lp: *mut *mut launchpad_t) -> zx_status_t;\n-\n-    pub fn launchpad_go(lp: *mut launchpad_t,\n-                        proc_handle: *mut zx_handle_t,\n-                        err_msg: *mut *const c_char) -> zx_status_t;\n-\n-    pub fn launchpad_destroy(lp: *mut launchpad_t);\n-\n-    pub fn launchpad_set_args(lp: *mut launchpad_t, argc: c_int,\n-                               argv: *const *const c_char) -> zx_status_t;\n-\n-    pub fn launchpad_set_environ(lp: *mut launchpad_t, envp: *const *const c_char) -> zx_status_t;\n-\n-    pub fn launchpad_clone(lp: *mut launchpad_t, what: u32) -> zx_status_t;\n-\n-    pub fn launchpad_clone_fd(lp: *mut launchpad_t, fd: c_int, target_fd: c_int) -> zx_status_t;\n-\n-    pub fn launchpad_transfer_fd(lp: *mut launchpad_t, fd: c_int, target_fd: c_int) -> zx_status_t;\n-\n-    pub fn launchpad_elf_load(lp: *mut launchpad_t, vmo: zx_handle_t) -> zx_status_t;\n-\n-    pub fn launchpad_add_vdso_vmo(lp: *mut launchpad_t) -> zx_status_t;\n+    pub fn fdio_spawn_etc(job: zx_handle_t, flags: u32, path: *const c_char,\n+                          argv: *const *const c_char, envp: *const *const c_char,\n+                          action_count: u64, actions: *const fdio_spawn_action_t,\n+                          process: *mut zx_handle_t, err_msg: *mut c_char) -> zx_status_t;\n+}\n \n-    pub fn launchpad_load_vdso(lp: *mut launchpad_t, vmo: zx_handle_t) -> zx_status_t;\n+// fdio_spawn_etc flags\n \n-    pub fn launchpad_vmo_from_file(filename: *const c_char) -> zx_handle_t;\n-}\n+pub const FDIO_SPAWN_CLONE_JOB: u32 = 0x0001;\n+pub const FDIO_SPAWN_CLONE_LDSVC: u32 = 0x0002;\n+pub const FDIO_SPAWN_CLONE_NAMESPACE: u32 = 0x0004;\n+pub const FDIO_SPAWN_CLONE_STDIO: u32 = 0x0008;\n+pub const FDIO_SPAWN_CLONE_ENVIRON: u32 = 0x0010;\n+pub const FDIO_SPAWN_CLONE_ALL: u32 = 0xFFFF;\n \n-// Launchpad clone constants\n+// fdio_spawn_etc actions\n \n-pub const LP_CLONE_FDIO_NAMESPACE: u32 = 0x0001;\n-pub const LP_CLONE_FDIO_CWD: u32 = 0x0002;\n-// LP_CLONE_FDIO_STDIO = 0x0004\n-// LP_CLONE_FDIO_ALL = 0x00FF\n-// LP_CLONE_ENVIRON = 0x0100\n-// LP_CLONE_DEFAULT_JOB = 0x0200\n-// LP_CLONE_ALL = 0xFFFF\n+pub const FDIO_SPAWN_ACTION_CLONE_FD: u32 = 0x0001;\n+pub const FDIO_SPAWN_ACTION_TRANSFER_FD: u32 = 0x0002;\n \n // Errors\n "}]}