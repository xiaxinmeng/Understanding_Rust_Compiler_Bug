{"sha": "c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4N2Q5OTlmYTJmOGU4OGY5ODZhYTVmNGQ3NmI3MDg4MjRlMWZkM2E=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-05T01:37:29Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-07T16:08:51Z"}, "message": "fix ui tests", "tree": {"sha": "8fe4a8fca5a738a3383b51edd878356b8c1e0012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe4a8fca5a738a3383b51edd878356b8c1e0012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl8tfJMACgkQoZMWSk0F\n7kR+mAf/VPGp7BgFXiZ4cdNajBlmEyXhxQplPLKRLfblksToA3vmyPe2tULxYc6s\nB9WnK5Bokx2rF6Cs7sywXo74ZcwKnOVOs6IlVKcX5dwbDyzkNbu+sIctAQietJ/V\nYSY3HKWH0iXq6gOMPMnthmrGKNk4w+hwvP1eujDWnWRz7IUxxvkuHUyxoLuWhZs1\nmfN85BoKp8HoJALDEwgZgWFOOv2jmoPNH7/1fatNcCCAIfhJ0AWf/rYxb/sLIMQ9\nT0+HKjALgCzkKn0fjHM4LW59bPOw0YKTmO+ipdeujitgOrCPgjOtzFkxIEQE2eyD\nVDo2CTvvyspDblpKwN2cNWyiPXgd/w==\n=LAia\n-----END PGP SIGNATURE-----", "payload": "tree 8fe4a8fca5a738a3383b51edd878356b8c1e0012\nparent d635b76eaf3435f9bdce1dcbdd315b0e770493f0\nauthor Christoph Walcher <christoph-wa@gmx.de> 1596591449 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1596816531 +0200\n\nfix ui tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "html_url": "https://github.com/rust-lang/rust/commit/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "html_url": "https://github.com/rust-lang/rust/commit/d635b76eaf3435f9bdce1dcbdd315b0e770493f0"}], "stats": {"total": 198, "additions": 134, "deletions": 64}, "files": [{"sha": "150acfbfee75996fd89b882784a26fcbc3a5e002", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -1,4 +1,10 @@\n-#![allow(unused, dead_code, clippy::needless_lifetimes, clippy::needless_pass_by_value)]\n+#![allow(\n+    unused,\n+    dead_code,\n+    clippy::needless_lifetimes,\n+    clippy::needless_pass_by_value,\n+    clippy::needless_arbitrary_self_type\n+)]\n #![warn(clippy::extra_unused_lifetimes)]\n \n fn empty() {}"}, {"sha": "ebdb8e749520fed2bd95045043b76e60f5829543", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:8:14\n+  --> $DIR/extra_unused_lifetimes.rs:14:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:10:25\n+  --> $DIR/extra_unused_lifetimes.rs:16:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:35:10\n+  --> $DIR/extra_unused_lifetimes.rs:41:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:61:22\n+  --> $DIR/extra_unused_lifetimes.rs:67:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "b5211318a15047e4e9c6f9f079cd2835d34fa01e", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -4,14 +4,14 @@\n pub struct PubOne;\n \n impl PubOne {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n }\n \n impl PubOne {\n     // A second impl for this struct -- the error span shouldn't mention this.\n-    pub fn irrelevant(self: &Self) -> bool {\n+    pub fn irrelevant(&self) -> bool {\n         false\n     }\n }\n@@ -21,57 +21,57 @@ pub struct PubAllowed;\n \n #[allow(clippy::len_without_is_empty)]\n impl PubAllowed {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n }\n \n // No `allow` attribute on this impl block, but that doesn't matter -- we only require one on the\n // impl containing `len`.\n impl PubAllowed {\n-    pub fn irrelevant(self: &Self) -> bool {\n+    pub fn irrelevant(&self) -> bool {\n         false\n     }\n }\n \n pub trait PubTraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n }\n \n impl PubTraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n struct NotPubOne;\n \n impl NotPubOne {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         // No error; `len` is pub but `NotPubOne` is not exported anyway.\n         1\n     }\n@@ -80,48 +80,48 @@ impl NotPubOne {\n struct One;\n \n impl One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         // No error; `len` is private; see issue #1085.\n         1\n     }\n }\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n struct HasPrivateIsEmpty;\n \n impl HasPrivateIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n struct Wither;\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "d79c300c07445054ec7ca5da083bb4aaf8202f1d", "filename": "tests/ui/len_without_is_empty.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_without_is_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_without_is_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.stderr?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -2,7 +2,7 @@ error: item `PubOne` has a public `len` method but no corresponding `is_empty` m\n   --> $DIR/len_without_is_empty.rs:6:1\n    |\n LL | / impl PubOne {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n LL | | }\n@@ -14,15 +14,15 @@ error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_e\n   --> $DIR/len_without_is_empty.rs:37:1\n    |\n LL | / pub trait PubTraitsToo {\n-LL | |     fn len(self: &Self) -> isize;\n+LL | |     fn len(&self) -> isize;\n LL | | }\n    | |_^\n \n error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n   --> $DIR/len_without_is_empty.rs:49:1\n    |\n LL | / impl HasIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n ...  |\n@@ -34,7 +34,7 @@ error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is\n   --> $DIR/len_without_is_empty.rs:61:1\n    |\n LL | / impl HasWrongIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n ...  |"}, {"sha": "d81676a3d9f4801d06f1884e1473c8730bd7597f", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -7,51 +7,51 @@ pub struct One;\n struct Wither;\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "ecdba921a5d0fde97fa67b5a3a455d953d3cdd38", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -7,51 +7,51 @@ pub struct One;\n struct Wither;\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "642e48fd1315859e1496f85846d05afd65393a44", "filename": "tests/ui/needless_arbitrary_self_type.fixed", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.fixed?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -0,0 +1,61 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_arbitrary_self_type)]\n+#![allow(unused_mut, clippy::needless_lifetimes)]\n+\n+pub enum ValType {\n+    A,\n+    B,\n+}\n+\n+impl ValType {\n+    pub fn bad(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn good(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_bad(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_good(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad_with_lifetime<'a>(&'a self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad_with_lifetime<'a>(&'a mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_bad(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_ref_good(self: &&mut &mut Self) {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "178abc341a80b18ad398f485264a50fc8a7701b3", "filename": "tests/ui/needless_arbitrary_self_type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.rs?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![warn(clippy::needless_arbitrary_self_type)]\n+#![allow(unused_mut, clippy::needless_lifetimes)]\n \n pub enum ValType {\n     A,"}, {"sha": "fc21d3d0afdd52281058b7bbcb5fdf4b5ea7fc26", "filename": "tests/ui/needless_arbitrary_self_type.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.stderr?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -1,43 +1,43 @@\n error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:9:16\n+  --> $DIR/needless_arbitrary_self_type.rs:12:16\n    |\n LL |     pub fn bad(self: Self) {\n    |                ^^^^^^^^^^ help: consider to change this parameter to: `self`\n    |\n    = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n \n error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:17:20\n+  --> $DIR/needless_arbitrary_self_type.rs:20:20\n    |\n LL |     pub fn mut_bad(mut self: Self) {\n    |                    ^^^^^^^^^^^^^^ help: consider to change this parameter to: `mut self`\n \n error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:25:20\n+  --> $DIR/needless_arbitrary_self_type.rs:28:20\n    |\n LL |     pub fn ref_bad(self: &Self) {\n    |                    ^^^^^^^^^^^ help: consider to change this parameter to: `&self`\n \n error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:29:38\n+  --> $DIR/needless_arbitrary_self_type.rs:32:38\n    |\n LL |     pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n    |                                      ^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a self`\n \n error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:37:24\n+  --> $DIR/needless_arbitrary_self_type.rs:40:24\n    |\n LL |     pub fn mut_ref_bad(self: &mut Self) {\n    |                        ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n \n error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:41:42\n+  --> $DIR/needless_arbitrary_self_type.rs:44:42\n    |\n LL |     pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n    |                                          ^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a mut self`\n \n error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:49:28\n+  --> $DIR/needless_arbitrary_self_type.rs:52:28\n    |\n LL |     pub fn mut_ref_mut_bad(mut self: &mut Self) {\n    |                            ^^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`"}, {"sha": "96d1c54946c0b40a7cee773d20f4bc6dfe0408ab", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -22,9 +22,9 @@ struct HasOption {\n }\n \n impl HasOption {\n-    fn do_option_nothing(self: &Self, value: usize) {}\n+    fn do_option_nothing(&self, value: usize) {}\n \n-    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_option_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "931ffc18665938cd3af7a9b592ad71f67a4df96d", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -22,9 +22,9 @@ struct HasOption {\n }\n \n impl HasOption {\n-    fn do_option_nothing(self: &Self, value: usize) {}\n+    fn do_option_nothing(&self, value: usize) {}\n \n-    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_option_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "631042c616bc0cd261579f32aa06c43e9526b151", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -18,9 +18,9 @@ struct HasResult {\n }\n \n impl HasResult {\n-    fn do_result_nothing(self: &Self, value: usize) {}\n+    fn do_result_nothing(&self, value: usize) {}\n \n-    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_result_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "679eb2326268c7a62fba3a04b228d9bbf4a827ee", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "patch": "@@ -18,9 +18,9 @@ struct HasResult {\n }\n \n impl HasResult {\n-    fn do_result_nothing(self: &Self, value: usize) {}\n+    fn do_result_nothing(&self, value: usize) {}\n \n-    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_result_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}]}