{"sha": "d2df620789cd82a6751320223cd3de87256bf15e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZGY2MjA3ODljZDgyYTY3NTEzMjAyMjNjZDNkZTg3MjU2YmYxNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T13:37:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T13:37:32Z"}, "message": "Auto merge of #85110 - RalfJung:no-rustc_args_required_const, r=oli-obk\n\nRemove rustc_args_required_const attribute\n\nNow that stdarch no longer needs it (thanks `@Amanieu!),` we can kill the `rustc_args_required_const` attribute. This means that lifetime extension of references to temporaries is the only remaining job that promotion is performing. :-)\n\nr? `@oli-obk`\nFixes https://github.com/rust-lang/rust/issues/69493", "tree": {"sha": "54b3796748cfb316bc5d1e17dc9e64fbdfc2eda8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b3796748cfb316bc5d1e17dc9e64fbdfc2eda8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2df620789cd82a6751320223cd3de87256bf15e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2df620789cd82a6751320223cd3de87256bf15e", "html_url": "https://github.com/rust-lang/rust/commit/d2df620789cd82a6751320223cd3de87256bf15e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2df620789cd82a6751320223cd3de87256bf15e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b60b8738735d8d64d03601d1dad4001d1e5733", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b60b8738735d8d64d03601d1dad4001d1e5733", "html_url": "https://github.com/rust-lang/rust/commit/17b60b8738735d8d64d03601d1dad4001d1e5733"}, {"sha": "c61e8face090e2b8a0a8eca535e8b58feee25625", "url": "https://api.github.com/repos/rust-lang/rust/commits/c61e8face090e2b8a0a8eca535e8b58feee25625", "html_url": "https://github.com/rust-lang/rust/commit/c61e8face090e2b8a0a8eca535e8b58feee25625"}], "stats": {"total": 716, "additions": 107, "deletions": 609}, "files": [{"sha": "530de3de9e870e9604afe0526ea6e4f59dc0a346", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n-use rustc_span::symbol::sym;\n use rustc_target::abi::{Abi, Int, LayoutOf, Variants};\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -187,9 +186,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         match *operand.layout.ty.kind() {\n                             ty::FnDef(def_id, substs) => {\n-                                if bx.cx().tcx().has_attr(def_id, sym::rustc_args_required_const) {\n-                                    bug!(\"reifying a fn ptr that requires const arguments\");\n-                                }\n                                 let instance = ty::Instance::resolve_for_fn_ptr(\n                                     bx.tcx(),\n                                     ty::ParamEnv::reveal_all(),"}, {"sha": "24b53bcf82af83240de8538ee684401c18057b70", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -469,7 +469,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_args_required_const, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n     rustc_attr!(rustc_legacy_const_generics, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n \n     // =========================================================================="}, {"sha": "848b44d13aadf7b7101aa80add0900333daf7fe0", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::mir::CastKind;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::{IntegerExt, TyAndLayout};\n use rustc_middle::ty::{self, FloatTy, Ty, TypeAndMut};\n-use rustc_span::symbol::sym;\n use rustc_target::abi::{Integer, LayoutOf, Variants};\n \n use super::{\n@@ -49,13 +48,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // All reifications must be monomorphic, bail out otherwise.\n                         ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n \n-                        if self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n-                            span_bug!(\n-                                self.cur_span(),\n-                                \"reifying a fn ptr that requires const arguments\"\n-                            );\n-                        }\n-\n                         let instance = ty::Instance::resolve_for_fn_ptr(\n                             *self.tcx,\n                             self.param_env,"}, {"sha": "23c0fe97c5f693b7657f316f48299063518d274d", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -305,7 +305,6 @@ where\n     let base_intern_mode = match intern_kind {\n         InternKind::Static(mutbl) => InternMode::Static(mutbl),\n         // `Constant` includes array lengths.\n-        // `Promoted` includes non-`Copy` array initializers and `rustc_args_required_const` arguments.\n         InternKind::Constant | InternKind::Promoted => InternMode::Const,\n     };\n "}, {"sha": "6d7e4cdb1c6efcd282c64f293a03aadb97de9167", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n pub struct LowerIntrinsics;\n@@ -119,6 +120,9 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n+                    _ if intrinsic_name.as_str().starts_with(\"simd_shuffle\") => {\n+                        validate_simd_shuffle(tcx, args, terminator.source_info.span);\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -132,9 +136,19 @@ fn resolve_rust_intrinsic(\n ) -> Option<(Symbol, SubstsRef<'tcx>)> {\n     if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n         let fn_sig = func_ty.fn_sig(tcx);\n-        if fn_sig.abi() == Abi::RustIntrinsic {\n+        if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n             return Some((tcx.item_name(def_id), substs));\n         }\n     }\n     None\n }\n+\n+fn validate_simd_shuffle(tcx: TyCtxt<'tcx>, args: &[Operand<'tcx>], span: Span) {\n+    match &args[2] {\n+        Operand::Constant(_) => {} // all good\n+        _ => {\n+            let msg = format!(\"last argument of `simd_shuffle` is required to be a `const` item\");\n+            tcx.sess.span_err(span, &msg);\n+        }\n+    }\n+}"}, {"sha": "f6b1323e107977445a81679dbf846e3afe430d97", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 30, "deletions": 163, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -12,20 +12,16 @@\n //! initialization and can otherwise silence errors, if\n //! move analysis runs after promotion on broken MIR.\n \n-use rustc_ast::LitKind;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::mir::traversal::ReversePostorder;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, List, TyCtxt, TypeFoldable};\n-use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n use std::{cmp, iter, mem};\n@@ -36,8 +32,8 @@ use crate::transform::MirPass;\n \n /// A `MirPass` for promotion.\n ///\n-/// Promotion is the extraction of promotable temps into separate MIR bodies. This pass also emits\n-/// errors when promotion of `#[rustc_args_required_const]` arguments fails.\n+/// Promotion is the extraction of promotable temps into separate MIR bodies so they can have\n+/// `'static` lifetime.\n ///\n /// After this pass is run, `promoted_fragments` will hold the MIR body corresponding to each\n /// newly created `Constant`.\n@@ -101,47 +97,16 @@ impl TempState {\n pub enum Candidate {\n     /// Borrow of a constant temporary, candidate for lifetime extension.\n     Ref(Location),\n-\n-    /// Currently applied to function calls where the callee has the unstable\n-    /// `#[rustc_args_required_const]` attribute as well as the SIMD shuffle\n-    /// intrinsic. The intrinsic requires the arguments are indeed constant and\n-    /// the attribute currently provides the semantic requirement that arguments\n-    /// must be constant.\n-    Argument { bb: BasicBlock, index: usize },\n }\n \n impl Candidate {\n-    /// Returns `true` if we should use the \"explicit\" rules for promotability for this `Candidate`.\n-    fn forces_explicit_promotion(&self) -> bool {\n-        match self {\n-            Candidate::Ref(_) => false,\n-            Candidate::Argument { .. } => true,\n-        }\n-    }\n-\n     fn source_info(&self, body: &Body<'_>) -> SourceInfo {\n         match self {\n             Candidate::Ref(location) => *body.source_info(*location),\n-            Candidate::Argument { bb, .. } => *body.source_info(body.terminator_loc(*bb)),\n         }\n     }\n }\n \n-fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Vec<usize>> {\n-    let attrs = tcx.get_attrs(def_id);\n-    let attr = attrs.iter().find(|a| tcx.sess.check_name(a, sym::rustc_args_required_const))?;\n-    let mut ret = vec![];\n-    for meta in attr.meta_item_list()? {\n-        match meta.literal()?.kind {\n-            LitKind::Int(a, _) => {\n-                ret.push(a as usize);\n-            }\n-            _ => bug!(\"invalid arg index\"),\n-        }\n-    }\n-    Some(ret)\n-}\n-\n struct Collector<'a, 'tcx> {\n     ccx: &'a ConstCx<'a, 'tcx>,\n     temps: IndexVec<Local, TempState>,\n@@ -208,31 +173,6 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n             _ => {}\n         }\n     }\n-\n-    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n-        self.super_terminator(terminator, location);\n-\n-        if let TerminatorKind::Call { ref func, .. } = terminator.kind {\n-            if let ty::FnDef(def_id, _) = *func.ty(self.ccx.body, self.ccx.tcx).kind() {\n-                let fn_sig = self.ccx.tcx.fn_sig(def_id);\n-                if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n-                    let name = self.ccx.tcx.item_name(def_id);\n-                    // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n-                    if name.as_str().starts_with(\"simd_shuffle\") {\n-                        self.candidates.push(Candidate::Argument { bb: location.block, index: 2 });\n-\n-                        return; // Don't double count `simd_shuffle` candidates\n-                    }\n-                }\n-\n-                if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n-                    for index in constant_args {\n-                        self.candidates.push(Candidate::Argument { bb: location.block, index });\n-                    }\n-                }\n-            }\n-        }\n-    }\n }\n \n pub fn collect_temps_and_candidates(\n@@ -256,14 +196,6 @@ pub fn collect_temps_and_candidates(\n struct Validator<'a, 'tcx> {\n     ccx: &'a ConstCx<'a, 'tcx>,\n     temps: &'a IndexVec<Local, TempState>,\n-\n-    /// Explicit promotion happens e.g. for constant arguments declared via\n-    /// `rustc_args_required_const`.\n-    /// Implicit promotion has almost the same rules, except that disallows `const fn`\n-    /// except for those marked `#[rustc_promotable]`. This is to avoid changing\n-    /// a legitimate run-time operation into a failing compile-time operation\n-    /// e.g. due to addresses being compared inside the function.\n-    explicit: bool,\n }\n \n impl std::ops::Deref for Validator<'a, 'tcx> {\n@@ -280,8 +212,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n     fn validate_candidate(&self, candidate: Candidate) -> Result<(), Unpromotable> {\n         match candidate {\n             Candidate::Ref(loc) => {\n-                assert!(!self.explicit);\n-\n                 let statement = &self.body[loc.block].statements[loc.statement_index];\n                 match &statement.kind {\n                     StatementKind::Assign(box (_, Rvalue::Ref(_, kind, place))) => {\n@@ -310,15 +240,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n-            Candidate::Argument { bb, index } => {\n-                assert!(self.explicit);\n-\n-                let terminator = self.body[bb].terminator();\n-                match &terminator.kind {\n-                    TerminatorKind::Call { args, .. } => self.validate_operand(&args[index]),\n-                    _ => bug!(),\n-                }\n-            }\n         }\n     }\n \n@@ -448,12 +369,10 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. } => {}\n \n                     ProjectionElem::Index(local) => {\n-                        if !self.explicit {\n-                            let mut promotable = false;\n-                            // Only accept if we can predict the index and are indexing an array.\n-                            let val = if let TempState::Defined { location: loc, .. } =\n-                                self.temps[local]\n-                            {\n+                        let mut promotable = false;\n+                        // Only accept if we can predict the index and are indexing an array.\n+                        let val =\n+                            if let TempState::Defined { location: loc, .. } = self.temps[local] {\n                                 let block = &self.body[loc.block];\n                                 if loc.statement_index < block.statements.len() {\n                                     let statement = &block.statements[loc.statement_index];\n@@ -470,28 +389,27 @@ impl<'tcx> Validator<'_, 'tcx> {\n                             } else {\n                                 None\n                             };\n-                            if let Some(idx) = val {\n-                                // Determine the type of the thing we are indexing.\n-                                let ty = place_base.ty(self.body, self.tcx).ty;\n-                                match ty.kind() {\n-                                    ty::Array(_, len) => {\n-                                        // It's an array; determine its length.\n-                                        if let Some(len) =\n-                                            len.try_eval_usize(self.tcx, self.param_env)\n-                                        {\n-                                            // If the index is in-bounds, go ahead.\n-                                            if idx < len {\n-                                                promotable = true;\n-                                            }\n+                        if let Some(idx) = val {\n+                            // Determine the type of the thing we are indexing.\n+                            let ty = place_base.ty(self.body, self.tcx).ty;\n+                            match ty.kind() {\n+                                ty::Array(_, len) => {\n+                                    // It's an array; determine its length.\n+                                    if let Some(len) = len.try_eval_usize(self.tcx, self.param_env)\n+                                    {\n+                                        // If the index is in-bounds, go ahead.\n+                                        if idx < len {\n+                                            promotable = true;\n                                         }\n                                     }\n-                                    _ => {}\n                                 }\n+                                _ => {}\n                             }\n-                            if !promotable {\n-                                return Err(Unpromotable);\n-                            }\n                         }\n+                        if !promotable {\n+                            return Err(Unpromotable);\n+                        }\n+\n                         self.validate_local(local)?;\n                     }\n \n@@ -636,7 +554,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                 match op {\n                     BinOp::Div | BinOp::Rem => {\n-                        if !self.explicit && lhs_ty.is_integral() {\n+                        if lhs_ty.is_integral() {\n                             // Integer division: the RHS must be a non-zero const.\n                             let const_val = match rhs {\n                                 Operand::Constant(c) => {\n@@ -721,13 +639,12 @@ impl<'tcx> Validator<'_, 'tcx> {\n     ) -> Result<(), Unpromotable> {\n         let fn_ty = callee.ty(self.body, self.tcx);\n \n-        // When doing explicit promotion and inside const/static items, we promote all (eligible) function calls.\n+        // Inside const/static items, we promote all (eligible) function calls.\n         // Everywhere else, we require `#[rustc_promotable]` on the callee.\n-        let promote_all_const_fn = self.explicit\n-            || matches!(\n-                self.const_kind,\n-                Some(hir::ConstContext::Static(_) | hir::ConstContext::Const)\n-            );\n+        let promote_all_const_fn = matches!(\n+            self.const_kind,\n+            Some(hir::ConstContext::Static(_) | hir::ConstContext::Const)\n+        );\n         if !promote_all_const_fn {\n             if let ty::FnDef(def_id, _) = *fn_ty.kind() {\n                 // Never promote runtime `const fn` calls of\n@@ -765,41 +682,12 @@ pub fn validate_candidates(\n     temps: &IndexVec<Local, TempState>,\n     candidates: &[Candidate],\n ) -> Vec<Candidate> {\n-    let mut validator = Validator { ccx, temps, explicit: false };\n+    let validator = Validator { ccx, temps };\n \n     candidates\n         .iter()\n         .copied()\n-        .filter(|&candidate| {\n-            validator.explicit = candidate.forces_explicit_promotion();\n-\n-            // FIXME(eddyb) also emit the errors for shuffle indices\n-            // and `#[rustc_args_required_const]` arguments here.\n-\n-            let is_promotable = validator.validate_candidate(candidate).is_ok();\n-\n-            // If we use explicit validation, we carry the risk of turning a legitimate run-time\n-            // operation into a failing compile-time operation. Make sure that does not happen\n-            // by asserting that there is no possible run-time behavior here in case promotion\n-            // fails.\n-            if validator.explicit && !is_promotable {\n-                ccx.tcx.sess.delay_span_bug(\n-                    ccx.body.span,\n-                    \"Explicit promotion requested, but failed to promote\",\n-                );\n-            }\n-\n-            match candidate {\n-                Candidate::Argument { bb, index } if !is_promotable => {\n-                    let span = ccx.body[bb].terminator().source_info.span;\n-                    let msg = format!(\"argument {} is required to be a constant\", index + 1);\n-                    ccx.tcx.sess.span_err(span, &msg);\n-                }\n-                _ => (),\n-            }\n-\n-            is_promotable\n-        })\n+        .filter(|&candidate| validator.validate_candidate(candidate).is_ok())\n         .collect()\n }\n \n@@ -1039,26 +927,6 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         _ => bug!(),\n                     }\n                 }\n-                Candidate::Argument { bb, index } => {\n-                    let terminator = blocks[bb].terminator_mut();\n-                    match terminator.kind {\n-                        TerminatorKind::Call { ref mut args, .. } => {\n-                            let ty = args[index].ty(local_decls, self.tcx);\n-                            let span = terminator.source_info.span;\n-\n-                            Rvalue::Use(mem::replace(&mut args[index], promoted_operand(ty, span)))\n-                        }\n-                        // We expected a `TerminatorKind::Call` for which we'd like to promote an\n-                        // argument. `qualify_consts` saw a `TerminatorKind::Call` here, but\n-                        // we are seeing a `Goto`. That means that the `promote_temps` method\n-                        // already promoted this call away entirely. This case occurs when calling\n-                        // a function requiring a constant argument and as that constant value\n-                        // providing a value whose computation contains another call to a function\n-                        // requiring a constant argument.\n-                        TerminatorKind::Goto { .. } => return None,\n-                        _ => bug!(),\n-                    }\n-                }\n             }\n         };\n \n@@ -1113,7 +981,6 @@ pub fn promote_candidates<'tcx>(\n                     }\n                 }\n             }\n-            Candidate::Argument { .. } => {}\n         }\n \n         // Declare return place local so that `mir::Body::new` doesn't complain."}, {"sha": "bf574bbfbb5aefc9f23c9f7f43f800ef90d09281", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 79, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -13,9 +13,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{\n-    self, FnSig, ForeignItem, ForeignItemKind, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID,\n-};\n+use rustc_hir::{self, FnSig, ForeignItem, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_hir::{MethodKind, Target};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, UNUSED_ATTRIBUTES,\n@@ -81,9 +79,6 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::doc => self.check_doc_attrs(attr, hir_id, target, &mut specified_inline),\n                 sym::no_link => self.check_no_link(hir_id, &attr, span, target),\n                 sym::export_name => self.check_export_name(hir_id, &attr, span, target),\n-                sym::rustc_args_required_const => {\n-                    self.check_rustc_args_required_const(&attr, span, target, item)\n-                }\n                 sym::rustc_layout_scalar_valid_range_start\n                 | sym::rustc_layout_scalar_valid_range_end => {\n                     self.check_rustc_layout_scalar_valid_range(&attr, span, target)\n@@ -948,79 +943,6 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    /// Checks if `#[rustc_args_required_const]` is applied to a function and has a valid argument.\n-    fn check_rustc_args_required_const(\n-        &self,\n-        attr: &Attribute,\n-        span: &Span,\n-        target: Target,\n-        item: Option<ItemLike<'_>>,\n-    ) -> bool {\n-        let is_function = matches!(target, Target::Fn | Target::Method(..) | Target::ForeignFn);\n-        if !is_function {\n-            self.tcx\n-                .sess\n-                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(*span, \"not a function\")\n-                .emit();\n-            return false;\n-        }\n-\n-        let list = match attr.meta_item_list() {\n-            // The attribute form is validated on AST.\n-            None => return false,\n-            Some(it) => it,\n-        };\n-\n-        let mut invalid_args = vec![];\n-        for meta in list {\n-            if let Some(LitKind::Int(val, _)) = meta.literal().map(|lit| &lit.kind) {\n-                if let Some(ItemLike::Item(Item {\n-                    kind: ItemKind::Fn(FnSig { decl, .. }, ..),\n-                    ..\n-                }))\n-                | Some(ItemLike::ForeignItem(ForeignItem {\n-                    kind: ForeignItemKind::Fn(decl, ..),\n-                    ..\n-                })) = item\n-                {\n-                    let arg_count = decl.inputs.len() as u128;\n-                    if *val >= arg_count {\n-                        let span = meta.span();\n-                        self.tcx\n-                            .sess\n-                            .struct_span_err(span, \"index exceeds number of arguments\")\n-                            .span_label(\n-                                span,\n-                                format!(\n-                                    \"there {} only {} argument{}\",\n-                                    if arg_count != 1 { \"are\" } else { \"is\" },\n-                                    arg_count,\n-                                    pluralize!(arg_count)\n-                                ),\n-                            )\n-                            .emit();\n-                        return false;\n-                    }\n-                } else {\n-                    bug!(\"should be a function item\");\n-                }\n-            } else {\n-                invalid_args.push(meta.span());\n-            }\n-        }\n-\n-        if !invalid_args.is_empty() {\n-            self.tcx\n-                .sess\n-                .struct_span_err(invalid_args, \"arguments should be non-negative integers\")\n-                .emit();\n-            false\n-        } else {\n-            true\n-        }\n-    }\n-\n     fn check_rustc_layout_scalar_valid_range(\n         &self,\n         attr: &Attribute,"}, {"sha": "ab8537b088cbec404f9710df5636c298984428af", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -994,7 +994,6 @@ symbols! {\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_unstable,\n-        rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,\n         rustc_capture_analysis,"}, {"sha": "4de8216884a6877ca81dc6d3bd5f875795973cdf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -1537,8 +1537,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        self.check_rustc_args_require_const(def_id, hir_id, span);\n-\n         debug!(\"instantiate_value_path: type of {:?} is {:?}\", hir_id, ty_substituted);\n         self.write_substs(hir_id, substs);\n "}, {"sha": "49aea19c8d099970e72e2ec57fb5ddbc58478f0c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::Session;\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::Ident;\n use rustc_span::{self, MultiSpan, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, StatementAsExpression};\n \n@@ -720,34 +720,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    pub(in super::super) fn check_rustc_args_require_const(\n-        &self,\n-        def_id: DefId,\n-        hir_id: hir::HirId,\n-        span: Span,\n-    ) {\n-        // We're only interested in functions tagged with\n-        // #[rustc_args_required_const], so ignore anything that's not.\n-        if !self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n-            return;\n-        }\n-\n-        // If our calling expression is indeed the function itself, we're good!\n-        // If not, generate an error that this can only be called directly.\n-        if let Node::Expr(expr) = self.tcx.hir().get(self.tcx.hir().get_parent_node(hir_id)) {\n-            if let ExprKind::Call(ref callee, ..) = expr.kind {\n-                if callee.hir_id == hir_id {\n-                    return;\n-                }\n-            }\n-        }\n-\n-        self.tcx.sess.span_err(\n-            span,\n-            \"this function can only be invoked directly, not through a function pointer\",\n-        );\n-    }\n-\n     /// A common error is to add an extra semicolon:\n     ///\n     /// ```"}, {"sha": "c14e98417feb406df66e821ccd81e1293b4baa6f", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -1 +1 @@\n-Subproject commit 6c4f4e1990b76be8a07bde1956d2e3452fd55ee4\n+Subproject commit c14e98417feb406df66e821ccd81e1293b4baa6f"}, {"sha": "edb3d60ba3f894372d0a76936d5f4ada45072fea", "filename": "src/test/incremental/issue-61530.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fincremental%2Fissue-61530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fincremental%2Fissue-61530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-61530.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -11,7 +11,8 @@ extern \"platform-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), [0, 0]);\n-        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), [0, 0]);\n+        const IDX: [u32; 2] = [0, 0];\n+        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), IDX);\n+        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), IDX);\n     }\n }"}, {"sha": "9ee2777a647e0202ac9d44fd94c9db2de886336d", "filename": "src/test/ui/consts/const-eval/double_promotion.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,17 +0,0 @@\n-// check-pass\n-\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-pub const fn a(value: u8) -> u8 {\n-    value\n-}\n-\n-#[rustc_args_required_const(0)]\n-pub fn b(_: u8) {\n-    unimplemented!()\n-}\n-\n-fn main() {\n-    let _ = b(a(0));\n-}"}, {"sha": "9add1f8d5a3592615956cefb6ccb69ab5fe1a4e5", "filename": "src/test/ui/consts/const_arg_local.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_local.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,11 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-fn foo(_imm8: i32) {}\n-\n-fn bar() {\n-    let imm8 = 3;\n-    foo(imm8) //~ ERROR argument 1 is required to be a constant\n-}\n-\n-fn main() {}"}, {"sha": "bad85471a6b376df719c9574b98488ba457176b7", "filename": "src/test/ui/consts/const_arg_local.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_local.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,8 +0,0 @@\n-error: argument 1 is required to be a constant\n-  --> $DIR/const_arg_local.rs:8:5\n-   |\n-LL |     foo(imm8)\n-   |     ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "cea3817550eb2b101215ac0f16289dd03d53e38d", "filename": "src/test/ui/consts/const_arg_promotable.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,10 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-fn foo(_imm8: i32) {}\n-\n-fn bar() {\n-    foo(*&mut 42) //~ ERROR argument 1 is required to be a constant\n-}\n-\n-fn main() {}"}, {"sha": "b24b245b3ce0c867f5539e035711208e6b5400cc", "filename": "src/test/ui/consts/const_arg_promotable.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,8 +0,0 @@\n-error: argument 1 is required to be a constant\n-  --> $DIR/const_arg_promotable.rs:7:5\n-   |\n-LL |     foo(*&mut 42)\n-   |     ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3399e51ed4edb26d60636b89282a557d4af89f7a", "filename": "src/test/ui/consts/const_arg_promotable2.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,18 +0,0 @@\n-// This test is a regression test for a bug where we only checked function calls in no-const\n-// functions for `rustc_args_required_const` arguments. This meant that even though `bar` needs its\n-// argument to be const, inside a const fn (callable at runtime), the value for it may come from a\n-// non-constant (namely an argument to the const fn).\n-\n-#![feature(rustc_attrs)]\n-const fn foo(a: i32) {\n-    bar(a); //~ ERROR argument 1 is required to be a constant\n-}\n-\n-#[rustc_args_required_const(0)]\n-const fn bar(_: i32) {}\n-\n-fn main() {\n-    // this function call will pass a runtime-value (number of program arguments) to `foo`, which\n-    // will in turn forward it to `bar`, which expects a compile-time argument\n-    foo(std::env::args().count() as i32);\n-}"}, {"sha": "149d1ce89408d78473de8e7138fa0e1f875918a9", "filename": "src/test/ui/consts/const_arg_promotable2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,8 +0,0 @@\n-error: argument 1 is required to be a constant\n-  --> $DIR/const_arg_promotable2.rs:8:5\n-   |\n-LL |     bar(a);\n-   |     ^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3dd3a2ffaf3cba83f332c2fca31e2b85592a8a5f", "filename": "src/test/ui/consts/const_arg_wrapper.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_wrapper.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,10 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-fn foo(_imm8: i32) {}\n-\n-fn bar(imm8: i32) {\n-    foo(imm8) //~ ERROR argument 1 is required to be a constant\n-}\n-\n-fn main() {}"}, {"sha": "9cd95a2020fcd1c2b2e0f2ddb0039568e7946e06", "filename": "src/test/ui/consts/const_arg_wrapper.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_wrapper.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,8 +0,0 @@\n-error: argument 1 is required to be a constant\n-  --> $DIR/const_arg_wrapper.rs:7:5\n-   |\n-LL |     foo(imm8)\n-   |     ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0723b66879c388bf213ddfcc4913ebed6ed1f356", "filename": "src/test/ui/consts/rustc-args-required-const.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,27 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-fn foo(_a: i32) {\n-}\n-\n-#[rustc_args_required_const(1)]\n-fn bar(_a: i32, _b: i32) {\n-}\n-\n-const A: i32 = 3;\n-\n-const fn baz() -> i32 {\n-    3\n-}\n-\n-fn main() {\n-    foo(2);\n-    foo(2 + 3);\n-    const BAZ: i32 = baz();\n-    foo(BAZ);\n-    let a = 4;\n-    foo(A);\n-    foo(a); //~ ERROR: argument 1 is required to be a constant\n-    bar(a, 3);\n-    bar(a, a); //~ ERROR: argument 2 is required to be a constant\n-}"}, {"sha": "8b302692053a2b973e928784f8e256be8cff2482", "filename": "src/test/ui/consts/rustc-args-required-const.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,14 +0,0 @@\n-error: argument 1 is required to be a constant\n-  --> $DIR/rustc-args-required-const.rs:24:5\n-   |\n-LL |     foo(a);\n-   |     ^^^^^^\n-\n-error: argument 2 is required to be a constant\n-  --> $DIR/rustc-args-required-const.rs:26:5\n-   |\n-LL |     bar(a, a);\n-   |     ^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "99508baeb0070b56d002896f8def14877ae83640", "filename": "src/test/ui/invalid/invalid-rustc_args_required_const-arguments.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,32 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)] //~ ERROR index exceeds number of arguments\n-fn foo1() {}\n-\n-#[rustc_args_required_const(1)] //~ ERROR index exceeds number of arguments\n-fn foo2(_: u8) {}\n-\n-#[rustc_args_required_const(a)] //~ ERROR arguments should be non-negative integers\n-fn foo4() {}\n-\n-#[rustc_args_required_const(1, a, 2, b)] //~ ERROR arguments should be non-negative integers\n-fn foo5(_: u8, _: u8, _: u8) {}\n-\n-#[rustc_args_required_const(0)] //~ ERROR attribute should be applied to a function\n-struct S;\n-\n-#[rustc_args_required_const(0usize)] //~ ERROR suffixed literals are not allowed in attributes\n-fn foo6(_: u8) {}\n-\n-extern {\n-    #[rustc_args_required_const(1)] //~ ERROR index exceeds number of arguments\n-    fn foo7(_: u8);\n-}\n-\n-#[rustc_args_required_const] //~ ERROR malformed `rustc_args_required_const` attribute\n-fn bar1() {}\n-\n-#[rustc_args_required_const = 1] //~ ERROR malformed `rustc_args_required_const` attribute\n-fn bar2() {}\n-\n-fn main() {}"}, {"sha": "932344f0a33c5877fa1bfd357714e180bcc146ff", "filename": "src/test/ui/invalid/invalid-rustc_args_required_const-arguments.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,60 +0,0 @@\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:18:29\n-   |\n-LL | #[rustc_args_required_const(0usize)]\n-   |                             ^^^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: malformed `rustc_args_required_const` attribute input\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:26:1\n-   |\n-LL | #[rustc_args_required_const]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_args_required_const(N)]`\n-\n-error: malformed `rustc_args_required_const` attribute input\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:29:1\n-   |\n-LL | #[rustc_args_required_const = 1]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_args_required_const(N)]`\n-\n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:3:29\n-   |\n-LL | #[rustc_args_required_const(0)]\n-   |                             ^ there are only 0 arguments\n-\n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:6:29\n-   |\n-LL | #[rustc_args_required_const(1)]\n-   |                             ^ there is only 1 argument\n-\n-error: arguments should be non-negative integers\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:9:29\n-   |\n-LL | #[rustc_args_required_const(a)]\n-   |                             ^\n-\n-error: arguments should be non-negative integers\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:12:32\n-   |\n-LL | #[rustc_args_required_const(1, a, 2, b)]\n-   |                                ^     ^\n-\n-error: attribute should be applied to a function\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:15:1\n-   |\n-LL | #[rustc_args_required_const(0)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | struct S;\n-   | --------- not a function\n-\n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:22:33\n-   |\n-LL |     #[rustc_args_required_const(1)]\n-   |                                 ^ there is only 1 argument\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "214d6752cef1d0407f8f4ac07d3b0aaf1312d83c", "filename": "src/test/ui/issues/issue-38074.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,20 +0,0 @@\n-// run-pass\n-// ignore-emscripten FIXME(#45351)\n-\n-#![feature(platform_intrinsics, repr_simd)]\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n-}\n-\n-#[repr(simd)]\n-#[derive(Clone, Copy)]\n-#[allow(non_camel_case_types)]\n-struct u64x2(u64, u64);\n-\n-fn main() {\n-    let a = u64x2(1, 2);\n-    let r: u64x2 = unsafe { simd_shuffle2(a, a, [0-0, 0-0]) };\n-    assert_eq!(r.0, 1);\n-    assert_eq!(r.1, 1);\n-}"}, {"sha": "06457bc5ca65a1465da34ca75195ab43752445cf", "filename": "src/test/ui/rustc-args-required-const2.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const2.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,10 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-fn foo(_a: i32) {\n-}\n-\n-fn main() {\n-    let a = foo; //~ ERROR: this function can only be invoked directly\n-    a(2);\n-}"}, {"sha": "a8906ad3bc55123da6e7310b1c6a4ccdc2c00b57", "filename": "src/test/ui/rustc-args-required-const2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Frustc-args-required-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Frustc-args-required-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const2.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,8 +0,0 @@\n-error: this function can only be invoked directly, not through a function pointer\n-  --> $DIR/rustc-args-required-const2.rs:8:13\n-   |\n-LL |     let a = foo;\n-   |             ^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "abde69163bd4eb1e95e4b39b26030788ad3c9f17", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -50,25 +50,28 @@ fn main() {\n         simd_extract::<_, f32>(x, 0);\n         //~^ ERROR expected return type `i32` (element of input `i32x4`), found `f32`\n \n-        simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n+        const IDX2: [u32; 2] = [0; 2];\n+        simd_shuffle2::<i32, i32>(0, 0, IDX2);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n-        simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n+        const IDX4: [u32; 4] = [0; 4];\n+        simd_shuffle4::<i32, i32>(0, 0, IDX4);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n-        simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n+        const IDX8: [u32; 8] = [0; 8];\n+        simd_shuffle8::<i32, i32>(0, 0, IDX8);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n \n-        simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n+        simd_shuffle2::<_, f32x2>(x, x, IDX2);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-        simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n+        simd_shuffle4::<_, f32x4>(x, x, IDX4);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-        simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n+        simd_shuffle8::<_, f32x8>(x, x, IDX8);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n \n-        simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n+        simd_shuffle2::<_, i32x8>(x, x, IDX2);\n         //~^ ERROR expected return type of length 2, found `i32x8` with length 8\n-        simd_shuffle4::<_, i32x8>(x, x, [0; 4]);\n+        simd_shuffle4::<_, i32x8>(x, x, IDX4);\n         //~^ ERROR expected return type of length 4, found `i32x8` with length 8\n-        simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n+        simd_shuffle8::<_, i32x2>(x, x, IDX8);\n         //~^ ERROR expected return type of length 8, found `i32x2` with length 2\n     }\n }"}, {"sha": "4220411114efd6d4dcc728d540a407c7039902bc", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -17,58 +17,58 @@ LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:53:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:54:9\n    |\n-LL |         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle2::<i32, i32>(0, 0, IDX2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n    |\n-LL |         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle4::<i32, i32>(0, 0, IDX4);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n    |\n-LL |         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle8::<i32, i32>(0, 0, IDX8);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:63:9\n    |\n-LL |         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle2::<_, f32x2>(x, x, IDX2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:65:9\n    |\n-LL |         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle4::<_, f32x4>(x, x, IDX4);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:67:9\n    |\n-LL |         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle8::<_, f32x8>(x, x, IDX8);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:67:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:70:9\n    |\n-LL |         simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle2::<_, i32x8>(x, x, IDX2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:69:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:72:9\n    |\n-LL |         simd_shuffle4::<_, i32x8>(x, x, [0; 4]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle4::<_, i32x8>(x, x, IDX4);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:74:9\n    |\n-LL |         simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle8::<_, i32x2>(x, x, IDX8);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "7221b3ab769db460c8be8dc1836479cee74401f6", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557-ice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -21,5 +21,6 @@ fn main() {\n \n #[inline(always)]\n unsafe fn inline_me() -> Simd2 {\n-    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), [0, 3])\n+    const IDX: [u32; 2] = [0, 3];\n+    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), IDX)\n }"}, {"sha": "0d15427095a749d69964a5c8246ab596aa2c86e6", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -15,7 +15,8 @@ struct Simd2(u8, u8);\n \n fn main() {\n     unsafe {\n-        let p_res: Simd2 = simd_shuffle2(Simd2(10, 11), Simd2(12, 13), [0, 1]);\n+        const IDX: [u32; 2] = [0, 1];\n+        let p_res: Simd2 = simd_shuffle2(Simd2(10, 11), Simd2(12, 13), IDX);\n         let a_res: Simd2 = inline_me();\n \n         assert_10_11(p_res);\n@@ -36,5 +37,6 @@ fn assert_10_13(x: Simd2) {\n \n #[inline(always)]\n unsafe fn inline_me() -> Simd2 {\n-    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), [0, 3])\n+    const IDX: [u32; 2] = [0, 3];\n+    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), IDX)\n }"}, {"sha": "08544bce45db97dca47c604f50a2b0073337edff", "filename": "src/test/ui/simd/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2df620789cd82a6751320223cd3de87256bf15e/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs?ref=d2df620789cd82a6751320223cd3de87256bf15e", "patch": "@@ -2,6 +2,8 @@\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n \n #![feature(repr_simd, platform_intrinsics)]\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -82,19 +84,19 @@ fn main() {\n     let y4 = i32x4(140, 141, 142, 143);\n     let y8 = i32x8(180, 181, 182, 183, 184, 185, 186, 187);\n     unsafe {\n-        all_eq!(simd_shuffle2(x2, y2, [3, 0]), i32x2(121, 20));\n-        all_eq!(simd_shuffle4(x2, y2, [3, 0, 1, 2]), i32x4(121, 20, 21, 120));\n-        all_eq!(simd_shuffle8(x2, y2, [3, 0, 1, 2, 1, 2, 3, 0]),\n+        all_eq!(simd_shuffle2(x2, y2, const { [3u32, 0] }), i32x2(121, 20));\n+        all_eq!(simd_shuffle4(x2, y2, const { [3u32, 0, 1, 2] }), i32x4(121, 20, 21, 120));\n+        all_eq!(simd_shuffle8(x2, y2, const { [3u32, 0, 1, 2, 1, 2, 3, 0] }),\n                 i32x8(121, 20, 21, 120, 21, 120, 121, 20));\n \n-        all_eq!(simd_shuffle2(x4, y4, [7, 2]), i32x2(143, 42));\n-        all_eq!(simd_shuffle4(x4, y4, [7, 2, 5, 0]), i32x4(143, 42, 141, 40));\n-        all_eq!(simd_shuffle8(x4, y4, [7, 2, 5, 0, 3, 6, 4, 1]),\n+        all_eq!(simd_shuffle2(x4, y4, const { [7u32, 2] }), i32x2(143, 42));\n+        all_eq!(simd_shuffle4(x4, y4, const { [7u32, 2, 5, 0] }), i32x4(143, 42, 141, 40));\n+        all_eq!(simd_shuffle8(x4, y4, const { [7u32, 2, 5, 0, 3, 6, 4, 1] }),\n                 i32x8(143, 42, 141, 40, 43, 142, 140, 41));\n \n-        all_eq!(simd_shuffle2(x8, y8, [11, 5]), i32x2(183, 85));\n-        all_eq!(simd_shuffle4(x8, y8, [11, 5, 15, 0]), i32x4(183, 85, 187, 80));\n-        all_eq!(simd_shuffle8(x8, y8, [11, 5, 15, 0, 3, 8, 12, 1]),\n+        all_eq!(simd_shuffle2(x8, y8, const { [11u32, 5] }), i32x2(183, 85));\n+        all_eq!(simd_shuffle4(x8, y8, const { [11u32, 5, 15, 0] }), i32x4(183, 85, 187, 80));\n+        all_eq!(simd_shuffle8(x8, y8, const { [11u32, 5, 15, 0, 3, 8, 12, 1] }),\n                 i32x8(183, 85, 187, 80, 83, 180, 184, 81));\n     }\n "}]}