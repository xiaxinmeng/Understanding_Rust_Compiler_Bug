{"sha": "4abe815729847303c9729df76d0f3166fe7ae2fb", "node_id": "C_kwDOAAsO6NoAKDRhYmU4MTU3Mjk4NDczMDNjOTcyOWRmNzZkMGYzMTY2ZmU3YWUyZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-08T09:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-08T09:20:52Z"}, "message": "Auto merge of #9765 - koka831:feat/manual_is_ascii_check, r=xFrednet\n\nAdd `manual_is_ascii_check` lint\n\nAddresses https://github.com/rust-lang/rust-clippy/issues/9290\n\nThis PR adds new lint `manual_is_ascii_check`, which detects comparison with ascii ranges using `matches!` macros.\n\nAs I mentioned as following in the Issue;\n> Yes, that's true. we'll start small and then grow it.\n> So I'll try to handle matches! macro with single range as suggested above.\n\nHowever during writing first version, I was thinking that the changes to support alphabetic and digits will be small patch, so I made a single PR in hope review cost can be reduced.\n\nchangelog: add new lint [`manual_is_ascii_check`]\n\nr? `@xFrednet`", "tree": {"sha": "01209c7ae9e9857c6e7b2dad9889a6173012af23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01209c7ae9e9857c6e7b2dad9889a6173012af23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4abe815729847303c9729df76d0f3166fe7ae2fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4abe815729847303c9729df76d0f3166fe7ae2fb", "html_url": "https://github.com/rust-lang/rust/commit/4abe815729847303c9729df76d0f3166fe7ae2fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4abe815729847303c9729df76d0f3166fe7ae2fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5857a0174249bd5a9c0daeb4a9fde4a3601d7303", "url": "https://api.github.com/repos/rust-lang/rust/commits/5857a0174249bd5a9c0daeb4a9fde4a3601d7303", "html_url": "https://github.com/rust-lang/rust/commit/5857a0174249bd5a9c0daeb4a9fde4a3601d7303"}, {"sha": "e4540ad65fa14ceebd5145ab771fe4918d170bf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4540ad65fa14ceebd5145ab771fe4918d170bf1", "html_url": "https://github.com/rust-lang/rust/commit/e4540ad65fa14ceebd5145ab771fe4918d170bf1"}], "stats": {"total": 323, "additions": 322, "deletions": 1}, "files": [{"sha": "9bd67617f5bfa51252c4d3066a446394b8c8a608", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -4142,6 +4142,7 @@ Released 2018-09-13\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n [`manual_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_flatten\n [`manual_instant_elapsed`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_instant_elapsed\n+[`manual_is_ascii_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_ascii_check\n [`manual_let_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else\n [`manual_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy"}, {"sha": "98265410e849036533787ca3304a881f70b103ab", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -251,6 +251,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::manual_bits::MANUAL_BITS_INFO,\n     crate::manual_clamp::MANUAL_CLAMP_INFO,\n     crate::manual_instant_elapsed::MANUAL_INSTANT_ELAPSED_INFO,\n+    crate::manual_is_ascii_check::MANUAL_IS_ASCII_CHECK_INFO,\n     crate::manual_let_else::MANUAL_LET_ELSE_INFO,\n     crate::manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE_INFO,\n     crate::manual_rem_euclid::MANUAL_REM_EUCLID_INFO,"}, {"sha": "a4bacb780349bd56e2015b451e322f9e87336762", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -173,6 +173,7 @@ mod manual_async_fn;\n mod manual_bits;\n mod manual_clamp;\n mod manual_instant_elapsed;\n+mod manual_is_ascii_check;\n mod manual_let_else;\n mod manual_non_exhaustive;\n mod manual_rem_euclid;\n@@ -919,6 +920,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(missing_trait_methods::MissingTraitMethods));\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n+    store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "3a6b693f7662c83d050f457b83adbe6e70a6281f", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -0,0 +1,157 @@\n+use rustc_ast::LitKind::{Byte, Char};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, PatKind, RangeEnd};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{def_id::DefId, sym};\n+\n+use clippy_utils::{\n+    diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, meets_msrv, msrvs, source::snippet,\n+};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Suggests to use dedicated built-in methods,\n+    /// `is_ascii_(lowercase|uppercase|digit)` for checking on corresponding ascii range\n+    ///\n+    /// ### Why is this bad?\n+    /// Using the built-in functions is more readable and makes it\n+    /// clear that it's not a specific subset of characters, but all\n+    /// ASCII (lowercase|uppercase|digit) characters.\n+    /// ### Example\n+    /// ```rust\n+    /// fn main() {\n+    ///     assert!(matches!('x', 'a'..='z'));\n+    ///     assert!(matches!(b'X', b'A'..=b'Z'));\n+    ///     assert!(matches!('2', '0'..='9'));\n+    ///     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn main() {\n+    ///     assert!('x'.is_ascii_lowercase());\n+    ///     assert!(b'X'.is_ascii_uppercase());\n+    ///     assert!('2'.is_ascii_digit());\n+    ///     assert!('x'.is_ascii_alphabetic());\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub MANUAL_IS_ASCII_CHECK,\n+    style,\n+    \"use dedicated method to check ascii range\"\n+}\n+impl_lint_pass!(ManualIsAsciiCheck => [MANUAL_IS_ASCII_CHECK]);\n+\n+pub struct ManualIsAsciiCheck {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl ManualIsAsciiCheck {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+#[derive(Debug, PartialEq)]\n+enum CharRange {\n+    /// 'a'..='z' | b'a'..=b'z'\n+    LowerChar,\n+    /// 'A'..='Z' | b'A'..=b'Z'\n+    UpperChar,\n+    /// AsciiLower | AsciiUpper\n+    FullChar,\n+    /// '0..=9'\n+    Digit,\n+    Otherwise,\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for ManualIsAsciiCheck {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv, msrvs::IS_ASCII_DIGIT) {\n+            return;\n+        }\n+\n+        if in_constant(cx, expr.hir_id) && !meets_msrv(self.msrv, msrvs::IS_ASCII_DIGIT_CONST) {\n+            return;\n+        }\n+\n+        let Some(macro_call) = root_macro_call(expr.span) else { return };\n+\n+        if is_matches_macro(cx, macro_call.def_id) {\n+            if let ExprKind::Match(recv, [arm, ..], _) = expr.kind {\n+                let range = check_pat(&arm.pat.kind);\n+\n+                if let Some(sugg) = match range {\n+                    CharRange::UpperChar => Some(\"is_ascii_uppercase\"),\n+                    CharRange::LowerChar => Some(\"is_ascii_lowercase\"),\n+                    CharRange::FullChar => Some(\"is_ascii_alphabetic\"),\n+                    CharRange::Digit => Some(\"is_ascii_digit\"),\n+                    CharRange::Otherwise => None,\n+                } {\n+                    let mut applicability = Applicability::MaybeIncorrect;\n+                    let default_snip = \"..\";\n+                    // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n+                    // macro span, so we check applicability manually by comaring `recv` is not default.\n+                    let recv = snippet(cx, recv.span, default_snip);\n+\n+                    if recv != default_snip {\n+                        applicability = Applicability::MachineApplicable;\n+                    }\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        MANUAL_IS_ASCII_CHECK,\n+                        macro_call.span,\n+                        \"manual check for common ascii range\",\n+                        \"try\",\n+                        format!(\"{recv}.{sugg}()\"),\n+                        applicability,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}\n+\n+fn check_pat(pat_kind: &PatKind<'_>) -> CharRange {\n+    match pat_kind {\n+        PatKind::Or(pats) => {\n+            let ranges = pats.iter().map(|p| check_pat(&p.kind)).collect::<Vec<_>>();\n+\n+            if ranges.len() == 2 && ranges.contains(&CharRange::UpperChar) && ranges.contains(&CharRange::LowerChar) {\n+                CharRange::FullChar\n+            } else {\n+                CharRange::Otherwise\n+            }\n+        },\n+        PatKind::Range(Some(start), Some(end), kind) if *kind == RangeEnd::Included => check_range(start, end),\n+        _ => CharRange::Otherwise,\n+    }\n+}\n+\n+fn check_range(start: &Expr<'_>, end: &Expr<'_>) -> CharRange {\n+    if let ExprKind::Lit(start_lit) = &start.kind\n+        && let ExprKind::Lit(end_lit) = &end.kind {\n+        match (&start_lit.node, &end_lit.node) {\n+            (Char('a'), Char('z')) | (Byte(b'a'), Byte(b'z')) => CharRange::LowerChar,\n+            (Char('A'), Char('Z')) | (Byte(b'A'), Byte(b'Z')) => CharRange::UpperChar,\n+            (Char('0'), Char('9')) | (Byte(b'0'), Byte(b'9')) => CharRange::Digit,\n+            _ => CharRange::Otherwise,\n+        }\n+    } else {\n+        CharRange::Otherwise\n+    }\n+}\n+\n+fn is_matches_macro(cx: &LateContext<'_>, macro_def_id: DefId) -> bool {\n+    if let Some(name) = cx.tcx.get_diagnostic_name(macro_def_id) {\n+        return sym::matches_macro == name;\n+    }\n+\n+    false\n+}"}, {"sha": "79b19e6fb3eb051eff7a865ac44ea944e4d9cd88", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -19,7 +19,7 @@ msrv_aliases! {\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, SEEK_FROM_CURRENT, UNSIGNED_ABS }\n     1,50,0 { BOOL_THEN, CLAMP }\n-    1,47,0 { TAU }\n+    1,47,0 { TAU, IS_ASCII_DIGIT_CONST }\n     1,46,0 { CONST_IF_MATCH }\n     1,45,0 { STR_STRIP_PREFIX }\n     1,43,0 { LOG2_10, LOG10_2 }"}, {"sha": "765bb785994e21275752475450dc439b3e4e2300", "filename": "tests/ui/manual_is_ascii_check.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/tests%2Fui%2Fmanual_is_ascii_check.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/tests%2Fui%2Fmanual_is_ascii_check.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.fixed?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n+#![allow(unused, dead_code)]\n+#![warn(clippy::manual_is_ascii_check)]\n+\n+fn main() {\n+    assert!('x'.is_ascii_lowercase());\n+    assert!('X'.is_ascii_uppercase());\n+    assert!(b'x'.is_ascii_lowercase());\n+    assert!(b'X'.is_ascii_uppercase());\n+\n+    let num = '2';\n+    assert!(num.is_ascii_digit());\n+    assert!(b'1'.is_ascii_digit());\n+    assert!('x'.is_ascii_alphabetic());\n+\n+    assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+}\n+\n+fn msrv_1_23() {\n+    #![clippy::msrv = \"1.23\"]\n+\n+    assert!(matches!(b'1', b'0'..=b'9'));\n+    assert!(matches!('X', 'A'..='Z'));\n+    assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+}\n+\n+fn msrv_1_24() {\n+    #![clippy::msrv = \"1.24\"]\n+\n+    assert!(b'1'.is_ascii_digit());\n+    assert!('X'.is_ascii_uppercase());\n+    assert!('x'.is_ascii_alphabetic());\n+}\n+\n+fn msrv_1_46() {\n+    #![clippy::msrv = \"1.46\"]\n+    const FOO: bool = matches!('x', '0'..='9');\n+}\n+\n+fn msrv_1_47() {\n+    #![clippy::msrv = \"1.47\"]\n+    const FOO: bool = 'x'.is_ascii_digit();\n+}"}, {"sha": "be133161041234b251968cafde2e28208c80027b", "filename": "tests/ui/manual_is_ascii_check.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/tests%2Fui%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/tests%2Fui%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.rs?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n+#![allow(unused, dead_code)]\n+#![warn(clippy::manual_is_ascii_check)]\n+\n+fn main() {\n+    assert!(matches!('x', 'a'..='z'));\n+    assert!(matches!('X', 'A'..='Z'));\n+    assert!(matches!(b'x', b'a'..=b'z'));\n+    assert!(matches!(b'X', b'A'..=b'Z'));\n+\n+    let num = '2';\n+    assert!(matches!(num, '0'..='9'));\n+    assert!(matches!(b'1', b'0'..=b'9'));\n+    assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+\n+    assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+}\n+\n+fn msrv_1_23() {\n+    #![clippy::msrv = \"1.23\"]\n+\n+    assert!(matches!(b'1', b'0'..=b'9'));\n+    assert!(matches!('X', 'A'..='Z'));\n+    assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+}\n+\n+fn msrv_1_24() {\n+    #![clippy::msrv = \"1.24\"]\n+\n+    assert!(matches!(b'1', b'0'..=b'9'));\n+    assert!(matches!('X', 'A'..='Z'));\n+    assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+}\n+\n+fn msrv_1_46() {\n+    #![clippy::msrv = \"1.46\"]\n+    const FOO: bool = matches!('x', '0'..='9');\n+}\n+\n+fn msrv_1_47() {\n+    #![clippy::msrv = \"1.47\"]\n+    const FOO: bool = matches!('x', '0'..='9');\n+}"}, {"sha": "c0a9d4db1a15960f9d47c605c6321b087c270e17", "filename": "tests/ui/manual_is_ascii_check.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4abe815729847303c9729df76d0f3166fe7ae2fb/tests%2Fui%2Fmanual_is_ascii_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4abe815729847303c9729df76d0f3166fe7ae2fb/tests%2Fui%2Fmanual_is_ascii_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.stderr?ref=4abe815729847303c9729df76d0f3166fe7ae2fb", "patch": "@@ -0,0 +1,70 @@\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:8:13\n+   |\n+LL |     assert!(matches!('x', 'a'..='z'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_lowercase()`\n+   |\n+   = note: `-D clippy::manual-is-ascii-check` implied by `-D warnings`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:9:13\n+   |\n+LL |     assert!(matches!('X', 'A'..='Z'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:10:13\n+   |\n+LL |     assert!(matches!(b'x', b'a'..=b'z'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'x'.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:11:13\n+   |\n+LL |     assert!(matches!(b'X', b'A'..=b'Z'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'X'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:14:13\n+   |\n+LL |     assert!(matches!(num, '0'..='9'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:15:13\n+   |\n+LL |     assert!(matches!(b'1', b'0'..=b'9'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:16:13\n+   |\n+LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:32:13\n+   |\n+LL |     assert!(matches!(b'1', b'0'..=b'9'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:33:13\n+   |\n+LL |     assert!(matches!('X', 'A'..='Z'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:34:13\n+   |\n+LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:44:23\n+   |\n+LL |     const FOO: bool = matches!('x', '0'..='9');\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_digit()`\n+\n+error: aborting due to 11 previous errors\n+"}]}