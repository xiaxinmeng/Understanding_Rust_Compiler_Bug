{"sha": "3a38797f495e30dec8117aa33032bbc7b6e5f17b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMzg3OTdmNDk1ZTMwZGVjODExN2FhMzMwMzJiYmM3YjZlNWYxN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-06T16:47:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-06T16:47:13Z"}, "message": "auto merge of #17798 : tomjakubowski/rust/rustdoc-fix-bounds, r=alexcrichton\n\nThis PR adds support in rustdoc for properly naming lifetimes in bounds, instead of just showing `'static` for everything. It also adds support for unboxed function sugar bounds, which were also previously rendered as `'static`.", "tree": {"sha": "1edf99997972328e0a5d119622cbd439980434bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1edf99997972328e0a5d119622cbd439980434bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a38797f495e30dec8117aa33032bbc7b6e5f17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a38797f495e30dec8117aa33032bbc7b6e5f17b", "html_url": "https://github.com/rust-lang/rust/commit/3a38797f495e30dec8117aa33032bbc7b6e5f17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a38797f495e30dec8117aa33032bbc7b6e5f17b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edcdbb0c01187a0cc6456ca29cd858579459b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edcdbb0c01187a0cc6456ca29cd858579459b18", "html_url": "https://github.com/rust-lang/rust/commit/3edcdbb0c01187a0cc6456ca29cd858579459b18"}, {"sha": "7a6eaea720a7e878f52c03b3298e782e50f1a074", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6eaea720a7e878f52c03b3298e782e50f1a074", "html_url": "https://github.com/rust-lang/rust/commit/7a6eaea720a7e878f52c03b3298e782e50f1a074"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "4ef72361701f2bf4e2ab5294bc382fbbb671554d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a38797f495e30dec8117aa33032bbc7b6e5f17b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a38797f495e30dec8117aa33032bbc7b6e5f17b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3a38797f495e30dec8117aa33032bbc7b6e5f17b", "patch": "@@ -324,7 +324,8 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {\n                     clean::TraitBound(ty) => ty,\n-                    clean::RegionBound => unreachable!(),\n+                    clean::UnboxedFnBound(..) |\n+                    clean::RegionBound(..) => unreachable!(),\n                 }\n             }),\n             for_: ty.ty.clean(cx),"}, {"sha": "8eab436a3543a0114288c3993d0d98075fc2ef70", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a38797f495e30dec8117aa33032bbc7b6e5f17b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a38797f495e30dec8117aa33032bbc7b6e5f17b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3a38797f495e30dec8117aa33032bbc7b6e5f17b", "patch": "@@ -462,6 +462,7 @@ impl Clean<TyParam> for ty::TypeParameterDef {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.external_typarams.borrow_mut().as_mut().unwrap()\n           .insert(self.def_id, self.ident.clean(cx));\n+\n         TyParam {\n             name: self.ident.clean(cx),\n             did: self.def_id,\n@@ -473,26 +474,25 @@ impl Clean<TyParam> for ty::TypeParameterDef {\n \n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub enum TyParamBound {\n-    RegionBound, // FIXME(#16518) -- need to include name of actual region\n+    RegionBound(Lifetime),\n+    UnboxedFnBound(UnboxedFnType),\n     TraitBound(Type)\n }\n \n impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         match *self {\n-            ast::RegionTyParamBound(_) => RegionBound,\n-            ast::UnboxedFnTyParamBound(_) => {\n-                // FIXME(pcwalton): Wrong.\n-                RegionBound\n-            }\n+            ast::RegionTyParamBound(lt) => RegionBound(lt.clean(cx)),\n+            ast::UnboxedFnTyParamBound(ref ty) => { UnboxedFnBound(ty.clean(cx)) },\n             ast::TraitTyParamBound(ref t) => TraitBound(t.clean(cx)),\n         }\n     }\n }\n \n impl Clean<Vec<TyParamBound>> for ty::ExistentialBounds {\n     fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n-        let mut vec = vec!(RegionBound);\n+        let mut vec = vec![];\n+        self.region_bound.clean(cx).map(|b| vec.push(RegionBound(b)));\n         for bb in self.builtin_bounds.iter() {\n             vec.push(bb.clean(cx));\n         }\n@@ -521,7 +521,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         let tcx = match cx.tcx_opt() {\n             Some(tcx) => tcx,\n-            None => return RegionBound,\n+            None => return RegionBound(Lifetime::statik())\n         };\n         let empty = subst::Substs::empty();\n         let (did, path) = match *self {\n@@ -554,7 +554,7 @@ impl Clean<TyParamBound> for ty::TraitRef {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         let tcx = match cx.tcx_opt() {\n             Some(tcx) => tcx,\n-            None => return RegionBound,\n+            None => return RegionBound(Lifetime::statik())\n         };\n         let fqn = csearch::get_item_path(tcx, self.def_id);\n         let fqn = fqn.into_iter().map(|i| i.to_string())\n@@ -582,19 +582,37 @@ impl Clean<Vec<TyParamBound>> for ty::ParamBounds {\n         for t in self.trait_bounds.iter() {\n             v.push(t.clean(cx));\n         }\n+        for r in self.region_bounds.iter().filter_map(|r| r.clean(cx)) {\n+            v.push(RegionBound(r));\n+        }\n         return v;\n     }\n }\n \n impl Clean<Option<Vec<TyParamBound>>> for subst::Substs {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n-        v.extend(self.regions().iter().map(|_| RegionBound));\n+        v.extend(self.regions().iter().filter_map(|r| r.clean(cx)).map(RegionBound));\n         v.extend(self.types.iter().map(|t| TraitBound(t.clean(cx))));\n         if v.len() > 0 {Some(v)} else {None}\n     }\n }\n \n+#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+pub struct UnboxedFnType {\n+    pub path: Path,\n+    pub decl: FnDecl\n+}\n+\n+impl Clean<UnboxedFnType> for ast::UnboxedFnBound {\n+    fn clean(&self, cx: &DocContext) -> UnboxedFnType {\n+        UnboxedFnType {\n+            path: self.path.clean(cx),\n+            decl: self.decl.clean(cx)\n+        }\n+    }\n+}\n+\n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub struct Lifetime(String);\n \n@@ -604,6 +622,10 @@ impl Lifetime {\n         let s: &'a str = s.as_slice();\n         return s;\n     }\n+\n+    pub fn statik() -> Lifetime {\n+        Lifetime(\"'static\".to_string())\n+    }\n }\n \n impl Clean<Lifetime> for ast::Lifetime {\n@@ -627,7 +649,7 @@ impl Clean<Lifetime> for ty::RegionParameterDef {\n impl Clean<Option<Lifetime>> for ty::Region {\n     fn clean(&self, cx: &DocContext) -> Option<Lifetime> {\n         match *self {\n-            ty::ReStatic => Some(Lifetime(\"'static\".to_string())),\n+            ty::ReStatic => Some(Lifetime::statik()),\n             ty::ReLateBound(_, ty::BrNamed(_, name)) =>\n                 Some(Lifetime(token::get_name(name).get().to_string())),\n             ty::ReEarlyBound(_, _, _, name) => Some(Lifetime(name.clean(cx))),"}, {"sha": "6f1feb6e1cd8631d074bf29877a5763590546687", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a38797f495e30dec8117aa33032bbc7b6e5f17b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a38797f495e30dec8117aa33032bbc7b6e5f17b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3a38797f495e30dec8117aa33032bbc7b6e5f17b", "patch": "@@ -140,8 +140,11 @@ impl fmt::Show for clean::Lifetime {\n impl fmt::Show for clean::TyParamBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::RegionBound => {\n-                f.write(\"'static\".as_bytes())\n+            clean::RegionBound(ref lt) => {\n+                write!(f, \"{}\", *lt)\n+            }\n+            clean::UnboxedFnBound(ref ty) => {\n+                write!(f, \"{}{}\", ty.path, ty.decl)\n             }\n             clean::TraitBound(ref ty) => {\n                 write!(f, \"{}\", *ty)\n@@ -401,7 +404,8 @@ impl fmt::Show for clean::Type {\n                            let mut ret = String::new();\n                            for bound in decl.bounds.iter() {\n                                 match *bound {\n-                                    clean::RegionBound => {}\n+                                    clean::RegionBound(..) |\n+                                    clean::UnboxedFnBound(..) => {}\n                                     clean::TraitBound(ref t) => {\n                                         if ret.len() == 0 {\n                                             ret.push_str(\": \");"}]}