{"sha": "82cc530431329c33998385e83b022ec680e666c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyY2M1MzA0MzEzMjljMzM5OTgzODVlODNiMDIyZWM2ODBlNjY2YzU=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T00:10:15Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T20:50:17Z"}, "message": "Accept `LocalDefId` as keyt for `names_imported_by_glob_use`\n\nand `maybe_unused_trait_import` queries", "tree": {"sha": "b4efacf1fe8e2a0479c8065ed022b37124f39e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4efacf1fe8e2a0479c8065ed022b37124f39e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82cc530431329c33998385e83b022ec680e666c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82cc530431329c33998385e83b022ec680e666c5", "html_url": "https://github.com/rust-lang/rust/commit/82cc530431329c33998385e83b022ec680e666c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82cc530431329c33998385e83b022ec680e666c5/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da975c318d2b0f2d8f0c6feb50a266c86b771651", "url": "https://api.github.com/repos/rust-lang/rust/commits/da975c318d2b0f2d8f0c6feb50a266c86b771651", "html_url": "https://github.com/rust-lang/rust/commit/da975c318d2b0f2d8f0c6feb50a266c86b771651"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "0ef1ef53819c9af25a310d7c0c3101b69317cabe", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82cc530431329c33998385e83b022ec680e666c5/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82cc530431329c33998385e83b022ec680e666c5/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=82cc530431329c33998385e83b022ec680e666c5", "patch": "@@ -1030,17 +1030,19 @@ rustc_queries! {\n         query upvars(_: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n             eval_always\n         }\n-        query maybe_unused_trait_import(_: DefId) -> bool {\n+        query maybe_unused_trait_import(def_id: LocalDefId) -> bool {\n             eval_always\n+            desc { |tcx| \"maybe_unused_trait_import for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n         }\n         query maybe_unused_extern_crates(_: CrateNum)\n             -> &'tcx [(DefId, Span)] {\n             eval_always\n             desc { \"looking up all possibly unused extern crates\" }\n         }\n-        query names_imported_by_glob_use(_: DefId)\n+        query names_imported_by_glob_use(def_id: LocalDefId)\n             -> &'tcx FxHashSet<ast::Name> {\n             eval_always\n+            desc { |tcx| \"names_imported_by_glob_use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n         }\n \n         query stability_index(_: CrateNum) -> &'tcx stability::Index<'tcx> {"}, {"sha": "c5813ae57a653bde7468ed9c3e1b7efdd29b3c4d", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82cc530431329c33998385e83b022ec680e666c5/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82cc530431329c33998385e83b022ec680e666c5/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=82cc530431329c33998385e83b022ec680e666c5", "patch": "@@ -945,11 +945,11 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub queries: query::Queries<'tcx>,\n \n-    maybe_unused_trait_imports: FxHashSet<DefId>,\n+    maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n     /// A map of glob use to a set of names it actually imports. Currently only\n     /// used in save-analysis.\n-    glob_map: FxHashMap<DefId, FxHashSet<ast::Name>>,\n+    glob_map: FxHashMap<LocalDefId, FxHashSet<ast::Name>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<ast::Name, bool>,\n@@ -1165,7 +1165,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             maybe_unused_trait_imports: resolutions\n                 .maybe_unused_trait_imports\n                 .into_iter()\n-                .map(|id| definitions.local_def_id(id).to_def_id())\n+                .map(|id| definitions.local_def_id(id))\n                 .collect(),\n             maybe_unused_extern_crates: resolutions\n                 .maybe_unused_extern_crates\n@@ -1175,7 +1175,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             glob_map: resolutions\n                 .glob_map\n                 .into_iter()\n-                .map(|(id, names)| (definitions.local_def_id(id).to_def_id(), names))\n+                .map(|(id, names)| (definitions.local_def_id(id), names))\n                 .collect(),\n             extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,\n@@ -2716,10 +2716,8 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         &tcx.maybe_unused_extern_crates[..]\n     };\n-    providers.names_imported_by_glob_use = |tcx, id| {\n-        assert_eq!(id.krate, LOCAL_CRATE);\n-        tcx.arena.alloc(tcx.glob_map.get(&id).cloned().unwrap_or_default())\n-    };\n+    providers.names_imported_by_glob_use =\n+        |tcx, id| tcx.arena.alloc(tcx.glob_map.get(&id).cloned().unwrap_or_default());\n \n     providers.lookup_stability = |tcx, id| {\n         let id = tcx.hir().local_def_id_to_hir_id(id.expect_local());"}, {"sha": "ccce72fb0ac2468dd809245a628d38e0772a147d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82cc530431329c33998385e83b022ec680e666c5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82cc530431329c33998385e83b022ec680e666c5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=82cc530431329c33998385e83b022ec680e666c5", "patch": "@@ -1183,7 +1183,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n                 // Make a comma-separated list of names of imported modules.\n                 let def_id = self.tcx.hir().local_def_id_from_node_id(id);\n-                let names = self.tcx.names_imported_by_glob_use(def_id.to_def_id());\n+                let names = self.tcx.names_imported_by_glob_use(def_id);\n                 let names: Vec<_> = names.iter().map(|n| n.to_string()).collect();\n \n                 // Otherwise it's a span with wrong macro expansion info, which"}]}