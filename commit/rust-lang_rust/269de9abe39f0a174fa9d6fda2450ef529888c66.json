{"sha": "269de9abe39f0a174fa9d6fda2450ef529888c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OWRlOWFiZTM5ZjBhMTc0ZmE5ZDZmZGEyNDUwZWY1Mjk4ODhjNjY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-20T12:28:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-20T12:28:36Z"}, "message": "Switch BuiltinDeriveExpander::expand to ExpandResult", "tree": {"sha": "f0ddc3b84c531107dc3bcca12b98a66811fc2147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ddc3b84c531107dc3bcca12b98a66811fc2147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269de9abe39f0a174fa9d6fda2450ef529888c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269de9abe39f0a174fa9d6fda2450ef529888c66", "html_url": "https://github.com/rust-lang/rust/commit/269de9abe39f0a174fa9d6fda2450ef529888c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269de9abe39f0a174fa9d6fda2450ef529888c66/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557df6ff3f90196417df7c7a9903c5dfd09a4f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/557df6ff3f90196417df7c7a9903c5dfd09a4f47", "html_url": "https://github.com/rust-lang/rust/commit/557df6ff3f90196417df7c7a9903c5dfd09a4f47"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "57a5fb49726ec5a374852e1e9829bc56fb774e8e", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/269de9abe39f0a174fa9d6fda2450ef529888c66/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269de9abe39f0a174fa9d6fda2450ef529888c66/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=269de9abe39f0a174fa9d6fda2450ef529888c66", "patch": "@@ -2,6 +2,7 @@\n \n use log::debug;\n \n+use mbe::ExpandResult;\n use parser::FragmentKind;\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, ModuleItemOwner, NameOwner},\n@@ -23,7 +24,7 @@ macro_rules! register_builtin {\n                 db: &dyn AstDatabase,\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n-            ) -> Result<tt::Subtree, mbe::ExpandError> {\n+            ) -> ExpandResult<tt::Subtree> {\n                 let expander = match *self {\n                     $( BuiltinDeriveExpander::$trait => $expand, )*\n                 };\n@@ -147,11 +148,11 @@ fn make_type_args(n: usize, bound: Vec<tt::TokenTree>) -> Vec<tt::TokenTree> {\n     result\n }\n \n-fn expand_simple_derive(\n-    tt: &tt::Subtree,\n-    trait_path: tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n-    let info = parse_adt(tt)?;\n+fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResult<tt::Subtree> {\n+    let info = match parse_adt(tt) {\n+        Ok(info) => info,\n+        Err(e) => return ExpandResult::only_err(e),\n+    };\n     let name = info.name;\n     let trait_path_clone = trait_path.token_trees.clone();\n     let bound = (quote! { : ##trait_path_clone }).token_trees;\n@@ -161,7 +162,7 @@ fn expand_simple_derive(\n     let expanded = quote! {\n         impl ##type_params ##trait_path for #name ##type_args {}\n     };\n-    Ok(expanded)\n+    ExpandResult::ok(expanded)\n }\n \n fn find_builtin_crate(db: &dyn AstDatabase, id: MacroCallId) -> tt::TokenTree {\n@@ -186,7 +187,7 @@ fn copy_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::marker::Copy })\n }\n@@ -195,7 +196,7 @@ fn clone_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::clone::Clone })\n }\n@@ -204,7 +205,7 @@ fn default_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::default::Default })\n }\n@@ -213,7 +214,7 @@ fn debug_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::fmt::Debug })\n }\n@@ -222,16 +223,12 @@ fn hash_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::hash::Hash })\n }\n \n-fn eq_expand(\n-    db: &dyn AstDatabase,\n-    id: MacroCallId,\n-    tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+fn eq_expand(db: &dyn AstDatabase, id: MacroCallId, tt: &tt::Subtree) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::Eq })\n }\n@@ -240,7 +237,7 @@ fn partial_eq_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::PartialEq })\n }\n@@ -249,7 +246,7 @@ fn ord_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::Ord })\n }\n@@ -258,7 +255,7 @@ fn partial_ord_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::PartialOrd })\n }"}, {"sha": "e477ce8fff498a28c315a4c96c82fa1919e01bde", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/269de9abe39f0a174fa9d6fda2450ef529888c66/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269de9abe39f0a174fa9d6fda2450ef529888c66/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=269de9abe39f0a174fa9d6fda2450ef529888c66", "patch": "@@ -60,7 +60,7 @@ impl TokenExpander {\n                     mbe::ExpandError::Other(\"No item argument for attribute\".to_string()).into(),\n                 ),\n             },\n-            TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n+            TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt),\n             TokenExpander::ProcMacro(_) => {\n                 // We store the result in salsa db to prevent non-deterministic behavior in\n                 // some proc-macro implementation"}, {"sha": "f5e67a693d46edad3b24563426526547fd8f7e41", "filename": "crates/hir_expand/src/input.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/269de9abe39f0a174fa9d6fda2450ef529888c66/crates%2Fhir_expand%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269de9abe39f0a174fa9d6fda2450ef529888c66/crates%2Fhir_expand%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Finput.rs?ref=269de9abe39f0a174fa9d6fda2450ef529888c66", "patch": "@@ -62,8 +62,7 @@ fn remove_attr_invoc(item: ast::Item, attr_index: usize) -> ast::Item {\n \n #[cfg(test)]\n mod tests {\n-    use base_db::fixture::WithFixture;\n-    use base_db::SourceDatabase;\n+    use base_db::{fixture::WithFixture, SourceDatabase};\n     use expect_test::{expect, Expect};\n \n     use crate::test_db::TestDB;"}]}