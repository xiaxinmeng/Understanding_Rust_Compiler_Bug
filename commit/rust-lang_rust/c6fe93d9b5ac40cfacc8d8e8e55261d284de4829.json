{"sha": "c6fe93d9b5ac40cfacc8d8e8e55261d284de4829", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZmU5M2Q5YjVhYzQwY2ZhY2M4ZDhlOGU1NTI2MWQyODRkZTQ4Mjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-11T06:36:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-11T06:36:54Z"}, "message": "libcore: Fix core test. rs=broken", "tree": {"sha": "9f79cde303a50e15a47198dc9f7b4ff489a2422e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f79cde303a50e15a47198dc9f7b4ff489a2422e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829", "html_url": "https://github.com/rust-lang/rust/commit/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83675895af7c6af80cc8a4f5cec4e565dc829fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/83675895af7c6af80cc8a4f5cec4e565dc829fca", "html_url": "https://github.com/rust-lang/rust/commit/83675895af7c6af80cc8a4f5cec4e565dc829fca"}], "stats": {"total": 162, "additions": 85, "deletions": 77}, "files": [{"sha": "6ceb71d25ae26ba359aeb4e798f252fd86fa1598", "filename": "src/libcore/os.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=c6fe93d9b5ac40cfacc8d8e8e55261d284de4829", "patch": "@@ -1233,34 +1233,36 @@ mod tests {\n \n     #[test]\n     fn copy_file_ok() {\n-      let tempdir = getcwd(); // would like to use $TMPDIR,\n-                              // doesn't seem to work on Linux\n-      assert (str::len(tempdir.to_str()) > 0u);\n-      let in = tempdir.push(\"in.txt\");\n-      let out = tempdir.push(\"out.txt\");\n-\n-      /* Write the temp input file */\n-        let ostream = do as_c_charp(in.to_str()) |fromp| {\n-            do as_c_charp(\"w+b\") |modebuf| {\n-                libc::fopen(fromp, modebuf)\n-            }\n-      };\n-      assert (ostream as uint != 0u);\n-      let s = ~\"hello\";\n-      let mut buf = vec::to_mut(str::to_bytes(s) + ~[0 as u8]);\n-      do vec::as_mut_buf(buf) |b, _len| {\n-          assert (libc::fwrite(b as *c_void, 1u as size_t,\n-                               (str::len(s) + 1u) as size_t, ostream)\n-                  == buf.len() as size_t)};\n-      assert (libc::fclose(ostream) == (0u as c_int));\n-      let rs = os::copy_file(&in, &out);\n-      if (!os::path_exists(&in)) {\n-        fail (fmt!(\"%s doesn't exist\", in.to_str()));\n-      }\n-      assert(rs);\n-      let rslt = run::run_program(~\"diff\", ~[in.to_str(), out.to_str()]);\n-      assert (rslt == 0);\n-      assert (remove_file(&in));\n-      assert (remove_file(&out));\n+        unsafe {\n+          let tempdir = getcwd(); // would like to use $TMPDIR,\n+                                  // doesn't seem to work on Linux\n+          assert (str::len(tempdir.to_str()) > 0u);\n+          let in = tempdir.push(\"in.txt\");\n+          let out = tempdir.push(\"out.txt\");\n+\n+          /* Write the temp input file */\n+            let ostream = do as_c_charp(in.to_str()) |fromp| {\n+                do as_c_charp(\"w+b\") |modebuf| {\n+                    libc::fopen(fromp, modebuf)\n+                }\n+          };\n+          assert (ostream as uint != 0u);\n+          let s = ~\"hello\";\n+          let mut buf = vec::to_mut(str::to_bytes(s) + ~[0 as u8]);\n+          do vec::as_mut_buf(buf) |b, _len| {\n+              assert (libc::fwrite(b as *c_void, 1u as size_t,\n+                                   (str::len(s) + 1u) as size_t, ostream)\n+                      == buf.len() as size_t)};\n+          assert (libc::fclose(ostream) == (0u as c_int));\n+          let rs = os::copy_file(&in, &out);\n+          if (!os::path_exists(&in)) {\n+            fail (fmt!(\"%s doesn't exist\", in.to_str()));\n+          }\n+          assert(rs);\n+          let rslt = run::run_program(~\"diff\", ~[in.to_str(), out.to_str()]);\n+          assert (rslt == 0);\n+          assert (remove_file(&in));\n+          assert (remove_file(&out));\n+        }\n     }\n }"}, {"sha": "0a5211137b3acc4f2eea8ac0b5cf5da629c9073e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=c6fe93d9b5ac40cfacc8d8e8e55261d284de4829", "patch": "@@ -2674,9 +2674,11 @@ mod tests {\n \n     #[test]\n     fn test_to_lower() {\n-        assert ~\"\" == map(~\"\", |c| libc::tolower(c as c_char) as char);\n-        assert ~\"ymca\" == map(~\"YMCA\",\n-                             |c| libc::tolower(c as c_char) as char);\n+        unsafe {\n+            assert ~\"\" == map(~\"\", |c| libc::tolower(c as c_char) as char);\n+            assert ~\"ymca\" == map(~\"YMCA\",\n+                                 |c| libc::tolower(c as c_char) as char);\n+        }\n     }\n \n     #[test]\n@@ -3192,9 +3194,11 @@ mod tests {\n \n     #[test]\n     fn test_map() {\n-        assert ~\"\" == map(~\"\", |c| libc::toupper(c as c_char) as char);\n-        assert ~\"YMCA\" == map(~\"ymca\",\n-                              |c| libc::toupper(c as c_char) as char);\n+        unsafe {\n+            assert ~\"\" == map(~\"\", |c| libc::toupper(c as c_char) as char);\n+            assert ~\"YMCA\" == map(~\"ymca\",\n+                                  |c| libc::toupper(c as c_char) as char);\n+        }\n     }\n \n     #[test]"}, {"sha": "501dd52f9ca51ae303f4aad9926a63b7288e897e", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fe93d9b5ac40cfacc8d8e8e55261d284de4829/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=c6fe93d9b5ac40cfacc8d8e8e55261d284de4829", "patch": "@@ -957,59 +957,61 @@ extern mod testrt {\n \n #[test]\n fn test_spawn_sched_blocking() {\n+    unsafe {\n \n-    // Testing that a task in one scheduler can block in foreign code\n-    // without affecting other schedulers\n-    for iter::repeat(20u) {\n+        // Testing that a task in one scheduler can block in foreign code\n+        // without affecting other schedulers\n+        for iter::repeat(20u) {\n \n-        let start_po = oldcomm::Port();\n-        let start_ch = oldcomm::Chan(&start_po);\n-        let fin_po = oldcomm::Port();\n-        let fin_ch = oldcomm::Chan(&fin_po);\n+            let start_po = oldcomm::Port();\n+            let start_ch = oldcomm::Chan(&start_po);\n+            let fin_po = oldcomm::Port();\n+            let fin_ch = oldcomm::Chan(&fin_po);\n \n-        let lock = testrt::rust_dbg_lock_create();\n+            let lock = testrt::rust_dbg_lock_create();\n \n-        do spawn_sched(SingleThreaded) {\n-            testrt::rust_dbg_lock_lock(lock);\n+            do spawn_sched(SingleThreaded) {\n+                testrt::rust_dbg_lock_lock(lock);\n \n-            oldcomm::send(start_ch, ());\n+                oldcomm::send(start_ch, ());\n \n-            // Block the scheduler thread\n-            testrt::rust_dbg_lock_wait(lock);\n-            testrt::rust_dbg_lock_unlock(lock);\n+                // Block the scheduler thread\n+                testrt::rust_dbg_lock_wait(lock);\n+                testrt::rust_dbg_lock_unlock(lock);\n \n-            oldcomm::send(fin_ch, ());\n-        };\n+                oldcomm::send(fin_ch, ());\n+            };\n \n-        // Wait until the other task has its lock\n-        oldcomm::recv(start_po);\n+            // Wait until the other task has its lock\n+            oldcomm::recv(start_po);\n \n-        fn pingpong(po: oldcomm::Port<int>, ch: oldcomm::Chan<int>) {\n-            let mut val = 20;\n-            while val > 0 {\n-                val = oldcomm::recv(po);\n-                oldcomm::send(ch, val - 1);\n+            fn pingpong(po: oldcomm::Port<int>, ch: oldcomm::Chan<int>) {\n+                let mut val = 20;\n+                while val > 0 {\n+                    val = oldcomm::recv(po);\n+                    oldcomm::send(ch, val - 1);\n+                }\n             }\n-        }\n \n-        let setup_po = oldcomm::Port();\n-        let setup_ch = oldcomm::Chan(&setup_po);\n-        let parent_po = oldcomm::Port();\n-        let parent_ch = oldcomm::Chan(&parent_po);\n-        do spawn {\n-            let child_po = oldcomm::Port();\n-            oldcomm::send(setup_ch, oldcomm::Chan(&child_po));\n-            pingpong(child_po, parent_ch);\n-        };\n-\n-        let child_ch = oldcomm::recv(setup_po);\n-        oldcomm::send(child_ch, 20);\n-        pingpong(parent_po, child_ch);\n-        testrt::rust_dbg_lock_lock(lock);\n-        testrt::rust_dbg_lock_signal(lock);\n-        testrt::rust_dbg_lock_unlock(lock);\n-        oldcomm::recv(fin_po);\n-        testrt::rust_dbg_lock_destroy(lock);\n+            let setup_po = oldcomm::Port();\n+            let setup_ch = oldcomm::Chan(&setup_po);\n+            let parent_po = oldcomm::Port();\n+            let parent_ch = oldcomm::Chan(&parent_po);\n+            do spawn {\n+                let child_po = oldcomm::Port();\n+                oldcomm::send(setup_ch, oldcomm::Chan(&child_po));\n+                pingpong(child_po, parent_ch);\n+            };\n+\n+            let child_ch = oldcomm::recv(setup_po);\n+            oldcomm::send(child_ch, 20);\n+            pingpong(parent_po, child_ch);\n+            testrt::rust_dbg_lock_lock(lock);\n+            testrt::rust_dbg_lock_signal(lock);\n+            testrt::rust_dbg_lock_unlock(lock);\n+            oldcomm::recv(fin_po);\n+            testrt::rust_dbg_lock_destroy(lock);\n+        }\n     }\n }\n "}]}