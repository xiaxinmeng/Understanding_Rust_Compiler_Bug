{"sha": "1ddf2504fdeb26bce320c8198c2e594b22efd71a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZGYyNTA0ZmRlYjI2YmNlMzIwYzgxOThjMmU1OTRiMjJlZmQ3MWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-13T01:52:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-13T01:52:59Z"}, "message": "Rollup merge of #69104 - tmiasko:configure-cmake, r=Mark-Simulacrum\n\nbootstrap: Configure cmake when building sanitizer runtimes\n\nConfigure cmake before building sanitizer runtimes in similar way it is already\nconfigured elsewhere, to ensure that they are built with expected compiler\nflags.\n\nPreviously this step has been intentionally omitted since sanitizer runtimes\nare built as universal binaries on Darwin targets, which in turn are\nunsupported by sccache which is also configured there. To avoid the issue\neverything but the compiler launcher is configured.\n\nHelps with #68863.", "tree": {"sha": "6ca82b6171d16c036bf4344474a42bfa2cb3527a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca82b6171d16c036bf4344474a42bfa2cb3527a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ddf2504fdeb26bce320c8198c2e594b22efd71a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRKv7CRBK7hj4Ov3rIwAAdHIIADtDIMo3pE3PYSspAxkODaov\nqWyDf/1uJQ4eKZ9P8A0eFkiFQzs7vHHt7zaTRP4VlxTglKj3DEZOunvpbjlUruAc\nv5TT7abblkGHNcVDw9a8qS+KCjIR/5osu69FfiIDPo7fyGBOU2/ezrmzQqvmEQfB\nCn+S0sKuewyzNVH7hs2ggqTXZ1o2OwRtH5AUNCNjxLOB+8r6l5mHUW6q/hZeutfb\nxNJoLjLigeOnUv9IcT4bNJGyR/RtdlkZ/coOHzZj9Tv51c2+D7ndr4ojvjF6TVJU\nNfPnvS4zceTt88VO83X+GTtNovVIhlDk6PuaK1Yuv1XQ+V8HZMkV88EDSsu60ko=\n=ba6q\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ca82b6171d16c036bf4344474a42bfa2cb3527a\nparent ec5bf15c5d1b5969908251017f1e61d2f2961a87\nparent 33e2c1d863f53f5224db5abd40c6a84879051ef2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581558779 +0100\ncommitter GitHub <noreply@github.com> 1581558779 +0100\n\nRollup merge of #69104 - tmiasko:configure-cmake, r=Mark-Simulacrum\n\nbootstrap: Configure cmake when building sanitizer runtimes\n\nConfigure cmake before building sanitizer runtimes in similar way it is already\nconfigured elsewhere, to ensure that they are built with expected compiler\nflags.\n\nPreviously this step has been intentionally omitted since sanitizer runtimes\nare built as universal binaries on Darwin targets, which in turn are\nunsupported by sccache which is also configured there. To avoid the issue\neverything but the compiler launcher is configured.\n\nHelps with #68863.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ddf2504fdeb26bce320c8198c2e594b22efd71a", "html_url": "https://github.com/rust-lang/rust/commit/1ddf2504fdeb26bce320c8198c2e594b22efd71a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ddf2504fdeb26bce320c8198c2e594b22efd71a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec5bf15c5d1b5969908251017f1e61d2f2961a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5bf15c5d1b5969908251017f1e61d2f2961a87", "html_url": "https://github.com/rust-lang/rust/commit/ec5bf15c5d1b5969908251017f1e61d2f2961a87"}, {"sha": "33e2c1d863f53f5224db5abd40c6a84879051ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e2c1d863f53f5224db5abd40c6a84879051ef2", "html_url": "https://github.com/rust-lang/rust/commit/33e2c1d863f53f5224db5abd40c6a84879051ef2"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "21dcb1d8aa0e1bc2a7908d6a9cbc09209b54fd9e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1ddf2504fdeb26bce320c8198c2e594b22efd71a/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddf2504fdeb26bce320c8198c2e594b22efd71a/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1ddf2504fdeb26bce320c8198c2e594b22efd71a", "patch": "@@ -262,7 +262,7 @@ impl Step for Llvm {\n             cfg.define(\"PYTHON_EXECUTABLE\", python);\n         }\n \n-        configure_cmake(builder, target, &mut cfg);\n+        configure_cmake(builder, target, &mut cfg, true);\n \n         // FIXME: we don't actually need to build all LLVM tools and all LLVM\n         //        libraries here, e.g., we just want a few components and a few\n@@ -301,7 +301,12 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     panic!(\"\\n\\nbad LLVM version: {}, need >=7.0\\n\\n\", version)\n }\n \n-fn configure_cmake(builder: &Builder<'_>, target: Interned<String>, cfg: &mut cmake::Config) {\n+fn configure_cmake(\n+    builder: &Builder<'_>,\n+    target: Interned<String>,\n+    cfg: &mut cmake::Config,\n+    use_compiler_launcher: bool,\n+) {\n     // Do not print installation messages for up-to-date files.\n     // LLVM and LLD builds can produce a lot of those and hit CI limits on log size.\n     cfg.define(\"CMAKE_INSTALL_MESSAGE\", \"LAZY\");\n@@ -372,9 +377,11 @@ fn configure_cmake(builder: &Builder<'_>, target: Interned<String>, cfg: &mut cm\n     } else {\n         // If ccache is configured we inform the build a little differently how\n         // to invoke ccache while also invoking our compilers.\n-        if let Some(ref ccache) = builder.config.ccache {\n-            cfg.define(\"CMAKE_C_COMPILER_LAUNCHER\", ccache)\n-                .define(\"CMAKE_CXX_COMPILER_LAUNCHER\", ccache);\n+        if use_compiler_launcher {\n+            if let Some(ref ccache) = builder.config.ccache {\n+                cfg.define(\"CMAKE_C_COMPILER_LAUNCHER\", ccache)\n+                    .define(\"CMAKE_CXX_COMPILER_LAUNCHER\", ccache);\n+            }\n         }\n         cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n             .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n@@ -458,7 +465,7 @@ impl Step for Lld {\n         t!(fs::create_dir_all(&out_dir));\n \n         let mut cfg = cmake::Config::new(builder.src.join(\"src/llvm-project/lld\"));\n-        configure_cmake(builder, target, &mut cfg);\n+        configure_cmake(builder, target, &mut cfg, true);\n \n         // This is an awful, awful hack. Discovered when we migrated to using\n         // clang-cl to compile LLVM/LLD it turns out that LLD, when built out of\n@@ -595,10 +602,7 @@ impl Step for Sanitizers {\n         let _time = util::timeit(&builder);\n \n         let mut cfg = cmake::Config::new(&compiler_rt_dir);\n-        cfg.target(&self.target);\n-        cfg.host(&builder.config.build);\n         cfg.profile(\"Release\");\n-\n         cfg.define(\"CMAKE_C_COMPILER_TARGET\", self.target);\n         cfg.define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\");\n         cfg.define(\"COMPILER_RT_BUILD_CRT\", \"OFF\");\n@@ -610,6 +614,12 @@ impl Step for Sanitizers {\n         cfg.define(\"COMPILER_RT_USE_LIBCXX\", \"OFF\");\n         cfg.define(\"LLVM_CONFIG_PATH\", &llvm_config);\n \n+        // On Darwin targets the sanitizer runtimes are build as universal binaries.\n+        // Unfortunately sccache currently lacks support to build them successfully.\n+        // Disable compiler launcher on Darwin targets to avoid potential issues.\n+        let use_compiler_launcher = !self.target.contains(\"apple-darwin\");\n+        configure_cmake(builder, self.target, &mut cfg, use_compiler_launcher);\n+\n         t!(fs::create_dir_all(&out_dir));\n         cfg.out_dir(out_dir);\n "}]}