{"sha": "c2d5dd2566aa66503fecd3213373fbaee07c31a1", "node_id": "C_kwDOAAsO6NoAKGMyZDVkZDI1NjZhYTY2NTAzZmVjZDMyMTMzNzNmYmFlZTA3YzMxYTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-30T06:22:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T14:23:10Z"}, "message": "Add fast path without visiting.", "tree": {"sha": "43c2321745c3341360977c36eee73c2b932e498a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43c2321745c3341360977c36eee73c2b932e498a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d5dd2566aa66503fecd3213373fbaee07c31a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d5dd2566aa66503fecd3213373fbaee07c31a1", "html_url": "https://github.com/rust-lang/rust/commit/c2d5dd2566aa66503fecd3213373fbaee07c31a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d5dd2566aa66503fecd3213373fbaee07c31a1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78dd6d781e6cb1f032c10336557c10ecc5d9372", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78dd6d781e6cb1f032c10336557c10ecc5d9372", "html_url": "https://github.com/rust-lang/rust/commit/e78dd6d781e6cb1f032c10336557c10ecc5d9372"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "c2922677c5cb04db347b6158da00b49e1e76e02b", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c2d5dd2566aa66503fecd3213373fbaee07c31a1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d5dd2566aa66503fecd3213373fbaee07c31a1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=c2d5dd2566aa66503fecd3213373fbaee07c31a1", "patch": "@@ -135,6 +135,7 @@ fn lint_expectations(tcx: TyCtxt<'_>, (): ()) -> Vec<(LintExpectationId, LintExp\n #[instrument(level = \"trace\", skip(tcx), ret)]\n fn shallow_lint_levels_on(tcx: TyCtxt<'_>, owner: hir::OwnerId) -> ShallowLintLevelMap {\n     let store = unerased_lint_store(tcx);\n+    let attrs = tcx.hir_attrs(owner);\n \n     let mut levels = LintLevelsBuilder {\n         sess: tcx.sess,\n@@ -143,23 +144,35 @@ fn shallow_lint_levels_on(tcx: TyCtxt<'_>, owner: hir::OwnerId) -> ShallowLintLe\n             cur: owner.into(),\n             specs: ShallowLintLevelMap::default(),\n             empty: FxHashMap::default(),\n+            attrs,\n         },\n         warn_about_weird_lints: false,\n         store,\n         registered_tools: &tcx.resolutions(()).registered_tools,\n     };\n \n-    match tcx.hir().expect_owner(owner) {\n-        hir::OwnerNode::Item(item) => levels.visit_item(item),\n-        hir::OwnerNode::ForeignItem(item) => levels.visit_foreign_item(item),\n-        hir::OwnerNode::TraitItem(item) => levels.visit_trait_item(item),\n-        hir::OwnerNode::ImplItem(item) => levels.visit_impl_item(item),\n-        hir::OwnerNode::Crate(mod_) => {\n-            levels.add_command_line();\n-            levels.add_id(hir::CRATE_HIR_ID);\n-            levels.visit_mod(mod_, mod_.spans.inner_span, hir::CRATE_HIR_ID)\n-        }\n-    };\n+    if owner == hir::CRATE_OWNER_ID {\n+        levels.add_command_line();\n+    }\n+\n+    match attrs.map.range(..) {\n+        // There is only something to do if there are attributes at all.\n+        [] => {}\n+        // Most of the time, there is only one attribute.  Avoid fetching HIR in that case.\n+        [(local_id, _)] => levels.add_id(HirId { owner, local_id: *local_id }),\n+        // Otherwise, we need to visit the attributes in source code order, so we fetch HIR and do\n+        // a standard visit.\n+        _ => match tcx.hir().expect_owner(owner) {\n+            hir::OwnerNode::Item(item) => levels.visit_item(item),\n+            hir::OwnerNode::ForeignItem(item) => levels.visit_foreign_item(item),\n+            hir::OwnerNode::TraitItem(item) => levels.visit_trait_item(item),\n+            hir::OwnerNode::ImplItem(item) => levels.visit_impl_item(item),\n+            hir::OwnerNode::Crate(mod_) => {\n+                levels.add_id(hir::CRATE_HIR_ID);\n+                levels.visit_mod(mod_, mod_.spans.inner_span, hir::CRATE_HIR_ID)\n+            }\n+        },\n+    }\n \n     let mut specs = levels.provider.specs;\n     specs.specs.retain(|(_, v)| !v.is_empty());\n@@ -199,6 +212,7 @@ struct LintLevelQueryMap<'tcx> {\n     specs: ShallowLintLevelMap,\n     /// Empty hash map to simplify code.\n     empty: FxHashMap<LintId, LevelAndSource>,\n+    attrs: &'tcx hir::AttributeMap<'tcx>,\n }\n \n impl LintLevelsProvider for LintLevelQueryMap<'_> {\n@@ -253,7 +267,11 @@ impl LintLevelsProvider for QueryMapExpectationsWrapper<'_> {\n impl<'tcx> LintLevelsBuilder<'_, LintLevelQueryMap<'tcx>> {\n     fn add_id(&mut self, hir_id: HirId) {\n         self.provider.cur = hir_id;\n-        self.add(self.provider.tcx.hir().attrs(hir_id), hir_id == hir::CRATE_HIR_ID, Some(hir_id));\n+        self.add(\n+            self.provider.attrs.get(hir_id.local_id),\n+            hir_id == hir::CRATE_HIR_ID,\n+            Some(hir_id),\n+        );\n     }\n }\n "}]}