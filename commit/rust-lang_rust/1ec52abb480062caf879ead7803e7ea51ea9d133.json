{"sha": "1ec52abb480062caf879ead7803e7ea51ea9d133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzUyYWJiNDgwMDYyY2FmODc5ZWFkNzgwM2U3ZWE1MWVhOWQxMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-08T17:07:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-08T17:07:15Z"}, "message": "Auto merge of #1761 - hyd-dev:build-rs-proc-macro-no-default-args, r=RalfJung\n\nDon't use `MIRI_DEFAULT_ARGS` to compile host crates\n\nThey (specifically, `--cfg=miri`) may cause procedural macros (and probably build scripts) to depend on Miri-only symbols, such as `miri_resolve_frame`.\n\nThis PR makes `miri` detect host crates inspecting the value of the `MIRI_BE_RUSTC` environment variable (`target` -> target crate, `host` -> host crate, other -> panic) and skip the insertion of `MIRI_DEFAULT_ARGS` if it's a host crate.\n\nFixes #1760", "tree": {"sha": "823713847f075ba62c2d814c074c8ba8b08c264b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/823713847f075ba62c2d814c074c8ba8b08c264b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec52abb480062caf879ead7803e7ea51ea9d133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec52abb480062caf879ead7803e7ea51ea9d133", "html_url": "https://github.com/rust-lang/rust/commit/1ec52abb480062caf879ead7803e7ea51ea9d133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec52abb480062caf879ead7803e7ea51ea9d133/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2e325728e800664e55a7b91bac8b8b8378ab74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2e325728e800664e55a7b91bac8b8b8378ab74", "html_url": "https://github.com/rust-lang/rust/commit/7b2e325728e800664e55a7b91bac8b8b8378ab74"}, {"sha": "3dff1d4fcd29f9f4cc258cb1b971c95a38ee5924", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dff1d4fcd29f9f4cc258cb1b971c95a38ee5924", "html_url": "https://github.com/rust-lang/rust/commit/3dff1d4fcd29f9f4cc258cb1b971c95a38ee5924"}], "stats": {"total": 100, "additions": 84, "deletions": 16}, "files": [{"sha": "11bb31dc74dc4cba21c391cc7773dd3a4ed2c94b", "filename": "README.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -100,9 +100,9 @@ You can pass arguments to Miri via `MIRIFLAGS`. For example,\n `MIRIFLAGS=\"-Zmiri-disable-stacked-borrows\" cargo miri run` runs the program\n without checking the aliasing of references.\n \n-When compiling code via `cargo miri`, the `cfg(miri)` config flag is set. You\n-can use this to ignore test cases that fail under Miri because they do things\n-Miri does not support:\n+When compiling code via `cargo miri`, the `cfg(miri)` config flag is set for code\n+that will be interpret under Miri. You can use this to ignore test cases that fail\n+under Miri because they do things Miri does not support:\n \n ```rust\n #[test]\n@@ -286,9 +286,11 @@ Moreover, Miri recognizes some environment variables:\n The following environment variables are internal, but used to communicate between\n different Miri binaries, and as such worth documenting:\n \n-* `MIRI_BE_RUSTC` when set to any value tells the Miri driver to actually not\n-  interpret the code but compile it like rustc would. This is useful to be sure\n-  that the compiled `rlib`s are compatible with Miri.\n+* `MIRI_BE_RUSTC` can be set to `host` or `target`. It tells the Miri driver to\n+  actually not interpret the code but compile it like rustc would. With `target`, Miri sets\n+  some compiler flags to prepare the code for interpretation; with `host`, this is not done.\n+  This environment variable is useful to be sure that the compiled `rlib`s are compatible\n+  with Miri.\n   When set while running `cargo-miri`, it indicates that we are part of a sysroot\n   build (for which some crates need special treatment).\n * `MIRI_CALLED_FROM_RUSTDOC` when set to any value tells `cargo-miri` that it is"}, {"sha": "bdf7e0052d19040da56142d9122777f4cb64f2bb", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -420,7 +420,7 @@ path = \"lib.rs\"\n     } else {\n         command.env(\"RUSTC\", &cargo_miri_path);\n     }\n-    command.env(\"MIRI_BE_RUSTC\", \"1\");\n+    command.env(\"MIRI_BE_RUSTC\", \"target\");\n     // Make sure there are no other wrappers or flags getting in our way\n     // (Cc https://github.com/rust-lang/miri/issues/1421).\n     // This is consistent with normal `cargo build` that does not apply `RUSTFLAGS`\n@@ -694,7 +694,7 @@ fn phase_cargo_rustc(mut args: env::Args) {\n             }\n \n             cmd.args(&env.args);\n-            cmd.env(\"MIRI_BE_RUSTC\", \"1\");\n+            cmd.env(\"MIRI_BE_RUSTC\", \"target\");\n \n             if verbose {\n                 eprintln!(\"[cargo-miri rustc] captured input:\\n{}\", std::str::from_utf8(&env.stdin).unwrap());\n@@ -758,7 +758,9 @@ fn phase_cargo_rustc(mut args: env::Args) {\n \n     // We want to compile, not interpret. We still use Miri to make sure the compiler version etc\n     // are the exact same as what is used for interpretation.\n-    cmd.env(\"MIRI_BE_RUSTC\", \"1\");\n+    // MIRI_DEFAULT_ARGS should not be used to build host crates, hence setting \"target\" or \"host\"\n+    // as the value here to help Miri differentiate them.\n+    cmd.env(\"MIRI_BE_RUSTC\", if target_crate { \"target\" } else { \"host\" });\n \n     // Run it.\n     if verbose {"}, {"sha": "23a58cf2d8c6ccae3fbad37045f31260f62c5f12", "filename": "src/bin/miri.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -135,7 +135,11 @@ fn compile_time_sysroot() -> Option<String> {\n }\n \n /// Execute a compiler with the given CLI arguments and callbacks.\n-fn run_compiler(mut args: Vec<String>, callbacks: &mut (dyn rustc_driver::Callbacks + Send)) -> ! {\n+fn run_compiler(\n+    mut args: Vec<String>,\n+    callbacks: &mut (dyn rustc_driver::Callbacks + Send),\n+    insert_default_args: bool,\n+) -> ! {\n     // Make sure we use the right default sysroot. The default sysroot is wrong,\n     // because `get_or_default_sysroot` in `librustc_session` bases that on `current_exe`.\n     //\n@@ -151,9 +155,11 @@ fn run_compiler(mut args: Vec<String>, callbacks: &mut (dyn rustc_driver::Callba\n         }\n     }\n \n-    // Some options have different defaults in Miri than in plain rustc; apply those by making\n-    // them the first arguments after the binary name (but later arguments can overwrite them).\n-    args.splice(1..1, miri::MIRI_DEFAULT_ARGS.iter().map(ToString::to_string));\n+    if insert_default_args {\n+        // Some options have different defaults in Miri than in plain rustc; apply those by making\n+        // them the first arguments after the binary name (but later arguments can overwrite them).\n+        args.splice(1..1, miri::MIRI_DEFAULT_ARGS.iter().map(ToString::to_string));\n+    }\n \n     // Invoke compiler, and handle return code.\n     let exit_code = rustc_driver::catch_with_exit_code(move || {\n@@ -166,11 +172,24 @@ fn main() {\n     rustc_driver::install_ice_hook();\n \n     // If the environment asks us to actually be rustc, then do that.\n-    if env::var_os(\"MIRI_BE_RUSTC\").is_some() {\n+    if let Some(crate_kind) = env::var_os(\"MIRI_BE_RUSTC\") {\n         rustc_driver::init_rustc_env_logger();\n+\n+        // Don't insert `MIRI_DEFAULT_ARGS`, in particular, `--cfg=miri`, if we are building a\n+        // \"host\" crate. That may cause procedural macros (and probably build scripts) to depend\n+        // on Miri-only symbols, such as `miri_resolve_frame`:\n+        // https://github.com/rust-lang/miri/issues/1760\n+        let insert_default_args = if crate_kind == \"target\" {\n+            true\n+        } else if crate_kind == \"host\" {\n+            false\n+        } else {\n+            panic!(\"invalid `MIRI_BE_RUSTC` value: {:?}\", crate_kind)\n+        };\n+\n         // We cannot use `rustc_driver::main` as we need to adjust the CLI arguments.\n         let mut callbacks = rustc_driver::TimePassesCallbacks::default();\n-        run_compiler(env::args().collect(), &mut callbacks)\n+        run_compiler(env::args().collect(), &mut callbacks, insert_default_args)\n     }\n \n     // Init loggers the Miri way.\n@@ -300,5 +319,5 @@ fn main() {\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n     debug!(\"crate arguments: {:?}\", miri_config.args);\n-    run_compiler(rustc_args, &mut MiriCompilerCalls { miri_config })\n+    run_compiler(rustc_args, &mut MiriCompilerCalls { miri_config }, /* insert_default_args: */ true)\n }"}, {"sha": "403b9327930ab5c8859c91b1ae5848ca1f06ac99", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -19,6 +19,7 @@ dependencies = [\n  \"issue_1567\",\n  \"issue_1691\",\n  \"issue_1705\",\n+ \"issue_1760\",\n  \"rand\",\n  \"serde_derive\",\n ]\n@@ -85,6 +86,10 @@ dependencies = [\n  \"byteorder\",\n ]\n \n+[[package]]\n+name = \"issue_1760\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"libc\"\n version = \"0.2.92\""}, {"sha": "ae46ebc02a36e8545d51e93abaa77464cc16a0a7", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -13,6 +13,7 @@ cdylib = { path = \"cdylib\" }\n issue_1567 = { path = \"issue-1567\" }\n issue_1691 = { path = \"issue-1691\" }\n issue_1705 = { path = \"issue-1705\" }\n+issue_1760 = { path = \"issue-1760\" }\n \n [dev-dependencies]\n rand = { version = \"0.8\", features = [\"small_rng\"] }"}, {"sha": "3e84d69eec804a7719b33086fdab841ab0388ec3", "filename": "test-cargo-miri/build.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fbuild.rs?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -1,5 +1,10 @@\n #![feature(llvm_asm)]\n \n+use std::env;\n+\n+#[cfg(miri)]\n+compile_error!(\"`miri` cfg should not be set in build script\");\n+\n fn not_in_miri() -> i32 {\n     // Inline assembly definitely does not work in Miri.\n     let dummy = 42;\n@@ -11,6 +16,9 @@ fn not_in_miri() -> i32 {\n \n fn main() {\n     not_in_miri();\n+    // Cargo calls `miri --print=cfg` to populate the `CARGO_CFG_*` env vars.\n+    // Make sure that the \"miri\" flag is set.\n+    assert!(env::var_os(\"CARGO_CFG_MIRI\").is_some());\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     println!(\"cargo:rerun-if-env-changed=MIRITESTVAR\");\n     println!(\"cargo:rustc-env=MIRITESTVAR=testval\");"}, {"sha": "80925c74746387c3c557ba30a0ed81ca0bff1423", "filename": "test-cargo-miri/issue-1760/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fissue-1760%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fissue-1760%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-1760%2FCargo.toml?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"issue_1760\"\n+version = \"0.1.0\"\n+authors = [\"Miri Team\"]\n+edition = \"2018\"\n+\n+[lib]\n+proc-macro = true"}, {"sha": "08427fd7164f1d68ec6aed161bebe8b7e5dd61ec", "filename": "test-cargo-miri/issue-1760/build.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fissue-1760%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fissue-1760%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-1760%2Fbuild.rs?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -0,0 +1,10 @@\n+use std::env;\n+\n+#[cfg(miri)]\n+compile_error!(\"`miri` cfg should not be set in build script\");\n+\n+fn main() {\n+    // Cargo calls `miri --print=cfg` to populate the `CARGO_CFG_*` env vars.\n+    // Make sure that the \"miri\" flag is not set since we are building a procedural macro crate.\n+    assert!(env::var_os(\"CARGO_CFG_MIRI\").is_none());\n+}"}, {"sha": "b4f6274af444809467129903aaa5d8023cc1828e", "filename": "test-cargo-miri/issue-1760/src/lib.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fissue-1760%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fissue-1760%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-1760%2Fsrc%2Flib.rs?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -0,0 +1,9 @@\n+use proc_macro::TokenStream;\n+\n+#[cfg(miri)]\n+compile_error!(\"`miri` cfg should not be set in proc-macro\");\n+\n+#[proc_macro]\n+pub fn use_the_dependency(_: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}"}, {"sha": "b11a64da13b47448bba8bb1cc0ffd2f187fca183", "filename": "test-cargo-miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/test-cargo-miri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Flib.rs?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -11,5 +11,6 @@\n pub fn make_true() -> bool {\n     issue_1567::use_the_dependency();\n     issue_1705::use_the_dependency();\n+    issue_1760::use_the_dependency!();\n     issue_1691::use_me()\n }"}, {"sha": "558b9a4f50db99a1d35673e52debb448e5599286", "filename": "tests/run-pass/cfg_miri.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec52abb480062caf879ead7803e7ea51ea9d133/tests%2Frun-pass%2Fcfg_miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec52abb480062caf879ead7803e7ea51ea9d133/tests%2Frun-pass%2Fcfg_miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcfg_miri.rs?ref=1ec52abb480062caf879ead7803e7ea51ea9d133", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    assert!(cfg!(miri));\n+}"}]}