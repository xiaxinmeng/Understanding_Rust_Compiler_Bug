{"sha": "ce25dabc66d4b7905dba3bf63ad766d9d6f421ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMjVkYWJjNjZkNGI3OTA1ZGJhM2JmNjNhZDc2NmQ5ZDZmNDIxYWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-04T23:11:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-06T22:24:53Z"}, "message": "linker: Make argument building interface in `trait Linker` richer\n\nby redirecting everything to `Command`", "tree": {"sha": "54dda803f0d1d6487feaaec7041c1d2aa292ecf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54dda803f0d1d6487feaaec7041c1d2aa292ecf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab", "html_url": "https://github.com/rust-lang/rust/commit/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dee5f1126dfd5c9314ee5ae9d9eb010e35ef257", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dee5f1126dfd5c9314ee5ae9d9eb010e35ef257", "html_url": "https://github.com/rust-lang/rust/commit/6dee5f1126dfd5c9314ee5ae9d9eb010e35ef257"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "9ac318fbe94d80168a0110c1df7a693a072b51fc", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=ce25dabc66d4b7905dba3bf63ad766d9d6f421ab", "patch": "@@ -787,7 +787,7 @@ fn link_sanitizer_runtime(sess: &Session, crate_type: config::CrateType, linker:\n             // PR #41352 for details).\n             let libname = format!(\"rustc{}_rt.{}\", channel, name);\n             let rpath = default_tlib.to_str().expect(\"non-utf8 component in path\");\n-            linker.args(&[\"-Wl,-rpath\".into(), \"-Xlinker\".into(), rpath.into()]);\n+            linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n             linker.link_dylib(Symbol::intern(&libname));\n         }\n         \"x86_64-unknown-linux-gnu\" | \"x86_64-fuchsia\" | \"aarch64-fuchsia\" => {\n@@ -1300,16 +1300,15 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     let attr_link_args = codegen_results.crate_info.link_args.iter();\n-    let user_link_args: Vec<_> =\n-        sess.opts.cg.link_args.iter().chain(attr_link_args).cloned().collect();\n+    let user_link_args = sess.opts.cg.link_args.iter().chain(attr_link_args);\n \n     if crate_type == config::CrateType::Executable {\n         let mut position_independent_executable = false;\n \n         if t.options.position_independent_executables {\n             if is_pic(sess)\n                 && !sess.crt_static(Some(crate_type))\n-                && !user_link_args.iter().any(|x| x == \"-static\")\n+                && !user_link_args.clone().any(|x| x == \"-static\")\n             {\n                 position_independent_executable = true;\n             }\n@@ -1440,7 +1439,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n \n     // Finally add all the linker arguments provided on the command line along\n     // with any #[link_args] attributes found inside the crate\n-    cmd.args(&user_link_args);\n+    cmd.args(user_link_args);\n }\n \n // # Native library linking"}, {"sha": "da3e805698f9709191f2df32888a84b7f4c9835f", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce25dabc66d4b7905dba3bf63ad766d9d6f421ab/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=ce25dabc66d4b7905dba3bf63ad766d9d6f421ab", "patch": "@@ -87,6 +87,7 @@ impl LinkerInfo {\n /// used to dispatch on whether a GNU-like linker (generally `ld.exe`) or an\n /// MSVC linker (e.g., `link.exe`) is being used.\n pub trait Linker {\n+    fn cmd(&mut self) -> &mut Command;\n     fn link_dylib(&mut self, lib: Symbol);\n     fn link_rust_dylib(&mut self, lib: Symbol, path: &Path);\n     fn link_framework(&mut self, framework: Symbol);\n@@ -111,7 +112,6 @@ pub trait Linker {\n     fn no_default_libraries(&mut self);\n     fn build_dylib(&mut self, out_filename: &Path);\n     fn build_static_executable(&mut self);\n-    fn args(&mut self, args: &[String]);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType);\n     fn subsystem(&mut self, subsystem: &str);\n     fn group_start(&mut self);\n@@ -121,6 +121,16 @@ pub trait Linker {\n     fn finalize(&mut self) -> Command;\n }\n \n+impl dyn Linker + '_ {\n+    pub fn arg(&mut self, arg: impl AsRef<OsStr>) {\n+        self.cmd().arg(arg);\n+    }\n+\n+    pub fn args(&mut self, args: impl IntoIterator<Item: AsRef<OsStr>>) {\n+        self.cmd().args(args);\n+    }\n+}\n+\n pub struct GccLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n@@ -208,6 +218,9 @@ impl<'a> GccLinker<'a> {\n }\n \n impl<'a> Linker for GccLinker<'a> {\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n     fn link_dylib(&mut self, lib: Symbol) {\n         self.hint_dynamic();\n         self.cmd.arg(format!(\"-l{}\", lib));\n@@ -251,9 +264,6 @@ impl<'a> Linker for GccLinker<'a> {\n     fn build_static_executable(&mut self) {\n         self.cmd.arg(\"-static\");\n     }\n-    fn args(&mut self, args: &[String]) {\n-        self.cmd.args(args);\n-    }\n \n     fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n         self.hint_dynamic();\n@@ -545,15 +555,15 @@ pub struct MsvcLinker<'a> {\n }\n \n impl<'a> Linker for MsvcLinker<'a> {\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n     fn link_rlib(&mut self, lib: &Path) {\n         self.cmd.arg(lib);\n     }\n     fn add_object(&mut self, path: &Path) {\n         self.cmd.arg(path);\n     }\n-    fn args(&mut self, args: &[String]) {\n-        self.cmd.args(args);\n-    }\n \n     fn build_dylib(&mut self, out_filename: &Path) {\n         self.cmd.arg(\"/DLL\");\n@@ -778,6 +788,9 @@ pub struct EmLinker<'a> {\n }\n \n impl<'a> Linker for EmLinker<'a> {\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n     fn include_path(&mut self, path: &Path) {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n@@ -837,10 +850,6 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n-    fn args(&mut self, args: &[String]) {\n-        self.cmd.args(args);\n-    }\n-\n     fn framework_path(&mut self, _path: &Path) {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n@@ -992,6 +1001,10 @@ impl<'a> WasmLd<'a> {\n }\n \n impl<'a> Linker for WasmLd<'a> {\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n     fn link_dylib(&mut self, lib: Symbol) {\n         self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n@@ -1030,10 +1043,6 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn build_static_executable(&mut self) {}\n \n-    fn args(&mut self, args: &[String]) {\n-        self.cmd.args(args);\n-    }\n-\n     fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n         self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n@@ -1162,6 +1171,10 @@ pub struct PtxLinker<'a> {\n }\n \n impl<'a> Linker for PtxLinker<'a> {\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n     fn link_rlib(&mut self, path: &Path) {\n         self.cmd.arg(\"--rlib\").arg(path);\n     }\n@@ -1182,10 +1195,6 @@ impl<'a> Linker for PtxLinker<'a> {\n         self.cmd.arg(\"--bitcode\").arg(path);\n     }\n \n-    fn args(&mut self, args: &[String]) {\n-        self.cmd.args(args);\n-    }\n-\n     fn optimize(&mut self) {\n         match self.sess.lto() {\n             Lto::Thin | Lto::Fat | Lto::ThinLocal => {"}]}