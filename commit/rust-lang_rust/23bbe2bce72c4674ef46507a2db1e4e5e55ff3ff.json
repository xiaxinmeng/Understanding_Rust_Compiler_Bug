{"sha": "23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "node_id": "C_kwDOAAsO6NoAKDIzYmJlMmJjZTcyYzQ2NzRlZjQ2NTA3YTJkYjFlNGU1ZTU1ZmYzZmY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-25T16:08:41Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-25T18:26:33Z"}, "message": "Reproduce #2156", "tree": {"sha": "8f382492cd57926806680fd591cc21f047644709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f382492cd57926806680fd591cc21f047644709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "html_url": "https://github.com/rust-lang/rust/commit/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c2ab6d5b399a13886bc48fc88781972d53d387", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c2ab6d5b399a13886bc48fc88781972d53d387", "html_url": "https://github.com/rust-lang/rust/commit/e7c2ab6d5b399a13886bc48fc88781972d53d387"}], "stats": {"total": 93, "additions": 85, "deletions": 8}, "files": [{"sha": "03314f77b5aa454994bf08c40943f4012964eb0a", "filename": "ui_test/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2F.gitignore?ref=23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "patch": "@@ -0,0 +1 @@\n+Cargo.lock"}, {"sha": "193cda68b9aaa5fd74ff7f7a426eea7a552246c9", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "patch": "@@ -5,7 +5,7 @@ use regex::Regex;\n /// This crate supports various magic comments that get parsed as file-specific\n /// configuration values. This struct parses them all in one go and then they\n /// get processed by their respective use sites.\n-#[derive(Default)]\n+#[derive(Default, Debug)]\n pub struct Comments {\n     /// List of revision names to execute. Can only be speicified once\n     pub revisions: Option<Vec<String>>,\n@@ -26,16 +26,21 @@ pub struct Comments {\n     pub error_matches: Vec<ErrorMatch>,\n }\n \n+#[derive(Debug)]\n pub struct ErrorMatch {\n     pub matched: String,\n     pub revision: Option<String>,\n     pub definition_line: usize,\n }\n \n impl Comments {\n-    pub fn parse(path: &Path) -> Self {\n-        let mut this = Self::default();\n+    pub fn parse_file(path: &Path) -> Self {\n         let content = std::fs::read_to_string(path).unwrap();\n+        Self::parse(path, &content)\n+    }\n+\n+    pub fn parse(path: &Path, content: &str) -> Self {\n+        let mut this = Self::default();\n         let error_pattern_regex =\n             Regex::new(r\"//(\\[(?P<revision>[^\\]]+)\\])?~[|^]*\\s*(ERROR|HELP|WARN)?:?(?P<text>.*)\")\n                 .unwrap();"}, {"sha": "4f7e55fdce8dbc9d01893d90ca347eab074e3ecd", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "patch": "@@ -9,7 +9,7 @@ use comments::ErrorMatch;\n use crossbeam::queue::SegQueue;\n use regex::Regex;\n \n-use crate::comments::Comments;\n+pub use crate::comments::Comments;\n \n mod comments;\n \n@@ -73,7 +73,7 @@ pub fn run_tests(config: Config) {\n                     if !path.extension().map(|ext| ext == \"rs\").unwrap_or(false) {\n                         continue;\n                     }\n-                    let comments = Comments::parse(&path);\n+                    let comments = Comments::parse_file(&path);\n                     // Ignore file if only/ignore rules do (not) apply\n                     if ignore_file(&comments, &target) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n@@ -171,7 +171,7 @@ pub fn run_tests(config: Config) {\n }\n \n #[derive(Debug)]\n-enum Error {\n+pub enum Error {\n     /// Got an invalid exit status for the given mode.\n     ExitStatus(Mode, ExitStatus),\n     PatternNotFound {\n@@ -191,7 +191,7 @@ enum Error {\n     },\n }\n \n-type Errors = Vec<Error>;\n+pub type Errors = Vec<Error>;\n \n fn run_test(\n     path: &Path,\n@@ -249,7 +249,7 @@ fn run_test(\n     (miri, errors)\n }\n \n-fn check_annotations(\n+pub fn check_annotations(\n     unnormalized_stderr: &[u8],\n     errors: &mut Errors,\n     config: &Config,"}, {"sha": "4735fe1fa049354ee0d7c65aebcb1d7b6c65e0ca", "filename": "ui_test/tests/check_annotations.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Ftests%2Fcheck_annotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Ftests%2Fcheck_annotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Ftests%2Fcheck_annotations.rs?ref=23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "patch": "@@ -0,0 +1,49 @@\n+use std::path::{Path, PathBuf};\n+\n+use ui_test::{check_annotations, Comments, Config, Error, Mode, OutputConflictHandling};\n+\n+fn config() -> Config {\n+    Config {\n+        args: vec![],\n+        target: None,\n+        stderr_filters: vec![],\n+        stdout_filters: vec![],\n+        root_dir: PathBuf::from(\".\"),\n+        mode: Mode::Fail,\n+        program: PathBuf::from(\"cake\"),\n+        output_conflict_handling: OutputConflictHandling::Error,\n+    }\n+}\n+\n+#[test]\n+fn issue_2156() {\n+    let s = r\"\n+use std::mem;\n+\n+fn main() {\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+}\n+    \";\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let mut errors = vec![];\n+    let config = config();\n+    let unnormalized_stderr = r\"\n+error: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x10 is unallocated)\n+  --> tests/compile-fail/validity/dangling_ref1.rs:6:29\n+   |\n+LL |     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x10 is unallocated)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at tests/compile-fail/validity/dangling_ref1.rs:6:29\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+error: aborting due to previous error\n+    \";\n+    check_annotations(unnormalized_stderr.as_bytes(), &mut errors, &config, \"\", &comments);\n+    match &errors[..] {\n+        [Error::PatternNotFound { .. }] => {}\n+        _ => panic!(\"{:#?}\", errors),\n+    }\n+}"}, {"sha": "ee1382a6c7886fe99a84b450f36ebe96930f8b11", "filename": "ui_test/tests/comment_parser.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Ftests%2Fcomment_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff/ui_test%2Ftests%2Fcomment_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Ftests%2Fcomment_parser.rs?ref=23bbe2bce72c4674ef46507a2db1e4e5e55ff3ff", "patch": "@@ -0,0 +1,22 @@\n+use std::path::Path;\n+\n+use ui_test::Comments;\n+\n+#[test]\n+fn issue_2156() {\n+    let s = r\"\n+use std::mem;\n+\n+fn main() {\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+}\n+    \";\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    println!(\"{:#?}\", comments);\n+    assert_eq!(comments.error_matches[0].definition_line, 4);\n+    assert_eq!(comments.error_matches[0].revision, None);\n+    assert_eq!(\n+        comments.error_matches[0].matched,\n+        \"encountered a dangling reference (address $HEX is unallocated)\"\n+    );\n+}"}]}