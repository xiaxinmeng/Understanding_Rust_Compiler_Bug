{"sha": "8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkN2Q0ODhkM2JhMDllZjVhYzNmY2RjMTI4OTFiMzFhN2QzODdmODU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-08T19:58:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-31T18:30:17Z"}, "message": "Lint Abi in ast validation.", "tree": {"sha": "a7f8f5a848fe265c769d335f37ca646b94f1a190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f8f5a848fe265c769d335f37ca646b94f1a190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "html_url": "https://github.com/rust-lang/rust/commit/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "html_url": "https://github.com/rust-lang/rust/commit/daa4dc997c777676b0f0e48d0311cc5e7bde5f87"}], "stats": {"total": 111, "additions": 61, "deletions": 50}, "files": [{"sha": "f370a458fb35facea55d85fcf9a8e0c2b3648f85", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "patch": "@@ -3556,6 +3556,7 @@ dependencies = [\n  \"rustc_parse\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_target\",\n  \"tracing\",\n ]\n "}, {"sha": "9766bd6751f632a7b8f4ce8b1b421ebe3bd19859", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "patch": "@@ -283,7 +283,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     );\n                     let sig = hir::FnSig {\n                         decl,\n-                        header: this.lower_fn_header(header, fn_sig_span, id),\n+                        header: this.lower_fn_header(header),\n                         span: this.lower_span(fn_sig_span),\n                     };\n                     hir::ItemKind::Fn(sig, generics, body_id)\n@@ -295,17 +295,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ModKind::Unloaded => panic!(\"`mod` items should have been loaded by now\"),\n             },\n-            ItemKind::ForeignMod(ref fm) => {\n-                if fm.abi.is_none() {\n-                    self.maybe_lint_missing_abi(span, id, abi::Abi::C { unwind: false });\n-                }\n-                hir::ItemKind::ForeignMod {\n-                    abi: fm.abi.map_or(abi::Abi::C { unwind: false }, |abi| self.lower_abi(abi)),\n-                    items: self\n-                        .arena\n-                        .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n-                }\n-            }\n+            ItemKind::ForeignMod(ref fm) => hir::ItemKind::ForeignMod {\n+                abi: fm.abi.map_or(abi::Abi::FALLBACK, |abi| self.lower_abi(abi)),\n+                items: self\n+                    .arena\n+                    .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n+            },\n             ItemKind::GlobalAsm(ref asm) => {\n                 hir::ItemKind::GlobalAsm(self.lower_inline_asm(span, asm))\n             }\n@@ -811,7 +806,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, None)) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None, i.id);\n+                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n             AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, Some(ref body))) => {\n@@ -824,7 +819,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     trait_item_def_id,\n                     false,\n                     asyncness.opt_return_id(),\n-                    i.id,\n                 );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n@@ -901,7 +895,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     impl_item_def_id,\n                     impl_trait_return_allow,\n                     asyncness.opt_return_id(),\n-                    i.id,\n                 );\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n@@ -1296,9 +1289,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         fn_def_id: LocalDefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n-        id: NodeId,\n     ) -> (hir::Generics<'hir>, hir::FnSig<'hir>) {\n-        let header = self.lower_fn_header(sig.header, sig.span, id);\n+        let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n             fn_def_id,\n@@ -1315,12 +1307,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }\n \n-    fn lower_fn_header(&mut self, h: FnHeader, span: Span, id: NodeId) -> hir::FnHeader {\n+    fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n             unsafety: self.lower_unsafety(h.unsafety),\n             asyncness: self.lower_asyncness(h.asyncness),\n             constness: self.lower_constness(h.constness),\n-            abi: self.lower_extern(h.ext, span, id),\n+            abi: self.lower_extern(h.ext),\n         }\n     }\n \n@@ -1331,13 +1323,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         })\n     }\n \n-    pub(super) fn lower_extern(&mut self, ext: Extern, span: Span, id: NodeId) -> abi::Abi {\n+    pub(super) fn lower_extern(&mut self, ext: Extern) -> abi::Abi {\n         match ext {\n             Extern::None => abi::Abi::Rust,\n-            Extern::Implicit => {\n-                self.maybe_lint_missing_abi(span, id, abi::Abi::C { unwind: false });\n-                abi::Abi::C { unwind: false }\n-            }\n+            Extern::Implicit => abi::Abi::FALLBACK,\n             Extern::Explicit(abi) => self.lower_abi(abi),\n         }\n     }"}, {"sha": "89eced734e88c48a28b9d1e89e3d516864465ec7", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "patch": "@@ -53,7 +53,7 @@ use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, InferKind, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::lint::builtin::{BARE_TRAIT_OBJECTS, MISSING_ABI};\n+use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n@@ -62,7 +62,6 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, CachingSourceMapView, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::spec::abi::Abi;\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeMap;\n@@ -1360,15 +1359,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(&f.generic_params, |this| {\n                 this.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n-                    let span = this.sess.source_map().next_point(t.span.shrink_to_lo());\n                     hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n                         generic_params: this.lower_generic_params(\n                             &f.generic_params,\n                             &NodeMap::default(),\n                             ImplTraitContext::disallowed(),\n                         ),\n                         unsafety: this.lower_unsafety(f.unsafety),\n-                        abi: this.lower_extern(f.ext, span, t.id),\n+                        abi: this.lower_extern(f.ext),\n                         decl: this.lower_fn_decl(&f.decl, None, false, None),\n                         param_names: this.lower_fn_params_to_names(&f.decl),\n                     }))\n@@ -2842,26 +2840,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }\n     }\n-\n-    fn maybe_lint_missing_abi(&mut self, span: Span, id: NodeId, default: Abi) {\n-        // FIXME(davidtwco): This is a hack to detect macros which produce spans of the\n-        // call site which do not have a macro backtrace. See #61963.\n-        let is_macro_callsite = self\n-            .sess\n-            .source_map()\n-            .span_to_snippet(span)\n-            .map(|snippet| snippet.starts_with(\"#[\"))\n-            .unwrap_or(true);\n-        if !is_macro_callsite {\n-            self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                MISSING_ABI,\n-                id,\n-                span,\n-                \"extern declarations without an explicit ABI are deprecated\",\n-                BuiltinLintDiagnostics::MissingAbi(span, default),\n-            )\n-        }\n-    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body<'_>>) -> Vec<hir::BodyId> {"}, {"sha": "4a6eb80fb30ce1ed0bfc0ef92595d9520ba63876", "filename": "compiler/rustc_ast_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2FCargo.toml?ref=8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "patch": "@@ -14,4 +14,5 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "9e51590dfb895a017f835caafc66e5c501a56af4", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "patch": "@@ -15,12 +15,13 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n-use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n+use rustc_session::lint::builtin::{MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n+use rustc_target::spec::abi;\n use std::mem;\n use std::ops::DerefMut;\n \n@@ -844,6 +845,10 @@ impl<'a> AstValidator<'a> {\n                     .emit();\n                 });\n                 self.check_late_bound_lifetime_defs(&bfty.generic_params);\n+                if let Extern::Implicit = bfty.ext {\n+                    let sig_span = self.session.source_map().next_point(ty.span.shrink_to_lo());\n+                    self.maybe_lint_missing_abi(sig_span, ty.id);\n+                }\n             }\n             TyKind::TraitObject(ref bounds, ..) => {\n                 let mut any_lifetime_bounds = false;\n@@ -894,6 +899,26 @@ impl<'a> AstValidator<'a> {\n             _ => {}\n         }\n     }\n+\n+    fn maybe_lint_missing_abi(&mut self, span: Span, id: NodeId) {\n+        // FIXME(davidtwco): This is a hack to detect macros which produce spans of the\n+        // call site which do not have a macro backtrace. See #61963.\n+        let is_macro_callsite = self\n+            .session\n+            .source_map()\n+            .span_to_snippet(span)\n+            .map(|snippet| snippet.starts_with(\"#[\"))\n+            .unwrap_or(true);\n+        if !is_macro_callsite {\n+            self.lint_buffer.buffer_lint_with_diagnostic(\n+                MISSING_ABI,\n+                id,\n+                span,\n+                \"extern declarations without an explicit ABI are deprecated\",\n+                BuiltinLintDiagnostics::MissingAbi(span, abi::Abi::FALLBACK),\n+            )\n+        }\n+    }\n }\n \n /// Checks that generic parameters are in the correct order,\n@@ -1178,7 +1203,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return; // Avoid visiting again.\n             }\n-            ItemKind::ForeignMod(ForeignMod { unsafety, .. }) => {\n+            ItemKind::ForeignMod(ForeignMod { abi, unsafety, .. }) => {\n                 let old_item = mem::replace(&mut self.extern_mod, Some(item));\n                 self.invalid_visibility(\n                     &item.vis,\n@@ -1187,6 +1212,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if let Unsafe::Yes(span) = unsafety {\n                     self.err_handler().span_err(span, \"extern block cannot be declared unsafe\");\n                 }\n+                if abi.is_none() {\n+                    self.maybe_lint_missing_abi(item.span, item.id);\n+                }\n                 visit::walk_item(self, item);\n                 self.extern_mod = old_item;\n                 return; // Avoid visiting again.\n@@ -1526,6 +1554,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 .emit();\n         }\n \n+        if let FnKind::Fn(\n+            _,\n+            _,\n+            FnSig { span: sig_span, header: FnHeader { ext: Extern::Implicit, .. }, .. },\n+            _,\n+            _,\n+        ) = fk\n+        {\n+            self.maybe_lint_missing_abi(*sig_span, id);\n+        }\n+\n         // Functions without bodies cannot have patterns.\n         if let FnKind::Fn(ctxt, _, sig, _, None) = fk {\n             Self::check_decl_no_pat(&sig.decl, |span, ident, mut_ident| {"}, {"sha": "e3a2226eb9d152a4a64f4d36da1be0b930b62849", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=8d7d488d3ba09ef5ac3fcdc12891b31a7d387f85", "patch": "@@ -87,6 +87,9 @@ pub fn all_names() -> Vec<&'static str> {\n }\n \n impl Abi {\n+    /// Default ABI chosen for `extern fn` declarations without an explicit ABI.\n+    pub const FALLBACK: Abi = Abi::C { unwind: false };\n+\n     #[inline]\n     pub fn index(self) -> usize {\n         // N.B., this ordering MUST match the AbiDatas array above."}]}