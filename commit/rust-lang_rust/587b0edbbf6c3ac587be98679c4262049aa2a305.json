{"sha": "587b0edbbf6c3ac587be98679c4262049aa2a305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4N2IwZWRiYmY2YzNhYzU4N2JlOTg2NzljNDI2MjA0OWFhMmEzMDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-24T22:29:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-24T22:29:51Z"}, "message": "rustc: Don't require that structs have constructors", "tree": {"sha": "879bb3bdc266ecc210929950e781c4e9c2d07803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879bb3bdc266ecc210929950e781c4e9c2d07803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/587b0edbbf6c3ac587be98679c4262049aa2a305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/587b0edbbf6c3ac587be98679c4262049aa2a305", "html_url": "https://github.com/rust-lang/rust/commit/587b0edbbf6c3ac587be98679c4262049aa2a305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/587b0edbbf6c3ac587be98679c4262049aa2a305/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695ab098995d23b0fa62248b5ce3052e5e072269", "url": "https://api.github.com/repos/rust-lang/rust/commits/695ab098995d23b0fa62248b5ce3052e5e072269", "html_url": "https://github.com/rust-lang/rust/commit/695ab098995d23b0fa62248b5ce3052e5e072269"}], "stats": {"total": 274, "additions": 165, "deletions": 109}, "files": [{"sha": "fb27724e369d3df55ad5b0470f5684a606e11b30", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -636,7 +636,8 @@ enum item_ {\n                ~[@trait_ref],   /* traits this class implements */\n                ~[@class_member], /* methods, etc. */\n                                /* (not including ctor or dtor) */\n-               class_ctor,\n+               /* ctor is optional, and will soon go away */\n+               option<class_ctor>,\n                /* dtor is optional */\n                option<class_dtor>\n                ),"}, {"sha": "de9ed4b25701706dbe23dca38a9ea0995a41f04d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -242,10 +242,24 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n             item_enum(vec::map(variants, |x| fld.fold_variant(x)),\n                       fold_ty_params(typms, fld))\n           }\n-          item_class(typms, traits, items, ctor, m_dtor) {\n-              let ctor_body = fld.fold_block(ctor.node.body);\n-              let ctor_decl = fold_fn_decl(ctor.node.dec, fld);\n-              let ctor_id   = fld.new_id(ctor.node.id);\n+          item_class(typms, traits, items, m_ctor, m_dtor) {\n+            let resulting_optional_constructor;\n+            alt m_ctor {\n+                none => {\n+                    resulting_optional_constructor = none;\n+                }\n+                some(constructor) => {\n+                    resulting_optional_constructor = some({\n+                        node: {\n+                            body: fld.fold_block(constructor.node.body),\n+                            dec: fold_fn_decl(constructor.node.dec, fld),\n+                            id: fld.new_id(constructor.node.id)\n+                            with constructor.node\n+                        }\n+                        with constructor\n+                    });\n+                }\n+            }\n             let dtor = do option::map(m_dtor) |dtor| {\n                 let dtor_body = fld.fold_block(dtor.node.body);\n                 let dtor_id   = fld.new_id(dtor.node.id);\n@@ -256,10 +270,8 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n                   /* FIXME (#2543) */ copy typms,\n                   vec::map(traits, |p| fold_trait_ref(p, fld)),\n                   vec::map(items, |x| fld.fold_class_item(x)),\n-                  {node: {body: ctor_body,\n-                          dec: ctor_decl,\n-                          id: ctor_id with ctor.node}\n-                      with ctor}, dtor)\n+                  resulting_optional_constructor,\n+                  dtor)\n           }\n           item_impl(tps, ifce, ty, methods) {\n               item_impl(fold_ty_params(tps, fld),"}, {"sha": "0686bad2532d2912582f4ad9ec7d23cd95621081", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -2205,20 +2205,22 @@ class parser {\n         alt the_ctor {\n           some((ct_d, ct_attrs, ct_b, ct_s)) {\n             (class_name,\n-             item_class(ty_params, traits, ms, {\n+             item_class(ty_params, traits, ms, some({\n                  node: {id: ctor_id,\n                         attrs: ct_attrs,\n                         self_id: self.get_id(),\n                         dec: ct_d,\n                         body: ct_b},\n-                 span: ct_s}, actual_dtor),\n+                 span: ct_s}), actual_dtor),\n              none)\n           }\n           /*\n           Is it strange for the parser to check this?\n           */\n           none {\n-            self.fatal(~\"class with no constructor\");\n+            (class_name,\n+             item_class(ty_params, traits, ms, none, actual_dtor),\n+             none)\n           }\n         }\n     }"}, {"sha": "aacb725ec6c4ac0044285ff9652cd4cd2309309d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -488,7 +488,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n             bclose(s, item.span);\n         }\n       }\n-      ast::item_class(tps, traits, items, ctor, m_dtor) {\n+      ast::item_class(tps, traits, items, m_ctor, m_dtor) {\n           head(s, ~\"class\");\n           word_nbsp(s, *item.ident);\n           print_type_params(s, tps);\n@@ -499,16 +499,18 @@ fn print_item(s: ps, &&item: @ast::item) {\n           }\n           bopen(s);\n           hardbreak_if_not_bol(s);\n-          maybe_print_comment(s, ctor.span.lo);\n-          print_outer_attributes(s, ctor.node.attrs);\n-          /* Doesn't call head because there shouldn't be a space after new */\n-          cbox(s, indent_unit);\n-          ibox(s, 4);\n-          word(s.s, ~\"new(\");\n-          print_fn_args(s, ctor.node.dec, ~[]);\n-          word(s.s, ~\")\");\n-          space(s.s);\n-          print_block(s, ctor.node.body);\n+          do option::iter(m_ctor) |ctor| {\n+            maybe_print_comment(s, ctor.span.lo);\n+            print_outer_attributes(s, ctor.node.attrs);\n+            // Doesn't call head because there shouldn't be a space after new.\n+            cbox(s, indent_unit);\n+            ibox(s, 4);\n+            word(s.s, ~\"new(\");\n+            print_fn_args(s, ctor.node.dec, ~[]);\n+            word(s.s, ~\")\");\n+            space(s.s);\n+            print_block(s, ctor.node.body);\n+          }\n           do option::iter(m_dtor) |dtor| {\n             hardbreak_if_not_bol(s);\n             maybe_print_comment(s, dtor.span.lo);"}, {"sha": "c7aed0ef90ace2d9ac2643f6183be65ad4a72bbd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -145,17 +145,20 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n             visit_method_helper(m, e, v)\n         }\n       }\n-      item_class(tps, traits, members, ctor, m_dtor) {\n+      item_class(tps, traits, members, m_ctor, m_dtor) {\n           v.visit_ty_params(tps, e, v);\n           for members.each |m| {\n              v.visit_class_item(m, e, v);\n           }\n           for traits.each |p| { visit_path(p.path, e, v); }\n-          visit_class_ctor_helper(ctor, i.ident, tps,\n-                                  ast_util::local_def(i.id), e, v);\n+          do option::iter(m_ctor) |ctor| {\n+            visit_class_ctor_helper(ctor, i.ident, tps,\n+                                    ast_util::local_def(i.id), e, v);\n+          };\n           do option::iter(m_dtor) |dtor| {\n-                  visit_class_dtor_helper(dtor, tps,\n-                     ast_util::local_def(i.id), e, v)};\n+            visit_class_dtor_helper(dtor, tps,\n+                                    ast_util::local_def(i.id), e, v)\n+          };\n       }\n       item_trait(tps, methods) {\n         v.visit_ty_params(tps, e, v);"}, {"sha": "f44d86925b4a117b171c71422e5494ddcb10d4e0", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -193,16 +193,25 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n               encode_name_and_def_id(ebml_w, it.ident, it.id);\n             }\n           }\n-          item_class(_, _, items, ctor, m_dtor) {\n+          item_class(_, _, items, m_ctor, m_dtor) {\n             do ebml_w.wr_tag(tag_paths_data_item) {\n                 encode_name_and_def_id(ebml_w, it.ident, it.id);\n             }\n             do ebml_w.wr_tag(tag_paths) {\n                 // We add the same ident twice: for the\n                 // class and for its ctor\n                 add_to_index(ebml_w, path, index, it.ident);\n-                encode_named_def_id(ebml_w, it.ident,\n-                                    local_def(ctor.node.id));\n+\n+                alt m_ctor {\n+                    none => {\n+                        // Nothing to do.\n+                    }\n+                    some(ctor) {\n+                        encode_named_def_id(ebml_w, it.ident,\n+                                            local_def(ctor.node.id));\n+                    }\n+                }\n+\n                 encode_class_item_paths(ebml_w, items,\n                                         vec::append_one(path, it.ident),\n                                         index);\n@@ -817,18 +826,20 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                 encode_info_for_item(ecx, ebml_w, i, index, *pt);\n                 /* encode ctor, then encode items */\n                 alt i.node {\n-                   item_class(tps, _, _, ctor, m_dtor) {\n-                   #debug(\"encoding info for ctor %s %d\", *i.ident,\n-                          ctor.node.id);\n-                   vec::push(*index,\n-                             {val: ctor.node.id, pos: ebml_w.writer.tell()});\n-                   encode_info_for_fn(ecx, ebml_w, ctor.node.id, i.ident,\n-                      *pt, if tps.len() > 0u {\n-                             some(ii_ctor(ctor, i.ident, tps,\n-                                          local_def(i.id))) }\n-                      else { none }, tps, ctor.node.dec);\n-                  }\n-                  _ {}\n+                   item_class(tps, _, _, some(ctor), m_dtor) {\n+                       #debug(\"encoding info for ctor %s %d\", *i.ident,\n+                              ctor.node.id);\n+                       vec::push(*index, {\n+                            val: ctor.node.id,\n+                            pos: ebml_w.writer.tell()\n+                       });\n+                       encode_info_for_fn(ecx, ebml_w, ctor.node.id, i.ident,\n+                          *pt, if tps.len() > 0u {\n+                                 some(ii_ctor(ctor, i.ident, tps,\n+                                              local_def(i.id))) }\n+                          else { none }, tps, ctor.node.dec);\n+                   }\n+                   _ {}\n                 }\n               }\n             }"}, {"sha": "bddf83c429e7d693cc6f027d5e15d71ba94ec662", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -878,12 +878,20 @@ class Resolver {\n                                                          visitor);\n                 }\n             }\n-            item_class(_, _, class_members, ctor, _) {\n+            item_class(_, _, class_members, optional_ctor, _) {\n                 (*name_bindings).define_type(def_ty(local_def(item.id)));\n \n-                let purity = ctor.node.dec.purity;\n-                let ctor_def = def_fn(local_def(ctor.node.id), purity);\n-                (*name_bindings).define_value(ctor_def);\n+                alt optional_ctor {\n+                    none => {\n+                        // Nothing to do.\n+                    }\n+                    some(ctor) => {\n+                        let purity = ctor.node.dec.purity;\n+                        let ctor_def = def_fn(local_def(ctor.node.id),\n+                                              purity);\n+                        (*name_bindings).define_value(ctor_def);\n+                    }\n+                }\n \n                 // Create the set of implementation information that the\n                 // implementation scopes (ImplScopes) need and write it into\n@@ -3043,14 +3051,14 @@ class Resolver {\n                 (*self.type_ribs).pop();\n             }\n \n-            item_class(ty_params, interfaces, class_members, constructor,\n-                       optional_destructor) {\n+            item_class(ty_params, interfaces, class_members,\n+                       optional_constructor, optional_destructor) {\n \n                 self.resolve_class(item.id,\n                                    @copy ty_params,\n                                    interfaces,\n                                    class_members,\n-                                   constructor,\n+                                   optional_constructor,\n                                    optional_destructor,\n                                    visitor);\n             }\n@@ -3273,7 +3281,7 @@ class Resolver {\n                      type_parameters: @~[ty_param],\n                      interfaces: ~[@trait_ref],\n                      class_members: ~[@class_member],\n-                     constructor: class_ctor,\n+                     optional_constructor: option<class_ctor>,\n                      optional_destructor: option<class_dtor>,\n                      visitor: ResolveVisitor) {\n \n@@ -3285,8 +3293,7 @@ class Resolver {\n         let borrowed_type_parameters: &~[ty_param] = &*type_parameters;\n         do self.with_type_parameter_rib(HasTypeParameters\n                                         (borrowed_type_parameters, id, 0u,\n-                                         NormalRibKind))\n-                || {\n+                                         NormalRibKind)) {\n \n             // Resolve the type parameters.\n             self.resolve_type_parameters(*type_parameters, visitor);\n@@ -3331,15 +3338,22 @@ class Resolver {\n                 }\n             }\n \n-            // Resolve the constructor.\n-            self.resolve_function(NormalRibKind,\n-                                  some(@constructor.node.dec),\n-                                  NoTypeParameters,\n-                                  constructor.node.body,\n-                                  HasSelfBinding(constructor.node.self_id),\n-                                  NoCaptureClause,\n-                                  visitor);\n-\n+            // Resolve the constructor, if applicable.\n+            alt optional_constructor {\n+                none => {\n+                    // Nothing to do.\n+                }\n+                some(constructor) => {\n+                    self.resolve_function(NormalRibKind,\n+                                          some(@constructor.node.dec),\n+                                          NoTypeParameters,\n+                                          constructor.node.body,\n+                                          HasSelfBinding(constructor.node.\n+                                                         self_id),\n+                                          NoCaptureClause,\n+                                          visitor);\n+                }\n+            }\n \n             // Resolve the destructor, if applicable.\n             alt optional_destructor {"}, {"sha": "209bb6ee7c2c86bbc7ec980dbfb3e5590bcae4e2", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -5015,15 +5015,17 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         };\n         foreign::trans_foreign_mod(ccx, foreign_mod, abi);\n       }\n-      ast::item_class(tps, _traits, items, ctor, m_dtor) {\n+      ast::item_class(tps, _traits, items, m_ctor, m_dtor) {\n         if tps.len() == 0u {\n           let psubsts = {tys: ty::ty_params_to_tys(ccx.tcx, tps),\n                          vtables: none,\n                          bounds: @~[]};\n-          trans_class_ctor(ccx, *path, ctor.node.dec, ctor.node.body,\n-                           get_item_val(ccx, ctor.node.id), psubsts,\n-                           ctor.node.id, local_def(item.id), ctor.span);\n-            do option::iter(m_dtor) |dtor| {\n+          do option::iter(m_ctor) |ctor| {\n+            trans_class_ctor(ccx, *path, ctor.node.dec, ctor.node.body,\n+                             get_item_val(ccx, ctor.node.id), psubsts,\n+                             ctor.node.id, local_def(item.id), ctor.span);\n+          }\n+          do option::iter(m_dtor) |dtor| {\n              trans_class_dtor(ccx, *path, dtor.node.body,\n                dtor.node.id, none, none, local_def(item.id));\n           };"}, {"sha": "0be970357e8adfa4c2ec4a08b5b2c4f7bf633bce", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -109,11 +109,13 @@ fn traverse_public_item(cx: ctx, item: @item) {\n             }\n         }\n       }\n-      item_class(tps, _traits, items, ctor, m_dtor) {\n-        cx.rmap.insert(ctor.node.id, ());\n-        if tps.len() > 0u || attr::find_inline_attr(ctor.node.attrs)\n-                 != attr::ia_none {\n-            traverse_inline_body(cx, ctor.node.body);\n+      item_class(tps, _traits, items, m_ctor, m_dtor) {\n+        do option::iter(m_ctor) |ctor| {\n+            cx.rmap.insert(ctor.node.id, ());\n+            if tps.len() > 0u || attr::find_inline_attr(ctor.node.attrs)\n+                     != attr::ia_none {\n+                traverse_inline_body(cx, ctor.node.body);\n+            }\n         }\n         do option::iter(m_dtor) |dtor| {\n             cx.rmap.insert(dtor.node.id, ());"}, {"sha": "b5743e525b1949b52e1a0758962d80478ee8a39b", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -392,25 +392,29 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         let self_ty = ccx.to_ty(rscope::type_rscope(rp), ty);\n         for ms.each |m| { check_method(ccx, m, self_ty);}\n       }\n-      ast::item_class(tps, traits, members, ctor, m_dtor) {\n-          let tcx = ccx.tcx;\n-          let class_t = ty::node_id_to_type(tcx, it.id);\n-          // typecheck the ctor\n-          check_bare_fn(ccx, ctor.node.dec,\n-                        ctor.node.body, ctor.node.id,\n-                        some(class_t));\n-          // Write the ctor's self's type\n-          write_ty_to_tcx(tcx, ctor.node.self_id, class_t);\n+      ast::item_class(tps, traits, members, m_ctor, m_dtor) {\n+        let tcx = ccx.tcx;\n+        let class_t = ty::node_id_to_type(tcx, it.id);\n+\n+        do option::iter(m_ctor) |ctor| {\n+            // typecheck the ctor\n+            check_bare_fn(ccx, ctor.node.dec,\n+                          ctor.node.body, ctor.node.id,\n+                          some(class_t));\n+            // Write the ctor's self's type\n+            write_ty_to_tcx(tcx, ctor.node.self_id, class_t);\n+        }\n \n         do option::iter(m_dtor) |dtor| {\n             // typecheck the dtor\n-           check_bare_fn(ccx, ast_util::dtor_dec(),\n-                           dtor.node.body, dtor.node.id,\n-                           some(class_t));\n-           // Write the dtor's self's type\n-           write_ty_to_tcx(tcx, dtor.node.self_id, class_t);\n-          };\n-          // typecheck the members\n+            check_bare_fn(ccx, ast_util::dtor_dec(),\n+                         dtor.node.body, dtor.node.id,\n+                         some(class_t));\n+            // Write the dtor's self's type\n+            write_ty_to_tcx(tcx, dtor.node.self_id, class_t);\n+        };\n+\n+        // typecheck the members\n         for members.each |m| { check_class_member(ccx, class_t, m); }\n           // Check that there's at least one field\n           let (fields,_) = split_class_items(members);"}, {"sha": "021ab4e600924d5b513440697434ddc4f92d7906", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587b0edbbf6c3ac587be98679c4262049aa2a305/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=587b0edbbf6c3ac587be98679c4262049aa2a305", "patch": "@@ -346,31 +346,34 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n         ensure_trait_methods(ccx, it.id);\n       }\n-      ast::item_class(tps, traits, members, ctor, m_dtor) {\n+      ast::item_class(tps, traits, members, m_ctor, m_dtor) {\n         // Write the class type\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n         tcx.tcache.insert(local_def(it.id), tpt);\n-        // Write the ctor type\n-        let t_args = ctor.node.dec.inputs.map(\n-            |a| ty_of_arg(ccx, type_rscope(rp), a, none) );\n-        let t_res = ty::mk_class(\n-            tcx, local_def(it.id),\n-            {self_r: if rp {some(ty::re_bound(ty::br_self))} else {none},\n-             self_ty: none,\n-             tps: ty::ty_params_to_tys(tcx, tps)});\n-        let t_ctor = ty::mk_fn(\n-            tcx, {purity: ast::impure_fn,\n-                  proto: ast::proto_any,\n-                  inputs: t_args,\n-                  output: t_res,\n-                  ret_style: ast::return_val});\n-        // constraints, or remove constraints from the language\n-        write_ty_to_tcx(tcx, ctor.node.id, t_ctor);\n-        tcx.tcache.insert(local_def(ctor.node.id),\n-                          {bounds: tpt.bounds,\n-                           rp: rp,\n-                           ty: t_ctor});\n+\n+        do option::iter(m_ctor) |ctor| {\n+            // Write the ctor type\n+            let t_args = ctor.node.dec.inputs.map(\n+                |a| ty_of_arg(ccx, type_rscope(rp), a, none) );\n+            let t_res = ty::mk_class(\n+                tcx, local_def(it.id),\n+                {self_r: if rp {some(ty::re_bound(ty::br_self))} else {none},\n+                 self_ty: none,\n+                 tps: ty::ty_params_to_tys(tcx, tps)});\n+            let t_ctor = ty::mk_fn(\n+                tcx, {purity: ast::impure_fn,\n+                      proto: ast::proto_any,\n+                      inputs: t_args,\n+                      output: t_res,\n+                      ret_style: ast::return_val});\n+            write_ty_to_tcx(tcx, ctor.node.id, t_ctor);\n+            tcx.tcache.insert(local_def(ctor.node.id),\n+                              {bounds: tpt.bounds,\n+                               rp: rp,\n+                               ty: t_ctor});\n+        }\n+\n         do option::iter(m_dtor) |dtor| {\n             // Write the dtor type\n             let t_dtor = ty::mk_fn("}]}