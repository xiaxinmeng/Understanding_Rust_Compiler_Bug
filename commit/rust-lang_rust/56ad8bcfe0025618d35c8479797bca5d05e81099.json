{"sha": "56ad8bcfe0025618d35c8479797bca5d05e81099", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YWQ4YmNmZTAwMjU2MThkMzVjODQ3OTc5N2JjYTVkMDVlODEwOTk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-02T08:55:11Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-02T09:38:23Z"}, "message": "Do not suggest duplicate bounds", "tree": {"sha": "a66f1245757bdd5be7a691dd561c4bdffe92eb0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a66f1245757bdd5be7a691dd561c4bdffe92eb0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ad8bcfe0025618d35c8479797bca5d05e81099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ad8bcfe0025618d35c8479797bca5d05e81099", "html_url": "https://github.com/rust-lang/rust/commit/56ad8bcfe0025618d35c8479797bca5d05e81099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ad8bcfe0025618d35c8479797bca5d05e81099/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4a3390648dffd88e6d69d06e6d49cf3981e713", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4a3390648dffd88e6d69d06e6d49cf3981e713", "html_url": "https://github.com/rust-lang/rust/commit/bc4a3390648dffd88e6d69d06e6d49cf3981e713"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "490c69b55362bb82346c2655ed0c0ad1f571c806", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=56ad8bcfe0025618d35c8479797bca5d05e81099", "patch": "@@ -853,26 +853,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else {\n                                     sp\n                                 };\n-                                // FIXME: contrast `t.def_id` against `param.bounds` to not suggest\n-                                // traits already there. That can happen when the cause is that\n-                                // we're in a const scope or associated function used as a method.\n-                                err.span_suggestions(\n-                                    sp,\n-                                    &message(format!(\n-                                        \"restrict type parameter `{}` with\",\n-                                        param.name.ident(),\n-                                    )),\n-                                    candidates.iter().map(|t| {\n-                                        format!(\n-                                            \"{}{} {}{}\",\n+                                let trait_def_ids: FxHashSet<DefId> = param\n+                                    .bounds\n+                                    .iter()\n+                                    .filter_map(|bound| bound.trait_def_id())\n+                                    .collect();\n+                                if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n+                                    err.span_suggestions(\n+                                        sp,\n+                                        &message(format!(\n+                                            \"restrict type parameter `{}` with\",\n                                             param.name.ident(),\n-                                            if impl_trait { \" +\" } else { \":\" },\n-                                            self.tcx.def_path_str(t.def_id),\n-                                            if has_bounds.is_some() { \" + \" } else { \"\" },\n-                                        )\n-                                    }),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                                        )),\n+                                        candidates.iter().map(|t| {\n+                                            format!(\n+                                                \"{}{} {}{}\",\n+                                                param.name.ident(),\n+                                                if impl_trait { \" +\" } else { \":\" },\n+                                                self.tcx.def_path_str(t.def_id),\n+                                                if has_bounds.is_some() { \" + \" } else { \"\" },\n+                                            )\n+                                        }),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                                 suggested = true;\n                             }\n                             Node::Item(hir::Item {"}, {"sha": "bec922b0721b978cae319d2b0d0962e94e79e057", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs?ref=56ad8bcfe0025618d35c8479797bca5d05e81099", "patch": "@@ -0,0 +1,11 @@\n+trait Adapter {\n+    const LINKS: usize;\n+}\n+\n+struct Foo<A: Adapter> {\n+    adapter: A,\n+    links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n+    //~^ ERROR: no associated item named `LINKS` found\n+}\n+\n+fn main() {}"}, {"sha": "ff1ad4c006e786e569f5e52b4d77b7d1146b7c11", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr?ref=56ad8bcfe0025618d35c8479797bca5d05e81099", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no associated item named `LINKS` found for type parameter `A` in the current scope\n+  --> $DIR/associated-item-duplicate-bounds.rs:7:21\n+   |\n+LL |     links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n+   |                     ^^^^^ associated item not found in `A`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "5e8d487f41658571ab75b7a5971307c84b0d110d", "filename": "src/test/ui/issues/issue-39559.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr?ref=56ad8bcfe0025618d35c8479797bca5d05e81099", "patch": "@@ -5,10 +5,6 @@ LL |     entries: [T; D::dim()],\n    |                     ^^^ function or associated item not found in `D`\n    |\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n-help: the following trait defines an item `dim`, perhaps you need to restrict type parameter `D` with it:\n-   |\n-LL | pub struct Vector<T, D: Dim + Dim> {\n-   |                      ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "89b36848a2897c2d6ebc4c4fd3cf38f7d5a12fcc", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ad8bcfe0025618d35c8479797bca5d05e81099/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=56ad8bcfe0025618d35c8479797bca5d05e81099", "patch": "@@ -61,7 +61,10 @@ error[E0599]: no method named `is_str` found for type parameter `T` in the curre\n   --> $DIR/issue-7575.rs:70:7\n    |\n LL |     t.is_str()\n-   |       ^^^^^^ this is an associated function, not a method\n+   |     --^^^^^^--\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: disambiguate the method call for the candidate: `ManyImplTrait::is_str(t)`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `ManyImplTrait`\n@@ -70,14 +73,6 @@ note: the candidate is defined in the trait `ManyImplTrait`\n LL |     fn is_str() -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n-help: disambiguate the method call for the candidate\n-   |\n-LL |     ManyImplTrait::is_str(t)\n-   |\n-help: the following trait defines an item `is_str`, perhaps you need to restrict type parameter `T` with it:\n-   |\n-LL | fn param_bound<T: ManyImplTrait + ManyImplTrait>(t: T) -> bool {\n-   |                ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}