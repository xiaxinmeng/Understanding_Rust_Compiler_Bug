{"sha": "ab9347542c4f584952a5f554a18e1f92188b2fdb", "node_id": "C_kwDOAAsO6NoAKGFiOTM0NzU0MmM0ZjU4NDk1MmE1ZjU1NGExOGUxZjkyMTg4YjJmZGI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-28T14:11:38Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-29T10:52:31Z"}, "message": "Consider macro files when replacing nodes", "tree": {"sha": "4312036caf6af247194fdcb6424d79af066e0404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4312036caf6af247194fdcb6424d79af066e0404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab9347542c4f584952a5f554a18e1f92188b2fdb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmR0hA8ACgkQ4laYqTBY\nYXE6/g//VH8Fudn4pmvAPBqhWFI8FCYKsB4SloDycoQ3hidyndCn3rzsG9JTQFPl\nxUntI6UDoYw33WkagqAQRijMMIUJYMgNqkuZD+waWH6woWafl0NDpEjboFqvuQ7R\nD1rpEtCw+2C4TSh0qtiBEHqmpifanHch55733Ta2nM48iYecpLd3hVPNkG6zo5hb\nLVMjlCQ8ZZIo3vASqIlI8Wjh9gL3w4C3hm5L7D7lyRbEVPjDOtgMU7Ilf9bqIfEY\ncGwP7L9waBNMzB9BwIBp2VWwL62RUsdGrgq3c01RNbMMmS5oKiHRGnynDn0bjAHT\nCkgolSDsJy7pvIrlmx0Tefqi8dWW8Xgb5iFLU1vKryV154mBwABBZ4nsmyINxZAg\nUOQqzubM9YDk6C8JnQkG4/lkDxC0p1hG9u9eNkUh09TkoQbVIr9h+1K4Oq07nvyt\nu9lUkNWGXmHg8Az0i73S763+jDmLFOYxsrx4VEEC1O18Pl/zCZsZyfn4uDW3145W\nBWRjP0X/bdK7mMmKruM2ovhOCjDSipIkRNnOyzle4JMb8XYdbx2tD3Uo0giHxl78\nRWb9I3yORFYwQ1k7mza+8Gzfzd/mGnmlZD9um3XjBEVplGqQG10/oQkwAJj0Aipz\nmNYPZChRHqBTHEiW21JEJLiy8ADIlr1NjrGyFauZxV/Kvk9M+6g=\n=XpNP\n-----END PGP SIGNATURE-----", "payload": "tree 4312036caf6af247194fdcb6424d79af066e0404\nparent 505fd09f9e020b096d014e68b667268e743c2dd6\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1685283098 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1685357551 +0900\n\nConsider macro files when replacing nodes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9347542c4f584952a5f554a18e1f92188b2fdb", "html_url": "https://github.com/rust-lang/rust/commit/ab9347542c4f584952a5f554a18e1f92188b2fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab9347542c4f584952a5f554a18e1f92188b2fdb/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "505fd09f9e020b096d014e68b667268e743c2dd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/505fd09f9e020b096d014e68b667268e743c2dd6", "html_url": "https://github.com/rust-lang/rust/commit/505fd09f9e020b096d014e68b667268e743c2dd6"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "ce31d1d891d1b4d4a30bea7d67917e03b62baff2", "filename": "crates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs", "status": "modified", "additions": 90, "deletions": 5, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ab9347542c4f584952a5f554a18e1f92188b2fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9347542c4f584952a5f554a18e1f92188b2fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs?ref=ab9347542c4f584952a5f554a18e1f92188b2fdb", "patch": "@@ -52,6 +52,9 @@ pub(crate) fn convert_named_struct_to_tuple_struct(\n     acc: &mut Assists,\n     ctx: &AssistContext<'_>,\n ) -> Option<()> {\n+    // XXX: We don't currently provide this assist for struct definitions inside macros, but if we\n+    // are to lift this limitation, don't forget to make `edit_struct_def()` consider macro files\n+    // too.\n     let strukt = ctx.find_node_at_offset::<Either<ast::Struct, ast::Variant>>()?;\n     let field_list = strukt.as_ref().either(|s| s.field_list(), |v| v.field_list())?;\n     let record_fields = match field_list {\n@@ -62,12 +65,11 @@ pub(crate) fn convert_named_struct_to_tuple_struct(\n         Either::Left(s) => Either::Left(ctx.sema.to_def(s)?),\n         Either::Right(v) => Either::Right(ctx.sema.to_def(v)?),\n     };\n-    let target = strukt.as_ref().either(|s| s.syntax(), |v| v.syntax()).text_range();\n \n     acc.add(\n         AssistId(\"convert_named_struct_to_tuple_struct\", AssistKind::RefactorRewrite),\n         \"Convert to tuple struct\",\n-        target,\n+        strukt.syntax().text_range(),\n         |edit| {\n             edit_field_references(ctx, edit, record_fields.fields());\n             edit_struct_references(ctx, edit, strukt_def);\n@@ -82,6 +84,8 @@ fn edit_struct_def(\n     strukt: &Either<ast::Struct, ast::Variant>,\n     record_fields: ast::RecordFieldList,\n ) {\n+    // Note that we don't need to consider macro files in this function because this this is\n+    // currently not triggered for struct definitions inside macro calls.\n     let tuple_fields = record_fields\n         .fields()\n         .filter_map(|f| Some(ast::make::tuple_field(f.visibility(), f.ty()?)));\n@@ -141,8 +145,13 @@ fn edit_struct_references(\n         match_ast! {\n             match node {\n                 ast::RecordPat(record_struct_pat) => {\n+                    let Some(fr) = ctx.sema.original_range_opt(record_struct_pat.syntax()) else {\n+                        // We've found the node to replace, so we should return `Some` even if the\n+                        // replacement failed to stop the ancestor node traversal.\n+                        return Some(());\n+                    };\n                     edit.replace(\n-                        record_struct_pat.syntax().text_range(),\n+                        fr.range,\n                         ast::make::tuple_struct_pat(\n                             record_struct_pat.path()?,\n                             record_struct_pat\n@@ -154,14 +163,18 @@ fn edit_struct_references(\n                     );\n                 },\n                 ast::RecordExpr(record_expr) => {\n+                    let Some(fr) = ctx.sema.original_range_opt(record_expr.syntax()) else {\n+                        // See the comment above.\n+                        return Some(());\n+                    };\n                     let path = record_expr.path()?;\n                     let args = record_expr\n                         .record_expr_field_list()?\n                         .fields()\n                         .filter_map(|f| f.expr())\n                         .join(\", \");\n \n-                    edit.replace(record_expr.syntax().text_range(), format!(\"{path}({args})\"));\n+                    edit.replace(fr.range, format!(\"{path}({args})\"));\n                 },\n                 _ => return None,\n             }\n@@ -199,7 +212,7 @@ fn edit_field_references(\n                 if let Some(name_ref) = r.name.as_name_ref() {\n                     // Only edit the field reference if it's part of a `.field` access\n                     if name_ref.syntax().parent().and_then(ast::FieldExpr::cast).is_some() {\n-                        edit.replace(name_ref.syntax().text_range(), index.to_string());\n+                        edit.replace(r.range, index.to_string());\n                     }\n                 }\n             }\n@@ -813,6 +826,78 @@ use crate::{A::Variant, Inner};\n fn f() {\n     let a = Variant(Inner);\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn field_access_inside_macro_call() {\n+        check_assist(\n+            convert_named_struct_to_tuple_struct,\n+            r#\"\n+struct $0Struct {\n+    inner: i32,\n+}\n+\n+macro_rules! id {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test(c: Struct) {\n+    id!(c.inner);\n+}\n+\"#,\n+            r#\"\n+struct Struct(i32);\n+\n+macro_rules! id {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test(c: Struct) {\n+    id!(c.0);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn struct_usage_inside_macro_call() {\n+        check_assist(\n+            convert_named_struct_to_tuple_struct,\n+            r#\"\n+macro_rules! id {\n+    ($($t:tt)*) => { $($t)* }\n+}\n+\n+struct $0Struct {\n+    inner: i32,\n+}\n+\n+fn test() {\n+    id! {\n+        let s = Struct {\n+            inner: 42,\n+        };\n+        let Struct { inner: value } = s;\n+        let Struct { inner } = s;\n+    }\n+}\n+\"#,\n+            r#\"\n+macro_rules! id {\n+    ($($t:tt)*) => { $($t)* }\n+}\n+\n+struct Struct(i32);\n+\n+fn test() {\n+    id! {\n+        let s = Struct(42);\n+        let Struct(value) = s;\n+        let Struct(inner) = s;\n+    }\n+}\n \"#,\n         );\n     }"}]}