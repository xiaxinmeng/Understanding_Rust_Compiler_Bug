{"sha": "a2ee637be61ef1848e2f5c47a6d3a202057e992f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZWU2MzdiZTYxZWYxODQ4ZTJmNWM0N2E2ZDNhMjAyMDU3ZTk5MmY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-17T14:24:57Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-17T14:24:57Z"}, "message": "added test and fixed negativity check in Partial{Eq, Ord} impl", "tree": {"sha": "c36157dcf4c69e6ad3208b12df37f2451fede4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c36157dcf4c69e6ad3208b12df37f2451fede4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ee637be61ef1848e2f5c47a6d3a202057e992f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ee637be61ef1848e2f5c47a6d3a202057e992f", "html_url": "https://github.com/rust-lang/rust/commit/a2ee637be61ef1848e2f5c47a6d3a202057e992f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ee637be61ef1848e2f5c47a6d3a202057e992f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d0ae8739c4521f089ac5d2ec3e2a023f7f215f", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d0ae8739c4521f089ac5d2ec3e2a023f7f215f", "html_url": "https://github.com/rust-lang/rust/commit/59d0ae8739c4521f089ac5d2ec3e2a023f7f215f"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "0f212e3b8ef3a629efea3186a1bcb93a78a3f811", "filename": "src/consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee637be61ef1848e2f5c47a6d3a202057e992f/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee637be61ef1848e2f5c47a6d3a202057e992f/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=a2ee637be61ef1848e2f5c47a6d3a202057e992f", "patch": "@@ -109,7 +109,7 @@ impl PartialEq for ConstantVariant {\n             (&ConstantByte(l), &ConstantByte(r)) => l == r,\n             (&ConstantChar(l), &ConstantChar(r)) => l == r,\n             (&ConstantInt(lv, lty), &ConstantInt(rv, rty)) => lv == rv &&\n-               is_negative(lty) == is_negative(rty),\n+               (is_negative(lty) & (lv != 0)) == (is_negative(rty) & (rv != 0)),\n             (&ConstantFloat(ref ls, lw), &ConstantFloat(ref rs, rw)) =>\n                 if match (lw, rw) {\n                     (FwAny, _) | (_, FwAny) | (Fw32, Fw32) | (Fw64, Fw64) => true,\n@@ -138,7 +138,8 @@ impl PartialOrd for ConstantVariant {\n             (&ConstantByte(ref l), &ConstantByte(ref r)) => Some(l.cmp(r)),\n             (&ConstantChar(ref l), &ConstantChar(ref r)) => Some(l.cmp(r)),\n             (&ConstantInt(ref lv, lty), &ConstantInt(ref rv, rty)) =>\n-                Some(match (is_negative(lty), is_negative(rty)) {\n+                Some(match (is_negative(lty) && *lv != 0,\n+                            is_negative(rty) && *rv != 0) {\n                     (true, true) => lv.cmp(rv),\n                     (false, false) => rv.cmp(lv),\n                     (true, false) => Greater,"}, {"sha": "3b05dd67ad5fd2e8cd6e41d01292b6c10486abed", "filename": "tests/consts.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee637be61ef1848e2f5c47a6d3a202057e992f/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee637be61ef1848e2f5c47a6d3a202057e992f/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=a2ee637be61ef1848e2f5c47a6d3a202057e992f", "patch": "@@ -21,27 +21,53 @@ fn ctx() -> &'static Context<'static, 'static> {\n     }\n }\n \n-fn lit(l: Lit_) -> Expr {\n+fn spanned<T>(t: T) -> Spanned<T> {\n+    Spanned{ node: t, span: COMMAND_LINE_SP }\n+}\n+\n+fn expr(n: Expr_) -> Expr {\n     Expr{\n         id: 1,\n-        node: ExprLit(P(Spanned{\n-            node: l,\n-            span: COMMAND_LINE_SP,\n-        })),\n+        node: n,\n         span: COMMAND_LINE_SP,\n     }\n }\n \n+fn lit(l: Lit_) -> Expr {\n+    expr(ExprLit(P(spanned(l))))\n+}\n+\n+fn binop(op: BinOp_, l: Expr, r: Expr) -> Expr {\n+    expr(ExprBinary(spanned(op), P(l), P(r)))\n+}\n+\n fn check(expect: ConstantVariant, expr: &Expr) {\n     assert_eq!(Some(expect), constant(ctx(), expr).map(|x| x.constant))\n }\n \n+const TRUE : ConstantVariant = ConstantBool(true);\n+const FALSE : ConstantVariant = ConstantBool(false);\n+const ZERO : ConstantVariant = ConstantInt(0, UnsuffixedIntLit(Plus));\n+\n #[test]\n fn test_lit() {\n-    check(ConstantBool(true), &lit(LitBool(true)));\n-    check(ConstantBool(false), &lit(LitBool(false)));\n-    check(ConstantInt(0, UnsuffixedIntLit(Plus)),\n-            &lit(LitInt(0, UnsuffixedIntLit(Plus))));\n+    check(TRUE, &lit(LitBool(true)));\n+    check(FALSE, &lit(LitBool(false)));\n+    check(ZERO, &lit(LitInt(0, UnsuffixedIntLit(Plus))));\n     check(ConstantStr(\"cool!\".into(), CookedStr), &lit(LitStr(\n         InternedString::new(\"cool!\"), CookedStr)));\n }\n+\n+#[test]\n+fn test_ops() {\n+    check(TRUE, &binop(BiOr, lit(LitBool(false)), lit(LitBool(true))));\n+    check(FALSE, &binop(BiAnd, lit(LitBool(false)), lit(LitBool(true))));\n+\n+    let litzero = lit(LitInt(0, UnsuffixedIntLit(Plus)));\n+    check(TRUE, &binop(BiEq, litzero.clone(), litzero.clone()));\n+    check(TRUE, &binop(BiGe, litzero.clone(), litzero.clone()));\n+    check(TRUE, &binop(BiLe, litzero.clone(), litzero.clone()));\n+    check(FALSE, &binop(BiNe, litzero.clone(), litzero.clone()));\n+    check(FALSE, &binop(BiGt, litzero.clone(), litzero.clone()));\n+    check(FALSE, &binop(BiLt, litzero.clone(), litzero.clone()));\n+}"}]}