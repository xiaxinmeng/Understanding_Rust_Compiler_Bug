{"sha": "6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOWI5MGQwNmE0NTVhZjA4ZGE3ZWE2Njk3N2RjNGQ3ZDFiNGNlMWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-02T10:57:27Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-02T10:57:27Z"}, "message": "Be a little more clever about picking columns to match on in trans_alt\n\nThis should result in slightly more efficient matching of 'complex'\npatterns with multiple discriminants in them.", "tree": {"sha": "a1b43fb6e6140ce7384bdaf2a439e6b4d287c4aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b43fb6e6140ce7384bdaf2a439e6b4d287c4aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b", "html_url": "https://github.com/rust-lang/rust/commit/6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "html_url": "https://github.com/rust-lang/rust/commit/f8fa574864a5bd54752fc198438f8c53a8ed5ef0"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "755dc860793bc4cac75ec2fee4b643ddb6e905b0", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=6c9b90d06a455af08da7ea66977dc4d7d1b4ce1b", "patch": "@@ -228,7 +228,37 @@ fn any_box_pat(m: &match, col: uint) -> bool {\n }\n \n type exit_node = {bound: bind_map, from: BasicBlockRef, to: BasicBlockRef};\n-type mk_fail = fn() -> BasicBlockRef ;\n+type mk_fail = fn() -> BasicBlockRef;\n+\n+fn pick_col(m: &match) -> uint {\n+    let scores = ivec::init_elt_mut(0u, ivec::len(m.(0).pats));\n+    for br: match_branch in m {\n+        let i = 0u;\n+        for p: @ast::pat in br.pats {\n+            alt p.node {\n+              ast::pat_lit(_) | ast::pat_tag(_, _) { scores.(i) += 1u; }\n+              _ {}\n+            }\n+            i += 1u;\n+        }\n+    }\n+    let max_score = 0u;\n+    let best_col = 0u;\n+    let i = 0u;\n+    for score: uint in scores {\n+        // Irrefutable columns always go first, they'd only be duplicated in\n+        // the branches.\n+        if score == 0u { ret i; }\n+        // If no irrefutable ones are found, we pick the one with the biggest\n+        // branching factor.\n+        if score > max_score {\n+            max_score = score;\n+            best_col = i;\n+        }\n+        i += 1u;\n+    }\n+    ret best_col;\n+}\n \n fn compile_submatch(bcx: @block_ctxt, m: &match, vals: ValueRef[],\n                     f: &mk_fail, exits: &mutable exit_node[]) {\n@@ -239,10 +269,10 @@ fn compile_submatch(bcx: @block_ctxt, m: &match, vals: ValueRef[],\n         ret;\n     }\n \n-    // FIXME maybe be clever about picking a column.\n-    let col = 0u;\n+    let col = pick_col(m);\n     let val = vals.(col);\n-    let vals_left = ivec::slice(vals, 1u, ivec::len(vals));\n+    let vals_left = ivec::slice(vals, 0u, col) +\n+        ivec::slice(vals, col + 1u, ivec::len(vals));\n     let ccx = bcx.fcx.lcx.ccx;\n     let pat_id = 0;\n     for br: match_branch  in m {"}]}