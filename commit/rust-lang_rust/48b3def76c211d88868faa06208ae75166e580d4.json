{"sha": "48b3def76c211d88868faa06208ae75166e580d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YjNkZWY3NmMyMTFkODg4NjhmYWEwNjIwOGFlNzUxNjZlNTgwZDQ=", "commit": {"author": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-04-02T11:34:40Z"}, "committer": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-04-02T11:34:40Z"}, "message": "don't derive Clone, but impl it\n\naffected struct:\n - sockaddr_storage\n - sockaddr_un\n\napply the same method used for linux for:\n - bitrig/openbsd\n - freebsd\n - dragonfly", "tree": {"sha": "8c84260a4fa4932d54e6ca2d20d5451e438b79d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c84260a4fa4932d54e6ca2d20d5451e438b79d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b3def76c211d88868faa06208ae75166e580d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b3def76c211d88868faa06208ae75166e580d4", "html_url": "https://github.com/rust-lang/rust/commit/48b3def76c211d88868faa06208ae75166e580d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b3def76c211d88868faa06208ae75166e580d4/comments", "author": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf00fc4da984481a75229ce1e40f339f292d2166", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf00fc4da984481a75229ce1e40f339f292d2166", "html_url": "https://github.com/rust-lang/rust/commit/cf00fc4da984481a75229ce1e40f339f292d2166"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "daaae86f1a68b68f85b4919374ab27ae13e3e922", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48b3def76c211d88868faa06208ae75166e580d4/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b3def76c211d88868faa06208ae75166e580d4/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=48b3def76c211d88868faa06208ae75166e580d4", "patch": "@@ -863,13 +863,16 @@ pub mod types {\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n@@ -917,11 +920,14 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n@@ -1125,13 +1131,16 @@ pub mod types {\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n@@ -1179,11 +1188,14 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n@@ -1405,13 +1417,16 @@ pub mod types {\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_pad2: i64,\n                     pub __ss_pad3: [u8; 240],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n@@ -1459,11 +1474,14 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,"}]}