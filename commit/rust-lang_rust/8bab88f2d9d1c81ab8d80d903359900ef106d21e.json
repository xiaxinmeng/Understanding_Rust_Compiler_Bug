{"sha": "8bab88f2d9d1c81ab8d80d903359900ef106d21e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYWI4OGYyZDlkMWM4MWFiOGQ4MGQ5MDMzNTk5MDBlZjEwNmQyMWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T11:19:27Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "de-fatalize outline module parsing", "tree": {"sha": "900f257cffb0b4d1b7c933bc6224a14906109f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/900f257cffb0b4d1b7c933bc6224a14906109f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bab88f2d9d1c81ab8d80d903359900ef106d21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bab88f2d9d1c81ab8d80d903359900ef106d21e", "html_url": "https://github.com/rust-lang/rust/commit/8bab88f2d9d1c81ab8d80d903359900ef106d21e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bab88f2d9d1c81ab8d80d903359900ef106d21e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9e1b2661159a9c63d47ef181c259465b90dca6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e1b2661159a9c63d47ef181c259465b90dca6d", "html_url": "https://github.com/rust-lang/rust/commit/b9e1b2661159a9c63d47ef181c259465b90dca6d"}], "stats": {"total": 79, "additions": 52, "deletions": 27}, "files": [{"sha": "e3077b9897c18fcd08712eda6f611a2b4d735b76", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -2153,7 +2153,7 @@ impl FnRetTy {\n /// Module declaration.\n ///\n /// E.g., `mod foo;` or `mod foo { .. }`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token"}, {"sha": "8f99d88b8e47aa5b061b3febdf1250a4854f42c9", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::attr;\n use rustc_ast::token::{self, TokenKind};\n use rustc_errors::{struct_span_err, PResult};\n use rustc_session::parse::ParseSess;\n-use rustc_span::source_map::{FileName, Span, DUMMY_SP};\n+use rustc_span::source_map::{FileName, Span};\n use rustc_span::symbol::sym;\n \n use std::path::{self, Path, PathBuf};\n@@ -24,7 +24,7 @@ pub struct ModulePath<'a> {\n // Public for rustfmt usage.\n pub struct ModulePathSuccess {\n     pub path: PathBuf,\n-    pub directory_ownership: DirectoryOwnership,\n+    pub ownership: DirectoryOwnership,\n }\n \n impl<'a> Parser<'a> {\n@@ -45,16 +45,13 @@ impl<'a> Parser<'a> {\n         let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n-                let ModulePathSuccess { path, directory_ownership } = submod_path(\n-                    self.sess,\n-                    id,\n-                    &attrs,\n-                    self.directory.ownership,\n-                    &self.directory.path,\n-                )?;\n-                eval_src_mod(self.sess, self.cfg_mods, path, directory_ownership, id)?\n+                let dir = &self.directory;\n+                submod_path(self.sess, id, &attrs, dir.ownership, &dir.path)\n+                    .and_then(|r| eval_src_mod(self.sess, self.cfg_mods, r.path, r.ownership, id))\n+                    .map_err(|mut err| err.emit())\n+                    .unwrap_or_default()\n             } else {\n-                (ast::Mod { inner: DUMMY_SP, items: Vec::new(), inline: false }, Vec::new())\n+                Default::default()\n             }\n         } else {\n             let old_directory = self.directory.clone();\n@@ -162,12 +159,12 @@ pub fn push_directory(\n fn submod_path<'a>(\n     sess: &'a ParseSess,\n     id: ast::Ident,\n-    outer_attrs: &[Attribute],\n-    directory_ownership: DirectoryOwnership,\n+    attrs: &[Attribute],\n+    ownership: DirectoryOwnership,\n     dir_path: &Path,\n ) -> PResult<'a, ModulePathSuccess> {\n-    if let Some(path) = submod_path_from_attr(outer_attrs, dir_path) {\n-        let directory_ownership = match path.file_name().and_then(|s| s.to_str()) {\n+    if let Some(path) = submod_path_from_attr(attrs, dir_path) {\n+        let ownership = match path.file_name().and_then(|s| s.to_str()) {\n             // All `#[path]` files are treated as though they are a `mod.rs` file.\n             // This means that `mod foo;` declarations inside `#[path]`-included\n             // files are siblings,\n@@ -178,16 +175,16 @@ fn submod_path<'a>(\n             Some(_) => DirectoryOwnership::Owned { relative: None },\n             _ => DirectoryOwnership::UnownedViaMod,\n         };\n-        return Ok(ModulePathSuccess { directory_ownership, path });\n+        return Ok(ModulePathSuccess { ownership, path });\n     }\n \n-    let relative = match directory_ownership {\n+    let relative = match ownership {\n         DirectoryOwnership::Owned { relative } => relative,\n         DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n     };\n     let ModulePath { path_exists, name, result } =\n         default_submod_path(sess, id, relative, dir_path);\n-    match directory_ownership {\n+    match ownership {\n         DirectoryOwnership::Owned { .. } => Ok(result?),\n         DirectoryOwnership::UnownedViaBlock => {\n             let _ = result.map_err(|mut err| err.cancel());\n@@ -300,11 +297,11 @@ pub fn default_submod_path<'a>(\n     let result = match (default_exists, secondary_exists) {\n         (true, false) => Ok(ModulePathSuccess {\n             path: default_path,\n-            directory_ownership: DirectoryOwnership::Owned { relative: Some(id) },\n+            ownership: DirectoryOwnership::Owned { relative: Some(id) },\n         }),\n         (false, true) => Ok(ModulePathSuccess {\n             path: secondary_path,\n-            directory_ownership: DirectoryOwnership::Owned { relative: None },\n+            ownership: DirectoryOwnership::Owned { relative: None },\n         }),\n         (false, false) => {\n             let mut err = struct_span_err!("}, {"sha": "7b182421d34e3c0b1d7f1f2ccf95e876ad1f2f23", "filename": "src/test/ui/mod/mod_file_disambig.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.rs?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -2,4 +2,5 @@ mod mod_file_disambig_aux; //~ ERROR file for module `mod_file_disambig_aux` fou\n \n fn main() {\n     assert_eq!(mod_file_aux::bar(), 10);\n+    //~^ ERROR failed to resolve: use of undeclared type or module `mod_file_aux`\n }"}, {"sha": "230bfa79916dfedf7e2a6395043ec6b8247ae705", "filename": "src/test/ui/mod/mod_file_disambig.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -6,6 +6,13 @@ LL | mod mod_file_disambig_aux;\n    |\n    = help: delete or rename one of them to remove the ambiguity\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: use of undeclared type or module `mod_file_aux`\n+  --> $DIR/mod_file_disambig.rs:4:16\n+   |\n+LL |     assert_eq!(mod_file_aux::bar(), 10);\n+   |                ^^^^^^^^^^^^ use of undeclared type or module `mod_file_aux`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0584`.\n+Some errors have detailed explanations: E0433, E0584.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "1ae36a1f7605eb1a47403e393af05314b6f02a7c", "filename": "src/test/ui/parser/circular_modules_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.rs?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -6,5 +6,5 @@ pub fn hi_str() -> String {\n }\n \n fn main() {\n-    circular_modules_hello::say_hello();\n+    circular_modules_hello::say_hello(); //~ ERROR cannot find function `say_hello` in module\n }"}, {"sha": "ca84f2d285403228627763c484684453ea4919ac", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -4,5 +4,17 @@ error: circular modules: $DIR/circular_modules_hello.rs -> $DIR/circular_modules\n LL | mod circular_modules_hello;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0425]: cannot find function `say_hello` in module `circular_modules_hello`\n+  --> $DIR/circular_modules_main.rs:9:29\n+   |\n+LL |     circular_modules_hello::say_hello();\n+   |                             ^^^^^^^^^ not found in `circular_modules_hello`\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use circular_modules_hello::say_hello;\n+   |\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "aee778d1013a9f672a452329f47cacbb6aee30a7", "filename": "src/test/ui/parser/mod_file_not_exist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.rs?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -5,4 +5,5 @@ mod not_a_real_file; //~ ERROR file not found for module `not_a_real_file`\n \n fn main() {\n     assert_eq!(mod_file_aux::bar(), 10);\n+    //~^ ERROR failed to resolve: use of undeclared type or module `mod_file_aux`\n }"}, {"sha": "c298c51c4f870cfdd014fc47bb4503fd4eca19db", "filename": "src/test/ui/parser/mod_file_not_exist.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bab88f2d9d1c81ab8d80d903359900ef106d21e/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr?ref=8bab88f2d9d1c81ab8d80d903359900ef106d21e", "patch": "@@ -6,6 +6,13 @@ LL | mod not_a_real_file;\n    |\n    = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\"\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: use of undeclared type or module `mod_file_aux`\n+  --> $DIR/mod_file_not_exist.rs:7:16\n+   |\n+LL |     assert_eq!(mod_file_aux::bar(), 10);\n+   |                ^^^^^^^^^^^^ use of undeclared type or module `mod_file_aux`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0583`.\n+Some errors have detailed explanations: E0433, E0583.\n+For more information about an error, try `rustc --explain E0433`."}]}