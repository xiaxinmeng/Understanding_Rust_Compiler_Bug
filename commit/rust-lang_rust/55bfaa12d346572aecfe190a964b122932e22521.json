{"sha": "55bfaa12d346572aecfe190a964b122932e22521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YmZhYTEyZDM0NjU3MmFlY2ZlMTkwYTk2NGIxMjI5MzJlMjI1MjE=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-02-05T17:54:13Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-02-05T19:48:46Z"}, "message": "Fixed macro edge case for `semicolon_if_nothing_returned lint`", "tree": {"sha": "d0fc0eae7f9601eed9c3735032f9ddef216b95fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0fc0eae7f9601eed9c3735032f9ddef216b95fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55bfaa12d346572aecfe190a964b122932e22521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55bfaa12d346572aecfe190a964b122932e22521", "html_url": "https://github.com/rust-lang/rust/commit/55bfaa12d346572aecfe190a964b122932e22521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55bfaa12d346572aecfe190a964b122932e22521/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f907986580887ba8b0f30d91792bae81b394ab91", "url": "https://api.github.com/repos/rust-lang/rust/commits/f907986580887ba8b0f30d91792bae81b394ab91", "html_url": "https://github.com/rust-lang/rust/commit/f907986580887ba8b0f30d91792bae81b394ab91"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "22cd10ced189ff149a7c87f421f126ef898ac1f3", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55bfaa12d346572aecfe190a964b122932e22521/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55bfaa12d346572aecfe190a964b122932e22521/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=55bfaa12d346572aecfe190a964b122932e22521", "patch": "@@ -1,9 +1,8 @@\n-use crate::utils::{match_def_path, paths, span_lint_and_then, sugg};\n+use crate::utils::{in_macro, span_lint_and_then, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -20,13 +19,13 @@ declare_clippy_lint! {\n     ///\n     /// ```rust\n     /// fn main() {\n-    /// println!(\"Hello world\")\n+    ///     println!(\"Hello world\")\n     /// }\n     /// ```\n     /// Use instead:\n     /// ```rust\n     /// fn main() {\n-    /// println!(\"Hello world\");\n+    ///     println!(\"Hello world\");\n     /// }\n     /// ```\n     pub SEMICOLON_IF_NOTHING_RETURNED,\n@@ -39,10 +38,19 @@ declare_lint_pass!(SemicolonIfNothingReturned => [SEMICOLON_IF_NOTHING_RETURNED]\n impl LateLintPass<'_> for SemicolonIfNothingReturned {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n         if_chain! {\n+            if !in_macro(block.span);\n             if let Some(expr) = block.expr;\n             let t_expr = cx.typeck_results().expr_ty(expr);\n             if t_expr.is_unit();\n             then {\n+                match expr.kind {\n+                    ExprKind::Loop(..) | \n+                    ExprKind::Match(..) | \n+                    ExprKind::Block(..) | \n+                    ExprKind::If(..) if !in_macro(expr.span) => return,\n+                   _ => (),\n+                }\n+\n                 let sugg = sugg::Sugg::hir(cx, &expr, \"..\");\n                 let suggestion = format!(\"{0};\", sugg);\n                 span_lint_and_then("}, {"sha": "2c07cc9df40d6a138cf1222b134888bd943f3255", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/55bfaa12d346572aecfe190a964b122932e22521/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55bfaa12d346572aecfe190a964b122932e22521/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=55bfaa12d346572aecfe190a964b122932e22521", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::semicolon_if_nothing_returned)]\n+#![feature(label_break_value)]\n \n fn get_unit() {}\n \n@@ -11,8 +12,37 @@ fn hello() {\n     get_unit()\n }\n \n+fn basic101(x: i32) {\n+    let y: i32;\n+    y = x + 1\n+}\n+\n // this is fine\n fn print_sum(a: i32, b: i32) {\n     println!(\"{}\", a + b);\n     assert_eq!(true, false);\n }\n+\n+fn foo(x: i32) {\n+    let y: i32;\n+    if x < 1 {\n+        y = 4;\n+    } else {\n+        y = 5;\n+    }\n+}\n+\n+fn bar(x: i32) {\n+    let y: i32;\n+    match x {\n+        1 => y = 4,\n+        _ => y = 32,\n+    }\n+}\n+\n+fn foobar(x: i32) {\n+    let y: i32;\n+    'label: {\n+        y = x + 1;\n+    }\n+}"}, {"sha": "6026320f4b47d9703528ab973f86f89352440af1", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55bfaa12d346572aecfe190a964b122932e22521/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55bfaa12d346572aecfe190a964b122932e22521/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=55bfaa12d346572aecfe190a964b122932e22521", "patch": "@@ -1,5 +1,5 @@\n error: add `;` to terminate block\n-  --> $DIR/semicolon_if_nothing_returned.rs:7:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:8:5\n    |\n LL |     println!(\"Hello\")\n    |     ^^^^^^^^^^^^^^^^^\n@@ -8,10 +8,16 @@ LL |     println!(\"Hello\")\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: add `;` to terminate block\n-  --> $DIR/semicolon_if_nothing_returned.rs:11:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:12:5\n    |\n LL |     get_unit()\n    |     ^^^^^^^^^^ help: add `;`: `get_unit();`\n \n-error: aborting due to 2 previous errors\n+error: add `;` to terminate block\n+  --> $DIR/semicolon_if_nothing_returned.rs:17:5\n+   |\n+LL |     y = x + 1\n+   |     ^^^^^^^^^ help: add `;`: `y = x + 1;`\n+\n+error: aborting due to 3 previous errors\n "}]}