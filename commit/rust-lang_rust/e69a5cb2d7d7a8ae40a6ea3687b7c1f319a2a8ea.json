{"sha": "e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OWE1Y2IyZDdkN2E4YWU0MGE2ZWEzNjg3YjdjMWYzMTlhMmE4ZWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-12T09:54:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-12T09:54:51Z"}, "message": "Rollup merge of #56425 - scottmcm:redo-vec-set_len-docs, r=Centril\n\nRedo the docs for Vec::set_len\n\nInspired by the [recent conversation on IRLO](https://internals.rust-lang.org/t/make-vec-set-len-enforce-the-len-cap-invariant/8927/23?u=scottmcm).\n\nThis is just my first stab at this; suggestions welcome.", "tree": {"sha": "c2710fd1d04802eb92bcef10facef4ed041f6c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2710fd1d04802eb92bcef10facef4ed041f6c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOblsCRBK7hj4Ov3rIwAAdHIIAGVModCIgLBhaL8kQ6vk7Ol6\nvske0/on31COYc5q1tPzInuivIRbZelwtVZQ3gdm0m2qvL9QMI82KeaOzqCgZq5D\nymBL+u720kljy/4hwnQiBvCgmTcyoCQ0yHIlR2iOG+xQr+d9jqScH6mh3/wjXu02\nXpZxNo/IbmBxxJe7DM7IxGFu4romQU/iC1GEn84Vtwe7GYvY2z0/y8gCdXLh1C2A\n30pv4uCA1fKEidPO41pkvj5B6ZBpX+BS+fQBcuhEdiROOaWvkOzyvHhQz6DmQYbU\n0uM+ddRlC7sx8FksRxnkwSsk74CifOhTyV8d9PG/E4FeZP/snjOef7ggub/U5Qw=\n=4Olq\n-----END PGP SIGNATURE-----\n", "payload": "tree c2710fd1d04802eb92bcef10facef4ed041f6c15\nparent 0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17\nparent 986e49da04fbe2543267561eb8326765c9f48195\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547286891 +0100\ncommitter GitHub <noreply@github.com> 1547286891 +0100\n\nRollup merge of #56425 - scottmcm:redo-vec-set_len-docs, r=Centril\n\nRedo the docs for Vec::set_len\n\nInspired by the [recent conversation on IRLO](https://internals.rust-lang.org/t/make-vec-set-len-enforce-the-len-cap-invariant/8927/23?u=scottmcm).\n\nThis is just my first stab at this; suggestions welcome.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea", "html_url": "https://github.com/rust-lang/rust/commit/e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "html_url": "https://github.com/rust-lang/rust/commit/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17"}, {"sha": "986e49da04fbe2543267561eb8326765c9f48195", "url": "https://api.github.com/repos/rust-lang/rust/commits/986e49da04fbe2543267561eb8326765c9f48195", "html_url": "https://github.com/rust-lang/rust/commit/986e49da04fbe2543267561eb8326765c9f48195"}], "stats": {"total": 89, "additions": 62, "deletions": 27}, "files": [{"sha": "e1c5ab15bb5ce23975c33ed13096a4c6c9f2eac3", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=e69a5cb2d7d7a8ae40a6ea3687b7c1f319a2a8ea", "patch": "@@ -738,53 +738,88 @@ impl<T> Vec<T> {\n         self\n     }\n \n-    /// Sets the length of a vector.\n+    /// Forces the length of the vector to `new_len`.\n     ///\n-    /// This will explicitly set the size of the vector, without actually\n-    /// modifying its buffers, so it is up to the caller to ensure that the\n-    /// vector is actually the specified size.\n+    /// This is a low-level operation that maintains none of the normal\n+    /// invariants of the type.  Normally changing the length of a vector\n+    /// is done using one of the safe operations instead, such as\n+    /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n     ///\n-    /// # Examples\n+    /// [`truncate`]: #method.truncate\n+    /// [`resize`]: #method.resize\n+    /// [`extend`]: #method.extend-1\n+    /// [`clear`]: #method.clear\n     ///\n-    /// ```\n-    /// use std::ptr;\n+    /// # Safety\n     ///\n-    /// let mut vec = vec!['r', 'u', 's', 't'];\n+    /// - `new_len` must be less than or equal to [`capacity()`].\n+    /// - The elements at `old_len..new_len` must be initialized.\n     ///\n-    /// unsafe {\n-    ///     ptr::drop_in_place(&mut vec[3]);\n-    ///     vec.set_len(3);\n+    /// [`capacity()`]: #method.capacity\n+    ///\n+    /// # Examples\n+    ///\n+    /// This method can be useful for situations in which the vector\n+    /// is serving as a buffer for other code, particularly over FFI:\n+    ///\n+    /// ```no_run\n+    /// # #![allow(dead_code)]\n+    /// # // This is just a minimal skeleton for the doc example;\n+    /// # // don't use this as a starting point for a real library.\n+    /// # pub struct StreamWrapper { strm: *mut std::ffi::c_void }\n+    /// # const Z_OK: i32 = 0;\n+    /// # extern \"C\" {\n+    /// #     fn deflateGetDictionary(\n+    /// #         strm: *mut std::ffi::c_void,\n+    /// #         dictionary: *mut u8,\n+    /// #         dictLength: *mut usize,\n+    /// #     ) -> i32;\n+    /// # }\n+    /// # impl StreamWrapper {\n+    /// pub fn get_dictionary(&self) -> Option<Vec<u8>> {\n+    ///     // Per the FFI method's docs, \"32768 bytes is always enough\".\n+    ///     let mut dict = Vec::with_capacity(32_768);\n+    ///     let mut dict_length = 0;\n+    ///     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n+    ///     // 1. `dict_length` elements were initialized.\n+    ///     // 2. `dict_length` <= the capacity (32_768)\n+    ///     // which makes `set_len` safe to call.\n+    ///     unsafe {\n+    ///         // Make the FFI call...\n+    ///         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);\n+    ///         if r == Z_OK {\n+    ///             // ...and update the length to what was initialized.\n+    ///             dict.set_len(dict_length);\n+    ///             Some(dict)\n+    ///         } else {\n+    ///             None\n+    ///         }\n+    ///     }\n     /// }\n-    /// assert_eq!(vec, ['r', 'u', 's']);\n+    /// # }\n     /// ```\n     ///\n-    /// In this example, there is a memory leak since the memory locations\n-    /// owned by the inner vectors were not freed prior to the `set_len` call:\n+    /// While the following example is sound, there is a memory leak since\n+    /// the inner vectors were not freed prior to the `set_len` call:\n     ///\n     /// ```\n     /// let mut vec = vec![vec![1, 0, 0],\n     ///                    vec![0, 1, 0],\n     ///                    vec![0, 0, 1]];\n+    /// // SAFETY:\n+    /// // 1. `old_len..0` is empty so no elements need to be initialized.\n+    /// // 2. `0 <= capacity` always holds whatever `capacity` is.\n     /// unsafe {\n     ///     vec.set_len(0);\n     /// }\n     /// ```\n     ///\n-    /// In this example, the vector gets expanded from zero to four items\n-    /// without any memory allocations occurring, resulting in vector\n-    /// values of unallocated memory:\n-    ///\n-    /// ```\n-    /// let mut vec: Vec<char> = Vec::new();\n-    ///\n-    /// unsafe {\n-    ///     vec.set_len(4);\n-    /// }\n-    /// ```\n+    /// Normally, here, one would use [`clear`] instead to correctly drop\n+    /// the contents and thus not leak memory.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn set_len(&mut self, len: usize) {\n-        self.len = len;\n+    pub unsafe fn set_len(&mut self, new_len: usize) {\n+        self.len = new_len;\n     }\n \n     /// Removes an element from the vector and returns it."}]}