{"sha": "44628f7273052d0bb8e8218518dacab210e1fe0d", "node_id": "C_kwDOAAsO6NoAKDQ0NjI4ZjcyNzMwNTJkMGJiOGU4MjE4NTE4ZGFjYWIyMTBlMWZlMGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T15:17:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T15:17:08Z"}, "message": "Auto merge of #95169 - Smittyvb:union-test-ub, r=bjorn3\n\nDon't run UB in test suite\n\nThis splits `ui/unsafe/union.rs` to make it so only the non-UB parts are run. It also means we can do more testing of the location of error messages (which are a bit different with the THIR unsafety checker). `union-modification.rs` has no UB (according to Miri), and `union.rs` has errors (but would have UB if not for those errors).\n\nCloses #95075.\nr? `@bjorn3`", "tree": {"sha": "7aadcc54d2a00cd107473226a02e00a48a51f450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aadcc54d2a00cd107473226a02e00a48a51f450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44628f7273052d0bb8e8218518dacab210e1fe0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44628f7273052d0bb8e8218518dacab210e1fe0d", "html_url": "https://github.com/rust-lang/rust/commit/44628f7273052d0bb8e8218518dacab210e1fe0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44628f7273052d0bb8e8218518dacab210e1fe0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051d1176b786aadd7d7c048f822cb6bfab00fe03", "url": "https://api.github.com/repos/rust-lang/rust/commits/051d1176b786aadd7d7c048f822cb6bfab00fe03", "html_url": "https://github.com/rust-lang/rust/commit/051d1176b786aadd7d7c048f822cb6bfab00fe03"}, {"sha": "9477febc49e268aaac289e1a2ef348f552e1ae29", "url": "https://api.github.com/repos/rust-lang/rust/commits/9477febc49e268aaac289e1a2ef348f552e1ae29", "html_url": "https://github.com/rust-lang/rust/commit/9477febc49e268aaac289e1a2ef348f552e1ae29"}], "stats": {"total": 161, "additions": 107, "deletions": 54}, "files": [{"sha": "5c70b78df7c128047fd2c2a4283125cfa1b34180", "filename": "src/test/ui/unsafe/union-modification.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion-modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion-modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-modification.rs?ref=44628f7273052d0bb8e8218518dacab210e1fe0d", "patch": "@@ -0,0 +1,39 @@\n+// run-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#![feature(untagged_unions)]\n+\n+union Foo {\n+    bar: i8,\n+    _blah: isize,\n+    _zst: (),\n+}\n+\n+struct FooHolder {\n+    inner_foo: Foo\n+}\n+\n+fn do_nothing(_x: &mut Foo) {}\n+\n+pub fn main() {\n+    let mut foo = Foo { bar: 5 };\n+    do_nothing(&mut foo);\n+    foo.bar = 6;\n+    unsafe { foo.bar += 1; }\n+    assert_eq!(unsafe { foo.bar }, 7);\n+    unsafe {\n+        let Foo { bar: inner } = foo;\n+        assert_eq!(inner, 7);\n+    }\n+\n+    let foo = Foo { bar: 5 };\n+    let foo = if let 3 = if let true = true { 3 } else { 4 } { foo } else { foo };\n+\n+    let (_foo2, _random) = (foo, 42);\n+\n+    let mut foo_holder = FooHolder { inner_foo: Foo { bar: 5 } };\n+    foo_holder.inner_foo.bar = 4;\n+    assert_eq!(unsafe { foo_holder.inner_foo.bar }, 4);\n+    drop(foo_holder);\n+}"}, {"sha": "787714cdd2dedf16db47ac1bdcdb94adffbb7c85", "filename": "src/test/ui/unsafe/union.mir.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion.mir.stderr?ref=44628f7273052d0bb8e8218518dacab210e1fe0d", "patch": "@@ -1,16 +1,19 @@\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union.rs:61:5\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union.rs:30:20\n    |\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n+LL |         Foo { bar: _a } => {},\n+   |                    ^^ access to union field\n    |\n-   = note: `#[warn(unused_unsafe)]` on by default\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-warning: unnecessary `unsafe` block\n-  --> $DIR/union.rs:66:5\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union.rs:32:11\n    |\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n+LL |     match foo {\n+   |           ^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-warning: 2 warnings emitted\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "5fe09933cfc486cc26bf44015767268905a773d3", "filename": "src/test/ui/unsafe/union.rs", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion.rs?ref=44628f7273052d0bb8e8218518dacab210e1fe0d", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n@@ -20,61 +19,35 @@ enum PizzaTopping {\n     Pineapple,\n }\n \n-struct FooHolder {\n-    inner_foo: Foo\n-}\n-\n fn do_nothing(_x: &mut Foo) {}\n \n pub fn main() {\n     let mut foo = Foo { bar: 5 };\n     do_nothing(&mut foo);\n-    foo.bar = 6;\n-    unsafe { foo.bar += 1; }\n-    assert_eq!(unsafe { foo.bar }, 7);\n-    unsafe {\n-        let Foo { bar: inner } = foo;\n-        assert_eq!(inner, 7);\n+\n+    // This is UB, so this test isn't run\n+    match foo {\n+        Foo { bar: _a } => {}, //~ ERROR access to union field is unsafe\n+    }\n+    match foo { //[mir]~ ERROR access to union field is unsafe\n+        Foo {\n+            pizza: Pizza { //[thir]~ ERROR access to union field is unsafe\n+                topping: Some(PizzaTopping::Cheese) | Some(PizzaTopping::Pineapple) | None\n+            }\n+        } => {},\n     }\n-    let foo = if let true = true { foo } else { foo };\n \n-    unsafe {\n-        match foo {\n-            Foo { bar: _a } => {},\n-        }\n+    // MIR unsafeck incorrectly thinks that no unsafe block is needed to do these\n+    match foo {\n+        Foo { zst: () } => {}, //[thir]~ ERROR access to union field is unsafe\n     }\n-    unsafe {\n-        match foo {\n-            Foo {\n-                pizza: Pizza {\n-                    topping: Some(PizzaTopping::Cheese) | Some(PizzaTopping::Pineapple) | None\n-                }\n-            } => {},\n-        }\n+    match foo {\n+        Foo { pizza: Pizza { .. } } => {}, //[thir]~ ERROR access to union field is unsafe\n     }\n+\n     // binding to wildcard is okay\n     match foo {\n         Foo { bar: _ } => {},\n     }\n     let Foo { bar: _ } = foo;\n-    // MIR unsafeck incorrectly thinks that it is safe to do these\n-    unsafe { //[mir]~ WARNING\n-        match foo {\n-            Foo { zst: () } => {},\n-        }\n-    }\n-    unsafe { //[mir]~ WARNING\n-        match foo {\n-            Foo { pizza: Pizza { .. } } => {},\n-        }\n-    }\n-    let foo = Foo { bar: 5 };\n-    let foo = if let 3 = if let true = true { 3 } else { 4 } { foo } else { foo };\n-\n-    let (_foo2, _random) = (foo, 42);\n-\n-    let mut foo_holder = FooHolder { inner_foo: Foo { bar: 5 } };\n-    foo_holder.inner_foo.bar = 4;\n-    assert_eq!(unsafe { foo_holder.inner_foo.bar }, 4);\n-    drop(foo_holder);\n }"}, {"sha": "e1a1bd634de6b360f4c207103ac30c92014e44ad", "filename": "src/test/ui/unsafe/union.thir.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44628f7273052d0bb8e8218518dacab210e1fe0d/src%2Ftest%2Fui%2Funsafe%2Funion.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion.thir.stderr?ref=44628f7273052d0bb8e8218518dacab210e1fe0d", "patch": "@@ -0,0 +1,38 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union.rs:30:20\n+   |\n+LL |         Foo { bar: _a } => {},\n+   |                    ^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union.rs:34:20\n+   |\n+LL |               pizza: Pizza {\n+   |  ____________________^\n+LL | |                 topping: Some(PizzaTopping::Cheese) | Some(PizzaTopping::Pineapple) | None\n+LL | |             }\n+   | |_____________^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union.rs:42:20\n+   |\n+LL |         Foo { zst: () } => {},\n+   |                    ^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union.rs:45:22\n+   |\n+LL |         Foo { pizza: Pizza { .. } } => {},\n+   |                      ^^^^^^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}