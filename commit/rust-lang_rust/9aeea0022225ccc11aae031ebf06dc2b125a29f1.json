{"sha": "9aeea0022225ccc11aae031ebf06dc2b125a29f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWVhMDAyMjIyNWNjYzExYWFlMDMxZWJmMDZkYzJiMTI1YTI5ZjE=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-08-21T21:53:13Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:34Z"}, "message": "get things to work under min_specialization by leaning more heavily on #[rustc_unsafe_specialization_marker]", "tree": {"sha": "9bc21ddb0b1792082eb9ab52a311e5ea9d681bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bc21ddb0b1792082eb9ab52a311e5ea9d681bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aeea0022225ccc11aae031ebf06dc2b125a29f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aeea0022225ccc11aae031ebf06dc2b125a29f1", "html_url": "https://github.com/rust-lang/rust/commit/9aeea0022225ccc11aae031ebf06dc2b125a29f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aeea0022225ccc11aae031ebf06dc2b125a29f1/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7badb7a7f8e66f183106ae2eac2062ea6aa63f2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7badb7a7f8e66f183106ae2eac2062ea6aa63f2f", "html_url": "https://github.com/rust-lang/rust/commit/7badb7a7f8e66f183106ae2eac2062ea6aa63f2f"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "43b70a51636909395808bd84a4f6d4d78d9fcf17", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aeea0022225ccc11aae031ebf06dc2b125a29f1/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeea0022225ccc11aae031ebf06dc2b125a29f1/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=9aeea0022225ccc11aae031ebf06dc2b125a29f1", "patch": "@@ -135,6 +135,7 @@\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice)]\n #![feature(alloc_layout_extra)]\n+#![feature(trusted_random_access)]\n #![feature(try_trait)]\n #![feature(type_alias_impl_trait)]\n #![feature(associated_type_bounds)]"}, {"sha": "dcfd3ecb3d3695642c419d6bdb9fb9f49581ffed", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9aeea0022225ccc11aae031ebf06dc2b125a29f1/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeea0022225ccc11aae031ebf06dc2b125a29f1/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=9aeea0022225ccc11aae031ebf06dc2b125a29f1", "patch": "@@ -2243,11 +2243,11 @@ fn write_in_place_with_drop<T>(\n #[rustc_unsafe_specialization_marker]\n trait SourceIterMarker: SourceIter<Source: AsIntoIter> {}\n \n-impl<T> SourceIterMarker for T where T: SourceIter<Source: AsIntoIter> {}\n+impl<T> SourceIterMarker for T where T: SourceIter<Source: AsIntoIter> + InPlaceIterable {}\n \n impl<T, I> SpecFrom<T, I> for Vec<T>\n where\n-    I: Iterator<Item = T> + InPlaceIterable + SourceIterMarker,\n+    I: Iterator<Item = T> + SourceIterMarker,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // Additional requirements which cannot expressed via trait bounds. We rely on const eval\n@@ -2920,6 +2920,17 @@ impl<T> Iterator for IntoIter<T> {\n     fn count(self) -> usize {\n         self.len()\n     }\n+\n+    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // SAFETY: the caller must uphold the contract for\n+        // `Iterator::get_unchecked`.\n+        unsafe {\n+            if mem::size_of::<T>() == 0 { mem::zeroed() } else { ptr::read(self.ptr.add(i)) }\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2967,12 +2978,6 @@ unsafe impl<T> TrustedRandomAccess for IntoIter<T>\n where\n     T: Copy,\n {\n-    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item {\n-        unsafe {\n-            if mem::size_of::<T>() == 0 { mem::zeroed() } else { ptr::read(self.ptr.add(i)) }\n-        }\n-    }\n-\n     fn may_have_side_effect() -> bool {\n         false\n     }"}, {"sha": "f287196da03efccb7317f3c3b5bae06ec251ebd8", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aeea0022225ccc11aae031ebf06dc2b125a29f1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeea0022225ccc11aae031ebf06dc2b125a29f1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=9aeea0022225ccc11aae031ebf06dc2b125a29f1", "patch": "@@ -53,5 +53,4 @@ unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n ///\n /// [`SourceIter`]: ../../std/iter/trait.SourceIter.html\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-#[rustc_specialization_trait]\n pub unsafe trait InPlaceIterable: Iterator {}"}]}