{"sha": "eed45107da8da6293d9cecc302ad3b9870848b51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDQ1MTA3ZGE4ZGE2MjkzZDljZWNjMzAyYWQzYjk4NzA4NDhiNTE=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-10-20T23:15:28Z"}, "committer": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-10-24T02:50:09Z"}, "message": "Add some description for (malloc/calloc/free/realloc)", "tree": {"sha": "b7b29477bec45b1b464ca661432166ca8eb2a7e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b29477bec45b1b464ca661432166ca8eb2a7e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed45107da8da6293d9cecc302ad3b9870848b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed45107da8da6293d9cecc302ad3b9870848b51", "html_url": "https://github.com/rust-lang/rust/commit/eed45107da8da6293d9cecc302ad3b9870848b51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed45107da8da6293d9cecc302ad3b9870848b51/comments", "author": null, "committer": null, "parents": [{"sha": "d413bb6f5716261f2740eb67540df1da1469ce12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d413bb6f5716261f2740eb67540df1da1469ce12", "html_url": "https://github.com/rust-lang/rust/commit/d413bb6f5716261f2740eb67540df1da1469ce12"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "b85f4d50021e32e7369dda0caf91bf2348626cf6", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eed45107da8da6293d9cecc302ad3b9870848b51/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed45107da8da6293d9cecc302ad3b9870848b51/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=eed45107da8da6293d9cecc302ad3b9870848b51", "patch": "@@ -24,24 +24,28 @@ static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        // SAFETY:  DLMALLOC.malloc() is guranteed to be safe since lock::lock() aqcuire a globl lock\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.malloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+        // SAFETY:  DLMALLOC.calloc() is guranteed to be safe since lock::lock() aqcuire a globl lock\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.calloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n+        // SAFETY:  DLMALLOC.free() is guranteed to be safe since lock::lock() aqcuire a globl lock\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.free(ptr, layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n+        // SAFETY:  DLMALLOC.realloc() is guranteed to be safe since lock::lock() aqcuire a globl lock\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.realloc(ptr, layout.size(), layout.align(), new_size) }\n     }"}]}