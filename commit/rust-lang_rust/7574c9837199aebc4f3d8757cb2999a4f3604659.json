{"sha": "7574c9837199aebc4f3d8757cb2999a4f3604659", "node_id": "C_kwDOAAsO6NoAKDc1NzRjOTgzNzE5OWFlYmM0ZjNkODc1N2NiMjk5OWE0ZjM2MDQ2NTk", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-15T18:51:18Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-15T18:56:13Z"}, "message": "Fix new_return_no_self with recursive bounds", "tree": {"sha": "bcb4cb1cf5fc959579731ebd8874d7fbe717d93f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcb4cb1cf5fc959579731ebd8874d7fbe717d93f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7574c9837199aebc4f3d8757cb2999a4f3604659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7574c9837199aebc4f3d8757cb2999a4f3604659", "html_url": "https://github.com/rust-lang/rust/commit/7574c9837199aebc4f3d8757cb2999a4f3604659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7574c9837199aebc4f3d8757cb2999a4f3604659/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3905f512302a976dac58c8549f808719edfbe4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3905f512302a976dac58c8549f808719edfbe4c1", "html_url": "https://github.com/rust-lang/rust/commit/3905f512302a976dac58c8549f808719edfbe4c1"}], "stats": {"total": 155, "additions": 105, "deletions": 50}, "files": [{"sha": "6ba916306eeb30561312f6452d018a83fdb9aead", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7574c9837199aebc4f3d8757cb2999a4f3604659/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7574c9837199aebc4f3d8757cb2999a4f3604659/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=7574c9837199aebc4f3d8757cb2999a4f3604659", "patch": "@@ -69,50 +69,66 @@ pub fn contains_adt_constructor<'tcx>(ty: Ty<'tcx>, adt: AdtDef<'tcx>) -> bool {\n /// This method also recurses into opaque type predicates, so call it with `impl Trait<U>` and `U`\n /// will also return `true`.\n pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, needle: Ty<'tcx>) -> bool {\n-    ty.walk().any(|inner| match inner.unpack() {\n-        GenericArgKind::Type(inner_ty) => {\n-            if inner_ty == needle {\n-                return true;\n-            }\n+    fn contains_ty_adt_constructor_opaque_inner<'tcx>(\n+        cx: &LateContext<'tcx>,\n+        ty: Ty<'tcx>,\n+        needle: Ty<'tcx>,\n+        seen: &mut FxHashSet<DefId>,\n+    ) -> bool {\n+        ty.walk().any(|inner| match inner.unpack() {\n+            GenericArgKind::Type(inner_ty) => {\n+                if inner_ty == needle {\n+                    return true;\n+                }\n \n-            if inner_ty.ty_adt_def() == needle.ty_adt_def() {\n-                return true;\n-            }\n+                if inner_ty.ty_adt_def() == needle.ty_adt_def() {\n+                    return true;\n+                }\n+\n+                if let ty::Opaque(def_id, _) = *inner_ty.kind() {\n+                    if !seen.insert(def_id) {\n+                        return false;\n+                    }\n \n-            if let ty::Opaque(def_id, _) = *inner_ty.kind() {\n-                for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n-                    match predicate.kind().skip_binder() {\n-                        // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n-                        // and check substituions to find `U`.\n-                        ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n-                            if trait_predicate\n-                                .trait_ref\n-                                .substs\n-                                .types()\n-                                .skip(1) // Skip the implicit `Self` generic parameter\n-                                .any(|ty| contains_ty_adt_constructor_opaque(cx, ty, needle))\n-                            {\n-                                return true;\n-                            }\n-                        },\n-                        // For `impl Trait<Assoc=U>`, it will register a predicate of `<T as Trait>::Assoc = U`,\n-                        // so we check the term for `U`.\n-                        ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate)) => {\n-                            if let ty::TermKind::Ty(ty) = projection_predicate.term.unpack() {\n-                                if contains_ty_adt_constructor_opaque(cx, ty, needle) {\n+                    for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                        match predicate.kind().skip_binder() {\n+                            // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n+                            // and check substituions to find `U`.\n+                            ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n+                                if trait_predicate\n+                                    .trait_ref\n+                                    .substs\n+                                    .types()\n+                                    .skip(1) // Skip the implicit `Self` generic parameter\n+                                    .any(|ty| contains_ty_adt_constructor_opaque_inner(cx, ty, needle, seen))\n+                                {\n                                     return true;\n                                 }\n-                            };\n-                        },\n-                        _ => (),\n+                            },\n+                            // For `impl Trait<Assoc=U>`, it will register a predicate of `<T as Trait>::Assoc = U`,\n+                            // so we check the term for `U`.\n+                            ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate)) => {\n+                                if let ty::TermKind::Ty(ty) = projection_predicate.term.unpack() {\n+                                    if contains_ty_adt_constructor_opaque_inner(cx, ty, needle, seen) {\n+                                        return true;\n+                                    }\n+                                };\n+                            },\n+                            _ => (),\n+                        }\n                     }\n                 }\n-            }\n \n-            false\n-        },\n-        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n-    })\n+                false\n+            },\n+            GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+        })\n+    }\n+\n+    // A hash set to ensure that the same opaque type (`impl Trait` in RPIT or TAIT) is not\n+    // visited twice.\n+    let mut seen = FxHashSet::default();\n+    contains_ty_adt_constructor_opaque_inner(cx, ty, needle, &mut seen)\n }\n \n /// Resolves `<T as Iterator>::Item` for `T`"}, {"sha": "beec42f08bb05666df617799cc1b4068abfcdb75", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7574c9837199aebc4f3d8757cb2999a4f3604659/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7574c9837199aebc4f3d8757cb2999a4f3604659/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=7574c9837199aebc4f3d8757cb2999a4f3604659", "patch": "@@ -1,3 +1,4 @@\n+#![feature(type_alias_impl_trait)]\n #![warn(clippy::new_ret_no_self)]\n #![allow(dead_code)]\n \n@@ -400,3 +401,25 @@ mod issue7344 {\n         }\n     }\n }\n+\n+mod issue10041 {\n+    struct Bomb;\n+\n+    impl Bomb {\n+        // Hidden <Rhs = Self> default generic paramter.\n+        pub fn new() -> impl PartialOrd {\n+            0i32\n+        }\n+    }\n+\n+    // TAIT with self-referencing bounds\n+    type X = impl std::ops::Add<Output = X>;\n+\n+    struct Bomb2;\n+\n+    impl Bomb2 {\n+        pub fn new() -> X {\n+            0i32\n+        }\n+    }\n+}"}, {"sha": "2eaebfb5cac50041df6bc18f6c2a78bb79017691", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7574c9837199aebc4f3d8757cb2999a4f3604659/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7574c9837199aebc4f3d8757cb2999a4f3604659/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=7574c9837199aebc4f3d8757cb2999a4f3604659", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:49:5\n+  --> $DIR/new_ret_no_self.rs:50:5\n    |\n LL | /     pub fn new(_: String) -> impl R<Item = u32> {\n LL | |         S3\n@@ -9,88 +9,104 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:81:5\n+  --> $DIR/new_ret_no_self.rs:82:5\n    |\n LL | /     pub fn new() -> u32 {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:90:5\n+  --> $DIR/new_ret_no_self.rs:91:5\n    |\n LL | /     pub fn new(_: String) -> u32 {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:126:5\n+  --> $DIR/new_ret_no_self.rs:127:5\n    |\n LL | /     pub fn new() -> (u32, u32) {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:153:5\n+  --> $DIR/new_ret_no_self.rs:154:5\n    |\n LL | /     pub fn new() -> *mut V {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:171:5\n+  --> $DIR/new_ret_no_self.rs:172:5\n    |\n LL | /     pub fn new() -> Option<u32> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:224:9\n+  --> $DIR/new_ret_no_self.rs:225:9\n    |\n LL |         fn new() -> String;\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:236:9\n+  --> $DIR/new_ret_no_self.rs:237:9\n    |\n LL |         fn new(_: String) -> String;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:271:9\n+  --> $DIR/new_ret_no_self.rs:272:9\n    |\n LL | /         fn new() -> (u32, u32) {\n LL | |             unimplemented!();\n LL | |         }\n    | |_________^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:298:9\n+  --> $DIR/new_ret_no_self.rs:299:9\n    |\n LL | /         fn new() -> *mut V {\n LL | |             unimplemented!();\n LL | |         }\n    | |_________^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:368:9\n+  --> $DIR/new_ret_no_self.rs:369:9\n    |\n LL | /         fn new(t: T) -> impl Into<i32> {\n LL | |             1\n LL | |         }\n    | |_________^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:389:9\n+  --> $DIR/new_ret_no_self.rs:390:9\n    |\n LL | /         fn new(t: T) -> impl Trait2<(), i32> {\n LL | |             unimplemented!()\n LL | |         }\n    | |_________^\n \n-error: aborting due to 12 previous errors\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:410:9\n+   |\n+LL | /         pub fn new() -> impl PartialOrd {\n+LL | |             0i32\n+LL | |         }\n+   | |_________^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:421:9\n+   |\n+LL | /         pub fn new() -> X {\n+LL | |             0i32\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 14 previous errors\n "}]}