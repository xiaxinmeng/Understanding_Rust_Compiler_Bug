{"sha": "ee2a9d93e96e2beb608be7936a5651e454ae706a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMmE5ZDkzZTk2ZTJiZWI2MDhiZTc5MzZhNTY1MWU0NTRhZTcwNmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-04T19:52:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-29T20:24:29Z"}, "message": "Suggest using anonymous lifetime in `impl Trait` return", "tree": {"sha": "362769db4031a9923db7d4ee9cbe0ba4bf173d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362769db4031a9923db7d4ee9cbe0ba4bf173d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2a9d93e96e2beb608be7936a5651e454ae706a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a9d93e96e2beb608be7936a5651e454ae706a", "html_url": "https://github.com/rust-lang/rust/commit/ee2a9d93e96e2beb608be7936a5651e454ae706a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a9d93e96e2beb608be7936a5651e454ae706a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "html_url": "https://github.com/rust-lang/rust/commit/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "8b44aa5e706012ea950903ff8c042ad930aa84ee", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a9d93e96e2beb608be7936a5651e454ae706a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a9d93e96e2beb608be7936a5651e454ae706a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=ee2a9d93e96e2beb608be7936a5651e454ae706a", "patch": "@@ -103,13 +103,43 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             error_var\n         );\n \n+        let many = if let Ok(snippet) = self.tcx().sess.source_map().span_to_snippet(span) {\n+            if \"'static\" == &named.to_string() && snippet.starts_with(\"impl \") {\n+                diag.span_suggestion(\n+                    span,\n+                    \"add explicit unnamed lifetime `'_` to the return type to constrain it\",\n+                    format!(\"{} + '_\", snippet),\n+                    Applicability::Unspecified,\n+                );\n+                true\n+            } else {\n+                false\n+            }\n+        } else {\n+            false\n+        };\n+        if many {\n+            diag.span_label(\n+                span,\n+                \"`impl Trait` types can only capture lifetimes that they reference\"\n+            );\n+        } else {\n+            diag.span_label(span, format!(\"lifetime `{}` required\", named));\n+        }\n         diag.span_suggestion(\n-                new_ty_span,\n-                &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-                new_ty.to_string(),\n-                Applicability::Unspecified,\n-            )\n-            .span_label(span, format!(\"lifetime `{}` required\", named));\n+            new_ty_span,\n+            &format!(\"{}add explicit lifetime `{}` to {}\",\n+                if many {\n+                    \"otherwise, \"\n+                } else {\n+                    \"\"\n+                },\n+                named,\n+                span_label_var,\n+            ),\n+            new_ty.to_string(),\n+            Applicability::Unspecified,\n+        );\n \n         Some(diag)\n     }"}, {"sha": "8a155d1c1b21572560caa17fb953e17cfb8d495c", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a9d93e96e2beb608be7936a5651e454ae706a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a9d93e96e2beb608be7936a5651e454ae706a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=ee2a9d93e96e2beb608be7936a5651e454ae706a", "patch": "@@ -2,9 +2,15 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----     ^^^^^^^^^ lifetime `'static` required\n-   |              |\n-   |              help: add explicit lifetime `'static` to the type of `x`: `&'static i32`\n+   |                       ^^^^^^^^^ `impl Trait` types can only capture lifetimes that they reference\n+help: add explicit unnamed lifetime `'_` to the return type to constrain it\n+   |\n+LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n+   |                       ^^^^^^^^^^^^^^\n+help: otherwise, add explicit lifetime `'static` to the type of `x`\n+   |\n+LL | fn elided(x: &'static i32) -> impl Copy { x }\n+   |              ^^^^^^^^^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44"}]}