{"sha": "467d367df75121dd305626ea2fb4459af588d29c", "node_id": "C_kwDOAAsO6NoAKDQ2N2QzNjdkZjc1MTIxZGQzMDU2MjZlYTJmYjQ0NTlhZjU4OGQyOWM", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-03-11T14:39:14Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:50:07Z"}, "message": "Rename tuple_wrap_err_subdiag to suggest_wrap_to_build_a_tuple, making it more consistent with similar functions", "tree": {"sha": "b40ebfa37712e0e170bf6576feafc1d37308fd03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b40ebfa37712e0e170bf6576feafc1d37308fd03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467d367df75121dd305626ea2fb4459af588d29c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467d367df75121dd305626ea2fb4459af588d29c", "html_url": "https://github.com/rust-lang/rust/commit/467d367df75121dd305626ea2fb4459af588d29c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467d367df75121dd305626ea2fb4459af588d29c/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d5bedd5f7564d62096e485f2fcb6a8956f1dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d5bedd5f7564d62096e485f2fcb6a8956f1dec", "html_url": "https://github.com/rust-lang/rust/commit/21d5bedd5f7564d62096e485f2fcb6a8956f1dec"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ca4f1c20b8924b20cbfff3f6b5dc606c202337ac", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/467d367df75121dd305626ea2fb4459af588d29c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467d367df75121dd305626ea2fb4459af588d29c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=467d367df75121dd305626ea2fb4459af588d29c", "patch": "@@ -1935,7 +1935,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 // parentheses around it, perhaps the user meant to write `(expr,)` to\n                 // build a tuple (issue #86100)\n                 (ty::Tuple(fields), _) => {\n-                    suggestions.extend(self.tuple_wrap_err_subdiag( span, found, fields))\n+                    suggestions.extend(self.suggest_wrap_to_build_a_tuple( span, found, fields))\n                 }\n                 // If a byte was expected and the found expression is a char literal\n                 // containing a single ASCII character, perhaps the user meant to write `b'c'` to\n@@ -1976,7 +1976,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 (ty::Bool, ty::Tuple(list)) => if list.len() == 0 {\n                     suggestions.extend(self.suggest_let_for_letchains(&trace.cause, span));\n                 }\n-                (ty::Array(_, _), ty::Array(_, _)) => suggestions.extend(self.specify_actual_length(terr, trace, span)),\n+                (ty::Array(_, _), ty::Array(_, _)) => suggestions.extend(self.suggest_specify_actual_length(terr, trace, span)),\n                 _ => {}\n             }\n         }\n@@ -1990,7 +1990,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         suggestions\n     }\n \n-    fn specify_actual_length(\n+    fn suggest_specify_actual_length(\n         &self,\n         terr: TypeError<'_>,\n         trace: &TypeTrace<'_>,\n@@ -2068,7 +2068,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         diag\n     }\n \n-    fn tuple_wrap_err_subdiag(\n+    fn suggest_wrap_to_build_a_tuple(\n         &self,\n         span: Span,\n         found: Ty<'tcx>,"}]}