{"sha": "6ba167a6afa013ac75f1a898e4951c3a4921a6db", "node_id": "C_kwDOAAsO6NoAKDZiYTE2N2E2YWZhMDEzYWM3NWYxYTg5OGU0OTUxYzNhNDkyMWE2ZGI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-02-24T20:42:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-24T20:42:11Z"}, "message": "Rollup merge of #91795 - petrochenkov:nomacreexport, r=cjgillot\n\nresolve/metadata: Stop encoding macros as reexports\n\nSupersedes https://github.com/rust-lang/rust/pull/88335.\nr? `@cjgillot`", "tree": {"sha": "abe83e441df7bcb2dd0760af87781d1deaaec46a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abe83e441df7bcb2dd0760af87781d1deaaec46a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba167a6afa013ac75f1a898e4951c3a4921a6db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiF+2kCRBK7hj4Ov3rIwAA6rkIALJ/68PViZ4UCgr1kdkWQVzg\nPtHbc9VWNBNm6U+uwNrU9P013oapP0VtLsA5DipPzyab2ljwcHfYZi9Lnonoud2w\nNowncDokFTNe/uFpffTMBoob9eYC3CWJp7RRTUga7EDMzYz/6jZxSxyqV/5QxfEO\nYliqOP8C7c1ipOG+vHePol1e+eIbHxD5iG6HgoEIT3wGsbtjKeiihEqTIgxGznGA\nGJGa7UJ2al5TnCRpaL0CuPQ7ZNdnyaccog8eXlbePWopNAVohw8KbCx5aohHEvUq\ncKkZoEv8jTcT3YWNjmN0bo57jrE4ES+S+LURCW3RbaUA7f36oSkp+iK2maTdTUU=\n=U78x\n-----END PGP SIGNATURE-----\n", "payload": "tree abe83e441df7bcb2dd0760af87781d1deaaec46a\nparent 4b043faba34ccc053a4d0110634c323f6c03765e\nparent b91ec30159594ed73cabc4c6cb5450996f290577\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1645735331 +0100\ncommitter GitHub <noreply@github.com> 1645735331 +0100\n\nRollup merge of #91795 - petrochenkov:nomacreexport, r=cjgillot\n\nresolve/metadata: Stop encoding macros as reexports\n\nSupersedes https://github.com/rust-lang/rust/pull/88335.\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba167a6afa013ac75f1a898e4951c3a4921a6db", "html_url": "https://github.com/rust-lang/rust/commit/6ba167a6afa013ac75f1a898e4951c3a4921a6db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba167a6afa013ac75f1a898e4951c3a4921a6db/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b043faba34ccc053a4d0110634c323f6c03765e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b043faba34ccc053a4d0110634c323f6c03765e", "html_url": "https://github.com/rust-lang/rust/commit/4b043faba34ccc053a4d0110634c323f6c03765e"}, {"sha": "b91ec30159594ed73cabc4c6cb5450996f290577", "url": "https://api.github.com/repos/rust-lang/rust/commits/b91ec30159594ed73cabc4c6cb5450996f290577", "html_url": "https://github.com/rust-lang/rust/commit/b91ec30159594ed73cabc4c6cb5450996f290577"}], "stats": {"total": 141, "additions": 92, "deletions": 49}, "files": [{"sha": "3ddc7fce1b770aee791d317d493e8778288f4521", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -444,8 +444,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ),\n             ItemKind::MacroDef(MacroDef { ref body, macro_rules }) => {\n                 let body = P(self.lower_mac_args(body));\n-\n-                hir::ItemKind::Macro(ast::MacroDef { body, macro_rules })\n+                let macro_kind = self.resolver.decl_macro_kind(self.resolver.local_def_id(id));\n+                hir::ItemKind::Macro(ast::MacroDef { body, macro_rules }, macro_kind)\n             }\n             ItemKind::MacCall(..) => {\n                 panic!(\"`TyMac` should have been expanded by now\")"}, {"sha": "0156c5016acd1cd3cc8366de1493b08d9ca593b9", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -61,7 +61,7 @@ use rustc_session::lint::LintBuffer;\n use rustc_session::parse::feature_err;\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n-use rustc_span::hygiene::ExpnId;\n+use rustc_span::hygiene::{ExpnId, MacroKind};\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -210,6 +210,8 @@ pub trait ResolverAstLowering {\n         expn_id: ExpnId,\n         span: Span,\n     ) -> LocalDefId;\n+\n+    fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind;\n }\n \n /// Context of `impl Trait` in code, which determines whether it is allowed in an HIR subtree,"}, {"sha": "72c02932945ca063329ab10a3166aa0b03e17604", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -15,6 +15,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{def_id::LocalDefId, BytePos, MultiSpan, Span, DUMMY_SP};\n@@ -2803,7 +2804,7 @@ pub enum ItemKind<'hir> {\n     /// A function declaration.\n     Fn(FnSig<'hir>, Generics<'hir>, BodyId),\n     /// A MBE macro definition (`macro_rules!` or `macro`).\n-    Macro(ast::MacroDef),\n+    Macro(ast::MacroDef, MacroKind),\n     /// A module.\n     Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`."}, {"sha": "1b40f3d390ee59dedaaa266035821931afb96594", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -575,7 +575,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             item.span,\n             item.hir_id(),\n         ),\n-        ItemKind::Macro(_) => {\n+        ItemKind::Macro(..) => {\n             visitor.visit_id(item.hir_id());\n         }\n         ItemKind::Mod(ref module) => {"}, {"sha": "b3042c61002c4fae7f129ea618ece77c66bffea3", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -570,7 +570,7 @@ impl<'a> State<'a> {\n                 self.end(); // need to close a box\n                 self.ann.nested(self, Nested::Body(body));\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 self.print_mac_def(macro_def, &item.ident, item.span, |state| {\n                     state.print_visibility(&item.vis)\n                 });"}, {"sha": "e5e0cce198f46078eb208d511b947e04e575008f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -5,6 +5,7 @@ use crate::rmeta::table::{FixedSizeEncoding, Table};\n use crate::rmeta::*;\n \n use rustc_ast as ast;\n+use rustc_ast::ptr::P;\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n@@ -1076,6 +1077,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                         res,\n                         vis: ty::Visibility::Public,\n                         span: ident.span,\n+                        macro_rules: false,\n                     });\n                 }\n             }\n@@ -1087,17 +1089,19 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             for child_index in children.decode((self, sess)) {\n                 if let Some(ident) = self.opt_item_ident(child_index, sess) {\n                     let kind = self.def_kind(child_index);\n-                    if matches!(kind, DefKind::Macro(..)) {\n-                        // FIXME: Macros are currently encoded twice, once as items and once as\n-                        // reexports. We ignore the items here and only use the reexports.\n-                        continue;\n-                    }\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n                     let vis = self.get_visibility(child_index);\n                     let span = self.get_span(child_index, sess);\n+                    let macro_rules = match kind {\n+                        DefKind::Macro(..) => match self.kind(child_index) {\n+                            EntryKind::MacroDef(_, macro_rules) => macro_rules,\n+                            _ => unreachable!(),\n+                        },\n+                        _ => false,\n+                    };\n \n-                    callback(ModChild { ident, res, vis, span });\n+                    callback(ModChild { ident, res, vis, span, macro_rules });\n \n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n@@ -1109,7 +1113,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                 let ctor_res =\n                                     Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n-                                callback(ModChild { ident, res: ctor_res, vis, span });\n+                                callback(ModChild {\n+                                    ident,\n+                                    res: ctor_res,\n+                                    vis,\n+                                    span,\n+                                    macro_rules: false,\n+                                });\n                             }\n                         }\n                         DefKind::Variant => {\n@@ -1134,7 +1144,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n                                 }\n                             }\n-                            callback(ModChild { ident, res: ctor_res, vis, span });\n+                            callback(ModChild {\n+                                ident,\n+                                res: ctor_res,\n+                                vis,\n+                                span,\n+                                macro_rules: false,\n+                            });\n                         }\n                         _ => {}\n                     }\n@@ -1402,9 +1418,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))\n     }\n \n-    fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {\n+    fn get_macro(self, id: DefIndex, sess: &Session) -> ast::MacroDef {\n         match self.kind(id) {\n-            EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),\n+            EntryKind::MacroDef(mac_args, macro_rules) => {\n+                ast::MacroDef { body: P(mac_args.decode((self, sess))), macro_rules }\n+            }\n             _ => bug!(),\n         }\n     }"}, {"sha": "fae76f80c4bdebc794f804f4d3cd934981681bcb", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -1406,8 +1406,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n                 EntryKind::Fn(self.lazy(data))\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n-                EntryKind::MacroDef(self.lazy(macro_def.clone()))\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n+                EntryKind::MacroDef(self.lazy(&*macro_def.body), macro_def.macro_rules)\n             }\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.def_id, m);"}, {"sha": "a30cc034c4a969cd7dccb5a4c7b0195a51f3474c", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -2,7 +2,7 @@ use decoder::Metadata;\n use def_path_hash_map::DefPathHashMapRef;\n use table::{Table, TableBuilder};\n \n-use rustc_ast::{self as ast, MacroDef};\n+use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n@@ -350,7 +350,7 @@ enum EntryKind {\n     Fn(Lazy<FnData>),\n     ForeignFn(Lazy<FnData>),\n     Mod(Lazy<[ModChild]>),\n-    MacroDef(Lazy<MacroDef>),\n+    MacroDef(Lazy<ast::MacArgs>, /*macro_rules*/ bool),\n     ProcMacro(MacroKind),\n     Closure,\n     Generator,"}, {"sha": "ec20e888333dae68e6776a84936b678a045dd192", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -14,7 +14,6 @@ use rustc_hir::*;\n use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n-use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -232,7 +231,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Static(..) => DefKind::Static,\n                 ItemKind::Const(..) => DefKind::Const,\n                 ItemKind::Fn(..) => DefKind::Fn,\n-                ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),\n+                ItemKind::Macro(_, macro_kind) => DefKind::Macro(macro_kind),\n                 ItemKind::Mod(..) => DefKind::Mod,\n                 ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,\n                 ItemKind::TyAlias(..) => DefKind::TyAlias,"}, {"sha": "c8e78747d8e7b3a74ac53afb841bef9b9bd047dd", "filename": "compiler/rustc_middle/src/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -21,4 +21,6 @@ pub struct ModChild {\n     pub vis: ty::Visibility,\n     /// Span of the item.\n     pub span: Span,\n+    /// A proper `macro_rules` item (not a reexport).\n+    pub macro_rules: bool,\n }"}, {"sha": "b545961245ad707b850bf17803c7744d9b5c4c61", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -1951,7 +1951,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         // Historically we've run more checks on non-exported than exported macros,\n         // so this lets us continue to run them while maintaining backwards compatibility.\n         // In the long run, the checks should be harmonized.\n-        if let ItemKind::Macro(ref macro_def) = item.kind {\n+        if let ItemKind::Macro(ref macro_def, _) = item.kind {\n             let def_id = item.def_id.to_def_id();\n             if macro_def.macro_rules && !self.tcx.has_attr(def_id, sym::macro_export) {\n                 check_non_exported_macro_for_invalid_attrs(self.tcx, item);"}, {"sha": "3dd9995fa0081e7dc1d320db14d7aa7f27778d69", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -564,7 +564,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             // privacy and mark them reachable.\n             DefKind::Macro(_) => {\n                 let item = self.tcx.hir().expect_item(def_id);\n-                if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }) = item.kind {\n+                if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }, _) = item.kind {\n                     if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n                         self.update(def_id, level);\n                     }\n@@ -686,7 +686,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 self.update_reachability_from_macro(item.def_id, macro_def);\n             }\n             hir::ItemKind::ForeignMod { items, .. } => {"}, {"sha": "61a9b644cb8f50069f89c2359f52c8cab9f81472", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -133,7 +133,7 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n             ast::ItemKind::Impl(..) => return,\n \n             // Only exported `macro_rules!` items are public, but they always are\n-            ast::ItemKind::MacroDef(..) => {\n+            ast::ItemKind::MacroDef(ref macro_def) if macro_def.macro_rules => {\n                 let is_macro_export =\n                     item.attrs.iter().any(|attr| attr.has_name(sym::macro_export));\n                 if is_macro_export { Some(AccessLevel::Public) } else { None }\n@@ -155,7 +155,8 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n             | ast::ItemKind::Struct(..)\n             | ast::ItemKind::Union(..)\n             | ast::ItemKind::Trait(..)\n-            | ast::ItemKind::TraitAlias(..) => {\n+            | ast::ItemKind::TraitAlias(..)\n+            | ast::ItemKind::MacroDef(..) => {\n                 if item.vis.kind.is_pub() {\n                     self.prev_level\n                 } else {"}, {"sha": "6b70c9833448399c7b66251d0405bc48c1370059", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -940,7 +940,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {\n         let parent = self.parent_scope.module;\n-        let ModChild { ident, res, vis, span } = child;\n+        let ModChild { ident, res, vis, span, macro_rules } = child;\n         let res = res.expect_non_local();\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions.\n@@ -972,7 +972,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 _,\n             ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {\n-                self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n+                if !macro_rules {\n+                    self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n+                }\n             }\n             Res::Def(\n                 DefKind::TyParam"}, {"sha": "bf570fb0f80b00a75279c3b439dc22fad545bd24", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -1399,14 +1399,22 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         let mut reexports = Vec::new();\n \n         module.for_each_child(self.r, |_, ident, _, binding| {\n-            // Filter away ambiguous imports and anything that has def-site hygiene.\n-            // FIXME: Implement actual cross-crate hygiene.\n-            let is_good_import =\n-                binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();\n-            if is_good_import || binding.is_macro_def() {\n+            // FIXME: Consider changing the binding inserted by `#[macro_export] macro_rules`\n+            // into the crate root to actual `NameBindingKind::Import`.\n+            if binding.is_import()\n+                || matches!(binding.kind, NameBindingKind::Res(_, _is_macro_export @ true))\n+            {\n                 let res = binding.res().expect_non_local();\n-                if res != def::Res::Err {\n-                    reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });\n+                // Ambiguous imports are treated as errors at this point and are\n+                // not exposed to other crates (see #36837 for more details).\n+                if res != def::Res::Err && !binding.is_ambiguity() {\n+                    reexports.push(ModChild {\n+                        ident,\n+                        res,\n+                        vis: binding.vis,\n+                        span: binding.span,\n+                        macro_rules: false,\n+                    });\n                 }\n             }\n         });"}, {"sha": "eed8aaed4ee09089e3b0c4fe749fec0ac42cec0a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -845,10 +845,6 @@ impl<'a> NameBinding<'a> {\n         )\n     }\n \n-    fn is_macro_def(&self) -> bool {\n-        matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))\n-    }\n-\n     fn macro_kind(&self) -> Option<MacroKind> {\n         self.res().macro_kind()\n     }\n@@ -990,6 +986,9 @@ pub struct Resolver<'a> {\n     crate_loader: CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n+    /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n+    /// the surface (`macro` items in libcore), but are actually attributes or derives.\n+    builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n@@ -1261,6 +1260,10 @@ impl ResolverAstLowering for Resolver<'_> {\n \n         def_id\n     }\n+\n+    fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind {\n+        self.builtin_macro_kinds.get(&def_id).copied().unwrap_or(MacroKind::Bang)\n+    }\n }\n \n impl<'a> Resolver<'a> {\n@@ -1381,6 +1384,7 @@ impl<'a> Resolver<'a> {\n             crate_loader: CrateLoader::new(session, metadata_loader, crate_name),\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n+            builtin_macro_kinds: Default::default(),\n             registered_attrs,\n             registered_tools,\n             macro_use_prelude: FxHashMap::default(),"}, {"sha": "e34d3e605ecdf37653a3cdb3f28aa6b4c7d29005", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -1209,7 +1209,13 @@ impl<'a> Resolver<'a> {\n                 // while still taking everything else from the source code.\n                 // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'.\n                 match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {\n-                    BuiltinMacroState::NotYetSeen(ext) => result.kind = ext,\n+                    BuiltinMacroState::NotYetSeen(ext) => {\n+                        result.kind = ext;\n+                        if item.id != ast::DUMMY_NODE_ID {\n+                            self.builtin_macro_kinds\n+                                .insert(self.local_def_id(item.id), result.macro_kind());\n+                        }\n+                    }\n                     BuiltinMacroState::AlreadySeen(span) => {\n                         struct_span_err!(\n                             self.session,"}, {"sha": "8f50f44571953fb0b7a89ae8f2c6bbec6d00eab6", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -416,7 +416,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n \n                 Ok(sig)\n             }\n-            hir::ItemKind::Macro(_) => {\n+            hir::ItemKind::Macro(..) => {\n                 let mut text = \"macro\".to_owned();\n                 let name = self.ident.to_string();\n                 text.push_str(&name);"}, {"sha": "4a25b49eb2ddac6155263fca67094e5d9631c0ac", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -730,7 +730,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n         // These don't define types.\n         hir::ItemKind::ExternCrate(_)\n         | hir::ItemKind::Use(..)\n-        | hir::ItemKind::Macro(_)\n+        | hir::ItemKind::Macro(..)\n         | hir::ItemKind::Mod(_)\n         | hir::ItemKind::GlobalAsm(_) => {}\n         hir::ItemKind::ForeignMod { items, .. } => {"}, {"sha": "1e0c1e8f1f356b7624ec44056f70f14cad4e2181", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -1855,7 +1855,7 @@ fn clean_maybe_renamed_item(\n             ItemKind::Fn(ref sig, ref generics, body_id) => {\n                 clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n             }\n-            ItemKind::Macro(ref macro_def) => {\n+            ItemKind::Macro(ref macro_def, _) => {\n                 let ty_vis = cx.tcx.visibility(def_id).clean(cx);\n                 MacroItem(Macro {\n                     source: display_macro_source(cx, name, macro_def, def_id, ty_vis),"}, {"sha": "5ccc3dabe83b71c4693df1aff2b89f6edf7057dd", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -1164,7 +1164,7 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n \n     fn visit_item(&mut self, item: &'hir hir::Item<'_>) {\n         let name = match &item.kind {\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 // FIXME(#88038): Non exported macros have historically not been tested,\n                 // but we really ought to start testing them.\n                 let def_id = item.def_id.to_def_id();"}, {"sha": "1693034db0e82a49f0e3fc714064b5ec4c9856e6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n                 om.items.push((item, renamed))\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 // `#[macro_export] macro_rules!` items are handled seperately in `visit()`,\n                 // above, since they need to be documented at the module top level. Accordingly,\n                 // we only want to handle macros if one of three conditions holds:"}, {"sha": "dc48ea3f4f99d77612cfcb3a4e48fab6dabf8f5a", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -373,7 +373,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n             let item_ty = cx.tcx.type_of(did);\n             println!(\"function of type {:#?}\", item_ty);\n         },\n-        hir::ItemKind::Macro(ref macro_def) => {\n+        hir::ItemKind::Macro(ref macro_def, _) => {\n             if macro_def.macro_rules {\n                 println!(\"macro introduced by `macro_rules!`\");\n             } else {"}, {"sha": "a83c8ba0b6428d8345b26c65c6086e67463d1242", "filename": "src/tools/clippy/tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -15,7 +15,7 @@ extern crate macro_use_helper as mac;\n extern crate proc_macro_derive as mini_mac;\n \n mod a {\n-    use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};\n+    use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};\n     use mac;\n     use mini_mac::ClippyMiniMacroTest;\n     use mini_mac;"}, {"sha": "9028a636e7f7a5d064e8c8b3417b979cd6a54eba", "filename": "src/tools/clippy/tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ba167a6afa013ac75f1a898e4951c3a4921a6db/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr?ref=6ba167a6afa013ac75f1a898e4951c3a4921a6db", "patch": "@@ -2,7 +2,7 @@ error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:18:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n "}]}