{"sha": "206741bf57361efcd04243b9e2e6275701c15c76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNjc0MWJmNTczNjFlZmNkMDQyNDNiOWUyZTYyNzU3MDFjMTVjNzY=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-12T10:05:02Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-12T20:18:42Z"}, "message": "Use `avoid_breaking_exported_api` for `types` module lints\n\nAddressed PR reviews regarding code style", "tree": {"sha": "4acb83d60682f0b512e65d959831d1840dfddad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4acb83d60682f0b512e65d959831d1840dfddad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206741bf57361efcd04243b9e2e6275701c15c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206741bf57361efcd04243b9e2e6275701c15c76", "html_url": "https://github.com/rust-lang/rust/commit/206741bf57361efcd04243b9e2e6275701c15c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206741bf57361efcd04243b9e2e6275701c15c76/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09b7745f34b8d81c1d4517975f2e552274977f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/09b7745f34b8d81c1d4517975f2e552274977f45", "html_url": "https://github.com/rust-lang/rust/commit/09b7745f34b8d81c1d4517975f2e552274977f45"}], "stats": {"total": 90, "additions": 71, "deletions": 19}, "files": [{"sha": "18600498e1c46ce78baa382b779cc1517734d4ff", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206741bf57361efcd04243b9e2e6275701c15c76/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206741bf57361efcd04243b9e2e6275701c15c76/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=206741bf57361efcd04243b9e2e6275701c15c76", "patch": "@@ -1840,7 +1840,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box serde_api::SerdeApi);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;\n-    store.register_late_pass(move || box types::Types::new(vec_box_size_threshold, type_complexity_threshold));\n+    let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n+    store.register_late_pass(move || box types::Types::new(\n+        vec_box_size_threshold,\n+        type_complexity_threshold,\n+        avoid_breaking_exported_api,\n+    ));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n     store.register_late_pass(|| box needless_bitwise_bool::NeedlessBitwiseBool);\n     store.register_late_pass(|| box eq_op::EqOp);"}, {"sha": "9588de8459cfe3f337b2351cc6afc5b6c6e8b800", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/206741bf57361efcd04243b9e2e6275701c15c76/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206741bf57361efcd04243b9e2e6275701c15c76/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=206741bf57361efcd04243b9e2e6275701c15c76", "patch": "@@ -295,6 +295,7 @@ declare_clippy_lint! {\n pub struct Types {\n     vec_box_size_threshold: u64,\n     type_complexity_threshold: u64,\n+    avoid_breaking_exported_api: bool,\n }\n \n impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n@@ -308,19 +309,31 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n             false\n         };\n \n+        let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(id));\n+\n         self.check_fn_decl(\n             cx,\n             decl,\n             CheckTyContext {\n                 is_in_trait_impl,\n+                is_exported,\n                 ..CheckTyContext::default()\n             },\n         );\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let is_exported = cx.access_levels.is_exported(item.def_id);\n+\n         match item.kind {\n-            ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(cx, ty, CheckTyContext::default()),\n+            ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(\n+                cx,\n+                ty,\n+                CheckTyContext {\n+                    is_exported,\n+                    ..CheckTyContext::default()\n+                },\n+            ),\n             // functions, enums, structs, impls and traits are covered\n             _ => (),\n         }\n@@ -342,15 +355,31 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n-        self.check_ty(cx, field.ty, CheckTyContext::default());\n+        let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(field.hir_id));\n+\n+        self.check_ty(\n+            cx,\n+            field.ty,\n+            CheckTyContext {\n+                is_exported,\n+                ..CheckTyContext::default()\n+            },\n+        );\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &TraitItem<'_>) {\n+        let is_exported = cx.access_levels.is_exported(item.def_id);\n+\n+        let context = CheckTyContext {\n+            is_exported,\n+            ..CheckTyContext::default()\n+        };\n+\n         match item.kind {\n             TraitItemKind::Const(ty, _) | TraitItemKind::Type(_, Some(ty)) => {\n-                self.check_ty(cx, ty, CheckTyContext::default());\n+                self.check_ty(cx, ty, context);\n             },\n-            TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, sig.decl, CheckTyContext::default()),\n+            TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, sig.decl, context),\n             TraitItemKind::Type(..) => (),\n         }\n     }\n@@ -370,10 +399,11 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n }\n \n impl Types {\n-    pub fn new(vec_box_size_threshold: u64, type_complexity_threshold: u64) -> Self {\n+    pub fn new(vec_box_size_threshold: u64, type_complexity_threshold: u64, avoid_breaking_exported_api: bool) -> Self {\n         Self {\n             vec_box_size_threshold,\n             type_complexity_threshold,\n+            avoid_breaking_exported_api,\n         }\n     }\n \n@@ -410,17 +440,24 @@ impl Types {\n                 let hir_id = hir_ty.hir_id;\n                 let res = cx.qpath_res(qpath, hir_id);\n                 if let Some(def_id) = res.opt_def_id() {\n-                    let mut triggered = false;\n-                    triggered |= box_vec::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= redundant_allocation::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= rc_buffer::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n-                    triggered |= option_option::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= linked_list::check(cx, hir_ty, def_id);\n-                    triggered |= rc_mutex::check(cx, hir_ty, qpath, def_id);\n-\n-                    if triggered {\n-                        return;\n+                    if self.is_type_change_allowed(context) {\n+                        // All lints that are being checked in this block are guarded by\n+                        // the `avoid_breaking_exported_api` configuration. When adding a\n+                        // new lint, please also add the name to the configuration documentation\n+                        // in `clippy_lints::utils::conf.rs`\n+\n+                        let mut triggered = false;\n+                        triggered |= box_vec::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= redundant_allocation::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= rc_buffer::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n+                        triggered |= option_option::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= linked_list::check(cx, hir_ty, def_id);\n+                        triggered |= rc_mutex::check(cx, hir_ty, qpath, def_id);\n+\n+                        if triggered {\n+                            return;\n+                        }\n                     }\n                 }\n                 match *qpath {\n@@ -487,11 +524,21 @@ impl Types {\n             _ => {},\n         }\n     }\n+\n+    /// This function checks if the type is allowed to change in the current context\n+    /// based on the `avoid_breaking_exported_api` configuration\n+    fn is_type_change_allowed(&self, context: CheckTyContext) -> bool {\n+        !(context.is_exported && self.avoid_breaking_exported_api)\n+    }\n }\n \n+#[allow(clippy::struct_excessive_bools)]\n #[derive(Clone, Copy, Default)]\n struct CheckTyContext {\n     is_in_trait_impl: bool,\n+    /// `true` for types on local variables.\n     is_local: bool,\n+    /// `true` for types that are part of the public API.\n+    is_exported: bool,\n     is_nested_call: bool,\n }"}, {"sha": "9ee2e3024520bda298fb1d33d73a66d8dc39051e", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206741bf57361efcd04243b9e2e6275701c15c76/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206741bf57361efcd04243b9e2e6275701c15c76/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=206741bf57361efcd04243b9e2e6275701c15c76", "patch": "@@ -132,7 +132,7 @@ macro_rules! define_Conf {\n \n // N.B., this macro is parsed by util/lintlib.py\n define_Conf! {\n-    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION.\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_VEC, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),"}]}