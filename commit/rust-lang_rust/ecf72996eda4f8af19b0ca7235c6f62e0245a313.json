{"sha": "ecf72996eda4f8af19b0ca7235c6f62e0245a313", "node_id": "C_kwDOAAsO6NoAKGVjZjcyOTk2ZWRhNGY4YWYxOWIwY2E3MjM1YzZmNjJlMDI0NWEzMTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-21T23:52:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-21T23:52:58Z"}, "message": "Auto merge of #93173 - matthiaskrgr:rollup-49bj7ta, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #91965 (Add more granular `--exclude` in `x.py`)\n - #92467 (Ensure that early-bound function lifetimes are always 'local')\n - #92586 (Set the allocation MIN_ALIGN for espidf to 4.)\n - #92835 (Improve error message for key=\"value\" cfg arguments.)\n - #92843 (Improve string concatenation suggestion)\n - #92963 (Implement tuple array diagnostic)\n - #93046 (Use let_else in even more places)\n - #93109 (Improve `Arc` and `Rc` documentation)\n - #93134 (delete `Stdin::split` forwarder)\n - #93139 (rustdoc: fix overflow-wrap for table layouts)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "590fe3638c9902313e643ff72a0723fe277694e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590fe3638c9902313e643ff72a0723fe277694e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "html_url": "https://github.com/rust-lang/rust/commit/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d29dcdce9b9e838635eb0adefd9b8b1588410b", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d29dcdce9b9e838635eb0adefd9b8b1588410b", "html_url": "https://github.com/rust-lang/rust/commit/17d29dcdce9b9e838635eb0adefd9b8b1588410b"}, {"sha": "26e9357faed8bf79d9881bafd49c984107485ede", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e9357faed8bf79d9881bafd49c984107485ede", "html_url": "https://github.com/rust-lang/rust/commit/26e9357faed8bf79d9881bafd49c984107485ede"}], "stats": {"total": 1152, "additions": 643, "deletions": 509}, "files": [{"sha": "16a903d5e593f75dd306d4859ee929aec251d94e", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -180,8 +180,9 @@ pub enum RegionClassification {\n     /// anywhere. There is only one, `'static`.\n     Global,\n \n-    /// An **external** region is only relevant for closures. In that\n-    /// case, it refers to regions that are free in the closure type\n+    /// An **external** region is only relevant for\n+    /// closures, generators, and inline consts. In that\n+    /// case, it refers to regions that are free in the type\n     /// -- basically, something bound in the surrounding context.\n     ///\n     /// Consider this example:\n@@ -198,8 +199,8 @@ pub enum RegionClassification {\n     /// Here, the lifetimes `'a` and `'b` would be **external** to the\n     /// closure.\n     ///\n-    /// If we are not analyzing a closure, there are no external\n-    /// lifetimes.\n+    /// If we are not analyzing a closure/generator/inline-const,\n+    /// there are no external lifetimes.\n     External,\n \n     /// A **local** lifetime is one about which we know the full set\n@@ -424,22 +425,30 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let typeck_root_def_id = self.infcx.tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n-        // If this is a closure or generator, then the late-bound regions from the enclosing\n-        // function are actually external regions to us. For example, here, 'a is not local\n-        // to the closure c (although it is local to the fn foo):\n-        // fn foo<'a>() {\n-        //     let c = || { let x: &'a u32 = ...; }\n-        // }\n-        if self.mir_def.did.to_def_id() != typeck_root_def_id {\n+        // If this is is a 'root' body (not a closure/generator/inline const), then\n+        // there are no extern regions, so the local regions start at the same\n+        // position as the (empty) sub-list of extern regions\n+        let first_local_index = if self.mir_def.did.to_def_id() == typeck_root_def_id {\n+            first_extern_index\n+        } else {\n+            // If this is a closure, generator, or inline-const, then the late-bound regions from the enclosing\n+            // function are actually external regions to us. For example, here, 'a is not local\n+            // to the closure c (although it is local to the fn foo):\n+            // fn foo<'a>() {\n+            //     let c = || { let x: &'a u32 = ...; }\n+            // }\n             self.infcx\n-                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices)\n-        }\n-\n-        let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n+            // Any regions created during the execution of `defining_ty` or during the above\n+            // late-bound region replacement are all considered 'extern' regions\n+            self.infcx.num_region_vars()\n+        };\n \n         // \"Liberate\" the late-bound regions. These correspond to\n         // \"local\" free regions.\n-        let first_local_index = self.infcx.num_region_vars();\n+\n+        let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n+\n         let inputs_and_output = self.infcx.replace_bound_regions_with_nll_infer_vars(\n             FR,\n             self.mir_def.did,"}, {"sha": "c90e43a4060f7e48895be1e8cfc39c213022746b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1493,7 +1493,7 @@ fn generator_layout_and_saved_local_names<'tcx>(\n \n     let state_arg = mir::Local::new(1);\n     for var in &body.var_debug_info {\n-        let place = if let mir::VarDebugInfoContents::Place(p) = var.value { p } else { continue };\n+        let mir::VarDebugInfoContents::Place(place) = &var.value else { continue };\n         if place.local != state_arg {\n             continue;\n         }"}, {"sha": "f0612eaba8089f314aa631ec3555b7468c286424", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,6 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n+#![feature(let_else)]\n #![feature(extern_types)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]"}, {"sha": "263435619590e1ba78a938f701318bd2f3d1b74d", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -124,7 +124,16 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     Err(errs) => errs.into_iter().for_each(|mut err| err.cancel()),\n                 }\n \n-                error!(r#\"expected `key` or `key=\"value\"`\"#);\n+                // If the user tried to use a key=\"value\" flag, but is missing the quotes, provide\n+                // a hint about how to resolve this.\n+                if s.contains(\"=\") && !s.contains(\"=\\\"\") && !s.ends_with(\"\\\"\") {\n+                    error!(concat!(\n+                        r#\"expected `key` or `key=\"value\"`, ensure escaping is appropriate\"#,\n+                        r#\" for your shell, try 'key=\"value\"' or key=\\\"value\\\"\"#\n+                    ));\n+                } else {\n+                    error!(r#\"expected `key` or `key=\"value\"`\"#);\n+                }\n             })\n             .collect::<CrateConfig>();\n         cfg.into_iter().map(|(a, b)| (a.to_string(), b.map(|b| b.to_string()))).collect()"}, {"sha": "b911b108a735d3c4974b11659e1a7e09e26bc096", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1,5 +1,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n+#![feature(let_else)]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n #![feature(nll)]"}, {"sha": "6d9183eda9d32e9a00c6fa0fbc6773b96640a7c0", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -717,57 +717,57 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n     }\n \n     fn should_ignore_fn(ret_ty: &ast::FnRetTy) -> bool {\n-        if let ast::FnRetTy::Ty(ref ty) = ret_ty {\n-            fn involves_impl_trait(ty: &ast::Ty) -> bool {\n-                match ty.kind {\n-                    ast::TyKind::ImplTrait(..) => true,\n-                    ast::TyKind::Slice(ref subty)\n-                    | ast::TyKind::Array(ref subty, _)\n-                    | ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. })\n-                    | ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. })\n-                    | ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n-                    ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n-                    ast::TyKind::Path(_, ref path) => {\n-                        path.segments.iter().any(|seg| match seg.args.as_deref() {\n-                            None => false,\n-                            Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n-                                data.args.iter().any(|arg| match arg {\n-                                    ast::AngleBracketedArg::Arg(arg) => match arg {\n-                                        ast::GenericArg::Type(ty) => involves_impl_trait(ty),\n-                                        ast::GenericArg::Lifetime(_)\n-                                        | ast::GenericArg::Const(_) => false,\n-                                    },\n-                                    ast::AngleBracketedArg::Constraint(c) => match c.kind {\n-                                        ast::AssocConstraintKind::Bound { .. } => true,\n-                                        ast::AssocConstraintKind::Equality { ref term } => {\n-                                            match term {\n-                                                Term::Ty(ty) => involves_impl_trait(ty),\n-                                                // FIXME(...): This should check if the constant\n-                                                // involves a trait impl, but for now ignore.\n-                                                Term::Const(_) => false,\n-                                            }\n+        let ast::FnRetTy::Ty(ref ty) = ret_ty else {\n+            return false;\n+        };\n+        fn involves_impl_trait(ty: &ast::Ty) -> bool {\n+            match ty.kind {\n+                ast::TyKind::ImplTrait(..) => true,\n+                ast::TyKind::Slice(ref subty)\n+                | ast::TyKind::Array(ref subty, _)\n+                | ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. })\n+                | ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. })\n+                | ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n+                ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n+                ast::TyKind::Path(_, ref path) => {\n+                    path.segments.iter().any(|seg| match seg.args.as_deref() {\n+                        None => false,\n+                        Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n+                            data.args.iter().any(|arg| match arg {\n+                                ast::AngleBracketedArg::Arg(arg) => match arg {\n+                                    ast::GenericArg::Type(ty) => involves_impl_trait(ty),\n+                                    ast::GenericArg::Lifetime(_) | ast::GenericArg::Const(_) => {\n+                                        false\n+                                    }\n+                                },\n+                                ast::AngleBracketedArg::Constraint(c) => match c.kind {\n+                                    ast::AssocConstraintKind::Bound { .. } => true,\n+                                    ast::AssocConstraintKind::Equality { ref term } => {\n+                                        match term {\n+                                            Term::Ty(ty) => involves_impl_trait(ty),\n+                                            // FIXME(...): This should check if the constant\n+                                            // involves a trait impl, but for now ignore.\n+                                            Term::Const(_) => false,\n                                         }\n-                                    },\n-                                })\n-                            }\n-                            Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n-                                any_involves_impl_trait(data.inputs.iter())\n-                                    || ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n-                            }\n-                        })\n-                    }\n-                    _ => false,\n+                                    }\n+                                },\n+                            })\n+                        }\n+                        Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n+                            any_involves_impl_trait(data.inputs.iter())\n+                                || ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n+                        }\n+                    })\n                 }\n+                _ => false,\n             }\n+        }\n \n-            fn any_involves_impl_trait<'a, I: Iterator<Item = &'a P<ast::Ty>>>(mut it: I) -> bool {\n-                it.any(|subty| involves_impl_trait(subty))\n-            }\n-\n-            involves_impl_trait(ty)\n-        } else {\n-            false\n+        fn any_involves_impl_trait<'a, I: Iterator<Item = &'a P<ast::Ty>>>(mut it: I) -> bool {\n+            it.any(|subty| involves_impl_trait(subty))\n         }\n+\n+        involves_impl_trait(ty)\n     }\n \n     fn is_sig_const(sig: &ast::FnSig) -> bool {"}, {"sha": "3294f2cf64172c65a0beb22e22b4c0eab8ea29e9", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1347,23 +1347,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let mut otherwise = None;\n         for match_pair in match_pairs {\n-            if let PatKind::Or { ref pats } = *match_pair.pattern.kind {\n-                let or_span = match_pair.pattern.span;\n-                let place = match_pair.place;\n-\n-                first_candidate.visit_leaves(|leaf_candidate| {\n-                    self.test_or_pattern(\n-                        leaf_candidate,\n-                        &mut otherwise,\n-                        pats,\n-                        or_span,\n-                        place.clone(),\n-                        fake_borrows,\n-                    );\n-                });\n-            } else {\n+            let PatKind::Or { ref pats } = &*match_pair.pattern.kind else {\n                 bug!(\"Or-patterns should have been sorted to the end\");\n-            }\n+            };\n+            let or_span = match_pair.pattern.span;\n+            let place = match_pair.place;\n+\n+            first_candidate.visit_leaves(|leaf_candidate| {\n+                self.test_or_pattern(\n+                    leaf_candidate,\n+                    &mut otherwise,\n+                    pats,\n+                    or_span,\n+                    place.clone(),\n+                    fake_borrows,\n+                );\n+            });\n         }\n \n         let remainder_start = otherwise.unwrap_or_else(|| self.cfg.start_new_block());"}, {"sha": "f4bf28bfa5ce294b2202608148810f263776c0ba", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -88,11 +88,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         switch_ty: Ty<'tcx>,\n         options: &mut FxIndexMap<&'tcx ty::Const<'tcx>, u128>,\n     ) -> bool {\n-        let match_pair = match candidate.match_pairs.iter().find(|mp| mp.place == *test_place) {\n-            Some(match_pair) => match_pair,\n-            _ => {\n-                return false;\n-            }\n+        let Some(match_pair) = candidate.match_pairs.iter().find(|mp| mp.place == *test_place) else {\n+            return false;\n         };\n \n         match *match_pair.pattern.kind {"}, {"sha": "7e1e5c788052bfb2f342f3abef5b7b745a25955e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1171,9 +1171,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ident: Symbol,\n         kind: &AssocItemKind,\n     ) -> Option<Symbol> {\n-        let module = if let Some((module, _)) = self.current_trait_ref {\n-            module\n-        } else {\n+        let Some((module, _)) = &self.current_trait_ref else {\n             return None;\n         };\n         if ident == kw::Underscore {"}, {"sha": "4c7bdb33fb87abbb9453f496758fef367fc3582c", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1000,46 +1000,45 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 // `fn foo<'a>() -> MyAnonTy<'a> { ... }`\n                 //          ^                 ^this gets resolved in the current scope\n                 for lifetime in lifetimes {\n-                    if let hir::GenericArg::Lifetime(lifetime) = lifetime {\n-                        self.visit_lifetime(lifetime);\n+                    let hir::GenericArg::Lifetime(lifetime) = lifetime else {\n+                        continue\n+                    };\n+                    self.visit_lifetime(lifetime);\n+\n+                    // Check for predicates like `impl for<'a> Trait<impl OtherTrait<'a>>`\n+                    // and ban them. Type variables instantiated inside binders aren't\n+                    // well-supported at the moment, so this doesn't work.\n+                    // In the future, this should be fixed and this error should be removed.\n+                    let def = self.map.defs.get(&lifetime.hir_id).cloned();\n+                    let Some(Region::LateBound(_, _, def_id, _)) = def else {\n+                        continue\n+                    };\n+                    let Some(def_id) = def_id.as_local() else {\n+                        continue\n+                    };\n+                    let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    // Ensure that the parent of the def is an item, not HRTB\n+                    let parent_id = self.tcx.hir().get_parent_node(hir_id);\n+                    // FIXME(cjgillot) Can this check be replaced by\n+                    // `let parent_is_item = parent_id.is_owner();`?\n+                    let parent_is_item = if let Some(parent_def_id) = parent_id.as_owner() {\n+                        matches!(self.tcx.hir().krate().owners.get(parent_def_id), Some(Some(_)),)\n+                    } else {\n+                        false\n+                    };\n \n-                        // Check for predicates like `impl for<'a> Trait<impl OtherTrait<'a>>`\n-                        // and ban them. Type variables instantiated inside binders aren't\n-                        // well-supported at the moment, so this doesn't work.\n-                        // In the future, this should be fixed and this error should be removed.\n-                        let def = self.map.defs.get(&lifetime.hir_id).cloned();\n-                        if let Some(Region::LateBound(_, _, def_id, _)) = def {\n-                            if let Some(def_id) = def_id.as_local() {\n-                                let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                                // Ensure that the parent of the def is an item, not HRTB\n-                                let parent_id = self.tcx.hir().get_parent_node(hir_id);\n-                                // FIXME(cjgillot) Can this check be replaced by\n-                                // `let parent_is_item = parent_id.is_owner();`?\n-                                let parent_is_item =\n-                                    if let Some(parent_def_id) = parent_id.as_owner() {\n-                                        matches!(\n-                                            self.tcx.hir().krate().owners.get(parent_def_id),\n-                                            Some(Some(_)),\n-                                        )\n-                                    } else {\n-                                        false\n-                                    };\n-\n-                                if !parent_is_item {\n-                                    if !self.trait_definition_only {\n-                                        struct_span_err!(\n-                                            self.tcx.sess,\n-                                            lifetime.span,\n-                                            E0657,\n-                                            \"`impl Trait` can only capture lifetimes \\\n-                                                bound at the fn or impl level\"\n-                                        )\n-                                        .emit();\n-                                    }\n-                                    self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n-                                }\n-                            }\n+                    if !parent_is_item {\n+                        if !self.trait_definition_only {\n+                            struct_span_err!(\n+                                self.tcx.sess,\n+                                lifetime.span,\n+                                E0657,\n+                                \"`impl Trait` can only capture lifetimes \\\n+                                    bound at the fn or impl level\"\n+                            )\n+                            .emit();\n                         }\n+                        self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                     }\n                 }\n "}, {"sha": "3fb42a2ec4a1d73045d89d9904db5959407abe40", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -840,39 +840,38 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n             for refs_remaining in 0..refs_number {\n-                if let ty::Ref(_, inner_ty, _) = suggested_ty.kind() {\n-                    suggested_ty = inner_ty;\n+                let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n+                    break;\n+                };\n+                suggested_ty = inner_ty;\n \n-                    let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n-                        obligation.param_env,\n-                        trait_ref,\n-                        suggested_ty,\n-                    );\n+                let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n+                    obligation.param_env,\n+                    trait_ref,\n+                    suggested_ty,\n+                );\n \n-                    if self.predicate_may_hold(&new_obligation) {\n-                        let sp = self\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n+                if self.predicate_may_hold(&new_obligation) {\n+                    let sp = self\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n \n-                        let remove_refs = refs_remaining + 1;\n+                    let remove_refs = refs_remaining + 1;\n \n-                        let msg = if remove_refs == 1 {\n-                            \"consider removing the leading `&`-reference\".to_string()\n-                        } else {\n-                            format!(\"consider removing {} leading `&`-references\", remove_refs)\n-                        };\n+                    let msg = if remove_refs == 1 {\n+                        \"consider removing the leading `&`-reference\".to_string()\n+                    } else {\n+                        format!(\"consider removing {} leading `&`-references\", remove_refs)\n+                    };\n \n-                        err.span_suggestion_short(\n-                            sp,\n-                            &msg,\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        break;\n-                    }\n-                } else {\n+                    err.span_suggestion_short(\n+                        sp,\n+                        &msg,\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n                     break;\n                 }\n             }"}, {"sha": "0fea0afb572c9368f41cda8b8ccd6d1427c44b16", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -307,6 +307,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Give appropriate suggestion when encountering `[(\"a\", 0) (\"b\", 1)]`, where the\n+    /// likely intention is to create an array containing tuples.\n+    fn maybe_suggest_bad_array_definition(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a>,\n+        call_expr: &'tcx hir::Expr<'tcx>,\n+        callee_expr: &'tcx hir::Expr<'tcx>,\n+    ) -> bool {\n+        let hir_id = self.tcx.hir().get_parent_node(call_expr.hir_id);\n+        let parent_node = self.tcx.hir().get(hir_id);\n+        if let (\n+            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Array(_), .. }),\n+            hir::ExprKind::Tup(exp),\n+            hir::ExprKind::Call(_, args),\n+        ) = (parent_node, &callee_expr.kind, &call_expr.kind)\n+        {\n+            if args.len() == exp.len() {\n+                let start = callee_expr.span.shrink_to_hi();\n+                err.span_suggestion(\n+                    start,\n+                    \"consider separating array elements with a comma\",\n+                    \",\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     fn confirm_builtin_call(\n         &self,\n         call_expr: &'tcx hir::Expr<'tcx>,\n@@ -422,7 +452,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => Res::Err,\n                 };\n \n-                err.span_label(call_expr.span, \"call expression requires function\");\n+                if !self.maybe_suggest_bad_array_definition(&mut err, call_expr, callee_expr) {\n+                    err.span_label(call_expr.span, \"call expression requires function\");\n+                }\n \n                 if let Some(span) = self.tcx.hir().res_span(def) {\n                     let callee_ty = callee_ty.to_string();"}, {"sha": "74516acbfcff34187cf5dba5acf3ae0175d181e0", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 38, "deletions": 55, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -549,16 +549,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         is_assign: IsAssign,\n         op: hir::BinOp,\n     ) -> bool {\n-        let source_map = self.tcx.sess.source_map();\n-        let remove_borrow_msg = \"String concatenation appends the string on the right to the \\\n-                                 string on the left and may require reallocation. This \\\n-                                 requires ownership of the string on the left\";\n-\n-        let msg = \"`to_owned()` can be used to create an owned `String` \\\n-                   from a string reference. String concatenation \\\n-                   appends the string on the right to the string \\\n-                   on the left and may require reallocation. This \\\n-                   requires ownership of the string on the left\";\n+        let str_concat_note = \"string concatenation requires an owned `String` on the left\";\n+        let rm_borrow_msg = \"remove the borrow to obtain an owned `String`\";\n+        let to_owned_msg = \"create an owned `String` from a string reference\";\n \n         let string_type = self.tcx.get_diagnostic_item(sym::String);\n         let is_std_string = |ty: Ty<'tcx>| match ty.ty_adt_def() {\n@@ -574,31 +567,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) =>\n             {\n                 if let IsAssign::No = is_assign { // Do not supply this message if `&str += &str`\n-                    err.span_label(\n-                        op.span,\n-                        \"`+` cannot be used to concatenate two `&str` strings\",\n-                    );\n-                    match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => {\n-                            err.span_suggestion(\n-                                lhs_expr.span,\n-                                if lstring.starts_with('&') {\n-                                    remove_borrow_msg\n-                                } else {\n-                                    msg\n-                                },\n-                                if let Some(stripped) = lstring.strip_prefix('&') {\n-                                    // let a = String::new();\n-                                    // let _ = &a + \"bar\";\n-                                    stripped.to_string()\n-                                } else {\n-                                    format!(\"{}.to_owned()\", lstring)\n-                                },\n-                                Applicability::MachineApplicable,\n-                            )\n-                        }\n-                        _ => err.help(msg),\n-                    };\n+                    err.span_label(op.span, \"`+` cannot be used to concatenate two `&str` strings\");\n+                    err.note(str_concat_note);\n+                    if let hir::ExprKind::AddrOf(_, _, lhs_inner_expr) = lhs_expr.kind {\n+                        err.span_suggestion_verbose(\n+                            lhs_expr.span.until(lhs_inner_expr.span),\n+                            rm_borrow_msg,\n+                            \"\".to_owned(),\n+                            Applicability::MachineApplicable\n+                        );\n+                    } else {\n+                        err.span_suggestion_verbose(\n+                            lhs_expr.span.shrink_to_hi(),\n+                            to_owned_msg,\n+                            \".to_owned()\".to_owned(),\n+                            Applicability::MachineApplicable\n+                        );\n+                    }\n                 }\n                 true\n             }\n@@ -609,32 +594,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     op.span,\n                     \"`+` cannot be used to concatenate a `&str` with a `String`\",\n                 );\n-                match (\n-                    source_map.span_to_snippet(lhs_expr.span),\n-                    source_map.span_to_snippet(rhs_expr.span),\n-                    is_assign,\n-                ) {\n-                    (Ok(l), Ok(r), IsAssign::No) => {\n-                        let to_string = if let Some(stripped) = l.strip_prefix('&') {\n-                            // let a = String::new(); let b = String::new();\n-                            // let _ = &a + b;\n-                            stripped.to_string()\n+                match is_assign {\n+                    IsAssign::No => {\n+                        let sugg_msg;\n+                        let lhs_sugg = if let hir::ExprKind::AddrOf(_, _, lhs_inner_expr) = lhs_expr.kind {\n+                            sugg_msg = \"remove the borrow on the left and add one on the right\";\n+                            (lhs_expr.span.until(lhs_inner_expr.span), \"\".to_owned())\n                         } else {\n-                            format!(\"{}.to_owned()\", l)\n+                            sugg_msg = \"create an owned `String` on the left and add a borrow on the right\";\n+                            (lhs_expr.span.shrink_to_hi(), \".to_owned()\".to_owned())\n                         };\n-                        err.multipart_suggestion(\n-                            msg,\n-                            vec![\n-                                (lhs_expr.span, to_string),\n-                                (rhs_expr.span, format!(\"&{}\", r)),\n-                            ],\n+                        let suggestions = vec![\n+                            lhs_sugg,\n+                            (rhs_expr.span.shrink_to_lo(), \"&\".to_owned()),\n+                        ];\n+                        err.multipart_suggestion_verbose(\n+                            sugg_msg,\n+                            suggestions,\n                             Applicability::MachineApplicable,\n                         );\n                     }\n-                    _ => {\n-                        err.help(msg);\n+                    IsAssign::Yes => {\n+                        err.note(str_concat_note);\n                     }\n-                };\n+                }\n                 true\n             }\n             _ => false,"}, {"sha": "bf5fcfdcbf5fabf3edd97a79f375b90324ac5ff3", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -451,12 +451,10 @@ impl<T> Rc<T> {\n     ///\n     /// let mut five = Rc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -543,12 +541,10 @@ impl<T> Rc<T> {\n     ///\n     /// let mut five = Rc::<u32>::try_new_uninit()?;\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5);\n     /// # Ok::<(), std::alloc::AllocError>(())\n@@ -660,14 +656,13 @@ impl<T> Rc<[T]> {\n     ///\n     /// let mut values = Rc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Rc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n@@ -738,12 +733,10 @@ impl<T> Rc<mem::MaybeUninit<T>> {\n     ///\n     /// let mut five = Rc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -777,14 +770,13 @@ impl<T> Rc<[mem::MaybeUninit<T>]> {\n     ///\n     /// let mut values = Rc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Rc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```"}, {"sha": "ab8a44b2147431e745635cde38b93435b8be9dd2", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -437,12 +437,10 @@ impl<T> Arc<T> {\n     ///\n     /// let mut five = Arc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -545,12 +543,10 @@ impl<T> Arc<T> {\n     ///\n     /// let mut five = Arc::<u32>::try_new_uninit()?;\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5);\n     /// # Ok::<(), std::alloc::AllocError>(())\n@@ -652,14 +648,13 @@ impl<T> Arc<[T]> {\n     ///\n     /// let mut values = Arc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Arc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n@@ -730,12 +725,10 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     ///\n     /// let mut five = Arc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -770,14 +763,13 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     ///\n     /// let mut values = Arc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Arc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```"}, {"sha": "66fee2fe548374dbd02eaaf7d62fd5f5a7f34282", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -973,7 +973,8 @@ impl<'a> From<&'a CString> for Cow<'a, CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n-    /// Converts a [`CString`] into an <code>[Arc]<[CStr]></code> without copying or allocating.\n+    /// Converts a [`CString`] into an <code>[Arc]<[CStr]></code> by moving the [`CString`]\n+    /// data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: CString) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.into_inner());\n@@ -992,7 +993,8 @@ impl From<&CStr> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Rc<CStr> {\n-    /// Converts a [`CString`] into an <code>[Rc]<[CStr]></code> without copying or allocating.\n+    /// Converts a [`CString`] into an <code>[Rc]<[CStr]></code> by moving the [`CString`]\n+    /// data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: CString) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.into_inner());"}, {"sha": "81f72e34d93889fdd1a4216abaa35af97a09e6e5", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -989,7 +989,8 @@ impl Clone for Box<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Arc<OsStr> {\n-    /// Converts an [`OsString`] into an <code>[Arc]<[OsStr]></code> without copying or allocating.\n+    /// Converts an [`OsString`] into an <code>[Arc]<[OsStr]></code> by moving the [`OsString`]\n+    /// data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: OsString) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();\n@@ -1008,7 +1009,8 @@ impl From<&OsStr> for Arc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Rc<OsStr> {\n-    /// Converts an [`OsString`] into an <code>[Rc]<[OsStr]></code> without copying or allocating.\n+    /// Converts an [`OsString`] into an <code>[Rc]<[OsStr]></code> by moving the [`OsString`]\n+    /// data into a new [`Rc`] buffer.\n     #[inline]\n     fn from(s: OsString) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();"}, {"sha": "3d6de20d8609142a50544cf4331a9e87e68746d3", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ use crate::io::prelude::*;\n \n use crate::cell::{Cell, RefCell};\n use crate::fmt;\n-use crate::io::{self, BufReader, IoSlice, IoSliceMut, LineWriter, Lines, Split};\n+use crate::io::{self, BufReader, IoSlice, IoSliceMut, LineWriter, Lines};\n use crate::lazy::SyncOnceCell;\n use crate::pin::Pin;\n use crate::sync::atomic::{AtomicBool, Ordering};\n@@ -465,29 +465,6 @@ impl Stdin {\n     pub fn lines(self) -> Lines<StdinLock<'static>> {\n         self.into_locked().lines()\n     }\n-\n-    /// Consumes this handle and returns an iterator over input bytes,\n-    /// split at the specified byte value.\n-    ///\n-    /// For detailed semantics of this method, see the documentation on\n-    /// [`BufRead::split`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```no_run\n-    /// #![feature(stdin_forwarders)]\n-    /// use std::io;\n-    ///\n-    /// let splits = io::stdin().split(b'-');\n-    /// for split in splits {\n-    ///     println!(\"got a chunk: {}\", String::from_utf8_lossy(&split.unwrap()));\n-    /// }\n-    /// ```\n-    #[must_use = \"`self` will be dropped if the result is not used\"]\n-    #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n-    pub fn split(self, byte: u8) -> Split<StdinLock<'static>> {\n-        self.into_locked().split(byte)\n-    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]"}, {"sha": "558333518f1d4bd68f31580c4e0dd779986d46dc", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1766,7 +1766,8 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n-    /// Converts a [`PathBuf`] into an [`Arc`] by moving the [`PathBuf`] data into a new [`Arc`] buffer.\n+    /// Converts a [`PathBuf`] into an <code>[Arc]<[Path]></code> by moving the [`PathBuf`] data\n+    /// into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1786,7 +1787,8 @@ impl From<&Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n-    /// Converts a [`PathBuf`] into an [`Rc`] by moving the [`PathBuf`] data into a new `Rc` buffer.\n+    /// Converts a [`PathBuf`] into an <code>[Rc]<[Path]></code> by moving the [`PathBuf`] data into\n+    /// a new [`Rc`] buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1796,7 +1798,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Rc<Path> {\n-    /// Converts a [`Path`] into an [`Rc`] by copying the [`Path`] data into a new `Rc` buffer.\n+    /// Converts a [`Path`] into an [`Rc`] by copying the [`Path`] data into a new [`Rc`] buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());"}, {"sha": "e06eaf6db1a7734c9ac0e07cb27c39410d1b093b", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -14,8 +14,8 @@ use crate::ptr;\n     target_arch = \"asmjs\",\n     target_arch = \"wasm32\",\n     target_arch = \"hexagon\",\n-    target_arch = \"riscv32\",\n-    target_arch = \"xtensa\"\n+    all(target_arch = \"riscv32\", not(target_os = \"espidf\")),\n+    all(target_arch = \"xtensa\", not(target_os = \"espidf\")),\n )))]\n pub const MIN_ALIGN: usize = 8;\n #[cfg(all(any(\n@@ -28,6 +28,12 @@ pub const MIN_ALIGN: usize = 8;\n     target_arch = \"wasm64\",\n )))]\n pub const MIN_ALIGN: usize = 16;\n+// The allocator on the esp-idf platform guarentees 4 byte alignment.\n+#[cfg(all(any(\n+    all(target_arch = \"riscv32\", target_os = \"espidf\"),\n+    all(target_arch = \"xtensa\", target_os = \"espidf\"),\n+)))]\n+pub const MIN_ALIGN: usize = 4;\n \n pub unsafe fn realloc_fallback(\n     alloc: &System,"}, {"sha": "5cab3e8be1039f9917d609c5c0e9498d0ffe5ca8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 135, "deletions": 35, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ use std::fmt::Debug;\n use std::fs;\n use std::hash::Hash;\n use std::ops::Deref;\n-use std::path::{Path, PathBuf};\n+use std::path::{Component, Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n@@ -105,6 +105,44 @@ struct StepDescription {\n     should_run: fn(ShouldRun<'_>) -> ShouldRun<'_>,\n     make_run: fn(RunConfig<'_>),\n     name: &'static str,\n+    kind: Kind,\n+}\n+\n+#[derive(Clone, PartialOrd, Ord, PartialEq, Eq)]\n+pub struct TaskPath {\n+    pub path: PathBuf,\n+    pub kind: Option<Kind>,\n+}\n+\n+impl TaskPath {\n+    pub fn parse(path: impl Into<PathBuf>) -> TaskPath {\n+        let mut kind = None;\n+        let mut path = path.into();\n+\n+        let mut components = path.components();\n+        if let Some(Component::Normal(os_str)) = components.next() {\n+            if let Some(str) = os_str.to_str() {\n+                if let Some((found_kind, found_prefix)) = str.split_once(\"::\") {\n+                    if found_kind.is_empty() {\n+                        panic!(\"empty kind in task path {}\", path.display());\n+                    }\n+                    kind = Some(Kind::parse(found_kind));\n+                    path = Path::new(found_prefix).join(components.as_path());\n+                }\n+            }\n+        }\n+\n+        TaskPath { path, kind }\n+    }\n+}\n+\n+impl Debug for TaskPath {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        if let Some(kind) = &self.kind {\n+            write!(f, \"{}::\", kind.as_str())?;\n+        }\n+        write!(f, \"{}\", self.path.display())\n+    }\n }\n \n /// Collection of paths used to match a task rule.\n@@ -115,50 +153,61 @@ pub enum PathSet {\n     /// These are generally matched as a path suffix. For example, a\n     /// command-line value of `libstd` will match if `src/libstd` is in the\n     /// set.\n-    Set(BTreeSet<PathBuf>),\n+    Set(BTreeSet<TaskPath>),\n     /// A \"suite\" of paths.\n     ///\n     /// These can match as a path suffix (like `Set`), or as a prefix. For\n     /// example, a command-line value of `src/test/ui/abi/variadic-ffi.rs`\n     /// will match `src/test/ui`. A command-line value of `ui` would also\n     /// match `src/test/ui`.\n-    Suite(PathBuf),\n+    Suite(TaskPath),\n }\n \n impl PathSet {\n     fn empty() -> PathSet {\n         PathSet::Set(BTreeSet::new())\n     }\n \n-    fn one<P: Into<PathBuf>>(path: P) -> PathSet {\n+    fn one<P: Into<PathBuf>>(path: P, kind: Kind) -> PathSet {\n         let mut set = BTreeSet::new();\n-        set.insert(path.into());\n+        set.insert(TaskPath { path: path.into(), kind: Some(kind.into()) });\n         PathSet::Set(set)\n     }\n \n-    fn has(&self, needle: &Path) -> bool {\n+    fn has(&self, needle: &Path, module: Option<Kind>) -> bool {\n+        let check = |p: &TaskPath| {\n+            if let (Some(p_kind), Some(kind)) = (&p.kind, module) {\n+                p.path.ends_with(needle) && *p_kind == kind\n+            } else {\n+                p.path.ends_with(needle)\n+            }\n+        };\n+\n         match self {\n-            PathSet::Set(set) => set.iter().any(|p| p.ends_with(needle)),\n-            PathSet::Suite(suite) => suite.ends_with(needle),\n+            PathSet::Set(set) => set.iter().any(check),\n+            PathSet::Suite(suite) => check(suite),\n         }\n     }\n \n     fn path(&self, builder: &Builder<'_>) -> PathBuf {\n         match self {\n-            PathSet::Set(set) => set.iter().next().unwrap_or(&builder.build.src).to_path_buf(),\n-            PathSet::Suite(path) => PathBuf::from(path),\n+            PathSet::Set(set) => {\n+                set.iter().next().map(|p| &p.path).unwrap_or(&builder.build.src).clone()\n+            }\n+            PathSet::Suite(path) => path.path.clone(),\n         }\n     }\n }\n \n impl StepDescription {\n-    fn from<S: Step>() -> StepDescription {\n+    fn from<S: Step>(kind: Kind) -> StepDescription {\n         StepDescription {\n             default: S::DEFAULT,\n             only_hosts: S::ONLY_HOSTS,\n             should_run: S::should_run,\n             make_run: S::make_run,\n             name: std::any::type_name::<S>(),\n+            kind,\n         }\n     }\n \n@@ -177,7 +226,7 @@ impl StepDescription {\n     }\n \n     fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n-        if builder.config.exclude.iter().any(|e| pathset.has(e)) {\n+        if builder.config.exclude.iter().any(|e| pathset.has(&e.path, e.kind)) {\n             eprintln!(\"Skipping {:?} because it is excluded\", pathset);\n             return true;\n         }\n@@ -192,8 +241,10 @@ impl StepDescription {\n     }\n \n     fn run(v: &[StepDescription], builder: &Builder<'_>, paths: &[PathBuf]) {\n-        let should_runs =\n-            v.iter().map(|desc| (desc.should_run)(ShouldRun::new(builder))).collect::<Vec<_>>();\n+        let should_runs = v\n+            .iter()\n+            .map(|desc| (desc.should_run)(ShouldRun::new(builder, desc.kind)))\n+            .collect::<Vec<_>>();\n \n         // sanity checks on rules\n         for (desc, should_run) in v.iter().zip(&should_runs) {\n@@ -226,7 +277,7 @@ impl StepDescription {\n                 if let Some(suite) = should_run.is_suite_path(path) {\n                     attempted_run = true;\n                     desc.maybe_run(builder, suite);\n-                } else if let Some(pathset) = should_run.pathset_for_path(path) {\n+                } else if let Some(pathset) = should_run.pathset_for_path(path, desc.kind) {\n                     attempted_run = true;\n                     desc.maybe_run(builder, pathset);\n                 }\n@@ -246,6 +297,8 @@ enum ReallyDefault<'a> {\n \n pub struct ShouldRun<'a> {\n     pub builder: &'a Builder<'a>,\n+    kind: Kind,\n+\n     // use a BTreeSet to maintain sort order\n     paths: BTreeSet<PathSet>,\n \n@@ -255,9 +308,10 @@ pub struct ShouldRun<'a> {\n }\n \n impl<'a> ShouldRun<'a> {\n-    fn new(builder: &'a Builder<'_>) -> ShouldRun<'a> {\n+    fn new(builder: &'a Builder<'_>, kind: Kind) -> ShouldRun<'a> {\n         ShouldRun {\n             builder,\n+            kind,\n             paths: BTreeSet::new(),\n             is_really_default: ReallyDefault::Bool(true), // by default no additional conditions\n         }\n@@ -293,7 +347,7 @@ impl<'a> ShouldRun<'a> {\n         let mut set = BTreeSet::new();\n         for krate in self.builder.in_tree_crates(name, None) {\n             let path = krate.local_path(self.builder);\n-            set.insert(path);\n+            set.insert(TaskPath { path, kind: Some(self.kind) });\n         }\n         self.paths.insert(PathSet::Set(set));\n         self\n@@ -306,7 +360,7 @@ impl<'a> ShouldRun<'a> {\n     pub fn krate(mut self, name: &str) -> Self {\n         for krate in self.builder.in_tree_crates(name, None) {\n             let path = krate.local_path(self.builder);\n-            self.paths.insert(PathSet::one(path));\n+            self.paths.insert(PathSet::one(path, self.kind));\n         }\n         self\n     }\n@@ -318,19 +372,25 @@ impl<'a> ShouldRun<'a> {\n \n     // multiple aliases for the same job\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n-        self.paths.insert(PathSet::Set(paths.iter().map(PathBuf::from).collect()));\n+        self.paths.insert(PathSet::Set(\n+            paths\n+                .iter()\n+                .map(|p| TaskPath { path: p.into(), kind: Some(self.kind.into()) })\n+                .collect(),\n+        ));\n         self\n     }\n \n     pub fn is_suite_path(&self, path: &Path) -> Option<&PathSet> {\n         self.paths.iter().find(|pathset| match pathset {\n-            PathSet::Suite(p) => path.starts_with(p),\n+            PathSet::Suite(p) => path.starts_with(&p.path),\n             PathSet::Set(_) => false,\n         })\n     }\n \n     pub fn suite_path(mut self, suite: &str) -> Self {\n-        self.paths.insert(PathSet::Suite(PathBuf::from(suite)));\n+        self.paths\n+            .insert(PathSet::Suite(TaskPath { path: suite.into(), kind: Some(self.kind.into()) }));\n         self\n     }\n \n@@ -340,12 +400,12 @@ impl<'a> ShouldRun<'a> {\n         self\n     }\n \n-    fn pathset_for_path(&self, path: &Path) -> Option<&PathSet> {\n-        self.paths.iter().find(|pathset| pathset.has(path))\n+    fn pathset_for_path(&self, path: &Path, kind: Kind) -> Option<&PathSet> {\n+        self.paths.iter().find(|pathset| pathset.has(path, Some(kind)))\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n pub enum Kind {\n     Build,\n     Check,\n@@ -359,11 +419,44 @@ pub enum Kind {\n     Run,\n }\n \n+impl Kind {\n+    fn parse(string: &str) -> Kind {\n+        match string {\n+            \"build\" => Kind::Build,\n+            \"check\" => Kind::Check,\n+            \"clippy\" => Kind::Clippy,\n+            \"fix\" => Kind::Fix,\n+            \"test\" => Kind::Test,\n+            \"bench\" => Kind::Bench,\n+            \"dist\" => Kind::Dist,\n+            \"doc\" => Kind::Doc,\n+            \"install\" => Kind::Install,\n+            \"run\" => Kind::Run,\n+            other => panic!(\"unknown kind: {}\", other),\n+        }\n+    }\n+\n+    fn as_str(&self) -> &'static str {\n+        match self {\n+            Kind::Build => \"build\",\n+            Kind::Check => \"check\",\n+            Kind::Clippy => \"clippy\",\n+            Kind::Fix => \"fix\",\n+            Kind::Test => \"test\",\n+            Kind::Bench => \"bench\",\n+            Kind::Dist => \"dist\",\n+            Kind::Doc => \"doc\",\n+            Kind::Install => \"install\",\n+            Kind::Run => \"run\",\n+        }\n+    }\n+}\n+\n impl<'a> Builder<'a> {\n     fn get_step_descriptions(kind: Kind) -> Vec<StepDescription> {\n         macro_rules! describe {\n             ($($rule:ty),+ $(,)?) => {{\n-                vec![$(StepDescription::from::<$rule>()),+]\n+                vec![$(StepDescription::from::<$rule>(kind)),+]\n             }};\n         }\n         match kind {\n@@ -540,8 +633,11 @@ impl<'a> Builder<'a> {\n \n         let builder = Self::new_internal(build, kind, vec![]);\n         let builder = &builder;\n-        let mut should_run = ShouldRun::new(builder);\n+        // The \"build\" kind here is just a placeholder, it will be replaced with something else in\n+        // the following statement.\n+        let mut should_run = ShouldRun::new(builder, Kind::Build);\n         for desc in Builder::get_step_descriptions(builder.kind) {\n+            should_run.kind = desc.kind;\n             should_run = (desc.should_run)(should_run);\n         }\n         let mut help = String::from(\"Available paths:\\n\");\n@@ -552,11 +648,11 @@ impl<'a> Builder<'a> {\n             match pathset {\n                 PathSet::Set(set) => {\n                     for path in set {\n-                        add_path(&path);\n+                        add_path(&path.path);\n                     }\n                 }\n                 PathSet::Suite(path) => {\n-                    add_path(&path.join(\"...\"));\n+                    add_path(&path.path.join(\"...\"));\n                 }\n             }\n         }\n@@ -1626,9 +1722,10 @@ impl<'a> Builder<'a> {\n     pub(crate) fn ensure_if_default<T, S: Step<Output = Option<T>>>(\n         &'a self,\n         step: S,\n+        kind: Kind,\n     ) -> S::Output {\n-        let desc = StepDescription::from::<S>();\n-        let should_run = (desc.should_run)(ShouldRun::new(self));\n+        let desc = StepDescription::from::<S>(kind);\n+        let should_run = (desc.should_run)(ShouldRun::new(self, desc.kind));\n \n         // Avoid running steps contained in --exclude\n         for pathset in &should_run.paths {\n@@ -1642,13 +1739,16 @@ impl<'a> Builder<'a> {\n     }\n \n     /// Checks if any of the \"should_run\" paths is in the `Builder` paths.\n-    pub(crate) fn was_invoked_explicitly<S: Step>(&'a self) -> bool {\n-        let desc = StepDescription::from::<S>();\n-        let should_run = (desc.should_run)(ShouldRun::new(self));\n+    pub(crate) fn was_invoked_explicitly<S: Step>(&'a self, kind: Kind) -> bool {\n+        let desc = StepDescription::from::<S>(kind);\n+        let should_run = (desc.should_run)(ShouldRun::new(self, desc.kind));\n \n         for path in &self.paths {\n-            if should_run.paths.iter().any(|s| s.has(path))\n-                && !desc.is_excluded(self, &PathSet::Suite(path.clone()))\n+            if should_run.paths.iter().any(|s| s.has(path, Some(desc.kind)))\n+                && !desc.is_excluded(\n+                    self,\n+                    &PathSet::Suite(TaskPath { path: path.clone(), kind: Some(desc.kind.into()) }),\n+                )\n             {\n                 return true;\n             }"}, {"sha": "bc71034496968ff3fad5a502309b39e65ae72408", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -499,7 +499,7 @@ mod dist {\n         let host = TargetSelection::from_user(\"A\");\n \n         builder.run_step_descriptions(\n-            &[StepDescription::from::<test::Crate>()],\n+            &[StepDescription::from::<test::Crate>(Kind::Test)],\n             &[\"library/std\".into()],\n         );\n \n@@ -520,7 +520,7 @@ mod dist {\n     #[test]\n     fn test_exclude() {\n         let mut config = configure(&[\"A\"], &[\"A\"]);\n-        config.exclude = vec![\"src/tools/tidy\".into()];\n+        config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n         config.cmd = Subcommand::Test {\n             paths: Vec::new(),\n             test_args: Vec::new(),"}, {"sha": "683cfc630e7715f6a8bfef208a3c5f8cd37f0833", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -12,6 +12,7 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n+use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n@@ -62,7 +63,7 @@ pub struct Config {\n     pub sanitizers: bool,\n     pub profiler: bool,\n     pub ignore_git: bool,\n-    pub exclude: Vec<PathBuf>,\n+    pub exclude: Vec<TaskPath>,\n     pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n@@ -635,7 +636,7 @@ impl Config {\n         let flags = Flags::parse(&args);\n \n         let mut config = Config::default_opts();\n-        config.exclude = flags.exclude;\n+        config.exclude = flags.exclude.into_iter().map(|path| TaskPath::parse(path)).collect();\n         config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.json_output = flags.json_output;"}, {"sha": "66b63cd1278c525f98649b45c697b41b79321989", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -16,7 +16,7 @@ use std::process::Command;\n \n use build_helper::{output, t};\n \n-use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::TargetSelection;\n@@ -1368,7 +1368,7 @@ impl Step for Extended {\n         let mut built_tools = HashSet::new();\n         macro_rules! add_component {\n             ($name:expr => $step:expr) => {\n-                if let Some(tarball) = builder.ensure_if_default($step) {\n+                if let Some(tarball) = builder.ensure_if_default($step, Kind::Dist) {\n                     tarballs.push(tarball);\n                     built_tools.insert($name);\n                 }"}, {"sha": "23b5ddcd47a0ecbc02ac7760e652684726b5b8cc", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -15,7 +15,7 @@ use std::path::{Path, PathBuf};\n use crate::Mode;\n use build_helper::{t, up_to_date};\n \n-use crate::builder::{Builder, Compiler, RunConfig, ShouldRun, Step};\n+use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::{Config, TargetSelection};\n@@ -240,7 +240,7 @@ impl Step for TheBook {\n             invoke_rustdoc(builder, compiler, target, path);\n         }\n \n-        if builder.was_invoked_explicitly::<Self>() {\n+        if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n             let out = builder.doc_out(target);\n             let index = out.join(\"book\").join(\"index.html\");\n             open(builder, &index);\n@@ -400,7 +400,7 @@ impl Step for Standalone {\n \n         // We open doc/index.html as the default if invoked as `x.py doc --open`\n         // with no particular explicit doc requested (e.g. library/core).\n-        if builder.paths.is_empty() || builder.was_invoked_explicitly::<Self>() {\n+        if builder.paths.is_empty() || builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n             let index = out.join(\"index.html\");\n             open(builder, &index);\n         }\n@@ -902,7 +902,7 @@ impl Step for RustcBook {\n             name: INTERNER.intern_str(\"rustc\"),\n             src: INTERNER.intern_path(out_base),\n         });\n-        if builder.was_invoked_explicitly::<Self>() {\n+        if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n             let out = builder.doc_out(self.target);\n             let index = out.join(\"rustc\").join(\"index.html\");\n             open(builder, &index);"}, {"sha": "2c937aa0ec9286a0775e5563ddef58387bd9495d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -671,7 +671,6 @@ nav.sub {\n \tmargin: .5em 0;\n \twidth: calc(100% - 2px);\n \toverflow-x: auto;\n-\toverflow-wrap: normal;\n \tdisplay: block;\n }\n \n@@ -858,6 +857,31 @@ h2.small-section-header > .anchor {\n \n .block a.current.crate { font-weight: 500; }\n \n+/*  In most contexts we use `overflow-wrap: anywhere` to ensure that we can wrap\n+\tas much as needed on mobile (see\n+\tsrc/test/rustdoc-gui/type-declaration-overflow.goml for an example of why\n+\tthis matters). The `anywhere` value means:\n+\n+\t\"Soft wrap opportunities introduced by the word break are considered when\n+\t calculating min-content intrinsic sizes.\"\n+\n+\thttps://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap#values\n+\n+\tFor table layouts, that becomes a problem: the browser tries to make each\n+\tcolumn as narrow as possible, and `overflow-wrap: anywhere` means it can do\n+\tso by breaking words - even if some other column could be shrunk without\n+\tbreaking words! This shows up, for instance, in the `Structs` / `Modules` /\n+\t`Functions` (etcetera) sections of a module page, and when a docblock\n+\tcontains a table.\n+\n+\tSo, for table layouts, override the default with break-word, which does\n+\t_not_ affect min-content intrinsic sizes.\n+*/\n+table,\n+.item-table {\n+\toverflow-wrap: break-word;\n+}\n+\n .item-table {\n \tdisplay: table;\n }\n@@ -2058,10 +2082,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\toverflow-wrap: anywhere;\n \t}\n \n-\t.docblock table code {\n-\t\toverflow-wrap: normal;\n-\t}\n-\n \t.sub-container {\n \t\tflex-direction: column;\n \t}"}, {"sha": "975e2ffbf01e7e85eac7e512c28ffc438d6e0bb8", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -2,8 +2,8 @@\n \n | Free Region Mapping\n | '_#0r | Global | ['_#2r, '_#1r, '_#0r, '_#4r, '_#3r]\n-| '_#1r | External | ['_#1r, '_#4r]\n-| '_#2r | External | ['_#2r, '_#1r, '_#4r]\n+| '_#1r | Local | ['_#1r, '_#4r]\n+| '_#2r | Local | ['_#2r, '_#1r, '_#4r]\n | '_#3r | Local | ['_#4r, '_#3r]\n | '_#4r | Local | ['_#4r]\n |"}, {"sha": "73013c9778f640ac409d016f6154b873b1d89535", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -39,7 +39,6 @@ impl Trait for Foo {\n     const Y: u32 = 0;\n }\n \n-\n impl implementors::Whatever for Foo {\n     type Foo = u32;\n }\n@@ -58,8 +57,10 @@ pub mod sub_mod {\n pub mod long_trait {\n     use std::ops::DerefMut;\n \n-    pub trait ALongNameBecauseItHelpsTestingTheCurrentProblem: DerefMut<Target = u32>\n-        + From<u128> + Send + Sync + AsRef<str> + 'static {}\n+    pub trait ALongNameBecauseItHelpsTestingTheCurrentProblem:\n+        DerefMut<Target = u32> + From<u128> + Send + Sync + AsRef<str> + 'static\n+    {\n+    }\n }\n \n pub mod long_table {\n@@ -88,18 +89,28 @@ pub mod summary_table {\n }\n \n pub mod too_long {\n-pub type ReallyLongTypeNameLongLongLong = Option<unsafe extern \"C\" fn(a: *const u8, b: *const u8) -> *const u8>;\n-\n-pub const ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong: u32 = 0;\n-\n-pub struct SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n-    pub a: u32,\n-}\n+    pub type ReallyLongTypeNameLongLongLong =\n+        Option<unsafe extern \"C\" fn(a: *const u8, b: *const u8) -> *const u8>;\n+\n+    pub const ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong: u32 = 0;\n+\n+    /// This also has a really long doccomment. Lorem ipsum dolor sit amet,\n+    /// consectetur adipiscing elit. Suspendisse id nibh malesuada, hendrerit\n+    /// massa vel, tincidunt est. Nulla interdum, sem ac efficitur ornare, arcu\n+    /// nunc dignissim nibh, at rutrum diam augue ac mauris. Fusce tincidunt et\n+    /// ligula sed viverra. Aenean sed facilisis dui, non volutpat felis. In\n+    /// vitae est dui. Donec felis nibh, blandit at nibh eu, tempor suscipit\n+    /// nisl. Vestibulum ornare porta libero, eu faucibus purus iaculis ut. Ut\n+    /// quis tincidunt nunc, in mollis purus. Nulla sed interdum quam. Nunc\n+    /// vitae cursus ex.\n+    pub struct SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+        pub a: u32,\n+    }\n \n-impl SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n-    /// ```\n-    /// let x = SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName { a: 0 };\n-    /// ```\n+    impl SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+        /// ```\n+        /// let x = SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName { a: 0 };\n+        /// ```\n         pub fn foo(&self) {}\n     }\n }"}, {"sha": "c35b38747dfaf087c94095046b994e79a97c4ba2", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,6 +7,10 @@ assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // However, since there is overflow in the type declaration, its scroll width is bigger.\n assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n \n+// In the table-ish view on the module index, the name should not be wrapped more than necessary.\n+goto: file://|DOC_PATH|/lib2/too_long/index.html\n+assert-property: (\".item-table .struct\", {\"offsetWidth\": \"684\"})\n+\n // We now make the same check on type declaration...\n goto: file://|DOC_PATH|/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})"}, {"sha": "ff4da5251a9b24e895f420de1b874d67011b1372", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -20,7 +20,7 @@ LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f\n    |                                     |\n    |                                     lifetime `'f` defined here\n LL |     ap\n-   |     ^^ returning this value requires that `'1` must outlive `'f`\n+   |     ^^ function was supposed to return data with lifetime `'f` but it is returning data with lifetime `'1`\n    |\n    = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n    = note: the struct VaListImpl<'f> is invariant over the parameter 'f"}, {"sha": "d20e79b9db3384990fac26906a7fe21316f47e71", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1,3 +1,3 @@\n // compile-flags: --cfg a(b=c)\n-// error-pattern: invalid `--cfg` argument: `a(b=c)` (expected `key` or `key=\"value\"`)\n+// error-pattern: invalid `--cfg` argument: `a(b=c)` (expected `key` or `key=\"value\"`, ensure escaping is appropriate for your shell, try 'key=\"value\"' or key=\\\"value\\\")\n fn main() {}"}, {"sha": "3a12e97868000498ecfb2163553873e0a0145310", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1,2 +1,2 @@\n-error: invalid `--cfg` argument: `a(b=c)` (expected `key` or `key=\"value\"`)\n+error: invalid `--cfg` argument: `a(b=c)` (expected `key` or `key=\"value\"`, ensure escaping is appropriate for your shell, try 'key=\"value\"' or key=\\\"value\\\")\n "}, {"sha": "628b335c873025697f17275fea8ea2996196954f", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-9.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-9.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -0,0 +1,4 @@\n+// Test for missing quotes around value, issue #66450.\n+// compile-flags: --cfg key=value\n+// error-pattern: invalid `--cfg` argument: `key=value` (expected `key` or `key=\"value\"`, ensure escaping is appropriate for your shell, try 'key=\"value\"' or key=\\\"value\\\")\n+fn main() {}"}, {"sha": "985b525225839e2d79b9d223ebe821c8cc2ff86e", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-9.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-9.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--cfg` argument: `key=value` (expected `key` or `key=\"value\"`, ensure escaping is appropriate for your shell, try 'key=\"value\"' or key=\\\"value\\\")\n+"}, {"sha": "8096f08385c8c67b7a6c7fe27962b7e8260a184a", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n    |      |\n    |      lifetime `'a` defined here\n LL |     s\n-   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "fff681b2e0b7621a4cb9d1a5d63350974c17df83", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1,20 +1,13 @@\n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/issue-16683.rs:4:9\n    |\n LL | trait T<'a> {\n    |         -- lifetime `'a` defined here\n LL |     fn a(&'a self) -> &'a bool;\n LL |     fn b(&self) {\n-   |          -----\n-   |          |\n-   |          `self` is a reference that is only valid in the associated function body\n-   |          let's call the lifetime of this reference `'1`\n+   |          - let's call the lifetime of this reference `'1`\n LL |         self.a();\n-   |         ^^^^^^^^\n-   |         |\n-   |         `self` escapes the associated function body here\n-   |         argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^ argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "613ef6b907c547e3154c68667bb79644f2991d58", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1,20 +1,13 @@\n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/issue-17758.rs:7:9\n    |\n LL | trait Foo<'a> {\n    |           -- lifetime `'a` defined here\n LL |     fn foo(&'a self);\n LL |     fn bar(&self) {\n-   |            -----\n-   |            |\n-   |            `self` is a reference that is only valid in the associated function body\n-   |            let's call the lifetime of this reference `'1`\n+   |            - let's call the lifetime of this reference `'1`\n LL |         self.foo();\n-   |         ^^^^^^^^^^\n-   |         |\n-   |         `self` escapes the associated function body here\n-   |         argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^ argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "4f0fd948e760493d616cac549f38d0698459c1bb", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,10 +7,11 @@ LL |      let _a = b + \", World!\";\n    |               | `+` cannot be used to concatenate two `&str` strings\n    |               &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |      let _a = b.to_owned() + \", World!\";\n-   |               ~~~~~~~~~~~~\n+   |                +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "b04ac5536c41fa2e4b8b7b5accd7892935350f5c", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,10 +7,11 @@ LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n    |                                      | `+` cannot be used to concatenate two `&str` strings\n    |                                      &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";\n-   |                                      ~~~~~~~~~~~~\n+   |                                       +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c87a3e348a2e97f83cf094fd29b7e4bfd5ffae02", "filename": "src/test/ui/issues/issue-5100.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -59,10 +59,8 @@ LL |         &(true, false) => ()\n error[E0618]: expected function, found `(char, char)`\n   --> $DIR/issue-5100.rs:48:14\n    |\n-LL |       let v = [('a', 'b')\n-   |  ______________-^^^^^^^^^\n-LL | |              ('c', 'd'),\n-   | |_______________________- call expression requires function\n+LL |     let v = [('a', 'b')\n+   |              ^^^^^^^^^^- help: consider separating array elements with a comma: `,`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:55:19"}, {"sha": "da31bcd547507e41275aaeed4af5271bc17301e5", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       lifetime `'a` defined here\n LL |     match (&t,) {\n LL |         ((u,),) => u,\n-   |                    ^ returning this value requires that `'a` must outlive `'b`\n+   |                    ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "c8a7876dc54c29cf9815ce5b9de1ecfd5747fa89", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | impl<'b> S<'b> {\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            -- lifetime `'a` defined here\n LL |         match self.0 { ref mut x => x }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to &i32"}, {"sha": "11ddf1487dd7adb4502ad44731a28dc57590dc18", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            -- lifetime `'a` defined here\n LL |         let ref mut x = self.0;\n LL |         x\n-   |         ^ returning this value requires that `'a` must outlive `'b`\n+   |         ^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to &i32"}, {"sha": "f70ae2edd7facd8555ad362fca93853a7a72edfe", "filename": "src/test/ui/nll/issue-52113.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> i\n    |                lifetime `'a` defined here\n ...\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "24b8c84b4a96ad9d9aba1f66d145d4ff725fbf1d", "filename": "src/test/ui/nll/issue-55394.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL |     fn new(bar: &mut Bar) -> Self {\n    |                 |\n    |                 let's call the lifetime of this reference `'1`\n LL |         Foo { bar }\n-   |         ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |         ^^^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "99b6d512261b8eb67a26d8953bceefcf0ae3455d", "filename": "src/test/ui/nll/issue-67007-escaping-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -14,7 +14,7 @@ struct Consumer<'tcx>(&'tcx ());\n \n impl<'tcx> Consumer<'tcx> {\n     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n-        let other = self.use_fcx(fcx); //~ ERROR borrowed data\n+        let other = self.use_fcx(fcx); //~ ERROR lifetime may not live long enough\n         fcx.use_it(other);\n     }\n "}, {"sha": "ce067e23aa34a49594720fb2af8fc7d454c81f46", "filename": "src/test/ui/nll/issue-67007-escaping-data.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1,21 +1,14 @@\n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/issue-67007-escaping-data.rs:17:21\n    |\n LL | impl<'tcx> Consumer<'tcx> {\n    |      ---- lifetime `'tcx` defined here\n LL |     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n-   |                   --  -----  --- `fcx` is a reference that is only valid in the associated function body\n-   |                   |   |\n-   |                   |   `self` declared here, outside of the associated function body\n-   |                   lifetime `'a` defined here\n+   |                   -- lifetime `'a` defined here\n LL |         let other = self.use_fcx(fcx);\n-   |                     ^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     `fcx` escapes the associated function body here\n-   |                     argument requires that `'a` must outlive `'tcx`\n+   |                     ^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'tcx`\n    |\n    = help: consider adding the following bound: `'a: 'tcx`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "f34cafe308d3ee8baf9e40449e017c897718625e", "filename": "src/test/ui/nll/mir_check_cast_closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n    |        lifetime `'a` defined here\n LL |     let g: fn(_, _) -> _ = |_x, y| y;\n LL |     g\n-   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "7f98aa5801d07887ed5c58e71c914995f2213485", "filename": "src/test/ui/nll/outlives-suggestion-more.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | fn foo1<'a, 'b, 'c, 'd>(x: &'a usize, y: &'b usize) -> (&'c usize, &'d usiz\n    |         |\n    |         lifetime `'a` defined here\n LL |     (x, y)\n-   |     ^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'c` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'c`\n \n@@ -18,7 +18,7 @@ LL | fn foo1<'a, 'b, 'c, 'd>(x: &'a usize, y: &'b usize) -> (&'c usize, &'d usiz\n    |             |\n    |             lifetime `'b` defined here\n LL |     (x, y)\n-   |     ^^^^^^ returning this value requires that `'b` must outlive `'d`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'d` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'd`\n \n@@ -35,7 +35,7 @@ LL | fn foo2<'a, 'b, 'c>(x: &'a usize, y: &'b usize) -> (&'c usize, &'static usi\n    |         |\n    |         lifetime `'a` defined here\n LL |     (x, y)\n-   |     ^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'c` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'c`\n "}, {"sha": "496cf92400c5401e10b05c2dc14d7110bfa84e91", "filename": "src/test/ui/nll/outlives-suggestion-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -70,7 +70,7 @@ pub struct Foo2<'a> {\n impl<'a> Foo2<'a> {\n     // should not produce outlives suggestions to name 'self\n     fn get_bar(&self) -> Bar2 {\n-        Bar2::new(&self) //~ERROR borrowed data escapes outside of associated function\n+        Bar2::new(&self) //~ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "8e6e4f1a47623d978d5b61ab4c7a8e95fbd8c3eb", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | fn foo1<'a, 'b>(x: &'a usize) -> &'b usize {\n    |         |\n    |         lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -53,7 +53,7 @@ LL | fn foo4<'a, 'b, 'c>(x: &'a usize) -> (&'b usize, &'c usize) {\n    |         lifetime `'a` defined here\n ...\n LL |     (x, x)\n-   |     ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -73,7 +73,7 @@ LL | impl<'a> Bar<'a> {\n LL |     pub fn get<'b>(&self) -> &'b usize {\n    |                -- lifetime `'b` defined here\n LL |         self.x\n-   |         ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |         ^^^^^^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -85,28 +85,20 @@ LL | impl<'a> Baz<'a> {\n LL |     fn get<'b>(&'b self) -> &'a i32 {\n    |            -- lifetime `'b` defined here\n LL |         self.x\n-   |         ^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |         ^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:73:9\n    |\n LL | impl<'a> Foo2<'a> {\n    |      -- lifetime `'a` defined here\n LL |     // should not produce outlives suggestions to name 'self\n LL |     fn get_bar(&self) -> Bar2 {\n-   |                -----\n-   |                |\n-   |                `self` declared here, outside of the associated function body\n-   |                `self` is a reference that is only valid in the associated function body\n-   |                let's call the lifetime of this reference `'1`\n+   |                - let's call the lifetime of this reference `'1`\n LL |         Bar2::new(&self)\n-   |         ^^^^^^^^^^^^^^^^\n-   |         |\n-   |         `self` escapes the associated function body here\n-   |         argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'a`\n \n error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "45fd5a2f1d6570e862cc328fc65d9c297d29ecb7", "filename": "src/test/ui/nll/type-alias-free-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | impl<'a> FromBox<'a> for C<'a> {\n LL |     fn from_box(b: Box<B>) -> Self {\n    |                 - has type `Box<Box<&'1 isize>>`\n LL |         C { f: b }\n-   |         ^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/type-alias-free-regions.rs:27:9\n@@ -16,7 +16,7 @@ LL | impl<'a> FromTuple<'a> for C<'a> {\n LL |     fn from_tuple(b: (B,)) -> Self {\n    |                   - has type `(Box<&'1 isize>,)`\n LL |         C { f: Box::new(b.0) }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b392c2007d39805c96425575d997a52f2050671a", "filename": "src/test/ui/nll/type-check-pointer-coercions.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | fn shared_to_const<'a, 'b>(x: &&'a i32) -> *const &'b i32 {\n    |                    |\n    |                    lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -18,7 +18,7 @@ LL | fn unique_to_const<'a, 'b>(x: &mut &'a i32) -> *const &'b i32 {\n    |                    |\n    |                    lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -47,7 +47,7 @@ LL | fn unique_to_mut<'a, 'b>(x: &mut &'a i32) -> *mut &'b i32 {\n    |                  lifetime `'a` defined here\n LL |     // Two errors because *mut is invariant\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable pointer to &i32\n@@ -64,7 +64,7 @@ LL | fn mut_to_const<'a, 'b>(x: *mut &'a i32) -> *const &'b i32 {\n    |                 |\n    |                 lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -77,7 +77,7 @@ LL | fn array_elem<'a, 'b>(x: &'a i32) -> *const &'b i32 {\n    |               lifetime `'a` defined here\n ...\n LL |     y\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -90,7 +90,7 @@ LL | fn array_coerce<'a, 'b>(x: &'a i32) -> *const [&'b i32; 3] {\n    |                 lifetime `'a` defined here\n ...\n LL |     y\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -103,7 +103,7 @@ LL | fn nested_array<'a, 'b>(x: &'a i32) -> *const [&'b i32; 2] {\n    |                 lifetime `'a` defined here\n ...\n LL |     y\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "902b4c687554a69e96be031363dfcdce107dacc6", "filename": "src/test/ui/nll/user-annotations/wf-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            |\n    |            lifetime `'a` defined here\n LL |     Foo::xmute(u)\n-   |     ^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "61e96f59fed9128fa557a720ea4c3df96c72eaed", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |          lifetime `'a` defined here\n ...\n LL |     ss\n-   |     ^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "d95289f3f9def09c27b6261dde5aa814558a4822", "filename": "src/test/ui/regions/region-object-lifetime-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n    |                                          |\n    |                                          lifetime `'a` defined here\n LL |     x.borrowed()\n-   |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "92588819076d35ae9ef382e5e78c8bbbe2c34672", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -31,7 +31,7 @@ LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      |\n    |      lifetime `'a` defined here\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "246b6483c21a8f15b2d13be48cf63e8c26bb28a7", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -1,18 +1,13 @@\n-error[E0521]: borrowed data escapes outside of function\n+error: lifetime may not live long enough\n   --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:20:5\n    |\n LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n-   |            -- --            -           - `b` is a reference that is only valid in the function body\n-   |            |  |             |\n-   |            |  |             `a` declared here, outside of the function body\n-   |            |  lifetime `'b` defined here\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n    |            lifetime `'a` defined here\n LL |     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n LL |     f.method(b);\n-   |     ^^^^^^^^^^^\n-   |     |\n-   |     `b` escapes the function body here\n-   |     argument requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n    = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n@@ -21,4 +16,3 @@ LL |     f.method(b);\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "84226a5755319cf0e06572867df3b81fed9051c1", "filename": "src/test/ui/regions/regions-bounds.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          |\n    |          lifetime `'a` defined here\n LL |     return e;\n-   |            ^ returning this value requires that `'a` must outlive `'b`\n+   |            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -18,7 +18,7 @@ LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          |\n    |          lifetime `'a` defined here\n LL |     return e;\n-   |            ^ returning this value requires that `'a` must outlive `'b`\n+   |            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "25566742099c261f23a13284b71232185a881bcb", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait +\n    |                    lifetime `'a` defined here\n LL |     // A outlives 'a AND 'b...but not 'c.\n LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'c` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'c`\n "}, {"sha": "91cf57e099df9485273dcd83fbf95e7e88b6f497", "filename": "src/test/ui/regions/regions-creating-enums4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                |\n    |                lifetime `'a` defined here\n LL |     Ast::Add(x, y)\n-   |     ^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "7f10c051f2998eb63288d53376b2bf365275ef2d", "filename": "src/test/ui/regions/regions-early-bound-error-method.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -6,7 +6,7 @@ LL | impl<'a> Box<'a> {\n LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n    |           -- lifetime `'b` defined here\n LL |         g2.get()\n-   |         ^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |         ^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "f7c75033c04865f3b2d28fb1849d49c751bf2654", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -9,7 +9,7 @@ LL | /         match self.next {\n LL | |             Some(ref next) => next.get(),\n LL | |             None => &self.val\n LL | |         }\n-   | |_________^ returning this value requires that `'a` must outlive `'b`\n+   | |_________^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "3183aee23d9369753ad94ab82c72e66920fbdfc5", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/regions-infer-not-param.rs:15:54\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n-   |                -- -- lifetime `'b` defined here      ^ returning this value requires that `'a` must outlive `'b`\n+   |                -- -- lifetime `'b` defined here      ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |                |\n    |                lifetime `'a` defined here\n    |\n@@ -25,7 +25,7 @@ error: lifetime may not live long enough\n   --> $DIR/regions-infer-not-param.rs:19:63\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n-   |                   -- -- lifetime `'b` defined here            ^ returning this value requires that `'a` must outlive `'b`\n+   |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |                   |\n    |                   lifetime `'a` defined here\n    |"}, {"sha": "26f0fcae638d050326bb3db47b1d523f27659224", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |         lifetime `'a` defined here\n LL |     // Without knowing 'a:'b, we can't coerce\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to dyn Dummy\n@@ -23,7 +23,7 @@ LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dum\n    |         lifetime `'a` defined here\n LL |     // We can't coerce because it is packed in `Wrapper`\n LL |     x\n-   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n    = note: requirement occurs because of a mutable reference to dyn Dummy"}, {"sha": "e2e7ce1ed18e7f3ba61e4f3fdd9372628c2fbd8b", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,10 +7,11 @@ LL |     let x = \"Hello \" + \"World!\";\n    |             |        `+` cannot be used to concatenate two `&str` strings\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let x = \"Hello \".to_owned() + \"World!\";\n-   |             ~~~~~~~~~~~~~~~~~~~\n+   |                     +++++++++++\n \n error[E0369]: cannot add `World` to `World`\n   --> $DIR/issue-39018.rs:8:26\n@@ -46,10 +47,10 @@ LL |     let x = \"Hello \" + \"World!\".to_owned();\n    |             |        `+` cannot be used to concatenate a `&str` with a `String`\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+help: create an owned `String` on the left and add a borrow on the right\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n-   |             ~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~\n+   |                     +++++++++++   +\n \n error[E0369]: cannot add `&String` to `&String`\n   --> $DIR/issue-39018.rs:26:16\n@@ -60,10 +61,12 @@ LL |     let _ = &a + &b;\n    |             |  `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: remove the borrow to obtain an owned `String`\n    |\n-LL |     let _ = a + &b;\n-   |             ~\n+LL -     let _ = &a + &b;\n+LL +     let _ = a + &b;\n+   | \n \n error[E0369]: cannot add `String` to `&String`\n   --> $DIR/issue-39018.rs:27:16\n@@ -74,10 +77,11 @@ LL |     let _ = &a + b;\n    |             |  `+` cannot be used to concatenate a `&str` with a `String`\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+help: remove the borrow on the left and add one on the right\n    |\n-LL |     let _ = a + &b;\n-   |             ~   ~~\n+LL -     let _ = &a + b;\n+LL +     let _ = a + &b;\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/issue-39018.rs:29:17\n@@ -97,10 +101,10 @@ LL |     let _ = e + b;\n    |             | `+` cannot be used to concatenate a `&str` with a `String`\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+help: create an owned `String` on the left and add a borrow on the right\n    |\n LL |     let _ = e.to_owned() + &b;\n-   |             ~~~~~~~~~~~~   ~~\n+   |              +++++++++++   +\n \n error[E0369]: cannot add `&String` to `&String`\n   --> $DIR/issue-39018.rs:31:15\n@@ -111,10 +115,11 @@ LL |     let _ = e + &b;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = e.to_owned() + &b;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&str` to `&String`\n   --> $DIR/issue-39018.rs:32:15\n@@ -125,10 +130,11 @@ LL |     let _ = e + d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = e.to_owned() + d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&&str` to `&String`\n   --> $DIR/issue-39018.rs:33:15\n@@ -139,10 +145,11 @@ LL |     let _ = e + &d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = e.to_owned() + &d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&&str` to `&&str`\n   --> $DIR/issue-39018.rs:34:16\n@@ -169,10 +176,11 @@ LL |     let _ = c + &d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = c.to_owned() + &d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/issue-39018.rs:37:15\n@@ -183,10 +191,11 @@ LL |     let _ = c + d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = c.to_owned() + d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error: aborting due to 14 previous errors\n "}, {"sha": "bd354679f7888277051aee4223a94fe73d468f77", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,10 +7,11 @@ LL |     let c = a + b;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let c = a.to_owned() + b;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "bf277362dbab2977369c18f05f6b47754dc456c2", "filename": "src/test/ui/terminal-width/non-1-width-unicode-multiline-label.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,10 +7,11 @@ LL | ...\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\n    |                                                  |              `+` cannot be used to concatenate two `&str` strings\n    |                                                  &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = \"\u0f00\u0f01\u0f02\u0f03\u0f04\u0f05\u0f06\u0f07\u0f08\u0f09\u0f0a\u0f0b\u0f0c\u0f0d\u0f0e\u0f0f\u0f10\u0f11\u0f12\u0f13\u0f14\u0f15\u0f16\u0f17\u0f18\u0f19\u0f1a\u0f1b\u0f1c\u0f1d\u0f1e\u0f1f\u0f20\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f2a\u0f2b\u0f2c\u0f2d\u0f2e\u0f2f\u0f30\u0f31\u0f32\u0f33\u0f34\u0f35\u0f36\u0f37\u0f38\u0f39\u0f3a\u0f3b\u0f3c\u0f3d\u0f3e\u0f3f\u0f40\u0f41\u0f42\u0f43\u0f44\u0f45\u0f46\u0f47\u0f48\u0f49\u0f4a\u0f4b\u0f4c\u0f4d\u0f4e\u0f4f\u0f50\u0f51\u0f52\u0f53\u0f54\u0f55\u0f56\u0f57\u0f58\u0f59\u0f5a\u0f5b\u0f5c\u0f5d\u0f5e\u0f5f\u0f60\u0f61\u0f62\u0f63\u0f64\u0f65\u0f66\u0f67\u0f68\u0f69\u0f6a\u0f6b\u0f6c\u0f6d\u0f6e\u0f6f\u0f70\u0f71\u0f72\u0f73\u0f74\u0f75\u0f76\u0f77\u0f78\u0f79\u0f7a\u0f7b\u0f7c\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\u0f95\u0f96\u0f97\u0f98\u0f99\u0f9a\u0f9b\u0f9c\u0f9d\u0f9e\u0f9f\u0fa0\u0fa1\u0fa2\u0fa3\u0fa4\u0fa5\u0fa6\u0fa7\u0fa8\u0fa9\u0faa\u0fab\u0fac\u0fad\u0fae\u0faf\u0fb0\u0fb1\u0fb2\u0fb3\u0fb4\u0fb5\u0fb6\u0fb7\u0fb8\u0fb9\u0fba\u0fbb\u0fbc\u0fbd\u0fbe\u0fbf\u0fc0\u0fc1\u0fc2\u0fc3\u0fc4\u0fc5\u0fc6\u0fc7\u0fc8\u0fc9\u0fca\u0fcb\u0fcc\u0fcd\u0fce\u0fcf\u0fd0\u0fd1\u0fd2\u0fd3\u0fd4\u0fd5\u0fd6\u0fd7\u0fd8\u0fd9\u0fda\"; let _a = unicode_is_fun.to_owned() + \" really fun!\";\n-   |                                                                                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                                                                                                                                                                         +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1929dab073169fcb6216b280d397af156d8d5c44", "filename": "src/test/ui/tuple/array-diagnostics.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Ftuple%2Farray-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Ftuple%2Farray-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Farray-diagnostics.rs?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let _tmp = [\n+        (\"C200B40A82\", 3),\n+        (\"C200B40A83\", 4) //~ ERROR: expected function, found `(&'static str, {integer})` [E0618]\n+        (\"C200B40A8537\", 5),\n+    ];\n+}"}, {"sha": "a10d7af470c7ce6eb10a2989ea3e4766d69c5c17", "filename": "src/test/ui/tuple/array-diagnostics.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Ftuple%2Farray-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Ftuple%2Farray-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Farray-diagnostics.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -0,0 +1,9 @@\n+error[E0618]: expected function, found `(&'static str, {integer})`\n+  --> $DIR/array-diagnostics.rs:4:9\n+   |\n+LL |         (\"C200B40A83\", 4)\n+   |         ^^^^^^^^^^^^^^^^^- help: consider separating array elements with a comma: `,`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}, {"sha": "3315eaaf1c006e9788e0914c9435d183d3a8ee2f", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n \n@@ -20,7 +20,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "b116b8e263fd2917bf18bf8149c94cc88376c932", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n \n@@ -20,7 +20,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "303c7f3388a7426bfa25c2596c5d18fbdca2003d", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n \n@@ -20,7 +20,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "837c70ca3136733190c6e619ca03334e47f6b517", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "bab858c5acb37ac71f4607c29908293cd40fbaca", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "f1df2a88b6bab354de860837c7727b389edf90fc", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n    = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant\n@@ -23,7 +23,7 @@ LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n    = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant"}, {"sha": "265043111956a6888f91c03db3bfddbd4fac9324", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf72996eda4f8af19b0ca7235c6f62e0245a313/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=ecf72996eda4f8af19b0ca7235c6f62e0245a313", "patch": "@@ -7,7 +7,7 @@ LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      lifetime `'a` defined here\n ...\n LL |         u\n-   |         ^ returning this value requires that `'b` must outlive `'a`\n+   |         ^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -33,7 +33,7 @@ LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      lifetime `'a` defined here\n LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n LL |         u\n-   |         ^ returning this value requires that `'b` must outlive `'a`\n+   |         ^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -45,7 +45,7 @@ LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         |\n    |         lifetime `'a` defined here\n LL |     <()>::static_evil(b)\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -57,7 +57,7 @@ LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  |\n    |                  lifetime `'a` defined here\n LL |     <IndirectEvil>::static_evil(b)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -69,7 +69,7 @@ LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  |\n    |                  lifetime `'a` defined here\n LL |     <Evil>::inherent_evil(b)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}]}