{"sha": "36f9f76356b3c2eb12bb3090c6c1349be8593333", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZjlmNzYzNTZiM2MyZWIxMmJiMzA5MGM2YzEzNDliZTg1OTMzMzM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-01T16:04:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-01T16:04:57Z"}, "message": "Rollup merge of #49549 - Mark-Simulacrum:bootstrap-cleanup, r=alexcrichton\n\nRemove filetime dep from build_helper\n\nr? @alexcrichton", "tree": {"sha": "83b9f310edae4d92016c2f2ad72612446e918a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83b9f310edae4d92016c2f2ad72612446e918a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f9f76356b3c2eb12bb3090c6c1349be8593333", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJawQMpCRBK7hj4Ov3rIwAAdHIIAKc4fsUl/inL32S0GiUhrFZv\n8Fg2YvRvPAfK5Qz3EgRSBQVw2IprLCONopWMNn7dUDpkdZDIql01DoDaAmFQwWVs\n7e0LW/daoggVAb0LzYtWT6g1wcDj9rOfXGD1mxz4jb+0zVff8fFGaCddrvCN/vTZ\n1YoLfMYS8WLd09Fo4D8CQ1WRSTe3R4X94U1vjgH0Gpz7kH45dJ+Ab7QKSa8L9Cw9\nyo6Xuo2z24lYp9t5jAb35gMfoDOreT6q6Gx5bQuJ3fN6vl/mSgmWmfBU378Y/DVO\nYN62W33jOVbG6UYGRDurVSXDMtzfkHmJjNYTkzD7AnLWKQMPzHDn0g4yFzTudf4=\n=W9Ok\n-----END PGP SIGNATURE-----\n", "payload": "tree 83b9f310edae4d92016c2f2ad72612446e918a12\nparent 4799d2eb0121bbc21fc9da70015ced663f6cfc72\nparent 86915ddf308bf4e4d4cb17fe0b2d7f12cd591328\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1522598697 +0200\ncommitter GitHub <noreply@github.com> 1522598697 +0200\n\nRollup merge of #49549 - Mark-Simulacrum:bootstrap-cleanup, r=alexcrichton\n\nRemove filetime dep from build_helper\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f9f76356b3c2eb12bb3090c6c1349be8593333", "html_url": "https://github.com/rust-lang/rust/commit/36f9f76356b3c2eb12bb3090c6c1349be8593333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f9f76356b3c2eb12bb3090c6c1349be8593333/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4799d2eb0121bbc21fc9da70015ced663f6cfc72", "url": "https://api.github.com/repos/rust-lang/rust/commits/4799d2eb0121bbc21fc9da70015ced663f6cfc72", "html_url": "https://github.com/rust-lang/rust/commit/4799d2eb0121bbc21fc9da70015ced663f6cfc72"}, {"sha": "86915ddf308bf4e4d4cb17fe0b2d7f12cd591328", "url": "https://api.github.com/repos/rust-lang/rust/commits/86915ddf308bf4e4d4cb17fe0b2d7f12cd591328", "html_url": "https://github.com/rust-lang/rust/commit/86915ddf308bf4e4d4cb17fe0b2d7f12cd591328"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "8729335faba817a8660d42f29b75fbc1561941ea", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=36f9f76356b3c2eb12bb3090c6c1349be8593333", "patch": "@@ -152,9 +152,6 @@ dependencies = [\n [[package]]\n name = \"build_helper\"\n version = \"0.1.0\"\n-dependencies = [\n- \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"byteorder\""}, {"sha": "e6aa78fba52ffd21209eef963e3cde30fdad6a72", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=36f9f76356b3c2eb12bb3090c6c1349be8593333", "patch": "@@ -1120,7 +1120,7 @@ pub fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path, is_check: boo\n     let max = max.unwrap();\n     let max_path = max_path.unwrap();\n     if stamp_contents == new_contents && max <= stamp_mtime {\n-        build.verbose(&format!(\"not updating {:?}; contents equal and {} <= {}\",\n+        build.verbose(&format!(\"not updating {:?}; contents equal and {:?} <= {:?}\",\n                 stamp, max, stamp_mtime));\n         return deps\n     }"}, {"sha": "01d704f816bbc8fc00813d2636f3fe44a847db35", "filename": "src/build_helper/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2FCargo.toml?ref=36f9f76356b3c2eb12bb3090c6c1349be8593333", "patch": "@@ -6,6 +6,3 @@ authors = [\"The Rust Project Developers\"]\n [lib]\n name = \"build_helper\"\n path = \"lib.rs\"\n-\n-[dependencies]\n-filetime = \"0.1\""}, {"sha": "5a12afd03e13b820c891aec362d9b6f3c5683f70", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f9f76356b3c2eb12bb3090c6c1349be8593333/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=36f9f76356b3c2eb12bb3090c6c1349be8593333", "patch": "@@ -10,14 +10,11 @@\n \n #![deny(warnings)]\n \n-extern crate filetime;\n-\n use std::fs::File;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::{fs, env};\n-\n-use filetime::FileTime;\n+use std::time::{SystemTime, UNIX_EPOCH};\n \n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n@@ -137,10 +134,8 @@ pub fn rerun_if_changed_anything_in_dir(dir: &Path) {\n }\n \n /// Returns the last-modified time for `path`, or zero if it doesn't exist.\n-pub fn mtime(path: &Path) -> FileTime {\n-    fs::metadata(path).map(|f| {\n-        FileTime::from_last_modification_time(&f)\n-    }).unwrap_or(FileTime::zero())\n+pub fn mtime(path: &Path) -> SystemTime {\n+    fs::metadata(path).and_then(|f| f.modified()).unwrap_or(UNIX_EPOCH)\n }\n \n /// Returns whether `dst` is up to date given that the file or files in `src`\n@@ -157,9 +152,9 @@ pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n         Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n     };\n     if meta.is_dir() {\n-        dir_up_to_date(src, &threshold)\n+        dir_up_to_date(src, threshold)\n     } else {\n-        FileTime::from_last_modification_time(&meta) <= threshold\n+        meta.modified().unwrap_or(UNIX_EPOCH) <= threshold\n     }\n }\n \n@@ -226,13 +221,13 @@ pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoiler\n                            search_path)\n }\n \n-fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n+fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());\n         if meta.is_dir() {\n             dir_up_to_date(&e.path(), threshold)\n         } else {\n-            FileTime::from_last_modification_time(&meta) < *threshold\n+            meta.modified().unwrap_or(UNIX_EPOCH) < threshold\n         }\n     })\n }"}]}