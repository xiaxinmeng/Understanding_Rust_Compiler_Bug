{"sha": "d110d309b64828142a2a9f4649e3e4647b54cb0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTBkMzA5YjY0ODI4MTQyYTJhOWY0NjQ5ZTNlNDY0N2I1NGNiMGY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T09:47:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T11:11:58Z"}, "message": "rustc_mir: deny(unused_lifetimes).", "tree": {"sha": "a74b104f003da1096ea618ed6fc4f8bd7c718686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74b104f003da1096ea618ed6fc4f8bd7c718686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d110d309b64828142a2a9f4649e3e4647b54cb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d110d309b64828142a2a9f4649e3e4647b54cb0f", "html_url": "https://github.com/rust-lang/rust/commit/d110d309b64828142a2a9f4649e3e4647b54cb0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d110d309b64828142a2a9f4649e3e4647b54cb0f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc34945e4f67b24fb310ec0e3195ef58544438f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc34945e4f67b24fb310ec0e3195ef58544438f", "html_url": "https://github.com/rust-lang/rust/commit/7dc34945e4f67b24fb310ec0e3195ef58544438f"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "516eb6d2941e52602c913a1d766fdd9e100136be", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -258,7 +258,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n     }\n }\n \n-impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n+impl<'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n     /// Simulates mutation of a place.\n     fn mutate_place(\n         &mut self,"}, {"sha": "a11e5d9a5568728c13ebee24b79bd1f659b39258", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n /// Returns `true` if the borrow represented by `kind` is\n /// allowed to be split into separate Reservation and\n /// Activation phases.\n-pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(kind: BorrowKind) -> bool {\n+pub(super) fn allow_two_phase_borrow(kind: BorrowKind) -> bool {\n     kind.allows_two_phase_borrow()\n }\n "}, {"sha": "fbb6161e8fe5ba5b12fb8ebd40ff43be4a2ca4c5", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -1575,7 +1575,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     /// Append `AscribeUserType` statements onto the end of `block`\n     /// for each ascription\n-    fn ascribe_types<'pat>(\n+    fn ascribe_types(\n         &mut self,\n         block: BasicBlock,\n         ascriptions: &[Ascription<'tcx>],"}, {"sha": "c767fff9253222347b40af0452252a5714211050", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -463,7 +463,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// that it *doesn't* apply. For now, we return false, indicate that the\n     /// test does not apply to this candidate, but it might be we can get\n     /// tighter match code if we do something a bit different.\n-    pub fn sort_candidate<'pat, 'cand>(\n+    pub fn sort_candidate<'pat>(\n         &mut self,\n         test_place: &Place<'tcx>,\n         test: &Test<'tcx>,"}, {"sha": "4e13291c787da81245ae24138452d5f4fafb7850", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -315,7 +315,7 @@ struct FrameSnapshot<'a, 'tcx: 'a> {\n     stmt: usize,\n }\n \n-impl_stable_hash_for!(impl<'mir, 'tcx: 'mir> for struct Frame<'mir, 'tcx> {\n+impl_stable_hash_for!(impl<> for struct Frame<'mir, 'tcx> {\n     body,\n     instance,\n     span,\n@@ -422,7 +422,7 @@ impl<'a, 'mir, 'tcx> Hash for InterpSnapshot<'a, 'mir, 'tcx>\n     }\n }\n \n-impl_stable_hash_for!(impl<'tcx, 'b, 'mir> for struct InterpSnapshot<'b, 'mir, 'tcx> {\n+impl_stable_hash_for!(impl<> for struct InterpSnapshot<'_, 'mir, 'tcx> {\n     // Not hashing memory: Avoid hashing memory all the time during execution\n     memory -> _,\n     stack,"}, {"sha": "6768d9ec6bc1999d200e32d70247aa1fb49a2bfd", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -81,7 +81,7 @@ pub struct RefTracking<T> {\n     pub todo: Vec<(T, Vec<PathElem>)>,\n }\n \n-impl<'tcx, T: Copy + Eq + Hash> RefTracking<T> {\n+impl<T: Copy + Eq + Hash> RefTracking<T> {\n     pub fn new(op: T) -> Self {\n         let mut ref_tracking = RefTracking {\n             seen: FxHashSet::default(),"}, {"sha": "a7cbe84330d899a9e10a5b760cb3649f928361a3", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -29,6 +29,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n #![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;"}, {"sha": "706ace0c1f1bca4354feb53234c24e6bfb0c2b4b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -907,7 +907,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn create_fn_mono_item<'a, 'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n+fn create_fn_mono_item<'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n     MonoItem::Fn(instance)\n }"}, {"sha": "b8077d224e4efd9bc2cf1121d53d5d155990af9c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -32,7 +32,7 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     inherited_blocks: Vec<(hir::HirId, bool)>,\n }\n \n-impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n+impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n         const_context: bool,\n         min_const_fn: bool,"}, {"sha": "5ac8a41ffeeafe62d3a98e0b5f07bb3934ab7f9f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -829,14 +829,14 @@ fn create_generator_resume_function<'a, 'tcx>(\n     dump_mir(tcx, None, \"generator_resume\", &0, source, body, |_, _| Ok(()) );\n }\n \n-fn source_info<'a, 'tcx>(body: &Body<'tcx>) -> SourceInfo {\n+fn source_info<'tcx>(body: &Body<'tcx>) -> SourceInfo {\n     SourceInfo {\n         span: body.span,\n         scope: OUTERMOST_SOURCE_SCOPE,\n     }\n }\n \n-fn insert_clean_drop<'a, 'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n+fn insert_clean_drop<'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars."}, {"sha": "4d1c90bc56d9e4ff7689dc04a67e4dcc9cfe76e2", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -323,7 +323,7 @@ impl MirPass for SimplifyLocals {\n }\n \n /// Construct the mapping while swapping out unused stuff out from the `vec`.\n-fn make_local_map<'tcx, V>(\n+fn make_local_map<V>(\n     vec: &mut IndexVec<Local, V>,\n     mask: BitSet<Local>,\n ) -> IndexVec<Local, Option<Local>> {"}, {"sha": "0fbf8bb3e273a9c8558ddbbfe84360919b87441f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -147,7 +147,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     //\n     // FIXME: I think we should just control the flags externally,\n     // and then we do not need this machinery.\n-    pub fn elaborate_drop<'a>(&mut self, bb: BasicBlock) {\n+    pub fn elaborate_drop(&mut self, bb: BasicBlock) {\n         debug!(\"elaborate_drop({:?})\", self);\n         let style = self.elaborator.drop_style(self.path, DropFlagMode::Deep);\n         debug!(\"elaborate_drop({:?}): live - {:?}\", self, style);\n@@ -285,7 +285,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     ///\n     /// NOTE: this does not clear the master drop flag, so you need\n     /// to point succ/unwind on a `drop_ladder_bottom`.\n-    fn drop_ladder<'a>(&mut self,\n+    fn drop_ladder(&mut self,\n                        fields: Vec<(Place<'tcx>, Option<D::Path>)>,\n                        succ: BasicBlock,\n                        unwind: Unwind)\n@@ -314,7 +314,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         (*normal_ladder.last().unwrap(), *unwind_ladder.last().unwrap())\n     }\n \n-    fn open_drop_for_tuple<'a>(&mut self, tys: &[Ty<'tcx>])\n+    fn open_drop_for_tuple(&mut self, tys: &[Ty<'tcx>])\n                                -> BasicBlock\n     {\n         debug!(\"open_drop_for_tuple({:?}, {:?})\", self, tys);\n@@ -328,7 +328,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_ladder(fields, succ, unwind).0\n     }\n \n-    fn open_drop_for_box<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n+    fn open_drop_for_box(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n                              -> BasicBlock\n     {\n         debug!(\"open_drop_for_box({:?}, {:?}, {:?})\", self, adt, substs);\n@@ -346,7 +346,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_subpath(&interior, interior_path, succ, unwind_succ)\n     }\n \n-    fn open_drop_for_adt<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n+    fn open_drop_for_adt(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n                              -> BasicBlock {\n         debug!(\"open_drop_for_adt({:?}, {:?}, {:?})\", self, adt, substs);\n         if adt.variants.len() == 0 {\n@@ -505,7 +505,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_flag_test_block(switch_block, succ, unwind)\n     }\n \n-    fn destructor_call_block<'a>(&mut self, (succ, unwind): (BasicBlock, Unwind))\n+    fn destructor_call_block(&mut self, (succ, unwind): (BasicBlock, Unwind))\n                                  -> BasicBlock\n     {\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n@@ -787,7 +787,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     ///\n     /// This creates a \"drop ladder\" that drops the needed fields of the\n     /// ADT, both in the success case or if one of the destructors fail.\n-    fn open_drop<'a>(&mut self) -> BasicBlock {\n+    fn open_drop(&mut self) -> BasicBlock {\n         let ty = self.place_ty(self.place);\n         match ty.sty {\n             ty::Closure(def_id, substs) => {\n@@ -837,7 +837,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     /// if FLAG(self.path)\n     ///     if let Some(mode) = mode: FLAG(self.path)[mode] = false\n     ///     drop(self.place)\n-    fn complete_drop<'a>(&mut self,\n+    fn complete_drop(&mut self,\n                          drop_mode: Option<DropFlagMode>,\n                          succ: BasicBlock,\n                          unwind: Unwind) -> BasicBlock\n@@ -867,7 +867,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         block\n     }\n \n-    fn elaborated_drop_block<'a>(&mut self) -> BasicBlock {\n+    fn elaborated_drop_block(&mut self) -> BasicBlock {\n         debug!(\"elaborated_drop_block({:?})\", self);\n         let unwind = self.unwind; // FIXME(#43234)\n         let succ = self.succ;\n@@ -876,7 +876,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         blk\n     }\n \n-    fn box_free_block<'a>(\n+    fn box_free_block(\n         &mut self,\n         adt: &'tcx ty::AdtDef,\n         substs: SubstsRef<'tcx>,\n@@ -887,7 +887,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_flag_test_block(block, target, unwind)\n     }\n \n-    fn unelaborated_free_block<'a>(\n+    fn unelaborated_free_block(\n         &mut self,\n         adt: &'tcx ty::AdtDef,\n         substs: SubstsRef<'tcx>,\n@@ -917,7 +917,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         free_block\n     }\n \n-    fn drop_block<'a>(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n+    fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n         let block = TerminatorKind::Drop {\n             location: self.place.clone(),\n             target,\n@@ -947,7 +947,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         }\n     }\n \n-    fn new_block<'a>(&mut self,\n+    fn new_block(&mut self,\n                      unwind: Unwind,\n                      k: TerminatorKind<'tcx>)\n                      -> BasicBlock"}, {"sha": "82ec5ab5f8a6afa5d164192d756d0a9eb0c8a075", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d110d309b64828142a2a9f4649e3e4647b54cb0f/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=d110d309b64828142a2a9f4649e3e4647b54cb0f", "patch": "@@ -109,7 +109,7 @@ pub enum DefUse {\n     Drop,\n }\n \n-pub fn categorize<'tcx>(context: PlaceContext) -> Option<DefUse> {\n+pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n     match context {\n         ///////////////////////////////////////////////////////////////////////////\n         // DEFS"}]}