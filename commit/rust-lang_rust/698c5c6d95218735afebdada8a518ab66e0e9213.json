{"sha": "698c5c6d95218735afebdada8a518ab66e0e9213", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGM1YzZkOTUyMTg3MzVhZmViZGFkYThhNTE4YWI2NmUwZTkyMTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-25T22:04:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-25T22:04:44Z"}, "message": "Auto merge of #72589 - Dylan-DPC:rollup-7l2a2bo, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72061 (add regression tests for stalled_on const vars)\n - #72424 (fix ICE when debug-printing MIR)\n - #72450 (Fix ice-#72442)\n - #72451 (Perform MIR NRVO even if types don't match)\n - #72538 (Removed all instances of const_field.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2e31f2bab33c4c56ab1832defeae1d0184a8bf2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e31f2bab33c4c56ab1832defeae1d0184a8bf2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698c5c6d95218735afebdada8a518ab66e0e9213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698c5c6d95218735afebdada8a518ab66e0e9213", "html_url": "https://github.com/rust-lang/rust/commit/698c5c6d95218735afebdada8a518ab66e0e9213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698c5c6d95218735afebdada8a518ab66e0e9213/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93bb2a50b37bc8bafe4d960e2afd839eaa854ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93bb2a50b37bc8bafe4d960e2afd839eaa854ed", "html_url": "https://github.com/rust-lang/rust/commit/f93bb2a50b37bc8bafe4d960e2afd839eaa854ed"}, {"sha": "b6a8915b2002352d2d10f5477068bebecc968761", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a8915b2002352d2d10f5477068bebecc968761", "html_url": "https://github.com/rust-lang/rust/commit/b6a8915b2002352d2d10f5477068bebecc968761"}], "stats": {"total": 233, "additions": 155, "deletions": 78}, "files": [{"sha": "e15ea11569f346172d4816abf43039364c3a3cfc", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -25,6 +25,7 @@\n     )\n )]\n #[doc(alias = \"?\")]\n+#[cfg_attr(not(bootstrap), lang = \"try\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "574f91e5b4d813d54e57475c83534b0c96288908", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -1,6 +1,5 @@\n use crate::mir::operand::OperandRef;\n use crate::traits::*;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::layout::HasTyCtxt;\n@@ -59,17 +58,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant\n             .map(|val| {\n                 let field_ty = ty.builtin_index().unwrap();\n-                let fields = match ty.kind {\n-                    ty::Array(_, n) => n.eval_usize(bx.tcx(), ty::ParamEnv::reveal_all()),\n-                    _ => bug!(\"invalid simd shuffle type: {}\", ty),\n-                };\n                 let c = ty::Const::from_value(bx.tcx(), val, ty);\n-                let values: Vec<_> = (0..fields)\n+                let values: Vec<_> = bx\n+                    .tcx()\n+                    .destructure_const(ty::ParamEnv::reveal_all().and(&c))\n+                    .fields\n+                    .into_iter()\n                     .map(|field| {\n-                        let field = bx.tcx().const_field(\n-                            ty::ParamEnv::reveal_all().and((&c, mir::Field::new(field as usize))),\n-                        );\n-                        if let Some(prim) = field.try_to_scalar() {\n+                        if let Some(prim) = field.val.try_to_scalar() {\n                             let layout = bx.layout_of(field_ty);\n                             let scalar = match layout.abi {\n                                 Abi::Scalar(ref x) => x,"}, {"sha": "83bada4041963deec529489e623e952b9fc98939", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -257,4 +257,6 @@ language_item_table! {\n     AlignOffsetLangItem,         \"align_offset\",       align_offset_fn,         Target::Fn;\n \n     TerminationTraitLangItem,    \"termination\",        termination,             Target::Trait;\n+\n+    TryTraitLangItem,            \"try\",                try_trait,               Target::Trait;\n }"}, {"sha": "2c0524fa9910212c0b6f425fbee24bd149883c27", "filename": "src/librustc_middle/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -49,7 +49,6 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use crate::mir;\n use crate::mir::interpret::{GlobalId, LitToConstInput};\n use crate::traits;\n use crate::traits::query::{"}, {"sha": "1083563c647b66cc52a82d884770a78abf3326cc", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -1,5 +1,4 @@\n use crate::dep_graph::SerializedDepNodeIndex;\n-use crate::mir;\n use crate::mir::interpret::{GlobalId, LitToConstInput};\n use crate::traits;\n use crate::traits::query::{\n@@ -553,13 +552,6 @@ rustc_queries! {\n             }\n         }\n \n-        /// Extracts a field of a (variant of a) const.\n-        query const_field(\n-            key: ty::ParamEnvAnd<'tcx, (&'tcx ty::Const<'tcx>, mir::Field)>\n-        ) -> ConstValue<'tcx> {\n-            desc { \"extract field of const\" }\n-        }\n-\n         /// Destructure a constant ADT or array into its variant index and its\n         /// field values.\n         query destructure_const("}, {"sha": "10426cf8561887bdd7af748d21bfd6b260273b62", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -1,5 +1,7 @@\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n-use crate::mir::interpret::{sign_extend, truncate, AllocId, ConstValue, Pointer, Scalar};\n+use crate::mir::interpret::{\n+    sign_extend, truncate, AllocId, ConstValue, GlobalAlloc, Pointer, Scalar,\n+};\n use crate::ty::layout::IntegerExt;\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n@@ -951,15 +953,20 @@ pub trait PrettyPrinter<'tcx>:\n                     },\n                     _,\n                 ),\n-            ) => {\n-                let byte_str = self\n-                    .tcx()\n-                    .global_alloc(ptr.alloc_id)\n-                    .unwrap_memory()\n-                    .get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n-                    .unwrap();\n-                p!(pretty_print_byte_str(byte_str));\n-            }\n+            ) => match self.tcx().get_global_alloc(ptr.alloc_id) {\n+                Some(GlobalAlloc::Memory(alloc)) => {\n+                    if let Ok(byte_str) = alloc.get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n+                    {\n+                        p!(pretty_print_byte_str(byte_str))\n+                    } else {\n+                        p!(write(\"<too short allocation>\"))\n+                    }\n+                }\n+                // FIXME: for statics and functions, we could in principle print more detail.\n+                Some(GlobalAlloc::Static(def_id)) => p!(write(\"<static({:?})>\", def_id)),\n+                Some(GlobalAlloc::Function(_)) => p!(write(\"<function>\")),\n+                None => p!(write(\"<dangling pointer>\")),\n+            },\n             // Bool\n             (Scalar::Raw { data: 0, .. }, ty::Bool) => p!(write(\"false\")),\n             (Scalar::Raw { data: 1, .. }, ty::Bool) => p!(write(\"true\")),\n@@ -1018,6 +1025,9 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n+                // FIXME: this can ICE when the ptr is dangling or points to a non-function.\n+                // We should probably have a helper method to share code with the \"Byte strings\"\n+                // printing above (which also has to handle pointers to all sorts of things).\n                 let instance = self.tcx().global_alloc(ptr.alloc_id).unwrap_fn();\n                 self = self.typed_value(\n                     |this| this.print_value_path(instance.def_id(), instance.substs),"}, {"sha": "695e0741e35989fa35269270871ea830891e7a80", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -122,7 +122,7 @@ pub(super) fn op_to_const<'tcx>(\n     } else {\n         // It is guaranteed that any non-slice scalar pair is actually ByRef here.\n         // When we come back from raw const eval, we are always by-ref. The only way our op here is\n-        // by-val is if we are in const_field, i.e., if this is (a field of) something that we\n+        // by-val is if we are in destructure_const, i.e., if this is (a field of) something that we\n         // \"tried to make immediate\" before. We wouldn't do that for non-slice scalar pairs or\n         // structs containing such.\n         op.try_as_mplace(ecx)"}, {"sha": "3539ccf5de038299aa83a349ec41de59265b50b7", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -5,7 +5,6 @@ use std::convert::TryFrom;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n-use rustc_target::abi::VariantIdx;\n \n use crate::interpret::{intern_const_alloc_recursive, ConstValue, InternKind, InterpCx};\n \n@@ -19,32 +18,6 @@ pub use eval_queries::*;\n pub use fn_queries::*;\n pub use machine::*;\n \n-/// Extracts a field of a (variant of a) const.\n-// this function uses `unwrap` copiously, because an already validated constant must have valid\n-// fields and can thus never fail outside of compiler bugs\n-pub(crate) fn const_field<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    variant: Option<VariantIdx>,\n-    field: mir::Field,\n-    value: &'tcx ty::Const<'tcx>,\n-) -> ConstValue<'tcx> {\n-    trace!(\"const_field: {:?}, {:?}\", field, value);\n-    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    // get the operand again\n-    let op = ecx.eval_const_to_op(value, None).unwrap();\n-    // downcast\n-    let down = match variant {\n-        None => op,\n-        Some(variant) => ecx.operand_downcast(op, variant).unwrap(),\n-    };\n-    // then project\n-    let field = ecx.operand_field(down, field.index()).unwrap();\n-    // and finally move back to the const world, always normalizing because\n-    // this is not called for statics.\n-    op_to_const(&ecx, field)\n-}\n-\n pub(crate) fn const_caller_location(\n     tcx: TyCtxt<'tcx>,\n     (file, line, col): (Symbol, u32, u32),"}, {"sha": "928d5bf88f2fcbaa44880d4de197830647e7a522", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -56,10 +56,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.const_eval_validated = const_eval::const_eval_validated_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.const_field = |tcx, param_env_and_value| {\n-        let (param_env, (value, field)) = param_env_and_value.into_parts();\n-        const_eval::const_field(tcx, param_env, None, field, value)\n-    };\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::destructure_const(tcx, param_env, value)"}, {"sha": "ffad1ebea005bfe1eb8d01b5cddca8618c04f5b7", "filename": "src/librustc_mir/transform/nrvo.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -44,18 +44,6 @@ impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n             }\n         };\n \n-        // Sometimes, the return place is assigned a local of a different but coercable type, for\n-        // example `&T` instead of `&mut T`. Overwriting the `LocalInfo` for the return place would\n-        // result in it having an incorrect type. Although this doesn't seem to cause a problem in\n-        // codegen, bail out anyways since it happens so rarely.\n-        let ret_ty = body.local_decls[mir::RETURN_PLACE].ty;\n-        let assigned_ty = body.local_decls[returned_local].ty;\n-        if ret_ty != assigned_ty {\n-            debug!(\"`{:?}` was eligible for NRVO but for type mismatch\", src.def_id());\n-            debug!(\"typeof(_0) != typeof({:?}); {:?} != {:?}\", returned_local, ret_ty, assigned_ty);\n-            return;\n-        }\n-\n         debug!(\n             \"`{:?}` was eligible for NRVO, making {:?} the return place\",\n             src.def_id(),\n@@ -72,6 +60,12 @@ impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n         // Overwrite the debuginfo of `_0` with that of the renamed local.\n         let (renamed_decl, ret_decl) =\n             body.local_decls.pick2_mut(returned_local, mir::RETURN_PLACE);\n+\n+        // Sometimes, the return place is assigned a local of a different but coercable type, for\n+        // example `&mut T` instead of `&T`. Overwriting the `LocalInfo` for the return place means\n+        // its type may no longer match the return type of its function. This doesn't cause a\n+        // problem in codegen because these two types are layout-compatible, but may be unexpected.\n+        debug!(\"_0: {:?} = {:?}: {:?}\", ret_decl.ty, returned_local, renamed_decl.ty);\n         ret_decl.clone_from(renamed_decl);\n \n         // The return place is always mutable."}, {"sha": "50af3c12c6f3860a5983f1c33c0fab47b6e335c9", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -402,7 +402,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n-                        self.suggest_await_before_try(&mut err, &obligation, &trait_ref, span);\n+\n+                        if Some(trait_ref.def_id()) == tcx.lang_items().try_trait() {\n+                            self.suggest_await_before_try(&mut err, &obligation, &trait_ref, span);\n+                        }\n+\n                         if self.suggest_impl_trait(&mut err, span, &obligation, &trait_ref) {\n                             err.emit();\n                             return;"}, {"sha": "e2ee22d8a55f8f0555e045cf1eb92f008b752401", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         // trait selection is because we don't have enough\n                         // information about the types in the trait.\n                         pending_obligation.stalled_on =\n-                            trait_ref_type_vars(self.selcx, data.to_poly_trait_ref());\n+                            trait_ref_infer_vars(self.selcx, data.to_poly_trait_ref());\n \n                         debug!(\n                             \"process_predicate: pending obligation {:?} now stalled on {:?}\",\n@@ -435,7 +435,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                     Ok(None) => {\n                         let tcx = self.selcx.tcx();\n                         pending_obligation.stalled_on =\n-                            trait_ref_type_vars(self.selcx, data.to_poly_trait_ref(tcx));\n+                            trait_ref_infer_vars(self.selcx, data.to_poly_trait_ref(tcx));\n                         ProcessResult::Unchanged\n                     }\n                     Ok(Some(os)) => ProcessResult::Changed(mk_pending(infcx, os)),\n@@ -603,8 +603,8 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     }\n }\n \n-/// Returns the set of type inference variables contained in a trait ref.\n-fn trait_ref_type_vars<'a, 'tcx>(\n+/// Returns the set of inference variables contained in a trait ref.\n+fn trait_ref_infer_vars<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n ) -> Vec<TyOrConstInferVar<'tcx>> {"}, {"sha": "61c8c8c1594d3b80a6d2a36ffd1409460e7c00c9", "filename": "src/test/ui/async-await/issue-72442.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -0,0 +1,26 @@\n+// edition:2018\n+// compile-flags:-Cincremental=tmp/issue-72442\n+\n+use std::fs::File;\n+use std::future::Future;\n+use std::io::prelude::*;\n+\n+fn main() -> Result<(), Box<dyn std::error::Error>> {\n+    block_on(async {\n+        {\n+            let path = std::path::Path::new(\".\");\n+            let mut f = File::open(path.to_str())?;\n+            //~^ ERROR the trait bound\n+            let mut src = String::new();\n+            f.read_to_string(&mut src)?;\n+            Ok(())\n+        }\n+    })\n+}\n+\n+fn block_on<F>(f: F) -> F::Output\n+where\n+    F: Future<Output = Result<(), Box<dyn std::error::Error>>>,\n+{\n+    Ok(())\n+}"}, {"sha": "56854333578713afe664cfd23c503d6d4a11c174", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `std::option::Option<&str>: std::convert::AsRef<std::path::Path>` is not satisfied\n+  --> $DIR/issue-72442.rs:12:36\n+   |\n+LL |             let mut f = File::open(path.to_str())?;\n+   |                                    ^^^^^^^^^^^^^ the trait `std::convert::AsRef<std::path::Path>` is not implemented for `std::option::Option<&str>`\n+   | \n+  ::: $SRC_DIR/libstd/fs.rs:LL:COL\n+   |\n+LL |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {\n+   |                    ----------- required by this bound in `std::fs::File::open`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ff2a5250263d5585a73120f8834b2062b7d16e2b", "filename": "src/test/ui/const-generics/issue-70180-1-stalled_on.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -0,0 +1,35 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+pub fn works() {\n+    let array/*: [_; _]*/ = default_array();\n+    let _: [_; 4] = array;\n+    Foo::foo(&array);\n+}\n+\n+pub fn didnt_work() {\n+    let array/*: [_; _]*/ = default_array();\n+    Foo::foo(&array);\n+    let _: [_; 4] = array;\n+}\n+\n+trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+impl Foo for [i32; 4] {}\n+impl Foo for [i64; 8] {}\n+\n+// Only needed because `[_; _]` is not valid type syntax.\n+fn default_array<T, const N: usize>() -> [T; N]\n+where\n+    [T; N]: Default,\n+{\n+    Default::default()\n+}\n+\n+fn main() {\n+    works();\n+    didnt_work();\n+}"}, {"sha": "83338668f4ffde204681938230d23def9e833184", "filename": "src/test/ui/const-generics/issue-70180-2-stalled_on.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c5c6d95218735afebdada8a518ab66e0e9213/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs?ref=698c5c6d95218735afebdada8a518ab66e0e9213", "patch": "@@ -0,0 +1,35 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn works() {\n+    let array/*: [u8; _]*/ = default_byte_array();\n+    let _: [_; 4] = array;\n+    Foo::foo(&array);\n+}\n+\n+fn didnt_work() {\n+    let array/*: [u8; _]*/ = default_byte_array();\n+    Foo::foo(&array);\n+    let _: [_; 4] = array;\n+}\n+\n+trait Foo<T> {\n+    fn foo(&self) {}\n+}\n+\n+impl Foo<i32> for [u8; 4] {}\n+impl Foo<i64> for [u8; 8] {}\n+\n+// Only needed because `[u8; _]` is not valid type syntax.\n+fn default_byte_array<const N: usize>() -> [u8; N]\n+where\n+    [u8; N]: Default,\n+{\n+    Default::default()\n+}\n+\n+fn main() {\n+    works();\n+    didnt_work();\n+}"}]}