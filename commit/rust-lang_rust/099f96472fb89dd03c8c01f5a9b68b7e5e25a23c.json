{"sha": "099f96472fb89dd03c8c01f5a9b68b7e5e25a23c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OWY5NjQ3MmZiODlkZDAzYzhjMDFmNWE5YjY4YjdlNWUyNWEyM2M=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-06T01:56:43Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-06T01:56:43Z"}, "message": "save-analysis: give better info for Unions", "tree": {"sha": "bd3fb8b6da12a023d5701783bfd9ba2459dcb8bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3fb8b6da12a023d5701783bfd9ba2459dcb8bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/099f96472fb89dd03c8c01f5a9b68b7e5e25a23c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/099f96472fb89dd03c8c01f5a9b68b7e5e25a23c", "html_url": "https://github.com/rust-lang/rust/commit/099f96472fb89dd03c8c01f5a9b68b7e5e25a23c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/099f96472fb89dd03c8c01f5a9b68b7e5e25a23c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44990e5b14fc7901071b26aa98b281675459176e", "url": "https://api.github.com/repos/rust-lang/rust/commits/44990e5b14fc7901071b26aa98b281675459176e", "html_url": "https://github.com/rust-lang/rust/commit/44990e5b14fc7901071b26aa98b281675459176e"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "688d3c82810dc535bc4427d8351ca8e2f6d9e7e2", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/099f96472fb89dd03c8c01f5a9b68b7e5e25a23c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f96472fb89dd03c8c01f5a9b68b7e5e25a23c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=099f96472fb89dd03c8c01f5a9b68b7e5e25a23c", "patch": "@@ -521,39 +521,41 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                       item: &'l ast::Item,\n                       def: &'l ast::VariantData,\n                       ty_params: &'l ast::Generics) {\n+        debug!(\"process_struct {:?} {:?}\", item, item.span);\n         let name = item.ident.to_string();\n         let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n \n-        let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Struct);\n-        let (value, fields) =\n-            if let ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, _), _) = item.node\n-        {\n-            let include_priv_fields = !self.save_ctxt.config.pub_only;\n-            let fields_str = fields\n-                .iter()\n-                .enumerate()\n-                .filter_map(|(i, f)| {\n-                     if include_priv_fields || f.vis == ast::Visibility::Public {\n-                         f.ident.map(|i| i.to_string()).or_else(|| Some(i.to_string()))\n-                     } else {\n-                         None\n-                     }\n-                })\n-                .collect::<Vec<_>>()\n-                .join(\", \");\n-            let value = format!(\"{} {{ {} }}\", name, fields_str);\n-            (value, fields.iter().map(|f| ::id_from_node_id(f.id, &self.save_ctxt)).collect())\n-        } else {\n-            (String::new(), vec![])\n+        let (kind, keyword) = match item.node {\n+            ast::ItemKind::Struct(_, _) => (DefKind::Struct, keywords::Struct),\n+            ast::ItemKind::Union(_, _) => (DefKind::Union, keywords::Union),\n+            _ => unreachable!(),\n+        };\n+\n+        let sub_span = self.span.sub_span_after_keyword(item.span, keyword);\n+        let (value, fields) = match item.node {\n+            ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, _), _) |\n+            ast::ItemKind::Union(ast::VariantData::Struct(ref fields, _), _) => {\n+                let include_priv_fields = !self.save_ctxt.config.pub_only;\n+                let fields_str = fields\n+                    .iter()\n+                    .enumerate()\n+                    .filter_map(|(i, f)| {\n+                         if include_priv_fields || f.vis == ast::Visibility::Public {\n+                             f.ident.map(|i| i.to_string()).or_else(|| Some(i.to_string()))\n+                         } else {\n+                             None\n+                         }\n+                    })\n+                    .collect::<Vec<_>>()\n+                    .join(\", \");\n+                let value = format!(\"{} {{ {} }}\", name, fields_str);\n+                (value, fields.iter().map(|f| ::id_from_node_id(f.id, &self.save_ctxt)).collect())\n+            }\n+            _ => (String::new(), vec![])\n         };\n \n         if !self.span.filter_generated(sub_span, item.span) {\n             let span = self.span_from_span(sub_span.expect(\"No span found for struct\"));\n-            let kind = match item.node {\n-                ast::ItemKind::Struct(_, _) => DefKind::Struct,\n-                ast::ItemKind::Union(_, _) => DefKind::Union,\n-                _ => unreachable!(),\n-            };\n             self.dumper.dump_def(item.vis == ast::Visibility::Public, Def {\n                 kind,\n                 id: ::id_from_node_id(item.id, &self.save_ctxt),"}]}