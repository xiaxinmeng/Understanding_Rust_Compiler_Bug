{"sha": "9bfb8d3addc8eed916b3ff0747131c1f9bb97e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZmI4ZDNhZGRjOGVlZDkxNmIzZmYwNzQ3MTMxYzFmOWJiOTdlNTI=", "commit": {"author": {"name": "Jeehoon Kang", "email": "jeehoon.kang@sf.snu.ac.kr", "date": "2015-07-31T14:55:01Z"}, "committer": {"name": "Jeehoon Kang", "email": "jeehoon.kang@sf.snu.ac.kr", "date": "2015-08-06T06:40:41Z"}, "message": "Revise TARPL's description for allocating 0 bytes\n\nIn Section 3.2, TARPL says that \"standard allocators (including jemalloc, the one used by default in Rust) generally consider passing in 0 for the size of an allocation as Undefined Behaviour.\"\nHowever, the C standard and jemalloc manual says allocating zero bytes\nshould succeed:\n\n- C11 7.22.3 paragraph 1: \"If the size of the space requested is zero, the behavior is implementation-defined: either a null pointer is returned, or the behavior is as if the size were some nonzero value, except that the returned pointer shall not be used to access an object.\"\n- [jemalloc manual](http://www.freebsd.org/cgi/man.cgi?query=jemalloc&sektion=3): \"The malloc and calloc functions return a\tpointer\tto the allocated memory if successful; otherwise a NULL pointer is returned and errno is set to ENOMEM.\"\n    + Note that the description for `allocm` says \"Behavior\tis undefined if\tsize is 0,\" but it is an experimental API.", "tree": {"sha": "9acdc2f664f2f965573a5d5e3b28b95f4794a9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9acdc2f664f2f965573a5d5e3b28b95f4794a9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52", "html_url": "https://github.com/rust-lang/rust/commit/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52/comments", "author": {"login": "jeehoonkang", "id": 1201316, "node_id": "MDQ6VXNlcjEyMDEzMTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1201316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeehoonkang", "html_url": "https://github.com/jeehoonkang", "followers_url": "https://api.github.com/users/jeehoonkang/followers", "following_url": "https://api.github.com/users/jeehoonkang/following{/other_user}", "gists_url": "https://api.github.com/users/jeehoonkang/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeehoonkang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeehoonkang/subscriptions", "organizations_url": "https://api.github.com/users/jeehoonkang/orgs", "repos_url": "https://api.github.com/users/jeehoonkang/repos", "events_url": "https://api.github.com/users/jeehoonkang/events{/privacy}", "received_events_url": "https://api.github.com/users/jeehoonkang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeehoonkang", "id": 1201316, "node_id": "MDQ6VXNlcjEyMDEzMTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1201316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeehoonkang", "html_url": "https://github.com/jeehoonkang", "followers_url": "https://api.github.com/users/jeehoonkang/followers", "following_url": "https://api.github.com/users/jeehoonkang/following{/other_user}", "gists_url": "https://api.github.com/users/jeehoonkang/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeehoonkang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeehoonkang/subscriptions", "organizations_url": "https://api.github.com/users/jeehoonkang/orgs", "repos_url": "https://api.github.com/users/jeehoonkang/repos", "events_url": "https://api.github.com/users/jeehoonkang/events{/privacy}", "received_events_url": "https://api.github.com/users/jeehoonkang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03456183e85fe7bd465bbe7c8f67885a2528444", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03456183e85fe7bd465bbe7c8f67885a2528444", "html_url": "https://github.com/rust-lang/rust/commit/d03456183e85fe7bd465bbe7c8f67885a2528444"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "e8637e38ac7d5f7d3230a5dbca95dc854a5352f1", "filename": "src/doc/nomicon/exotic-sizes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52/src%2Fdoc%2Fnomicon%2Fexotic-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/9bfb8d3addc8eed916b3ff0747131c1f9bb97e52/src%2Fdoc%2Fnomicon%2Fexotic-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fexotic-sizes.md?ref=9bfb8d3addc8eed916b3ff0747131c1f9bb97e52", "patch": "@@ -85,8 +85,8 @@ support values.\n Safe code need not worry about ZSTs, but *unsafe* code must be careful about the\n consequence of types with no size. In particular, pointer offsets are no-ops,\n and standard allocators (including jemalloc, the one used by default in Rust)\n-generally consider passing in `0` for the size of an allocation as Undefined\n-Behaviour.\n+may return `nullptr` when a zero-sized allocation is requested, which is\n+indistinguishable from out of memory.\n \n \n "}]}