{"sha": "6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTIyZWQ5NzUyYjIzOWZjZDRlN2M3NTY3MzkwN2NlYjFhYzZiNjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T16:24:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T16:24:26Z"}, "message": "Redner self as param for call infor for assoc fn call", "tree": {"sha": "34bea64bd48b51b0318b3a6e45037eb19aebc233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34bea64bd48b51b0318b3a6e45037eb19aebc233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "html_url": "https://github.com/rust-lang/rust/commit/6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da22ed9752b239fcd4e7c75673907ceb1ac6b65/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e9681c79095d6c10a851cfefe64cf1a3570ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e9681c79095d6c10a851cfefe64cf1a3570ec5", "html_url": "https://github.com/rust-lang/rust/commit/a4e9681c79095d6c10a851cfefe64cf1a3570ec5"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "eb6a14eda4e54b1b55267cb23a5427a7da842a7a", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6da22ed9752b239fcd4e7c75673907ceb1ac6b65/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da22ed9752b239fcd4e7c75673907ceb1ac6b65/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "patch": "@@ -1552,7 +1552,10 @@ impl Callable {\n         let param_list = src.value.param_list()?;\n         param_list.self_param()\n     }\n-    pub fn params(&self, db: &dyn HirDatabase) -> Vec<(Option<ast::Pat>, Type)> {\n+    pub fn params(\n+        &self,\n+        db: &dyn HirDatabase,\n+    ) -> Vec<(Option<Either<ast::SelfParam, ast::Pat>>, Type)> {\n         let types = self\n             .sig\n             .params()\n@@ -1562,7 +1565,14 @@ impl Callable {\n         let patterns = match self.id {\n             CallableDefId::FunctionId(func) => {\n                 let src = func.lookup(db.upcast()).source(db.upcast());\n-                src.value.param_list().map(|it| it.params().map(|it| it.pat()))\n+                src.value.param_list().map(|param_list| {\n+                    param_list\n+                        .self_param()\n+                        .map(|it| Some(Either::Left(it)))\n+                        .filter(|_| !self.is_bound_method)\n+                        .into_iter()\n+                        .chain(param_list.params().map(|it| it.pat().map(Either::Right)))\n+                })\n             }\n             CallableDefId::StructId(_) => None,\n             CallableDefId::EnumVariantId(_) => None,"}, {"sha": "35a8a0dc53f59d525851935e70a186b87816656a", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6da22ed9752b239fcd4e7c75673907ceb1ac6b65/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da22ed9752b239fcd4e7c75673907ceb1ac6b65/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "patch": "@@ -1,4 +1,5 @@\n //! FIXME: write short doc here\n+use either::Either;\n use hir::{Docs, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n@@ -80,7 +81,10 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n         for (pat, ty) in callable.params(db) {\n             buf.clear();\n             if let Some(pat) = pat {\n-                format_to!(buf, \"{}: \", pat);\n+                match pat {\n+                    Either::Left(_self) => format_to!(buf, \"self: \"),\n+                    Either::Right(pat) => format_to!(buf, \"{}: \", pat),\n+                }\n             }\n             format_to!(buf, \"{}\", ty.display(db));\n             res.push_param(&buf);\n@@ -383,20 +387,37 @@ fn bar() {\n         check(\n             r#\"\n struct S;\n-impl S { pub fn do_it(&self, x: i32) {} }\n-\n-fn bar() {\n-    let s: S = S;\n-    s.do_it(<|>);\n+impl S {\n+    fn foo(&self, x: i32) {}\n }\n+\n+fn main() { S.foo(<|>); }\n \"#,\n             expect![[r#\"\n-                fn do_it(&self, x: i32)\n+                fn foo(&self, x: i32)\n                 (<x: i32>)\n             \"#]],\n         );\n     }\n \n+    #[test]\n+    fn test_fn_signature_for_method_with_arg_as_assoc_fn() {\n+        check(\n+            r#\"\n+struct S;\n+impl S {\n+    fn foo(&self, x: i32) {}\n+}\n+\n+fn main() { S::foo(<|>); }\n+\"#,\n+            expect![[r#\"\n+                fn foo(self: &S, x: i32)\n+                (<self: &S>, x: i32)\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_fn_signature_with_docs_simple() {\n         check("}]}