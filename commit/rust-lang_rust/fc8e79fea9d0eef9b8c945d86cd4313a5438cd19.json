{"sha": "fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "node_id": "C_kwDOAAsO6NoAKGZjOGU3OWZlYTlkMGVlZjliOGM5NDVkODZjZDQzMTNhNTQzOGNkMTk", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2021-10-30T22:21:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-30T22:21:33Z"}, "message": "Sync from rust (#107)\n\n* Rebase fallout.\r\n\r\n* Move rustc_middle::middle::cstore to rustc_session.\r\n\r\n* Create more accurate debuginfo for vtables.\r\n\r\nBefore this commit all vtables would have the same name \"vtable\" in\r\ndebuginfo. Now they get a name that identifies the implementing type\r\nand the trait that is being implemented.\r\n\r\n* Remove alloc::prelude\r\n\r\nAs per the libs team decision in #58935.\r\n\r\nCloses #58935\r\n\r\n* Make hash_result an Option.\r\n\r\n* Properly check `target_features` not to trigger an assertion\r\n\r\n* Add LLVM CFI support to the Rust compiler\r\n\r\nThis commit adds LLVM Control Flow Integrity (CFI) support to the Rust\r\ncompiler. It initially provides forward-edge control flow protection for\r\nRust-compiled code only by aggregating function pointers in groups\r\nidentified by their number of arguments.\r\n\r\nForward-edge control flow protection for C or C++ and Rust -compiled\r\ncode \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code\r\nshare the same virtual address space) will be provided in later work as\r\npart of this project by defining and using compatible type identifiers\r\n(see Type metadata in the design document in the tracking issue #89653).\r\n\r\nLLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e.,\r\n-Clto).\r\n\r\n* Update to nightly-2021-10-30\r\n\r\n* Add deduplication of constant values as rustc relies on LLVM doing that\r\n\r\nCo-authored-by: Camille GILLOT <gillot.camille@gmail.com>\r\nCo-authored-by: Michael Woerister <michaelwoerister@posteo>\r\nCo-authored-by: Amanieu d'Antras <amanieu@gmail.com>\r\nCo-authored-by: Yuki Okushi <yuki.okushi@huawei.com>\r\nCo-authored-by: Ramon de C Valle <rcvalle@users.noreply.github.com>", "tree": {"sha": "9dbe5b6cba411ca347604108f16676bd02bef33b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dbe5b6cba411ca347604108f16676bd02bef33b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhfcVuCRBK7hj4Ov3rIwAA8n8IAEOGZfZu++ohRY4tVl0evURL\no+frdXDescHD84oEIGFhK8c3fDj0lWhJCTs1JZycMScauJDC3vRwcwCppoB3VmRE\nJYXQwSMOqXRbIyqVKlF8cfoMflwv4YL4crTWNTZFyAbFtGR/LiffOFWe3JRTh9o5\nOAXNDUBDPIUvHpKT16HoRLQew8YR/J7ldNGIMRAPuX3QDpQvJBfeLPMZcLmFGe3k\nEOfmkm68T05YAE9Yg3ullFpgmjD7K10LOGdZ4xdPA5OflGzZzGvVF4lEX9xOpEZq\nYHDVXAGXEqhkPVtUl6vSI/HtGRgqPh/VkbULIJqcMb8B+OXPmpVdyVBbwj4wL5w=\n=ZNAV\n-----END PGP SIGNATURE-----\n", "payload": "tree 9dbe5b6cba411ca347604108f16676bd02bef33b\nparent 1d064f1741641ef66f8fe03965349a26b6939545\nauthor antoyo <antoyo@users.noreply.github.com> 1635632493 -0400\ncommitter GitHub <noreply@github.com> 1635632493 -0400\n\nSync from rust (#107)\n\n* Rebase fallout.\r\n\r\n* Move rustc_middle::middle::cstore to rustc_session.\r\n\r\n* Create more accurate debuginfo for vtables.\r\n\r\nBefore this commit all vtables would have the same name \"vtable\" in\r\ndebuginfo. Now they get a name that identifies the implementing type\r\nand the trait that is being implemented.\r\n\r\n* Remove alloc::prelude\r\n\r\nAs per the libs team decision in #58935.\r\n\r\nCloses #58935\r\n\r\n* Make hash_result an Option.\r\n\r\n* Properly check `target_features` not to trigger an assertion\r\n\r\n* Add LLVM CFI support to the Rust compiler\r\n\r\nThis commit adds LLVM Control Flow Integrity (CFI) support to the Rust\r\ncompiler. It initially provides forward-edge control flow protection for\r\nRust-compiled code only by aggregating function pointers in groups\r\nidentified by their number of arguments.\r\n\r\nForward-edge control flow protection for C or C++ and Rust -compiled\r\ncode \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code\r\nshare the same virtual address space) will be provided in later work as\r\npart of this project by defining and using compatible type identifiers\r\n(see Type metadata in the design document in the tracking issue #89653).\r\n\r\nLLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e.,\r\n-Clto).\r\n\r\n* Update to nightly-2021-10-30\r\n\r\n* Add deduplication of constant values as rustc relies on LLVM doing that\r\n\r\nCo-authored-by: Camille GILLOT <gillot.camille@gmail.com>\r\nCo-authored-by: Michael Woerister <michaelwoerister@posteo>\r\nCo-authored-by: Amanieu d'Antras <amanieu@gmail.com>\r\nCo-authored-by: Yuki Okushi <yuki.okushi@huawei.com>\r\nCo-authored-by: Ramon de C Valle <rcvalle@users.noreply.github.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "html_url": "https://github.com/rust-lang/rust/commit/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d064f1741641ef66f8fe03965349a26b6939545", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d064f1741641ef66f8fe03965349a26b6939545", "html_url": "https://github.com/rust-lang/rust/commit/1d064f1741641ef66f8fe03965349a26b6939545"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "74ea7ec4ede69e3670b51be059b322c3ba2cf946", "filename": "example/alloc_example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -1,10 +1,10 @@\n-#![feature(start, box_syntax, core_intrinsics, alloc_prelude, alloc_error_handler)]\n+#![feature(start, box_syntax, core_intrinsics, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;\n extern crate alloc_system;\n \n-use alloc::prelude::v1::*;\n+use alloc::boxed::Box;\n \n use alloc_system::System;\n "}, {"sha": "3f315e0997622d27bdfa36e48ac42298cd990c98", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -1 +1 @@\n-nightly-2021-09-28\n+nightly-2021-10-30"}, {"sha": "11dd6d49aa768d5d207cf4a1e4fe57e2008534a1", "filename": "src/archive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -1,12 +1,11 @@\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n-use rustc_session::Session;\n use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n+use rustc_session::Session;\n \n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_middle::middle::cstore::DllImport;\n-\n+use rustc_session::cstore::DllImport;\n \n struct ArchiveConfig<'a> {\n     sess: &'a Session,"}, {"sha": "7c3ed3c5ee9db8d68b0aea669111bd1e9216ad8f", "filename": "src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         true\n     }\n \n-    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, _span: &[Span]) {\n+    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, _span: &[Span], _instance: Instance<'_>) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n         let is_x86 = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64);\n         let att_dialect = is_x86 && options.contains(InlineAsmOptions::ATT_SYNTAX);"}, {"sha": "e861658a09468c0ea0f4ee15eb0621dfe2ecce10", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -7,14 +7,14 @@ use gccjit::{\n     GlobalKind,\n };\n use rustc_middle::dep_graph;\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols;\n use rustc_middle::ty::TyCtxt;\n use rustc_middle::mir::mono::Linkage;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::DebugInfoMethods;\n+use rustc_metadata::EncodedMetadata;\n use rustc_session::config::DebugInfo;\n use rustc_span::Symbol;\n \n@@ -59,7 +59,13 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (Modul\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n-    let (module, _) = tcx.dep_graph.with_task(dep_node, tcx, cgu_name, module_codegen, dep_graph::hash_result);\n+    let (module, _) = tcx.dep_graph.with_task(\n+        dep_node,\n+        tcx,\n+        cgu_name,\n+        module_codegen,\n+        Some(dep_graph::hash_result),\n+    );\n     let time_to_codegen = start_time.elapsed();\n     drop(prof_timer);\n \n@@ -152,7 +158,7 @@ pub fn write_compressed_metadata<'tcx>(tcx: TyCtxt<'tcx>, metadata: &EncodedMeta\n \n     let context = &gcc_module.context;\n     let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n-    FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data).unwrap();\n+    FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data()).unwrap();\n \n     let name = exported_symbols::metadata_symbol_name(tcx);\n     let typ = context.new_array_type(None, context.new_type::<u8>(), compressed.len() as i32);"}, {"sha": "58b7f8cb8e97c6f7df8cd335783b48fc7f463856", "filename": "src/builder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -910,6 +910,16 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n+    fn type_metadata(&mut self, _function: RValue<'gcc>, _typeid: String) {\n+        // Unsupported.\n+    }\n+\n+    fn typeid_metadata(&mut self, _typeid: String) -> RValue<'gcc> {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n+\n     fn store(&mut self, val: RValue<'gcc>, ptr: RValue<'gcc>, align: Align) -> RValue<'gcc> {\n         self.store_with_flags(val, ptr, align, MemFlags::empty())\n     }"}, {"sha": "6289012696557aed081fa4df709750e20bf5162f", "filename": "src/consts.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -31,9 +31,13 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n \n impl<'gcc, 'tcx> StaticMethods for CodegenCx<'gcc, 'tcx> {\n     fn static_addr_of(&self, cv: RValue<'gcc>, align: Align, kind: Option<&str>) -> RValue<'gcc> {\n-        if let Some(global_value) = self.const_globals.borrow().get(&cv) {\n-            // TODO(antoyo): upgrade alignment.\n-            return *global_value;\n+        // TODO(antoyo): implement a proper rvalue comparison in libgccjit instead of doing the\n+        // following:\n+        for (value, variable) in &*self.const_globals.borrow() {\n+            if format!(\"{:?}\", value) == format!(\"{:?}\", cv) {\n+                // TODO(antoyo): upgrade alignment.\n+                return *variable;\n+            }\n         }\n         let global_value = self.static_addr_of_mut(cv, align, kind);\n         // TODO(antoyo): set global constant."}, {"sha": "31959fa19c588b9265143b9e73b3a168fae07ad4", "filename": "src/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -2,7 +2,7 @@ use gccjit::RValue;\n use rustc_codegen_ssa::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc_codegen_ssa::traits::{DebugInfoBuilderMethods, DebugInfoMethods};\n use rustc_middle::mir;\n-use rustc_middle::ty::{Instance, Ty};\n+use rustc_middle::ty::{Instance, PolyExistentialTraitRef, Ty};\n use rustc_span::{SourceFile, Span, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::abi::call::FnAbi;\n@@ -31,7 +31,7 @@ impl<'a, 'gcc, 'tcx> DebugInfoBuilderMethods for Builder<'a, 'gcc, 'tcx> {\n }\n \n impl<'gcc, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _vtable: Self::Value) {\n+    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n         // TODO(antoyo)\n     }\n "}, {"sha": "5c7ec711ad71c7da8d5d2e4908aff8880a082046", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -367,6 +367,11 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n+    fn type_test(&mut self, _pointer: Self::Value, _typeid: Self::Value) -> Self::Value {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n     fn va_start(&mut self, _va_list: RValue<'gcc>) -> RValue<'gcc> {\n         unimplemented!();\n     }"}, {"sha": "629003d7982b90072e0a57ee727a21cc0ee877a8", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8e79fea9d0eef9b8c945d86cd4313a5438cd19/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fc8e79fea9d0eef9b8c945d86cd4313a5438cd19", "patch": "@@ -60,8 +60,8 @@ use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_codegen_ssa::traits::{CodegenBackend, ExtraBackendMethods, ModuleBufferMethods, ThinBufferMethods, WriteBackendMethods};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{ErrorReported, Handler};\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{Lto, OptLevel, OutputFilenames};\n use rustc_session::Session;"}]}