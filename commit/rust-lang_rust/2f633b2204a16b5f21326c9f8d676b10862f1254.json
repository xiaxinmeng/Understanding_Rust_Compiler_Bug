{"sha": "2f633b2204a16b5f21326c9f8d676b10862f1254", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjMzYjIyMDRhMTZiNWYyMTMyNmM5ZjhkNjc2YjEwODYyZjEyNTQ=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-01-26T19:36:48Z"}, "committer": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-01-26T19:36:48Z"}, "message": "capitalization and associated types", "tree": {"sha": "1f03852e6b72fd58782ea15ad90094f790d4e163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f03852e6b72fd58782ea15ad90094f790d4e163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f633b2204a16b5f21326c9f8d676b10862f1254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f633b2204a16b5f21326c9f8d676b10862f1254", "html_url": "https://github.com/rust-lang/rust/commit/2f633b2204a16b5f21326c9f8d676b10862f1254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f633b2204a16b5f21326c9f8d676b10862f1254/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638555e64d0fc66adc30bc57add2fe6f9164483c", "url": "https://api.github.com/repos/rust-lang/rust/commits/638555e64d0fc66adc30bc57add2fe6f9164483c", "html_url": "https://github.com/rust-lang/rust/commit/638555e64d0fc66adc30bc57add2fe6f9164483c"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3fa587ba085c2607540410023f825681ec8d180f", "filename": "src/doc/book/syntax-index.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f633b2204a16b5f21326c9f8d676b10862f1254/src%2Fdoc%2Fbook%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f633b2204a16b5f21326c9f8d676b10862f1254/src%2Fdoc%2Fbook%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsyntax-index.md?ref=2f633b2204a16b5f21326c9f8d676b10862f1254", "patch": "@@ -2,7 +2,7 @@\n \n ## Keywords\n \n-* `as`: primitive casting, or part of UFCS.  See [Casting Between Types (`as`)], [Universal Function Call Syntax (Angle-bracket Form)].\n+* `as`: primitive casting, or disambiguating the specific trait containing an item.  See [Casting Between Types (`as`)], [Universal Function Call Syntax (Angle-bracket Form)], [Associated Types].\n * `break`: break out of loop.  See [Loops (Ending Iteration Early)].\n * `const`: constant items and constant raw pointers.  See [`const` and `static`], [Raw Pointers].\n * `continue`: continue to next loop iteration.  See [Loops (Ending Iteration Early)].\n@@ -115,11 +115,11 @@\n * `::path`: path relative to the crate root (*i.e.* an explicitly absolute path).  See [Crates and Modules (Re-exporting with `pub use`)].\n * `self::path`: path relative to the current module (*i.e.* an explicitly relative path).  See [Crates and Modules (Re-exporting with `pub use`)].\n * `super::path`: path relative to the parent of the current module.  See [Crates and Modules (Re-exporting with `pub use`)].\n-* `type::ident`: associated constants, functions, and types.  See [Associated Types].\n+* `type::ident`, `<type as trait>::ident`: associated constants, functions, and types.  See [Associated Types].\n * `<type>::\u2026`: associated item for a type which cannot be directly named (*e.g.* `<&T>::\u2026`, `<[T]>::\u2026`, *etc.*).  See [Associated Types].\n-* `Trait::method(\u2026)`: disambiguating a method call by naming the trait which defines it. See [Universal Function Call Syntax].\n-* `Type::method(\u2026)`: disambiguating a method call by naming the type for which it's defined. See [Universal Function Call Syntax].\n-* `<Type as Trait>::method(\u2026)`: disambiguating a method call by naming the trait _and_ type. See [Universal Function Call Syntax (Angle-bracket Form)].\n+* `trait::method(\u2026)`: disambiguating a method call by naming the trait which defines it. See [Universal Function Call Syntax].\n+* `type::method(\u2026)`: disambiguating a method call by naming the type for which it's defined. See [Universal Function Call Syntax].\n+* `<type as trait>::method(\u2026)`: disambiguating a method call by naming the trait _and_ type. See [Universal Function Call Syntax (Angle-bracket Form)].\n \n <!-- Generics -->\n "}]}