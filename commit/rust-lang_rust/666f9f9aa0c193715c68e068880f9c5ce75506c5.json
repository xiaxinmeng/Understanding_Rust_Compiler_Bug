{"sha": "666f9f9aa0c193715c68e068880f9c5ce75506c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NmY5ZjlhYTBjMTkzNzE1YzY4ZTA2ODg4MGY5YzVjZTc1NTA2YzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-09T06:18:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-09T06:18:29Z"}, "message": "Rollup merge of #65994 - estebank:where-bound, r=nikomatsakis\n\nPoint at where clauses where the associated item was restricted\n\nCC #57663.\nr? @nikomatsakis", "tree": {"sha": "b8ebe526e6df851fa0c1436d8a7228b9bd706ba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ebe526e6df851fa0c1436d8a7228b9bd706ba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666f9f9aa0c193715c68e068880f9c5ce75506c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxlo1CRBK7hj4Ov3rIwAAdHIIAK0r+7yGvCT8HGe58pH/Xgvx\n9B79lO7pNOo3DhlpxItaFSK3JC8U/l8VNFLYdg6v+KaLu4Q6aO1b9v8yMVc45DLY\n+O+qD0wx3ERxhpaO+5ZzNbNOaV6U/goCCMfrdsnpUs9QhHSHG3R9KLX6FyqLrZIL\nhwHuN7FZDamfMJu6a6NhGXw2P7Q5vwObvxIjPS3XMm4iaGnQU2EAfg7yd07B60i1\no2hs/jZmCwZQIC1UYVGdkDL905RNT7MphCiEz2BmDyAuZaDKPXlQPGft1fdbi05C\nEo2/BxkD7nqAAJMvXOCYttkamSxtVlL2ZPiCsWcwr0H9lpyemXAOWoz2CrtWj2o=\n=I1pZ\n-----END PGP SIGNATURE-----\n", "payload": "tree b8ebe526e6df851fa0c1436d8a7228b9bd706ba1\nparent aaceeded9ee7a05d5bea960ae6fdf3b7af8d2163\nparent 9534b5863f0a6e41c6566795995219bd06ec4bf9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573280309 +0100\ncommitter GitHub <noreply@github.com> 1573280309 +0100\n\nRollup merge of #65994 - estebank:where-bound, r=nikomatsakis\n\nPoint at where clauses where the associated item was restricted\n\nCC #57663.\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666f9f9aa0c193715c68e068880f9c5ce75506c5", "html_url": "https://github.com/rust-lang/rust/commit/666f9f9aa0c193715c68e068880f9c5ce75506c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666f9f9aa0c193715c68e068880f9c5ce75506c5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaceeded9ee7a05d5bea960ae6fdf3b7af8d2163", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaceeded9ee7a05d5bea960ae6fdf3b7af8d2163", "html_url": "https://github.com/rust-lang/rust/commit/aaceeded9ee7a05d5bea960ae6fdf3b7af8d2163"}, {"sha": "9534b5863f0a6e41c6566795995219bd06ec4bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9534b5863f0a6e41c6566795995219bd06ec4bf9", "html_url": "https://github.com/rust-lang/rust/commit/9534b5863f0a6e41c6566795995219bd06ec4bf9"}], "stats": {"total": 165, "additions": 147, "deletions": 18}, "files": [{"sha": "23c4ec062ea3f766980e588dee83d0a1e92661ca", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=666f9f9aa0c193715c68e068880f9c5ce75506c5", "patch": "@@ -2287,11 +2287,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     );\n                 }\n             }\n-            ObligationCauseCode::AssocTypeBound(impl_span, orig) => {\n-                err.span_label(orig, \"associated type defined here\");\n-                if let Some(sp) = impl_span {\n+            ObligationCauseCode::AssocTypeBound(ref data) => {\n+                err.span_label(data.original, \"associated type defined here\");\n+                if let Some(sp) = data.impl_span {\n                     err.span_label(sp, \"in this `impl` item\");\n                 }\n+                for sp in &data.bounds {\n+                    err.span_label(*sp, \"restricted in this bound\");\n+                }\n             }\n         }\n     }"}, {"sha": "a29d8c66d811d73842dda9872b740da5ba082c6c", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=666f9f9aa0c193715c68e068880f9c5ce75506c5", "patch": "@@ -276,7 +276,14 @@ pub enum ObligationCauseCode<'tcx> {\n     /// #[feature(trivial_bounds)] is not enabled\n     TrivialBound,\n \n-    AssocTypeBound(/*impl*/ Option<Span>, /*original*/ Span),\n+    AssocTypeBound(Box<AssocTypeBoundData>),\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct AssocTypeBoundData {\n+    pub impl_span: Option<Span>,\n+    pub original: Span,\n+    pub bounds: Vec<Span>,\n }\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "59f2bb3754803e4690d68ddb3726cf008cac75eb", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=666f9f9aa0c193715c68e068880f9c5ce75506c5", "patch": "@@ -549,7 +549,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::MethodReceiver => Some(super::MethodReceiver),\n             super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n             super::TrivialBound => Some(super::TrivialBound),\n-            super::AssocTypeBound(impl_sp, sp) => Some(super::AssocTypeBound(impl_sp, sp)),\n+            super::AssocTypeBound(ref data) => Some(super::AssocTypeBound(data.clone())),\n         }\n     }\n }"}, {"sha": "f9e7a8030a6fc6a50418c53c007fa58cb73df6dc", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 89, "deletions": 12, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=666f9f9aa0c193715c68e068880f9c5ce75506c5", "patch": "@@ -2,9 +2,10 @@ use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::infer::InferCtxt;\n use crate::ty::subst::SubstsRef;\n-use crate::traits;\n+use crate::traits::{self, AssocTypeBoundData};\n use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use std::iter::once;\n+use syntax::symbol::{kw, Ident};\n use syntax_pos::Span;\n use crate::middle::lang_items;\n use crate::mir::interpret::ConstValue;\n@@ -176,6 +177,23 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n             pred: &ty::Predicate<'_>,\n             trait_assoc_items: ty::AssocItemsIterator<'_>,\n         | {\n+            let trait_item = tcx.hir().as_local_hir_id(trait_ref.def_id).and_then(|trait_id| {\n+                tcx.hir().find(trait_id)\n+            });\n+            let (trait_name, trait_generics) = match trait_item {\n+                Some(hir::Node::Item(hir::Item {\n+                    ident,\n+                    kind: hir::ItemKind::Trait(.., generics, _, _),\n+                    ..\n+                })) |\n+                Some(hir::Node::Item(hir::Item {\n+                    ident,\n+                    kind: hir::ItemKind::TraitAlias(generics, _),\n+                    ..\n+                })) => (Some(ident), Some(generics)),\n+                _ => (None, None),\n+            };\n+\n             let item_span = item.map(|i| tcx.sess.source_map().def_span(i.span));\n             match pred {\n                 ty::Predicate::Projection(proj) => {\n@@ -226,10 +244,11 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             item.ident == trait_assoc_item.ident\n                         }).next() {\n                             cause.span = impl_item.span;\n-                            cause.code = traits::AssocTypeBound(\n-                                item_span,\n-                                trait_assoc_item.ident.span,\n-                            );\n+                            cause.code = traits::AssocTypeBound(Box::new(AssocTypeBoundData {\n+                                impl_span: item_span,\n+                                original: trait_assoc_item.ident.span,\n+                                bounds: vec![],\n+                            }));\n                         }\n                     }\n                 }\n@@ -251,14 +270,13 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     //   LL |     type Assoc = bool;\n                     //      |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n                     //\n-                    // FIXME: if the obligation comes from the where clause in the `trait`, we\n-                    // should point at it:\n+                    // If the obligation comes from the where clause in the `trait`, we point at it:\n                     //\n                     //   error[E0277]: the trait bound `bool: Bar` is not satisfied\n                     //     --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n                     //      |\n                     //      | trait Foo where <Self as Foo>>::Assoc: Bar {\n-                    //      |                 -------------------------- obligation set here\n+                    //      |                 -------------------------- restricted in this bound\n                     //   LL |     type Assoc;\n                     //      |          ----- associated type defined here\n                     //   ...\n@@ -278,11 +296,17 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 .next()\n                                 .map(|impl_item| (impl_item, trait_assoc_item)))\n                         {\n+                            let bounds = trait_generics.map(|generics| get_generic_bound_spans(\n+                                &generics,\n+                                trait_name,\n+                                trait_assoc_item.ident,\n+                            )).unwrap_or_else(Vec::new);\n                             cause.span = impl_item.span;\n-                            cause.code = traits::AssocTypeBound(\n-                                item_span,\n-                                trait_assoc_item.ident.span,\n-                            );\n+                            cause.code = traits::AssocTypeBound(Box::new(AssocTypeBoundData {\n+                                impl_span: item_span,\n+                                original: trait_assoc_item.ident.span,\n+                                bounds,\n+                            }));\n                         }\n                     }\n                 }\n@@ -666,3 +690,56 @@ pub fn object_region_bounds<'tcx>(\n \n     tcx.required_region_bounds(open_ty, predicates)\n }\n+\n+/// Find the span of a generic bound affecting an associated type.\n+fn get_generic_bound_spans(\n+    generics: &hir::Generics,\n+    trait_name: Option<&Ident>,\n+    assoc_item_name: Ident,\n+) -> Vec<Span> {\n+    let mut bounds = vec![];\n+    for clause in generics.where_clause.predicates.iter() {\n+        if let hir::WherePredicate::BoundPredicate(pred) = clause {\n+            match &pred.bounded_ty.kind {\n+                hir::TyKind::Path(hir::QPath::Resolved(Some(ty), path)) => {\n+                    let mut s = path.segments.iter();\n+                    if let (a, Some(b), None) = (s.next(), s.next(), s.next()) {\n+                        if a.map(|s| &s.ident) == trait_name\n+                            && b.ident == assoc_item_name\n+                            && is_self_path(&ty.kind)\n+                        {\n+                            // `<Self as Foo>::Bar`\n+                            bounds.push(pred.span);\n+                        }\n+                    }\n+                }\n+                hir::TyKind::Path(hir::QPath::TypeRelative(ty, segment)) => {\n+                    if segment.ident == assoc_item_name {\n+                        if is_self_path(&ty.kind) {\n+                            // `Self::Bar`\n+                            bounds.push(pred.span);\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+    bounds\n+}\n+\n+fn is_self_path(kind: &hir::TyKind) -> bool {\n+    match kind {\n+        hir::TyKind::Path(hir::QPath::Resolved(None, path)) => {\n+            let mut s = path.segments.iter();\n+            if let (Some(segment), None) = (s.next(), s.next()) {\n+                if segment.ident.name == kw::SelfUpper {\n+                    // `type(Self)`\n+                    return true;\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+    false\n+}"}, {"sha": "67b7c78071c378af04253c203f6e6b2fe652878e", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs?ref=666f9f9aa0c193715c68e068880f9c5ce75506c5", "patch": "@@ -8,4 +8,20 @@ impl Foo for () {\n     type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n }\n \n+trait Baz where Self::Assoc: Bar {\n+    type Assoc;\n+}\n+\n+impl Baz for () {\n+    type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n+}\n+\n+trait Bat where <Self as Bat>::Assoc: Bar {\n+    type Assoc;\n+}\n+\n+impl Bat for () {\n+    type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n+}\n+\n fn main() {}"}, {"sha": "072e9dad062e069868e3e0df47735efc1c0509ed", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/666f9f9aa0c193715c68e068880f9c5ce75506c5/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=666f9f9aa0c193715c68e068880f9c5ce75506c5", "patch": "@@ -9,6 +9,32 @@ LL | impl Foo for () {\n LL |     type Assoc = bool;\n    |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `bool: Bar` is not satisfied\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:16:5\n+   |\n+LL | trait Baz where Self::Assoc: Bar {\n+   |                 ---------------- restricted in this bound\n+LL |     type Assoc;\n+   |          ----- associated type defined here\n+...\n+LL | impl Baz for () {\n+   | --------------- in this `impl` item\n+LL |     type Assoc = bool;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+\n+error[E0277]: the trait bound `bool: Bar` is not satisfied\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:24:5\n+   |\n+LL | trait Bat where <Self as Bat>::Assoc: Bar {\n+   |                 ------------------------- restricted in this bound\n+LL |     type Assoc;\n+   |          ----- associated type defined here\n+...\n+LL | impl Bat for () {\n+   | --------------- in this `impl` item\n+LL |     type Assoc = bool;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}