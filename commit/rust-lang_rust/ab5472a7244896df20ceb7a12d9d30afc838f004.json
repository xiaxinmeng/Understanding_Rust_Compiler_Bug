{"sha": "ab5472a7244896df20ceb7a12d9d30afc838f004", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTQ3MmE3MjQ0ODk2ZGYyMGNlYjdhMTJkOWQzMGFmYzgzOGYwMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-13T21:57:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-13T21:57:55Z"}, "message": "auto merge of #5307 : nikomatsakis/rust/remove-by-val, r=nikomatsakis\n\nThis is done in two steps:\r\n\r\nFirst, we make foreign functions not consider modes at all.  This is because previously ++ mode was the only way to pass structs to foreign functions and so forth.  We also add a lint mode warning if you use `&&` mode in a foreign function, since the semantics of that change (it used to pass a pointer to the C function, now it doesn't).\r\n\r\nThen, we remove by value and make it equivalent to `+` mode.  At the same time, we stop parsing `-` mode and convert all uses of it to `+` mode (it was already being parsed to `+` mode anyhow).\r\n\r\nThis obsoletes pull request #5298.\r\n\r\nr? @brson", "tree": {"sha": "1ca658c64f9200eb015762c4d4557f5172cf4837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca658c64f9200eb015762c4d4557f5172cf4837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5472a7244896df20ceb7a12d9d30afc838f004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5472a7244896df20ceb7a12d9d30afc838f004", "html_url": "https://github.com/rust-lang/rust/commit/ab5472a7244896df20ceb7a12d9d30afc838f004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5472a7244896df20ceb7a12d9d30afc838f004/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "html_url": "https://github.com/rust-lang/rust/commit/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054"}, {"sha": "852619d5d7ef7e9b9c5e57102e244c575f0c6a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/852619d5d7ef7e9b9c5e57102e244c575f0c6a8f", "html_url": "https://github.com/rust-lang/rust/commit/852619d5d7ef7e9b9c5e57102e244c575f0c6a8f"}], "stats": {"total": 882, "additions": 579, "deletions": 303}, "files": [{"sha": "bc4358db56c7ea36f4e7ac52486a854ad4a36bb1", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -12,7 +12,7 @@ pub mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     #[link_name = \"rusti\"]\n     pub extern {\n-        fn forget<T>(-x: T);\n+        fn forget<T>(+x: T);\n         fn reinterpret_cast<T, U>(&&e: T) -> U;\n     }\n }"}, {"sha": "be1d86c9cf741ec616eab097cbf1c24297edca4d", "filename": "src/libcore/rt/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fthread.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -22,7 +22,7 @@ struct Thread {\n impl Thread {\n     static fn start(main: ~fn()) -> Thread {\n         fn substart(main: &fn()) -> *raw_thread {\n-            unsafe { rust_raw_thread_start(main) }\n+            unsafe { rust_raw_thread_start(&main) }\n         }\n         let raw = substart(main);\n         Thread {\n@@ -39,6 +39,6 @@ impl Drop for Thread {\n }\n \n extern {\n-    pub unsafe fn rust_raw_thread_start(f: &fn()) -> *raw_thread;\n+    pub unsafe fn rust_raw_thread_start(f: &(&fn())) -> *raw_thread;\n     pub unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n }"}, {"sha": "9b6dcc312347abe54d76c27161d567afbe7a8403", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -47,7 +47,7 @@ mod rustrt {\n         pub unsafe fn rust_lock_little_lock(lock: rust_little_lock);\n         pub unsafe fn rust_unlock_little_lock(lock: rust_little_lock);\n \n-        pub unsafe fn rust_raw_thread_start(f: &fn()) -> *raw_thread;\n+        pub unsafe fn rust_raw_thread_start(f: &(&fn())) -> *raw_thread;\n         pub unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n     }\n }\n@@ -72,7 +72,7 @@ pub fn run_in_bare_thread(f: ~fn()) {\n             let closure: &fn() = || {\n                 f()\n             };\n-            let thread = rustrt::rust_raw_thread_start(closure);\n+            let thread = rustrt::rust_raw_thread_start(&closure);\n             rustrt::rust_raw_thread_join_delete(thread);\n             chan.send(());\n         }"}, {"sha": "a27ac2ccb6b3af5797c5db326a44687952630fb5", "filename": "src/libcore/unstable/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -34,8 +34,8 @@ pub extern {\n \n     pub fn size_of<T>() -> uint;\n \n-    pub fn move_val<T>(dst: &mut T, -src: T);\n-    pub fn move_val_init<T>(dst: &mut T, -src: T);\n+    pub fn move_val<T>(dst: &mut T, +src: T);\n+    pub fn move_val_init<T>(dst: &mut T, +src: T);\n \n     pub fn min_align_of<T>() -> uint;\n     pub fn pref_align_of<T>() -> uint;"}, {"sha": "84836568029be7444a47e56cc3bdf14c387202e6", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -486,7 +486,7 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n \n     // This calculates CMH as defined above\n     fn crate_meta_extras_hash(symbol_hasher: &hash::State,\n-                              -cmh_items: ~[@ast::meta_item],\n+                              +cmh_items: ~[@ast::meta_item],\n                               dep_hashes: ~[~str]) -> @str {\n         fn len_and_str(s: &str) -> ~str {\n             fmt!(\"%u_%s\", s.len(), s)\n@@ -535,7 +535,7 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n                        name, default));\n     }\n \n-    fn crate_meta_name(sess: Session, output: &Path, -opt_name: Option<@str>)\n+    fn crate_meta_name(sess: Session, output: &Path, +opt_name: Option<@str>)\n                     -> @str {\n         return match opt_name {\n               Some(v) => v,"}, {"sha": "c26b9691dbe61e54e7a335817e2f1d7934c0ae7d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -440,7 +440,7 @@ pub fn pretty_print_input(sess: Session, +cfg: ast::crate_cfg, input: input,\n     }\n }\n \n-pub fn get_os(triple: ~str) -> Option<session::os> {\n+pub fn get_os(triple: &str) -> Option<session::os> {\n     if str::contains(triple, ~\"win32\") ||\n                str::contains(triple, ~\"mingw32\") {\n             Some(session::os_win32)\n@@ -455,7 +455,7 @@ pub fn get_os(triple: ~str) -> Option<session::os> {\n         } else { None }\n }\n \n-pub fn get_arch(triple: ~str) -> Option<session::arch> {\n+pub fn get_arch(triple: &str) -> Option<session::arch> {\n     if str::contains(triple, ~\"i386\") ||\n         str::contains(triple, ~\"i486\") ||\n                str::contains(triple, ~\"i586\") ||"}, {"sha": "23eb6743b9fa818005c4c213c6e26081bbaa2f68", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -1443,7 +1443,7 @@ pub mod llvm {\n         /** Prepares inline assembly. */\n         pub unsafe fn LLVMInlineAsm(Ty: TypeRef, AsmString: *c_char,\n                                     Constraints: *c_char, SideEffects: Bool,\n-                                    AlignStack: Bool, Dialect: AsmDialect)\n+                                    AlignStack: Bool, Dialect: c_uint)\n                                  -> ValueRef;\n     }\n }"}, {"sha": "fa4acea662a83c3303b43b83843614d200f7acae", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -222,7 +222,7 @@ fn metas_with_ident(ident: @~str, +metas: ~[@ast::meta_item])\n     metas_with(ident, @~\"name\", metas)\n }\n \n-fn existing_match(e: @mut Env, metas: ~[@ast::meta_item], hash: @~str)\n+fn existing_match(e: @mut Env, metas: &[@ast::meta_item], hash: @~str)\n                -> Option<int> {\n     for e.crate_cache.each |c| {\n         if loader::metadata_matches(*c.metas, metas)"}, {"sha": "b87418ce7dc8d71c6ad31310a6422a53ac1f2ab6", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -560,7 +560,7 @@ pub fn maybe_get_item_ast(intr: @ident_interner, cdata: cmd, tcx: ty::ctxt,\n         let item_path = item_path(intr, item_doc);\n         vec::from_slice(item_path.init())\n     };\n-    match decode_inlined_item(cdata, tcx, path, item_doc) {\n+    match decode_inlined_item(cdata, tcx, copy path, item_doc) {\n       Some(ref ii) => csearch::found((/*bad*/copy *ii)),\n       None => {\n         match item_parent_item(item_doc) {"}, {"sha": "e9861e1c9ae1209f3d448ee677dbca4185921923", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -176,7 +176,7 @@ fn crate_matches(crate_data: @~[u8],\n     metadata_matches(linkage_metas, metas)\n }\n \n-pub fn metadata_matches(extern_metas: ~[@ast::meta_item],\n+pub fn metadata_matches(extern_metas: &[@ast::meta_item],\n                         local_metas: &[@ast::meta_item]) -> bool {\n \n     debug!(\"matching %u metadata requirements against %u items\","}, {"sha": "04dd9156660d868d5b31b62bb4bfcfaccb77df4c", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -427,7 +427,6 @@ fn parse_mode(st: @mut PState) -> ast::mode {\n     let m = ast::expl(match next(st) {\n         '+' => ast::by_copy,\n         '=' => ast::by_ref,\n-        '#' => ast::by_val,\n         _ => fail!(~\"bad mode\")\n     });\n     return m;"}, {"sha": "d07d8917c6512d56026bb82362f33e76957b47e1", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -342,7 +342,6 @@ pub fn enc_mode(w: io::Writer, cx: @ctxt, m: mode) {\n     match ty::resolved_mode(cx.tcx, m) {\n       by_copy => w.write_char('+'),\n       by_ref => w.write_char('='),\n-      by_val => w.write_char('#')\n     }\n }\n "}, {"sha": "98ac67f986b366a677775c29f2b089ca7bb71969", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -105,7 +105,7 @@ pub fn encode_inlined_item(ecx: @e::EncodeContext,\n pub fn decode_inlined_item(cdata: @cstore::crate_metadata,\n                            tcx: ty::ctxt,\n                            maps: Maps,\n-                           path: ast_map::path,\n+                           +path: ast_map::path,\n                            par_doc: ebml::Doc)\n                         -> Option<ast::inlined_item> {\n     let dcx = @DecodeContext {"}, {"sha": "f55fae12b45847f22418f2f857fe9bad751ac8a6", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -156,7 +156,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n                     let arg_cmt = self.bccx.cat_expr(*arg);\n                     self.guarantee_valid(arg_cmt, m_imm,  scope_r);\n                 }\n-                ast::by_val | ast::by_copy => {}\n+                ast::by_copy => {}\n             }\n         }\n         visit::visit_expr(ex, self, vt);\n@@ -172,7 +172,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n                     let arg_cmt = self.bccx.cat_expr(*arg);\n                     self.guarantee_valid(arg_cmt, m_imm,  scope_r);\n                 }\n-                ast::by_val | ast::by_copy => {}\n+                ast::by_copy => {}\n             }\n         }\n "}, {"sha": "505bc350249313249af4c77184b67aa7fae265ee", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -78,6 +78,7 @@ pub enum lint {\n     deprecated_self,\n     deprecated_mutable_fields,\n     deprecated_drop,\n+    foreign_mode,\n \n     managed_heap_memory,\n     owned_heap_memory,\n@@ -182,6 +183,13 @@ pub fn get_lint_dict() -> LintDict {\n             default: warn\n          }),\n \n+        (@~\"foreign_mode\",\n+         @LintSpec {\n+            lint: foreign_mode,\n+            desc: \"warn about deprecated uses of modes in foreign fns\",\n+            default: warn\n+         }),\n+\n         (@~\"deprecated_pattern\",\n          @LintSpec {\n             lint: deprecated_pattern,\n@@ -753,6 +761,20 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n \n     fn check_foreign_fn(cx: ty::ctxt, fn_id: ast::node_id,\n                         decl: &ast::fn_decl) {\n+        // warn about `&&` mode on foreign functions, both because it is\n+        // deprecated and because its semantics have changed recently:\n+        for decl.inputs.eachi |i, arg| {\n+            match ty::resolved_mode(cx, arg.mode) {\n+                ast::by_copy => {}\n+                ast::by_ref => {\n+                    cx.sess.span_lint(\n+                        foreign_mode, fn_id, fn_id, arg.ty.span,\n+                        fmt!(\"foreign function uses `&&` mode \\\n+                              on argument %u\", i));\n+                }\n+            }\n+        }\n+\n         let tys = vec::map(decl.inputs, |a| a.ty );\n         for vec::each(vec::append_one(tys, decl.output)) |ty| {\n             match ty.node {\n@@ -785,7 +807,7 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n       if attr::foreign_abi(it.attrs) !=\n             either::Right(ast::foreign_abi_rust_intrinsic) => {\n         for nmod.items.each |ni| {\n-            match /*bad*/copy ni.node {\n+            match ni.node {\n               ast::foreign_item_fn(ref decl, _, _) => {\n                 check_foreign_fn(cx, it.id, decl);\n               }"}, {"sha": "8c206f2707114e33f3652ec37e4e6cfbfc20bf59", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -427,7 +427,7 @@ pub impl IrMaps {\n             v.push(id);\n           }\n           Arg(_, _, by_ref) |\n-          Arg(_, _, by_val) | ImplicitRet => {\n+          ImplicitRet => {\n             debug!(\"--but it is not owned\");\n           }\n         }\n@@ -1006,7 +1006,7 @@ pub impl Liveness {\n         // inputs passed by & mode should be considered live on exit:\n         for decl.inputs.each |arg| {\n             match ty::resolved_mode(self.tcx, arg.mode) {\n-                by_val | by_ref => {\n+                by_ref => {\n                     // By val and by ref do not own, so register a\n                     // read at the end.  This will prevent us from\n                     // moving out of such variables but also prevent"}, {"sha": "c25266b453164b40ca7dcdc58f178ee9925453e3", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -486,14 +486,6 @@ pub impl mem_categorization_ctxt {\n             let lp = match ty::resolved_mode(self.tcx, mode) {\n                 ast::by_copy => Some(@lp_arg(vid)),\n                 ast::by_ref => None,\n-                ast::by_val => {\n-                    // by-value is this hybrid mode where we have a\n-                    // pointer but we do not own it.  This is not\n-                    // considered loanable because, for example, a by-ref\n-                    // and and by-val argument might both actually contain\n-                    // the same unique ptr.\n-                    None\n-                }\n             };\n             @cmt_ {\n                 id:id,"}, {"sha": "a7562d190a2169f764833920ad49bd85e346b02c", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -782,7 +782,7 @@ pub impl VisitContext {\n          */\n \n         match arg_mode {\n-            by_val | by_ref => self.use_expr(arg_expr, Read, visitor),\n+            by_ref => self.use_expr(arg_expr, Read, visitor),\n             by_copy => self.consume_expr(arg_expr, visitor)\n         }\n     }"}, {"sha": "975f699021e284a566f926e373b5868f924c5c36", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -2021,7 +2021,7 @@ pub impl Resolver {\n     }\n \n     fn import_path_to_str(@mut self,\n-                          idents: ~[ident],\n+                          idents: &[ident],\n                           subclass: ImportDirectiveSubclass)\n                        -> @~str {\n         if idents.is_empty() {\n@@ -2573,7 +2573,7 @@ pub impl Resolver {\n     /// Resolves the given module path from the given root `module_`.\n     fn resolve_module_path_from_root(@mut self,\n                                      module_: @mut Module,\n-                                     module_path: ~[ident],\n+                                     module_path: &[ident],\n                                      index: uint,\n                                      span: span,\n                                      mut name_search_type: NameSearchType)\n@@ -2658,7 +2658,7 @@ pub impl Resolver {\n     /// rooted at the given module.\n     fn resolve_module_path_for_import(@mut self,\n                                       module_: @mut Module,\n-                                      module_path: ~[ident],\n+                                      module_path: &[ident],\n                                       use_lexical_scope: UseLexicalScopeFlag,\n                                       span: span)\n                                    -> ResolveResult<@mut Module> {\n@@ -2944,7 +2944,7 @@ pub impl Resolver {\n      */\n     fn resolve_module_prefix(@mut self,\n                              module_: @mut Module,\n-                             module_path: ~[ident])\n+                             module_path: &[ident])\n                           -> ResolveResult<ModulePrefixResult> {\n         let interner = self.session.parse_sess.interner;\n \n@@ -3876,7 +3876,7 @@ pub impl Resolver {\n                               generics: &Generics,\n                               opt_trait_reference: Option<@trait_ref>,\n                               self_type: @Ty,\n-                              methods: ~[@method],\n+                              methods: &[@method],\n                               visitor: ResolveVisitor) {\n         // If applicable, create a rib for the type parameters.\n         let outer_type_parameter_count = generics.ty_params.len();"}, {"sha": "80631abaa555b5b44bd296096c24186bc8e6d0a2", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -599,7 +599,7 @@ pub fn enter_rec_or_struct(bcx: block,\n                            dm: DefMap,\n                            m: &[@Match/&r],\n                            col: uint,\n-                           fields: ~[ast::ident],\n+                           fields: &[ast::ident],\n                            val: ValueRef)\n                         -> ~[@Match/&r] {\n     debug!(\"enter_rec_or_struct(bcx=%s, m=%s, col=%u, val=%?)\","}, {"sha": "2ab4454a89a04de45ea778b93138717b99a6f73f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -1682,12 +1682,6 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n \n                 add_clean(bcx, llarg, arg_ty.ty);\n             }\n-            ast::by_val => {\n-                // always by value, also not owned, so don't add a cleanup:\n-                let alloc = alloc_ty(bcx, arg_ty.ty);\n-                Store(bcx, raw_llarg, alloc);\n-                llarg = alloc;\n-            }\n         }\n \n         bcx = _match::bind_irrefutable_pat(bcx,\n@@ -1812,7 +1806,7 @@ pub fn trans_fn(ccx: @CrateContext,\n     debug!(\"trans_fn(ty_self=%?)\", ty_self);\n     let _icx = ccx.insn_ctxt(\"trans_fn\");\n     ccx.stats.n_fns += 1;\n-    let the_path_str = path_str(ccx.sess, &path);\n+    let the_path_str = path_str(ccx.sess, path);\n     trans_closure(ccx, path, decl, body, llfndecl, ty_self,\n                   param_substs, id, impl_id,\n                   |fcx| {"}, {"sha": "850ea908e74ee0a6d23adbce5ebf0fe448e12e12", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -885,7 +885,7 @@ pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n \n         let llfty = T_fn(~[], T_void());\n         let v = llvm::LLVMInlineAsm(llfty, asm, cons, volatile,\n-                                    alignstack, dia);\n+                                    alignstack, dia as c_uint);\n \n         Call(cx, v, ~[])\n     }"}, {"sha": "15888a64e1e28d0db3487265f8d99f8e1e12a059", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -720,14 +720,6 @@ pub fn trans_arg_expr(bcx: block,\n                         val = arg_datum.to_ref_llval(bcx);\n                     }\n \n-                    ast::by_val => {\n-                        // NB: avoid running the take glue.\n-\n-                        fail_unless!(!bcx.ccx().maps.moves_map.contains_key(\n-                            &arg_expr.id));\n-                        val = arg_datum.to_value_llval(bcx);\n-                    }\n-\n                     ast::by_copy => {\n                         debug!(\"by copy arg with type %s, storing to scratch\",\n                                bcx.ty_to_str(arg_datum.ty));\n@@ -757,7 +749,7 @@ pub fn trans_arg_expr(bcx: block,\n \n         if formal_ty.ty != arg_datum.ty {\n             // this could happen due to e.g. subtyping\n-            let llformal_ty = type_of::type_of_explicit_arg(ccx, formal_ty);\n+            let llformal_ty = type_of::type_of_explicit_arg(ccx, &formal_ty);\n             debug!(\"casting actual type (%s) to match formal (%s)\",\n                    bcx.val_str(val), bcx.llty_str(llformal_ty));\n             val = PointerCast(bcx, val, llformal_ty);"}, {"sha": "2e5dee49c343f8838a4cfa72175ea0e02fd219c4", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -54,7 +54,7 @@ use core::vec::raw::to_ptr;\n use core::vec;\n use std::oldmap::{HashMap, Set};\n use syntax::ast::ident;\n-use syntax::ast_map::path;\n+use syntax::ast_map::{path, path_elt};\n use syntax::codemap::span;\n use syntax::parse::token::ident_interner;\n use syntax::{ast, ast_map};\n@@ -590,7 +590,7 @@ pub struct block_ {\n     fcx: fn_ctxt\n }\n \n-pub fn block_(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n+pub fn block_(llbb: BasicBlockRef, parent: Option<block>, +kind: block_kind,\n               is_lpad: bool, node_info: Option<NodeInfo>, fcx: fn_ctxt)\n     -> block_ {\n \n@@ -608,7 +608,7 @@ pub fn block_(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n \n pub type block = @mut block_;\n \n-pub fn mk_block(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n+pub fn mk_block(llbb: BasicBlockRef, parent: Option<block>, +kind: block_kind,\n             is_lpad: bool, node_info: Option<NodeInfo>, fcx: fn_ctxt)\n     -> block {\n     @mut block_(llbb, parent, kind, is_lpad, node_info, fcx)\n@@ -1320,9 +1320,9 @@ pub fn align_to(cx: block, off: ValueRef, align: ValueRef) -> ValueRef {\n     return build::And(cx, bumped, build::Not(cx, mask));\n }\n \n-pub fn path_str(sess: session::Session, p: &path) -> ~str {\n+pub fn path_str(sess: session::Session, p: &[path_elt]) -> ~str {\n     let mut r = ~\"\", first = true;\n-    for vec::each(*p) |e| {\n+    for p.each |e| {\n         match *e {\n             ast_map::path_name(s) | ast_map::path_mod(s) => {\n                 if first { first = false; }"}, {"sha": "3a0968d750adbdb3567c99e69e2f4fcc31a4c32c", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -192,7 +192,7 @@ pub fn trans_log(log_ex: @ast::expr,\n         bcx.fcx.path.filtered(|e|\n             match *e { path_mod(_) => true, _ => false }\n         ));\n-    let modname = path_str(ccx.sess, &modpath);\n+    let modname = path_str(ccx.sess, modpath);\n \n     let global = if ccx.module_data.contains_key(&modname) {\n         ccx.module_data.get(&modname)"}, {"sha": "fde1de5b63f21d9ff319c9cbae950b862ec03a67", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 249, "deletions": 124, "changes": 373, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -58,59 +58,90 @@ pub fn link_name(ccx: @CrateContext, i: @ast::foreign_item) -> @~str {\n     }\n }\n \n-struct c_stack_tys {\n-    arg_tys: ~[TypeRef],\n-    ret_ty: TypeRef,\n+struct ShimTypes {\n+    fn_sig: ty::FnSig,\n+\n+    /// LLVM types that will appear on the foreign function\n+    llsig: LlvmSignature,\n+\n+    /// True if there is a return value (not bottom, not unit)\n     ret_def: bool,\n+\n+    /// Type of the struct we will use to shuttle values back and forth.\n+    /// This is always derived from the llsig.\n     bundle_ty: TypeRef,\n+\n+    /// Type of the shim function itself.\n     shim_fn_ty: TypeRef,\n+\n+    /// Adapter object for handling native ABI rules (trust me, you\n+    /// don't want to know).\n     fn_ty: cabi::FnType\n }\n \n-fn c_arg_and_ret_lltys(ccx: @CrateContext,\n-                       id: ast::node_id) -> (~[TypeRef], TypeRef, ty::t) {\n-    match ty::get(ty::node_id_to_type(ccx.tcx, id)).sty {\n-        ty::ty_bare_fn(ref fn_ty) => {\n-            let llargtys = type_of_explicit_args(ccx, fn_ty.sig.inputs);\n-            let llretty = type_of::type_of(ccx, fn_ty.sig.output);\n-            (llargtys, llretty, fn_ty.sig.output)\n-        }\n-        _ => ccx.sess.bug(~\"c_arg_and_ret_lltys called on non-function type\")\n-    }\n+struct LlvmSignature {\n+    llarg_tys: ~[TypeRef],\n+    llret_ty: TypeRef,\n }\n \n-fn c_stack_tys(ccx: @CrateContext,\n-               id: ast::node_id) -> @c_stack_tys {\n-    let (llargtys, llretty, ret_ty) = c_arg_and_ret_lltys(ccx, id);\n-    // XXX: Bad copy.\n-    let bundle_ty = T_struct(vec::append_one(copy llargtys, T_ptr(llretty)));\n-    let ret_def = !ty::type_is_bot(ret_ty) && !ty::type_is_nil(ret_ty);\n-    let fn_ty = abi_info(ccx.sess.targ_cfg.arch).\n-                    compute_info(llargtys, llretty, ret_def);\n-    return @c_stack_tys {\n-        arg_tys: llargtys,\n-        ret_ty: llretty,\n+fn foreign_signature(ccx: @CrateContext,\n+                     fn_sig: &ty::FnSig) -> LlvmSignature {\n+    /*!\n+     * The ForeignSignature is the LLVM types of the arguments/return type\n+     * of a function.  Note that these LLVM types are not quite the same\n+     * as the LLVM types would be for a native Rust function because foreign\n+     * functions just plain ignore modes.  They also don't pass aggregate\n+     * values by pointer like we do.\n+     */\n+\n+    let llarg_tys = fn_sig.inputs.map(|arg| type_of(ccx, arg.ty));\n+    let llret_ty = type_of::type_of(ccx, fn_sig.output);\n+    LlvmSignature {llarg_tys: llarg_tys, llret_ty: llret_ty}\n+}\n+\n+fn shim_types(ccx: @CrateContext, id: ast::node_id) -> ShimTypes {\n+    let fn_sig = match ty::get(ty::node_id_to_type(ccx.tcx, id)).sty {\n+        ty::ty_bare_fn(ref fn_ty) => copy fn_ty.sig,\n+        _ => ccx.sess.bug(~\"c_arg_and_ret_lltys called on non-function type\")\n+    };\n+    let llsig = foreign_signature(ccx, &fn_sig);\n+    let bundle_ty = T_struct(vec::append_one(copy llsig.llarg_tys,\n+                                             T_ptr(llsig.llret_ty)));\n+    let ret_def =\n+        !ty::type_is_bot(fn_sig.output) &&\n+        !ty::type_is_nil(fn_sig.output);\n+    let fn_ty =\n+        abi_info(ccx.sess.targ_cfg.arch).compute_info(\n+            llsig.llarg_tys,\n+            llsig.llret_ty,\n+            ret_def);\n+    ShimTypes {\n+        fn_sig: fn_sig,\n+        llsig: llsig,\n         ret_def: ret_def,\n         bundle_ty: bundle_ty,\n         shim_fn_ty: T_fn(~[T_ptr(bundle_ty)], T_void()),\n         fn_ty: fn_ty\n-    };\n+    }\n }\n \n-type shim_arg_builder = &self/fn(bcx: block, tys: @c_stack_tys,\n-                                 llargbundle: ValueRef) -> ~[ValueRef];\n+type shim_arg_builder<'self> =\n+    &'self fn(bcx: block, tys: &ShimTypes,\n+              llargbundle: ValueRef) -> ~[ValueRef];\n \n-type shim_ret_builder = &self/fn(bcx: block, tys: @c_stack_tys,\n-                                 llargbundle: ValueRef, llretval: ValueRef);\n+type shim_ret_builder<'self> =\n+    &'self fn(bcx: block, tys: &ShimTypes,\n+              llargbundle: ValueRef,\n+              llretval: ValueRef);\n \n fn build_shim_fn_(ccx: @CrateContext,\n                   +shim_name: ~str,\n                   llbasefn: ValueRef,\n-                  tys: @c_stack_tys,\n+                  tys: &ShimTypes,\n                   cc: lib::llvm::CallConv,\n                   arg_builder: shim_arg_builder,\n-                  ret_builder: shim_ret_builder) -> ValueRef {\n-\n+                  ret_builder: shim_ret_builder) -> ValueRef\n+{\n     let llshimfn = decl_internal_cdecl_fn(\n         ccx.llmod, shim_name, tys.shim_fn_ty);\n \n@@ -122,8 +153,7 @@ fn build_shim_fn_(ccx: @CrateContext,\n     let llargvals = arg_builder(bcx, tys, llargbundle);\n \n     // Create the call itself and store the return value:\n-    let llretval = CallWithConv(bcx, llbasefn,\n-                                llargvals, cc); // r\n+    let llretval = CallWithConv(bcx, llbasefn, llargvals, cc);\n \n     ret_builder(bcx, tys, llargbundle, llretval);\n \n@@ -133,21 +163,22 @@ fn build_shim_fn_(ccx: @CrateContext,\n     return llshimfn;\n }\n \n-type wrap_arg_builder = &self/fn(bcx: block, tys: @c_stack_tys,\n-                                 llwrapfn: ValueRef,\n-                                 llargbundle: ValueRef);\n+type wrap_arg_builder<'self> =\n+    &'self fn(bcx: block, tys: &ShimTypes,\n+              llwrapfn: ValueRef, llargbundle: ValueRef);\n \n-type wrap_ret_builder = &self/fn(bcx: block, tys: @c_stack_tys,\n-                                 llargbundle: ValueRef);\n+type wrap_ret_builder<'self> =\n+    &'self fn(bcx: block, tys: &ShimTypes,\n+              llargbundle: ValueRef);\n \n fn build_wrap_fn_(ccx: @CrateContext,\n-                  tys: @c_stack_tys,\n+                  tys: &ShimTypes,\n                   llshimfn: ValueRef,\n                   llwrapfn: ValueRef,\n                   shim_upcall: ValueRef,\n                   arg_builder: wrap_arg_builder,\n-                  ret_builder: wrap_ret_builder) {\n-\n+                  ret_builder: wrap_ret_builder)\n+{\n     let _icx = ccx.insn_ctxt(\"foreign::build_wrap_fn_\");\n     let fcx = new_fn_ctxt(ccx, ~[], llwrapfn, None);\n     let bcx = top_scope_block(fcx, None);\n@@ -199,36 +230,83 @@ fn build_wrap_fn_(ccx: @CrateContext,\n //         F(args->z, args->x, args->y);\n //     }\n //\n-// Note: on i386, the layout of the args struct is generally the same as the\n-// desired layout of the arguments on the C stack.  Therefore, we could use\n-// upcall_alloc_c_stack() to allocate the `args` structure and switch the\n-// stack pointer appropriately to avoid a round of copies.  (In fact, the shim\n-// function itself is unnecessary). We used to do this, in fact, and will\n-// perhaps do so in the future.\n+// Note: on i386, the layout of the args struct is generally the same\n+// as the desired layout of the arguments on the C stack.  Therefore,\n+// we could use upcall_alloc_c_stack() to allocate the `args`\n+// structure and switch the stack pointer appropriately to avoid a\n+// round of copies.  (In fact, the shim function itself is\n+// unnecessary). We used to do this, in fact, and will perhaps do so\n+// in the future.\n pub fn trans_foreign_mod(ccx: @CrateContext,\n                          foreign_mod: &ast::foreign_mod,\n-                         abi: ast::foreign_abi) {\n-\n+                         abi: ast::foreign_abi)\n+{\n     let _icx = ccx.insn_ctxt(\"foreign::trans_foreign_mod\");\n \n+    let mut cc = match abi {\n+        ast::foreign_abi_rust_intrinsic |\n+        ast::foreign_abi_cdecl => lib::llvm::CCallConv,\n+        ast::foreign_abi_stdcall => lib::llvm::X86StdcallCallConv\n+    };\n+\n+    for vec::each(foreign_mod.items) |foreign_item| {\n+        match foreign_item.node {\n+            ast::foreign_item_fn(*) => {\n+                let id = foreign_item.id;\n+                if abi != ast::foreign_abi_rust_intrinsic {\n+                    let llwrapfn = get_item_val(ccx, id);\n+                    let tys = shim_types(ccx, id);\n+                    if attr::attrs_contains_name(\n+                        foreign_item.attrs, \"rust_stack\")\n+                    {\n+                        build_direct_fn(ccx, llwrapfn, *foreign_item,\n+                                        &tys, cc);\n+                    } else {\n+                        let llshimfn = build_shim_fn(ccx, *foreign_item,\n+                                                     &tys, cc);\n+                        build_wrap_fn(ccx, &tys, llshimfn, llwrapfn);\n+                    }\n+                } else {\n+                    // Intrinsics are emitted by monomorphic fn\n+                }\n+            }\n+            ast::foreign_item_const(*) => {\n+                let ident = ccx.sess.parse_sess.interner.get(\n+                    foreign_item.ident);\n+                ccx.item_symbols.insert(foreign_item.id, copy *ident);\n+            }\n+        }\n+    }\n+\n     fn build_shim_fn(ccx: @CrateContext,\n                      foreign_item: @ast::foreign_item,\n-                     tys: @c_stack_tys,\n-                     cc: lib::llvm::CallConv) -> ValueRef {\n+                     tys: &ShimTypes,\n+                     cc: lib::llvm::CallConv) -> ValueRef\n+    {\n+        /*!\n+         *\n+         * Build S, from comment above:\n+         *\n+         *     void S(struct { X x; Y y; Z *z; } *args) {\n+         *         F(args->z, args->x, args->y);\n+         *     }\n+         */\n \n         let _icx = ccx.insn_ctxt(\"foreign::build_shim_fn\");\n \n-        fn build_args(bcx: block, tys: @c_stack_tys,\n+        fn build_args(bcx: block, tys: &ShimTypes,\n                       llargbundle: ValueRef) -> ~[ValueRef] {\n             let _icx = bcx.insn_ctxt(\"foreign::shim::build_args\");\n-            return tys.fn_ty.build_shim_args(bcx, tys.arg_tys, llargbundle);\n+            tys.fn_ty.build_shim_args(\n+                bcx, tys.llsig.llarg_tys, llargbundle)\n         }\n \n-        fn build_ret(bcx: block, tys: @c_stack_tys,\n+        fn build_ret(bcx: block, tys: &ShimTypes,\n                      llargbundle: ValueRef, llretval: ValueRef)  {\n             let _icx = bcx.insn_ctxt(\"foreign::shim::build_ret\");\n-            tys.fn_ty.build_shim_ret(bcx, tys.arg_tys, tys.ret_def,\n-                                     llargbundle, llretval);\n+            tys.fn_ty.build_shim_ret(\n+                bcx, tys.llsig.llarg_tys,\n+                tys.ret_def, llargbundle, llretval);\n         }\n \n         let lname = link_name(ccx, foreign_item);\n@@ -239,7 +317,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                            build_args, build_ret);\n     }\n \n-    fn base_fn(ccx: @CrateContext, lname: &str, tys: @c_stack_tys,\n+    fn base_fn(ccx: @CrateContext, lname: &str, tys: &ShimTypes,\n                cc: lib::llvm::CallConv) -> ValueRef {\n         // Declare the \"prototype\" for the base function F:\n         do tys.fn_ty.decl_fn |fnty| {\n@@ -250,7 +328,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n     // FIXME (#2535): this is very shaky and probably gets ABIs wrong all\n     // over the place\n     fn build_direct_fn(ccx: @CrateContext, decl: ValueRef,\n-                       item: @ast::foreign_item, tys: @c_stack_tys,\n+                       item: @ast::foreign_item, tys: &ShimTypes,\n                        cc: lib::llvm::CallConv) {\n         let fcx = new_fn_ctxt(ccx, ~[], decl, None);\n         let bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n@@ -269,66 +347,55 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n     }\n \n     fn build_wrap_fn(ccx: @CrateContext,\n-                     tys: @c_stack_tys,\n+                     tys: &ShimTypes,\n                      llshimfn: ValueRef,\n                      llwrapfn: ValueRef) {\n+        /*!\n+         *\n+         * Build W, from comment above:\n+         *\n+         *     void W(Z* dest, void *env, X x, Y y) {\n+         *         struct { X x; Y y; Z *z; } args = { x, y, z };\n+         *         call_on_c_stack_shim(S, &args);\n+         *     }\n+         *\n+         * One thing we have to be very careful of is to\n+         * account for the Rust modes.\n+         */\n \n         let _icx = ccx.insn_ctxt(\"foreign::build_wrap_fn\");\n \n-        fn build_args(bcx: block, tys: @c_stack_tys,\n+        build_wrap_fn_(ccx, tys, llshimfn, llwrapfn,\n+                       ccx.upcalls.call_shim_on_c_stack,\n+                       build_args, build_ret);\n+\n+        fn build_args(bcx: block, tys: &ShimTypes,\n                       llwrapfn: ValueRef, llargbundle: ValueRef) {\n             let _icx = bcx.insn_ctxt(\"foreign::wrap::build_args\");\n-            let mut i = 0u;\n-            let n = vec::len(tys.arg_tys);\n+            let ccx = bcx.ccx();\n+            let n = vec::len(tys.llsig.llarg_tys);\n             let implicit_args = first_real_arg; // return + env\n-            while i < n {\n-                let llargval = get_param(llwrapfn, i + implicit_args);\n+            for uint::range(0, n) |i| {\n+                let mut llargval = get_param(llwrapfn, i + implicit_args);\n+\n+                // In some cases, Rust will pass a pointer which the\n+                // native C type doesn't have.  In that case, just\n+                // load the value from the pointer.\n+                if type_of::arg_is_indirect(ccx, &tys.fn_sig.inputs[i]) {\n+                    llargval = Load(bcx, llargval);\n+                }\n+\n                 store_inbounds(bcx, llargval, llargbundle, ~[0u, i]);\n-                i += 1u;\n             }\n             let llretptr = get_param(llwrapfn, 0u);\n             store_inbounds(bcx, llretptr, llargbundle, ~[0u, n]);\n         }\n \n-        fn build_ret(bcx: block, _tys: @c_stack_tys,\n+        fn build_ret(bcx: block, _tys: &ShimTypes,\n                      _llargbundle: ValueRef) {\n             let _icx = bcx.insn_ctxt(\"foreign::wrap::build_ret\");\n             RetVoid(bcx);\n         }\n-\n-        build_wrap_fn_(ccx, tys, llshimfn, llwrapfn,\n-                       ccx.upcalls.call_shim_on_c_stack,\n-                       build_args, build_ret);\n-    }\n-\n-    let mut cc = match abi {\n-      ast::foreign_abi_rust_intrinsic |\n-      ast::foreign_abi_cdecl => lib::llvm::CCallConv,\n-      ast::foreign_abi_stdcall => lib::llvm::X86StdcallCallConv\n-    };\n-\n-    for vec::each(foreign_mod.items) |foreign_item| {\n-      match foreign_item.node {\n-        ast::foreign_item_fn(*) => {\n-          let id = foreign_item.id;\n-          if abi != ast::foreign_abi_rust_intrinsic {\n-              let llwrapfn = get_item_val(ccx, id);\n-              let tys = c_stack_tys(ccx, id);\n-              if attr::attrs_contains_name(foreign_item.attrs, \"rust_stack\") {\n-                  build_direct_fn(ccx, llwrapfn, *foreign_item, tys, cc);\n-              } else {\n-                  let llshimfn = build_shim_fn(ccx, *foreign_item, tys, cc);\n-                  build_wrap_fn(ccx, tys, llshimfn, llwrapfn);\n-              }\n-          } else {\n-              // Intrinsics are emitted by monomorphic fn\n-          }\n-        }\n-        ast::foreign_item_const(*) => {\n-            let ident = ccx.sess.parse_sess.interner.get(foreign_item.ident);\n-            ccx.item_symbols.insert(foreign_item.id, copy *ident);\n-        }\n-      }\n     }\n }\n \n@@ -842,6 +909,32 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n     finish_fn(fcx, lltop);\n }\n \n+/**\n+ * Translates a \"crust\" fn, meaning a Rust fn that can be called\n+ * from C code.  In this case, we have to perform some adaptation\n+ * to (1) switch back to the Rust stack and (2) adapt the C calling\n+ * convention to our own.\n+ *\n+ * Example: Given a crust fn F(x: X, y: Y) -> Z, we generate a\n+ * Rust function R as normal:\n+ *\n+ *    void R(Z* dest, void *env, X x, Y y) {...}\n+ *\n+ * and then we generate a wrapper function W that looks like:\n+ *\n+ *    Z W(X x, Y y) {\n+ *        struct { X x; Y y; Z *z; } args = { x, y, z };\n+ *        call_on_c_stack_shim(S, &args);\n+ *    }\n+ *\n+ * Note that the wrapper follows the foreign (typically \"C\") ABI.\n+ * The wrapper is the actual \"value\" of the foreign fn.  Finally,\n+ * we generate a shim function S that looks like:\n+ *\n+ *     void S(struct { X x; Y y; Z *z; } *args) {\n+ *         R(args->z, NULL, args->x, args->y);\n+ *     }\n+ */\n pub fn trans_foreign_fn(ccx: @CrateContext,\n                         +path: ast_map::path,\n                         decl: &ast::fn_decl,\n@@ -867,28 +960,51 @@ pub fn trans_foreign_fn(ccx: @CrateContext,\n     }\n \n     fn build_shim_fn(ccx: @CrateContext, +path: ast_map::path,\n-                     llrustfn: ValueRef, tys: @c_stack_tys) -> ValueRef {\n+                     llrustfn: ValueRef, tys: &ShimTypes) -> ValueRef {\n+        /*!\n+         *\n+         * Generate the shim S:\n+         *\n+         *     void S(struct { X x; Y y; Z *z; } *args) {\n+         *         R(args->z, NULL, &args->x, args->y);\n+         *     }\n+         *\n+         * One complication is that we must adapt to the Rust\n+         * calling convention, which introduces indirection\n+         * in some cases.  To demonstrate this, I wrote one of the\n+         * entries above as `&args->x`, because presumably `X` is\n+         * one of those types that is passed by pointer in Rust.\n+         */\n+\n         let _icx = ccx.insn_ctxt(\"foreign::foreign::build_shim_fn\");\n \n-        fn build_args(bcx: block, tys: @c_stack_tys,\n+        fn build_args(bcx: block, tys: &ShimTypes,\n                       llargbundle: ValueRef) -> ~[ValueRef] {\n             let _icx = bcx.insn_ctxt(\"foreign::extern::shim::build_args\");\n+            let ccx = bcx.ccx();\n             let mut llargvals = ~[];\n             let mut i = 0u;\n-            let n = vec::len(tys.arg_tys);\n+            let n = tys.fn_sig.inputs.len();\n             let llretptr = load_inbounds(bcx, llargbundle, ~[0u, n]);\n             llargvals.push(llretptr);\n             let llenvptr = C_null(T_opaque_box_ptr(bcx.ccx()));\n             llargvals.push(llenvptr);\n             while i < n {\n-                let llargval = load_inbounds(bcx, llargbundle, ~[0u, i]);\n+                // Get a pointer to the argument:\n+                let mut llargval = GEPi(bcx, llargbundle, [0u, i]);\n+\n+                if !type_of::arg_is_indirect(ccx, &tys.fn_sig.inputs[i]) {\n+                    // If Rust would pass this by value, load the value.\n+                    llargval = Load(bcx, llargval);\n+                }\n+\n                 llargvals.push(llargval);\n                 i += 1u;\n             }\n             return llargvals;\n         }\n \n-        fn build_ret(_bcx: block, _tys: @c_stack_tys,\n+        fn build_ret(_bcx: block, _tys: &ShimTypes,\n                      _llargbundle: ValueRef, _llretval: ValueRef)  {\n             // Nop. The return pointer in the Rust ABI function\n             // is wired directly into the return slot in the shim struct\n@@ -904,36 +1020,48 @@ pub fn trans_foreign_fn(ccx: @CrateContext,\n     }\n \n     fn build_wrap_fn(ccx: @CrateContext, llshimfn: ValueRef,\n-                     llwrapfn: ValueRef, tys: @c_stack_tys) {\n+                     llwrapfn: ValueRef, tys: &ShimTypes)\n+    {\n+        /*!\n+         *\n+         * Generate the wrapper W:\n+         *\n+         *    Z W(X x, Y y) {\n+         *        struct { X x; Y y; Z *z; } args = { x, y, z };\n+         *        call_on_c_stack_shim(S, &args);\n+         *    }\n+         */\n \n         let _icx = ccx.insn_ctxt(\"foreign::foreign::build_wrap_fn\");\n \n-        fn build_args(bcx: block, tys: @c_stack_tys,\n+        build_wrap_fn_(ccx, tys, llshimfn, llwrapfn,\n+                       ccx.upcalls.call_shim_on_rust_stack,\n+                       build_args, build_ret);\n+\n+        fn build_args(bcx: block, tys: &ShimTypes,\n                       llwrapfn: ValueRef, llargbundle: ValueRef) {\n             let _icx = bcx.insn_ctxt(\"foreign::foreign::wrap::build_args\");\n-            tys.fn_ty.build_wrap_args(bcx, tys.ret_ty,\n-                                      llwrapfn, llargbundle);\n+            tys.fn_ty.build_wrap_args(\n+                bcx, tys.llsig.llret_ty,\n+                llwrapfn, llargbundle);\n         }\n \n-        fn build_ret(bcx: block, tys: @c_stack_tys,\n+        fn build_ret(bcx: block, tys: &ShimTypes,\n                      llargbundle: ValueRef) {\n             let _icx = bcx.insn_ctxt(\"foreign::foreign::wrap::build_ret\");\n-            tys.fn_ty.build_wrap_ret(bcx, tys.arg_tys, llargbundle);\n+            tys.fn_ty.build_wrap_ret(\n+                bcx, tys.llsig.llarg_tys, llargbundle);\n         }\n-\n-        build_wrap_fn_(ccx, tys, llshimfn, llwrapfn,\n-                       ccx.upcalls.call_shim_on_rust_stack,\n-                       build_args, build_ret);\n     }\n \n-    let tys = c_stack_tys(ccx, id);\n+    let tys = shim_types(ccx, id);\n     // The internal Rust ABI function - runs on the Rust stack\n     // XXX: Bad copy.\n     let llrustfn = build_rust_fn(ccx, copy path, decl, body, id);\n     // The internal shim function - runs on the Rust stack\n-    let llshimfn = build_shim_fn(ccx, path, llrustfn, tys);\n+    let llshimfn = build_shim_fn(ccx, path, llrustfn, &tys);\n     // The foreign C function - runs on the C stack\n-    build_wrap_fn(ccx, llshimfn, llwrapfn, tys)\n+    build_wrap_fn(ccx, llshimfn, llwrapfn, &tys)\n }\n \n pub fn register_foreign_fn(ccx: @CrateContext,\n@@ -944,11 +1072,8 @@ pub fn register_foreign_fn(ccx: @CrateContext,\n                         -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"foreign::register_foreign_fn\");\n     let t = ty::node_id_to_type(ccx.tcx, node_id);\n-    let (llargtys, llretty, ret_ty) = c_arg_and_ret_lltys(ccx, node_id);\n-    let ret_def = !ty::type_is_bot(ret_ty) && !ty::type_is_nil(ret_ty);\n-    let fn_ty = abi_info(ccx.sess.targ_cfg.arch).\n-                    compute_info(llargtys, llretty, ret_def);\n-    do fn_ty.decl_fn |fnty| {\n+    let tys = shim_types(ccx, node_id);\n+    do tys.fn_ty.decl_fn |fnty| {\n         register_fn_fuller(ccx, sp, /*bad*/copy path, node_id, attrs,\n                            t, lib::llvm::CCallConv, fnty)\n     }"}, {"sha": "b8c5ff4258cedc89034a4dd498a96a20045927b2", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -44,7 +44,7 @@ be generated once they are invoked with specific type parameters,\n see `trans::base::lval_static_fn()` or `trans::base::monomorphic_fn()`.\n */\n pub fn trans_impl(ccx: @CrateContext, +path: path, name: ast::ident,\n-                  methods: ~[@ast::method], generics: &ast::Generics,\n+                  methods: &[@ast::method], generics: &ast::Generics,\n                   self_ty: Option<ty::t>, id: ast::node_id) {\n     let _icx = ccx.insn_ctxt(\"impl::trans_impl\");\n     if !generics.ty_params.is_empty() { return; }"}, {"sha": "60af486b3cf1b6e0825b6c9ba1649441cf106f79", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -313,7 +313,6 @@ pub impl Reflector {\n                 ast::infer(_) => 0u,\n                 ast::expl(e) => match e {\n                     ast::by_ref => 1u,\n-                    ast::by_val => 2u,\n                     ast::by_copy => 5u\n                 }\n             };"}, {"sha": "6855ec5d5726f06b31c20ecddd928b8b3a72c10f", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -21,24 +21,21 @@ use util::ppaux;\n use core::option::None;\n use syntax::ast;\n \n-pub fn type_of_explicit_arg(ccx: @CrateContext, arg: ty::arg) -> TypeRef {\n-    let llty = type_of(ccx, arg.ty);\n+pub fn arg_is_indirect(ccx: @CrateContext, arg: &ty::arg) -> bool {\n     match ty::resolved_mode(ccx.tcx, arg.mode) {\n-        ast::by_val => llty,\n-        ast::by_copy => {\n-            if ty::type_is_immediate(arg.ty) {\n-                llty\n-            } else {\n-                T_ptr(llty)\n-            }\n-        }\n-        _ => T_ptr(llty)\n+        ast::by_copy => !ty::type_is_immediate(arg.ty),\n+        ast::by_ref => true\n     }\n }\n \n+pub fn type_of_explicit_arg(ccx: @CrateContext, arg: &ty::arg) -> TypeRef {\n+    let llty = type_of(ccx, arg.ty);\n+    if arg_is_indirect(ccx, arg) {T_ptr(llty)} else {llty}\n+}\n+\n pub fn type_of_explicit_args(ccx: @CrateContext,\n                              inputs: &[ty::arg]) -> ~[TypeRef] {\n-    inputs.map(|arg| type_of_explicit_arg(ccx, *arg))\n+    inputs.map(|arg| type_of_explicit_arg(ccx, arg))\n }\n \n pub fn type_of_fn(cx: @CrateContext, inputs: &[ty::arg],"}, {"sha": "5279c10d9675a8dfbbfe887da3f5752740b5ccae", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -81,7 +81,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n         ty::ty_closure(ty::ClosureTy {sig: ref sig, _}) => {\n             for vec::each(sig.inputs) |arg| {\n                 match ty::resolved_mode(ccx.tcx, arg.mode) {\n-                    by_val | by_copy => {\n+                    by_copy => {\n                         type_needs(cx, use_repr, arg.ty);\n                     }\n                     by_ref => {}\n@@ -326,7 +326,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n               ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx, f.id))\n           ) |a| {\n               match a.mode {\n-                  expl(by_copy) | expl(by_val) => {\n+                  expl(by_copy) => {\n                       type_needs(cx, use_repr, a.ty);\n                   }\n                   _ => ()\n@@ -340,7 +340,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         for ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx,\n                                                e.callee_id)).each |a| {\n           match a.mode {\n-              expl(by_copy) | expl(by_val) => {\n+              expl(by_copy) => {\n                   type_needs(cx, use_repr, a.ty);\n               }\n               _ => ()"}, {"sha": "108d4e94017a819909aef5f39cd29a0b3d31f77f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -1110,7 +1110,7 @@ pub fn default_arg_mode_for_ty(tcx: ctxt, ty: ty::t) -> ast::rmode {\n             // forward-compatible with non-legacy, we should use +\n             ast::by_copy\n         } else if ty::type_is_immediate(ty) {\n-            ast::by_val\n+            ast::by_copy\n         } else {\n             ast::by_ref\n         }"}, {"sha": "9baea38bd7c50702fbf0f39db402907fce216d82", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -3207,7 +3207,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n           let (_, visitor_trait) = tcx.intrinsic_defs.get(&ty_visitor_name);\n           let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {ty: tydesc_ty,\n                                                    mutbl: ast::m_imm});\n-          (0u, ~[arg(ast::by_val, td_ptr),\n+          (0u, ~[arg(ast::by_copy, td_ptr),\n                  arg(ast::by_ref, visitor_trait)], ty::mk_nil(tcx))\n       }\n       ~\"frame_address\" => {\n@@ -3217,7 +3217,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             onceness: ast::Once,\n             region: ty::re_bound(ty::br_anon(0)),\n             sig: ty::FnSig {\n-                inputs: ~[arg {mode: ast::expl(ast::by_val),\n+                inputs: ~[arg {mode: ast::expl(ast::by_copy),\n                                ty: ty::mk_imm_ptr(\n                                    ccx.tcx,\n                                    ty::mk_mach_uint(ccx.tcx, ast::ty_u8))}],"}, {"sha": "297e33aa8e3650ea846ada3ea01d0fd2606be681", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -273,26 +273,6 @@ impl get_and_find_region for isr_alist {\n     }\n }\n \n-fn arg_is_argv_ty(tcx: ty::ctxt, a: ty::arg) -> bool {\n-    match ty::resolved_mode(tcx, a.mode) {\n-        ast::by_val => { /*ok*/ }\n-        _ => {\n-            return false;\n-        }\n-    }\n-\n-    match ty::get(a.ty).sty {\n-      ty::ty_evec(mt, vstore_uniq) => {\n-        if mt.mutbl != ast::m_imm { return false; }\n-        match ty::get(mt.ty).sty {\n-          ty::ty_estr(vstore_uniq) => return true,\n-          _ => return false\n-        }\n-      }\n-      _ => return false\n-    }\n-}\n-\n fn check_main_fn_ty(ccx: @mut CrateCtxt,\n                     main_id: ast::node_id,\n                     main_span: span) {"}, {"sha": "6b5f806f7df3d3432fcbf1dde688e4bcc2cc236c", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -49,7 +49,7 @@ use core::vec;\n pub mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     pub extern {\n-        fn move_val_init<T>(dst: &mut T, -src: T);\n+        fn move_val_init<T>(dst: &mut T, +src: T);\n         fn needs_drop<T>() -> bool;\n     }\n }"}, {"sha": "99d19c4839c40e6a9dd9d75f13c4377e534ca064", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -19,7 +19,7 @@ use core::vec;\n \n #[abi = \"rust-intrinsic\"]\n extern \"C\" mod rusti {\n-    fn move_val_init<T>(dst: &mut T, -src: T);\n+    fn move_val_init<T>(dst: &mut T, +src: T);\n     fn init<T>() -> T;\n }\n "}, {"sha": "d768eef9a8c9b4c0b39bf73cdf110ae7b24a3991", "filename": "src/libstd/time.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -30,10 +30,10 @@ pub mod rustrt {\n \n         pub unsafe fn rust_tzset();\n         // FIXME: The i64 values can be passed by-val when #2064 is fixed.\n-        pub unsafe fn rust_gmtime(&&sec: i64, &&nsec: i32, &&result: Tm);\n-        pub unsafe fn rust_localtime(&&sec: i64, &&nsec: i32, &&result: Tm);\n-        pub unsafe fn rust_timegm(&&tm: Tm, sec: &mut i64);\n-        pub unsafe fn rust_mktime(&&tm: Tm, sec: &mut i64);\n+        pub unsafe fn rust_gmtime(sec: i64, nsec: i32, result: &mut Tm);\n+        pub unsafe fn rust_localtime(sec: i64, nsec: i32, result: &mut Tm);\n+        pub unsafe fn rust_timegm(tm: &Tm, sec: &mut i64);\n+        pub unsafe fn rust_mktime(tm: &Tm, sec: &mut i64);\n     }\n }\n \n@@ -172,7 +172,7 @@ pub fn at_utc(clock: Timespec) -> Tm {\n     unsafe {\n         let mut Timespec { sec, nsec } = clock;\n         let mut tm = empty_tm();\n-        rustrt::rust_gmtime(sec, nsec, tm);\n+        rustrt::rust_gmtime(sec, nsec, &mut tm);\n         tm\n     }\n }\n@@ -187,7 +187,7 @@ pub fn at(clock: Timespec) -> Tm {\n     unsafe {\n         let mut Timespec { sec, nsec } = clock;\n         let mut tm = empty_tm();\n-        rustrt::rust_localtime(sec, nsec, tm);\n+        rustrt::rust_localtime(sec, nsec, &mut tm);\n         tm\n     }\n }\n@@ -217,9 +217,9 @@ pub impl Tm {\n         unsafe {\n             let mut sec = 0i64;\n             if self.tm_gmtoff == 0_i32 {\n-                rustrt::rust_timegm(*self, &mut sec);\n+                rustrt::rust_timegm(self, &mut sec);\n             } else {\n-                rustrt::rust_mktime(*self, &mut sec);\n+                rustrt::rust_mktime(self, &mut sec);\n             }\n             Timespec::new(sec, self.tm_nsec)\n         }"}, {"sha": "298cb241bed4199e91b47e38796cd53d20aa00b5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -456,7 +456,7 @@ impl<T:to_bytes::IterBytes> to_bytes::IterBytes for inferable<T> {\n #[auto_encode]\n #[auto_decode]\n #[deriving_eq]\n-pub enum rmode { by_ref, by_val, by_copy }\n+pub enum rmode { by_ref, by_copy }\n \n impl to_bytes::IterBytes for rmode {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {"}, {"sha": "a97007cfb3a9b9a49682fd30eff4e847c9fee486", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -148,7 +148,7 @@ pub fn map_crate(diag: span_handler, c: crate) -> map {\n // the item itself.\n pub fn map_decoded_item(diag: span_handler,\n                         map: map,\n-                        path: path,\n+                        +path: path,\n                         ii: inlined_item) {\n     // I believe it is ok for the local IDs of inlined items from other crates\n     // to overlap with the local ids from this crate, so just generate the ids\n@@ -171,10 +171,10 @@ pub fn map_decoded_item(diag: span_handler,\n       ii_item(*) | ii_dtor(*) => { /* fallthrough */ }\n       ii_foreign(i) => {\n         cx.map.insert(i.id, node_foreign_item(i, foreign_abi_rust_intrinsic,\n-                                              @/*bad*/ copy path));\n+                                              @path));\n       }\n       ii_method(impl_did, m) => {\n-        map_method(impl_did, @/*bad*/ copy path, m, cx);\n+        map_method(impl_did, @path, m, cx);\n       }\n     }\n "}, {"sha": "cd7f9a7cf823e5c6d133302db0fe67147e90c8f5", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -72,7 +72,7 @@ pub fn attr_meta(attr: ast::attribute) -> @ast::meta_item {\n }\n \n // Get the meta_items from inside a vector of attributes\n-pub fn attr_metas(attrs: ~[ast::attribute]) -> ~[@ast::meta_item] {\n+pub fn attr_metas(attrs: &[ast::attribute]) -> ~[@ast::meta_item] {\n     do attrs.map |a| { attr_meta(*a) }\n }\n \n@@ -214,7 +214,7 @@ pub fn attrs_contains_name(attrs: &[ast::attribute], name: &str) -> bool {\n     !find_attrs_by_name(attrs, name).is_empty()\n }\n \n-pub fn first_attr_value_str_by_name(attrs: ~[ast::attribute], name: &str)\n+pub fn first_attr_value_str_by_name(attrs: &[ast::attribute], name: &str)\n                                  -> Option<@~str> {\n \n     let mattrs = find_attrs_by_name(attrs, name);\n@@ -304,7 +304,7 @@ pub fn find_linkage_metas(attrs: &[ast::attribute]) -> ~[@ast::meta_item] {\n     }\n }\n \n-pub fn foreign_abi(attrs: ~[ast::attribute])\n+pub fn foreign_abi(attrs: &[ast::attribute])\n                 -> Either<~str, ast::foreign_abi> {\n     return match attr::first_attr_value_str_by_name(attrs, ~\"abi\") {\n         None => {"}, {"sha": "2ade0810deae46619316c22b819ecb9655c093e3", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -55,6 +55,7 @@ pub enum ObsoleteSyntax {\n     ObsoletePostFnTySigil,\n     ObsoleteBareFnType,\n     ObsoleteNewtypeEnum,\n+    ObsoleteMode,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -176,6 +177,10 @@ pub impl Parser {\n                 \"newtype enum\",\n                 \"instead of `enum Foo = int`, write `struct Foo(int)`\"\n             ),\n+            ObsoleteMode => (\n+                \"obsolete argument mode\",\n+                \"replace `-` or `++` mode with `+`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "77ba27cf423b70103192067bbedaf6b9cc984b7e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -17,7 +17,7 @@ use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{provided, public, pure_fn, purity};\n use ast::{_mod, add, arg, arm, attribute, bind_by_ref, bind_infer};\n use ast::{bind_by_copy, bitand, bitor, bitxor, blk};\n-use ast::{blk_check_mode, box, by_copy, by_ref, by_val};\n+use ast::{blk_check_mode, box, by_copy, by_ref};\n use ast::{crate, crate_cfg, decl, decl_item};\n use ast::{decl_local, default_blk, deref, div, enum_def, enum_variant_kind};\n use ast::{expl, expr, expr_, expr_addr_of, expr_match, expr_again};\n@@ -78,6 +78,7 @@ use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n+use parse::obsolete::{ObsoleteMode};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -716,12 +717,15 @@ pub impl Parser {\n \n     fn parse_arg_mode(&self) -> mode {\n         if self.eat(&token::BINOP(token::MINUS)) {\n-            expl(by_copy) // NDM outdated syntax\n+            self.obsolete(*self.span, ObsoleteMode);\n+            expl(by_copy)\n         } else if self.eat(&token::ANDAND) {\n             expl(by_ref)\n         } else if self.eat(&token::BINOP(token::PLUS)) {\n             if self.eat(&token::BINOP(token::PLUS)) {\n-                expl(by_val)\n+                // ++ mode is obsolete, but we need a snapshot\n+                // to stop parsing it.\n+                expl(by_copy)\n             } else {\n                 expl(by_copy)\n             }"}, {"sha": "846560636463f063d6265eb1796a92af0644eb63", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -1710,7 +1710,6 @@ pub fn mode_to_str(m: ast::mode) -> ~str {\n     match m {\n       ast::expl(ast::by_ref) => ~\"&&\",\n       ast::expl(ast::by_copy) => ~\"+\",\n-      ast::expl(ast::by_val) => ~\"++\",\n       ast::infer(_) => ~\"\"\n     }\n }"}, {"sha": "5a9de9735ba0346abc69434552c998468c1b199d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -434,18 +434,18 @@ rust_tzset() {\n }\n \n extern \"C\" CDECL void\n-rust_gmtime(int64_t *sec, int32_t *nsec, rust_tm *timeptr) {\n+rust_gmtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n     tm tm;\n-    time_t s = *sec;\n+    time_t s = sec;\n     GMTIME(&s, &tm);\n \n-    tm_to_rust_tm(&tm, timeptr, 0, \"UTC\", *nsec);\n+    tm_to_rust_tm(&tm, timeptr, 0, \"UTC\", nsec);\n }\n \n extern \"C\" CDECL void\n-rust_localtime(int64_t *sec, int32_t *nsec, rust_tm *timeptr) {\n+rust_localtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n     tm tm;\n-    time_t s = *sec;\n+    time_t s = sec;\n     LOCALTIME(&s, &tm);\n \n #if defined(__WIN32__)\n@@ -457,7 +457,7 @@ rust_localtime(int64_t *sec, int32_t *nsec, rust_tm *timeptr) {\n     const char *zone = tm.tm_zone;\n #endif\n \n-    tm_to_rust_tm(&tm, timeptr, gmtoff, zone, *nsec);\n+    tm_to_rust_tm(&tm, timeptr, gmtoff, zone, nsec);\n }\n \n extern \"C\" CDECL void\n@@ -844,6 +844,38 @@ rust_readdir() {\n \n #endif\n \n+// These functions are used in the unit tests for C ABI calls.\n+\n+extern \"C\" CDECL uint32_t\n+rust_dbg_extern_identity_u32(uint32_t u) {\n+    return u;\n+}\n+\n+extern \"C\" CDECL uint64_t\n+rust_dbg_extern_identity_u64(uint64_t u) {\n+    return u;\n+}\n+\n+struct TwoU64s {\n+    uint64_t one;\n+    uint64_t two;\n+};\n+\n+extern \"C\" CDECL TwoU64s\n+rust_dbg_extern_identity_TwoU64s(TwoU64s u) {\n+    return u;\n+}\n+\n+extern \"C\" CDECL double\n+rust_dbg_extern_identity_double(double u) {\n+    return u;\n+}\n+\n+extern \"C\" CDECL char\n+rust_dbg_extern_identity_u8(char u) {\n+    return u;\n+}\n+\n \n //\n // Local Variables:"}, {"sha": "7fb6334ca754cf499387825a4c853208e1c1a6eb", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -195,4 +195,9 @@ rust_get_exchange_count_ptr\n rust_get_sched_tls_key\n swap_registers\n rust_readdir\n-rust_opendir\n\\ No newline at end of file\n+rust_opendir\n+rust_dbg_extern_identity_u32\n+rust_dbg_extern_identity_u64\n+rust_dbg_extern_identity_TwoU64s\n+rust_dbg_extern_identity_double\n+rust_dbg_extern_identity_u8"}, {"sha": "12b305720cc93d8e29a27547dd5a05a42afd8f3a", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -546,8 +546,8 @@ extern \"C\" LLVMValueRef LLVMInlineAsm(LLVMTypeRef Ty,\n                                       char *Constraints,\n                                       LLVMBool HasSideEffects,\n                                       LLVMBool IsAlignStack,\n-                                      InlineAsm::AsmDialect Dialect) {\n+                                      unsigned Dialect) {\n     return wrap(InlineAsm::get(unwrap<FunctionType>(Ty), AsmString,\n                                Constraints, HasSideEffects,\n-                               IsAlignStack, Dialect));\n+                               IsAlignStack, (InlineAsm::AsmDialect) Dialect));\n }"}, {"sha": "80990099cdab5c15a0a768ba69decb576386ba13", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -23,7 +23,7 @@ pub mod kitties {\n         fn meow_count(&mut self) -> uint { self.meows }\n     }\n \n-    pub fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n+    pub fn cat<U>(in_x : uint, in_y : int, +in_info: ~[U]) -> cat<U> {\n         cat {\n             meows: in_x,\n             how_hungry: in_y,"}, {"sha": "8da09af2d18b6eeabd994eadd11481ce5d01c03a", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -100,7 +100,7 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n     }\n }\n \n-fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n+fn gen_search_keys(graph: &[~[node_id]], n: uint) -> ~[node_id] {\n     let keys = oldmap::HashMap::<node_id, ()>();\n     let r = rand::Rng();\n "}, {"sha": "17b7d1d29482db5b26be8203349e45cfc90e6bb3", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -19,7 +19,7 @@\n \n use core::cell::Cell;\n \n-fn child_generation(gens_left: uint, -c: comm::Chan<()>) {\n+fn child_generation(gens_left: uint, c: comm::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,"}, {"sha": "c60848e5cc6c5ab443cacac7c067e420bd1d8e88", "filename": "src/test/compile-fail/liveness-move-from-args.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -10,10 +10,6 @@\n \n fn take(_x: ~int) { }\n \n-fn from_by_value_arg(++x: ~int) {\n-    take(x);  //~ ERROR illegal move from argument `x`, which is not copy or move mode\n-}\n-\n fn from_by_ref_arg(&&x: ~int) {\n     take(x);  //~ ERROR illegal move from argument `x`, which is not copy or move mode\n }"}, {"sha": "fdc0392a74c7c8ec22b133ee3d2c7878df2f6979", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn send<T:Owned>(ch: _chan<T>, -data: T) {\n+fn send<T:Owned>(ch: _chan<T>, +data: T) {\n     debug!(ch);\n     debug!(data);\n     fail!();"}, {"sha": "39e47fb1aabdbff59193d2fe17cce0705035a3d5", "filename": "src/test/compile-fail/mutable-arguments.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -19,18 +19,13 @@ fn mutate_by_ref(&&x: uint) {\n     x = 0; //~ ERROR assigning to argument\n }\n \n-fn mutate_by_val(++x: uint) {\n-    //~^ WARNING unused variable: `x`\n-    x = 0; //~ ERROR assigning to argument\n-}\n-\n fn mutate_by_copy(+x: uint) {\n     //~^ WARNING unused variable: `x`\n     x = 0; //~ ERROR assigning to argument\n     //~^ WARNING value assigned to `x` is never read\n }\n \n-fn mutate_by_move(-x: uint) {\n+fn mutate_by_move(+x: uint) {\n     //~^ WARNING unused variable: `x`\n     x = 0; //~ ERROR assigning to argument\n     //~^ WARNING value assigned to `x` is never read"}, {"sha": "51e2eaa44fa37f0f65b4d5cf1e7b3a6b238e2b5c", "filename": "src/test/run-fail/unwind-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern:fail\n-fn f(-_a: @int) {\n+fn f(+_a: @int) {\n     fail!();\n }\n "}, {"sha": "11f988bc2961ba06a7b401f8f132b492672c0e0c", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -12,7 +12,7 @@\n \n struct X { x: int }\n \n-fn f1(a: &mut X, b: &mut int, -c: int) -> int {\n+fn f1(a: &mut X, b: &mut int, +c: int) -> int {\n     let r = a.x + *b + c;\n     a.x = 0;\n     *b = 10;"}, {"sha": "0d51993e226ef436686e8e519e271b611230ddf5", "filename": "src/test/run-pass/borrowck-lend-args.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -18,17 +18,9 @@ fn borrow_from_arg_mut_ref(v: &mut ~int) {\n     borrow(*v);\n }\n \n-fn borrow_from_arg_move(-v: ~int) {\n-    borrow(v);\n-}\n-\n fn borrow_from_arg_copy(+v: ~int) {\n     borrow(v);\n }\n \n-fn borrow_from_arg_val(++v: ~int) {\n-    borrow(v);\n-}\n-\n pub fn main() {\n }"}, {"sha": "95db23f6c5afe82b15ce6f4f561ad3e468668be2", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -22,7 +22,7 @@ pub impl<U> cat<U> {\n     fn meow_count(&mut self) -> uint { self.meows }\n }\n \n-fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n+fn cat<U>(in_x : uint, in_y : int, +in_info: ~[U]) -> cat<U> {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,"}, {"sha": "00754afa703b258df701bcb6a5d67b8f7404dcd2", "filename": "src/test/run-pass/extern-pass-TwoU64s-ref.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we ignore modes when calling extern functions.\n+\n+// xfail-test --- broken on 32-bit ABIs! (#5347)\n+\n+#[deriving_eq]\n+struct TwoU64s {\n+    one: u64, two: u64\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_TwoU64s(&&u: TwoU64s) -> TwoU64s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let x = TwoU64s {one: 22, two: 23};\n+        let y = rust_dbg_extern_identity_TwoU64s(x);\n+        fail_unless!(x == y);\n+    }\n+}\n+"}, {"sha": "2baf383ce545f0efaacaff63ce5e2ef6d28f8157", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a foreign function that accepts and returns a struct\n+// by value.\n+\n+// xfail-test --- broken on 32-bit ABIs! (#5347)\n+\n+#[deriving_eq]\n+struct TwoU64s {\n+    one: u64, two: u64\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let x = TwoU64s {one: 22, two: 23};\n+        let y = rust_dbg_extern_identity_TwoU64s(x);\n+        fail_unless!(x == y);\n+    }\n+}\n+"}, {"sha": "104ea342cd5e013285af010214d170fac8d2793d", "filename": "src/test/run-pass/extern-pass-char.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a function that takes/returns a u8.\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        fail_unless!(22_u8 == rust_dbg_extern_identity_u8(22_u8));\n+    }\n+}\n+"}, {"sha": "afdec4d1002986c3caf8d702575683f364a40b2f", "filename": "src/test/run-pass/extern-pass-double.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        fail_unless!(22.0_f64 == rust_dbg_extern_identity_double(22.0_f64));\n+    }\n+}\n+"}, {"sha": "0d6220e7b25cda040a487fa9e5e2d90a70a8d43b", "filename": "src/test/run-pass/extern-pass-u32.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a function that takes/returns a u32.\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        fail_unless!(22_u32 == rust_dbg_extern_identity_u32(22_u32));\n+    }\n+}\n+"}, {"sha": "31777035238339238d238f28be95f89d248ad658", "filename": "src/test/run-pass/extern-pass-u64.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a call to a function that takes/returns a u64.\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        fail_unless!(22_u64 == rust_dbg_extern_identity_u64(22_u64));\n+    }\n+}\n+"}, {"sha": "7544c89197bab9a52d8feb337216787039d961de", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -11,8 +11,8 @@\n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     pub extern {\n-        pub fn move_val_init<T>(dst: &mut T, -src: T);\n-        pub fn move_val<T>(dst: &mut T, -src: T);\n+        pub fn move_val_init<T>(dst: &mut T, +src: T);\n+        pub fn move_val<T>(dst: &mut T, +src: T);\n     }\n }\n "}, {"sha": "ae927ff79181093ff83daa887be4fafdf9bc0d5b", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -70,7 +70,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn send<T:Owned>(mut p: send_packet<T>, -payload: T) {\n+    pub fn send<T:Owned>(mut p: send_packet<T>, +payload: T) {\n         let mut p = p.unwrap();\n         let mut p = unsafe { uniquify(p) };\n         fail_unless!((*p).payload.is_none());\n@@ -228,7 +228,7 @@ pub mod pingpong {\n     pub struct ping(::pipes::send_packet<pong>);\n     pub struct pong(::pipes::send_packet<ping>);\n \n-    pub fn liberate_ping(-p: ping) -> ::pipes::send_packet<pong> {\n+    pub fn liberate_ping(+p: ping) -> ::pipes::send_packet<pong> {\n         unsafe {\n             let addr : *::pipes::send_packet<pong> = match &p {\n               &ping(ref x) => { cast::transmute(ptr::addr_of(x)) }\n@@ -239,7 +239,7 @@ pub mod pingpong {\n         }\n     }\n \n-    pub fn liberate_pong(-p: pong) -> ::pipes::send_packet<ping> {\n+    pub fn liberate_pong(+p: pong) -> ::pipes::send_packet<ping> {\n         unsafe {\n             let addr : *::pipes::send_packet<ping> = match &p {\n               &pong(ref x) => { cast::transmute(ptr::addr_of(x)) }\n@@ -261,14 +261,14 @@ pub mod pingpong {\n         pub type ping = ::pipes::send_packet<pingpong::ping>;\n         pub type pong = ::pipes::recv_packet<pingpong::pong>;\n \n-        pub fn do_ping(-c: ping) -> pong {\n+        pub fn do_ping(+c: ping) -> pong {\n             let (sp, rp) = ::pipes::entangle();\n \n             ::pipes::send(c, pingpong::ping(sp));\n             rp\n         }\n \n-        pub fn do_pong(-c: pong) -> (ping, ()) {\n+        pub fn do_pong(+c: pong) -> (ping, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n                 fail!(~\"sender closed the connection\")\n@@ -283,30 +283,30 @@ pub mod pingpong {\n         pub type ping = ::pipes::recv_packet<pingpong::ping>;\n         pub type pong = ::pipes::send_packet<pingpong::pong>;\n \n-        pub fn do_ping(-c: ping) -> (pong, ()) {\n+        pub fn do_ping(+c: ping) -> (pong, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n                 fail!(~\"sender closed the connection\")\n             }\n             (pingpong::liberate_ping(option::unwrap(packet)), ())\n         }\n \n-        pub fn do_pong(-c: pong) -> ping {\n+        pub fn do_pong(+c: pong) -> ping {\n             let (sp, rp) = ::pipes::entangle();\n             ::pipes::send(c, pingpong::pong(sp));\n             rp\n         }\n     }\n }\n \n-fn client(-chan: pingpong::client::ping) {\n+fn client(+chan: pingpong::client::ping) {\n     let chan = pingpong::client::do_ping(chan);\n     error!(~\"Sent ping\");\n     let (_chan, _data) = pingpong::client::do_pong(chan);\n     error!(~\"Received pong\");\n }\n \n-fn server(-chan: pingpong::server::ping) {\n+fn server(+chan: pingpong::server::ping) {\n     let (chan, _data) = pingpong::server::do_ping(chan);\n     error!(~\"Received ping\");\n     let _chan = pingpong::server::do_pong(chan);"}, {"sha": "658885124c2ef2b24501ad62bbd1f67331e1d8e4", "filename": "src/test/run-pass/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn take(-x: int) -> int {x}\n+fn take(+x: int) -> int {x}\n \n fn the_loop() {\n     let mut list = ~[];"}, {"sha": "c0adcc8c03cc4bea993353b591edecce4795e6f9", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(-foo: ~~[int]) { fail_unless!((foo[0] == 10)); }\n+fn test(+foo: ~~[int]) { fail_unless!((foo[0] == 10)); }\n \n pub fn main() {\n     let x = ~~[10];"}, {"sha": "41a82977175e728c859c95da74fcab609e52e604", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(-foo: @~[int]) { fail_unless!((foo[0] == 10)); }\n+fn test(+foo: @~[int]) { fail_unless!((foo[0] == 10)); }\n \n pub fn main() {\n     let x = @~[10];"}, {"sha": "b763317dfe186c5f409483477d03041b2ee0ec40", "filename": "src/test/run-pass/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(-foo: int) { fail_unless!((foo == 10)); }\n+fn test(+foo: int) { fail_unless!((foo == 10)); }\n \n pub fn main() { let x = 10; test(x); }"}, {"sha": "eb4c5f871af48f5f2ef280adec889d7fd51832c4", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(-thing: @fn()) { }\n+fn f2(+thing: @fn()) { }\n \n-fn f(-thing: @fn()) {\n+fn f(+thing: @fn()) {\n     f2(thing);\n }\n "}, {"sha": "d6b8acd94de3714246212031d65db1cb1f2bd1c6", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -53,7 +53,7 @@ fn switch<T:Owned,U>(+endp: pipes::RecvPacket<T>,\n     f(pipes::try_recv(endp))\n }\n \n-fn move_it<T>(-x: T) -> T { x }\n+fn move_it<T>(+x: T) -> T { x }\n \n macro_rules! follow (\n     {"}, {"sha": "7dea787e1a1ce74771ce26a0805cef06b1572f2b", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -91,7 +91,7 @@ mod test {\n     use core::pipes::recv;\n     use pingpong::{ping, pong};\n \n-    pub fn client(-chan: ::pingpong::client::ping) {\n+    pub fn client(+chan: ::pingpong::client::ping) {\n         use pingpong::client;\n \n         let chan = client::ping(chan); return;\n@@ -100,7 +100,7 @@ mod test {\n         error!(\"Received pong\");\n     }\n     \n-    pub fn server(-chan: ::pingpong::server::ping) {\n+    pub fn server(+chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(chan); return;"}, {"sha": "65a5672941f28d9cec08541e9424c25d74f88e9b", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -29,7 +29,7 @@ mod test {\n     use core::pipes::recv;\n     use pingpong::{ping, pong};\n \n-    pub fn client(-chan: ::pingpong::client::ping) {\n+    pub fn client(+chan: ::pingpong::client::ping) {\n         use pingpong::client;\n \n         let chan = client::ping(chan);\n@@ -38,7 +38,7 @@ mod test {\n         error!(~\"Received pong\");\n     }\n     \n-    pub fn server(-chan: ::pingpong::server::ping) {\n+    pub fn server(+chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(chan);"}, {"sha": "5a318d04e55c1f14bd7147c0a2e597b59f93d849", "filename": "src/test/run-pass/unique-fn-arg-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5472a7244896df20ceb7a12d9d30afc838f004/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs?ref=ab5472a7244896df20ceb7a12d9d30afc838f004", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(-i: ~int) {\n+fn f(+i: ~int) {\n     fail_unless!(*i == 100);\n }\n "}]}