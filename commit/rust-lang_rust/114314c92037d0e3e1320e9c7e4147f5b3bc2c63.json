{"sha": "114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDMxNGM5MjAzN2QwZTNlMTMyMGU5YzdlNDE0N2Y1YjNiYzJjNjM=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-11T10:54:37Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T13:09:16Z"}, "message": "StmtKind", "tree": {"sha": "0c0040481b613402126c44ca2326eabf52b2476e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c0040481b613402126c44ca2326eabf52b2476e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "html_url": "https://github.com/rust-lang/rust/commit/114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe8955bd585b8e49b01697684becb6a353413fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8955bd585b8e49b01697684becb6a353413fea", "html_url": "https://github.com/rust-lang/rust/commit/fe8955bd585b8e49b01697684becb6a353413fea"}], "stats": {"total": 125, "additions": 62, "deletions": 63}, "files": [{"sha": "bbea4ad6a4c9bb9cbb720b259f94e5ce804385fd", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -111,13 +111,13 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     fn stmt(&mut self, stmt: &hir::Stmt, pred: CFGIndex) -> CFGIndex {\n         let hir_id = self.tcx.hir.node_to_hir_id(stmt.node.id());\n         match stmt.node {\n-            hir::StmtDecl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl, _) => {\n                 let exit = self.decl(&decl, pred);\n                 self.add_ast_node(hir_id.local_id, &[exit])\n             }\n \n-            hir::StmtExpr(ref expr, _) |\n-            hir::StmtSemi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr, _) |\n+            hir::StmtKind::Semi(ref expr, _) => {\n                 let exit = self.expr(&expr, pred);\n                 self.add_ast_node(hir_id.local_id, &[exit])\n             }"}, {"sha": "a4e9279b23f7d0d644ad8e9b24c4f84942fe4fce", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n \n     fn check_stmt_attributes(&self, stmt: &hir::Stmt) {\n         // When checking statements ignore expressions, they will be checked later\n-        if let hir::Stmt_::StmtDecl(_, _) = stmt.node {\n+        if let hir::StmtKind::Decl(_, _) = stmt.node {\n             for attr in stmt.node.attrs() {\n                 if attr.check_name(\"inline\") {\n                     self.check_inline(attr, &stmt.span, Target::Statement);"}, {"sha": "de0f3a405d891bd0c05089668bedcc055ac4ac11", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -935,12 +935,12 @@ pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     match statement.node {\n-        StmtDecl(ref declaration, id) => {\n+        StmtKind::Decl(ref declaration, id) => {\n             visitor.visit_id(id);\n             visitor.visit_decl(declaration)\n         }\n-        StmtExpr(ref expression, id) |\n-        StmtSemi(ref expression, id) => {\n+        StmtKind::Expr(ref expression, id) |\n+        StmtKind::Semi(ref expression, id) => {\n             visitor.visit_id(id);\n             visitor.visit_expr(expression)\n         }"}, {"sha": "07d1281ada69e6e7e1822e3422be62cc0536d043", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -3995,7 +3995,7 @@ impl<'a> LoweringContext<'a> {\n                 //             ::std::option::Option::None => break\n                 //           };\n                 //           let <pat> = __next;\n-                //           StmtExpr(<body>);\n+                //           StmtKind::Expr(<body>);\n                 //         }\n                 //       }\n                 //     };\n@@ -4057,7 +4057,7 @@ impl<'a> LoweringContext<'a> {\n                         ThinVec::new(),\n                     ))\n                 };\n-                let match_stmt = respan(head_sp, hir::StmtExpr(match_expr, self.next_id().node_id));\n+                let match_stmt = respan(head_sp, hir::StmtKind::Expr(match_expr, self.next_id().node_id));\n \n                 let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat.id));\n \n@@ -4076,7 +4076,7 @@ impl<'a> LoweringContext<'a> {\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let body_stmt = respan(body.span, hir::StmtExpr(body_expr, self.next_id().node_id));\n+                let body_stmt = respan(body.span, hir::StmtKind::Expr(body_expr, self.next_id().node_id));\n \n                 let loop_block = P(self.block_all(\n                     e.span,\n@@ -4246,7 +4246,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_stmt(&mut self, s: &Stmt) -> SmallVector<hir::Stmt> {\n         SmallVector::one(match s.node {\n             StmtKind::Local(ref l) => Spanned {\n-                node: hir::StmtDecl(\n+                node: hir::StmtKind::Decl(\n                     P(Spanned {\n                         node: hir::DeclLocal(self.lower_local(l)),\n                         span: s.span,\n@@ -4261,7 +4261,7 @@ impl<'a> LoweringContext<'a> {\n                 return self.lower_item_id(it)\n                     .into_iter()\n                     .map(|item_id| Spanned {\n-                        node: hir::StmtDecl(\n+                        node: hir::StmtKind::Decl(\n                             P(Spanned {\n                                 node: hir::DeclItem(item_id),\n                                 span: s.span,\n@@ -4275,11 +4275,11 @@ impl<'a> LoweringContext<'a> {\n                     .collect();\n             }\n             StmtKind::Expr(ref e) => Spanned {\n-                node: hir::StmtExpr(P(self.lower_expr(e)), self.lower_node_id(s.id).node_id),\n+                node: hir::StmtKind::Expr(P(self.lower_expr(e)), self.lower_node_id(s.id).node_id),\n                 span: s.span,\n             },\n             StmtKind::Semi(ref e) => Spanned {\n-                node: hir::StmtSemi(P(self.lower_expr(e)), self.lower_node_id(s.id).node_id),\n+                node: hir::StmtKind::Semi(P(self.lower_expr(e)), self.lower_node_id(s.id).node_id),\n                 span: s.span,\n             },\n             StmtKind::Mac(..) => panic!(\"Shouldn't exist here\"),\n@@ -4494,7 +4494,7 @@ impl<'a> LoweringContext<'a> {\n             source,\n         });\n         let decl = respan(sp, hir::DeclLocal(local));\n-        respan(sp, hir::StmtDecl(P(decl), self.next_id().node_id))\n+        respan(sp, hir::StmtKind::Decl(P(decl), self.next_id().node_id))\n     }\n \n     fn stmt_let("}, {"sha": "bb1536d9630286561d7f95618a08d816121a4d56", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -19,7 +19,6 @@ pub use self::ForeignItem_::*;\n pub use self::Item_::*;\n pub use self::Mutability::*;\n pub use self::PrimTy::*;\n-pub use self::Stmt_::*;\n pub use self::Ty_::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n@@ -1102,9 +1101,9 @@ impl UnOp {\n }\n \n /// A statement\n-pub type Stmt = Spanned<Stmt_>;\n+pub type Stmt = Spanned<StmtKind>;\n \n-impl fmt::Debug for Stmt_ {\n+impl fmt::Debug for StmtKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // Sadness.\n         let spanned = codemap::dummy_spanned(self.clone());\n@@ -1116,31 +1115,31 @@ impl fmt::Debug for Stmt_ {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub enum Stmt_ {\n+pub enum StmtKind {\n     /// Could be an item or a local (let) binding:\n-    StmtDecl(P<Decl>, NodeId),\n+    Decl(P<Decl>, NodeId),\n \n     /// Expr without trailing semi-colon (must have unit type):\n-    StmtExpr(P<Expr>, NodeId),\n+    Expr(P<Expr>, NodeId),\n \n     /// Expr with trailing semi-colon (may have any type):\n-    StmtSemi(P<Expr>, NodeId),\n+    Semi(P<Expr>, NodeId),\n }\n \n-impl Stmt_ {\n+impl StmtKind {\n     pub fn attrs(&self) -> &[Attribute] {\n         match *self {\n-            StmtDecl(ref d, _) => d.node.attrs(),\n-            StmtExpr(ref e, _) |\n-            StmtSemi(ref e, _) => &e.attrs,\n+            StmtKind::Decl(ref d, _) => d.node.attrs(),\n+            StmtKind::Expr(ref e, _) |\n+            StmtKind::Semi(ref e, _) => &e.attrs,\n         }\n     }\n \n     pub fn id(&self) -> NodeId {\n         match *self {\n-            StmtDecl(_, id) => id,\n-            StmtExpr(_, id) => id,\n-            StmtSemi(_, id) => id,\n+            StmtKind::Decl(_, id) => id,\n+            StmtKind::Expr(_, id) => id,\n+            StmtKind::Semi(_, id) => id,\n         }\n     }\n }"}, {"sha": "5a3a36c6458506d51d7d099a299a96a61d1bdf67", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -1001,14 +1001,14 @@ impl<'a> State<'a> {\n     pub fn print_stmt(&mut self, st: &hir::Stmt) -> io::Result<()> {\n         self.maybe_print_comment(st.span.lo())?;\n         match st.node {\n-            hir::StmtDecl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl, _) => {\n                 self.print_decl(&decl)?;\n             }\n-            hir::StmtExpr(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr, _) => {\n                 self.space_if_not_bol()?;\n                 self.print_expr(&expr)?;\n             }\n-            hir::StmtSemi(ref expr, _) => {\n+            hir::StmtKind::Semi(ref expr, _) => {\n                 self.space_if_not_bol()?;\n                 self.print_expr(&expr)?;\n                 self.s.word(\";\")?;\n@@ -2396,18 +2396,18 @@ fn expr_requires_semi_to_be_stmt(e: &hir::Expr) -> bool {\n /// this statement requires a semicolon after it.\n /// note that in one case (stmt_semi), we've already\n /// seen the semicolon, and thus don't need another.\n-fn stmt_ends_with_semi(stmt: &hir::Stmt_) -> bool {\n+fn stmt_ends_with_semi(stmt: &hir::StmtKind) -> bool {\n     match *stmt {\n-        hir::StmtDecl(ref d, _) => {\n+        hir::StmtKind::Decl(ref d, _) => {\n             match d.node {\n                 hir::DeclLocal(_) => true,\n                 hir::DeclItem(_) => false,\n             }\n         }\n-        hir::StmtExpr(ref e, _) => {\n+        hir::StmtKind::Expr(ref e, _) => {\n             expr_requires_semi_to_be_stmt(&e)\n         }\n-        hir::StmtSemi(..) => {\n+        hir::StmtKind::Semi(..) => {\n             false\n         }\n     }"}, {"sha": "8df6539ecfeb6973e326bf7a3920bd6d263b2775", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -466,7 +466,7 @@ impl_stable_hash_for!(enum hir::UnOp {\n     UnNeg\n });\n \n-impl_stable_hash_for_spanned!(hir::Stmt_);\n+impl_stable_hash_for_spanned!(hir::StmtKind);\n \n impl_stable_hash_for!(struct hir::Local {\n     pat,\n@@ -915,10 +915,10 @@ impl_stable_hash_for!(enum hir::ForeignItem_ {\n     ForeignItemType\n });\n \n-impl_stable_hash_for!(enum hir::Stmt_ {\n-    StmtDecl(decl, id),\n-    StmtExpr(expr, id),\n-    StmtSemi(expr, id)\n+impl_stable_hash_for!(enum hir::StmtKind {\n+    Decl(decl, id),\n+    Expr(expr, id),\n+    Semi(expr, id)\n });\n \n impl_stable_hash_for!(struct hir::Arg {"}, {"sha": "af7dc3afdbb5e501e4549690d080fe5858976328", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -586,7 +586,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n     fn walk_stmt(&mut self, stmt: &hir::Stmt) {\n         match stmt.node {\n-            hir::StmtDecl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n                     hir::DeclLocal(ref local) => {\n                         self.walk_local(&local);\n@@ -599,8 +599,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            hir::StmtExpr(ref expr, _) |\n-            hir::StmtSemi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr, _) |\n+            hir::StmtKind::Semi(ref expr, _) => {\n                 self.consume_expr(&expr);\n             }\n         }"}, {"sha": "cad74a0fb9e955781f3bbd62d69d74cd497e4239", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -860,11 +860,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn propagate_through_stmt(&mut self, stmt: &hir::Stmt, succ: LiveNode)\n                               -> LiveNode {\n         match stmt.node {\n-            hir::StmtDecl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl, _) => {\n                 self.propagate_through_decl(&decl, succ)\n             }\n \n-            hir::StmtExpr(ref expr, _) | hir::StmtSemi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr, _) | hir::StmtKind::Semi(ref expr, _) => {\n                 self.propagate_through_expr(&expr, succ)\n             }\n         }"}, {"sha": "f822c4c08f279884fba6f66ea3faf0a2385234d2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -858,8 +858,8 @@ fn resolve_block<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, blk:\n         // index information.)\n \n         for (i, statement) in blk.stmts.iter().enumerate() {\n-            if let hir::StmtDecl(..) = statement.node {\n-                // Each StmtDecl introduces a subscope for bindings\n+            if let hir::StmtKind::Decl(..) = statement.node {\n+                // Each StmtKind::Decl introduces a subscope for bindings\n                 // introduced by the declaration; this subscope covers\n                 // a suffix of the block . Each subscope in a block\n                 // has the previous subscope in the block as a parent,"}, {"sha": "c71799a172c96dfa0406d74bf6c9685efb0c24ac", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -49,7 +49,7 @@ impl LintPass for UnusedResults {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n         let expr = match s.node {\n-            hir::StmtSemi(ref expr, _) => &**expr,\n+            hir::StmtKind::Semi(ref expr, _) => &**expr,\n             _ => return,\n         };\n \n@@ -166,8 +166,8 @@ impl LintPass for PathStatements {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n     fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n-        if let hir::StmtSemi(ref expr, _) = s.node {\n-            if let hir::ExprPath(_) = expr.node {\n+        if let hir::StmtKind::Semi(ref expr, _) = s.node {\n+            if let hir::ExprKind::Path(_) = expr.node {\n                 cx.span_lint(PATH_STATEMENTS, s.span, \"path statement with no effect\");\n             }\n         }"}, {"sha": "48558ba6db24dc672b80c4a6bd1b318296724570", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -55,8 +55,8 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         let hir_id = cx.tcx.hir.node_to_hir_id(stmt.node.id());\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n         match stmt.node {\n-            hir::StmtExpr(ref expr, _) |\n-            hir::StmtSemi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr, _) |\n+            hir::StmtKind::Semi(ref expr, _) => {\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n                     kind: StmtKind::Expr {\n                         scope: region::Scope::Node(hir_id.local_id),\n@@ -65,7 +65,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     opt_destruction_scope: opt_dxn_ext,\n                 })))\n             }\n-            hir::StmtDecl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n                     hir::DeclItem(..) => {\n                         // ignore for purposes of the MIR"}, {"sha": "138731edfff78f34c3c4c43e7aa5420cd16a6aff", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -261,7 +261,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n     fn check_stmt(&mut self, stmt: &'tcx hir::Stmt) -> Promotability {\n         match stmt.node {\n-            hir::StmtDecl(ref decl, _node_id) => {\n+            hir::StmtKind::Decl(ref decl, _node_id) => {\n                 match &decl.node {\n                     hir::DeclLocal(local) => {\n                         if self.remove_mut_rvalue_borrow(&local.pat) {\n@@ -280,8 +280,8 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n                     hir::DeclItem(_) => Promotable\n                 }\n             }\n-            hir::StmtExpr(ref box_expr, _node_id) |\n-            hir::StmtSemi(ref box_expr, _node_id) => {\n+            hir::StmtKind::Expr(ref box_expr, _node_id) |\n+            hir::StmtKind::Semi(ref box_expr, _node_id) => {\n                 let _ = self.check_expr(box_expr);\n                 NotPromotable\n             }"}, {"sha": "0d93c52a24898c77d473db691de4159177837eac", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114314c92037d0e3e1320e9c7e4147f5b3bc2c63/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "patch": "@@ -4377,15 +4377,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn check_stmt(&self, stmt: &'gcx hir::Stmt) {\n         // Don't do all the complex logic below for DeclItem.\n         match stmt.node {\n-            hir::StmtDecl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n                     hir::DeclLocal(_) => {}\n                     hir::DeclItem(_) => {\n                         return;\n                     }\n                 }\n             }\n-            hir::StmtExpr(..) | hir::StmtSemi(..) => {}\n+            hir::StmtKind::Expr(..) | hir::StmtKind::Semi(..) => {}\n         }\n \n         self.warn_if_unreachable(stmt.node.id(), stmt.span, \"statement\");\n@@ -4397,19 +4397,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.has_errors.set(false);\n \n         match stmt.node {\n-            hir::StmtDecl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n                     hir::DeclLocal(ref l) => {\n                         self.check_decl_local(&l);\n                     }\n                     hir::DeclItem(_) => {/* ignore for now */}\n                 }\n             }\n-            hir::StmtExpr(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr, _) => {\n                 // Check with expected type of ()\n                 self.check_expr_has_type_or_error(&expr, self.tcx.mk_nil());\n             }\n-            hir::StmtSemi(ref expr, _) => {\n+            hir::StmtKind::Semi(ref expr, _) => {\n                 self.check_expr(&expr);\n             }\n         }\n@@ -4733,7 +4733,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             None => return,\n         };\n         let last_expr = match last_stmt.node {\n-            hir::StmtSemi(ref e, _) => e,\n+            hir::StmtKind::Semi(ref e, _) => e,\n             _ => return,\n         };\n         let last_expr_ty = self.node_ty(last_expr.hir_id);"}]}