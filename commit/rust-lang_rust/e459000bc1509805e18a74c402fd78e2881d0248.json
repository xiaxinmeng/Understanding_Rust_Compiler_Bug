{"sha": "e459000bc1509805e18a74c402fd78e2881d0248", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NTkwMDBiYzE1MDk4MDVlMThhNzRjNDAyZmQ3OGUyODgxZDAyNDg=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-08T17:14:03Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-14T23:55:21Z"}, "message": "Make privacy checking, intrinsic checking and liveness checking incremental", "tree": {"sha": "9ed3a152eb2af96ded68198dc0cf0f521e83a7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed3a152eb2af96ded68198dc0cf0f521e83a7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e459000bc1509805e18a74c402fd78e2881d0248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e459000bc1509805e18a74c402fd78e2881d0248", "html_url": "https://github.com/rust-lang/rust/commit/e459000bc1509805e18a74c402fd78e2881d0248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e459000bc1509805e18a74c402fd78e2881d0248/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "html_url": "https://github.com/rust-lang/rust/commit/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a"}], "stats": {"total": 139, "additions": 121, "deletions": 18}, "files": [{"sha": "d1067b70778ee6b3be1336b3ee4ce43246be0808", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -476,6 +476,9 @@ define_dep_nodes!( <'tcx>\n     [] CheckModLoops(DefId),\n     [] CheckModUnstableApiUsage(DefId),\n     [] CheckModItemTypes(DefId),\n+    [] CheckModPrivacy(DefId),\n+    [] CheckModIntrinsics(DefId),\n+    [] CheckModLiveness(DefId),\n     [] CollectModItemTypes(DefId),\n \n     [] Reachability,"}, {"sha": "d9ca37c937bc76ab3b856f3ba8c98c0ae4311f6a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -509,6 +509,21 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n+    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, NodeId)\n+    {\n+        let node_id = self.as_local_node_id(module).unwrap();\n+        self.read(node_id);\n+        match self.find_entry(node_id).unwrap().node {\n+            Node::Item(&Item {\n+                span,\n+                node: ItemKind::Mod(ref m),\n+                ..\n+            }) => (m, span, node_id),\n+            Node::Crate => (&self.forest.krate.module, self.forest.krate.span, node_id),\n+            _ => panic!(\"not a module\")\n+        }\n+    }\n+\n     pub fn visit_item_likes_in_module<V>(&self, module: DefId, visitor: &mut V)\n         where V: ItemLikeVisitor<'hir>\n     {"}, {"sha": "a0f7954eb0c55de9b05b02e96d1aec3014170460", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -2,6 +2,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n+use ty::query::{Providers, queries};\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -10,10 +11,23 @@ use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut visitor = ItemVisitor {\n-        tcx,\n+    for &module in tcx.hir().krate().modules.keys() {\n+        queries::check_mod_intrinsics::ensure(tcx, tcx.hir().local_def_id(module));\n+    }\n+}\n+\n+fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_item_likes_in_module(\n+        module_def_id,\n+        &mut ItemVisitor { tcx }.as_deep_visitor()\n+    );\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        check_mod_intrinsics,\n+        ..*providers\n     };\n-    tcx.hir().krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n struct ItemVisitor<'a, 'tcx: 'a> {"}, {"sha": "0a1802a4e12c93bb5704d6d65e8ea6c72f62bd07", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -100,6 +100,7 @@ use self::VarKind::*;\n use hir::def::*;\n use hir::Node;\n use ty::{self, TyCtxt};\n+use ty::query::{Providers, queries};\n use lint;\n use errors::Applicability;\n use util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n@@ -114,8 +115,9 @@ use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n-use hir::{Expr, HirId};\n use hir;\n+use hir::{Expr, HirId};\n+use hir::def_id::DefId;\n use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n \n /// For use with `propagate_through_loop`.\n@@ -179,11 +181,24 @@ impl<'a, 'tcx> Visitor<'tcx> for IrMaps<'a, 'tcx> {\n     fn visit_arm(&mut self, a: &'tcx hir::Arm) { visit_arm(self, a); }\n }\n \n+fn check_mod_liveness<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx).as_deep_visitor());\n+}\n+\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.hir().krate().visit_all_item_likes(&mut IrMaps::new(tcx).as_deep_visitor());\n+    for &module in tcx.hir().krate().modules.keys() {\n+        queries::check_mod_liveness::ensure(tcx, tcx.hir().local_def_id(module));\n+    }\n     tcx.sess.abort_if_errors();\n }\n \n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        check_mod_liveness,\n+        ..*providers\n+    };\n+}\n+\n impl fmt::Debug for LiveNode {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"ln({})\", self.get())"}, {"sha": "c20846aebb87721f4cc7bfd5ee6fffe71446cee1", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -109,6 +109,33 @@ impl<'tcx> QueryDescription<'tcx> for queries::check_mod_item_types<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_privacy<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking privacy in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_intrinsics<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking intrinsics in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_liveness<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking liveness of variables in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::collect_mod_item_types<'tcx> {\n     fn describe(\n         tcx: TyCtxt<'_, '_, '_>,"}, {"sha": "88c20547a21082288689d727becec2542563c959", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -264,6 +264,12 @@ define_queries! { <'tcx>\n \n         [] fn check_mod_item_types: CheckModItemTypes(DefId) -> (),\n \n+        [] fn check_mod_privacy: CheckModPrivacy(DefId) -> (),\n+\n+        [] fn check_mod_intrinsics: CheckModIntrinsics(DefId) -> (),\n+\n+        [] fn check_mod_liveness: CheckModLiveness(DefId) -> (),\n+\n         [] fn collect_mod_item_types: CollectModItemTypes(DefId) -> (),\n \n         /// Caches CoerceUnsized kinds for impls on custom types."}, {"sha": "5fb6d33ded91441283c81eff49c64a3611800ef1", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -1280,6 +1280,9 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckModLoops => { force!(check_mod_loops, def_id!()); }\n         DepKind::CheckModUnstableApiUsage => { force!(check_mod_unstable_api_usage, def_id!()); }\n         DepKind::CheckModItemTypes => { force!(check_mod_item_types, def_id!()); }\n+        DepKind::CheckModPrivacy => { force!(check_mod_privacy, def_id!()); }\n+        DepKind::CheckModIntrinsics => { force!(check_mod_intrinsics, def_id!()); }\n+        DepKind::CheckModLiveness => { force!(check_mod_liveness, def_id!()); }\n         DepKind::CollectModItemTypes => { force!(collect_mod_item_types, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }"}, {"sha": "95c0facb6fd425a2e873b0e23206eafcede49938", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -1168,6 +1168,8 @@ pub fn default_provide(providers: &mut ty::query::Providers) {\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n+    middle::intrinsicck::provide(providers);\n+    middle::liveness::provide(providers);\n     reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);"}, {"sha": "10ac1caa692cafb044bfbd73b697284e473e598c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e459000bc1509805e18a74c402fd78e2881d0248/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e459000bc1509805e18a74c402fd78e2881d0248", "patch": "@@ -22,12 +22,12 @@ use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt, Ty, TraitRef, TypeFoldable, GenericParamDefKind};\n use rustc::ty::fold::TypeVisitor;\n-use rustc::ty::query::Providers;\n+use rustc::ty::query::{Providers, queries};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeSet;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-use syntax::ast::{self, CRATE_NODE_ID, Ident};\n+use syntax::ast::{self, DUMMY_NODE_ID, Ident};\n use syntax::attr;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n@@ -782,6 +782,10 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n+    fn visit_mod(&mut self, _m: &'tcx hir::Mod, _s: Span, _n: ast::NodeId) {\n+        // Don't visit modules inside\n+    }\n+\n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let orig_tables = mem::replace(&mut self.tables, self.tcx.body_tables(body));\n         let body = self.tcx.hir().body(body);\n@@ -917,6 +921,10 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n+    fn visit_mod(&mut self, _m: &'tcx hir::Mod, _s: Span, _n: ast::NodeId) {\n+        // Don't visit modules inside\n+    }\n+\n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let orig_tables = mem::replace(&mut self.tables, self.tcx.body_tables(body));\n         let orig_in_body = mem::replace(&mut self.in_body, true);\n@@ -1659,6 +1667,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         privacy_access_levels,\n+        check_mod_privacy,\n         ..*providers\n     };\n }\n@@ -1667,34 +1676,43 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Lrc<AccessLevels> {\n     tcx.privacy_access_levels(LOCAL_CRATE)\n }\n \n-fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   krate: CrateNum)\n-                                   -> Lrc<AccessLevels> {\n-    assert_eq!(krate, LOCAL_CRATE);\n-\n-    let krate = tcx.hir().krate();\n+fn check_mod_privacy<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n     // Check privacy of names not checked in previous compilation stages.\n     let mut visitor = NamePrivacyVisitor {\n         tcx,\n         tables: &empty_tables,\n-        current_item: CRATE_NODE_ID,\n+        current_item: DUMMY_NODE_ID,\n         empty_tables: &empty_tables,\n     };\n-    intravisit::walk_crate(&mut visitor, krate);\n+    let (module, span, node_id) = tcx.hir().get_module(module_def_id);\n+    intravisit::walk_mod(&mut visitor, module, node_id);\n \n     // Check privacy of explicitly written types and traits as well as\n     // inferred types of expressions and patterns.\n     let mut visitor = TypePrivacyVisitor {\n         tcx,\n         tables: &empty_tables,\n-        current_item: DefId::local(CRATE_DEF_INDEX),\n+        current_item: module_def_id,\n         in_body: false,\n-        span: krate.span,\n+        span,\n         empty_tables: &empty_tables,\n     };\n-    intravisit::walk_crate(&mut visitor, krate);\n+    intravisit::walk_mod(&mut visitor, module, node_id);\n+}\n+\n+fn privacy_access_levels<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    krate: CrateNum,\n+) -> Lrc<AccessLevels> {\n+    assert_eq!(krate, LOCAL_CRATE);\n+\n+    let krate = tcx.hir().krate();\n+\n+    for &module in tcx.hir().krate().modules.keys() {\n+        queries::check_mod_privacy::ensure(tcx, tcx.hir().local_def_id(module));\n+    }\n \n     // Build up a set of all exported items in the AST. This is a set of all\n     // items which are reachable from external crates based on visibility."}]}