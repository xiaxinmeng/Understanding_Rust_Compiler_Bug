{"sha": "1f34e11d1b7708700e696e9950ac503be594c264", "node_id": "C_kwDOAAsO6NoAKDFmMzRlMTFkMWI3NzA4NzAwZTY5NmU5OTUwYWM1MDNiZTU5NGMyNjQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T19:27:28Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T19:36:30Z"}, "message": "Lift `T: Sized` bounds from some `strict_provenance` pointer methods", "tree": {"sha": "38fa67f1c5a68f2bec2a7a7a964a084e92b39ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38fa67f1c5a68f2bec2a7a7a964a084e92b39ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f34e11d1b7708700e696e9950ac503be594c264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f34e11d1b7708700e696e9950ac503be594c264", "html_url": "https://github.com/rust-lang/rust/commit/1f34e11d1b7708700e696e9950ac503be594c264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f34e11d1b7708700e696e9950ac503be594c264/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "html_url": "https://github.com/rust-lang/rust/commit/44fcfb0a9606fa08ea293a71f2e6d470227ef9df"}], "stats": {"total": 48, "additions": 12, "deletions": 36}, "files": [{"sha": "49831dbe44bc29cb890b0560e2d01cdc5c0db7d2", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f34e11d1b7708700e696e9950ac503be594c264/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f34e11d1b7708700e696e9950ac503be594c264/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=1f34e11d1b7708700e696e9950ac503be594c264", "patch": "@@ -178,14 +178,11 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         // SAFETY: Pointer-to-integer transmutes are valid (if you are okay with losing the\n         // provenance).\n-        unsafe { mem::transmute(self) }\n+        unsafe { mem::transmute(self.cast::<()>()) }\n     }\n \n     /// Gets the \"address\" portion of the pointer, and 'exposes' the \"provenance\" part for future\n@@ -215,12 +212,9 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn expose_addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn expose_addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-        self as usize\n+        self.cast::<()>() as usize\n     }\n \n     /// Creates a new pointer with the given address.\n@@ -238,10 +232,7 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn with_addr(self, addr: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn with_addr(self, addr: usize) -> Self {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         //\n         // In the mean-time, this operation is defined to be \"as if\" it was\n@@ -264,10 +255,7 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self {\n         self.with_addr(f(self.addr()))\n     }\n "}, {"sha": "578e27fec7a06c874afeac643956e965c3d19809", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f34e11d1b7708700e696e9950ac503be594c264/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f34e11d1b7708700e696e9950ac503be594c264/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=1f34e11d1b7708700e696e9950ac503be594c264", "patch": "@@ -188,14 +188,11 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         // SAFETY: Pointer-to-integer transmutes are valid (if you are okay with losing the\n         // provenance).\n-        unsafe { mem::transmute(self) }\n+        unsafe { mem::transmute(self.cast::<()>()) }\n     }\n \n     /// Gets the \"address\" portion of the pointer, and 'exposes' the \"provenance\" part for future\n@@ -225,12 +222,9 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn expose_addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn expose_addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-        self as usize\n+        self.cast::<()>() as usize\n     }\n \n     /// Creates a new pointer with the given address.\n@@ -248,10 +242,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn with_addr(self, addr: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn with_addr(self, addr: usize) -> Self {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         //\n         // In the mean-time, this operation is defined to be \"as if\" it was\n@@ -274,10 +265,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self {\n         self.with_addr(f(self.addr()))\n     }\n "}]}