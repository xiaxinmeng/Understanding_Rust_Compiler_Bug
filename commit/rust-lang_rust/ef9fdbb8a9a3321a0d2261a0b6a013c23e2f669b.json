{"sha": "ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOWZkYmI4YTlhMzMyMWEwZDIyNjFhMGI2YTAxM2MyM2UyZjY2OWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-27T15:13:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-27T15:13:55Z"}, "message": "Implementation + move one lint", "tree": {"sha": "a46e1aeea242307b02cf5ca64e520ff3e8c2680c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a46e1aeea242307b02cf5ca64e520ff3e8c2680c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlq6X7MsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQj\n8w//bM0K7R//1r9PqMA4va9zgsm9AVwtUNUff2kBEGk/te0cq7DKBLVQdJ3AoPT5\nYFfC66uOc4UecoutsaK9ghjrC1ORZyRJMMioVirQFr48EjKp+QYpuTVQ5m9IFRQr\nwNm7uANlhkJrYx1uJWQB/vWKMBKI8kHE8ZravhPsw2JSTzicUs3+wAatdKpDGEvD\nw7vlbH84dtIRcwjyoJPWzVeKBgTaM+LWjTHpAaCGqqTGzqyDpG+qA39Ldv9/x8Xy\njj1dZ/CF3LOqO1zbOgNbarozC+Yig/XH6fQe5Z676T+N7KCXJiuozWyLWsVI5duE\nCvgyFlOlObfzK92K2GJkc+ho19MivlCjl0vJdOqSZeRrYLAJzFvNTRkH8knEaQ1V\nliCKlYdiU0K6YKLr2wGbQi1IYMepnpxm972IU74l1H+H7jyKxEWHaFq/NZuzpQpY\nE2a/ywU1ZyqDLTtMw5usYfOllP85It+8rGrHyALA1MN3uxQQgZKiPnqqVEAdh8gO\nfVL2Dapq9FqFWUsmfB2kyqltpfFse4zvTLI00GIUnAWkPkPP889fuQcJUeL3J7i7\nOn8NowctuC/tNgD0mmr9OIOnrFJT2wIYanpAUfv2RWSFIvWeS3EHhuRwRimGSzvB\nRP8PfFQj6rmNDN+XHSztNDCZGAt/J8SOfHy4rLhrPfuxG28=\n=A9Oc\n-----END PGP SIGNATURE-----", "payload": "tree a46e1aeea242307b02cf5ca64e520ff3e8c2680c\nparent 9b10c4be8cb5850fbb52b55f876e9095ca61e088\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522163635 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522163635 +0200\n\nImplementation + move one lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b", "html_url": "https://github.com/rust-lang/rust/commit/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b10c4be8cb5850fbb52b55f876e9095ca61e088", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b10c4be8cb5850fbb52b55f876e9095ca61e088", "html_url": "https://github.com/rust-lang/rust/commit/9b10c4be8cb5850fbb52b55f876e9095ca61e088"}], "stats": {"total": 93, "additions": 84, "deletions": 9}, "files": [{"sha": "d15b48ce2d19e98e5af71cfc4c02c57b80461034", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b", "patch": "@@ -26,9 +26,9 @@ use utils::span_lint;\n /// ```rust\n /// let x = 3.14;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub APPROX_CONSTANT,\n-    Warn,\n+    correctness,\n     \"the approximate of a known float constant (in `std::fXX::consts`)\"\n }\n "}, {"sha": "6d6b1fe0b8cd510afc9ef09ced3b928684b24a90", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b", "patch": "@@ -66,6 +66,21 @@ macro_rules! declare_restriction_lint {\n     };\n }\n \n+macro_rules! declare_clippy_lint {\n+    { pub $name:tt, style, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n+    { pub $name:tt, correctness, $description:tt } => {\n+        declare_lint! { pub $name, Deny, $description }\n+    };\n+    { pub $name:tt, complexity, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n+    { pub $name:tt, perf, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n+}\n+\n pub mod consts;\n #[macro_use]\n pub mod utils;\n@@ -442,7 +457,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     ]);\n \n     reg.register_lint_group(\"clippy\", vec![\n-        approx_const::APPROX_CONSTANT,\n         array_indexing::OUT_OF_BOUNDS_INDEXING,\n         assign_ops::ASSIGN_OP_PATTERN,\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n@@ -641,6 +655,19 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         vec::USELESS_VEC,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n+\n+    reg.register_lint_group(\"clippy_style\", vec![\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_complexity\", vec![\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_correctness\", vec![\n+        approx_const::APPROX_CONSTANT,\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_perf\", vec![\n+    ]);\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "0f9c34794396e26aac06f2deb4bc0ee5bb55ce9e", "filename": "util/update_lints.py", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=ef9fdbb8a9a3321a0d2261a0b6a013c23e2f669b", "patch": "@@ -27,12 +27,19 @@\n     \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n ''', re.VERBOSE | re.DOTALL)\n \n+declare_clippy_lint_re = re.compile(r'''\n+    declare_clippy_lint! \\s* [{(] \\s*\n+    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n+    (?P<cat>[a-z_]+) \\s*,\\s*\n+    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n+''', re.VERBOSE | re.DOTALL)\n+\n nl_escape_re = re.compile(r'\\\\\\n\\s*')\n \n docs_link = 'https://rust-lang-nursery.github.io/rust-clippy/master/index.html'\n \n \n-def collect(lints, deprecated_lints, restriction_lints, fn):\n+def collect(lints, deprecated_lints, restriction_lints, clippy_lints, fn):\n     \"\"\"Collect all lints from a file.\n \n     Adds entries to the lints list as `(module, name, level, desc)`.\n@@ -61,6 +68,15 @@ def collect(lints, deprecated_lints, restriction_lints, fn):\n                                   match.group('name').lower(),\n                                   \"allow\",\n                                   desc.replace('\\\\\"', '\"')))\n+    \n+    for match in declare_clippy_lint_re.finditer(code):\n+        # remove \\-newline escapes from description string\n+        desc = nl_escape_re.sub('', match.group('desc'))\n+        cat = match.group('cat')\n+        clippy_lints[cat].append((os.path.splitext(os.path.basename(fn))[0],\n+                                  match.group('name').lower(),\n+                                  \"allow\",\n+                                  desc.replace('\\\\\"', '\"')))\n \n \n def gen_group(lints, levels=None):\n@@ -130,6 +146,12 @@ def main(print_only=False, check=False):\n     lints = []\n     deprecated_lints = []\n     restriction_lints = []\n+    clippy_lints = {\n+        \"correctness\": [],\n+        \"style\": [],\n+        \"complexity\": [],\n+        \"perf\": [],\n+    }\n \n     # check directory\n     if not os.path.isfile('clippy_lints/src/lib.rs'):\n@@ -139,7 +161,7 @@ def main(print_only=False, check=False):\n     # collect all lints from source files\n     for fn in os.listdir('clippy_lints/src'):\n         if fn.endswith('.rs'):\n-            collect(lints, deprecated_lints, restriction_lints,\n+            collect(lints, deprecated_lints, restriction_lints, clippy_lints,\n                     os.path.join('clippy_lints', 'src', fn))\n \n     # determine version\n@@ -152,16 +174,18 @@ def main(print_only=False, check=False):\n             print('Error: version not found in Cargo.toml!')\n             return\n \n+    all_lints = lints + restriction_lints + clippy_lints['perf'] + clippy_lints['correctness'] + clippy_lints['style'] + clippy_lints['complexity']\n+\n     if print_only:\n-        sys.stdout.writelines(gen_table(lints + restriction_lints))\n+        sys.stdout.writelines(gen_table(all_lints))\n         return\n \n     # update the lint counter in README.md\n     changed = replace_region(\n         'README.md',\n         r'^\\[There are \\d+ lints included in this crate\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)$', \"\",\n         lambda: ['[There are %d lints included in this crate](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\\n' %\n-                 (len(lints) + len(restriction_lints))],\n+                 (len(all_lints))],\n         write_back=not check)\n \n     # update the links in the CHANGELOG\n@@ -170,7 +194,7 @@ def main(print_only=False, check=False):\n         \"<!-- begin autogenerated links to wiki -->\",\n         \"<!-- end autogenerated links to wiki -->\",\n         lambda: [\"[`{0}`]: {1}#{0}\\n\".format(l[1], docs_link) for l in\n-                 sorted(lints + restriction_lints + deprecated_lints,\n+                 sorted(all_lints + deprecated_lints,\n                         key=lambda l: l[1])],\n         replace_start=False, write_back=not check)\n \n@@ -190,7 +214,7 @@ def main(print_only=False, check=False):\n     # update the `pub mod` list\n     changed |= replace_region(\n         'clippy_lints/src/lib.rs', r'begin lints modules', r'end lints modules',\n-        lambda: gen_mods(lints + restriction_lints),\n+        lambda: gen_mods(all_lints),\n         replace_start=False, write_back=not check)\n \n     # same for \"clippy\" lint collection\n@@ -199,6 +223,30 @@ def main(print_only=False, check=False):\n         lambda: gen_group(lints, levels=('warn', 'deny')),\n         replace_start=False, write_back=not check)\n \n+    # same for \"clippy_style\" lint collection\n+    changed |= replace_region(\n+        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy_style\"', r'\\]\\);',\n+        lambda: gen_group(clippy_lints['style']),\n+        replace_start=False, write_back=not check)\n+\n+    # same for \"clippy_correctness\" lint collection\n+    changed |= replace_region(\n+        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy_correctness\"', r'\\]\\);',\n+        lambda: gen_group(clippy_lints['correctness']),\n+        replace_start=False, write_back=not check)\n+\n+    # same for \"clippy_complexity\" lint collection\n+    changed |= replace_region(\n+        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy_complexity\"', r'\\]\\);',\n+        lambda: gen_group(clippy_lints['complexity']),\n+        replace_start=False, write_back=not check)\n+\n+    # same for \"clippy_perf\" lint collection\n+    changed |= replace_region(\n+        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy_perf\"', r'\\]\\);',\n+        lambda: gen_group(clippy_lints['perf']),\n+        replace_start=False, write_back=not check)\n+\n     # same for \"deprecated\" lint collection\n     changed |= replace_region(\n         'clippy_lints/src/lib.rs', r'let mut store', r'end deprecated lints',"}]}