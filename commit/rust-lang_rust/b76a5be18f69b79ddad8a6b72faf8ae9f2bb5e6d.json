{"sha": "b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NmE1YmUxOGY2OWI3OWRkYWQ4YTZiNzJmYWY4YWU5ZjJiYjVlNmQ=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-04T08:49:18Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-04T18:02:17Z"}, "message": "Clean up comments in panicking infra.", "tree": {"sha": "cb7179aadc7cd0d6bfb71fbbaae393e13ce627fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb7179aadc7cd0d6bfb71fbbaae393e13ce627fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d", "html_url": "https://github.com/rust-lang/rust/commit/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612c4c6c900a6e2d39df1019a794a8aa3ddf6e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/612c4c6c900a6e2d39df1019a794a8aa3ddf6e17", "html_url": "https://github.com/rust-lang/rust/commit/612c4c6c900a6e2d39df1019a794a8aa3ddf6e17"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "599ccc809be1fc494379e5a059b7c555c2dac416", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d", "patch": "@@ -354,6 +354,9 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n \n     unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n         fn take_box(&mut self) -> *mut (dyn Any + Send) {\n+            // We do two allocations here, unfortunately. But (a) they're required with the current\n+            // scheme, and (b) we don't handle panic + OOM properly anyway (see comment in\n+            // begin_panic below).\n             let contents = mem::take(self.fill());\n             Box::into_raw(Box::new(contents))\n         }\n@@ -363,11 +366,6 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n         }\n     }\n \n-    // We do two allocations here, unfortunately. But (a) they're\n-    // required with the current scheme, and (b) we don't handle\n-    // panic + OOM properly anyway (see comment in begin_panic\n-    // below).\n-\n     let loc = info.location().unwrap(); // The current implementation always returns Some\n     let msg = info.message().unwrap(); // The current implementation always returns Some\n     rust_panic_with_hook(&mut PanicPayload::new(msg), info.message(), loc);\n@@ -389,12 +387,6 @@ pub fn begin_panic<M: Any + Send>(msg: M, #[cfg(bootstrap)] _: &(&str, u32, u32)\n         unsafe { intrinsics::abort() }\n     }\n \n-    // Note that this should be the only allocation performed in this code path.\n-    // Currently this means that panic!() on OOM will invoke this code path,\n-    // but then again we're not really ready for panic on OOM anyway. If\n-    // we do start doing this, then we should propagate this allocation to\n-    // be performed in the parent of this thread instead of the thread that's\n-    // panicking.\n     rust_panic_with_hook(&mut PanicPayload::new(msg), None, Location::caller());\n \n     struct PanicPayload<A> {\n@@ -409,6 +401,11 @@ pub fn begin_panic<M: Any + Send>(msg: M, #[cfg(bootstrap)] _: &(&str, u32, u32)\n \n     unsafe impl<A: Send + 'static> BoxMeUp for PanicPayload<A> {\n         fn take_box(&mut self) -> *mut (dyn Any + Send) {\n+            // Note that this should be the only allocation performed in this code path. Currently\n+            // this means that panic!() on OOM will invoke this code path, but then again we're not\n+            // really ready for panic on OOM anyway. If we do start doing this, then we should\n+            // propagate this allocation to be performed in the parent of this thread instead of the\n+            // thread that's panicking.\n             let data = match self.inner.take() {\n                 Some(a) => Box::new(a) as Box<dyn Any + Send>,\n                 None => process::abort(),"}]}