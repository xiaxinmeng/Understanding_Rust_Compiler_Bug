{"sha": "bb62180714925bca4b7f28a20984ec7624e0aa96", "node_id": "C_kwDOAAsO6NoAKGJiNjIxODA3MTQ5MjViY2E0YjdmMjhhMjA5ODRlYzc2MjRlMGFhOTY", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-06T10:57:37Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-10T23:11:56Z"}, "message": "add more tests and some doc", "tree": {"sha": "d4575234f37845bf4f871171ff34f0445d0046e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4575234f37845bf4f871171ff34f0445d0046e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb62180714925bca4b7f28a20984ec7624e0aa96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb62180714925bca4b7f28a20984ec7624e0aa96", "html_url": "https://github.com/rust-lang/rust/commit/bb62180714925bca4b7f28a20984ec7624e0aa96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb62180714925bca4b7f28a20984ec7624e0aa96/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872536821c25a6bb4293cd99d338cdf1d142fe21", "url": "https://api.github.com/repos/rust-lang/rust/commits/872536821c25a6bb4293cd99d338cdf1d142fe21", "html_url": "https://github.com/rust-lang/rust/commit/872536821c25a6bb4293cd99d338cdf1d142fe21"}], "stats": {"total": 84, "additions": 69, "deletions": 15}, "files": [{"sha": "93fd80f148e93cf0078594e2f4462e5a6cef8ccd", "filename": "crates/ide-assists/src/handlers/add_label_to_loop.rs", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/bb62180714925bca4b7f28a20984ec7624e0aa96/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb62180714925bca4b7f28a20984ec7624e0aa96/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs?ref=bb62180714925bca4b7f28a20984ec7624e0aa96", "patch": "@@ -1,24 +1,23 @@\n use ide_db::syntax_helpers::node_ext::for_each_break_and_continue_expr;\n use syntax::ast::{self, AstNode, HasLoopBody};\n-use syntax::T;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: add_lifetime_to_type\n+// Assist: add_label_to_loop\n //\n-// Adds a new lifetime to a struct, enum or union.\n+// Adds a label to a loop.\n //\n // ```\n-// struct Point {\n-//     x: &u32,\n-//     y: u32,\n+// loop$0 {\n+//     break;\n+//     continue;\n // }\n // ```\n // ->\n // ```\n-// struct Point<'a> {\n-//     x: &'a u32,\n-//     y: u32,\n+// 'loop: loop {\n+//     break 'loop;\n+//     continue 'loop;\n // }\n // ```\n pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -31,7 +30,6 @@ pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Optio\n             related_exprs.push(expr)\n         }\n     });\n-    dbg!(loop_expr.syntax().text_range());\n \n     acc.add(\n         AssistId(\"add_label_to_loop\", AssistKind::Generate),\n@@ -44,25 +42,24 @@ pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                         if let Some(break_token) = break_expr.break_token() {\n                             builder.insert(break_token.text_range().end(), \" 'loop\")\n                         }\n-                    },\n+                    }\n                     ast::Expr::ContinueExpr(continue_expr) => {\n                         if let Some(continue_token) = continue_expr.continue_token() {\n                             builder.insert(continue_token.text_range().end(), \" 'loop\")\n                         }\n-                    },\n+                    }\n                     ast::Expr::LoopExpr(loop_expr) => {\n                         if let Some(loop_token) = loop_expr.loop_token() {\n                             builder.insert(loop_token.text_range().start(), \"'loop: \")\n                         }\n-                    },\n-                    _ => todo!()\n+                    }\n+                    _ => todo!(),\n                 }\n             }\n         },\n     )\n }\n \n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::check_assist;\n@@ -90,4 +87,61 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn add_label_to_outer_loop() {\n+        check_assist(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    loop$0 { \n+        break; \n+        continue; \n+        loop {\n+            break;\n+            continue;\n+        }\n+    }\n+}\"#,\n+            r#\"\n+fn main() {\n+    'loop: loop { \n+        break 'loop; \n+        continue 'loop; \n+        loop {\n+            break;\n+            continue;\n+        }\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_label_to_inner_loop() {\n+        check_assist(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    loop { \n+        break; \n+        continue; \n+        loop$0 {\n+            break;\n+            continue;\n+        }\n+    }\n+}\"#,\n+            r#\"\n+fn main() {\n+    loop { \n+        break; \n+        continue; \n+        'loop: loop {\n+            break 'loop;\n+            continue 'loop;\n+        }\n+    }\n+}\"#,\n+        );\n+    }\n }"}]}