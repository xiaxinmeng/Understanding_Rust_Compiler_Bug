{"sha": "207f5208273667c5c72397fdf99390e594a3cdf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwN2Y1MjA4MjczNjY3YzVjNzIzOTdmZGY5OTM5MGU1OTRhM2NkZjE=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-11-07T14:04:14Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-06T05:03:27Z"}, "message": "Pass a location to #[track_caller] functions in codegen_call_terminator.", "tree": {"sha": "70f5186321083ad30ca73cb375f0878b5808ccca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f5186321083ad30ca73cb375f0878b5808ccca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207f5208273667c5c72397fdf99390e594a3cdf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207f5208273667c5c72397fdf99390e594a3cdf1", "html_url": "https://github.com/rust-lang/rust/commit/207f5208273667c5c72397fdf99390e594a3cdf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207f5208273667c5c72397fdf99390e594a3cdf1/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6bb398553200c0bc6ddba488eec43d5a497aef", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6bb398553200c0bc6ddba488eec43d5a497aef", "html_url": "https://github.com/rust-lang/rust/commit/fa6bb398553200c0bc6ddba488eec43d5a497aef"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "b33cca2ee8daa2f1518a7772fd9635801c9a5604", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/207f5208273667c5c72397fdf99390e594a3cdf1/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207f5208273667c5c72397fdf99390e594a3cdf1/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=207f5208273667c5c72397fdf99390e594a3cdf1", "patch": "@@ -770,6 +770,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 &fn_abi.args[first_args.len()..])\n         }\n \n+        let needs_location =\n+            instance.map(|i| i.def.requires_caller_location(self.cx.tcx())).unwrap_or_default();\n+        if needs_location {\n+            assert_eq!(\n+                fn_abi.args.len(), args.len() + 1,\n+                \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n+            );\n+            let location = self.get_caller_location(&mut bx, span);\n+            let last_arg = &fn_abi.args.last().unwrap();\n+            self.codegen_argument(&mut bx, location, &mut llargs, last_arg);\n+        }\n+\n         let fn_ptr = match (llfn, instance) {\n             (Some(llfn), _) => llfn,\n             (None, Some(instance)) => bx.get_fn_addr(instance),"}, {"sha": "6be6e13cc1d3765dadf2486267e52dee6a48f8f2", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/207f5208273667c5c72397fdf99390e594a3cdf1/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207f5208273667c5c72397fdf99390e594a3cdf1/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=207f5208273667c5c72397fdf99390e594a3cdf1", "patch": "@@ -182,7 +182,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     // Allocate variable and temp allocas\n     fx.locals = {\n-        let args = arg_local_refs(&mut bx, &fx, &memory_locals);\n+        let args = arg_local_refs(&mut bx, &mut fx, &memory_locals);\n \n         let mut allocate_local = |local| {\n             let decl = &mir_body.local_decls[local];\n@@ -324,14 +324,14 @@ fn create_funclets<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n /// indirect.\n fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n-    fx: &FunctionCx<'a, 'tcx, Bx>,\n+    fx: &mut FunctionCx<'a, 'tcx, Bx>,\n     memory_locals: &BitSet<mir::Local>,\n ) -> Vec<LocalRef<'tcx, Bx::Value>> {\n     let mir = fx.mir;\n     let mut idx = 0;\n     let mut llarg_idx = fx.fn_abi.ret.is_indirect() as usize;\n \n-    mir.args_iter().enumerate().map(|(arg_index, local)| {\n+    let args = mir.args_iter().enumerate().map(|(arg_index, local)| {\n         let arg_decl = &mir.local_decls[local];\n \n         if Some(local) == mir.spread_arg {\n@@ -427,7 +427,20 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             bx.store_fn_arg(arg, &mut llarg_idx, tmp);\n             LocalRef::Place(tmp)\n         }\n-    }).collect()\n+    }).collect::<Vec<_>>();\n+\n+    if fx.instance.def.requires_caller_location(bx.tcx()) {\n+        assert_eq!(\n+            fx.fn_abi.args.len(), args.len() + 1,\n+            \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n+        );\n+        let arg = &fx.fn_abi.args.last().unwrap();\n+        let place = PlaceRef::alloca(bx, arg.layout);\n+        bx.store_fn_arg(arg, &mut llarg_idx, place);\n+        fx.caller_location = Some(place);\n+    }\n+\n+    args\n }\n \n mod analyze;"}]}