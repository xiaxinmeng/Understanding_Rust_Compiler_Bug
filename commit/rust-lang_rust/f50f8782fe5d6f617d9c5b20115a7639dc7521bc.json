{"sha": "f50f8782fe5d6f617d9c5b20115a7639dc7521bc", "node_id": "C_kwDOAAsO6NoAKGY1MGY4NzgyZmU1ZDZmNjE3ZDljNWIyMDExNWE3NjM5ZGM3NTIxYmM", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-08-18T21:51:10Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-08-18T22:04:28Z"}, "message": "Avoid zeroing a 1kb stack buffer on every call to `std::sys::windows::fill_utf16_buf`", "tree": {"sha": "d9a9c57350deed39f8a506cafa21e20a6bd2421c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9a9c57350deed39f8a506cafa21e20a6bd2421c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f50f8782fe5d6f617d9c5b20115a7639dc7521bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCYv63bwAKCRDXcz0dendf\nCkZIAP4ggRWFqkDm1qGpbNYf6BijD+bv8xFCNTj5x6FBdqxgvAEAk7pBn7P5US43\nKzRbIMh2k04mhbnVi+pgOOknWqvVVAE=\n=Xg4y\n-----END PGP SIGNATURE-----", "payload": "tree d9a9c57350deed39f8a506cafa21e20a6bd2421c\nparent 8064a495086c2e63c0ef77e8e82fe3b9b5dc535f\nauthor Thom Chiovoloni <thom@shift.click> 1660859470 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1660860268 -0700\n\nAvoid zeroing a 1kb stack buffer on every call to `std::sys::windows::fill_utf16_buf`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f50f8782fe5d6f617d9c5b20115a7639dc7521bc", "html_url": "https://github.com/rust-lang/rust/commit/f50f8782fe5d6f617d9c5b20115a7639dc7521bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f50f8782fe5d6f617d9c5b20115a7639dc7521bc/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "html_url": "https://github.com/rust-lang/rust/commit/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "3b0c612dd6044714a2489b76593237416c909089", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f50f8782fe5d6f617d9c5b20115a7639dc7521bc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50f8782fe5d6f617d9c5b20115a7639dc7521bc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=f50f8782fe5d6f617d9c5b20115a7639dc7521bc", "patch": "@@ -2,6 +2,7 @@\n \n use crate::ffi::{CStr, OsStr, OsString};\n use crate::io::ErrorKind;\n+use crate::mem::MaybeUninit;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n use crate::path::PathBuf;\n use crate::time::Duration;\n@@ -204,8 +205,8 @@ where\n     // This initial size also works around `GetFullPathNameW` returning\n     // incorrect size hints for some short paths:\n     // https://github.com/dylni/normpath/issues/5\n-    let mut stack_buf = [0u16; 512];\n-    let mut heap_buf = Vec::new();\n+    let mut stack_buf: [MaybeUninit<u16>; 512] = MaybeUninit::uninit_array();\n+    let mut heap_buf: Vec<MaybeUninit<u16>> = Vec::new();\n     unsafe {\n         let mut n = stack_buf.len();\n         loop {\n@@ -214,6 +215,11 @@ where\n             } else {\n                 let extra = n - heap_buf.len();\n                 heap_buf.reserve(extra);\n+                // We used `reserve` and not `reserve_exact`, so in theory we\n+                // may have gotten more than requested. If so, we'd like to use\n+                // it... so long as we won't cause overflow.\n+                n = heap_buf.capacity().min(c::DWORD::MAX as usize);\n+                // Safety: MaybeUninit<u16> does not need initialization\n                 heap_buf.set_len(n);\n                 &mut heap_buf[..]\n             };\n@@ -228,13 +234,13 @@ where\n             // error\" is still 0 then we interpret it as a 0 length buffer and\n             // not an actual error.\n             c::SetLastError(0);\n-            let k = match f1(buf.as_mut_ptr(), n as c::DWORD) {\n+            let k = match f1(buf.as_mut_ptr().cast::<u16>(), n as c::DWORD) {\n                 0 if c::GetLastError() == 0 => 0,\n                 0 => return Err(crate::io::Error::last_os_error()),\n                 n => n,\n             } as usize;\n             if k == n && c::GetLastError() == c::ERROR_INSUFFICIENT_BUFFER {\n-                n *= 2;\n+                n = n.saturating_mul(2).min(c::DWORD::MAX as usize);\n             } else if k > n {\n                 n = k;\n             } else if k == n {\n@@ -244,7 +250,9 @@ where\n                 // Therefore k never equals n.\n                 unreachable!();\n             } else {\n-                return Ok(f2(&buf[..k]));\n+                // Safety: First `k` bytes are initialized.\n+                let slice: &[u16] = MaybeUninit::slice_assume_init_ref(&buf[..k]);\n+                return Ok(f2(slice));\n             }\n         }\n     }"}]}