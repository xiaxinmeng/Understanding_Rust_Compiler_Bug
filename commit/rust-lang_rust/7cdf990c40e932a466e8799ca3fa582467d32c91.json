{"sha": "7cdf990c40e932a466e8799ca3fa582467d32c91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGY5OTBjNDBlOTMyYTQ2NmU4Nzk5Y2EzZmE1ODI0NjdkMzJjOTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-02T19:21:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-02T19:21:06Z"}, "message": "Move use item parsing to a separate file", "tree": {"sha": "576f37f47b9cde6cc4f9ee0890f59cda58d03a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/576f37f47b9cde6cc4f9ee0890f59cda58d03a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cdf990c40e932a466e8799ca3fa582467d32c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdf990c40e932a466e8799ca3fa582467d32c91", "html_url": "https://github.com/rust-lang/rust/commit/7cdf990c40e932a466e8799ca3fa582467d32c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cdf990c40e932a466e8799ca3fa582467d32c91/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1fcead680b0f52036dd48dd1781606e7a7339db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fcead680b0f52036dd48dd1781606e7a7339db", "html_url": "https://github.com/rust-lang/rust/commit/a1fcead680b0f52036dd48dd1781606e7a7339db"}], "stats": {"total": 145, "additions": 73, "deletions": 72}, "files": [{"sha": "1c092779b56462a6edbf1095bc028e7962d76553", "filename": "src/parser/event_parser/grammar/items/mod.rs", "status": "modified", "additions": 2, "deletions": 71, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7cdf990c40e932a466e8799ca3fa582467d32c91/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdf990c40e932a466e8799ca3fa582467d32c91/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs?ref=7cdf990c40e932a466e8799ca3fa582467d32c91", "patch": "@@ -1,6 +1,7 @@\n use super::*;\n \n mod structs;\n+mod use_item;\n \n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n@@ -20,7 +21,7 @@ fn item(p: &mut Parser) {\n     let la = p.nth(1);\n     let item_kind = match p.current() {\n         USE_KW => {\n-            use_item(p);\n+            use_item::use_item(p);\n             USE_ITEM\n         }\n         EXTERN_KW if la == CRATE_KW => {\n@@ -179,76 +180,6 @@ fn extern_block(p: &mut Parser) {\n     p.expect(R_CURLY);\n }\n \n-pub(super) fn is_use_tree_start(kind: SyntaxKind) -> bool {\n-    kind == STAR || kind == L_CURLY\n-}\n-\n-fn use_item(p: &mut Parser) {\n-    assert!(p.at(USE_KW));\n-    p.bump();\n-\n-    use_tree(p);\n-    p.expect(SEMI);\n-\n-    fn use_tree(p: &mut Parser) {\n-        let la = p.nth(1);\n-        let m = p.start();\n-        match (p.current(), la) {\n-            (STAR, _) => p.bump(),\n-            (COLONCOLON, STAR) => {\n-                p.bump();\n-                p.bump();\n-            }\n-            (L_CURLY, _) | (COLONCOLON, L_CURLY) => {\n-                if p.at(COLONCOLON) {\n-                    p.bump();\n-                }\n-                nested_trees(p);\n-            }\n-            _ if paths::is_path_start(p) => {\n-                paths::use_path(p);\n-                match p.current() {\n-                    AS_KW => {\n-                        alias(p);\n-                    }\n-                    COLONCOLON => {\n-                        p.bump();\n-                        match p.current() {\n-                            STAR => {\n-                                p.bump();\n-                            }\n-                            L_CURLY => nested_trees(p),\n-                            _ => {\n-                                // is this unreachable?\n-                                p.error().message(\"expected `{` or `*`\").emit();\n-                            }\n-                        }\n-                    }\n-                    _ => (),\n-                }\n-            }\n-            _ => {\n-                m.abandon(p);\n-                p.err_and_bump(\"expected one of `*`, `::`, `{`, `self`, `super`, `indent`\");\n-                return;\n-            }\n-        }\n-        m.complete(p, USE_TREE);\n-    }\n-\n-    fn nested_trees(p: &mut Parser) {\n-        assert!(p.at(L_CURLY));\n-        p.bump();\n-        while !p.at(EOF) && !p.at(R_CURLY) {\n-            use_tree(p);\n-            if !p.at(R_CURLY) {\n-                p.expect(COMMA);\n-            }\n-        }\n-        p.expect(R_CURLY);\n-    }\n-}\n-\n fn abi(p: &mut Parser) {\n     assert!(p.at(EXTERN_KW));\n     let abi = p.start();"}, {"sha": "38e7b3f8a521e23b90699f1d4f5718a66384cc65", "filename": "src/parser/event_parser/grammar/items/use_item.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7cdf990c40e932a466e8799ca3fa582467d32c91/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdf990c40e932a466e8799ca3fa582467d32c91/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fuse_item.rs?ref=7cdf990c40e932a466e8799ca3fa582467d32c91", "patch": "@@ -0,0 +1,66 @@\n+use super::*;\n+\n+pub(super) fn use_item(p: &mut Parser) {\n+    assert!(p.at(USE_KW));\n+    p.bump();\n+    use_tree(p);\n+    p.expect(SEMI);\n+}\n+\n+fn use_tree(p: &mut Parser) {\n+    let la = p.nth(1);\n+    let m = p.start();\n+    match (p.current(), la) {\n+        (STAR, _) => p.bump(),\n+        (COLONCOLON, STAR) => {\n+            p.bump();\n+            p.bump();\n+        }\n+        (L_CURLY, _) | (COLONCOLON, L_CURLY) => {\n+            if p.at(COLONCOLON) {\n+                p.bump();\n+            }\n+            nested_trees(p);\n+        }\n+        _ if paths::is_path_start(p) => {\n+            paths::use_path(p);\n+            match p.current() {\n+                AS_KW => {\n+                    alias(p);\n+                }\n+                COLONCOLON => {\n+                    p.bump();\n+                    match p.current() {\n+                        STAR => {\n+                            p.bump();\n+                        }\n+                        L_CURLY => nested_trees(p),\n+                        _ => {\n+                            // is this unreachable?\n+                            p.error().message(\"expected `{` or `*`\").emit();\n+                        }\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+        _ => {\n+            m.abandon(p);\n+            p.err_and_bump(\"expected one of `*`, `::`, `{`, `self`, `super`, `indent`\");\n+            return;\n+        }\n+    }\n+    m.complete(p, USE_TREE);\n+}\n+\n+fn nested_trees(p: &mut Parser) {\n+    assert!(p.at(L_CURLY));\n+    p.bump();\n+    while !p.at(EOF) && !p.at(R_CURLY) {\n+        use_tree(p);\n+        if !p.at(R_CURLY) {\n+            p.expect(COMMA);\n+        }\n+    }\n+    p.expect(R_CURLY);\n+}"}, {"sha": "6efac26103789507381095638c7f9e590446848b", "filename": "src/parser/event_parser/grammar/paths.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cdf990c40e932a466e8799ca3fa582467d32c91/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdf990c40e932a466e8799ca3fa582467d32c91/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs?ref=7cdf990c40e932a466e8799ca3fa582467d32c91", "patch": "@@ -20,7 +20,11 @@ fn path(p: &mut Parser) {\n     path_segment(p, true);\n     let mut qual = path.complete(p, PATH);\n     loop {\n-        if p.at(COLONCOLON) && !items::is_use_tree_start(p.nth(1)) {\n+        let use_tree = match p.nth(1) {\n+            STAR | L_CURLY => true,\n+            _ => false,\n+        };\n+        if p.at(COLONCOLON) && !use_tree {\n             let path = qual.precede(p);\n             p.bump();\n             path_segment(p, false);"}]}