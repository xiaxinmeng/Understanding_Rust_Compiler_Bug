{"sha": "d6fdfaa0475833171756d4b4236114c2af066395", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZmRmYWEwNDc1ODMzMTcxNzU2ZDRiNDIzNjExNGMyYWYwNjYzOTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-16T09:48:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-16T09:51:39Z"}, "message": "hand-held formatting for remaining files", "tree": {"sha": "9b43035bef6fdb255d1c3dc6f141dd0ca5ff2c1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b43035bef6fdb255d1c3dc6f141dd0ca5ff2c1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6fdfaa0475833171756d4b4236114c2af066395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fdfaa0475833171756d4b4236114c2af066395", "html_url": "https://github.com/rust-lang/rust/commit/d6fdfaa0475833171756d4b4236114c2af066395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6fdfaa0475833171756d4b4236114c2af066395/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e231bab5ef620073c3c29b9b1f507f4a8f8c448", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e231bab5ef620073c3c29b9b1f507f4a8f8c448", "html_url": "https://github.com/rust-lang/rust/commit/4e231bab5ef620073c3c29b9b1f507f4a8f8c448"}], "stats": {"total": 521, "additions": 201, "deletions": 320}, "files": [{"sha": "f074cfd4911bfbea92e6921ae59c4f4cd3e9dccc", "filename": "src/diagnostics.rs", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d6fdfaa0475833171756d4b4236114c2af066395/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fdfaa0475833171756d4b4236114c2af066395/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=d6fdfaa0475833171756d4b4236114c2af066395", "patch": "@@ -22,16 +22,11 @@ impl fmt::Display for TerminationInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use TerminationInfo::*;\n         match self {\n-            Exit(code) =>\n-                write!(f, \"the evaluated program completed with exit code {}\", code),\n-            Abort(msg) =>\n-                write!(f, \"{}\", msg),\n-            UnsupportedInIsolation(msg) =>\n-                write!(f, \"{}\", msg),\n-            ExperimentalUb { msg, .. } =>\n-                write!(f, \"{}\", msg),\n-            Deadlock =>\n-                write!(f, \"the evaluated program deadlocked\"),\n+            Exit(code) => write!(f, \"the evaluated program completed with exit code {}\", code),\n+            Abort(msg) => write!(f, \"{}\", msg),\n+            UnsupportedInIsolation(msg) => write!(f, \"{}\", msg),\n+            ExperimentalUb { msg, .. } => write!(f, \"{}\", msg),\n+            Deadlock => write!(f, \"the evaluated program deadlocked\"),\n         }\n     }\n }\n@@ -60,14 +55,12 @@ pub fn report_error<'tcx, 'mir>(\n             use TerminationInfo::*;\n             let title = match info {\n                 Exit(code) => return Some(*code),\n-                Abort(_) =>\n-                    \"abnormal termination\",\n-                UnsupportedInIsolation(_) =>\n-                    \"unsupported operation\",\n-                ExperimentalUb { .. } =>\n-                    \"Undefined Behavior\",\n+                Abort(_) => \"abnormal termination\",\n+                UnsupportedInIsolation(_) => \"unsupported operation\",\n+                ExperimentalUb { .. } => \"Undefined Behavior\",\n                 Deadlock => \"deadlock\",\n             };\n+            #[rustfmt::skip]\n             let helps = match info {\n                 UnsupportedInIsolation(_) =>\n                     vec![format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation\")],\n@@ -81,6 +74,7 @@ pub fn report_error<'tcx, 'mir>(\n             (title, helps)\n         }\n         _ => {\n+            #[rustfmt::skip]\n             let title = match e.kind() {\n                 Unsupported(_) =>\n                     \"unsupported operation\",\n@@ -93,6 +87,7 @@ pub fn report_error<'tcx, 'mir>(\n                 _ =>\n                     bug!(\"This error should be impossible in Miri: {}\", e),\n             };\n+            #[rustfmt::skip]\n             let helps = match e.kind() {\n                 Unsupported(UnsupportedOpInfo::NoMirFor(..)) =>\n                     vec![format!(\"make sure to use a Miri sysroot, which you can prepare with `cargo miri setup`\")],\n@@ -120,7 +115,14 @@ pub fn report_error<'tcx, 'mir>(\n \n     e.print_backtrace();\n     let msg = e.to_string();\n-    report_msg(*ecx.tcx, /*error*/true, &format!(\"{}: {}\", title, msg), msg, helps, &ecx.generate_stacktrace());\n+    report_msg(\n+        *ecx.tcx,\n+        /*error*/ true,\n+        &format!(\"{}: {}\", title, msg),\n+        msg,\n+        helps,\n+        &ecx.generate_stacktrace(),\n+    );\n \n     // Debug-dump all locals.\n     for (i, frame) in ecx.active_thread_stack().iter().enumerate() {\n@@ -249,7 +251,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             // Add popped frame back.\n             if stacktrace.len() < info.stack_size {\n-                assert!(stacktrace.len() == info.stack_size-1, \"we should never pop more than one frame at once\");\n+                assert!(\n+                    stacktrace.len() == info.stack_size - 1,\n+                    \"we should never pop more than one frame at once\"\n+                );\n                 let frame_info = FrameInfo {\n                     instance: info.instance.unwrap(),\n                     span: info.span,\n@@ -259,25 +264,30 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             } else if let Some(instance) = info.instance {\n                 // Adjust topmost frame.\n                 stacktrace[0].span = info.span;\n-                assert_eq!(stacktrace[0].instance, instance, \"we should not pop and push a frame in one step\");\n+                assert_eq!(\n+                    stacktrace[0].instance, instance,\n+                    \"we should not pop and push a frame in one step\"\n+                );\n             }\n \n             // Show diagnostics.\n             for e in diagnostics.drain(..) {\n                 use NonHaltingDiagnostic::*;\n                 let msg = match e {\n-                    CreatedPointerTag(tag) =>\n-                        format!(\"created tag {:?}\", tag),\n-                    PoppedPointerTag(item) =>\n-                        format!(\"popped tracked tag for item {:?}\", item),\n-                    CreatedCallId(id) =>\n-                        format!(\"function call with id {}\", id),\n-                    CreatedAlloc(AllocId(id)) =>\n-                        format!(\"created allocation with id {}\", id),\n-                    FreedAlloc(AllocId(id)) =>\n-                        format!(\"freed allocation with id {}\", id),\n+                    CreatedPointerTag(tag) => format!(\"created tag {:?}\", tag),\n+                    PoppedPointerTag(item) => format!(\"popped tracked tag for item {:?}\", item),\n+                    CreatedCallId(id) => format!(\"function call with id {}\", id),\n+                    CreatedAlloc(AllocId(id)) => format!(\"created allocation with id {}\", id),\n+                    FreedAlloc(AllocId(id)) => format!(\"freed allocation with id {}\", id),\n                 };\n-                report_msg(*this.tcx, /*error*/false, \"tracking was triggered\", msg, vec![], &stacktrace);\n+                report_msg(\n+                    *this.tcx,\n+                    /*error*/ false,\n+                    \"tracking was triggered\",\n+                    msg,\n+                    vec![],\n+                    &stacktrace,\n+                );\n             }\n         });\n     }"}, {"sha": "6867871794a8dd6ae53af6bba7e2c1acf3d911d8", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6fdfaa0475833171756d4b4236114c2af066395/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fdfaa0475833171756d4b4236114c2af066395/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=d6fdfaa0475833171756d4b4236114c2af066395", "patch": "@@ -114,7 +114,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// by this function.\n     /// Returns Ok(Some(body)) if processing the foreign item\n     /// is delegated to another function.\n-    #[rustfmt::skip]\n     fn emulate_foreign_item(\n         &mut self,\n         def_id: DefId,\n@@ -149,6 +148,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n                     return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n                 }\n+                #[rustfmt::skip]\n                 | \"exit\"\n                 | \"ExitProcess\"\n                 => {\n@@ -160,7 +160,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n                 \"abort\" => {\n                     check_abi(abi, Abi::C { unwind: false })?;\n-                    throw_machine_stop!(TerminationInfo::Abort(\"the program aborted execution\".to_owned()))\n+                    throw_machine_stop!(TerminationInfo::Abort(\n+                        \"the program aborted execution\".to_owned()\n+                    ))\n                 }\n                 _ => throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name),\n             },\n@@ -175,7 +177,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // We forward this to the underlying *implementation* in the panic runtime crate.\n             // Normally, this will be either `libpanic_unwind` or `libpanic_abort`, but it could\n             // also be a custom user-provided implementation via `#![feature(panic_runtime)]`\n-            \"__rust_start_panic\" | \"__rust_panic_cleanup\" => {\n+            #[rustfmt::skip]\n+            \"__rust_start_panic\" |\n+            \"__rust_panic_cleanup\" => {\n                 check_abi(abi, Abi::C { unwind: false })?;\n                 // This replicates some of the logic in `inject_panic_runtime`.\n                 // FIXME: is there a way to reuse that logic?\n@@ -406,6 +410,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // math functions\n+            #[rustfmt::skip]\n             | \"cbrtf\"\n             | \"coshf\"\n             | \"sinhf\"\n@@ -430,6 +435,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n                 this.write_scalar(Scalar::from_u32(f.to_bits()), dest)?;\n             }\n+            #[rustfmt::skip]\n             | \"_hypotf\"\n             | \"hypotf\"\n             | \"atan2f\"\n@@ -448,6 +454,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n                 this.write_scalar(Scalar::from_u32(n.to_bits()), dest)?;\n             }\n+            #[rustfmt::skip]\n             | \"cbrt\"\n             | \"cosh\"\n             | \"sinh\"\n@@ -472,6 +479,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n                 this.write_scalar(Scalar::from_u64(f.to_bits()), dest)?;\n             }\n+            #[rustfmt::skip]\n             | \"_hypot\"\n             | \"hypot\"\n             | \"atan2\"\n@@ -488,6 +496,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n                 this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n             }\n+            #[rustfmt::skip]\n             | \"_ldexp\"\n             | \"ldexp\"\n             | \"scalbn\""}, {"sha": "ee0e833f9e5f1e3178bc3690942ac2962e9d82eb", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 149, "deletions": 287, "changes": 436, "blob_url": "https://github.com/rust-lang/rust/blob/d6fdfaa0475833171756d4b4236114c2af066395/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fdfaa0475833171756d4b4236114c2af066395/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=d6fdfaa0475833171756d4b4236114c2af066395", "patch": "@@ -330,312 +330,174 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_xchg_acqrel\" => this.atomic_exchange(args, dest, AtomicRwOp::AcqRel)?,\n             \"atomic_xchg_relaxed\" => this.atomic_exchange(args, dest, AtomicRwOp::Relaxed)?,\n \n+            #[rustfmt::skip]\n             \"atomic_cxchg\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::SeqCst)?,\n-            \"atomic_cxchg_acq\" => this.atomic_compare_exchange(\n-                args,\n-                dest,\n-                AtomicRwOp::Acquire,\n-                AtomicReadOp::Acquire,\n-            )?,\n-            \"atomic_cxchg_rel\" => this.atomic_compare_exchange(\n-                args,\n-                dest,\n-                AtomicRwOp::Release,\n-                AtomicReadOp::Relaxed,\n-            )?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchg_acq\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchg_rel\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOp::Release, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n             \"atomic_cxchg_acqrel\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Acquire)?,\n-            \"atomic_cxchg_relaxed\" => this.atomic_compare_exchange(\n-                args,\n-                dest,\n-                AtomicRwOp::Relaxed,\n-                AtomicReadOp::Relaxed,\n-            )?,\n-            \"atomic_cxchg_acq_failrelaxed\" => this.atomic_compare_exchange(\n-                args,\n-                dest,\n-                AtomicRwOp::Acquire,\n-                AtomicReadOp::Relaxed,\n-            )?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchg_relaxed\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOp::Relaxed, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchg_acq_failrelaxed\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n             \"atomic_cxchg_acqrel_failrelaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n             \"atomic_cxchg_failrelaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n             \"atomic_cxchg_failacq\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Acquire)?,\n \n-            \"atomic_cxchgweak\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::SeqCst,\n-                AtomicReadOp::SeqCst,\n-            )?,\n-            \"atomic_cxchgweak_acq\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::Acquire,\n-                AtomicReadOp::Acquire,\n-            )?,\n-            \"atomic_cxchgweak_rel\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::Release,\n-                AtomicReadOp::Relaxed,\n-            )?,\n-            \"atomic_cxchgweak_acqrel\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::AcqRel,\n-                AtomicReadOp::Acquire,\n-            )?,\n-            \"atomic_cxchgweak_relaxed\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::Relaxed,\n-                AtomicReadOp::Relaxed,\n-            )?,\n-            \"atomic_cxchgweak_acq_failrelaxed\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::Acquire,\n-                AtomicReadOp::Relaxed,\n-            )?,\n-            \"atomic_cxchgweak_acqrel_failrelaxed\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::AcqRel,\n-                AtomicReadOp::Relaxed,\n-            )?,\n-            \"atomic_cxchgweak_failrelaxed\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::SeqCst,\n-                AtomicReadOp::Relaxed,\n-            )?,\n-            \"atomic_cxchgweak_failacq\" => this.atomic_compare_exchange_weak(\n-                args,\n-                dest,\n-                AtomicRwOp::SeqCst,\n-                AtomicReadOp::Acquire,\n-            )?,\n-\n-            \"atomic_or\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitOr, false),\n-                AtomicRwOp::SeqCst,\n-            )?,\n-            \"atomic_or_acq\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitOr, false),\n-                AtomicRwOp::Acquire,\n-            )?,\n-            \"atomic_or_rel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitOr, false),\n-                AtomicRwOp::Release,\n-            )?,\n-            \"atomic_or_acqrel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitOr, false),\n-                AtomicRwOp::AcqRel,\n-            )?,\n-            \"atomic_or_relaxed\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitOr, false),\n-                AtomicRwOp::Relaxed,\n-            )?,\n-            \"atomic_xor\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitXor, false),\n-                AtomicRwOp::SeqCst,\n-            )?,\n-            \"atomic_xor_acq\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitXor, false),\n-                AtomicRwOp::Acquire,\n-            )?,\n-            \"atomic_xor_rel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitXor, false),\n-                AtomicRwOp::Release,\n-            )?,\n-            \"atomic_xor_acqrel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitXor, false),\n-                AtomicRwOp::AcqRel,\n-            )?,\n-            \"atomic_xor_relaxed\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitXor, false),\n-                AtomicRwOp::Relaxed,\n-            )?,\n-            \"atomic_and\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, false),\n-                AtomicRwOp::SeqCst,\n-            )?,\n-            \"atomic_and_acq\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, false),\n-                AtomicRwOp::Acquire,\n-            )?,\n-            \"atomic_and_rel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, false),\n-                AtomicRwOp::Release,\n-            )?,\n-            \"atomic_and_acqrel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, false),\n-                AtomicRwOp::AcqRel,\n-            )?,\n-            \"atomic_and_relaxed\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, false),\n-                AtomicRwOp::Relaxed,\n-            )?,\n-            \"atomic_nand\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, true),\n-                AtomicRwOp::SeqCst,\n-            )?,\n-            \"atomic_nand_acq\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, true),\n-                AtomicRwOp::Acquire,\n-            )?,\n-            \"atomic_nand_rel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, true),\n-                AtomicRwOp::Release,\n-            )?,\n-            \"atomic_nand_acqrel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, true),\n-                AtomicRwOp::AcqRel,\n-            )?,\n-            \"atomic_nand_relaxed\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::BitAnd, true),\n-                AtomicRwOp::Relaxed,\n-            )?,\n-            \"atomic_xadd\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Add, false),\n-                AtomicRwOp::SeqCst,\n-            )?,\n-            \"atomic_xadd_acq\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Add, false),\n-                AtomicRwOp::Acquire,\n-            )?,\n-            \"atomic_xadd_rel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Add, false),\n-                AtomicRwOp::Release,\n-            )?,\n-            \"atomic_xadd_acqrel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Add, false),\n-                AtomicRwOp::AcqRel,\n-            )?,\n-            \"atomic_xadd_relaxed\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Add, false),\n-                AtomicRwOp::Relaxed,\n-            )?,\n-            \"atomic_xsub\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Sub, false),\n-                AtomicRwOp::SeqCst,\n-            )?,\n-            \"atomic_xsub_acq\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Sub, false),\n-                AtomicRwOp::Acquire,\n-            )?,\n-            \"atomic_xsub_rel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Sub, false),\n-                AtomicRwOp::Release,\n-            )?,\n-            \"atomic_xsub_acqrel\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Sub, false),\n-                AtomicRwOp::AcqRel,\n-            )?,\n-            \"atomic_xsub_relaxed\" => this.atomic_op(\n-                args,\n-                dest,\n-                AtomicOp::MirOp(BinOp::Sub, false),\n-                AtomicRwOp::Relaxed,\n-            )?,\n-            \"atomic_min\" =>\n-                this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n-            \"atomic_min_acq\" =>\n-                this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n-            \"atomic_min_rel\" =>\n-                this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n-            \"atomic_min_acqrel\" =>\n-                this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::AcqRel)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_acq\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_rel\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Release, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_acqrel\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_relaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Relaxed, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_acq_failrelaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_acqrel_failrelaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_failrelaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_cxchgweak_failacq\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Acquire)?,\n+\n+            #[rustfmt::skip]\n+            \"atomic_or\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"atomic_or_acq\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_or_rel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::Release)?,\n+            #[rustfmt::skip]\n+            \"atomic_or_acqrel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::AcqRel)?,\n+            #[rustfmt::skip]\n+            \"atomic_or_relaxed\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_xor\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"atomic_xor_acq\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_xor_rel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::Release)?,\n+            #[rustfmt::skip]\n+            \"atomic_xor_acqrel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::AcqRel)?,\n+            #[rustfmt::skip]\n+            \"atomic_xor_relaxed\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_and\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"atomic_and_acq\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_and_rel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::Release)?,\n+            #[rustfmt::skip]\n+            \"atomic_and_acqrel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::AcqRel)?,\n+            #[rustfmt::skip]\n+            \"atomic_and_relaxed\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_nand\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"atomic_nand_acq\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_nand_rel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::Release)?,\n+            #[rustfmt::skip]\n+            \"atomic_nand_acqrel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::AcqRel)?,\n+            #[rustfmt::skip]\n+            \"atomic_nand_relaxed\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_xadd\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"atomic_xadd_acq\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_xadd_rel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::Release)?,\n+            #[rustfmt::skip]\n+            \"atomic_xadd_acqrel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::AcqRel)?,\n+            #[rustfmt::skip]\n+            \"atomic_xadd_relaxed\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"atomic_xsub\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"atomic_xsub_acq\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::Acquire)?,\n+            #[rustfmt::skip]\n+            \"atomic_xsub_rel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::Release)?,\n+            #[rustfmt::skip]\n+            \"atomic_xsub_acqrel\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::AcqRel)?,\n+            #[rustfmt::skip]\n+            \"atomic_xsub_relaxed\" =>\n+                this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::Relaxed)?,\n+            \"atomic_min\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n+            \"atomic_min_acq\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n+            \"atomic_min_rel\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n+            \"atomic_min_acqrel\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::AcqRel)?,\n             \"atomic_min_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Relaxed)?,\n-            \"atomic_max\" =>\n-                this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n-            \"atomic_max_acq\" =>\n-                this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n-            \"atomic_max_rel\" =>\n-                this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n-            \"atomic_max_acqrel\" =>\n-                this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::AcqRel)?,\n+            \"atomic_max\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n+            \"atomic_max_acq\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n+            \"atomic_max_rel\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n+            \"atomic_max_acqrel\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::AcqRel)?,\n             \"atomic_max_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Relaxed)?,\n-            \"atomic_umin\" =>\n-                this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n-            \"atomic_umin_acq\" =>\n-                this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n-            \"atomic_umin_rel\" =>\n-                this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n+            \"atomic_umin\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n+            \"atomic_umin_acq\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n+            \"atomic_umin_rel\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n             \"atomic_umin_acqrel\" =>\n                 this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::AcqRel)?,\n             \"atomic_umin_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Relaxed)?,\n-            \"atomic_umax\" =>\n-                this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n-            \"atomic_umax_acq\" =>\n-                this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n-            \"atomic_umax_rel\" =>\n-                this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n+            \"atomic_umax\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n+            \"atomic_umax_acq\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n+            \"atomic_umax_rel\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n             \"atomic_umax_acqrel\" =>\n                 this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::AcqRel)?,\n             \"atomic_umax_relaxed\" =>"}]}