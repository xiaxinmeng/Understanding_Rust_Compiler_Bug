{"sha": "9852537809a78b73a0e17eb2dfdf2ab5b07f5eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NTI1Mzc4MDlhNzhiNzNhMGUxN2ViMmRmZGYyYWI1YjA3ZjVlYWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-14T16:36:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-14T16:36:44Z"}, "message": "Make it clear which client-side commands we use", "tree": {"sha": "42b14c7734070b99e9d625d7cfe3e901586de468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b14c7734070b99e9d625d7cfe3e901586de468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae", "html_url": "https://github.com/rust-lang/rust/commit/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d50a37d3aa473937919030b39587df3d93f9bd8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d50a37d3aa473937919030b39587df3d93f9bd8c", "html_url": "https://github.com/rust-lang/rust/commit/d50a37d3aa473937919030b39587df3d93f9bd8c"}], "stats": {"total": 177, "additions": 96, "deletions": 81}, "files": [{"sha": "2d697c75f507a9af6ece9c7d838d76a913af36d3", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 12, "deletions": 46, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=9852537809a78b73a0e17eb2dfdf2ab5b07f5eae", "patch": "@@ -10,21 +10,20 @@ use std::{\n \n use ide::{\n     AnnotationConfig, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, LineIndex,\n-    NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange,\n-    TextEdit,\n+    Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeActionKind, CodeLens, Command, CompletionItem, Diagnostic, DiagnosticTag,\n-    DocumentFormattingParams, DocumentHighlight, FoldingRange, FoldingRangeParams, HoverContents,\n-    Location, NumberOrString, Position, PrepareRenameResponse, Range, RenameParams,\n-    SemanticTokensDeltaParams, SemanticTokensFullDeltaResult, SemanticTokensParams,\n-    SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n-    SymbolTag, TextDocumentIdentifier, TextDocumentPositionParams, Url, WorkspaceEdit,\n+    CodeActionKind, CodeLens, CompletionItem, Diagnostic, DiagnosticTag, DocumentFormattingParams,\n+    DocumentHighlight, FoldingRange, FoldingRangeParams, HoverContents, Location, NumberOrString,\n+    Position, PrepareRenameResponse, Range, RenameParams, SemanticTokensDeltaParams,\n+    SemanticTokensFullDeltaResult, SemanticTokensParams, SemanticTokensRangeParams,\n+    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, SymbolTag,\n+    TextDocumentIdentifier, TextDocumentPositionParams, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n use serde::{Deserialize, Serialize};\n@@ -1422,40 +1421,7 @@ pub(crate) fn handle_open_cargo_toml(\n     Ok(Some(res))\n }\n \n-fn run_single_command(runnable: &lsp_ext::Runnable, title: &str) -> Command {\n-    Command {\n-        title: title.to_string(),\n-        command: \"rust-analyzer.runSingle\".into(),\n-        arguments: Some(vec![to_value(runnable).unwrap()]),\n-    }\n-}\n-\n-fn debug_single_command(runnable: &lsp_ext::Runnable) -> Command {\n-    Command {\n-        title: \"Debug\".into(),\n-        command: \"rust-analyzer.debugSingle\".into(),\n-        arguments: Some(vec![to_value(runnable).unwrap()]),\n-    }\n-}\n-\n-fn goto_location_command(snap: &GlobalStateSnapshot, nav: &NavigationTarget) -> Option<Command> {\n-    let value = if snap.config.location_link() {\n-        let link = to_proto::location_link(snap, None, nav.clone()).ok()?;\n-        to_value(link).ok()?\n-    } else {\n-        let range = FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() };\n-        let location = to_proto::location(snap, range).ok()?;\n-        to_value(location).ok()?\n-    };\n-\n-    Some(Command {\n-        title: nav.name.to_string(),\n-        command: \"rust-analyzer.gotoLocation\".into(),\n-        arguments: Some(vec![value]),\n-    })\n-}\n-\n-fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n+fn to_command_link(command: lsp_types::Command, tooltip: String) -> lsp_ext::CommandLink {\n     lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }\n \n@@ -1474,7 +1440,7 @@ fn show_impl_command_link(\n                 .filter_map(|nav| to_proto::location_from_nav(snap, nav).ok())\n                 .collect();\n             let title = to_proto::implementation_title(locations.len());\n-            let command = to_proto::show_references_command(title, &uri, position, locations);\n+            let command = to_proto::command::show_references(title, &uri, position, locations);\n \n             return Some(lsp_ext::CommandLinkGroup {\n                 commands: vec![to_command_link(command, \"Go to implementations\".into())],\n@@ -1501,12 +1467,12 @@ fn runnable_action_links(\n         let mut group = lsp_ext::CommandLinkGroup::default();\n \n         if hover_config.run {\n-            let run_command = run_single_command(&r, action.run_title);\n+            let run_command = to_proto::command::run_single(&r, action.run_title);\n             group.commands.push(to_command_link(run_command, r.label.clone()));\n         }\n \n         if hover_config.debug {\n-            let dbg_command = debug_single_command(&r);\n+            let dbg_command = to_proto::command::debug_single(&r);\n             group.commands.push(to_command_link(dbg_command, r.label));\n         }\n \n@@ -1527,7 +1493,7 @@ fn goto_type_action_links(\n         commands: nav_targets\n             .iter()\n             .filter_map(|it| {\n-                goto_location_command(snap, &it.nav)\n+                to_proto::command::goto_location(snap, &it.nav)\n                     .map(|cmd| to_command_link(cmd, it.mod_path.clone()))\n             })\n             .collect(),"}, {"sha": "8a2b4d9bd992dcc73b9dd07f6f9a6f053de836d5", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 84, "deletions": 35, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9852537809a78b73a0e17eb2dfdf2ab5b07f5eae/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=9852537809a78b73a0e17eb2dfdf2ab5b07f5eae", "patch": "@@ -229,11 +229,7 @@ pub(crate) fn completion_item(\n     }\n \n     if completion_item.trigger_call_info() {\n-        res.command = Some(lsp_types::Command {\n-            title: \"triggerParameterHints\".into(),\n-            command: \"editor.action.triggerParameterHints\".into(),\n-            arguments: None,\n-        });\n+        res.command = Some(command::trigger_parameter_hints());\n     }\n \n     let mut all_results = match completion_item.ref_match() {\n@@ -878,17 +874,10 @@ pub(crate) fn code_lens(\n             let r = runnable(&snap, run.nav.file_id, run)?;\n \n             let command = if debug {\n-                lsp_types::Command {\n-                    title: action.run_title.to_string(),\n-                    command: \"rust-analyzer.runSingle\".into(),\n-                    arguments: Some(vec![to_value(r).unwrap()]),\n-                }\n+                command::debug_single(&r)\n             } else {\n-                lsp_types::Command {\n-                    title: \"Debug\".into(),\n-                    command: \"rust-analyzer.debugSingle\".into(),\n-                    arguments: Some(vec![to_value(r).unwrap()]),\n-                }\n+                let title = action.run_title.to_string();\n+                command::run_single(&r, &title)\n             };\n \n             Ok(lsp_types::CodeLens { range: annotation_range, command: Some(command), data: None })\n@@ -922,7 +911,7 @@ pub(crate) fn code_lens(\n                     })\n                     .collect();\n \n-                show_references_command(\n+                command::show_references(\n                     implementation_title(locations.len()),\n                     &url,\n                     position,\n@@ -951,7 +940,12 @@ pub(crate) fn code_lens(\n                 let locations: Vec<lsp_types::Location> =\n                     ranges.into_iter().filter_map(|range| location(snap, range).ok()).collect();\n \n-                show_references_command(reference_title(locations.len()), &url, position, locations)\n+                command::show_references(\n+                    reference_title(locations.len()),\n+                    &url,\n+                    position,\n+                    locations,\n+                )\n             });\n \n             Ok(lsp_types::CodeLens {\n@@ -963,24 +957,79 @@ pub(crate) fn code_lens(\n     }\n }\n \n-pub(crate) fn show_references_command(\n-    title: String,\n-    uri: &lsp_types::Url,\n-    position: lsp_types::Position,\n-    locations: Vec<lsp_types::Location>,\n-) -> lsp_types::Command {\n-    // We cannot use the 'editor.action.showReferences' command directly\n-    // because that command requires vscode types which we convert in the handler\n-    // on the client side.\n-\n-    lsp_types::Command {\n-        title,\n-        command: \"rust-analyzer.showReferences\".into(),\n-        arguments: Some(vec![\n-            to_value(uri).unwrap(),\n-            to_value(position).unwrap(),\n-            to_value(locations).unwrap(),\n-        ]),\n+pub(crate) mod command {\n+    use ide::{FileRange, NavigationTarget};\n+    use serde_json::to_value;\n+\n+    use crate::{\n+        global_state::GlobalStateSnapshot,\n+        lsp_ext,\n+        to_proto::{location, location_link},\n+    };\n+\n+    pub(crate) fn show_references(\n+        title: String,\n+        uri: &lsp_types::Url,\n+        position: lsp_types::Position,\n+        locations: Vec<lsp_types::Location>,\n+    ) -> lsp_types::Command {\n+        // We cannot use the 'editor.action.showReferences' command directly\n+        // because that command requires vscode types which we convert in the handler\n+        // on the client side.\n+\n+        lsp_types::Command {\n+            title,\n+            command: \"rust-analyzer.showReferences\".into(),\n+            arguments: Some(vec![\n+                to_value(uri).unwrap(),\n+                to_value(position).unwrap(),\n+                to_value(locations).unwrap(),\n+            ]),\n+        }\n+    }\n+\n+    pub(crate) fn run_single(runnable: &lsp_ext::Runnable, title: &str) -> lsp_types::Command {\n+        lsp_types::Command {\n+            title: title.to_string(),\n+            command: \"rust-analyzer.runSingle\".into(),\n+            arguments: Some(vec![to_value(runnable).unwrap()]),\n+        }\n+    }\n+\n+    pub(crate) fn debug_single(runnable: &lsp_ext::Runnable) -> lsp_types::Command {\n+        lsp_types::Command {\n+            title: \"Debug\".into(),\n+            command: \"rust-analyzer.debugSingle\".into(),\n+            arguments: Some(vec![to_value(runnable).unwrap()]),\n+        }\n+    }\n+\n+    pub(crate) fn goto_location(\n+        snap: &GlobalStateSnapshot,\n+        nav: &NavigationTarget,\n+    ) -> Option<lsp_types::Command> {\n+        let value = if snap.config.location_link() {\n+            let link = location_link(snap, None, nav.clone()).ok()?;\n+            to_value(link).ok()?\n+        } else {\n+            let range = FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() };\n+            let location = location(snap, range).ok()?;\n+            to_value(location).ok()?\n+        };\n+\n+        Some(lsp_types::Command {\n+            title: nav.name.to_string(),\n+            command: \"rust-analyzer.gotoLocation\".into(),\n+            arguments: Some(vec![value]),\n+        })\n+    }\n+\n+    pub(crate) fn trigger_parameter_hints() -> lsp_types::Command {\n+        lsp_types::Command {\n+            title: \"triggerParameterHints\".into(),\n+            command: \"editor.action.triggerParameterHints\".into(),\n+            arguments: None,\n+        }\n     }\n }\n "}]}