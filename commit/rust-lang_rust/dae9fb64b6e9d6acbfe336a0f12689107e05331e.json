{"sha": "dae9fb64b6e9d6acbfe336a0f12689107e05331e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZTlmYjY0YjZlOWQ2YWNiZmUzMzZhMGYxMjY4OTEwN2UwNTMzMWU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-29T23:06:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-29T23:06:33Z"}, "message": "Merge pull request #2656 from topecongiro/issue-2594\n\nUse consistent formatting for empty enum and struct", "tree": {"sha": "f719913befa48d2effb024ac2acde6d814a7e761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f719913befa48d2effb024ac2acde6d814a7e761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dae9fb64b6e9d6acbfe336a0f12689107e05331e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa5k/5CRBK7hj4Ov3rIwAAdHIIAAmSv6MAi3lhjI+papNNJBZ0\nJCDcMC2o7hLVggm+ssHbAdeGXYS0vbQwBS2ZtVSveJsNQ0WgPXhjU1AYbkAZ6Mp7\nJEBhOPLJi1ZQgR8giym4obb8uVzULJZpEGx8r4sxVM3b8zni2NwoZYZvWdynaBm6\ni1C8+BbJae+IETbAKapRJoaSCcQyHKnnCqjKRgaj+JyyTpnSuoQts52D8dcAtrKG\nMZ47nYzGzAAMMvJ2bHlefyyjnvzVUg9Y9/60vpHBoXia0eeg6HRd2+VAdupbsLRs\np2WvzjAvAd5jjMS5d/UlZFvn2pvM0W18QbvS3svKa2077L0VgklKx0pIXOmjtP8=\n=Ur2V\n-----END PGP SIGNATURE-----\n", "payload": "tree f719913befa48d2effb024ac2acde6d814a7e761\nparent fb9a5add9b651d64ecf365ade61d83d76fd6b307\nparent 3432807ac2c9118058e61961f1d14bdb709004f5\nauthor Nick Cameron <nrc@ncameron.org> 1525043193 +1200\ncommitter GitHub <noreply@github.com> 1525043193 +1200\n\nMerge pull request #2656 from topecongiro/issue-2594\n\nUse consistent formatting for empty enum and struct"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dae9fb64b6e9d6acbfe336a0f12689107e05331e", "html_url": "https://github.com/rust-lang/rust/commit/dae9fb64b6e9d6acbfe336a0f12689107e05331e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dae9fb64b6e9d6acbfe336a0f12689107e05331e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9a5add9b651d64ecf365ade61d83d76fd6b307", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9a5add9b651d64ecf365ade61d83d76fd6b307", "html_url": "https://github.com/rust-lang/rust/commit/fb9a5add9b651d64ecf365ade61d83d76fd6b307"}, {"sha": "3432807ac2c9118058e61961f1d14bdb709004f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3432807ac2c9118058e61961f1d14bdb709004f5", "html_url": "https://github.com/rust-lang/rust/commit/3432807ac2c9118058e61961f1d14bdb709004f5"}], "stats": {"total": 168, "additions": 102, "deletions": 66}, "files": [{"sha": "421e0d2651b4b0100e3d7b5bc8e56bde9f26d6c0", "filename": "src/items.rs", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -33,11 +33,7 @@ use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n use types::TraitTyParamBounds;\n-use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_auto,\n-            format_constness, format_defaultness, format_mutability, format_unsafety,\n-            format_visibility, is_attributes_extendable, last_line_contains_single_line_comment,\n-            last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, starts_with_newline,\n-            stmt_expr, trimmed_last_line_width};\n+use utils::*;\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -458,35 +454,39 @@ impl<'a> FmtVisitor<'a> {\n \n         self.last_pos = body_start;\n \n-        self.block_indent = self.block_indent.block_indent(self.config);\n-        let variant_list = self.format_variant_list(enum_def, body_start, span.hi() - BytePos(1));\n-        match variant_list {\n-            Some(ref body_str) => self.push_str(body_str),\n-            None => self.format_missing_no_indent(span.hi() - BytePos(1)),\n-        }\n-        self.block_indent = self.block_indent.block_unindent(self.config);\n-\n-        if variant_list.is_some() || contains_comment(&enum_snippet[brace_pos..]) {\n-            let indent_str = self.block_indent.to_string(self.config);\n-            self.push_str(&indent_str);\n+        match self.format_variant_list(enum_def, body_start, span.hi()) {\n+            Some(ref s) if enum_def.variants.is_empty() => self.push_str(s),\n+            rw => {\n+                self.push_rewrite(mk_sp(body_start, span.hi()), rw);\n+                self.block_indent = self.block_indent.block_unindent(self.config);\n+            }\n         }\n-        self.push_str(\"}\");\n-        self.last_pos = span.hi();\n     }\n \n     // Format the body of an enum definition\n     fn format_variant_list(\n-        &self,\n+        &mut self,\n         enum_def: &ast::EnumDef,\n         body_lo: BytePos,\n         body_hi: BytePos,\n     ) -> Option<String> {\n         if enum_def.variants.is_empty() {\n-            return None;\n+            let mut buffer = String::with_capacity(128);\n+            // 1 = \"}\"\n+            let span = mk_sp(body_lo, body_hi - BytePos(1));\n+            format_empty_struct_or_tuple(\n+                &self.get_context(),\n+                span,\n+                self.block_indent,\n+                &mut buffer,\n+                \"\",\n+                \"}\",\n+            );\n+            return Some(buffer);\n         }\n         let mut result = String::with_capacity(1024);\n-        let indentation = self.block_indent.to_string_with_newline(self.config);\n-        result.push_str(&indentation);\n+        let original_offset = self.block_indent;\n+        self.block_indent = self.block_indent.block_indent(self.config);\n \n         let itemize_list_with = |one_line_width: usize| {\n             itemize_list(\n@@ -531,7 +531,8 @@ impl<'a> FmtVisitor<'a> {\n \n         let list = write_list(&items, &fmt)?;\n         result.push_str(&list);\n-        result.push('\\n');\n+        result.push_str(&original_offset.to_string_with_newline(self.config));\n+        result.push('}');\n         Some(result)\n     }\n \n@@ -1195,18 +1196,8 @@ pub fn format_struct_struct(\n     }\n \n     if fields.is_empty() {\n-        let snippet = context.snippet(mk_sp(body_lo, span.hi() - BytePos(1)));\n-        if snippet.trim().is_empty() {\n-            // `struct S {}`\n-        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n-            // fix indent\n-            result.push_str(snippet.trim_right());\n-            result.push('\\n');\n-            result.push_str(&offset.to_string(context.config));\n-        } else {\n-            result.push_str(snippet);\n-        }\n-        result.push('}');\n+        let inner_span = mk_sp(body_lo, span.hi() - BytePos(1));\n+        format_empty_struct_or_tuple(context, inner_span, offset, &mut result, \"\", \"}\");\n         return Some(result);\n     }\n \n@@ -1247,6 +1238,41 @@ fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> By\n     }\n }\n \n+// Format tuple or struct without any fields. We need to make sure that the comments\n+// inside the delimiters are preserved.\n+fn format_empty_struct_or_tuple(\n+    context: &RewriteContext,\n+    span: Span,\n+    offset: Indent,\n+    result: &mut String,\n+    opener: &str,\n+    closer: &str,\n+) {\n+    // 3 = \" {}\" or \"();\"\n+    let used_width = last_line_used_width(&result, offset.width()) + 3;\n+    if used_width > context.config.max_width() {\n+        result.push_str(&offset.to_string_with_newline(context.config))\n+    }\n+    result.push_str(opener);\n+    match rewrite_missing_comment(span, Shape::indented(offset, context.config), context) {\n+        Some(ref s) if s.is_empty() => (),\n+        Some(ref s) => {\n+            if !is_single_line(s) || first_line_contains_single_line_comment(s) {\n+                let nested_indent_str = offset\n+                    .block_indent(context.config)\n+                    .to_string_with_newline(context.config);\n+                result.push_str(&nested_indent_str);\n+            }\n+            result.push_str(s);\n+            if last_line_contains_single_line_comment(s) {\n+                result.push_str(&offset.to_string_with_newline(context.config));\n+            }\n+        }\n+        None => result.push_str(context.snippet(span)),\n+    }\n+    result.push_str(closer);\n+}\n+\n fn format_tuple_struct(\n     context: &RewriteContext,\n     struct_parts: &StructParts,\n@@ -1310,31 +1336,11 @@ fn format_tuple_struct(\n     };\n \n     if fields.is_empty() {\n-        // 3 = `();`\n-        let used_width = last_line_used_width(&result, offset.width()) + 3;\n-        if used_width > context.config.max_width() {\n-            result.push('\\n');\n-            result.push_str(&offset\n-                .block_indent(context.config)\n-                .to_string(context.config))\n-        }\n-        result.push('(');\n-        let snippet = context.snippet(mk_sp(\n-            body_lo,\n-            context\n-                .snippet_provider\n-                .span_before(mk_sp(body_lo, span.hi()), \")\"),\n-        ));\n-        if snippet.is_empty() {\n-            // `struct S ()`\n-        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n-            result.push_str(snippet.trim_right());\n-            result.push('\\n');\n-            result.push_str(&offset.to_string(context.config));\n-        } else {\n-            result.push_str(snippet);\n-        }\n-        result.push(')');\n+        let body_hi = context\n+            .snippet_provider\n+            .span_before(mk_sp(body_lo, span.hi()), \")\");\n+        let inner_span = mk_sp(body_lo, body_hi);\n+        format_empty_struct_or_tuple(context, inner_span, offset, &mut result, \"(\", \")\");\n     } else {\n         let shape = Shape::indented(offset, context.config).sub_width(1)?;\n         let fields = &fields.iter().collect::<Vec<_>>();"}, {"sha": "e27180de12a681a13931408cc8ee877e7175171f", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -134,6 +134,16 @@ pub fn outer_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n     filter_attributes(attrs, ast::AttrStyle::Outer)\n }\n \n+#[inline]\n+pub fn is_single_line(s: &str) -> bool {\n+    s.chars().find(|&c| c == '\\n').is_none()\n+}\n+\n+#[inline]\n+pub fn first_line_contains_single_line_comment(s: &str) -> bool {\n+    s.lines().next().map_or(false, |l| l.contains(\"//\"))\n+}\n+\n #[inline]\n pub fn last_line_contains_single_line_comment(s: &str) -> bool {\n     s.lines().last().map_or(false, |l| l.contains(\"//\"))"}, {"sha": "64e151106098c4ce222c92daa56b5464bcc7b16b", "filename": "tests/source/enum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -192,3 +192,7 @@ pub enum QlError {\n     // (kind, input, expected)\n     #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)] ResolveError(&'static str, String, Option<String>),\n }\n+\n+// #2594\n+enum Foo {}\n+enum Bar { }"}, {"sha": "f6ee4ed1f0ab2c7e44b28558272af8d21db36c98", "filename": "tests/target/configs/struct_field_align_threshold/20.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -255,8 +255,12 @@ struct Foo {\n struct Foo {\n     // trailing space ->\n }\n-struct Foo { /* comment */ }\n-struct Foo( /* comment */ );\n+struct Foo {\n+    // comment\n+}\n+struct Foo(\n+    // comment\n+);\n \n struct LongStruct {\n     a: A,"}, {"sha": "e429e45287e2a5327ee3844ac1ce1f0583d49a5a", "filename": "tests/target/enum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -258,3 +258,7 @@ pub enum QlError {\n     #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)]\n     ResolveError(&'static str, String, Option<String>),\n }\n+\n+// #2594\n+enum Foo {}\n+enum Bar {}"}, {"sha": "c4bc82d85d4065693c86720400302ce68077c3c5", "filename": "tests/target/issue-977.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fissue-977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fissue-977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-977.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -4,7 +4,9 @@\n trait NameC {\n     // comment\n }\n-struct FooC { /* comment */ }\n+struct FooC {\n+    // comment\n+}\n enum MooC {\n     // comment\n }"}, {"sha": "7f9ef1e6164549bce2b8e17c03858c8839b335a2", "filename": "tests/target/structs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -228,8 +228,12 @@ struct Foo {\n struct Foo {\n     // trailing space ->\n }\n-struct Foo { /* comment */ }\n-struct Foo( /* comment */ );\n+struct Foo {\n+    // comment\n+}\n+struct Foo(\n+    // comment\n+);\n \n struct LongStruct {\n     a: A,"}, {"sha": "6de682297af7a141d7599836303f78d05a377a76", "filename": "tests/target/unions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9fb64b6e9d6acbfe336a0f12689107e05331e/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=dae9fb64b6e9d6acbfe336a0f12689107e05331e", "patch": "@@ -136,7 +136,9 @@ union Foo {\n union Foo {\n     // trailing space ->\n }\n-union Foo { /* comment */ }\n+union Foo {\n+    // comment\n+}\n \n union LongUnion {\n     a: A,"}]}