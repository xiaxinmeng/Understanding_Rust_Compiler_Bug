{"sha": "f786437bd223740d9767345731d458d10936f8d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODY0MzdiZDIyMzc0MGQ5NzY3MzQ1NzMxZDQ1OGQxMDkzNmY4ZDc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T20:00:17Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T22:47:56Z"}, "message": "syntax: refactor (Span)Handler and ParseSess constructors to be methods.", "tree": {"sha": "3c28b90b9d5489e6355392432fc0ff7ecb6892c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c28b90b9d5489e6355392432fc0ff7ecb6892c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f786437bd223740d9767345731d458d10936f8d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f786437bd223740d9767345731d458d10936f8d7", "html_url": "https://github.com/rust-lang/rust/commit/f786437bd223740d9767345731d458d10936f8d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f786437bd223740d9767345731d458d10936f8d7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "html_url": "https://github.com/rust-lang/rust/commit/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8"}], "stats": {"total": 127, "additions": 62, "deletions": 65}, "files": [{"sha": "328972c54e377f25972da3883364d48ec89199e0", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -1866,7 +1866,7 @@ impl FakeExtCtxt for parse::ParseSess {\n \n #[cfg(test)]\n fn mk_ctxt() -> parse::ParseSess {\n-    parse::new_parse_sess()\n+    parse::ParseSess::new()\n }\n \n #[cfg(test)]"}, {"sha": "48fe574e71f48b5c67699f0bef1a79a4f5c4a844", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -852,7 +852,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig {\n         parse::parse_meta_from_source_str(\"cfgspec\".to_string(),\n                                           s.to_string(),\n                                           Vec::new(),\n-                                          &parse::new_parse_sess())\n+                                          &parse::ParseSess::new())\n     }).collect::<ast::CrateConfig>()\n }\n "}, {"sha": "f7c0745bac18b6271968993e6e6fe562a829cb14", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -368,9 +368,9 @@ pub fn build_session(sopts: config::Options,\n \n     let codemap = codemap::CodeMap::new();\n     let diagnostic_handler =\n-        diagnostic::default_handler(sopts.color, Some(registry), can_print_warnings);\n+        diagnostic::Handler::new(sopts.color, Some(registry), can_print_warnings);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     build_session_(sopts, local_crate_source_file, span_diagnostic_handler)\n }\n@@ -387,7 +387,7 @@ pub fn build_session_(sopts: config::Options,\n     }\n     };\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n-    let p_s = parse::new_parse_sess_special_handler(span_diagnostic);\n+    let p_s = parse::ParseSess::with_span_handler(span_diagnostic);\n     let default_sysroot = match sopts.maybe_sysroot {\n         Some(_) => None,\n         None => Some(filesearch::get_or_default_sysroot())"}, {"sha": "811d59d67485a790b11ded7f85b963f44d822d13", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -218,7 +218,7 @@ impl Target {\n         // this is 1. ugly, 2. error prone.\n \n \n-        let handler = diagnostic::default_handler(diagnostic::Auto, None, true);\n+        let handler = diagnostic::Handler::new(diagnostic::Auto, None, true);\n \n         let get_req_field = |name: &str| {\n             match obj.find(name)"}, {"sha": "b53f2b1dcfa65ae81fd99525e210f6b28818733d", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -105,9 +105,9 @@ fn test_env<F>(source_string: &str,\n     let codemap =\n         CodeMap::new();\n     let diagnostic_handler =\n-        diagnostic::mk_handler(true, emitter);\n+        diagnostic::Handler::with_emitter(true, emitter);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(options, None, span_diagnostic_handler);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "a9e9e3f4048aca708d02c97d6040d0beda544c47", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -21,7 +21,7 @@ use util::common::time;\n use util::common::path2cstr;\n use syntax::codemap;\n use syntax::diagnostic;\n-use syntax::diagnostic::{Emitter, Handler, Level, mk_handler};\n+use syntax::diagnostic::{Emitter, Handler, Level};\n \n use std::ffi::{CStr, CString};\n use std::fs;\n@@ -928,7 +928,7 @@ fn run_work_multithreaded(sess: &Session,\n         futures.push(rx);\n \n         thread::Builder::new().name(format!(\"codegen-{}\", i)).spawn(move || {\n-            let diag_handler = mk_handler(true, box diag_emitter);\n+            let diag_handler = Handler::with_emitter(true, box diag_emitter);\n \n             // Must construct cgcx inside the proc because it has non-Send\n             // fields."}, {"sha": "f7757b9fee753c8f749f001002ba0a111fb1047d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -110,9 +110,9 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     };\n \n     let codemap = codemap::CodeMap::new();\n-    let diagnostic_handler = diagnostic::default_handler(diagnostic::Auto, None, true);\n+    let diagnostic_handler = diagnostic::Handler::new(diagnostic::Auto, None, true);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(sessopts, cpath,\n                                        span_diagnostic_handler);"}, {"sha": "61db8409837744e1b3b5810e2b4de704b31b022a", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -24,7 +24,7 @@ use syntax::parse;\n /// Highlights some source code, returning the HTML output.\n pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n-    let sess = parse::new_parse_sess();\n+    let sess = parse::ParseSess::new();\n     let fm = parse::string_to_filemap(&sess,\n                                       src.to_string(),\n                                       \"<stdin>\".to_string());"}, {"sha": "8e2a3e6fcc3a17cf62ee707e1d662f4e94e687ad", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -65,9 +65,9 @@ pub fn run(input: &str,\n     };\n \n     let codemap = CodeMap::new();\n-    let diagnostic_handler = diagnostic::default_handler(diagnostic::Auto, None, true);\n+    let diagnostic_handler = diagnostic::Handler::new(diagnostic::Auto, None, true);\n     let span_diagnostic_handler =\n-    diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+    diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(sessopts,\n                                       Some(input_path.clone()),\n@@ -184,7 +184,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     // it with a sink that is also passed to rustc itself. When this function\n     // returns the output of the sink is copied onto the output of our own thread.\n     //\n-    // The basic idea is to not use a default_handler() for rustc, and then also\n+    // The basic idea is to not use a default Handler for rustc, and then also\n     // not print things by default to the actual stderr.\n     struct Sink(Arc<Mutex<Vec<u8>>>);\n     impl Write for Sink {\n@@ -206,9 +206,9 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n \n     // Compile the code\n     let codemap = CodeMap::new();\n-    let diagnostic_handler = diagnostic::mk_handler(true, box emitter);\n+    let diagnostic_handler = diagnostic::Handler::with_emitter(true, box emitter);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(sessopts,\n                                        None,"}, {"sha": "02ad00bc7382c31a04b778ee264deb306c39e33c", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -122,6 +122,12 @@ pub struct SpanHandler {\n }\n \n impl SpanHandler {\n+    pub fn new(handler: Handler, cm: codemap::CodeMap) -> SpanHandler {\n+        SpanHandler {\n+            handler: handler,\n+            cm: cm,\n+        }\n+    }\n     pub fn span_fatal(&self, sp: Span, msg: &str) -> FatalError {\n         self.handler.emit(Some((&self.cm, sp)), msg, Fatal);\n         return FatalError;\n@@ -187,6 +193,19 @@ pub struct Handler {\n }\n \n impl Handler {\n+    pub fn new(color_config: ColorConfig,\n+               registry: Option<diagnostics::registry::Registry>,\n+               can_emit_warnings: bool) -> Handler {\n+        let emitter = Box::new(EmitterWriter::stderr(color_config, registry));\n+        Handler::with_emitter(can_emit_warnings, emitter)\n+    }\n+    pub fn with_emitter(can_emit_warnings: bool, e: Box<Emitter + Send>) -> Handler {\n+        Handler {\n+            err_count: Cell::new(0),\n+            emit: RefCell::new(e),\n+            can_emit_warnings: can_emit_warnings\n+        }\n+    }\n     pub fn fatal(&self, msg: &str) -> ! {\n         self.emit.borrow_mut().emit(None, msg, None, Fatal);\n         panic!(FatalError);\n@@ -254,27 +273,6 @@ impl Handler {\n     }\n }\n \n-pub fn mk_span_handler(handler: Handler, cm: codemap::CodeMap) -> SpanHandler {\n-    SpanHandler {\n-        handler: handler,\n-        cm: cm,\n-    }\n-}\n-\n-pub fn default_handler(color_config: ColorConfig,\n-                       registry: Option<diagnostics::registry::Registry>,\n-                       can_emit_warnings: bool) -> Handler {\n-    mk_handler(can_emit_warnings, Box::new(EmitterWriter::stderr(color_config, registry)))\n-}\n-\n-pub fn mk_handler(can_emit_warnings: bool, e: Box<Emitter + Send>) -> Handler {\n-    Handler {\n-        err_count: Cell::new(0),\n-        emit: RefCell::new(e),\n-        can_emit_warnings: can_emit_warnings\n-    }\n-}\n-\n #[derive(Copy, PartialEq, Clone, Debug)]\n pub enum Level {\n     Bug,"}, {"sha": "484684a87f4cd6d53c8df363119fde4926fe42ea", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -1684,7 +1684,7 @@ mod tests {\n     #[test] fn macros_cant_escape_fns_test () {\n         let src = \"fn bogus() {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::new_parse_sess();\n+        let sess = parse::ParseSess::new();\n         let crate_ast = parse::parse_crate_from_source_str(\n             \"<test>\".to_string(),\n             src,\n@@ -1698,7 +1698,7 @@ mod tests {\n     #[test] fn macros_cant_escape_mods_test () {\n         let src = \"mod foo {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::new_parse_sess();\n+        let sess = parse::ParseSess::new();\n         let crate_ast = parse::parse_crate_from_source_str(\n             \"<test>\".to_string(),\n             src,\n@@ -1710,7 +1710,7 @@ mod tests {\n     #[test] fn macros_can_escape_flattened_mods_test () {\n         let src = \"#[macro_use] mod foo {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::new_parse_sess();\n+        let sess = parse::ParseSess::new();\n         let crate_ast = parse::parse_crate_from_source_str(\n             \"<test>\".to_string(),\n             src,\n@@ -1719,7 +1719,7 @@ mod tests {\n     }\n \n     fn expand_crate_str(crate_str: String) -> ast::Crate {\n-        let ps = parse::new_parse_sess();\n+        let ps = parse::ParseSess::new();\n         let crate_ast = panictry!(string_to_parser(&ps, crate_str).parse_crate_mod());\n         // the cfg argument actually does matter, here...\n         expand_crate(&ps,test_ecfg(),vec!(),vec!(),crate_ast)"}, {"sha": "9ced0d5d96e3c7e30f495bdca24c8938ee30a6d4", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -1406,8 +1406,8 @@ mod tests {\n     fn mk_sh() -> diagnostic::SpanHandler {\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let emitter = diagnostic::EmitterWriter::new(Box::new(io::sink()), None);\n-        let handler = diagnostic::mk_handler(true, Box::new(emitter));\n-        diagnostic::mk_span_handler(handler, CodeMap::new())\n+        let handler = diagnostic::Handler::with_emitter(true, Box::new(emitter));\n+        diagnostic::SpanHandler::new(handler, CodeMap::new())\n     }\n \n     // open a string reader for the given string"}, {"sha": "21253982e51d3d6df12479ed2cc974b427b73a77", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -12,7 +12,7 @@\n \n use ast;\n use codemap::{Span, CodeMap, FileMap};\n-use diagnostic::{SpanHandler, mk_span_handler, default_handler, Auto, FatalError};\n+use diagnostic::{SpanHandler, Handler, Auto, FatalError};\n use parse::attr::ParserAttr;\n use parse::parser::Parser;\n use ptr::P;\n@@ -46,17 +46,17 @@ pub struct ParseSess {\n     included_mod_stack: RefCell<Vec<PathBuf>>,\n }\n \n-pub fn new_parse_sess() -> ParseSess {\n-    ParseSess {\n-        span_diagnostic: mk_span_handler(default_handler(Auto, None, true), CodeMap::new()),\n-        included_mod_stack: RefCell::new(Vec::new()),\n+impl ParseSess {\n+    pub fn new() -> ParseSess {\n+        let handler = SpanHandler::new(Handler::new(Auto, None, true), CodeMap::new());\n+        ParseSess::with_span_handler(handler)\n     }\n-}\n \n-pub fn new_parse_sess_special_handler(sh: SpanHandler) -> ParseSess {\n-    ParseSess {\n-        span_diagnostic: sh,\n-        included_mod_stack: RefCell::new(Vec::new()),\n+    pub fn with_span_handler(sh: SpanHandler) -> ParseSess {\n+        ParseSess {\n+            span_diagnostic: sh,\n+            included_mod_stack: RefCell::new(vec![])\n+        }\n     }\n }\n \n@@ -886,7 +886,7 @@ mod tests {\n     }\n \n     #[test] fn parse_ident_pat () {\n-        let sess = new_parse_sess();\n+        let sess = ParseSess::new();\n         let mut parser = string_to_parser(&sess, \"b\".to_string());\n         assert!(panictry!(parser.parse_pat_nopanic())\n                 == P(ast::Pat{\n@@ -1067,7 +1067,7 @@ mod tests {\n     }\n \n     #[test] fn crlf_doc_comments() {\n-        let sess = new_parse_sess();\n+        let sess = ParseSess::new();\n \n         let name = \"<source>\".to_string();\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n@@ -1090,7 +1090,7 @@ mod tests {\n \n     #[test]\n     fn ttdelim_span() {\n-        let sess = parse::new_parse_sess();\n+        let sess = ParseSess::new();\n         let expr = parse::parse_expr_from_source_str(\"foo\".to_string(),\n             \"foo!( fn main() { body } )\".to_string(), vec![], &sess);\n "}, {"sha": "1ecfe9c96f4c559e6771b421a0cbc707612e447d", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use ast;\n-use parse::new_parse_sess;\n use parse::{ParseSess,string_to_filemap,filemap_to_tts};\n use parse::new_parser_from_source_str;\n use parse::parser::Parser;\n@@ -19,7 +18,7 @@ use str::char_at;\n \n /// Map a string to tts, using a made-up filename:\n pub fn string_to_tts(source_str: String) -> Vec<ast::TokenTree> {\n-    let ps = new_parse_sess();\n+    let ps = ParseSess::new();\n     filemap_to_tts(&ps,\n                    string_to_filemap(&ps, source_str, \"bogofile\".to_string()))\n }\n@@ -35,7 +34,7 @@ pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a>\n fn with_error_checking_parse<T, F>(s: String, f: F) -> T where\n     F: FnOnce(&mut Parser) -> T,\n {\n-    let ps = new_parse_sess();\n+    let ps = ParseSess::new();\n     let mut p = string_to_parser(&ps, s);\n     let x = f(&mut p);\n     p.abort_if_errors();\n@@ -75,7 +74,7 @@ pub fn string_to_stmt(source_str : String) -> P<ast::Stmt> {\n pub fn string_to_pat(source_str: String) -> P<ast::Pat> {\n     // Binding `sess` and `parser` works around dropck-injected\n     // region-inference issues; see #25212, #22323, #22321.\n-    let sess = new_parse_sess();\n+    let sess = ParseSess::new();\n     let mut parser = string_to_parser(&sess, source_str);\n     parser.parse_pat()\n }"}, {"sha": "c83a154056ba24b8cf4c77b519959384eaad1a14", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -20,7 +20,7 @@ use syntax::parse;\n use syntax::print::pprust;\n \n fn main() {\n-    let ps = syntax::parse::new_parse_sess();\n+    let ps = syntax::parse::ParseSess::new();\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()));"}, {"sha": "4251579bbdcd1ba21334bb2de131a762ebc7a3dc", "filename": "src/test/run-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -22,7 +22,7 @@ use syntax::parse;\n use syntax::print::pprust;\n \n fn main() {\n-    let ps = syntax::parse::new_parse_sess();\n+    let ps = syntax::parse::ParseSess::new();\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()));"}, {"sha": "6670f200ba71ed37ef90f0d7e65c034ebe7de5c4", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f786437bd223740d9767345731d458d10936f8d7/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f786437bd223740d9767345731d458d10936f8d7/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=f786437bd223740d9767345731d458d10936f8d7", "patch": "@@ -18,7 +18,7 @@ use syntax::codemap::DUMMY_SP;\n use syntax::print::pprust::*;\n \n fn main() {\n-    let ps = syntax::parse::new_parse_sess();\n+    let ps = syntax::parse::ParseSess::new();\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()));"}]}