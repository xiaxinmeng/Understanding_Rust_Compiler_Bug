{"sha": "6eec9fb5d15d2bb2025398f5cae12aebe03d87e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZWM5ZmI1ZDE1ZDJiYjIwMjUzOThmNWNhZTEyYWViZTAzZDg3ZTg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-12T01:50:25Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:06Z"}, "message": "Address review comments\n\n- Move static variables into the innermost scope in which they are used\n- Clean up comments\n- Remove external_providers; rename local_providers -> providers", "tree": {"sha": "7e27010bccf5be141d28872de6a38073a8803c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e27010bccf5be141d28872de6a38073a8803c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8", "html_url": "https://github.com/rust-lang/rust/commit/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac9157b482e916c09e2ec35bb7e514ae7b6b9c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9157b482e916c09e2ec35bb7e514ae7b6b9c03", "html_url": "https://github.com/rust-lang/rust/commit/ac9157b482e916c09e2ec35bb7e514ae7b6b9c03"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "c2d0bd103eca9934bb2d25cb2892b5670c3b6121", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6eec9fb5d15d2bb2025398f5cae12aebe03d87e8", "patch": "@@ -377,18 +377,26 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         crate_name,\n         lint_caps,\n         register_lints: None,\n-        override_queries: Some(|_sess, local_providers, external_providers| {\n-            lazy_static! {\n-                static ref EMPTY_SET: FxHashSet<LocalDefId> = FxHashSet::default();\n-            }\n+        override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n-            local_providers.lint_mod = |_, _| {};\n-            external_providers.lint_mod = |_, _| {};\n-            local_providers.typeck_item_bodies = |_, _| {};\n+            providers.lint_mod = |_, _| {};\n+            // Prevent `rustc_typeck::check_crate` from calling `typeck_tables_of` on all bodies.\n+            providers.typeck_item_bodies = |_, _| {};\n             // hack so that `used_trait_imports` won't try to call typeck_tables_of\n-            local_providers.used_trait_imports = |_, _| &EMPTY_SET;\n+            providers.used_trait_imports = |_, _| {\n+                lazy_static! {\n+                    static ref EMPTY_SET: FxHashSet<LocalDefId> = FxHashSet::default();\n+                }\n+                &EMPTY_SET\n+            };\n             // In case typeck does end up being called, don't ICE in case there were name resolution errors\n-            local_providers.typeck_tables_of = move |tcx, def_id| {\n+            providers.typeck_tables_of = move |tcx, def_id| {\n+                thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(TyCtxt<'tcx>, LocalDefId) -> &'tcx ty::TypeckTables<'tcx> = {\n+                    let mut providers = ty::query::Providers::default();\n+                    rustc_typeck::provide(&mut providers);\n+                    providers.typeck_tables_of\n+                });\n+\n                 // Closures' tables come from their outermost function,\n                 // as they are part of the same \"inference environment\".\n                 // This avoids emitting errors for the parent twice (see similar code in `typeck_tables_of_with_fallback`)\n@@ -447,10 +455,11 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n \n             global_ctxt.enter(|tcx| {\n-                // Some queries require that they only run on valid types:\n-                // https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425\n-                // Therefore typecheck this crate before running lints.\n-                // NOTE: this does not typeck item bodies or run the default rustc lints\n+                // Certain queries assume that some checks were run elsewhere\n+                // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n+                // so type-check everything other than function bodies in this crate before running lints.\n+                // NOTE: this does not call `tcx.analysis()` so that we won't\n+                // typeck function bodies or run the default rustc lints.\n                 // (see `override_queries` in the `config`)\n                 let _ = rustc_typeck::check_crate(tcx);\n                 tcx.sess.abort_if_errors();\n@@ -607,12 +616,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     })\n }\n \n-thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(TyCtxt<'tcx>, LocalDefId) -> &'tcx ty::TypeckTables<'tcx> = {\n-    let mut providers = ty::query::Providers::default();\n-    rustc_typeck::provide(&mut providers);\n-    providers.typeck_tables_of\n-});\n-\n /// Due to https://github.com/rust-lang/rust/pull/73566,\n /// the name resolution pass may find errors that are never emitted.\n /// If typeck is called after this happens, then we'll get an ICE:"}]}