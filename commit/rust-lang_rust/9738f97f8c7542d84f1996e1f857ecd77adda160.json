{"sha": "9738f97f8c7542d84f1996e1f857ecd77adda160", "node_id": "C_kwDOAAsO6NoAKDk3MzhmOTdmOGM3NTQyZDg0ZjE5OTZlMWY4NTdlY2Q3N2FkZGExNjA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-12T16:25:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-12T16:32:11Z"}, "message": "Fix active parameter analysis once more", "tree": {"sha": "dda0b81a1a0d80ac8247837ad6e3df72f23f9aa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda0b81a1a0d80ac8247837ad6e3df72f23f9aa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9738f97f8c7542d84f1996e1f857ecd77adda160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9738f97f8c7542d84f1996e1f857ecd77adda160", "html_url": "https://github.com/rust-lang/rust/commit/9738f97f8c7542d84f1996e1f857ecd77adda160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9738f97f8c7542d84f1996e1f857ecd77adda160/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2cf8c234a0c482fd1f1517a724605b7b3185159", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cf8c234a0c482fd1f1517a724605b7b3185159", "html_url": "https://github.com/rust-lang/rust/commit/d2cf8c234a0c482fd1f1517a724605b7b3185159"}], "stats": {"total": 76, "additions": 44, "deletions": 32}, "files": [{"sha": "f12d4744974dd719193fae608c9f8ed2c17a9596", "filename": "crates/ide-db/src/active_parameter.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9738f97f8c7542d84f1996e1f857ecd77adda160/crates%2Fide-db%2Fsrc%2Factive_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9738f97f8c7542d84f1996e1f857ecd77adda160/crates%2Fide-db%2Fsrc%2Factive_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Factive_parameter.rs?ref=9738f97f8c7542d84f1996e1f857ecd77adda160", "patch": "@@ -2,10 +2,10 @@\n \n use either::Either;\n use hir::{Semantics, Type};\n+use parser::T;\n use syntax::{\n-    algo::non_trivia_sibling,\n     ast::{self, HasArgList, HasName},\n-    AstNode, Direction, SyntaxToken, TextRange,\n+    AstNode, NodeOrToken, SyntaxToken,\n };\n \n use crate::RootDatabase;\n@@ -59,32 +59,23 @@ pub fn callable_for_node(\n     calling_node: &ast::CallableExpr,\n     token: &SyntaxToken,\n ) -> Option<(hir::Callable, Option<usize>)> {\n-    let callable = match &calling_node {\n+    let callable = match calling_node {\n         ast::CallableExpr::Call(call) => {\n             let expr = call.expr()?;\n             sema.type_of_expr(&expr)?.adjusted().as_callable(sema.db)\n         }\n         ast::CallableExpr::MethodCall(call) => sema.resolve_method_call_as_callable(call),\n     }?;\n     let active_param = if let Some(arg_list) = calling_node.arg_list() {\n-        let account_for_ws = |arg: &ast::Expr| {\n-            let node = arg.syntax().clone();\n-            let left = non_trivia_sibling(node.clone().into(), Direction::Prev)\n-                .and_then(|it| it.into_token())?\n-                .text_range();\n-            let right = non_trivia_sibling(node.into(), Direction::Next)\n-                .and_then(|it| it.into_token())?\n-                .text_range();\n-            Some(TextRange::new(left.end(), right.start()))\n-        };\n-        arg_list\n-            .args()\n-            .position(|arg| {\n-                account_for_ws(&arg)\n-                    .unwrap_or(arg.syntax().text_range())\n-                    .contains(token.text_range().start())\n-            })\n-            .or(Some(0))\n+        Some(\n+            arg_list\n+                .syntax()\n+                .children_with_tokens()\n+                .filter_map(NodeOrToken::into_token)\n+                .filter(|t| t.kind() == T![,])\n+                .take_while(|t| t.text_range().start() <= token.text_range().start())\n+                .count(),\n+        )\n     } else {\n         None\n     };"}, {"sha": "26e45acff1087b3750285e4ba69387861710f8ac", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9738f97f8c7542d84f1996e1f857ecd77adda160/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9738f97f8c7542d84f1996e1f857ecd77adda160/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=9738f97f8c7542d84f1996e1f857ecd77adda160", "patch": "@@ -12,7 +12,7 @@ use stdx::format_to;\n use syntax::{\n     algo,\n     ast::{self, HasArgList},\n-    match_ast, AstNode, Direction, SyntaxKind, SyntaxToken, TextRange, TextSize,\n+    match_ast, AstNode, Direction, SyntaxToken, TextRange, TextSize,\n };\n \n use crate::RootDatabase;\n@@ -105,10 +105,10 @@ pub(crate) fn signature_help(db: &RootDatabase, position: FilePosition) -> Optio\n         // Stop at multi-line expressions, since the signature of the outer call is not very\n         // helpful inside them.\n         if let Some(expr) = ast::Expr::cast(node.clone()) {\n-            if expr.syntax().text().contains_char('\\n')\n-                && expr.syntax().kind() != SyntaxKind::RECORD_EXPR\n+            if !matches!(expr, ast::Expr::RecordExpr(..))\n+                && expr.syntax().text().contains_char('\\n')\n             {\n-                return None;\n+                break;\n             }\n         }\n     }\n@@ -122,18 +122,16 @@ fn signature_help_for_call(\n     token: SyntaxToken,\n ) -> Option<SignatureHelp> {\n     // Find the calling expression and its NameRef\n-    let mut node = arg_list.syntax().parent()?;\n+    let mut nodes = arg_list.syntax().ancestors().skip(1);\n     let calling_node = loop {\n-        if let Some(callable) = ast::CallableExpr::cast(node.clone()) {\n-            if callable\n+        if let Some(callable) = ast::CallableExpr::cast(nodes.next()?) {\n+            let inside_callable = callable\n                 .arg_list()\n-                .map_or(false, |it| it.syntax().text_range().contains(token.text_range().start()))\n-            {\n+                .map_or(false, |it| it.syntax().text_range().contains(token.text_range().start()));\n+            if inside_callable {\n                 break callable;\n             }\n         }\n-\n-        node = node.parent()?;\n     };\n \n     let (callable, active_parameter) = callable_for_node(sema, &calling_node, &token)?;\n@@ -1594,4 +1592,27 @@ impl S {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_enum_in_nested_method_in_lambda() {\n+        check(\n+            r#\"\n+enum A {\n+    A,\n+    B\n+}\n+\n+fn bar(_: A) { }\n+\n+fn main() {\n+    let foo = Foo;\n+    std::thread::spawn(move || { bar(A:$0) } );\n+}\n+\"#,\n+            expect![[r#\"\n+                fn bar(_: A)\n+                       ^^^^\n+            \"#]],\n+        );\n+    }\n }"}]}