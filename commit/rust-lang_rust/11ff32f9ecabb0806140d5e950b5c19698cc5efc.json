{"sha": "11ff32f9ecabb0806140d5e950b5c19698cc5efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZmYzMmY5ZWNhYmIwODA2MTQwZDVlOTUwYjVjMTk2OThjYzVlZmM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-02T01:24:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-02T01:24:41Z"}, "message": "Rollup merge of #76206 - CDirkx:const-ipv6, r=ecstatic-morse\n\nMake all methods of `std::net::Ipv6Addr` const\n\nMake the following methods of `std::net::Ipv6Addr` unstable const under the `const_ipv6` feature:\n- `segments`\n- `is_unspecified`\n- `is_loopback`\n- `is_global` (unstable)\n- `is_unique_local`\n- `is_unicast_link_local_strict`\n- `is_documentation`\n- `multicast_scope`\n- `is_multicast`\n- `to_ipv4_mapped`\n- `to_ipv4`\n\nThis would make all methods of `Ipv6Addr` const.\n\nChanged the implementation of `is_unspecified` and `is_loopback` to use a `match` instead of `==`, all other methods did not require a change.\n\nAll these methods are dependent on `segments`, the current implementation of which requires unstable `const_fn_transmute` ([PR#75085](https://github.com/rust-lang/rust/pull/75085)).\n\nPart of #76205", "tree": {"sha": "492b8ce582793811f18a197409ff489c660aa6a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/492b8ce582793811f18a197409ff489c660aa6a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ff32f9ecabb0806140d5e950b5c19698cc5efc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTvRZCRBK7hj4Ov3rIwAAdHIIAJwduL4dNXU8ln+hPKK/hWO9\nngiFwO4GT5Mgo7D4UEzn0sG/ipdenFS6a5Bk6KmcPw1nuSmbPOzbzsBKn7dn9Dco\nhnoxF/0IVdeTAq5mmPnb4yoj991J0DgLkqOSTGomT9L2bRwhAIrFu3KzqEU2vXHo\ntPtENKKHaKFxTDcDo6Fd24IL+ivTJ3WR2AU0PMvdHiudtdSwxXDM6MxZLVsKqByf\nPnmCLWvPPUoLkQVRKxC1CQu9K5fthVvQXcxW6XSPUeyMKSqxMxcat0V1DFlsG4gz\nvANd5KEC9NRSiyJMayIxuUN97xVHL68+SPw4pjuAmgBUzEkjnOdVa1v3XgJ9CRQ=\n=ydt9\n-----END PGP SIGNATURE-----\n", "payload": "tree 492b8ce582793811f18a197409ff489c660aa6a2\nparent 17fa7339e95fec2bea7ea9c38f4af8c0f1b0d3f9\nparent 9afe97c932ee964ee35d196c902870ab572f2544\nauthor Tyler Mandry <tmandry@gmail.com> 1599009881 -0700\ncommitter GitHub <noreply@github.com> 1599009881 -0700\n\nRollup merge of #76206 - CDirkx:const-ipv6, r=ecstatic-morse\n\nMake all methods of `std::net::Ipv6Addr` const\n\nMake the following methods of `std::net::Ipv6Addr` unstable const under the `const_ipv6` feature:\n- `segments`\n- `is_unspecified`\n- `is_loopback`\n- `is_global` (unstable)\n- `is_unique_local`\n- `is_unicast_link_local_strict`\n- `is_documentation`\n- `multicast_scope`\n- `is_multicast`\n- `to_ipv4_mapped`\n- `to_ipv4`\n\nThis would make all methods of `Ipv6Addr` const.\n\nChanged the implementation of `is_unspecified` and `is_loopback` to use a `match` instead of `==`, all other methods did not require a change.\n\nAll these methods are dependent on `segments`, the current implementation of which requires unstable `const_fn_transmute` ([PR#75085](https://github.com/rust-lang/rust/pull/75085)).\n\nPart of #76205\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ff32f9ecabb0806140d5e950b5c19698cc5efc", "html_url": "https://github.com/rust-lang/rust/commit/11ff32f9ecabb0806140d5e950b5c19698cc5efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ff32f9ecabb0806140d5e950b5c19698cc5efc/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17fa7339e95fec2bea7ea9c38f4af8c0f1b0d3f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/17fa7339e95fec2bea7ea9c38f4af8c0f1b0d3f9", "html_url": "https://github.com/rust-lang/rust/commit/17fa7339e95fec2bea7ea9c38f4af8c0f1b0d3f9"}, {"sha": "9afe97c932ee964ee35d196c902870ab572f2544", "url": "https://api.github.com/repos/rust-lang/rust/commits/9afe97c932ee964ee35d196c902870ab572f2544", "html_url": "https://github.com/rust-lang/rust/commit/9afe97c932ee964ee35d196c902870ab572f2544"}], "stats": {"total": 100, "additions": 84, "deletions": 16}, "files": [{"sha": "3141b3b9526d0bb5f1b42de8d1f7aa05f0b4f8c0", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ff32f9ecabb0806140d5e950b5c19698cc5efc/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ff32f9ecabb0806140d5e950b5c19698cc5efc/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=11ff32f9ecabb0806140d5e950b5c19698cc5efc", "patch": "@@ -238,6 +238,7 @@\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_transmute)]\n+#![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]"}, {"sha": "341a112df71b3c51775af40a39e8620b73e10f1a", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11ff32f9ecabb0806140d5e950b5c19698cc5efc/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ff32f9ecabb0806140d5e950b5c19698cc5efc/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=11ff32f9ecabb0806140d5e950b5c19698cc5efc", "patch": "@@ -1102,8 +1102,9 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).segments(),\n     ///            [0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff]);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn segments(&self) -> [u16; 8] {\n+    pub const fn segments(&self) -> [u16; 8] {\n         // All elements in `s6_addr` must be big endian.\n         // SAFETY: `[u8; 16]` is always safe to transmute to `[u16; 8]`.\n         let [a, b, c, d, e, f, g, h] = unsafe { transmute::<_, [u16; 8]>(self.inner.s6_addr) };\n@@ -1135,9 +1136,10 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unspecified(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0).is_unspecified(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_unspecified(&self) -> bool {\n-        self.segments() == [0, 0, 0, 0, 0, 0, 0, 0]\n+    pub const fn is_unspecified(&self) -> bool {\n+        u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n     }\n \n     /// Returns [`true`] if this is a loopback address (::1).\n@@ -1155,9 +1157,10 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_loopback(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_loopback(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_loopback(&self) -> bool {\n-        self.segments() == [0, 0, 0, 0, 0, 0, 0, 1]\n+    pub const fn is_loopback(&self) -> bool {\n+        u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n     }\n \n     /// Returns [`true`] if the address appears to be globally routable.\n@@ -1182,7 +1185,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_global(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n     /// ```\n-    pub fn is_global(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n             Some(Ipv6MulticastScope::Global) => true,\n             None => self.is_unicast_global(),\n@@ -1208,7 +1212,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unique_local(), false);\n     /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n     /// ```\n-    pub fn is_unique_local(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n@@ -1263,7 +1268,8 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n-    pub fn is_unicast_link_local_strict(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_link_local_strict(&self) -> bool {\n         (self.segments()[0] & 0xffff) == 0xfe80\n             && (self.segments()[1] & 0xffff) == 0\n             && (self.segments()[2] & 0xffff) == 0\n@@ -1320,7 +1326,8 @@ impl Ipv6Addr {\n     ///\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n-    pub fn is_unicast_link_local(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n@@ -1359,7 +1366,8 @@ impl Ipv6Addr {\n     /// addresses.\n     ///\n     /// [RFC 3879]: https://tools.ietf.org/html/rfc3879\n-    pub fn is_unicast_site_local(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n \n@@ -1381,7 +1389,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_documentation(), false);\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n     /// ```\n-    pub fn is_documentation(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n \n@@ -1416,7 +1425,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_unicast_global(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(), true);\n     /// ```\n-    pub fn is_unicast_global(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n             && !self.is_loopback()\n             && !self.is_unicast_link_local()\n@@ -1440,7 +1450,8 @@ impl Ipv6Addr {\n     /// );\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n     /// ```\n-    pub fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n             match self.segments()[0] & 0x000f {\n                 1 => Some(Ipv6MulticastScope::InterfaceLocal),\n@@ -1472,8 +1483,9 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).is_multicast(), true);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_multicast(), false);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_multicast(&self) -> bool {\n+    pub const fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n@@ -1498,7 +1510,8 @@ impl Ipv6Addr {\n     ///            Some(Ipv4Addr::new(192, 10, 2, 255)));\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n     /// ```\n-    pub fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {\n             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, a, b, c, d] => {\n                 Some(Ipv4Addr::new(a, b, c, d))\n@@ -1525,8 +1538,9 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4(),\n     ///            Some(Ipv4Addr::new(0, 0, 0, 1)));\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_ipv4(&self) -> Option<Ipv4Addr> {\n+    pub const fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n             let [a, b] = ab.to_be_bytes();\n             let [c, d] = cd.to_be_bytes();"}, {"sha": "e3841c38c2231d5c61bf678fc31b149b59e07b17", "filename": "src/test/ui/consts/std/net/ipv6.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/11ff32f9ecabb0806140d5e950b5c19698cc5efc/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ff32f9ecabb0806140d5e950b5c19698cc5efc/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs?ref=11ff32f9ecabb0806140d5e950b5c19698cc5efc", "patch": "@@ -0,0 +1,53 @@\n+// run-pass\n+\n+#![feature(ip)]\n+#![feature(const_ipv6)]\n+\n+use std::net::{Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n+\n+fn main() {\n+    const IP_ADDRESS : Ipv6Addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n+    assert_eq!(IP_ADDRESS, Ipv6Addr::LOCALHOST);\n+\n+    const SEGMENTS : [u16; 8] = IP_ADDRESS.segments();\n+    assert_eq!(SEGMENTS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 1]);\n+\n+    const OCTETS : [u8; 16] = IP_ADDRESS.octets();\n+    assert_eq!(OCTETS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 1]);\n+\n+    const IS_UNSPECIFIED : bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK : bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_GLOBAL : bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_UNIQUE_LOCAL : bool = IP_ADDRESS.is_unique_local();\n+    assert!(!IS_UNIQUE_LOCAL);\n+\n+    const IS_UNICAST_LINK_LOCAL_STRICT : bool = IP_ADDRESS.is_unicast_link_local_strict();\n+    assert!(!IS_UNICAST_LINK_LOCAL_STRICT);\n+\n+    const IS_UNICAST_LINK_LOCAL : bool = IP_ADDRESS.is_unicast_link_local();\n+    assert!(!IS_UNICAST_LINK_LOCAL);\n+\n+    const IS_UNICAST_SITE_LOCAL : bool = IP_ADDRESS.is_unicast_site_local();\n+    assert!(!IS_UNICAST_SITE_LOCAL);\n+\n+    const IS_DOCUMENTATION : bool = IP_ADDRESS.is_documentation();\n+    assert!(!IS_DOCUMENTATION);\n+\n+    const IS_UNICAST_GLOBAL : bool = IP_ADDRESS.is_unicast_global();\n+    assert!(!IS_UNICAST_GLOBAL);\n+\n+    const MULTICAST_SCOPE : Option<Ipv6MulticastScope> = IP_ADDRESS.multicast_scope();\n+    assert_eq!(MULTICAST_SCOPE, None);\n+\n+    const IS_MULTICAST : bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+\n+    const IP_V4 : Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n+    assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n+}"}]}