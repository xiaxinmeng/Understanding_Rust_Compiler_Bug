{"sha": "d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "node_id": "C_kwDOAAsO6NoAKGQ0OWIwNzQ2ZjZjMGNmNDFlOTRlNGJiZDE1OTJjNTIwODJhOWNhZDc", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-13T17:19:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:10Z"}, "message": "Add roll back infrastructure for opaque type caches", "tree": {"sha": "852d775a707c3932ff1c0648e3b5e9c637d35088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/852d775a707c3932ff1c0648e3b5e9c637d35088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "html_url": "https://github.com/rust-lang/rust/commit/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "html_url": "https://github.com/rust-lang/rust/commit/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b"}], "stats": {"total": 150, "additions": 113, "deletions": 37}, "files": [{"sha": "75305d9c923118896e71b17ea3a56ae2f54c66c6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -190,7 +190,8 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);\n \n             translate_outlives_facts(&mut cx);\n-            let opaque_type_values = mem::take(&mut infcx.inner.borrow_mut().opaque_types);\n+            let opaque_type_values =\n+                infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n \n             opaque_type_values\n                 .into_iter()\n@@ -1315,8 +1316,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // have to solve any bounds (e.g., `-> impl Iterator` needs to\n         // prove that `T: Iterator` where `T` is the type we\n         // instantiated it with).\n-        let opaque_type_map = self.infcx.inner.borrow().opaque_types.clone();\n-        for (opaque_type_key, opaque_decl) in opaque_type_map {\n+        for (opaque_type_key, opaque_decl) in self.infcx.opaque_types() {\n             self.fully_perform_op(\n                 locations,\n                 ConstraintCategory::OpaqueType,"}, {"sha": "8f525230e7eec3cbae321c697a3d46defa519aa8", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -30,6 +30,11 @@ where\n         }\n     }\n \n+    /// Removes the entry from the map and returns the removed value\n+    pub fn remove(&mut self, k: &K) -> Option<V> {\n+        self.0.iter().position(|(k2, _)| k2 == k).map(|pos| self.0.remove(pos).1)\n+    }\n+\n     /// Gets a reference to the value in the entry.\n     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n     where"}, {"sha": "06692be4f72650fe6dde8a6ef2e158d980a1bafa", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -66,17 +66,18 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n         self.relate(a, b)\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        debug!(\"{}.tys({:?}, {:?})\", self.tag(), a, b);\n         if a == b {\n             return Ok(a);\n         }\n \n+        trace!(a = ?a.kind(), b = ?b.kind());\n+\n         let infcx = self.fields.infcx;\n         let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);\n         let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);\n-\n-        debug!(\"{}.tys: replacements ({:?}, {:?})\", self.tag(), a, b);\n+        trace!(a = ?a.kind(), b = ?b.kind(), \"replacements\");\n \n         match (a.kind(), b.kind()) {\n             (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {"}, {"sha": "6c7e079a724a50e6f168a8431d3e511b7868cfeb", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -5,7 +5,7 @@ pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n \n-use self::opaque_types::OpaqueTypeMap;\n+use self::opaque_types::OpaqueTypeStorage;\n pub(crate) use self::undo_log::{InferCtxtUndoLogs, Snapshot, UndoLog};\n \n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n@@ -190,20 +190,10 @@ pub struct InferCtxtInner<'tcx> {\n     /// that all type inference variables have been bound and so forth.\n     region_obligations: Vec<(hir::HirId, RegionObligation<'tcx>)>,\n \n-    undo_log: InferCtxtUndoLogs<'tcx>,\n+    /// Caches for opaque type inference.\n+    pub opaque_type_storage: OpaqueTypeStorage<'tcx>,\n \n-    // Opaque types found in explicit return types and their\n-    // associated fresh inference variable. Writeback resolves these\n-    // variables to get the concrete type, which can be used to\n-    // 'de-opaque' OpaqueTypeDecl outside of type inference.\n-    pub opaque_types: OpaqueTypeMap<'tcx>,\n-\n-    /// A map from inference variables created from opaque\n-    /// type instantiations (`ty::Infer`) to the actual opaque\n-    /// type (`ty::Opaque`). Used during fallback to map unconstrained\n-    /// opaque type inference variables to their corresponding\n-    /// opaque type.\n-    pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,\n+    undo_log: InferCtxtUndoLogs<'tcx>,\n }\n \n impl<'tcx> InferCtxtInner<'tcx> {\n@@ -217,8 +207,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n             float_unification_storage: ut::UnificationTableStorage::new(),\n             region_constraint_storage: Some(RegionConstraintStorage::new()),\n             region_obligations: vec![],\n-            opaque_types: Default::default(),\n-            opaque_types_vars: Default::default(),\n+            opaque_type_storage: Default::default(),\n         }\n     }\n \n@@ -237,6 +226,11 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         self.type_variable_storage.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n+    fn opaque_types(&mut self) -> opaque_types::OpaqueTypeTable<'_, 'tcx> {\n+        self.opaque_type_storage.with_log(&mut self.undo_log)\n+    }\n+\n     #[inline]\n     fn int_unification_table(\n         &mut self,"}, {"sha": "e3e48a7f890e550a296b972800520767a50ef1b9", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -14,6 +14,10 @@ use std::ops::ControlFlow;\n \n pub type OpaqueTypeMap<'tcx> = VecMap<OpaqueTypeKey<'tcx>, OpaqueTypeDecl<'tcx>>;\n \n+mod table;\n+\n+pub use table::{OpaqueTypeStorage, OpaqueTypeTable};\n+\n /// Information about the opaque types whose values we\n /// are inferring in this function (these are the `impl Trait` that\n /// appear in the return type).\n@@ -352,6 +356,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n         in_definition_scope.then_some(*origin)\n     }\n+\n+    pub fn opaque_types(&self) -> OpaqueTypeMap<'tcx> {\n+        self.inner.borrow().opaque_type_storage.opaque_types()\n+    }\n }\n \n // Visitor that requires that (almost) all regions in the type visited outlive\n@@ -513,7 +521,9 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n \n         // Use the same type variable if the exact same opaque type appears more\n         // than once in the return type (e.g., if it's passed to a type alias).\n-        if let Some(opaque_defn) = infcx.inner.borrow().opaque_types.get(&opaque_type_key) {\n+        if let Some(opaque_defn) =\n+            infcx.inner.borrow().opaque_type_storage.get_decl(&opaque_type_key)\n+        {\n             debug!(\"re-using cached concrete type {:?}\", opaque_defn.concrete_ty.kind());\n             return opaque_defn.concrete_ty;\n         }\n@@ -530,14 +540,10 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         // Foo, impl Bar)`.\n         let definition_span = self.value_span;\n \n-        {\n-            let mut infcx = self.infcx.inner.borrow_mut();\n-            infcx.opaque_types.insert(\n-                OpaqueTypeKey { def_id, substs },\n-                OpaqueTypeDecl { opaque_type: ty, definition_span, concrete_ty: ty_var, origin },\n-            );\n-            infcx.opaque_types_vars.insert(ty_var, ty);\n-        }\n+        self.infcx.inner.borrow_mut().opaque_types().register(\n+            OpaqueTypeKey { def_id, substs },\n+            OpaqueTypeDecl { opaque_type: ty, definition_span, concrete_ty: ty_var, origin },\n+        );\n \n         debug!(\"generated new type inference var {:?}\", ty_var.kind());\n "}, {"sha": "11eeeb08c9888aedd6357ddfe5f1624ec323e8f0", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -0,0 +1,69 @@\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::undo_log::UndoLogs;\n+use rustc_middle::ty::{OpaqueTypeKey, Ty};\n+\n+use crate::infer::InferCtxtUndoLogs;\n+\n+use super::{OpaqueTypeDecl, OpaqueTypeMap};\n+\n+#[derive(Default)]\n+pub struct OpaqueTypeStorage<'tcx> {\n+    // Opaque types found in explicit return types and their\n+    // associated fresh inference variable. Writeback resolves these\n+    // variables to get the concrete type, which can be used to\n+    // 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n+    pub opaque_types: OpaqueTypeMap<'tcx>,\n+\n+    /// A map from inference variables created from opaque\n+    /// type instantiations (`ty::Infer`) to the actual opaque\n+    /// type (`ty::Opaque`). Used during fallback to map unconstrained\n+    /// opaque type inference variables to their corresponding\n+    /// opaque type.\n+    pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,\n+}\n+\n+impl<'tcx> OpaqueTypeStorage<'tcx> {\n+    pub(crate) fn remove(&mut self, key: OpaqueTypeKey<'tcx>) {\n+        match self.opaque_types.remove(&key) {\n+            None => bug!(\"reverted opaque type inference that was never registered\"),\n+            Some(decl) => assert_ne!(self.opaque_types_vars.remove(decl.concrete_ty), None),\n+        }\n+    }\n+\n+    pub fn get_decl(&self, key: &OpaqueTypeKey<'tcx>) -> Option<&OpaqueTypeDecl<'tcx>> {\n+        self.opaque_types.get(key)\n+    }\n+\n+    pub fn get_opaque_type_for_infer_var(&self, key: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+        self.opaque_types_vars.get(key).copied()\n+    }\n+\n+    pub fn opaque_types(&self) -> OpaqueTypeMap<'tcx> {\n+        self.opaque_types.clone()\n+    }\n+\n+    pub fn take_opaque_types(&mut self) -> OpaqueTypeMap<'tcx> {\n+        std::mem::take(&mut self.opaque_types)\n+    }\n+\n+    #[inline]\n+    pub(crate) fn with_log<'a>(\n+        &'a mut self,\n+        undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n+    ) -> OpaqueTypeTable<'a, 'tcx> {\n+        OpaqueTypeTable { storage: self, undo_log }\n+    }\n+}\n+pub struct OpaqueTypeTable<'a, 'tcx> {\n+    storage: &'a mut OpaqueTypeStorage<'tcx>,\n+\n+    undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n+}\n+\n+impl<'a, 'tcx> OpaqueTypeTable<'a, 'tcx> {\n+    pub fn register(&mut self, key: OpaqueTypeKey<'tcx>, decl: OpaqueTypeDecl<'tcx>) {\n+        self.undo_log.push(key);\n+        self.storage.opaque_types.insert(key, decl);\n+        self.storage.opaque_types_vars.insert(decl.concrete_ty, decl.opaque_type);\n+    }\n+}"}, {"sha": "3c8a163de54822ee677bfe9d534cb7011e7afe0b", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n use rustc_data_structures::unify as ut;\n use rustc_middle::infer::unify_key::RegionVidKey;\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, OpaqueTypeKey};\n \n use crate::{\n     infer::{region_constraints, type_variable, InferCtxtInner},\n@@ -18,6 +18,7 @@ pub struct Snapshot<'tcx> {\n \n /// Records the \"undo\" data for a single operation that affects some form of inference variable.\n pub(crate) enum UndoLog<'tcx> {\n+    OpaqueTypes(OpaqueTypeKey<'tcx>),\n     TypeVariables(type_variable::UndoLog<'tcx>),\n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),\n     IntUnificationTable(sv::UndoLog<ut::Delegate<ty::IntVid>>),\n@@ -42,6 +43,7 @@ macro_rules! impl_from {\n \n // Upcast from a single kind of \"undoable action\" to the general enum\n impl_from! {\n+    OpaqueTypes(OpaqueTypeKey<'tcx>),\n     RegionConstraintCollector(region_constraints::UndoLog<'tcx>),\n     TypeVariables(type_variable::UndoLog<'tcx>),\n \n@@ -64,6 +66,7 @@ impl_from! {\n impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n     fn reverse(&mut self, undo: UndoLog<'tcx>) {\n         match undo {\n+            UndoLog::OpaqueTypes(key) => self.opaque_type_storage.remove(key),\n             UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),\n             UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),\n             UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),"}, {"sha": "7983b6ea0b2c020b4027598cbdcc311b7ff14bab", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -647,8 +647,7 @@ fn check_opaque_meets_bounds<'tcx>(\n             infcx.instantiate_opaque_types(hir_id, param_env, opaque_ty, span),\n         );\n \n-        let opaque_type_map = infcx.inner.borrow().opaque_types.clone();\n-        for (OpaqueTypeKey { def_id, substs }, opaque_defn) in opaque_type_map {\n+        for (OpaqueTypeKey { def_id, substs }, opaque_defn) in infcx.opaque_types() {\n             let hidden_type = tcx.type_of(def_id).subst(tcx, substs);\n             trace!(?hidden_type);\n             match infcx.at(&misc_cause, param_env).eq(opaque_defn.concrete_ty, hidden_type) {"}, {"sha": "d062a0cc55f4eec2a1e23b854510a4dabf7d33d5", "filename": "compiler/rustc_typeck/src/check/fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -176,7 +176,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n             .type_var_origin(ty)\n             .map(|origin| origin.span)\n             .unwrap_or(rustc_span::DUMMY_SP);\n-        let oty = self.inner.borrow().opaque_types_vars.get(ty).copied();\n+        let oty = self.inner.borrow().opaque_type_storage.get_opaque_type_for_infer_var(ty);\n         if let Some(opaque_ty) = oty {\n             debug!(\n                 \"fallback_opaque_type_vars(ty={:?}): falling back to opaque type {:?}\","}, {"sha": "165ca1574cd944cd237ab076cd4a2fd1101663c0", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b0746f6c0cf41e94e4bbd1592c52082a9cad7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=d49b0746f6c0cf41e94e4bbd1592c52082a9cad7", "patch": "@@ -498,8 +498,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     #[instrument(skip(self, span), level = \"debug\")]\n     fn visit_opaque_types(&mut self, span: Span) {\n-        let opaque_types = self.fcx.infcx.inner.borrow().opaque_types.clone();\n-        for (opaque_type_key, opaque_defn) in opaque_types {\n+        for (opaque_type_key, opaque_defn) in self.fcx.infcx.opaque_types() {\n             let hir_id =\n                 self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());\n             let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);"}]}