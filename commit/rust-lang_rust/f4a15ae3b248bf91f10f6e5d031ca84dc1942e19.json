{"sha": "f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTE1YWUzYjI0OGJmOTFmMTBmNmU1ZDAzMWNhODRkYzE5NDJlMTk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-31T15:22:51Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T23:31:58Z"}, "message": "Implement Print for FnOnce(&mut Buffer)\n\nThis means that callers can pass in a closure like\n`|buf| some_function(..., &mut buf)` and pass in arbitrary arguments to\nthat function without complicating the trait definition. We also keep\nthe impl for str and String, since it's useful to be able to just pass\nin \"\" or format!(\"{}\"...) results in some cases.\n\nThis changes Print's definition to take self, instead of &self, because\notherwise FnOnce cannot be called directly. We could instead take FnMut\nor even Fn, but that seems like it'd merely complicate matters -- most\nof the time, the FnOnce does not constrain us at all anyway. If it does,\na custom Print impl for &'_ SomeStruct is not all that painful.", "tree": {"sha": "8a86909990c76fcddc8cfb30d05aa0c47aeadab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a86909990c76fcddc8cfb30d05aa0c47aeadab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "html_url": "https://github.com/rust-lang/rust/commit/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "html_url": "https://github.com/rust-lang/rust/commit/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "5d86f0566111fdee39df40a439f84bab7722bea6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "patch": "@@ -19,23 +19,25 @@ use crate::html::item_type::ItemType;\n use crate::html::render::{self, cache, CURRENT_DEPTH};\n \n pub trait Print {\n-    fn print(&self, buffer: &mut Buffer);\n+    fn print(self, buffer: &mut Buffer);\n }\n \n-impl<T: ?Sized + Print> Print for &'_ T {\n-    fn print(&self, buffer: &mut Buffer) {\n-        (&**self).print(buffer)\n+impl<F> Print for F\n+    where F: FnOnce(&mut Buffer),\n+{\n+    fn print(self, buffer: &mut Buffer) {\n+        (self)(buffer)\n     }\n }\n \n impl Print for String {\n-    fn print(&self, buffer: &mut Buffer) {\n-        buffer.write_str(self);\n+    fn print(self, buffer: &mut Buffer) {\n+        buffer.write_str(&self);\n     }\n }\n \n-impl Print for str {\n-    fn print(&self, buffer: &mut Buffer) {\n+impl Print for &'_ str {\n+    fn print(self, buffer: &mut Buffer) {\n         buffer.write_str(self);\n     }\n }\n@@ -92,7 +94,7 @@ impl Buffer {\n         self.buffer.write_fmt(v).unwrap();\n     }\n \n-    crate fn to_display<T: ?Sized + Print>(mut self, t: &T) -> String {\n+    crate fn to_display<T: Print>(mut self, t: T) -> String {\n         t.print(&mut self);\n         self.into_inner()\n     }"}, {"sha": "1202f411f912cc4a461e540ef103bbec8191cb28", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "patch": "@@ -34,7 +34,7 @@ pub struct Page<'a> {\n pub fn render<T: fmt::Display, S: Print>(\n     layout: &Layout,\n     page: &Page<'_>,\n-    sidebar: &S,\n+    sidebar: S,\n     t: &T,\n     themes: &[PathBuf],\n ) -> String {"}, {"sha": "fc7038f8bda96e9eb58e8125b29c5c886d4e42ff", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "patch": "@@ -1174,7 +1174,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                                     })\n                                     .collect::<String>());\n             let v = layout::render(&cx.shared.layout,\n-                           &page, &(\"\"), &content,\n+                           &page, \"\", &content,\n                            &cx.shared.themes);\n             cx.shared.fs.write(&dst, v.as_bytes())?;\n         }\n@@ -1921,7 +1921,7 @@ impl Context {\n             String::new()\n         };\n         let v = layout::render(&self.shared.layout,\n-                       &page, &sidebar, &all,\n+                       &page, sidebar, &all,\n                        &self.shared.themes);\n         self.shared.fs.write(&final_file, v.as_bytes())?;\n \n@@ -1937,7 +1937,7 @@ impl Context {\n         themes.push(PathBuf::from(\"settings.css\"));\n         let v = layout::render(\n             &self.shared.layout,\n-            &page, &sidebar, &settings,\n+            &page, sidebar, &settings,\n             &themes);\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n \n@@ -1994,7 +1994,7 @@ impl Context {\n \n         if !self.render_redirect_pages {\n             layout::render(&self.shared.layout, &page,\n-                           &Sidebar{ cx: self, item: it },\n+                           Sidebar{ cx: self, item: it },\n                            &Item{ cx: self, item: it },\n                            &self.shared.themes)\n         } else {\n@@ -4267,7 +4267,7 @@ fn item_foreign_type(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item)\n }\n \n impl Print for Sidebar<'_> {\n-    fn print(&self, buffer: &mut Buffer) {\n+    fn print(self, buffer: &mut Buffer) {\n         let cx = self.cx;\n         let it = self.item;\n         let parentlen = cx.current.len() - if it.is_mod() {1} else {0};"}, {"sha": "94ae14226097f411ce57d917ac44d4dc0c00f6ce", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a15ae3b248bf91f10f6e5d031ca84dc1942e19/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=f4a15ae3b248bf91f10f6e5d031ca84dc1942e19", "patch": "@@ -120,7 +120,7 @@ impl<'a> SourceCollector<'a> {\n             static_extra_scripts: &[&format!(\"source-script{}\", self.scx.resource_suffix)],\n         };\n         let v = layout::render(&self.scx.layout,\n-                       &page, &(\"\"), &Source(contents),\n+                       &page, \"\", &Source(contents),\n                        &self.scx.themes);\n         self.scx.fs.write(&cur, v.as_bytes())?;\n         self.scx.local_sources.insert(p.clone(), href);"}]}