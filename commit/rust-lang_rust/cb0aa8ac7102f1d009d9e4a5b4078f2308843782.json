{"sha": "cb0aa8ac7102f1d009d9e4a5b4078f2308843782", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMGFhOGFjNzEwMmYxZDAwOWQ5ZTRhNWI0MDc4ZjIzMDg4NDM3ODI=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-05T20:12:15Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-08T03:45:39Z"}, "message": "Cleanup collections::slice documentation.\n\nThis does a few things:\n\n - remove references to ~[] and the OwnedVector trait, which are both\n   obsolete\n - correct the docs to say that this is the slice module, not the vec\n   module\n - add a sentence pointing out that vectors are distinct from Vec\n - remove documentation on Vec.\n\ncloses #15459", "tree": {"sha": "57fa75b85718c19417082b409a3533ec77ef704b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57fa75b85718c19417082b409a3533ec77ef704b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb0aa8ac7102f1d009d9e4a5b4078f2308843782", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb0aa8ac7102f1d009d9e4a5b4078f2308843782", "html_url": "https://github.com/rust-lang/rust/commit/cb0aa8ac7102f1d009d9e4a5b4078f2308843782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb0aa8ac7102f1d009d9e4a5b4078f2308843782/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da38890f1f734799dc06460edf26c560db59a8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da38890f1f734799dc06460edf26c560db59a8e", "html_url": "https://github.com/rust-lang/rust/commit/6da38890f1f734799dc06460edf26c560db59a8e"}], "stats": {"total": 83, "additions": 35, "deletions": 48}, "files": [{"sha": "e616824d944243e62daf7a782bc92cd388ad3fd1", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 35, "deletions": 48, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/cb0aa8ac7102f1d009d9e4a5b4078f2308843782/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb0aa8ac7102f1d009d9e4a5b4078f2308843782/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=cb0aa8ac7102f1d009d9e4a5b4078f2308843782", "patch": "@@ -10,69 +10,67 @@\n \n /*!\n \n-Utilities for vector manipulation\n+Utilities for slice manipulation\n \n-The `vec` module contains useful code to help work with vector values.\n-Vectors are Rust's list type. Vectors contain zero or more values of\n-homogeneous types:\n+The `slice` module contains useful code to help work with slice values.\n+Slices are a view into a block of memory represented as a pointer and a length.\n \n ```rust\n-let int_vector = [1i, 2i, 3i];\n-let str_vector = [\"one\", \"two\", \"three\"];\n+// slicing a Vec\n+let vec = vec!(1i, 2, 3);\n+let int_slice = vec.as_slice();\n+// coercing an array to a slice\n+let str_slice: &[&str] = [\"one\", \"two\", \"three\"];\n ```\n \n-This is a big module, but for a high-level overview:\n+Slices are either mutable or shared. The shared slice type is `&[T]`,\n+while the mutable slice type is `&mut[T]`. For example, you can mutate the\n+block of memory that a mutable slice points to:\n+\n+```rust\n+let x: &mut[int] = [1i, 2, 3];\n+x[1] = 7;\n+assert_eq!(x[0], 1);\n+assert_eq!(x[1], 7);\n+assert_eq!(x[2], 3);\n+```\n+\n+Here are some of the things this module contains:\n \n ## Structs\n \n-Several structs that are useful for vectors, such as `Items`, which\n-represents iteration over a vector.\n+There are several structs that are useful for slices, such as `Items`, which\n+represents iteration over a slice.\n \n ## Traits\n \n-A number of traits add methods that allow you to accomplish tasks with vectors.\n-\n-Traits defined for the `&[T]` type (a vector slice), have methods that can be\n-called on either owned vectors, denoted `~[T]`, or on vector slices themselves.\n-These traits include `ImmutableVector`, and `MutableVector` for the `&mut [T]`\n-case.\n+A number of traits add methods that allow you to accomplish tasks with slices.\n+These traits include `ImmutableVector`, which is defined for `&[T]` types,\n+and `MutableVector`, defined for `&mut [T]` types.\n \n An example is the method `.slice(a, b)` that returns an immutable \"view\" into\n-a vector or a vector slice from the index interval `[a, b)`:\n+a `Vec` or another slice from the index interval `[a, b)`:\n \n ```rust\n let numbers = [0i, 1i, 2i];\n let last_numbers = numbers.slice(1, 3);\n // last_numbers is now &[1i, 2i]\n ```\n \n-Traits defined for the `~[T]` type, like `OwnedVector`, can only be called\n-on such vectors. These methods deal with adding elements or otherwise changing\n-the allocation of the vector.\n-\n-An example is the method `.push(element)` that will add an element at the end\n-of the vector:\n-\n-```rust\n-let mut numbers = vec![0i, 1i, 2i];\n-numbers.push(7);\n-// numbers is now vec![0i, 1i, 2i, 7i];\n-```\n-\n ## Implementations of other traits\n \n-Vectors are a very useful type, and so there's several implementations of\n-traits from other modules. Some notable examples:\n+There are several implementations of common traits for slices. Some examples\n+include:\n \n * `Clone`\n-* `Eq`, `Ord`, `Eq`, `Ord` -- vectors can be compared,\n-  if the element type defines the corresponding trait.\n+* `Eq`, `Ord` - for immutable slices whose element type are `Eq` or `Ord`.\n+* `Hash` - for slices whose element type is `Hash`\n \n ## Iteration\n \n-The method `iter()` returns an iteration value for a vector or a vector slice.\n-The iterator yields references to the vector's elements, so if the element\n-type of the vector is `int`, the element type of the iterator is `&int`.\n+The method `iter()` returns an iteration value for a slice. The iterator\n+yields references to the slice's elements, so if the element\n+type of the slice is `int`, the element type of the iterator is `&int`.\n \n ```rust\n let numbers = [0i, 1i, 2i];\n@@ -82,18 +80,7 @@ for &x in numbers.iter() {\n ```\n \n * `.mut_iter()` returns an iterator that allows modifying each value.\n-* `.move_iter()` converts an owned vector into an iterator that\n-  moves out a value from the vector each iteration.\n-* Further iterators exist that split, chunk or permute the vector.\n-\n-## Function definitions\n-\n-There are a number of free functions that create or take vectors, for example:\n-\n-* Creating a vector, like `from_elem` and `from_fn`\n-* Creating a vector with a given size: `with_capacity`\n-* Modifying a vector and returning it, like `append`\n-* Operations on paired elements, like `unzip`.\n+* Further iterators exist that split, chunk or permute the slice.\n \n */\n "}]}