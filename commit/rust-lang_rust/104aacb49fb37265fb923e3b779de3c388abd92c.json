{"sha": "104aacb49fb37265fb923e3b779de3c388abd92c", "node_id": "C_kwDOAAsO6NoAKDEwNGFhY2I0OWZiMzcyNjVmYjkyM2UzYjc3OWRlM2MzODhhYmQ5MmM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-11T04:10:09Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-28T01:02:15Z"}, "message": "Add tests and error messages", "tree": {"sha": "be3daaea4f4204da4bc7fbc937c47805bc54b745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3daaea4f4204da4bc7fbc937c47805bc54b745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104aacb49fb37265fb923e3b779de3c388abd92c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104aacb49fb37265fb923e3b779de3c388abd92c", "html_url": "https://github.com/rust-lang/rust/commit/104aacb49fb37265fb923e3b779de3c388abd92c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104aacb49fb37265fb923e3b779de3c388abd92c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0308d4ad187e7715d2bb7efcfce58e6d93362f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/0308d4ad187e7715d2bb7efcfce58e6d93362f07", "html_url": "https://github.com/rust-lang/rust/commit/0308d4ad187e7715d2bb7efcfce58e6d93362f07"}], "stats": {"total": 353, "additions": 339, "deletions": 14}, "files": [{"sha": "dac61ec975e2f9cef32e5f64a0f0c008037d0832", "filename": "compiler/rustc_ast_lowering/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_ast_lowering%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_ast_lowering%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fmessages.ftl?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -139,3 +139,11 @@ ast_lowering_trait_fn_async =\n     .label = `async` because of this\n     .note = `async` trait functions are not currently supported\n     .note2 = consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+ast_lowering_bad_return_type_notation_inputs =\n+    argument types not allowed with return type notation\n+    .suggestion = remove the input types\n+\n+ast_lowering_bad_return_type_notation_output =\n+    return type not allowed with return type notation\n+    .suggestion = remove the return type"}, {"sha": "4eefd951b24aa22578eff90b54f76bc8eefef2eb", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -347,3 +347,19 @@ pub struct TraitFnAsync {\n     #[label]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+pub enum BadReturnTypeNotation {\n+    #[diag(ast_lowering_bad_return_type_notation_inputs)]\n+    Inputs {\n+        #[primary_span]\n+        #[suggestion(code = \"()\", applicability = \"maybe-incorrect\")]\n+        span: Span,\n+    },\n+    #[diag(ast_lowering_bad_return_type_notation_output)]\n+    Output {\n+        #[primary_span]\n+        #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+        span: Span,\n+    },\n+}"}, {"sha": "aa4ff2882b29cfaa24ab6bb8bf17c53adc9722f8", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -987,10 +987,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 GenericArgs::AngleBracketed(data) => {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n-                GenericArgs::Parenthesized(data)\n-                    if self.tcx.features().return_type_notation =>\n-                {\n-                    // TODO: Check the parens + no return type\n+                GenericArgs::Parenthesized(data) if self.tcx.features().return_type_notation => {\n+                    if !data.inputs.is_empty() {\n+                        self.tcx.sess.emit_err(errors::BadReturnTypeNotation::Inputs {\n+                            span: data.inputs_span,\n+                        });\n+                    } else if let FnRetTy::Ty(ty) = &data.output {\n+                        self.tcx.sess.emit_err(errors::BadReturnTypeNotation::Output {\n+                            span: data.inputs_span.shrink_to_hi().to(ty.span),\n+                        });\n+                    }\n                     GenericArgsCtor {\n                         args: Default::default(),\n                         bindings: &[],\n@@ -1000,7 +1006,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 GenericArgs::Parenthesized(data) => {\n                     self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    // TODO: Add a RTN feature error if the parens are shaped correctly\n+                    // FIXME(return_type_notation): we could issue a feature error\n+                    // if the parens are empty and there's no return type.\n                     self.lower_angle_bracketed_parameter_data(\n                         &data.as_angle_bracketed_args(),\n                         ParamMode::Explicit,"}, {"sha": "a57f3987849161a64a6475c5eac35a906e779c03", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -178,3 +178,14 @@ hir_analysis_invalid_union_field =\n \n hir_analysis_invalid_union_field_sugg =\n     wrap the field type in `ManuallyDrop<...>`\n+\n+hir_analysis_return_type_notation_on_non_rpitit =\n+    return type notation used on function that is not `async` and does not return `impl Trait`\n+    .note = function returns `{$ty}`, which is not compatible with associated type return bounds\n+    .label = this function must be `async` or return `impl Trait`\n+\n+hir_analysis_return_type_notation_equality_bound =\n+    return type notation is not allowed to use type equality\n+\n+hir_analysis_return_type_notation_missing_method =\n+    cannot find associated function `{$assoc_name}` in trait `{$trait_name}`"}, {"sha": "1e590d93c8c0a68644cb945ed88f56912ee94be6", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -1086,9 +1086,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let tcx = self.tcx();\n \n-        // TODO: rtn comment goes here\n-        let associated_return_type_bound =\n-            binding.gen_args.parenthesized && tcx.features().associated_return_type_bounds;\n+        let return_type_notation =\n+            binding.gen_args.parenthesized && tcx.features().return_type_notation;\n \n         let candidate = if return_type_notation {\n             if self.trait_defines_associated_item_named(\n@@ -1098,8 +1097,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ) {\n                 trait_ref\n             } else {\n-                // TODO: error\n-                todo!()\n+                return Err(tcx.sess.emit_err(crate::errors::ReturnTypeNotationMissingMethod {\n+                    span: binding.span,\n+                    trait_name: tcx.item_name(trait_ref.def_id()),\n+                    assoc_name: binding.item_name.name,\n+                }));\n             }\n         } else if self.trait_defines_associated_item_named(\n             trait_ref.def_id(),\n@@ -1218,7 +1220,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             {\n                 alias_ty\n             } else {\n-                todo!(\"found return type of {output:?}\");\n+                return Err(self.tcx().sess.emit_err(\n+                    crate::errors::ReturnTypeNotationOnNonRpitit {\n+                        span: binding.span,\n+                        ty: tcx.liberate_late_bound_regions(assoc_item.def_id, output),\n+                        fn_span: tcx.hir().span_if_local(assoc_item.def_id),\n+                        note: (),\n+                    },\n+                ));\n             };\n \n             // Finally, move the fn return type's bound vars over to account for the early bound\n@@ -1292,9 +1301,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         match binding.kind {\n-            ConvertedBindingKind::Equality(..) if associated_return_type_bound => {\n-                // TODO: error\n-                todo!()\n+            ConvertedBindingKind::Equality(..) if return_type_notation => {\n+                return Err(self.tcx().sess.emit_err(\n+                    crate::errors::ReturnTypeNotationEqualityBound { span: binding.span },\n+                ));\n             }\n             ConvertedBindingKind::Equality(mut term) => {\n                 // \"Desugar\" a constraint like `T: Iterator<Item = u32>` this to"}, {"sha": "c71ce9a0bc7cd388b4cd4b9d5bc179804cb75997", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -471,6 +471,18 @@ pub(crate) struct InvalidUnionField {\n     pub note: (),\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_return_type_notation_on_non_rpitit)]\n+pub(crate) struct ReturnTypeNotationOnNonRpitit<'tcx> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+    #[label]\n+    pub fn_span: Option<Span>,\n+    #[note]\n+    pub note: (),\n+}\n+\n #[derive(Subdiagnostic)]\n #[multipart_suggestion(hir_analysis_invalid_union_field_sugg, applicability = \"machine-applicable\")]\n pub(crate) struct InvalidUnionFieldSuggestion {\n@@ -479,3 +491,19 @@ pub(crate) struct InvalidUnionFieldSuggestion {\n     #[suggestion_part(code = \">\")]\n     pub hi: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_return_type_notation_equality_bound)]\n+pub(crate) struct ReturnTypeNotationEqualityBound {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_return_type_notation_missing_method)]\n+pub(crate) struct ReturnTypeNotationMissingMethod {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_name: Symbol,\n+    pub assoc_name: Symbol,\n+}"}, {"sha": "68e991de51f1b15382043a5c798a83a8695199ea", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,17 @@\n+// edition: 2021\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn foo<T: Trait<method(i32): Send>>() {}\n+//~^ ERROR argument types not allowed with return type notation\n+\n+fn bar<T: Trait<method() -> (): Send>>() {}\n+//~^ ERROR return type not allowed with return type notation\n+\n+fn main() {}"}, {"sha": "03d9774327153c7425e174a6a255df5d5947250a", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,31 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-inputs-and-output.rs:3:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-inputs-and-output.rs:3:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: argument types not allowed with return type notation\n+  --> $DIR/bad-inputs-and-output.rs:11:23\n+   |\n+LL | fn foo<T: Trait<method(i32): Send>>() {}\n+   |                       ^^^^^ help: remove the input types: `()`\n+\n+error: return type not allowed with return type notation\n+  --> $DIR/bad-inputs-and-output.rs:14:25\n+   |\n+LL | fn bar<T: Trait<method() -> (): Send>>() {}\n+   |                         ^^^^^^ help: remove the return type\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+"}, {"sha": "0b7530b65d758e4d3dfd46c4fe8fa57f460c2b14", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,28 @@\n+// revisions: with without\n+// edition: 2021\n+//[with] check-pass\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Foo {\n+    async fn method() -> Result<(), ()>;\n+}\n+\n+async fn foo<T: Foo>() -> Result<(), ()> {\n+    T::method().await?;\n+    Ok(())\n+}\n+\n+fn is_send(_: impl Send) {}\n+\n+fn test<\n+    #[cfg(with)] T: Foo<method(): Send>,\n+    #[cfg(without)] T: Foo,\n+>() {\n+    is_send(foo::<T>());\n+    //[without]~^ ERROR future cannot be sent between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "722c774cb3394e2960917cd54c9812bd3cc7ca2c", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.with.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "1645d8c26502ade1168a84b8f208bcc000e537cd", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.without.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,37 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/basic.rs:24:13\n+   |\n+LL |     is_send(foo::<T>());\n+   |             ^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = Result<(), ()>>`, the trait `Send` is not implemented for `impl Future<Output = Result<(), ()>>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/basic.rs:14:5\n+   |\n+LL |     T::method().await?;\n+   |     ^^^^^^^^^^^ await occurs here on type `impl Future<Output = Result<(), ()>>`, which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/basic.rs:18:20\n+   |\n+LL | fn is_send(_: impl Send) {}\n+   |                    ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}, {"sha": "75f757e90259ba1433a479150bbf43c22c05cdad", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,16 @@\n+// edition: 2021\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+use std::future::Future;\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n+//~^ ERROR return type notation is not allowed to use type equality\n+\n+fn main() {}"}, {"sha": "c5b2e5710d4a79db20b38662d643c1cdabe42e56", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,25 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality.rs:3:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality.rs:3:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: return type notation is not allowed to use type equality\n+  --> $DIR/equality.rs:13:18\n+   |\n+LL | fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}, {"sha": "7b98a5cdafdd3b27cfcab2e17e5d45842d3989e4", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,14 @@\n+// edition: 2021\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn bar<T: Trait<methid(): Send>>() {}\n+//~^ ERROR cannot find associated function `methid` in trait `Trait`\n+\n+fn main() {}"}, {"sha": "34f5bda884d4caa9dd11ecb56c3e85f496032c6e", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,25 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing.rs:3:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing.rs:3:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: cannot find associated function `methid` in trait `Trait`\n+  --> $DIR/missing.rs:11:17\n+   |\n+LL | fn bar<T: Trait<methid(): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}, {"sha": "db5f6fe389ea7769967ec6e59ec56da5c78bd41a", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,11 @@\n+#![feature(return_type_notation)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+\n+trait Trait {\n+    fn method() {}\n+}\n+\n+fn test<T: Trait<method(): Send>>() {}\n+//~^ ERROR  return type notation used on function that is not `async` and does not return `impl Trait`\n+\n+fn main() {}"}, {"sha": "31b793995f8ab965616ac86d8cad41c364ef7401", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -0,0 +1,22 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/non-rpitit.rs:1:12\n+   |\n+LL | #![feature(return_type_notation)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: return type notation used on function that is not `async` and does not return `impl Trait`\n+  --> $DIR/non-rpitit.rs:8:18\n+   |\n+LL |     fn method() {}\n+   |     ----------- this function must be `async` or return `impl Trait`\n+...\n+LL | fn test<T: Trait<method(): Send>>() {}\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: function returns `()`, which is not compatible with associated type return bounds\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}