{"sha": "83c3b7f5a4f558880501633c65400350d33960cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYzNiN2Y1YTRmNTU4ODgwNTAxNjMzYzY1NDAwMzUwZDMzOTYwY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T08:20:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T08:20:31Z"}, "message": "Auto merge of #30930 - oli-obk:fix/30887, r=arielb1\n\nthis makes sure the checks run before typeck (which might use the constant or const\nfunction to calculate an array length) and gives prettier error messages in case of for\nloops and such (since they aren't expanded yet).\n\nfixes #30887\n\nr? @pnkfelix", "tree": {"sha": "b6b0db82fd41b438abe9daaeae12603243f06442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6b0db82fd41b438abe9daaeae12603243f06442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83c3b7f5a4f558880501633c65400350d33960cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83c3b7f5a4f558880501633c65400350d33960cd", "html_url": "https://github.com/rust-lang/rust/commit/83c3b7f5a4f558880501633c65400350d33960cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83c3b7f5a4f558880501633c65400350d33960cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c490538d8caf2d5796986bb68503f4e086f9820", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c490538d8caf2d5796986bb68503f4e086f9820", "html_url": "https://github.com/rust-lang/rust/commit/3c490538d8caf2d5796986bb68503f4e086f9820"}, {"sha": "1471d932a9d191216c0da318c085b508f9bdfc1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1471d932a9d191216c0da318c085b508f9bdfc1f", "html_url": "https://github.com/rust-lang/rust/commit/1471d932a9d191216c0da318c085b508f9bdfc1f"}], "stats": {"total": 382, "additions": 310, "deletions": 72}, "files": [{"sha": "5cc8a46878439740273abc44fc2629219da25819", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -57,7 +57,7 @@ TARGET_CRATES := libc std flate arena term \\\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n                 rustc_data_structures rustc_front rustc_platform_intrinsics \\\n-                rustc_plugin rustc_metadata\n+                rustc_plugin rustc_metadata rustc_passes\n HOST_CRATES := syntax syntax_ext $(RUSTC_CRATES) rustdoc fmt_macros\n TOOLS := compiletest rustdoc rustc rustbook error-index-generator\n \n@@ -97,11 +97,12 @@ DEPS_rustc_data_structures := std log serialize\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n                      rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n \t             rustc_trans rustc_privacy rustc_lint rustc_front rustc_plugin \\\n-                     rustc_metadata syntax_ext\n+                     rustc_metadata syntax_ext rustc_passes\n DEPS_rustc_front := std syntax log serialize\n DEPS_rustc_lint := rustc log syntax\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n DEPS_rustc_metadata := rustc rustc_front syntax rbml\n+DEPS_rustc_passes := syntax rustc core\n DEPS_rustc_mir := rustc rustc_front syntax\n DEPS_rustc_resolve := arena rustc rustc_front log syntax\n DEPS_rustc_platform_intrinsics := rustc rustc_llvm"}, {"sha": "9f323379b9591b50016569ada937cd859cfb86cf", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -316,21 +316,6 @@ See [RFC 911] for more details on the design of `const fn`s.\n [RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n \"##,\n \n-E0016: r##\"\n-Blocks in constants may only contain items (such as constant, function\n-definition, etc...) and a tail expression. Example:\n-\n-```\n-const FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n-```\n-\n-To avoid it, you have to replace the non-item object:\n-\n-```\n-const FOO: i32 = { const X : i32 = 0; X };\n-```\n-\"##,\n-\n E0017: r##\"\n References in statics and constants may only refer to immutable values. Example:\n \n@@ -422,24 +407,6 @@ const X: i32 = 42 / 0;\n ```\n \"##,\n \n-E0022: r##\"\n-Constant functions are not allowed to mutate anything. Thus, binding to an\n-argument with a mutable pattern is not allowed. For example,\n-\n-```\n-const fn foo(mut x: u8) {\n-    // do stuff\n-}\n-```\n-\n-is bad because the function body may not mutate `x`.\n-\n-Remove any mutable bindings from the argument list to fix this error. In case\n-you need to mutate the argument, try lazily initializing a global variable\n-instead of using a `const fn`, or refactoring the code to a functional style to\n-avoid mutation if possible.\n-\"##,\n-\n E0030: r##\"\n When matching against a range, the compiler verifies that the range is\n non-empty.  Range patterns include both end-points, so this is equivalent to\n@@ -2358,7 +2325,6 @@ register_diagnostics! {\n     E0316, // nested quantification of lifetimes\n     E0453, // overruled by outer forbid\n     E0471, // constant evaluation error: ..\n-    E0472, // asm! is unsupported on this target\n     E0473, // dereference of reference outside its lifetime\n     E0474, // captured variable `..` does not outlive the enclosing closure\n     E0475, // index of slice outside its lifetime"}, {"sha": "7a047cde0db4f9d7f0aad32dcd882b2b31e98264", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -102,7 +102,6 @@ pub mod middle {\n     pub mod check_static_recursion;\n     pub mod check_loop;\n     pub mod check_match;\n-    pub mod check_no_asm;\n     pub mod check_rvalues;\n     pub mod const_eval;\n     pub mod cstore;"}, {"sha": "6001b1205871afe404bcb9f109e9bf55e53953dc", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -175,21 +175,6 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             _ => Mode::Var\n         };\n \n-        // Ensure the arguments are simple, not mutable/by-ref or patterns.\n-        if mode == Mode::ConstFn {\n-            for arg in &fd.inputs {\n-                match arg.pat.node {\n-                    hir::PatWild => {}\n-                    hir::PatIdent(hir::BindByValue(hir::MutImmutable), _, None) => {}\n-                    _ => {\n-                        span_err!(self.tcx.sess, arg.pat.span, E0022,\n-                                  \"arguments of constant functions can only \\\n-                                   be immutable by-value bindings\");\n-                    }\n-                }\n-            }\n-        }\n-\n         let qualif = self.with_mode(mode, |this| {\n             this.with_euv(Some(fn_id), |euv| euv.walk_fn(fd, b));\n             intravisit::walk_fn(this, fk, fd, b, s);\n@@ -397,24 +382,20 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, block: &hir::Block) {\n         // Check all statements in the block\n         for stmt in &block.stmts {\n-            let span = match stmt.node {\n+            match stmt.node {\n                 hir::StmtDecl(ref decl, _) => {\n                     match decl.node {\n-                        hir::DeclLocal(_) => decl.span,\n-\n+                        hir::DeclLocal(_) => {},\n                         // Item statements are allowed\n                         hir::DeclItem(_) => continue\n                     }\n                 }\n-                hir::StmtExpr(ref expr, _) => expr.span,\n-                hir::StmtSemi(ref semi, _) => semi.span,\n-            };\n-            self.add_qualif(ConstQualif::NOT_CONST);\n-            if self.mode != Mode::Var {\n-                span_err!(self.tcx.sess, span, E0016,\n-                          \"blocks in {}s are limited to items and \\\n-                           tail expressions\", self.msg());\n+                hir::StmtExpr(_, _) => {},\n+                hir::StmtSemi(_, _) => {},\n             }\n+            self.add_qualif(ConstQualif::NOT_CONST);\n+            // anything else should have been caught by check_const_fn\n+            assert_eq!(self.mode, Mode::Var);\n         }\n         intravisit::walk_block(self, block);\n     }"}, {"sha": "01ffd0efbe3143c4373eec24af55d7af9725a05d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -632,7 +632,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     time(time_passes,\n          \"checking for inline asm in case the target doesn't support it\",\n-         || middle::check_no_asm::check_crate(sess, &krate));\n+         || ::rustc_passes::no_asm::check_crate(sess, &krate));\n \n     // One final feature gating of the true AST that gets compiled\n     // later, to make sure we've got everything (e.g. configuration\n@@ -647,6 +647,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         sess.abort_if_errors();\n     });\n \n+    time(time_passes,\n+         \"const fn bodies and arguments\",\n+         || ::rustc_passes::const_fn::check_crate(sess, &krate));\n+\n     if sess.opts.debugging_opts.input_stats {\n         println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n     }"}, {"sha": "31151e10a5a55c9d2b8be45aaf6e097047ae20db", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -38,6 +38,7 @@ extern crate libc;\n extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_borrowck;\n+extern crate rustc_passes;\n extern crate rustc_front;\n extern crate rustc_lint;\n extern crate rustc_plugin;"}, {"sha": "cda5267f7271b4400b532b9593a673483d5902e3", "filename": "src/librustc_passes/const_fn.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -0,0 +1,117 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Verifies that const fn arguments are immutable by value bindings\n+//! and the const fn body doesn't contain any statements\n+\n+use rustc::session::Session;\n+\n+use syntax::ast;\n+use syntax::visit::{self, Visitor, FnKind};\n+use syntax::codemap::Span;\n+\n+pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n+    visit::walk_crate(&mut CheckConstFn{ sess: sess }, krate);\n+    sess.abort_if_errors();\n+}\n+\n+struct CheckConstFn<'a> {\n+    sess: &'a Session,\n+}\n+\n+struct CheckBlock<'a> {\n+    sess: &'a Session,\n+    kind: &'static str,\n+}\n+\n+impl<'a, 'v> Visitor<'v> for CheckBlock<'a> {\n+    fn visit_block(&mut self, block: &'v ast::Block) {\n+        check_block(&self.sess, block, self.kind);\n+        CheckConstFn{ sess: self.sess}.visit_block(block);\n+    }\n+    fn visit_expr(&mut self, e: &'v ast::Expr) {\n+        if let ast::ExprClosure(..) = e.node {\n+            CheckConstFn{ sess: self.sess}.visit_expr(e);\n+        } else {\n+            visit::walk_expr(self, e);\n+        }\n+    }\n+    fn visit_item(&mut self, _i: &'v ast::Item) { panic!(\"should be handled in CheckConstFn\") }\n+    fn visit_fn(&mut self,\n+                _fk: FnKind<'v>,\n+                _fd: &'v ast::FnDecl,\n+                _b: &'v ast::Block,\n+                _s: Span,\n+                _fn_id: ast::NodeId) { panic!(\"should be handled in CheckConstFn\") }\n+}\n+\n+fn check_block(sess: &Session, b: &ast::Block, kind: &'static str) {\n+    // Check all statements in the block\n+    for stmt in &b.stmts {\n+        let span = match stmt.node {\n+            ast::StmtDecl(ref decl, _) => {\n+                match decl.node {\n+                    ast::DeclLocal(_) => decl.span,\n+\n+                    // Item statements are allowed\n+                    ast::DeclItem(_) => continue,\n+                }\n+            }\n+            ast::StmtExpr(ref expr, _) => expr.span,\n+            ast::StmtSemi(ref semi, _) => semi.span,\n+            ast::StmtMac(..) => unreachable!(),\n+        };\n+        span_err!(sess, span, E0016,\n+                  \"blocks in {}s are limited to items and tail expressions\", kind);\n+    }\n+}\n+\n+impl<'a, 'v> Visitor<'v> for CheckConstFn<'a> {\n+    fn visit_item(&mut self, i: &'v ast::Item) {\n+        visit::walk_item(self, i);\n+        match i.node {\n+            ast::ItemConst(_, ref e) => {\n+                CheckBlock{ sess: self.sess, kind: \"constant\"}.visit_expr(e)\n+            },\n+            ast::ItemStatic(_, _, ref e) => {\n+                CheckBlock{ sess: self.sess, kind: \"static\"}.visit_expr(e)\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    fn visit_fn(&mut self,\n+                fk: FnKind<'v>,\n+                fd: &'v ast::FnDecl,\n+                b: &'v ast::Block,\n+                s: Span,\n+                _fn_id: ast::NodeId) {\n+        visit::walk_fn(self, fk, fd, b, s);\n+        match fk {\n+            FnKind::ItemFn(_, _, _, ast::Constness::Const, _, _) => {},\n+            FnKind::Method(_, m, _) if m.constness == ast::Constness::Const => {},\n+            _ => return,\n+        }\n+\n+        // Ensure the arguments are simple, not mutable/by-ref or patterns.\n+        for arg in &fd.inputs {\n+            match arg.pat.node {\n+                ast::PatWild => {}\n+                ast::PatIdent(ast::BindingMode::ByValue(ast::MutImmutable), _, None) => {}\n+                _ => {\n+                    span_err!(self.sess, arg.pat.span, E0022,\n+                              \"arguments of constant functions can only \\\n+                               be immutable by-value bindings\");\n+                }\n+            }\n+        }\n+        check_block(&self.sess, b, \"const function\");\n+    }\n+}"}, {"sha": "380eada18a1e1c0c4d1d23bf20148b6ea03e3317", "filename": "src/librustc_passes/diagnostics.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_long_diagnostics! {\n+E0016: r##\"\n+Blocks in constants may only contain items (such as constant, function\n+definition, etc...) and a tail expression. Example:\n+\n+```\n+const FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n+```\n+\n+To avoid it, you have to replace the non-item object:\n+\n+```\n+const FOO: i32 = { const X : i32 = 0; X };\n+```\n+\"##,\n+\n+E0022: r##\"\n+Constant functions are not allowed to mutate anything. Thus, binding to an\n+argument with a mutable pattern is not allowed. For example,\n+\n+```\n+const fn foo(mut x: u8) {\n+    // do stuff\n+}\n+```\n+\n+is bad because the function body may not mutate `x`.\n+\n+Remove any mutable bindings from the argument list to fix this error. In case\n+you need to mutate the argument, try lazily initializing a global variable\n+instead of using a `const fn`, or refactoring the code to a functional style to\n+avoid mutation if possible.\n+\"##,\n+}\n+\n+register_diagnostics! {\n+    E0472, // asm! is unsupported on this target\n+}"}, {"sha": "4adaa0cab7a04e79bb4b880bcc7ab599a59360f6", "filename": "src/librustc_passes/lib.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Various checks\n+//!\n+//! # Note\n+//!\n+//! This API is completely unstable and subject to change.\n+\n+#![crate_name = \"rustc_passes\"]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(rustc_diagnostic_macros)]\n+#![feature(staged_api)]\n+#![feature(rustc_private)]\n+\n+extern crate core;\n+extern crate rustc;\n+\n+#[macro_use] extern crate syntax;\n+\n+pub mod diagnostics;\n+pub mod const_fn;\n+pub mod no_asm;"}, {"sha": "3022d9fb9e3c3b66ead6a759901f943de534cb6a", "filename": "src/librustc_passes/no_asm.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Fno_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Flibrustc_passes%2Fno_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fno_asm.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -12,7 +12,7 @@\n /// Inline asm isn't allowed on virtual ISA based targets, so we reject it\n /// here.\n \n-use session::Session;\n+use rustc::session::Session;\n \n use syntax::ast;\n use syntax::visit::Visitor;", "previous_filename": "src/librustc/middle/check_no_asm.rs"}, {"sha": "cb6f2d0215fdbeae4f5871680f487005b097ea22", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// test that const fn signature and body errors are checked\n+// even in array lengths, which are evaluated before check_const\n+\n+#![feature(const_fn)]\n+\n+const X : usize = 2;\n+\n+const fn f(x: usize) -> usize {\n+    let mut sum = 0; //~ ERROR: E0016\n+    for i in 0..x { //~ ERROR: E0016\n+        sum += i;\n+    }\n+    sum\n+}\n+\n+#[allow(unused_variables)]\n+fn main() {\n+    let a : [i32; f(X)];\n+}"}, {"sha": "f8381978dc7bd9ef0bbe737d0d1a8417e9606b5d", "filename": "src/test/compile-fail/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -37,11 +37,5 @@ const fn get_Y_addr() -> &'static u32 {\n         //~^ ERROR E0013\n }\n \n-const fn get() -> u32 {\n-    let x = 22; //~ ERROR E0016\n-    let y = 44; //~ ERROR E0016\n-    x + y\n-}\n-\n fn main() {\n }"}, {"sha": "a053847e88294cb812cf68d2c65ea04e77d33ec9", "filename": "src/test/compile-fail/const-fn-not-safe-for-const2.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const2.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can't call random fns in a const fn or do other bad things.\n+\n+#![feature(const_fn)]\n+\n+use std::mem::transmute;\n+\n+fn random() -> u32 { 0 }\n+\n+const fn sub(x: &u32) -> usize {\n+    unsafe { transmute(x) }\n+}\n+\n+const fn sub1() -> u32 {\n+    random()\n+}\n+\n+static Y: u32 = 0;\n+\n+const fn get_Y() -> u32 {\n+    Y\n+}\n+\n+const fn get_Y_addr() -> &'static u32 {\n+    &Y\n+}\n+\n+const fn get() -> u32 {\n+    let x = 22; //~ ERROR E0016\n+    let y = 44; //~ ERROR E0016\n+    x + y\n+}\n+\n+fn main() {\n+}"}, {"sha": "1fbf48f5b21250db50fa7df3ece88e5749c21b13", "filename": "src/test/compile-fail/issue-18118-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fissue-18118-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fissue-18118-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18118-2.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    const z: &'static isize = {\n+        static p: isize = 3;\n+        &p\n+        //~^ ERROR constants cannot refer to other statics, insert an intermediate constant instead\n+    };\n+}"}, {"sha": "9c8ed314d22d3971d798a00fe8b10696cbf59b9c", "filename": "src/test/compile-fail/issue-18118.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c3b7f5a4f558880501633c65400350d33960cd/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs?ref=83c3b7f5a4f558880501633c65400350d33960cd", "patch": "@@ -13,6 +13,5 @@ pub fn main() {\n         let p = 3;\n         //~^ ERROR blocks in constants are limited to items and tail expressions\n         &p\n-        //~^ ERROR paths in constants may only refer to constants or functions\n     };\n }"}]}