{"sha": "3da5a5cd18dc2a2177160772725946c3b4512f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYTVhNWNkMThkYzJhMjE3NzE2MDc3MjcyNTk0NmMzYjQ1MTJmN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-17T12:06:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-17T12:06:27Z"}, "message": "auto merge of #14253 : alexcrichton/rust/issue-14221, r=pcwalton\n\nThis plugs a leak where resolve was treating enums defined in parent modules as\r\nin-scope for all children modules when resolving a pattern identifier. This\r\neliminates the code path in resolve entirely.\r\n\r\nIf this breaks any existing code, then it indicates that the variants need to be\r\nexplicitly imported into the module.\r\n\r\nCloses #14221", "tree": {"sha": "f54ec0e483ffe0f87253021187d4c86141aed9fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54ec0e483ffe0f87253021187d4c86141aed9fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3da5a5cd18dc2a2177160772725946c3b4512f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3da5a5cd18dc2a2177160772725946c3b4512f7c", "html_url": "https://github.com/rust-lang/rust/commit/3da5a5cd18dc2a2177160772725946c3b4512f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3da5a5cd18dc2a2177160772725946c3b4512f7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20b502b2418c548a1ea47569784d07362780c8f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/20b502b2418c548a1ea47569784d07362780c8f4", "html_url": "https://github.com/rust-lang/rust/commit/20b502b2418c548a1ea47569784d07362780c8f4"}, {"sha": "7cbec5566ce23701691a065866799f7057262acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbec5566ce23701691a065866799f7057262acc", "html_url": "https://github.com/rust-lang/rust/commit/7cbec5566ce23701691a065866799f7057262acc"}], "stats": {"total": 94, "additions": 52, "deletions": 42}, "files": [{"sha": "cd00a949bf8487b77c69a25d6cbcabbb3e89c11a", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use common::Config;\n-use common::{CompileFail, Pretty, RunFail, RunPass, DebugInfoGdb, DebugInfoLldb};\n+use common::{CompileFail, Pretty, RunFail, RunPass, DebugInfoGdb};\n+use common::{Codegen, DebugInfoLldb};\n use errors;\n use header::TestProps;\n use header;"}, {"sha": "f7fed0224a2ec32e989c970dc5295a2386a2bd76", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -634,7 +634,7 @@ impl<'a> Iterator<uint> for SetItems<'a> {\n \n #[cfg(test)]\n mod test_map {\n-    use super::{TrieMap, TrieNode, Internal, External};\n+    use super::{TrieMap, TrieNode, Internal, External, Nothing};\n     use std::iter::range_step;\n     use std::uint;\n "}, {"sha": "7faa9207bbb1f58e136ee1c3aa516d4f12e74694", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -1028,7 +1028,7 @@ mod test {\n     use {TaskState, PoolConfig, SchedPool};\n     use basic;\n     use sched::{TaskFromFriend, PinnedTask};\n-    use task::{GreenTask, HomeSched};\n+    use task::{GreenTask, HomeSched, AnySched};\n \n     fn pool() -> SchedPool {\n         SchedPool::new(PoolConfig {"}, {"sha": "89395bc55bb6020f035f25bfedf46850d8f4cb42", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -12,7 +12,8 @@\n use back::link;\n use driver::session::Session;\n use driver::{config, PpMode};\n-use driver::PpmFlowGraph; // FIXME (#14221).\n+use driver::{PpmFlowGraph, PpmExpanded, PpmExpandedIdentified, PpmTyped};\n+use driver::{PpmIdentified};\n use front;\n use lib::llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;"}, {"sha": "87919c8a4f470d5d388180ebad376581fc0a78c9", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -283,11 +283,6 @@ enum UseLexicalScopeFlag {\n     UseLexicalScope\n }\n \n-enum SearchThroughModulesFlag {\n-    DontSearchThroughModules,\n-    SearchThroughModules\n-}\n-\n enum ModulePrefixResult {\n     NoPrefixFound,\n     PrefixFound(Rc<Module>, uint)\n@@ -2849,9 +2844,7 @@ impl<'a> Resolver<'a> {\n     fn resolve_item_in_lexical_scope(&mut self,\n                                      module_: Rc<Module>,\n                                      name: Ident,\n-                                     namespace: Namespace,\n-                                     search_through_modules:\n-                                     SearchThroughModulesFlag)\n+                                     namespace: Namespace)\n                                     -> ResolveResult<(Target, bool)> {\n         debug!(\"(resolving item in lexical scope) resolving `{}` in \\\n                 namespace {:?} in `{}`\",\n@@ -2924,26 +2917,19 @@ impl<'a> Resolver<'a> {\n                     return Failed;\n                 }\n                 ModuleParentLink(parent_module_node, _) => {\n-                    match search_through_modules {\n-                        DontSearchThroughModules => {\n-                            match search_module.kind.get() {\n-                                NormalModuleKind => {\n-                                    // We stop the search here.\n-                                    debug!(\"(resolving item in lexical \\\n-                                            scope) unresolved module: not \\\n-                                            searching through module \\\n-                                            parents\");\n-                                    return Failed;\n-                                }\n-                                ExternModuleKind |\n-                                TraitModuleKind |\n-                                ImplModuleKind |\n-                                AnonymousModuleKind => {\n-                                    search_module = parent_module_node.upgrade().unwrap();\n-                                }\n-                            }\n+                    match search_module.kind.get() {\n+                        NormalModuleKind => {\n+                            // We stop the search here.\n+                            debug!(\"(resolving item in lexical \\\n+                                    scope) unresolved module: not \\\n+                                    searching through module \\\n+                                    parents\");\n+                            return Failed;\n                         }\n-                        SearchThroughModules => {\n+                        ExternModuleKind |\n+                        TraitModuleKind |\n+                        ImplModuleKind |\n+                        AnonymousModuleKind => {\n                             search_module = parent_module_node.upgrade().unwrap();\n                         }\n                     }\n@@ -2988,7 +2974,7 @@ impl<'a> Resolver<'a> {\n         // If this module is an anonymous module, resolve the item in the\n         // lexical scope. Otherwise, resolve the item from the crate root.\n         let resolve_result = self.resolve_item_in_lexical_scope(\n-            module_, name, TypeNS, DontSearchThroughModules);\n+            module_, name, TypeNS);\n         match resolve_result {\n             Success((target, _)) => {\n                 let bindings = &*target.bindings;\n@@ -4517,8 +4503,7 @@ impl<'a> Resolver<'a> {\n         let module = self.current_module.clone();\n         match self.resolve_item_in_lexical_scope(module,\n                                                  name,\n-                                                 ValueNS,\n-                                                 SearchThroughModules) {\n+                                                 ValueNS) {\n             Success((target, _)) => {\n                 debug!(\"(resolve bare identifier pattern) succeeded in \\\n                          finding {} at {:?}\",\n@@ -4859,8 +4844,7 @@ impl<'a> Resolver<'a> {\n         let module = self.current_module.clone();\n         match self.resolve_item_in_lexical_scope(module,\n                                                  ident,\n-                                                 namespace,\n-                                                 DontSearchThroughModules) {\n+                                                 namespace) {\n             Success((target, _)) => {\n                 match (*target.bindings).def_for_namespace(namespace) {\n                     None => {"}, {"sha": "7ba2210a2c4fcbb5811ca66a645c98c0969f4547", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use middle::ty::{BuiltinBounds};\n use middle::ty::RegionVid;\n use middle::ty;\n@@ -25,6 +24,7 @@ use collections::HashMap;\n use syntax::ast::{Many, Once, NodeId};\n use syntax::ast::{NormalFn, UnsafeFn};\n use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{MutMutable, MutImmutable};\n use util::ppaux::mt_to_str;\n \n pub struct Lub<'f>(pub CombineFields<'f>);  // least-upper-bound: common supertype"}, {"sha": "30eb928a979b2fae25f345eb6cf5053e5e7cc973", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -39,7 +39,6 @@ use middle::typeck::infer::unify::{ValsAndBindings, Root};\n use middle::typeck::infer::error_reporting::ErrorReporting;\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n-use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::Span;"}, {"sha": "6df70d75c0f691991b39f784d544e12cb844c46a", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -25,7 +25,7 @@ use middle::typeck::infer::{TypeTrace, Subtype};\n use util::common::{indenter};\n use util::ppaux::bound_region_to_str;\n \n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, FnStyle, MutImmutable, MutMutable};\n \n pub struct Sub<'f>(pub CombineFields<'f>);  // \"subtype\", \"subregion\" etc\n "}, {"sha": "92b546d5770e6a165c9cdfa0bec5624245c17550", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -23,9 +23,9 @@ use vec::Vec;\n fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64> {\n     // compute offset as signed and clamp to prevent overflow\n     let pos = match seek {\n-        SeekSet => 0,\n-        SeekEnd => end,\n-        SeekCur => cur,\n+        io::SeekSet => 0,\n+        io::SeekEnd => end,\n+        io::SeekCur => cur,\n     } as i64;\n \n     if offset + pos < 0 {"}, {"sha": "c58012dc84c6eb3ee15ddff624e67b1d88d2cba8", "filename": "src/test/compile-fail/issue-14221.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Ftest%2Fcompile-fail%2Fissue-14221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da5a5cd18dc2a2177160772725946c3b4512f7c/src%2Ftest%2Fcompile-fail%2Fissue-14221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14221.rs?ref=3da5a5cd18dc2a2177160772725946c3b4512f7c", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum E {\n+    A,\n+    B,\n+}\n+\n+pub mod b {\n+    pub fn key(e: ::E) -> &'static str {\n+        match e {\n+            A => \"A\",\n+            B => \"B\", //~ ERROR: unreachable pattern\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}