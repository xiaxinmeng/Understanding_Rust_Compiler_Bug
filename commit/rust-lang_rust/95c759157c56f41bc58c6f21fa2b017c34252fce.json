{"sha": "95c759157c56f41bc58c6f21fa2b017c34252fce", "node_id": "C_kwDOAAsO6NoAKDk1Yzc1OTE1N2M1NmY0MWJjNThjNmYyMWZhMmIwMTdjMzQyNTJmY2U", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-19T13:53:00Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-19T13:57:18Z"}, "message": "Check for `todo!` on every expression in `SpanlessEq`", "tree": {"sha": "60199db10719b1a6744933c911123bb4cb1c83bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60199db10719b1a6744933c911123bb4cb1c83bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c759157c56f41bc58c6f21fa2b017c34252fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c759157c56f41bc58c6f21fa2b017c34252fce", "html_url": "https://github.com/rust-lang/rust/commit/95c759157c56f41bc58c6f21fa2b017c34252fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c759157c56f41bc58c6f21fa2b017c34252fce/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57c6d6f21fed530b250f54a47a6de8dd841a4f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57c6d6f21fed530b250f54a47a6de8dd841a4f1", "html_url": "https://github.com/rust-lang/rust/commit/e57c6d6f21fed530b250f54a47a6de8dd841a4f1"}], "stats": {"total": 43, "additions": 13, "deletions": 30}, "files": [{"sha": "eaf260ddfb832d05d7d9cc7be5d87922ae14b2c8", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/95c759157c56f41bc58c6f21fa2b017c34252fce/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c759157c56f41bc58c6f21fa2b017c34252fce/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=95c759157c56f41bc58c6f21fa2b017c34252fce", "patch": "@@ -127,9 +127,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     /// Checks whether two blocks are the same.\n     fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n-        if self.cannot_be_compared_block(left) || self.cannot_be_compared_block(right) {\n-            return false;\n-        }\n         match (left.stmts, left.expr, right.stmts, right.expr) {\n             ([], None, [], None) => {\n                 // For empty blocks, check to see if the tokens are equal. This will catch the case where a macro\n@@ -180,36 +177,13 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n-    fn cannot_be_compared_block(&mut self, block: &Block<'_>) -> bool {\n-        if block.stmts.last().map_or(false, |stmt| {\n-            matches!(\n-                stmt.kind,\n-                StmtKind::Semi(semi_expr) if self.should_ignore(semi_expr)\n-            )\n-        }) {\n-            return true;\n-        }\n-\n-        if let Some(block_expr) = block.expr\n-            && self.should_ignore(block_expr)\n-        {\n-            return true\n-        }\n-\n-        false\n-    }\n-\n     fn should_ignore(&mut self, expr: &Expr<'_>) -> bool {\n-        if macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n+        macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n             matches!(\n                 &self.inner.cx.tcx.get_diagnostic_name(macro_call.def_id),\n                 Some(sym::todo_macro | sym::unimplemented_macro)\n             )\n-        }) {\n-            return true;\n-        }\n-\n-        false\n+        })\n     }\n \n     pub fn eq_array_length(&mut self, left: ArrayLen, right: ArrayLen) -> bool {\n@@ -327,7 +301,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::DropTemps(le), &ExprKind::DropTemps(re)) => self.eq_expr(le, re),\n             _ => false,\n         };\n-        is_eq || self.inner.expr_fallback.as_mut().map_or(false, |f| f(left, right))\n+        (is_eq && (!self.should_ignore(left) || !self.should_ignore(right)))\n+            || self.inner.expr_fallback.as_mut().map_or(false, |f| f(left, right))\n     }\n \n     fn eq_exprs(&mut self, left: &[Expr<'_>], right: &[Expr<'_>]) -> bool {"}, {"sha": "7aba5b447d5537f25fd0be12684a1986f5b2463b", "filename": "tests/ui/match_same_arms2.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95c759157c56f41bc58c6f21fa2b017c34252fce/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c759157c56f41bc58c6f21fa2b017c34252fce/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=95c759157c56f41bc58c6f21fa2b017c34252fce", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::match_same_arms)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::blacklisted_name, clippy::diverging_sub_expression)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool {\n@@ -227,4 +227,12 @@ fn main() {\n         Some(Bar { y: 0, x: 5, .. }) => 1,\n         _ => 200,\n     };\n+\n+    let _ = match 0 {\n+        0 => todo!(),\n+        1 => todo!(),\n+        2 => core::convert::identity::<u32>(todo!()),\n+        3 => core::convert::identity::<u32>(todo!()),\n+        _ => 5,\n+    };\n }"}]}