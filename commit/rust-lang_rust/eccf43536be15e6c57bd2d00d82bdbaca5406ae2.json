{"sha": "eccf43536be15e6c57bd2d00d82bdbaca5406ae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2Y0MzUzNmJlMTVlNmM1N2JkMmQwMGQ4MmJkYmFjYTU0MDZhZTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T00:02:30Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T00:02:30Z"}, "message": "Some configuration options for function layout", "tree": {"sha": "390b1e4581b5b2890a8c54f9c2a5fc3519b3df3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390b1e4581b5b2890a8c54f9c2a5fc3519b3df3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eccf43536be15e6c57bd2d00d82bdbaca5406ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eccf43536be15e6c57bd2d00d82bdbaca5406ae2", "html_url": "https://github.com/rust-lang/rust/commit/eccf43536be15e6c57bd2d00d82bdbaca5406ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eccf43536be15e6c57bd2d00d82bdbaca5406ae2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff6a45022e69a8ddd2205d8d63b86d17ac62c0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff6a45022e69a8ddd2205d8d63b86d17ac62c0d", "html_url": "https://github.com/rust-lang/rust/commit/5ff6a45022e69a8ddd2205d8d63b86d17ac62c0d"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "a7c3b1c4fb8c18825545250ac7749d342099e09a", "filename": "src/mod.rs", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/eccf43536be15e6c57bd2d00d82bdbaca5406ae2/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccf43536be15e6c57bd2d00d82bdbaca5406ae2/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=eccf43536be15e6c57bd2d00d82bdbaca5406ae2", "patch": "@@ -21,9 +21,11 @@\n \n // TODO priorities\n // Fix fns and methods properly\n+//   dead spans\n+//\n // Writing output\n // Smoke testing till we can use it\n-// end of multi-line string has wspace\n+//   end of multi-line string has wspace\n \n #[macro_use]\n extern crate log;\n@@ -57,6 +59,26 @@ const LEEWAY: usize = 5;\n const MAX_WIDTH: usize = 100;\n const MIN_STRING: usize = 10;\n const TAB_SPACES: usize = 4;\n+const FN_BRACE_STYLE: BraceStyle = BraceStyle::SameLineWhere;\n+const FN_RETURN_INDENT: ReturnIndent = ReturnIndent::WithArgs;\n+\n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+enum BraceStyle {\n+    AlwaysNextLine,\n+    PreferSameLine,\n+    // Prefer same line except where there is a where clause, in which case force\n+    // the brace to the next line.\n+    SameLineWhere,\n+}\n+\n+// How to indent a function's return type.\n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+enum ReturnIndent {\n+    // Aligned with the arguments\n+    WithArgs,\n+    // Aligned with the where clause\n+    WithWhereClause,\n+}\n \n // Formatting which depends on the AST.\n fn fmt_ast<'a>(krate: &ast::Crate, codemap: &'a CodeMap) -> ChangeSet<'a> {\n@@ -162,6 +184,8 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         self.last_pos = b.span.hi;\n     }\n \n+    // Note that this only gets called for function defintions. Required methods\n+    // on traits do not get handled here.\n     fn visit_fn(&mut self,\n                 fk: visit::FnKind<'v>,\n                 fd: &'v ast::FnDecl,\n@@ -199,10 +223,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             visit::FkFnBlock(..) => {}\n         }\n \n-        // FIXME we'll miss anything between the end of the signature and the start\n-        // of the body, but we need more spans from the compiler to solve this.\n-        self.changes.push_str_span(s, \"\\n\");\n-        self.changes.push_str_span(s, &make_indent(self.block_indent));\n         self.last_pos = b.span.lo;\n         self.visit_block(b)\n     }\n@@ -614,6 +634,13 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME we'll lose any comments in between parts of the function decl, but anyone\n         // who comments there probably deserves what they get.\n \n+        let where_clause = &generics.where_clause;\n+        let newline_brace = match FN_BRACE_STYLE {\n+            BraceStyle::AlwaysNextLine => true,\n+            BraceStyle::SameLineWhere if where_clause.predicates.len() > 0 => true,\n+            _ => false,\n+        };\n+\n         let mut result = String::with_capacity(1024);\n         // Vis unsafety abi.\n         if vis == ast::Visibility::Public {\n@@ -637,7 +664,6 @@ impl<'a> FmtVisitor<'a> {\n         // there is a where clause at all.\n         let lifetimes: &[_] = &generics.lifetimes;\n         let tys: &[_] = &generics.ty_params;\n-        let where_clause = &generics.where_clause;\n         if lifetimes.len() + tys.len() > 0 {\n             let budget = MAX_WIDTH - indent - result.len() - 2;\n             // TODO might need to insert a newline if the generics are really long\n@@ -673,7 +699,10 @@ impl<'a> FmtVisitor<'a> {\n         // Try keeping everything on the same line\n         if !result.contains(\"\\n\") {\n             // 3 = `() `, space is before ret_string\n-            let used_space = indent + result.len() + 3 + ret_str.len();\n+            let mut used_space = indent + result.len() + 3 + ret_str.len();\n+            if newline_brace {\n+                used_space += 2;\n+            }\n             let one_line_budget = if used_space > MAX_WIDTH {\n                 0\n             } else {\n@@ -771,7 +800,14 @@ impl<'a> FmtVisitor<'a> {\n             // over the max width, then put the return type on a new line.\n             if result.contains(\"\\n\") ||\n                result.len() + indent + ret_str.len() > MAX_WIDTH {\n-                let indent = indent + 4;\n+                let indent = match FN_RETURN_INDENT {\n+                    ReturnIndent::WithWhereClause => indent + 4,\n+                    // TODO we might want to check that using the arg indent doesn't\n+                    // blow our budget, and if it does, then fallback to the where\n+                    // clause indent.\n+                    ReturnIndent::WithArgs => arg_indent,\n+                };\n+\n                 result.push('\\n');\n                 result.push_str(&make_indent(indent));\n             } else {\n@@ -780,6 +816,16 @@ impl<'a> FmtVisitor<'a> {\n             result.push_str(&ret_str);\n         }\n \n+        // Prepare for the function body by possibly adding a newline and indent.\n+        // FIXME we'll miss anything between the end of the signature and the start\n+        // of the body, but we need more spans from the compiler to solve this.\n+        if newline_brace {\n+            result.push('\\n');\n+            result.push_str(&make_indent(self.block_indent));\n+        } else {\n+            result.push(' ');\n+        }\n+\n         result\n     }\n "}]}