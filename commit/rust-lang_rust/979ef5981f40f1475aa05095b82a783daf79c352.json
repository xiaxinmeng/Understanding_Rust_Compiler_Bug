{"sha": "979ef5981f40f1475aa05095b82a783daf79c352", "node_id": "C_kwDOAAsO6NoAKDk3OWVmNTk4MWY0MGYxNDc1YWEwNTA5NWI4MmE3ODNkYWY3OWMzNTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T19:06:41Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T15:38:52Z"}, "message": "Use LocalDefId in ItemCtxt", "tree": {"sha": "815c2e2228326121ddf2e329aa9731d3c7912903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/815c2e2228326121ddf2e329aa9731d3c7912903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979ef5981f40f1475aa05095b82a783daf79c352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979ef5981f40f1475aa05095b82a783daf79c352", "html_url": "https://github.com/rust-lang/rust/commit/979ef5981f40f1475aa05095b82a783daf79c352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979ef5981f40f1475aa05095b82a783daf79c352/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "html_url": "https://github.com/rust-lang/rust/commit/2eb1c08e433aadf2362a65f2ef1387670a6d34cf"}], "stats": {"total": 206, "additions": 102, "deletions": 104}, "files": [{"sha": "8a9aac14fb65ff7940f09d721355ab763927cddb", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -75,7 +75,7 @@ pub trait AstConv<'tcx> {\n     fn get_type_parameter_bounds(\n         &self,\n         span: Span,\n-        def_id: DefId,\n+        def_id: LocalDefId,\n         assoc_name: Ident,\n     ) -> ty::GenericPredicates<'tcx>;\n \n@@ -1773,9 +1773,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ty_param_def_id, assoc_name, span,\n         );\n \n-        let predicates = &self\n-            .get_type_parameter_bounds(span, ty_param_def_id.to_def_id(), assoc_name)\n-            .predicates;\n+        let predicates =\n+            &self.get_type_parameter_bounds(span, ty_param_def_id, assoc_name).predicates;\n \n         debug!(\"find_bound_for_assoc_item: predicates={:#?}\", predicates);\n "}, {"sha": "737532b98a47a7b1735729779f1c351064565e12", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -1794,7 +1794,7 @@ fn check_variances_for_type_defn<'tcx>(\n \n     // Lazily calculated because it is only needed in case of an error.\n     let explicitly_bounded_params = LazyCell::new(|| {\n-        let icx = crate::collect::ItemCtxt::new(tcx, item.owner_id.to_def_id());\n+        let icx = crate::collect::ItemCtxt::new(tcx, item.owner_id.def_id);\n         hir_generics\n             .predicates\n             .iter()"}, {"sha": "db58f4af8ec3825038ddf3e0ce8d0d31448b5b90", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -113,7 +113,7 @@ pub fn provide(providers: &mut Providers) {\n /// the AST (`hir::Generics`), recursively.\n pub struct ItemCtxt<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    item_def_id: DefId,\n+    item_def_id: LocalDefId,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -347,7 +347,7 @@ fn bad_placeholder<'tcx>(\n }\n \n impl<'tcx> ItemCtxt<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> ItemCtxt<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>, item_def_id: LocalDefId) -> ItemCtxt<'tcx> {\n         ItemCtxt { tcx, item_def_id }\n     }\n \n@@ -356,7 +356,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n     }\n \n     pub fn hir_id(&self) -> hir::HirId {\n-        self.tcx.hir().local_def_id_to_hir_id(self.item_def_id.expect_local())\n+        self.tcx.hir().local_def_id_to_hir_id(self.item_def_id)\n     }\n \n     pub fn node(&self) -> hir::Node<'tcx> {\n@@ -370,20 +370,16 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn item_def_id(&self) -> DefId {\n-        self.item_def_id\n+        self.item_def_id.to_def_id()\n     }\n \n     fn get_type_parameter_bounds(\n         &self,\n         span: Span,\n-        def_id: DefId,\n+        def_id: LocalDefId,\n         assoc_name: Ident,\n     ) -> ty::GenericPredicates<'tcx> {\n-        self.tcx.at(span).type_param_predicates((\n-            self.item_def_id,\n-            def_id.expect_local(),\n-            assoc_name,\n-        ))\n+        self.tcx.at(span).type_param_predicates((self.item_def_id, def_id, assoc_name))\n     }\n \n     fn re_infer(&self, _: Option<&ty::GenericParamDef>, _: Span) -> Option<ty::Region<'tcx>> {\n@@ -1095,7 +1091,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<ty::PolyFnSig<\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n-    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n+    let icx = ItemCtxt::new(tcx, def_id);\n \n     let output = match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n@@ -1136,7 +1132,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<ty::PolyFnSig<\n \n         ForeignItem(&hir::ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n-            compute_sig_of_foreign_fn_decl(tcx, def_id.to_def_id(), fn_decl, abi)\n+            compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor().is_some() => {\n@@ -1339,7 +1335,7 @@ fn impl_trait_ref(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n ) -> Option<ty::EarlyBinder<ty::TraitRef<'_>>> {\n-    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n+    let icx = ItemCtxt::new(tcx, def_id);\n     let impl_ = tcx.hir().expect_item(def_id).expect_impl();\n     impl_\n         .of_trait\n@@ -1465,16 +1461,16 @@ fn predicates_defined_on(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicate\n \n fn compute_sig_of_foreign_fn_decl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n-        intrinsic_operation_unsafety(tcx, def_id)\n+        intrinsic_operation_unsafety(tcx, def_id.to_def_id())\n     } else {\n         hir::Unsafety::Unsafe\n     };\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let fty =\n         ItemCtxt::new(tcx, def_id).astconv().ty_of_fn(hir_id, unsafety, abi, decl, None, None);\n "}, {"sha": "d000a8e6622f01afc75d33098a8e804a353124a7", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -16,22 +16,22 @@ use rustc_span::Span;\n /// `hr-associated-type-bound-1.rs`.\n fn associated_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    assoc_item_def_id: DefId,\n+    assoc_item_def_id: LocalDefId,\n     ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n     span: Span,\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     let item_ty = tcx.mk_projection(\n-        assoc_item_def_id,\n-        InternalSubsts::identity_for_item(tcx, assoc_item_def_id),\n+        assoc_item_def_id.to_def_id(),\n+        InternalSubsts::identity_for_item(tcx, assoc_item_def_id.to_def_id()),\n     );\n \n     let icx = ItemCtxt::new(tcx, assoc_item_def_id);\n     let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n     // Associated types are implicitly sized unless a `?Sized` bound is found\n     icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n \n-    let trait_def_id = tcx.parent(assoc_item_def_id);\n-    let trait_predicates = tcx.trait_explicit_predicates_and_bounds(trait_def_id.expect_local());\n+    let trait_def_id = tcx.local_parent(assoc_item_def_id);\n+    let trait_predicates = tcx.trait_explicit_predicates_and_bounds(trait_def_id);\n \n     let bounds_from_parent = trait_predicates.predicates.iter().copied().filter(|(pred, _)| {\n         match pred.kind().skip_binder() {\n@@ -45,7 +45,11 @@ fn associated_type_bounds<'tcx>(\n     });\n \n     let all_bounds = tcx.arena.alloc_from_iter(bounds.predicates().chain(bounds_from_parent));\n-    debug!(\"associated_type_bounds({}) = {:?}\", tcx.def_path_str(assoc_item_def_id), all_bounds);\n+    debug!(\n+        \"associated_type_bounds({}) = {:?}\",\n+        tcx.def_path_str(assoc_item_def_id.to_def_id()),\n+        all_bounds\n+    );\n     all_bounds\n }\n \n@@ -56,7 +60,7 @@ fn associated_type_bounds<'tcx>(\n #[instrument(level = \"trace\", skip(tcx), ret)]\n fn opaque_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    opaque_def_id: DefId,\n+    opaque_def_id: LocalDefId,\n     ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n     item_ty: Ty<'tcx>,\n     span: Span,\n@@ -84,7 +88,7 @@ pub(super) fn explicit_item_bounds(\n             let opaque_ty = item.expect_opaque_ty();\n             return opaque_type_bounds(\n                 tcx,\n-                opaque_def_id,\n+                opaque_def_id.expect_local(),\n                 opaque_ty.bounds,\n                 tcx.mk_projection(\n                     def_id.to_def_id(),\n@@ -104,7 +108,7 @@ pub(super) fn explicit_item_bounds(\n             kind: hir::TraitItemKind::Type(bounds, _),\n             span,\n             ..\n-        }) => associated_type_bounds(tcx, def_id.to_def_id(), bounds, *span),\n+        }) => associated_type_bounds(tcx, def_id, bounds, *span),\n         hir::Node::Item(hir::Item {\n             kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, in_trait, .. }),\n             span,\n@@ -116,7 +120,7 @@ pub(super) fn explicit_item_bounds(\n             } else {\n                 tcx.mk_opaque(def_id.to_def_id(), substs)\n             };\n-            opaque_type_bounds(tcx, def_id.to_def_id(), bounds, item_ty, *span)\n+            opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }"}, {"sha": "3ec34dfbe3ec550040560b71175fb0c0d09ec387", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 60, "deletions": 61, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -72,7 +72,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n     let mut is_default_impl_trait = None;\n \n     // FIXME: Should ItemCtxt take a LocalDefId?\n-    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n+    let icx = ItemCtxt::new(tcx, def_id);\n \n     const NO_GENERICS: &hir::Generics<'_> = hir::Generics::empty();\n \n@@ -551,80 +551,78 @@ pub(super) fn super_predicates_that_define_assoc_type(\n     tcx: TyCtxt<'_>,\n     (trait_def_id, assoc_name): (DefId, Option<Ident>),\n ) -> ty::GenericPredicates<'_> {\n-    if trait_def_id.is_local() {\n-        debug!(\"local trait\");\n-        let trait_hir_id = tcx.hir().local_def_id_to_hir_id(trait_def_id.expect_local());\n+    let Some(trait_def_id) = trait_def_id.as_local() else {\n+        // if `assoc_name` is None, then the query should've been redirected to an\n+        // external provider\n+        assert!(assoc_name.is_some());\n+        return tcx.super_predicates_of(trait_def_id);\n+    };\n \n-        let Node::Item(item) = tcx.hir().get(trait_hir_id) else {\n-            bug!(\"trait_node_id {} is not an item\", trait_hir_id);\n-        };\n+    debug!(\"local trait\");\n+    let trait_hir_id = tcx.hir().local_def_id_to_hir_id(trait_def_id);\n \n-        let (generics, bounds) = match item.kind {\n-            hir::ItemKind::Trait(.., generics, supertraits, _) => (generics, supertraits),\n-            hir::ItemKind::TraitAlias(generics, supertraits) => (generics, supertraits),\n-            _ => span_bug!(item.span, \"super_predicates invoked on non-trait\"),\n-        };\n+    let Node::Item(item) = tcx.hir().get(trait_hir_id) else {\n+        bug!(\"trait_node_id {} is not an item\", trait_hir_id);\n+    };\n \n-        let icx = ItemCtxt::new(tcx, trait_def_id);\n+    let (generics, bounds) = match item.kind {\n+        hir::ItemKind::Trait(.., generics, supertraits, _) => (generics, supertraits),\n+        hir::ItemKind::TraitAlias(generics, supertraits) => (generics, supertraits),\n+        _ => span_bug!(item.span, \"super_predicates invoked on non-trait\"),\n+    };\n \n-        // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo: Bar + Zed`.\n-        let self_param_ty = tcx.types.self_param;\n-        let superbounds1 = if let Some(assoc_name) = assoc_name {\n-            icx.astconv().compute_bounds_that_match_assoc_type(self_param_ty, bounds, assoc_name)\n-        } else {\n-            icx.astconv().compute_bounds(self_param_ty, bounds)\n-        };\n+    let icx = ItemCtxt::new(tcx, trait_def_id);\n \n-        let superbounds1 = superbounds1.predicates();\n-\n-        // Convert any explicit superbounds in the where-clause,\n-        // e.g., `trait Foo where Self: Bar`.\n-        // In the case of trait aliases, however, we include all bounds in the where-clause,\n-        // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n-        // as one of its \"superpredicates\".\n-        let is_trait_alias = tcx.is_trait_alias(trait_def_id);\n-        let superbounds2 = icx.type_parameter_bounds_in_generics(\n-            generics,\n-            item.owner_id.def_id,\n-            self_param_ty,\n-            OnlySelfBounds(!is_trait_alias),\n-            assoc_name,\n-        );\n+    // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo: Bar + Zed`.\n+    let self_param_ty = tcx.types.self_param;\n+    let superbounds1 = if let Some(assoc_name) = assoc_name {\n+        icx.astconv().compute_bounds_that_match_assoc_type(self_param_ty, bounds, assoc_name)\n+    } else {\n+        icx.astconv().compute_bounds(self_param_ty, bounds)\n+    };\n+\n+    let superbounds1 = superbounds1.predicates();\n+\n+    // Convert any explicit superbounds in the where-clause,\n+    // e.g., `trait Foo where Self: Bar`.\n+    // In the case of trait aliases, however, we include all bounds in the where-clause,\n+    // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n+    // as one of its \"superpredicates\".\n+    let is_trait_alias = tcx.is_trait_alias(trait_def_id.to_def_id());\n+    let superbounds2 = icx.type_parameter_bounds_in_generics(\n+        generics,\n+        item.owner_id.def_id,\n+        self_param_ty,\n+        OnlySelfBounds(!is_trait_alias),\n+        assoc_name,\n+    );\n \n-        // Combine the two lists to form the complete set of superbounds:\n-        let superbounds = &*tcx.arena.alloc_from_iter(superbounds1.into_iter().chain(superbounds2));\n-        debug!(?superbounds);\n+    // Combine the two lists to form the complete set of superbounds:\n+    let superbounds = &*tcx.arena.alloc_from_iter(superbounds1.into_iter().chain(superbounds2));\n+    debug!(?superbounds);\n \n+    // Now require that immediate supertraits are converted,\n+    // which will, in turn, reach indirect supertraits.\n+    if assoc_name.is_none() {\n         // Now require that immediate supertraits are converted,\n         // which will, in turn, reach indirect supertraits.\n-        if assoc_name.is_none() {\n-            // Now require that immediate supertraits are converted,\n-            // which will, in turn, reach indirect supertraits.\n-            for &(pred, span) in superbounds {\n-                debug!(\"superbound: {:?}\", pred);\n-                if let ty::PredicateKind::Clause(ty::Clause::Trait(bound)) =\n-                    pred.kind().skip_binder()\n-                {\n-                    tcx.at(span).super_predicates_of(bound.def_id());\n-                }\n+        for &(pred, span) in superbounds {\n+            debug!(\"superbound: {:?}\", pred);\n+            if let ty::PredicateKind::Clause(ty::Clause::Trait(bound)) = pred.kind().skip_binder() {\n+                tcx.at(span).super_predicates_of(bound.def_id());\n             }\n         }\n-\n-        ty::GenericPredicates { parent: None, predicates: superbounds }\n-    } else {\n-        // if `assoc_name` is None, then the query should've been redirected to an\n-        // external provider\n-        assert!(assoc_name.is_some());\n-        tcx.super_predicates_of(trait_def_id)\n     }\n+\n+    ty::GenericPredicates { parent: None, predicates: superbounds }\n }\n \n /// Returns the predicates defined on `item_def_id` of the form\n /// `X: Foo` where `X` is the type parameter `def_id`.\n #[instrument(level = \"trace\", skip(tcx))]\n pub(super) fn type_param_predicates(\n     tcx: TyCtxt<'_>,\n-    (item_def_id, def_id, assoc_name): (DefId, LocalDefId, Ident),\n+    (item_def_id, def_id, assoc_name): (LocalDefId, LocalDefId, Ident),\n ) -> ty::GenericPredicates<'_> {\n     use rustc_hir::*;\n \n@@ -639,21 +637,21 @@ pub(super) fn type_param_predicates(\n     let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(def_id));\n \n     // Don't look for bounds where the type parameter isn't in scope.\n-    let parent = if item_def_id == param_owner.to_def_id() {\n+    let parent = if item_def_id == param_owner {\n         None\n     } else {\n-        tcx.generics_of(item_def_id).parent\n+        tcx.generics_of(item_def_id).parent.map(|def_id| def_id.expect_local())\n     };\n \n     let mut result = parent\n         .map(|parent| {\n             let icx = ItemCtxt::new(tcx, parent);\n-            icx.get_type_parameter_bounds(DUMMY_SP, def_id.to_def_id(), assoc_name)\n+            icx.get_type_parameter_bounds(DUMMY_SP, def_id, assoc_name)\n         })\n         .unwrap_or_default();\n     let mut extend = None;\n \n-    let item_hir_id = tcx.hir().local_def_id_to_hir_id(item_def_id.expect_local());\n+    let item_hir_id = tcx.hir().local_def_id_to_hir_id(item_def_id);\n     let ast_generics = match tcx.hir().get(item_hir_id) {\n         Node::TraitItem(item) => &item.generics,\n \n@@ -675,7 +673,8 @@ pub(super) fn type_param_predicates(\n                 ItemKind::Trait(_, _, generics, ..) => {\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_hir_id {\n-                        let identity_trait_ref = ty::TraitRef::identity(tcx, item_def_id);\n+                        let identity_trait_ref =\n+                            ty::TraitRef::identity(tcx, item_def_id.to_def_id());\n                         extend =\n                             Some((identity_trait_ref.without_const().to_predicate(tcx), item.span));\n                     }"}, {"sha": "9120d372304ef4b6b46fdd953a92fbf4e7ea97c1", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -63,7 +63,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 .find(|(_, node)| matches!(node, OwnerNode::Item(_)))\n                 .unwrap()\n                 .0\n-                .to_def_id();\n+                .def_id;\n             let item_ctxt = &ItemCtxt::new(tcx, item_def_id) as &dyn crate::astconv::AstConv<'_>;\n             let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n \n@@ -269,7 +269,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n-    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n+    let icx = ItemCtxt::new(tcx, def_id);\n \n     let output = match tcx.hir().get(hir_id) {\n         Node::TraitItem(item) => match item.kind {"}, {"sha": "0b9c8400ad2ba6d987c4178b3bc35eb2cf148447", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -31,7 +31,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n     tcx.sess\n         .delay_span_bug(tcx.def_span(def_id), \"Performed HIR wfcheck without an existing error!\");\n \n-    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n+    let icx = ItemCtxt::new(tcx, def_id);\n \n     // To perform HIR-based WF checking, we iterate over all HIR types\n     // that occur 'inside' the item we're checking. For example,"}, {"sha": "384f3e76b8b12e0d5f5755a3846a822471a7e94e", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -513,7 +513,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx>, hir_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n     // def-ID that will be used to determine the traits/predicates in\n     // scope. This is derived from the enclosing item-like thing.\n     let env_def_id = tcx.hir().get_parent_item(hir_ty.hir_id);\n-    let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n+    let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.def_id);\n     item_cx.astconv().ast_ty_to_ty(hir_ty)\n }\n \n@@ -526,7 +526,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n     // def-ID that will be used to determine the traits/predicates in\n     // scope. This is derived from the enclosing item-like thing.\n     let env_def_id = tcx.hir().get_parent_item(hir_trait.hir_ref_id);\n-    let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n+    let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.def_id);\n     let mut bounds = Bounds::default();\n     let _ = &item_cx.astconv().instantiate_poly_trait_ref(\n         hir_trait,"}, {"sha": "c6fd0b61035889fcffc3915b7717dfe07c9e303d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -211,13 +211,13 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     fn get_type_parameter_bounds(\n         &self,\n         _: Span,\n-        def_id: DefId,\n+        def_id: LocalDefId,\n         _: Ident,\n     ) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n-        let item_def_id = tcx.hir().ty_param_owner(def_id.expect_local());\n+        let item_def_id = tcx.hir().ty_param_owner(def_id);\n         let generics = tcx.generics_of(item_def_id);\n-        let index = generics.param_def_id_to_index[&def_id];\n+        let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n         ty::GenericPredicates {\n             parent: None,\n             predicates: tcx.arena.alloc_from_iter("}, {"sha": "2f99a8874c0431687fbdf537b08ea6545f86f2e7", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -316,12 +316,12 @@ impl Key for (DefId, Option<Ident>) {\n     }\n }\n \n-impl Key for (DefId, LocalDefId, Ident) {\n+impl Key for (LocalDefId, LocalDefId, Ident) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = (LocalDefId, LocalDefId, Ident);\n+    type LocalKey = Self;\n \n     fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        Some((self.0.as_local()?, self.1, self.2))\n+        Some(*self)\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {"}, {"sha": "13f6779bd4fadb3ef4b3a868732dd3017fca7b3c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979ef5981f40f1475aa05095b82a783daf79c352/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=979ef5981f40f1475aa05095b82a783daf79c352", "patch": "@@ -639,7 +639,7 @@ rustc_queries! {\n \n     /// To avoid cycles within the predicates of a single item we compute\n     /// per-type-parameter predicates for resolving `T::AssocTy`.\n-    query type_param_predicates(key: (DefId, LocalDefId, rustc_span::symbol::Ident)) -> ty::GenericPredicates<'tcx> {\n+    query type_param_predicates(key: (LocalDefId, LocalDefId, rustc_span::symbol::Ident)) -> ty::GenericPredicates<'tcx> {\n         desc { |tcx| \"computing the bounds for type parameter `{}`\", tcx.hir().ty_param_name(key.1) }\n     }\n "}]}