{"sha": "f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNDg3Y2VlNzQzOWYzYTRiNGM3ZGFlYzBlN2YyYTBjY2MyMTA1M2M=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-04T14:40:06Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-07T08:04:08Z"}, "message": "normalize substs during inlining", "tree": {"sha": "f96f8a53f34fb900caafd9659faf1c404f07cf4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96f8a53f34fb900caafd9659faf1c404f07cf4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c", "html_url": "https://github.com/rust-lang/rust/commit/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c302f55bd07a04305dfa2bd815d2559deb8468f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c302f55bd07a04305dfa2bd815d2559deb8468f", "html_url": "https://github.com/rust-lang/rust/commit/9c302f55bd07a04305dfa2bd815d2559deb8468f"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "e0bd4e8b68bec4f73573863ae72695bebe8796e0", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c", "patch": "@@ -201,9 +201,13 @@ impl Inliner<'tcx> {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func: ref op, .. } = terminator.kind {\n             if let ty::FnDef(callee_def_id, substs) = *op.ty(caller_body, self.tcx).kind() {\n-                let instance = Instance::resolve(self.tcx, self.param_env, callee_def_id, substs)\n-                    .ok()\n-                    .flatten()?;\n+                // To resolve an instance its substs have to be fully normalized, so\n+                // we do this here.\n+                let normalized_substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n+                let instance =\n+                    Instance::resolve(self.tcx, self.param_env, callee_def_id, normalized_substs)\n+                        .ok()\n+                        .flatten()?;\n \n                 if let InstanceDef::Virtual(..) = instance.def {\n                     return None;"}, {"sha": "05e6c4804ff6526ff4d66bbffc2c6fb460718e40", "filename": "compiler/rustc_trait_selection/src/traits/codegen/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs?ref=f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c", "patch": "@@ -17,14 +17,17 @@ use rustc_middle::ty::{self, TyCtxt};\n /// (necessarily) resolve all nested obligations on the impl. Note\n /// that type check should guarantee to us that all nested\n /// obligations *could be* resolved if we wanted to.\n+///\n /// Assumes that this is run after the entire crate has been successfully type-checked.\n+/// This also expects that `trait_ref` is fully normalized.\n pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n ) -> Result<ImplSource<'tcx, ()>, ErrorReported> {\n-    // Remove any references to regions and normalize; this helps improve caching.\n-    let trait_ref = tcx.normalize_erasing_regions(param_env, trait_ref);\n-\n+    // Remove any references to regions; this helps improve caching.\n+    let trait_ref = tcx.erase_regions(&trait_ref);\n+    // We expect the input to be fully normalized.\n+    debug_assert_eq!(trait_ref, tcx.normalize_erasing_regions(param_env, trait_ref));\n     debug!(\n         \"codegen_fulfill_obligation(trait_ref={:?}, def_id={:?})\",\n         (param_env, trait_ref),"}, {"sha": "4d083bf23215599a16ecf1c8f16cabcf6a678488", "filename": "src/test/ui/mir/mir-inlining/ice-issue-77306.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306.rs?ref=f0487cee7439f3a4b4c7daec0e7f2a0ccc21053c", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// compile-flags:-Zmir-opt-level=2\n+\n+// Previously ICEd because we did not normalize during inlining,\n+// see https://github.com/rust-lang/rust/pull/77306 for more discussion.\n+\n+pub fn write() {\n+    create()()\n+}\n+\n+pub fn create() -> impl FnOnce() {\n+   || ()\n+}\n+\n+fn main() {\n+    write();\n+}"}]}