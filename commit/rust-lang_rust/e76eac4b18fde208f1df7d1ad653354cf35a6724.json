{"sha": "e76eac4b18fde208f1df7d1ad653354cf35a6724", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NmVhYzRiMThmZGUyMDhmMWRmN2QxYWQ2NTMzNTRjZjM1YTY3MjQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-27T08:51:43Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-27T08:51:43Z"}, "message": "Fix dogfood", "tree": {"sha": "92f98fe11266211e48cb64b3583524ffd27f94c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92f98fe11266211e48cb64b3583524ffd27f94c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e76eac4b18fde208f1df7d1ad653354cf35a6724", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlny858ACgkQpp+NIls6\n19k8fg//fn9BfBuqP3XZK37M/6TIztG+mpt5YH5c9ZcH3kcfgeKMo/Um8iWQLK9o\n95oKBE62f91UbVRbFRwqmV5qGvA8bZ1olsZwpRECeIvBJNx547jpdy9FrfAiiM70\n50g2tu5m7dVhpWjY0jl3Mm7bg/uzD0B45nkr1Fj6D8dQ6FBdFzk9KSSHi18V3jcw\nfDMJ80bY3CKaPo3Hd+xq9olAsvfdYzmrLbXx0QBLj7g6dUj5YD+OJdGhWRqqRuh7\nDjjFtH+AqfTUrYE5PHPfUJByzyP2ljEhVZM+8wSg8s582fdcgFEWm0w9MBAzGQmf\n00aOAIXwkD6xBTqV2MQlXEtswAs5UGC8c5Q6kNSetaJkwlurFkHzp5mhrCRYtcfv\nMgtVHde+5ExwK6o58++HyKbbkvq+aYcshRpJkX8d9MT+j7MiHlDZyMxz2jsWPqfu\nlU43iq4RYsJLZKbtByJytsx1HKxfDfGiQM+/q34/cXVMITiJhvVW9nDnAt9erbfm\ndZLdR5m+DNfL7vI66O3w20QCCygsLq3U7nHotmLxvz1fD3lVML3+eagwJbGDukJR\nO5HyDC/7wwPqEGyu6/YBtKaoI+MHwTAaW7FUE+T1W+W+ZYZvXwKQYZ5LCZapTzLp\nzzMD8sGToysrJAuHd/B5zJK/s/RFKWeT/5FCjKYhmpnZVsdSk7w=\n=i1jL\n-----END PGP SIGNATURE-----", "payload": "tree 92f98fe11266211e48cb64b3583524ffd27f94c8\nparent 0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509094303 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509094303 +0200\n\nFix dogfood\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e76eac4b18fde208f1df7d1ad653354cf35a6724", "html_url": "https://github.com/rust-lang/rust/commit/e76eac4b18fde208f1df7d1ad653354cf35a6724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e76eac4b18fde208f1df7d1ad653354cf35a6724/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503", "html_url": "https://github.com/rust-lang/rust/commit/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "3cdffbf82ae4f37cf55c02e220a502737ee268a5", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e76eac4b18fde208f1df7d1ad653354cf35a6724/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76eac4b18fde208f1df7d1ad653354cf35a6724/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=e76eac4b18fde208f1df7d1ad653354cf35a6724", "patch": "@@ -4,7 +4,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n \n-use utils::span_help_and_lint;\n+use utils::{span_help_and_lint, in_external_macro};\n \n /// **What it does:** Checks for usage of `!` or `!=` in an if condition with an\n /// else branch.\n@@ -47,6 +47,9 @@ impl LintPass for IfNotElse {\n \n impl EarlyLintPass for IfNotElse {\n     fn check_expr(&mut self, cx: &EarlyContext, item: &Expr) {\n+        if in_external_macro(cx, item.span) {\n+            return;\n+        }\n         if let ExprKind::If(ref cond, _, Some(ref els)) = item.node {\n             if let ExprKind::Block(..) = els.node {\n                 match cond.node {"}, {"sha": "6cbeea8214d01dd74cd5eb80c12f8b374fb50e37", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e76eac4b18fde208f1df7d1ad653354cf35a6724/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76eac4b18fde208f1df7d1ad653354cf35a6724/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=e76eac4b18fde208f1df7d1ad653354cf35a6724", "patch": "@@ -74,6 +74,9 @@ const WHITELIST: &[&[&str]] = &[\n     &[\"lhs\", \"rhs\"],\n     &[\"tx\", \"rx\"],\n     &[\"set\", \"get\"],\n+    &[\"args\", \"arms\"],\n+    &[\"qpath\", \"path\"],\n+    &[\"lit\", \"lint\"],\n ];\n \n struct SimilarNamesNameVisitor<'a: 'b, 'tcx: 'a, 'b>(&'b mut SimilarNamesLocalVisitor<'a, 'tcx>);"}, {"sha": "fde6abe48af0b643080e3276989e55a05cf41897", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e76eac4b18fde208f1df7d1ad653354cf35a6724/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76eac4b18fde208f1df7d1ad653354cf35a6724/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=e76eac4b18fde208f1df7d1ad653354cf35a6724", "patch": "@@ -214,7 +214,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 e.span,\n                                 &format!(\"transmute from a type (`{}`) to a pointer to that type (`{}`)\", from_ty, to_ty),\n                             ),\n-                            (&ty::TyRawPtr(from_pty), &ty::TyRef(_, to_rty)) => span_lint_and_then(\n+                            (&ty::TyRawPtr(from_pty), &ty::TyRef(_, to_ref_ty)) => span_lint_and_then(\n                                 cx,\n                                 TRANSMUTE_PTR_TO_REF,\n                                 e.span,\n@@ -226,16 +226,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 ),\n                                 |db| {\n                                     let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                                    let (deref, cast) = if to_rty.mutbl == Mutability::MutMutable {\n+                                    let (deref, cast) = if to_ref_ty.mutbl == Mutability::MutMutable {\n                                         (\"&mut *\", \"*mut\")\n                                     } else {\n                                         (\"&*\", \"*const\")\n                                     };\n \n-                                    let arg = if from_pty.ty == to_rty.ty {\n+                                    let arg = if from_pty.ty == to_ref_ty.ty {\n                                         arg\n                                     } else {\n-                                        arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_rty.ty)))\n+                                        arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty.ty)))\n                                     };\n \n                                     db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n@@ -299,17 +299,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n /// the type's `ToString` implementation. In weird cases it could lead to types\n /// with invalid `'_`\n /// lifetime, but it should be rare.\n-fn get_type_snippet(cx: &LateContext, path: &QPath, to_rty: Ty) -> String {\n+fn get_type_snippet(cx: &LateContext, path: &QPath, to_ref_ty: Ty) -> String {\n     let seg = last_path_segment(path);\n     if_chain! {\n         if let Some(ref params) = seg.parameters;\n         if !params.parenthesized;\n         if let Some(to_ty) = params.types.get(1);\n         if let TyRptr(_, ref to_ty) = to_ty.node;\n         then {\n-            return snippet(cx, to_ty.ty.span, &to_rty.to_string()).to_string();\n+            return snippet(cx, to_ty.ty.span, &to_ref_ty.to_string()).to_string();\n         }\n     }\n \n-    to_rty.to_string()\n+    to_ref_ty.to_string()\n }"}]}