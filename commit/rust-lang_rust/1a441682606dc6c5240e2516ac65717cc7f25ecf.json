{"sha": "1a441682606dc6c5240e2516ac65717cc7f25ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDQxNjgyNjA2ZGM2YzUyNDBlMjUxNmFjNjU3MTdjYzdmMjVlY2Y=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-02-15T23:26:47Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-02-16T15:37:52Z"}, "message": "Split `pub fn cargo_load` into `pub fn load_workspace_at` and `pub fn load_workspace`", "tree": {"sha": "7dfe22594a6ba776734fa0790c3c069cd44b3d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dfe22594a6ba776734fa0790c3c069cd44b3d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a441682606dc6c5240e2516ac65717cc7f25ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a441682606dc6c5240e2516ac65717cc7f25ecf", "html_url": "https://github.com/rust-lang/rust/commit/1a441682606dc6c5240e2516ac65717cc7f25ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a441682606dc6c5240e2516ac65717cc7f25ecf/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc49502ab47bcd20c90589226282b8f3c3df5190", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc49502ab47bcd20c90589226282b8f3c3df5190", "html_url": "https://github.com/rust-lang/rust/commit/cc49502ab47bcd20c90589226282b8f3c3df5190"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "ed732eb387902ebfe5853090035f62288bc457e7", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=1a441682606dc6c5240e2516ac65717cc7f25ecf", "patch": "@@ -18,7 +18,7 @@ pub use self::{\n     analysis_bench::{BenchCmd, BenchWhat, Position},\n     analysis_stats::AnalysisStatsCmd,\n     diagnostics::diagnostics,\n-    load_cargo::load_cargo,\n+    load_cargo::{load_workspace, load_workspace_at, LoadCargoConfig},\n     ssr::{apply_ssr_rules, search_for_patterns},\n };\n "}, {"sha": "d26b4cf66d31709b3f088463434b65c454851116", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=1a441682606dc6c5240e2516ac65717cc7f25ecf", "patch": "@@ -17,7 +17,7 @@ use ide_db::{\n use vfs::AbsPathBuf;\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     print_memory_usage, Verbosity,\n };\n \n@@ -63,13 +63,13 @@ impl BenchCmd {\n         let start = Instant::now();\n         eprint!(\"loading: \");\n \n+        let cargo_config = Default::default();\n         let load_cargo_config = LoadCargoConfig {\n-            cargo_config: Default::default(),\n             load_out_dirs_from_check: self.load_output_dirs,\n             with_proc_macro: self.with_proc_macro,\n         };\n-\n-        let (mut host, vfs) = load_cargo(&self.path, &load_cargo_config)?;\n+        let (mut host, vfs) =\n+            load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;\n         eprintln!(\"{:?}\\n\", start.elapsed());\n \n         let file_id = {"}, {"sha": "87dcd406df15a0c8c1e4ee77e7e03d4a1b3c6971", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=1a441682606dc6c5240e2516ac65717cc7f25ecf", "patch": "@@ -25,7 +25,7 @@ use stdx::format_to;\n use syntax::AstNode;\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     print_memory_usage,\n     progress_report::ProgressReport,\n     report_metric, Result, Verbosity,\n@@ -59,12 +59,13 @@ impl AnalysisStatsCmd {\n         };\n \n         let mut db_load_sw = self.stop_watch();\n+        let cargo_config = Default::default();\n         let load_cargo_config = LoadCargoConfig {\n-            cargo_config: Default::default(),\n             load_out_dirs_from_check: self.load_output_dirs,\n             with_proc_macro: self.with_proc_macro,\n         };\n-        let (host, vfs) = load_cargo(&self.path, &load_cargo_config)?;\n+        let (host, vfs) =\n+            load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;\n         let db = host.raw_database();\n         eprintln!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n "}, {"sha": "876f6c44f3e8cdfecadaab22d11be3339f64d343", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=1a441682606dc6c5240e2516ac65717cc7f25ecf", "patch": "@@ -11,7 +11,7 @@ use ide::{DiagnosticsConfig, Severity};\n use ide_db::base_db::SourceDatabaseExt;\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     Result,\n };\n \n@@ -33,12 +33,9 @@ pub fn diagnostics(\n     load_out_dirs_from_check: bool,\n     with_proc_macro: bool,\n ) -> Result<()> {\n-    let load_cargo_config = LoadCargoConfig {\n-        cargo_config: Default::default(),\n-        load_out_dirs_from_check,\n-        with_proc_macro,\n-    };\n-    let (host, _vfs) = load_cargo(path, &load_cargo_config)?;\n+    let cargo_config = Default::default();\n+    let load_cargo_config = LoadCargoConfig { load_out_dirs_from_check, with_proc_macro };\n+    let (host, _vfs) = load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n     let analysis = host.analysis();\n "}, {"sha": "23442afacce090853b9e4b51d8e58702c3afc52c", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=1a441682606dc6c5240e2516ac65717cc7f25ecf", "patch": "@@ -14,16 +14,28 @@ use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n use crate::reload::{ProjectFolders, SourceRootConfig};\n \n pub struct LoadCargoConfig {\n-    pub cargo_config: CargoConfig,\n     pub load_out_dirs_from_check: bool,\n     pub with_proc_macro: bool,\n }\n \n-pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost, vfs::Vfs)> {\n+pub fn load_workspace_at(\n+    root: &Path,\n+    cargo_config: &CargoConfig,\n+    load_config: &LoadCargoConfig,\n+    progress: &dyn Fn(String),\n+) -> Result<(AnalysisHost, vfs::Vfs)> {\n     let root = AbsPathBuf::assert(std::env::current_dir()?.join(root));\n     let root = ProjectManifest::discover_single(&root)?;\n-    let ws = ProjectWorkspace::load(root, &config.cargo_config, &|_| {})?;\n+    let workspace = ProjectWorkspace::load(root, cargo_config, progress)?;\n \n+    load_workspace(workspace, load_config, progress)\n+}\n+\n+pub fn load_workspace(\n+    ws: ProjectWorkspace,\n+    config: &LoadCargoConfig,\n+    progress: &dyn Fn(String),\n+) -> Result<(AnalysisHost, vfs::Vfs)> {\n     let (sender, receiver) = unbounded();\n     let mut vfs = vfs::Vfs::default();\n     let mut loader = {\n@@ -42,7 +54,7 @@ pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost\n     let build_data = if config.load_out_dirs_from_check {\n         let mut collector = BuildDataCollector::default();\n         ws.collect_build_data_configs(&mut collector);\n-        Some(collector.collect(&|_| {})?)\n+        Some(collector.collect(progress)?)\n     } else {\n         None\n     };\n@@ -66,11 +78,12 @@ pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost\n     });\n \n     log::debug!(\"crate graph: {:?}\", crate_graph);\n-    let host = load(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n+    let host =\n+        load_crate_graph(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n     Ok((host, vfs))\n }\n \n-fn load(\n+fn load_crate_graph(\n     crate_graph: CrateGraph,\n     source_root_config: SourceRootConfig,\n     vfs: &mut vfs::Vfs,\n@@ -120,17 +133,17 @@ mod tests {\n     use hir::Crate;\n \n     #[test]\n-    fn test_loading_rust_analyzer() {\n+    fn test_loading_rust_analyzer() -> Result<()> {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n-        let load_cargo_config = LoadCargoConfig {\n-            cargo_config: Default::default(),\n-            load_out_dirs_from_check: false,\n-            with_proc_macro: false,\n-        };\n+        let cargo_config = Default::default();\n+        let load_cargo_config =\n+            LoadCargoConfig { load_out_dirs_from_check: false, with_proc_macro: false };\n+        let (host, _vfs) = load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n \n-        let (host, _vfs) = load_cargo(path, &load_cargo_config).unwrap();\n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);\n+\n+        Ok(())\n     }\n }"}, {"sha": "71c61ed58a40f04898328a6345d07cf965f803e9", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a441682606dc6c5240e2516ac65717cc7f25ecf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=1a441682606dc6c5240e2516ac65717cc7f25ecf", "patch": "@@ -1,19 +1,18 @@\n //! Applies structured search replace rules from the command line.\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     Result,\n };\n use ssr::{MatchFinder, SsrPattern, SsrRule};\n \n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n-    let load_cargo_config = LoadCargoConfig {\n-        cargo_config: Default::default(),\n-        load_out_dirs_from_check: true,\n-        with_proc_macro: true,\n-    };\n-    let (host, vfs) = load_cargo(&std::env::current_dir()?, &load_cargo_config)?;\n+    let cargo_config = Default::default();\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n+    let (host, vfs) =\n+        load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for rule in rules {\n@@ -36,12 +35,11 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<String>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n     use ide_db::symbol_index::SymbolsDatabase;\n-    let load_cargo_config = LoadCargoConfig {\n-        cargo_config: Default::default(),\n-        load_out_dirs_from_check: true,\n-        with_proc_macro: true,\n-    };\n-    let (host, _vfs) = load_cargo(&std::env::current_dir()?, &load_cargo_config)?;\n+    let cargo_config = Default::default();\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n+    let (host, _vfs) =\n+        load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for pattern in patterns {"}]}