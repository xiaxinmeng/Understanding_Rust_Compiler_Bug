{"sha": "5796e6e4618fd02bb7423b8f1a62f5b01ada63a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OTZlNmU0NjE4ZmQwMmJiNzQyM2I4ZjFhNjJmNWIwMWFkYTYzYTc=", "commit": {"author": {"name": "Amin Arria", "email": "arria.amin@gmail.com", "date": "2020-03-25T23:07:01Z"}, "committer": {"name": "Amin Arria", "email": "arria.amin@gmail.com", "date": "2020-03-26T15:34:22Z"}, "message": "Fix incorrect pattern warning \"unreachable pattern\"\n\n- Added is_under_guard parameter to _match::is_useful and\n  only add to the matrix if false\n- Added comments explaining behavior", "tree": {"sha": "15556d671458c462cb12d8cd61e6867f25350158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15556d671458c462cb12d8cd61e6867f25350158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7", "html_url": "https://github.com/rust-lang/rust/commit/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7/comments", "author": {"login": "AminArria", "id": 3791966, "node_id": "MDQ6VXNlcjM3OTE5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3791966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AminArria", "html_url": "https://github.com/AminArria", "followers_url": "https://api.github.com/users/AminArria/followers", "following_url": "https://api.github.com/users/AminArria/following{/other_user}", "gists_url": "https://api.github.com/users/AminArria/gists{/gist_id}", "starred_url": "https://api.github.com/users/AminArria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AminArria/subscriptions", "organizations_url": "https://api.github.com/users/AminArria/orgs", "repos_url": "https://api.github.com/users/AminArria/repos", "events_url": "https://api.github.com/users/AminArria/events{/privacy}", "received_events_url": "https://api.github.com/users/AminArria/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AminArria", "id": 3791966, "node_id": "MDQ6VXNlcjM3OTE5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3791966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AminArria", "html_url": "https://github.com/AminArria", "followers_url": "https://api.github.com/users/AminArria/followers", "following_url": "https://api.github.com/users/AminArria/following{/other_user}", "gists_url": "https://api.github.com/users/AminArria/gists{/gist_id}", "starred_url": "https://api.github.com/users/AminArria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AminArria/subscriptions", "organizations_url": "https://api.github.com/users/AminArria/orgs", "repos_url": "https://api.github.com/users/AminArria/repos", "events_url": "https://api.github.com/users/AminArria/events{/privacy}", "received_events_url": "https://api.github.com/users/AminArria/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1d9adb3cb3aad4233075fa296fc3c70b42cdb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1d9adb3cb3aad4233075fa296fc3c70b42cdb8", "html_url": "https://github.com/rust-lang/rust/commit/3c1d9adb3cb3aad4233075fa296fc3c70b42cdb8"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "b4a42aefca3ac244f45d62f3feb3174a54c9d80f", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=5796e6e4618fd02bb7423b8f1a62f5b01ada63a7", "patch": "@@ -1619,12 +1619,17 @@ impl<'tcx> fmt::Debug for MissingConstructors<'tcx> {\n /// relation to preceding patterns, it is not reachable) and exhaustiveness\n /// checking (if a wildcard pattern is useful in relation to a matrix, the\n /// matrix isn't exhaustive).\n+///\n+/// `is_under_guard` is used to inform if the pattern has a guard. If it\n+/// has one it must not be inserted into the matrix. This shouldn't be\n+/// relied on for soundness.\n crate fn is_useful<'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'p, 'tcx>,\n     matrix: &Matrix<'p, 'tcx>,\n     v: &PatStack<'p, 'tcx>,\n     witness_preference: WitnessPreference,\n     hir_id: HirId,\n+    is_under_guard: bool,\n     is_top_level: bool,\n ) -> Usefulness<'tcx, 'p> {\n     let &Matrix(ref rows) = matrix;\n@@ -1653,7 +1658,7 @@ crate fn is_useful<'p, 'tcx>(\n         let mut unreachable_pats = Vec::new();\n         let mut any_is_useful = false;\n         for v in vs {\n-            let res = is_useful(cx, &matrix, &v, witness_preference, hir_id, false);\n+            let res = is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n             match res {\n                 Useful(pats) => {\n                     any_is_useful = true;\n@@ -1664,7 +1669,10 @@ crate fn is_useful<'p, 'tcx>(\n                     bug!(\"Encountered or-pat in `v` during exhaustiveness checking\")\n                 }\n             }\n-            matrix.push(v);\n+            // If pattern has a guard don't add it to the matrix\n+            if !is_under_guard {\n+                matrix.push(v);\n+            }\n         }\n         return if any_is_useful { Useful(unreachable_pats) } else { NotUseful };\n     }\n@@ -1712,7 +1720,18 @@ crate fn is_useful<'p, 'tcx>(\n             Some(hir_id),\n         )\n         .into_iter()\n-        .map(|c| is_useful_specialized(cx, matrix, v, c, pcx.ty, witness_preference, hir_id))\n+        .map(|c| {\n+            is_useful_specialized(\n+                cx,\n+                matrix,\n+                v,\n+                c,\n+                pcx.ty,\n+                witness_preference,\n+                hir_id,\n+                is_under_guard,\n+            )\n+        })\n         .find(|result| result.is_useful())\n         .unwrap_or(NotUseful)\n     } else {\n@@ -1746,14 +1765,24 @@ crate fn is_useful<'p, 'tcx>(\n             split_grouped_constructors(cx.tcx, cx.param_env, pcx, all_ctors, matrix, DUMMY_SP, None)\n                 .into_iter()\n                 .map(|c| {\n-                    is_useful_specialized(cx, matrix, v, c, pcx.ty, witness_preference, hir_id)\n+                    is_useful_specialized(\n+                        cx,\n+                        matrix,\n+                        v,\n+                        c,\n+                        pcx.ty,\n+                        witness_preference,\n+                        hir_id,\n+                        is_under_guard,\n+                    )\n                 })\n                 .find(|result| result.is_useful())\n                 .unwrap_or(NotUseful)\n         } else {\n             let matrix = matrix.specialize_wildcard();\n             let v = v.to_tail();\n-            let usefulness = is_useful(cx, &matrix, &v, witness_preference, hir_id, false);\n+            let usefulness =\n+                is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n \n             // In this case, there's at least one \"free\"\n             // constructor that is only matched against by\n@@ -1810,14 +1839,15 @@ fn is_useful_specialized<'p, 'tcx>(\n     lty: Ty<'tcx>,\n     witness_preference: WitnessPreference,\n     hir_id: HirId,\n+    is_under_guard: bool,\n ) -> Usefulness<'tcx, 'p> {\n     debug!(\"is_useful_specialized({:#?}, {:#?}, {:?})\", v, ctor, lty);\n \n     let ctor_wild_subpatterns =\n         cx.pattern_arena.alloc_from_iter(ctor.wildcard_subpatterns(cx, lty));\n     let matrix = matrix.specialize_constructor(cx, &ctor, ctor_wild_subpatterns);\n     v.specialize_constructor(cx, &ctor, ctor_wild_subpatterns)\n-        .map(|v| is_useful(cx, &matrix, &v, witness_preference, hir_id, false))\n+        .map(|v| is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false))\n         .map(|u| u.apply_constructor(cx, &ctor, lty))\n         .unwrap_or(NotUseful)\n }"}, {"sha": "c2eeac60b8b3bc709e2357f123f67ca2c0622ec4", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5796e6e4618fd02bb7423b8f1a62f5b01ada63a7/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=5796e6e4618fd02bb7423b8f1a62f5b01ada63a7", "patch": "@@ -360,7 +360,7 @@ fn check_arms<'p, 'tcx>(\n     let mut catchall = None;\n     for (arm_index, (pat, id, has_guard)) in arms.iter().copied().enumerate() {\n         let v = PatStack::from_pattern(pat);\n-        match is_useful(cx, &seen, &v, LeaveOutWitness, id, true) {\n+        match is_useful(cx, &seen, &v, LeaveOutWitness, id, has_guard, true) {\n             NotUseful => {\n                 match source {\n                     hir::MatchSource::IfDesugar { .. } | hir::MatchSource::WhileDesugar => bug!(),\n@@ -410,7 +410,10 @@ fn check_not_useful<'p, 'tcx>(\n ) -> Result<(), Vec<super::Pat<'tcx>>> {\n     let wild_pattern = cx.pattern_arena.alloc(super::Pat::wildcard_from_ty(ty));\n     let v = PatStack::from_pattern(wild_pattern);\n-    match is_useful(cx, matrix, &v, ConstructWitness, hir_id, true) {\n+\n+    // false is given for `is_under_guard` argument due to the wildcard\n+    // pattern not having a guard\n+    match is_useful(cx, matrix, &v, ConstructWitness, hir_id, false, true) {\n         NotUseful => Ok(()), // This is good, wildcard pattern isn't reachable.\n         UsefulWithWitness(pats) => Err(if pats.is_empty() {\n             bug!(\"Exhaustiveness check returned no witnesses\")"}]}