{"sha": "c6bb96005e87d218b25cdf4afad94593a1e549fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YmI5NjAwNWU4N2QyMThiMjVjZGY0YWZhZDk0NTkzYTFlNTQ5ZmE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-18T20:48:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-18T20:48:22Z"}, "message": "Rollup merge of #65480 - nnethercote:rm-iterate_until_fixed_size, r=nikomatsakis\n\nSpeed up `LexicalResolve::expansion()`\n\nA couple of improvements that speed up `unicode_normalization` by about 4%. The first commit was enabled by the improvements to `BitSet` iteration in #65425.\n\nr? @nikomatsakis", "tree": {"sha": "e9aa669c4e66286dc49f9e041062a2eacc0bf003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9aa669c4e66286dc49f9e041062a2eacc0bf003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6bb96005e87d218b25cdf4afad94593a1e549fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqiUWCRBK7hj4Ov3rIwAAdHIIAAjxpMnHl6e2KHAoxltJzHdd\nQWXeWVCk6gCCOxhw5gZjxOTotT8Ra7kqc+xtvsBeYnzIzSkpHr5h02gxD6oLz/Hp\nkWXauhB1SvfMLZJ3Luyb4giFoub7jfqj3Zavui7EOiiszlw9mZQUq5R4G5lTYR0l\nTtDGRkUoNY8luGQIcqNQZqPM/LMXCfJYW5dkl1zxgkr2sO8SMXnYhgBdrjELCqOJ\nHvMcrMafrvnJcrWnnEJVCPDHSwrnuiS21OPqi3BcBwqHtT9NpNcM/GVfXxctt3U9\nQyrATHlA6gvs06JBTmaZkkwQJk62fd6Mf7ijgpKPtaFeW8MJ11+6DM05/lpJptE=\n=b/v7\n-----END PGP SIGNATURE-----\n", "payload": "tree e9aa669c4e66286dc49f9e041062a2eacc0bf003\nparent 05ab63efc919055c6de26d5119a264a18dd85bef\nparent d51fee092c76016f973a4a73e52a14e44c92b1c7\nauthor Tyler Mandry <tmandry@gmail.com> 1571431702 -0700\ncommitter GitHub <noreply@github.com> 1571431702 -0700\n\nRollup merge of #65480 - nnethercote:rm-iterate_until_fixed_size, r=nikomatsakis\n\nSpeed up `LexicalResolve::expansion()`\n\nA couple of improvements that speed up `unicode_normalization` by about 4%. The first commit was enabled by the improvements to `BitSet` iteration in #65425.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bb96005e87d218b25cdf4afad94593a1e549fa", "html_url": "https://github.com/rust-lang/rust/commit/c6bb96005e87d218b25cdf4afad94593a1e549fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6bb96005e87d218b25cdf4afad94593a1e549fa/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05ab63efc919055c6de26d5119a264a18dd85bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/05ab63efc919055c6de26d5119a264a18dd85bef", "html_url": "https://github.com/rust-lang/rust/commit/05ab63efc919055c6de26d5119a264a18dd85bef"}, {"sha": "d51fee092c76016f973a4a73e52a14e44c92b1c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d51fee092c76016f973a4a73e52a14e44c92b1c7", "html_url": "https://github.com/rust-lang/rust/commit/d51fee092c76016f973a4a73e52a14e44c92b1c7"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "f30f19d41509dae6fc66849778fd9e27185437b5", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c6bb96005e87d218b25cdf4afad94593a1e549fa/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bb96005e87d218b25cdf4afad94593a1e549fa/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=c6bb96005e87d218b25cdf4afad94593a1e549fa", "patch": "@@ -19,8 +19,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use smallvec::SmallVec;\n use std::fmt;\n use syntax_pos::Span;\n \n@@ -304,8 +304,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n-        self.iterate_until_fixed_point(|constraint| {\n-            debug!(\"expansion: constraint={:?}\", constraint);\n+        let mut process_constraint = |constraint: &Constraint<'tcx>| {\n             let (a_region, b_vid, b_data, retain) = match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n@@ -331,7 +330,33 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n             let changed = self.expand_node(a_region, b_vid, b_data);\n             (changed, retain)\n-        })\n+        };\n+\n+        // Using bitsets to track the remaining elements is faster than using a\n+        // `Vec` by itself (which requires removing elements, which requires\n+        // element shuffling, which is slow).\n+        let constraints: Vec<_> = self.data.constraints.keys().collect();\n+        let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n+        let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n+        let mut changed = true;\n+        while changed {\n+            changed = false;\n+            for index in live_indices.iter() {\n+                let constraint = constraints[index];\n+                let (edge_changed, retain) = process_constraint(constraint);\n+                if edge_changed {\n+                    changed = true;\n+                }\n+                if !retain {\n+                    let changed = killed_indices.insert(index);\n+                    debug_assert!(changed);\n+                }\n+            }\n+            live_indices.subtract(&killed_indices);\n+\n+            // We could clear `killed_indices` here, but we don't need to and\n+            // it's cheaper not to.\n+        }\n     }\n \n     // This function is very hot in some workloads. There's a single callsite\n@@ -866,29 +891,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n-    fn iterate_until_fixed_point<F>(&self, mut body: F)\n-    where\n-        F: FnMut(&Constraint<'tcx>) -> (bool, bool),\n-    {\n-        let mut constraints: SmallVec<[_; 16]> = self.data.constraints.keys().collect();\n-        let mut iteration = 0;\n-        let mut changed = true;\n-        while changed {\n-            changed = false;\n-            iteration += 1;\n-            debug!(\"---- Expansion iteration {}\", iteration);\n-            constraints.retain(|constraint| {\n-                let (edge_changed, retain) = body(constraint);\n-                if edge_changed {\n-                    debug!(\"updated due to constraint {:?}\", constraint);\n-                    changed = true;\n-                }\n-                retain\n-            });\n-        }\n-        debug!(\"---- Expansion complete after {} iteration(s)\", iteration);\n-    }\n-\n     fn bound_is_met(\n         &self,\n         bound: &VerifyBound<'tcx>,"}]}