{"sha": "e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDMxOGUwZmE1NDI5ZTFhYzQ0YjYyNGI5YTc3NWNmZWVlZDY2ZWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-23T22:55:44Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-25T19:44:36Z"}, "message": "Add a small MIR validation pass", "tree": {"sha": "bf2cdad55c0c6a93f032b61d4331871b2c7d3fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2cdad55c0c6a93f032b61d4331871b2c7d3fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "html_url": "https://github.com/rust-lang/rust/commit/e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca626258ae9a677c4d63fa278847eb90e514868", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca626258ae9a677c4d63fa278847eb90e514868", "html_url": "https://github.com/rust-lang/rust/commit/4ca626258ae9a677c4d63fa278847eb90e514868"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "d573e11fc4b249ad00eb771d00d963f109ecce7d", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "patch": "@@ -511,6 +511,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(ui_testing, true);\n     untracked!(unpretty, Some(\"expanded\".to_string()));\n     untracked!(unstable_options, true);\n+    untracked!(validate_mir, true);\n     untracked!(verbose, true);\n \n     macro_rules! tracked {"}, {"sha": "95a5752348374d13e2262c5356862d16bc40ee40", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "patch": "@@ -39,6 +39,7 @@ pub mod simplify_branches;\n pub mod simplify_try;\n pub mod uninhabited_enum_branching;\n pub mod unreachable_prop;\n+pub mod validate;\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n     self::check_unsafety::provide(providers);\n@@ -147,12 +148,18 @@ pub fn run_passes(\n     passes: &[&[&dyn MirPass<'tcx>]],\n ) {\n     let phase_index = mir_phase.phase_index();\n+    let source = MirSource { instance, promoted };\n+    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n \n     if body.phase >= mir_phase {\n         return;\n     }\n \n-    let source = MirSource { instance, promoted };\n+    if validate {\n+        validate::Validator { when: format!(\"input to phase {:?}\", mir_phase) }\n+            .run_pass(tcx, source, body);\n+    }\n+\n     let mut index = 0;\n     let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n         let run_hooks = |body: &_, index, is_after| {\n@@ -169,6 +176,11 @@ pub fn run_passes(\n         pass.run_pass(tcx, source, body);\n         run_hooks(body, index, true);\n \n+        if validate {\n+            validate::Validator { when: format!(\"after {} in phase {:?}\", pass.name(), mir_phase) }\n+                .run_pass(tcx, source, body);\n+        }\n+\n         index += 1;\n     };\n "}, {"sha": "a25edd131baa19e2b5d36b4584d653e53405ffaa", "filename": "src/librustc_mir/transform/validate.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "patch": "@@ -0,0 +1,80 @@\n+//! Validates the MIR to ensure that invariants are upheld.\n+\n+use super::{MirPass, MirSource};\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::{\n+    mir::{Body, Location, Operand, Rvalue, Statement, StatementKind},\n+    ty::{ParamEnv, TyCtxt},\n+};\n+use rustc_span::{def_id::DefId, Span, DUMMY_SP};\n+\n+pub struct Validator {\n+    /// Describes at which point in the pipeline this validation is happening.\n+    pub when: String,\n+}\n+\n+impl<'tcx> MirPass<'tcx> for Validator {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let def_id = source.def_id();\n+        let param_env = tcx.param_env(def_id);\n+        TypeChecker { when: &self.when, def_id, body, tcx, param_env }.visit_body(body);\n+    }\n+}\n+\n+struct TypeChecker<'a, 'tcx> {\n+    when: &'a str,\n+    def_id: DefId,\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+}\n+\n+impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n+    fn fail(&self, span: Span, msg: impl AsRef<str>) {\n+        // We use `delay_span_bug` as we might see broken MIR when other errors have already\n+        // occurred.\n+        self.tcx.sess.diagnostic().delay_span_bug(\n+            span,\n+            &format!(\"broken MIR in {:?} ({}): {}\", self.def_id, self.when, msg.as_ref()),\n+        );\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n+    fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n+        // `Operand::Copy` is only supposed to be used with `Copy` types.\n+        if let Operand::Copy(place) = operand {\n+            let ty = place.ty(&self.body.local_decls, self.tcx).ty;\n+\n+            if !ty.is_copy_modulo_regions(self.tcx, self.param_env, DUMMY_SP) {\n+                self.fail(\n+                    DUMMY_SP,\n+                    format!(\"`Operand::Copy` with non-`Copy` type {} at {:?}\", ty, location),\n+                );\n+            }\n+        }\n+\n+        self.super_operand(operand, location);\n+    }\n+\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        // The sides of an assignment must not alias. Currently this just checks whether the places\n+        // are identical.\n+        if let StatementKind::Assign(box (dest, rvalue)) = &statement.kind {\n+            match rvalue {\n+                Rvalue::Use(Operand::Copy(src) | Operand::Move(src)) => {\n+                    if dest == src {\n+                        self.fail(\n+                            DUMMY_SP,\n+                            format!(\n+                                \"encountered `Assign` statement with overlapping memory at {:?}\",\n+                                location\n+                            ),\n+                        );\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "95f9ff00fb8d46547419f25a319f31159c28f6cd", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04318e0fa5429e1ac44b624b9a775cfeeed66ed/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=e04318e0fa5429e1ac44b624b9a775cfeeed66ed", "patch": "@@ -1045,6 +1045,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"adds unstable command line options to rustc interface (default: no)\"),\n     use_ctors_section: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use legacy .ctors section for initializers rather than .init_array\"),\n+    validate_mir: bool = (false, parse_bool, [UNTRACKED],\n+        \"validate MIR after each transformation\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n         \"in general, enable more debug printouts (default: no)\"),\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],"}]}