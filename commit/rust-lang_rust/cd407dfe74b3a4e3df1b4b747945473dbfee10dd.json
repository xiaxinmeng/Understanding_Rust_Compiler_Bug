{"sha": "cd407dfe74b3a4e3df1b4b747945473dbfee10dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDA3ZGZlNzRiM2E0ZTNkZjFiNGI3NDc5NDU0NzNkYmZlZTEwZGQ=", "commit": {"author": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2018-10-20T18:45:44Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-01T14:52:28Z"}, "message": "Separates inner attributes from code during doctest parsing.", "tree": {"sha": "19453950c21024c1e59e2b730e5761b300f1ae48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19453950c21024c1e59e2b730e5761b300f1ae48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd407dfe74b3a4e3df1b4b747945473dbfee10dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd407dfe74b3a4e3df1b4b747945473dbfee10dd", "html_url": "https://github.com/rust-lang/rust/commit/cd407dfe74b3a4e3df1b4b747945473dbfee10dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd407dfe74b3a4e3df1b4b747945473dbfee10dd/comments", "author": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43b65b51e0f7de77f93c65a0a807ef5ce76ac02d", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b65b51e0f7de77f93c65a0a807ef5ce76ac02d", "html_url": "https://github.com/rust-lang/rust/commit/43b65b51e0f7de77f93c65a0a807ef5ce76ac02d"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "1a51b8b458c4bac313e5b15b3d15a02d4b12fdc7", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cd407dfe74b3a4e3df1b4b747945473dbfee10dd/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd407dfe74b3a4e3df1b4b747945473dbfee10dd/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=cd407dfe74b3a4e3df1b4b747945473dbfee10dd", "patch": "@@ -378,7 +378,7 @@ pub fn make_test(s: &str,\n                  dont_insert_main: bool,\n                  opts: &TestOptions)\n                  -> (String, usize) {\n-    let (crate_attrs, everything_else) = partition_source(s);\n+    let (crate_attrs, everything_else, crates) = partition_source(s);\n     let everything_else = everything_else.trim();\n     let mut line_offset = 0;\n     let mut prog = String::new();\n@@ -409,38 +409,47 @@ pub fn make_test(s: &str,\n         use crate::syntax_pos::FileName;\n \n         let filename = FileName::Anon;\n-        let source = s.to_owned();\n+        let source = crates + &everything_else;\n         let sess = ParseSess::new(FilePathMapping::empty());\n \n         let mut parser = parse::new_parser_from_source_str(&sess, filename, source);\n \n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();\n \n-        while let Ok(Some(item)) = parser.parse_item() {\n-            if !found_main {\n-                if let ast::ItemKind::Fn(..) = item.node {\n-                    if item.ident.as_str() == \"main\" {\n-                        found_main = true;\n+        loop {\n+            match parser.parse_item() {\n+                Ok(Some(item)) => {\n+                    if !found_main {\n+                        if let ast::ItemKind::Fn(..) = item.node {\n+                            if item.ident.as_str() == \"main\" {\n+                                found_main = true;\n+                            }\n+                        }\n                     }\n-                }\n-            }\n \n-            if !found_extern_crate {\n-                if let ast::ItemKind::ExternCrate(original) = item.node {\n-                    // This code will never be reached if `cratename` is none because\n-                    // `found_extern_crate` is initialized to `true` if it is none.\n-                    let cratename = cratename.unwrap();\n+                    if !found_extern_crate {\n+                        if let ast::ItemKind::ExternCrate(original) = item.node {\n+                            // This code will never be reached if `cratename` is none because\n+                            // `found_extern_crate` is initialized to `true` if it is none.\n+                            let cratename = cratename.unwrap();\n+\n+                            match original {\n+                                Some(name) => found_extern_crate = name.as_str() == cratename,\n+                                None => found_extern_crate = item.ident.as_str() == cratename,\n+                            }\n+                        }\n+                    }\n \n-                    match original {\n-                        Some(name) => found_extern_crate = name.as_str() == cratename,\n-                        None => found_extern_crate = item.ident.as_str() == cratename,\n+                    if found_main && found_extern_crate {\n+                        break;\n                     }\n                 }\n-            }\n-\n-            if found_main && found_extern_crate {\n-                break;\n+                Ok(None) => break,\n+                Err(mut e) => {\n+                    e.cancel();\n+                    break;\n+                }\n             }\n         }\n \n@@ -474,9 +483,10 @@ pub fn make_test(s: &str,\n }\n \n // FIXME(aburka): use a real parser to deal with multiline attributes\n-fn partition_source(s: &str) -> (String, String) {\n+fn partition_source(s: &str) -> (String, String, String) {\n     let mut after_header = false;\n     let mut before = String::new();\n+    let mut crates = String::new();\n     let mut after = String::new();\n \n     for line in s.lines() {\n@@ -490,12 +500,16 @@ fn partition_source(s: &str) -> (String, String) {\n             after.push_str(line);\n             after.push_str(\"\\n\");\n         } else {\n+            if trimline.starts_with(\"#[macro_use] extern crate\")\n+                || trimline.starts_with(\"extern crate\") {\n+                crates.push_str(line);\n+            }\n             before.push_str(line);\n             before.push_str(\"\\n\");\n         }\n     }\n \n-    (before, after)\n+    (before, after, crates)\n }\n \n pub trait Tester {"}]}