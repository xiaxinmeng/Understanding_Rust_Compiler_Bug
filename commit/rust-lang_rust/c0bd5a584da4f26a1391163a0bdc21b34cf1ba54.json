{"sha": "c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYmQ1YTU4NGRhNGYyNmExMzkxMTYzYTBiZGMyMWIzNGNmMWJhNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-07T01:03:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-07T01:03:41Z"}, "message": "Auto merge of #86901 - sexxi-goose:query_remove, r=nikomatsakis\n\nMake type_implements_trait not a query\n\nr? `@nikomatsakis`", "tree": {"sha": "a74461f577e754e7f422b7a266459091a13a8e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74461f577e754e7f422b7a266459091a13a8e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "html_url": "https://github.com/rust-lang/rust/commit/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20e3ff2af39e1de6280d52aea2e87585e98056d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20e3ff2af39e1de6280d52aea2e87585e98056d", "html_url": "https://github.com/rust-lang/rust/commit/b20e3ff2af39e1de6280d52aea2e87585e98056d"}, {"sha": "1bcbc18e3dc25f8c3e5b3535961f02aa3816f2aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcbc18e3dc25f8c3e5b3535961f02aa3816f2aa", "html_url": "https://github.com/rust-lang/rust/commit/1bcbc18e3dc25f8c3e5b3535961f02aa3816f2aa"}], "stats": {"total": 250, "additions": 142, "deletions": 108}, "files": [{"sha": "aa54d1ae7b9d118426d9702dac6384725e0b50c4", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 18);\n+static_assert_size!(DepNode, 17);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "9a2f1149316e26e0a547aca9334c82aeb1a08cf2", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -1555,25 +1555,6 @@ rustc_queries! {\n         desc { \"evaluating trait selection obligation `{}`\", goal.value }\n     }\n \n-    /// Evaluates whether the given type implements the given trait\n-    /// in the given environment.\n-    ///\n-    /// The inputs are:\n-    ///\n-    /// - the def-id of the trait\n-    /// - the self type\n-    /// - the *other* type parameters of the trait, excluding the self-type\n-    /// - the parameter environment\n-    ///\n-    /// FIXME. If the type, trait, or environment has inference variables,\n-    /// this yields `EvaluatedToUnknown`. It should be refactored\n-    /// to use canonicalization, really.\n-    query type_implements_trait(\n-        key: (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>, )\n-    ) -> traits::EvaluationResult {\n-        desc { \"evaluating `type_implements_trait` `{:?}`\", key }\n-    }\n-\n     /// Do not call this query directly: part of the `Eq` type-op\n     query type_op_ascribe_user_type(\n         goal: CanonicalTypeOpAscribeUserTypeGoal<'tcx>"}, {"sha": "0b01c4efcdbd4688798487a6655b92fb4166930c", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_trait_selection::infer::InferCtxtExt;\n \n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};\n@@ -1330,8 +1331,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             // to avoid panics\n             if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) {\n-                if tcx\n-                    .type_implements_trait((iter_trait, return_ty, ty_params, self.param_env))\n+                if self\n+                    .infcx\n+                    .type_implements_trait(iter_trait, return_ty, ty_params, self.param_env)\n                     .must_apply_modulo_regions()\n                 {\n                     if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(return_span) {"}, {"sha": "9fc907da2653e39474e300c3822a741dd2ab1d41", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -1,13 +1,18 @@\n+use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::outlives_bounds::InferCtxtExt as _;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n \n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::ToPredicate;\n+use rustc_middle::ty::WithConstness;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -32,8 +37,22 @@ pub trait InferCtxtExt<'tcx> {\n     ) -> InferOk<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>;\n-}\n \n+    /// Check whether a `ty` implements given trait(trait_def_id).\n+    /// The inputs are:\n+    ///\n+    /// - the def-id of the trait\n+    /// - the self type\n+    /// - the *other* type parameters of the trait, excluding the self-type\n+    /// - the parameter environment\n+    fn type_implements_trait(\n+        &self,\n+        trait_def_id: DefId,\n+        ty: Ty<'tcx>,\n+        params: SubstsRef<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> traits::EvaluationResult;\n+}\n impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     fn type_is_copy_modulo_regions(\n         &self,\n@@ -79,6 +98,30 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         );\n         InferOk { value, obligations }\n     }\n+\n+    fn type_implements_trait(\n+        &self,\n+        trait_def_id: DefId,\n+        ty: Ty<'tcx>,\n+        params: SubstsRef<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> traits::EvaluationResult {\n+        debug!(\n+            \"type_implements_trait: trait_def_id={:?}, type={:?}, params={:?}, param_env={:?}\",\n+            trait_def_id, ty, params, param_env\n+        );\n+\n+        let trait_ref =\n+            ty::TraitRef { def_id: trait_def_id, substs: self.tcx.mk_substs_trait(ty, params) };\n+\n+        let obligation = traits::Obligation {\n+            cause: traits::ObligationCause::dummy(),\n+            param_env,\n+            recursion_depth: 0,\n+            predicate: trait_ref.without_const().to_predicate(self.tcx),\n+        };\n+        self.evaluate_obligation_no_overflow(&obligation)\n+    }\n }\n \n pub trait InferCtxtBuilderExt<'tcx> {"}, {"sha": "cca40ff1ce6a60b84a5c2fb343705f59592502aa", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -28,6 +28,7 @@ use rustc_target::spec::abi;\n use std::fmt;\n \n use super::InferCtxtPrivExt;\n+use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n \n@@ -2349,12 +2350,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 let self_ty = self.tcx.erase_regions(self_ty);\n \n-                let impls_future = self.tcx.type_implements_trait((\n+                let impls_future = self.type_implements_trait(\n                     future_trait,\n                     self_ty.skip_binder(),\n                     ty::List::empty(),\n                     obligation.param_env,\n-                ));\n+                );\n \n                 let item_def_id = self\n                     .tcx"}, {"sha": "3a80e720e8c4b8560f2aed49e13628061de01430", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -31,7 +31,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{\n-    self, GenericParamDefKind, ParamEnv, ToPredicate, Ty, TyCtxt, VtblEntry, WithConstness,\n+    self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry, WithConstness,\n     COMMON_VTABLE_ENTRIES,\n };\n use rustc_span::Span;\n@@ -541,44 +541,6 @@ fn vtable_trait_first_method_offset<'tcx>(\n     vtable_base\n }\n \n-/// Check whether a `ty` implements given trait(trait_def_id).\n-/// See query definition for details.\n-fn type_implements_trait<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    key: (\n-        DefId,    // trait_def_id,\n-        Ty<'tcx>, // type\n-        SubstsRef<'tcx>,\n-        ParamEnv<'tcx>,\n-    ),\n-) -> EvaluationResult {\n-    let (trait_def_id, ty, params, param_env) = key;\n-\n-    debug!(\n-        \"type_implements_trait: trait_def_id={:?}, type={:?}, params={:?}, param_env={:?}\",\n-        trait_def_id, ty, params, param_env\n-    );\n-\n-    let trait_ref = ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, params) };\n-\n-    // FIXME(#86868): If there are inference variables anywhere, just give up and assume\n-    // we don't know the answer. This works around the ICEs that would result from\n-    // using those inference variables within the `infer_ctxt` we create below.\n-    // Really we should be using canonicalized variables, or perhaps removing\n-    // this query altogether.\n-    if (trait_ref, param_env).needs_infer() {\n-        return EvaluationResult::EvaluatedToUnknown;\n-    }\n-\n-    let obligation = Obligation {\n-        cause: ObligationCause::dummy(),\n-        param_env,\n-        recursion_depth: 0,\n-        predicate: trait_ref.without_const().to_predicate(tcx),\n-    };\n-    tcx.infer_ctxt().enter(|infcx| infcx.evaluate_obligation_no_overflow(&obligation))\n-}\n-\n pub fn provide(providers: &mut ty::query::Providers) {\n     object_safety::provide(providers);\n     structural_match::provide(providers);\n@@ -587,7 +549,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         specializes: specialize::specializes,\n         codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,\n         vtable_entries,\n-        type_implements_trait,\n         subst_and_check_impossible_predicates,\n         mir_abstract_const: |tcx, def_id| {\n             let def_id = def_id.expect_local();"}, {"sha": "b3808eae1ad1155c10af372a76d9632562b005c6", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -45,6 +45,7 @@ use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n \n@@ -441,8 +442,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             let expr_ty = fcx.tcx.erase_regions(expr_ty);\n                             let ty_params = fcx.tcx.mk_substs_trait(expr_ty, &[]);\n                             if fcx\n-                                .tcx\n-                                .type_implements_trait((from_trait, ty, ty_params, fcx.param_env))\n+                                .infcx\n+                                .type_implements_trait(from_trait, ty, ty_params, fcx.param_env)\n                                 .must_apply_modulo_regions()\n                             {\n                                 label = false;"}, {"sha": "7be864c301b154100905cec166f8b28295b6e8ab", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -42,13 +42,11 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::UpvarRegion;\n use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection, ProjectionKind};\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{\n-    self, ClosureSizeProfileData, TraitRef, Ty, TyCtxt, TypeckResults, UpvarSubsts,\n-};\n+use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt, TypeckResults, UpvarSubsts};\n use rustc_session::lint;\n use rustc_span::sym;\n use rustc_span::{MultiSpan, Span, Symbol};\n-use rustc_trait_selection::traits::{Obligation, ObligationCause};\n+use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_index::vec::Idx;\n@@ -578,29 +576,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         reasons\n     }\n \n-    /// Returns true if `ty` may implement `trait_def_id`\n-    fn ty_impls_trait(\n-        &self,\n-        ty: Ty<'tcx>,\n-        cause: &ObligationCause<'tcx>,\n-        trait_def_id: DefId,\n-    ) -> bool {\n-        use crate::rustc_middle::ty::ToPredicate;\n-        use crate::rustc_middle::ty::WithConstness;\n-        use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n-        let tcx = self.infcx.tcx;\n-\n-        let trait_ref = TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, &[]) };\n-\n-        let obligation = Obligation::new(\n-            cause.clone(),\n-            self.param_env,\n-            trait_ref.without_const().to_predicate(tcx),\n-        );\n-\n-        self.infcx.predicate_may_hold(&obligation)\n-    }\n-\n     /// Returns true if migration is needed for trait for the provided var_hir_id\n     fn need_2229_migrations_for_trait(\n         &self,\n@@ -618,10 +593,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n \n-        let cause = ObligationCause::misc(self.tcx.hir().span(var_hir_id), self.body_id);\n-\n         let obligation_should_hold = check_trait\n-            .map(|check_trait| self.ty_impls_trait(ty, &cause, check_trait))\n+            .map(|check_trait| {\n+                self.infcx\n+                    .type_implements_trait(\n+                        check_trait,\n+                        ty,\n+                        self.tcx.mk_substs_trait(ty, &[]),\n+                        self.param_env,\n+                    )\n+                    .must_apply_modulo_regions()\n+            })\n             .unwrap_or(false);\n \n         // Check whether catpured fields also implement the trait\n@@ -630,7 +612,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = capture.place.ty();\n \n             let obligation_holds_for_capture = check_trait\n-                .map(|check_trait| self.ty_impls_trait(ty, &cause, check_trait))\n+                .map(|check_trait| {\n+                    self.infcx\n+                        .type_implements_trait(\n+                            check_trait,\n+                            ty,\n+                            self.tcx.mk_substs_trait(ty, &[]),\n+                            self.param_env,\n+                        )\n+                        .must_apply_modulo_regions()\n+                })\n                 .unwrap_or(false);\n \n             if !obligation_holds_for_capture && obligation_should_hold {\n@@ -961,13 +952,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let is_drop_defined_for_ty = |ty: Ty<'tcx>| {\n             let drop_trait = self.tcx.require_lang_item(hir::LangItem::Drop, Some(closure_span));\n             let ty_params = self.tcx.mk_substs_trait(base_path_ty, &[]);\n-            self.tcx\n-                .type_implements_trait((\n+            self.infcx\n+                .type_implements_trait(\n                     drop_trait,\n                     ty,\n                     ty_params,\n                     self.tcx.param_env(closure_def_id.expect_local()),\n-                ))\n+                )\n                 .must_apply_modulo_regions()\n         };\n "}, {"sha": "4d6c4354e2bdc3bcc775bd0d39112551f8f0fdb1", "filename": "src/test/incremental/issue-86753.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/src%2Ftest%2Fincremental%2Fissue-86753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/src%2Ftest%2Fincremental%2Fissue-86753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-86753.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -0,0 +1,50 @@\n+// edition:2018\n+// revisions: rpass1\n+\n+\n+// Regression test for #86753. The `type_implements_trait` query (since moved to a method)\n+// was encountering an ICE during incremental testing when hashing its arguments.\n+#![warn(rust_2021_compatibility)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Poll, Context};\n+\n+struct LocalSet {}\n+struct RunUntil<'a, F> {\n+    _local_set: &'a LocalSet,\n+    _future: F,\n+}\n+impl<'a, F> RunUntil<'a, F> {\n+    fn project<'pin>(self: Pin<&'pin mut Self>) -> Projection<'pin, 'a, F> {\n+        unimplemented!()\n+    }\n+}\n+\n+struct Projection<'pin, 'a, F>\n+where\n+    RunUntil<'a, F>: 'pin,\n+{\n+    pub local_set: &'pin mut &'a LocalSet,\n+    pub future: Pin<&'pin mut F>,\n+}\n+\n+impl LocalSet {\n+    fn with<T>(&self, _f: impl FnOnce() -> T) -> T {\n+        unimplemented!()\n+    }\n+}\n+impl<T: Future> Future for RunUntil<'_, T> {\n+    type Output = T::Output;\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        let me = self.project();\n+        me.local_set.with(|| {\n+            let _ = cx.waker();\n+            let f = me.future;\n+            let _ = f.poll(cx);\n+            Poll::Pending\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a6f8ba65ab51af649f9d25d7361470825f3904f1", "filename": "src/test/ui/issues/issue-73886.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/src%2Ftest%2Fui%2Fissues%2Fissue-73886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/src%2Ftest%2Fui%2Fissues%2Fissue-73886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73886.stderr?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -8,7 +8,9 @@ error[E0605]: non-primitive cast: `u32` as `Option<_>`\n   --> $DIR/issue-73886.rs:4:13\n    |\n LL |     let _ = 7u32 as Option<_>;\n-   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using the `From` trait instead: `Option<_>::from(7u32)`\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8857e77d8983d34d0e9505c8a00097731275c5d5", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "patch": "@@ -15,6 +15,7 @@ use rustc_span::sym;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::infer::InferCtxtExt;\n \n use crate::{match_def_path, must_use_attr};\n \n@@ -112,25 +113,26 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n }\n \n /// Checks whether a type implements a trait.\n+/// The function returns false in case the type contains an inference variable.\n /// See also `get_trait_def_id`.\n pub fn implements_trait<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n-    // Do not check on infer_types to avoid panic in evaluate_obligation.\n-    if ty.has_infer_types() {\n-        return false;\n-    }\n+    // Clippy shouldn't have infer types\n+    assert!(!ty.needs_infer());\n+\n     let ty = cx.tcx.erase_regions(ty);\n     if ty.has_escaping_bound_vars() {\n         return false;\n     }\n     let ty_params = cx.tcx.mk_substs(ty_params.iter());\n-    cx.tcx\n-        .type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n+    cx.tcx.infer_ctxt().enter(|infcx|\n+        infcx.type_implements_trait(trait_id, ty, ty_params, cx.param_env)\n         .must_apply_modulo_regions()\n+    )\n }\n \n /// Checks whether this type implements `Drop`."}]}