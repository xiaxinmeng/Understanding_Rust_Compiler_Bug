{"sha": "cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZjVkMjJiY2RkODY3NGRiMWYzOTQ1MzI2ZTRmZjhkNmI2OTg2Yzg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:15:21Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:11:04Z"}, "message": "Add const type flags\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "5d890cbc4e7d059c29e117df7fa2bdd8a83e00a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d890cbc4e7d059c29e117df7fa2bdd8a83e00a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "html_url": "https://github.com/rust-lang/rust/commit/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c272d4edcd1974c2c501a9310acbb30c65fe54", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c272d4edcd1974c2c501a9310acbb30c65fe54", "html_url": "https://github.com/rust-lang/rust/commit/29c272d4edcd1974c2c501a9310acbb30c65fe54"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "64ceb9729ed15374b47619090ece88830606c6be", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "patch": "@@ -1,5 +1,6 @@\n-use crate::ty::subst::SubstsRef;\n-use crate::ty::{self, Ty, TypeFlags, TypeFoldable};\n+use crate::ty::subst::{SubstsRef, UnpackedKind};\n+use crate::ty::{self, Ty, TypeFlags, TypeFoldable, InferConst};\n+use crate::mir::interpret::ConstValue;\n \n #[derive(Debug)]\n pub struct FlagComputation {\n@@ -232,6 +233,21 @@ impl FlagComputation {\n         }\n     }\n \n+    fn add_const(&mut self, c: &ty::LazyConst<'_>) {\n+        match c {\n+            ty::LazyConst::Unevaluated(_, substs) => self.add_substs(substs),\n+            // Only done to add the binder for the type. The type flags are\n+            // included in `Const::type_flags`.\n+            ty::LazyConst::Evaluated(ty::Const { ty, val }) => {\n+                self.add_ty(ty);\n+                if let ConstValue::Infer(InferConst::Canonical(debruijn, _)) = val {\n+                    self.add_binder(*debruijn)\n+                }\n+            }\n+        }\n+        self.add_flags(c.type_flags());\n+    }\n+\n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n         self.add_ty(projection.ty);\n@@ -242,12 +258,12 @@ impl FlagComputation {\n     }\n \n     fn add_substs(&mut self, substs: SubstsRef<'_>) {\n-        for ty in substs.types() {\n-            self.add_ty(ty);\n-        }\n-\n-        for r in substs.regions() {\n-            self.add_region(r);\n+        for kind in substs {\n+            match kind.unpack() {\n+                UnpackedKind::Type(ty) => self.add_ty(ty),\n+                UnpackedKind::Lifetime(lt) => self.add_region(lt),\n+                UnpackedKind::Const(ct) => self.add_const(ct),\n+            }\n         }\n     }\n }"}, {"sha": "7f77d037bb6a1a715711d8f81e4979720adbd130", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "patch": "@@ -91,7 +91,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n     }\n     fn needs_infer(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n+        self.has_type_flags(\n+            TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER | TypeFlags::HAS_CT_INFER\n+        )\n     }\n     fn has_placeholders(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_PLACEHOLDER | TypeFlags::HAS_TY_PLACEHOLDER)\n@@ -117,7 +119,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     /// Indicates whether this value references only 'global'\n-    /// types/lifetimes that are the same regardless of what fn we are\n+    /// generic parameters that are the same regardless of what fn we are\n     /// in. This is used for caching.\n     fn is_global(&self) -> bool {\n         !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)\n@@ -841,14 +843,13 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     fn visit_const(&mut self, c: &'tcx ty::LazyConst<'tcx>) -> bool {\n-        if let ty::LazyConst::Unevaluated(..) = c {\n-            let projection_flags = TypeFlags::HAS_NORMALIZABLE_PROJECTION |\n-                TypeFlags::HAS_PROJECTION;\n-            if projection_flags.intersects(self.flags) {\n-                return true;\n-            }\n+        let flags = c.type_flags();\n+        debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n+        if flags.intersects(self.flags) {\n+            true\n+        } else {\n+            c.super_visit_with(self)\n         }\n-        c.super_visit_with(self)\n     }\n }\n "}]}