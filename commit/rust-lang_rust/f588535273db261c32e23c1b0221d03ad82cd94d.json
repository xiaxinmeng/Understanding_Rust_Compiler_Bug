{"sha": "f588535273db261c32e23c1b0221d03ad82cd94d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ODg1MzUyNzNkYjI2MWMzMmUyM2MxYjAyMjFkMDNhZDgyY2Q5NGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T21:26:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T21:32:37Z"}, "message": "remove boilerplate", "tree": {"sha": "5d664933d8383f436a8b93c31e3142f810ca865c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d664933d8383f436a8b93c31e3142f810ca865c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f588535273db261c32e23c1b0221d03ad82cd94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f588535273db261c32e23c1b0221d03ad82cd94d", "html_url": "https://github.com/rust-lang/rust/commit/f588535273db261c32e23c1b0221d03ad82cd94d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f588535273db261c32e23c1b0221d03ad82cd94d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "html_url": "https://github.com/rust-lang/rust/commit/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1"}], "stats": {"total": 164, "additions": 72, "deletions": 92}, "files": [{"sha": "ad3f9c40597f5c807859d7749f942b6d674dc126", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 12, "deletions": 42, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=f588535273db261c32e23c1b0221d03ad82cd94d", "patch": "@@ -8,42 +8,18 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Name, AsName, Struct, Enum, EnumVariant, Module, HirFileId,\n+    Name, AsName, Struct, Enum, EnumVariant,\n     HirDatabase,\n     type_ref::TypeRef,\n-    ids::ItemLoc,\n+    ids::LocationCtx,\n };\n \n impl Struct {\n-    pub(crate) fn from_ast(\n-        db: &impl HirDatabase,\n-        module: Module,\n-        file_id: HirFileId,\n-        ast: &ast::StructDef,\n-    ) -> Struct {\n-        let loc = ItemLoc::from_ast(db, module, file_id, ast);\n-        let id = db.as_ref().structs.loc2id(&loc);\n-        Struct { id }\n-    }\n-\n     pub(crate) fn variant_data(&self, db: &impl HirDatabase) -> Arc<VariantData> {\n         db.struct_data((*self).into()).variant_data.clone()\n     }\n }\n \n-impl Enum {\n-    pub(crate) fn from_ast(\n-        db: &impl HirDatabase,\n-        module: Module,\n-        file_id: HirFileId,\n-        ast: &ast::EnumDef,\n-    ) -> Enum {\n-        let loc = ItemLoc::from_ast(db, module, file_id, ast);\n-        let id = db.as_ref().enums.loc2id(&loc);\n-        Enum { id }\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct StructData {\n     pub(crate) name: Option<Name>,\n@@ -64,19 +40,6 @@ impl StructData {\n     }\n }\n \n-impl EnumVariant {\n-    pub(crate) fn from_ast(\n-        db: &impl HirDatabase,\n-        module: Module,\n-        file_id: HirFileId,\n-        ast: &ast::EnumVariant,\n-    ) -> EnumVariant {\n-        let loc = ItemLoc::from_ast(db, module, file_id, ast);\n-        let id = db.as_ref().enum_variants.loc2id(&loc);\n-        EnumVariant { id }\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub(crate) name: Option<Name>,\n@@ -92,11 +55,15 @@ impl EnumData {\n     pub(crate) fn enum_data_query(db: &impl HirDatabase, e: Enum) -> Arc<EnumData> {\n         let (file_id, enum_def) = e.source(db);\n         let module = e.module(db);\n+        let ctx = LocationCtx::new(db, module, file_id);\n         let variants = if let Some(vl) = enum_def.variant_list() {\n             vl.variants()\n                 .filter_map(|variant_def| {\n-                    let name = variant_def.name().map(|n| n.as_name());\n-                    name.map(|n| (n, EnumVariant::from_ast(db, module, file_id, variant_def)))\n+                    let name = variant_def.name()?.as_name();\n+                    let var = EnumVariant {\n+                        id: ctx.to_def(variant_def),\n+                    };\n+                    Some((name, var))\n                 })\n                 .collect()\n         } else {\n@@ -131,7 +98,10 @@ impl EnumVariantData {\n     ) -> Arc<EnumVariantData> {\n         let (file_id, variant_def) = var.source(db);\n         let enum_def = variant_def.parent_enum();\n-        let e = Enum::from_ast(db, var.module(db), file_id, enum_def);\n+        let ctx = LocationCtx::new(db, var.module(db), file_id);\n+        let e = Enum {\n+            id: ctx.to_def(enum_def),\n+        };\n         Arc::new(EnumVariantData::new(&*variant_def, e))\n     }\n }"}, {"sha": "e0dd4d6290bebfa70fb4daeb7185a83a6df3b670", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=f588535273db261c32e23c1b0221d03ad82cd94d", "patch": "@@ -5,27 +5,15 @@ use std::sync::Arc;\n use ra_syntax::ast::{self, NameOwner};\n \n use crate::{\n-    HirDatabase, Name, AsName, Function, FnSignature, Module, HirFileId,\n+    HirDatabase, Name, AsName, Function, FnSignature,\n     type_ref::{TypeRef, Mutability},\n     expr::Body,\n     impl_block::ImplBlock,\n-    ids::ItemLoc,\n };\n \n pub use self::scope::{FnScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n \n impl Function {\n-    pub(crate) fn from_ast(\n-        db: &impl HirDatabase,\n-        module: Module,\n-        file_id: HirFileId,\n-        ast: &ast::FnDef,\n-    ) -> Function {\n-        let loc = ItemLoc::from_ast(db, module, file_id, ast);\n-        let id = db.as_ref().fns.loc2id(&loc);\n-        Function { id }\n-    }\n-\n     pub(crate) fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n         db.body_hir(*self)\n     }"}, {"sha": "4b4e07e58704c9c904afb73869aacdb728dfc64d", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=f588535273db261c32e23c1b0221d03ad82cd94d", "patch": "@@ -16,10 +16,10 @@ use crate::{\n pub struct HirInterner {\n     defs: LocationIntener<DefLoc, DefId>,\n     macros: LocationIntener<MacroCallLoc, MacroCallId>,\n-    pub(crate) fns: LocationIntener<ItemLoc<ast::FnDef>, FunctionId>,\n-    pub(crate) structs: LocationIntener<ItemLoc<ast::StructDef>, StructId>,\n-    pub(crate) enums: LocationIntener<ItemLoc<ast::EnumDef>, EnumId>,\n-    pub(crate) enum_variants: LocationIntener<ItemLoc<ast::EnumVariant>, EnumVariantId>,\n+    fns: LocationIntener<ItemLoc<ast::FnDef>, FunctionId>,\n+    structs: LocationIntener<ItemLoc<ast::StructDef>, StructId>,\n+    enums: LocationIntener<ItemLoc<ast::EnumDef>, EnumId>,\n+    enum_variants: LocationIntener<ItemLoc<ast::EnumVariant>, EnumVariantId>,\n }\n \n impl HirInterner {\n@@ -144,50 +144,64 @@ pub struct ItemLoc<N: AstNode> {\n     _ty: PhantomData<N>,\n }\n \n-impl<N: AstNode> ItemLoc<N> {\n-    pub(crate) fn from_ast(\n-        db: &impl HirDatabase,\n-        module: Module,\n-        file_id: HirFileId,\n-        ast: &N,\n-    ) -> ItemLoc<N> {\n-        let items = db.file_items(file_id);\n-        let raw = SourceItemId {\n-            file_id,\n-            item_id: Some(items.id_of(file_id, ast.syntax())),\n-        };\n+impl<N: AstNode> Clone for ItemLoc<N> {\n+    fn clone(&self) -> ItemLoc<N> {\n         ItemLoc {\n-            module,\n-            raw,\n+            module: self.module,\n+            raw: self.raw,\n             _ty: PhantomData,\n         }\n     }\n+}\n \n-    pub(crate) fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<N>) {\n-        let syntax = db.file_item(self.raw);\n-        let ast = N::cast(&syntax)\n-            .unwrap_or_else(|| panic!(\"invalid ItemLoc: {:?}\", self.raw))\n-            .to_owned();\n-        (self.raw.file_id, ast)\n-    }\n+#[derive(Clone, Copy)]\n+pub(crate) struct LocationCtx<DB> {\n+    db: DB,\n+    module: Module,\n+    file_id: HirFileId,\n }\n \n-impl<N: AstNode> Clone for ItemLoc<N> {\n-    fn clone(&self) -> ItemLoc<N> {\n-        ItemLoc {\n-            module: self.module,\n-            raw: self.raw,\n-            _ty: PhantomData,\n+impl<'a, DB: HirDatabase> LocationCtx<&'a DB> {\n+    pub(crate) fn new(db: &'a DB, module: Module, file_id: HirFileId) -> LocationCtx<&'a DB> {\n+        LocationCtx {\n+            db,\n+            module,\n+            file_id,\n         }\n     }\n+    pub(crate) fn to_def<N, DEF>(self, ast: &N) -> DEF\n+    where\n+        N: AstNode + Eq + Hash,\n+        DEF: AstItemDef<N>,\n+    {\n+        DEF::from_ast(self, ast)\n+    }\n }\n \n pub(crate) trait AstItemDef<N: AstNode + Eq + Hash>: ArenaId + Clone {\n     fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<N>, Self>;\n+    fn from_ast(ctx: LocationCtx<&impl HirDatabase>, ast: &N) -> Self {\n+        let items = ctx.db.file_items(ctx.file_id);\n+        let raw = SourceItemId {\n+            file_id: ctx.file_id,\n+            item_id: Some(items.id_of(ctx.file_id, ast.syntax())),\n+        };\n+        let loc = ItemLoc {\n+            module: ctx.module,\n+            raw,\n+            _ty: PhantomData,\n+        };\n+\n+        Self::interner(ctx.db.as_ref()).loc2id(&loc)\n+    }\n     fn source(self, db: &impl HirDatabase) -> (HirFileId, TreeArc<N>) {\n         let int = Self::interner(db.as_ref());\n         let loc = int.id2loc(self);\n-        loc.source(db)\n+        let syntax = db.file_item(loc.raw);\n+        let ast = N::cast(&syntax)\n+            .unwrap_or_else(|| panic!(\"invalid ItemLoc: {:?}\", loc.raw))\n+            .to_owned();\n+        (loc.raw.file_id, ast)\n     }\n     fn module(self, db: &impl HirDatabase) -> Module {\n         let int = Self::interner(db.as_ref());"}, {"sha": "3df0d3a3b8fb522f89c1dfa9db4dc2d75575a410", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=f588535273db261c32e23c1b0221d03ad82cd94d", "patch": "@@ -9,6 +9,7 @@ use crate::{\n     Function, HirFileId,\n     db::HirDatabase,\n     type_ref::TypeRef,\n+    ids::LocationCtx,\n };\n \n use crate::code_model_api::{Module, ModuleSource};\n@@ -72,13 +73,14 @@ impl ImplData {\n     ) -> Self {\n         let target_trait = node.target_trait().map(TypeRef::from_ast);\n         let target_type = TypeRef::from_ast_opt(node.target_type());\n+        let ctx = LocationCtx::new(db, module, file_id);\n         let items = if let Some(item_list) = node.item_list() {\n             item_list\n                 .impl_items()\n                 .map(|item_node| {\n                     let kind = match item_node.kind() {\n                         ast::ImplItemKind::FnDef(it) => {\n-                            return ImplItem::Method(Function::from_ast(db, module, file_id, it));\n+                            return ImplItem::Method(Function { id: ctx.to_def(it) });\n                         }\n                         ast::ImplItemKind::ConstDef(..) => DefKind::Item,\n                         ast::ImplItemKind::TypeDef(..) => DefKind::Item,"}, {"sha": "0056bdd5a13a76710c9f82aea742053dd6ca7831", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=f588535273db261c32e23c1b0221d03ad82cd94d", "patch": "@@ -11,6 +11,7 @@ use crate::{\n     SourceItemId, Path, ModuleSource, HirDatabase, Name, SourceFileItems,\n     HirFileId, MacroCallLoc, AsName, PerNs, DefKind, DefLoc, Function,\n     ModuleDef, Module, Struct, Enum,\n+    ids::LocationCtx,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -146,26 +147,27 @@ impl LoweredModule {\n         file_items: &SourceFileItems,\n         item: &ast::ModuleItem,\n     ) {\n+        let ctx = LocationCtx::new(db, module, file_id);\n         let name = match item.kind() {\n             ast::ModuleItemKind::StructDef(it) => {\n                 if let Some(name) = it.name() {\n-                    let s = Struct::from_ast(db, module, file_id, it);\n+                    let s = Struct { id: ctx.to_def(it) };\n                     let s: ModuleDef = s.into();\n                     self.declarations.insert(name.as_name(), PerNs::both(s, s));\n                 }\n                 return;\n             }\n             ast::ModuleItemKind::EnumDef(it) => {\n                 if let Some(name) = it.name() {\n-                    let e = Enum::from_ast(db, module, file_id, it);\n+                    let e = Enum { id: ctx.to_def(it) };\n                     let e: ModuleDef = e.into();\n                     self.declarations.insert(name.as_name(), PerNs::types(e));\n                 }\n                 return;\n             }\n             ast::ModuleItemKind::FnDef(it) => {\n                 if let Some(name) = it.name() {\n-                    let func = Function::from_ast(db, module, file_id, it);\n+                    let func = Function { id: ctx.to_def(it) };\n                     self.declarations\n                         .insert(name.as_name(), PerNs::values(func.into()));\n                 }"}, {"sha": "ea81858535f9dde3e71b30f9570324f10484d389", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588535273db261c32e23c1b0221d03ad82cd94d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f588535273db261c32e23c1b0221d03ad82cd94d", "patch": "@@ -15,6 +15,7 @@ use ra_syntax::{\n use crate::{\n     HirDatabase, Function, SourceItemId, ModuleDef,\n     AsName, Module,\n+    ids::LocationCtx,\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n@@ -116,7 +117,10 @@ pub fn function_from_module(\n ) -> Function {\n     let (file_id, _) = module.definition_source(db);\n     let file_id = file_id.into();\n-    Function::from_ast(db, module, file_id, fn_def)\n+    let ctx = LocationCtx::new(db, module, file_id);\n+    Function {\n+        id: ctx.to_def(fn_def),\n+    }\n }\n \n pub fn function_from_child_node("}]}