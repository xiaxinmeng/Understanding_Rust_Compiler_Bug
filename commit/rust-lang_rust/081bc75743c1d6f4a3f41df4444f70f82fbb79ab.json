{"sha": "081bc75743c1d6f4a3f41df4444f70f82fbb79ab", "node_id": "C_kwDOAAsO6NoAKDA4MWJjNzU3NDNjMWQ2ZjRhM2Y0MWRmNDQ0NGY3MGY4MmZiYjc5YWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-07T08:20:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-08T14:40:37Z"}, "message": "Assume the frame has all the locals.", "tree": {"sha": "a15a2df3a69e536168726474091a06410567db59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15a2df3a69e536168726474091a06410567db59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/081bc75743c1d6f4a3f41df4444f70f82fbb79ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/081bc75743c1d6f4a3f41df4444f70f82fbb79ab", "html_url": "https://github.com/rust-lang/rust/commit/081bc75743c1d6f4a3f41df4444f70f82fbb79ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/081bc75743c1d6f4a3f41df4444f70f82fbb79ab/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "html_url": "https://github.com/rust-lang/rust/commit/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "0918ffcd9821442a92ef261da3c2204f9606d4a2", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/081bc75743c1d6f4a3f41df4444f70f82fbb79ab/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081bc75743c1d6f4a3f41df4444f70f82fbb79ab/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=081bc75743c1d6f4a3f41df4444f70f82fbb79ab", "patch": "@@ -536,24 +536,20 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         local: mir::Local,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n-        // `const_prop` runs into this with an invalid (empty) frame, so we\n-        // have to support that case (mostly by skipping all caching).\n-        match frame.locals.get(local).and_then(|state| state.layout.get()) {\n-            None => {\n-                let layout = from_known_layout(self.tcx, self.param_env, layout, || {\n-                    let local_ty = frame.body.local_decls[local].ty;\n-                    let local_ty =\n-                        self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty)?;\n-                    self.layout_of(local_ty)\n-                })?;\n-                if let Some(state) = frame.locals.get(local) {\n-                    // Layouts of locals are requested a lot, so we cache them.\n-                    state.layout.set(Some(layout));\n-                }\n-                Ok(layout)\n-            }\n-            Some(layout) => Ok(layout),\n+        let state = &frame.locals[local];\n+        if let Some(layout) = state.layout.get() {\n+            return Ok(layout);\n         }\n+\n+        let layout = from_known_layout(self.tcx, self.param_env, layout, || {\n+            let local_ty = frame.body.local_decls[local].ty;\n+            let local_ty = self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty)?;\n+            self.layout_of(local_ty)\n+        })?;\n+\n+        // Layouts of locals are requested a lot, so we cache them.\n+        state.layout.set(Some(layout));\n+        Ok(layout)\n     }\n \n     /// Returns the actual dynamic size and alignment of the place at the given type."}]}