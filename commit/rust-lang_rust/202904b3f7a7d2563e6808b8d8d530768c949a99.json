{"sha": "202904b3f7a7d2563e6808b8d8d530768c949a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMjkwNGIzZjdhN2QyNTYzZTY4MDhiOGQ4ZDUzMDc2OGM5NDlhOTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-19T09:10:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-19T09:10:39Z"}, "message": "make basic CTFE tracing available on release builds", "tree": {"sha": "766e1419e0150bb8a4592a8dba52c3fdc8c88a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/766e1419e0150bb8a4592a8dba52c3fdc8c88a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202904b3f7a7d2563e6808b8d8d530768c949a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202904b3f7a7d2563e6808b8d8d530768c949a99", "html_url": "https://github.com/rust-lang/rust/commit/202904b3f7a7d2563e6808b8d8d530768c949a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202904b3f7a7d2563e6808b8d8d530768c949a99/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb84844e83ee88684ef89cc02221a26abbf92530", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb84844e83ee88684ef89cc02221a26abbf92530", "html_url": "https://github.com/rust-lang/rust/commit/cb84844e83ee88684ef89cc02221a26abbf92530"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "8ae0345e07a34a5da3fae486c8b1c56b35fefcf3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/202904b3f7a7d2563e6808b8d8d530768c949a99/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202904b3f7a7d2563e6808b8d8d530768c949a99/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=202904b3f7a7d2563e6808b8d8d530768c949a99", "patch": "@@ -422,7 +422,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         return_to_block: StackPopCleanup,\n     ) -> EvalResult<'tcx> {\n         if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n-            debug!(\"PAUSING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"PAUSING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n         ::log_settings::settings().indentation += 1;\n \n@@ -491,7 +491,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n \n         if self.stack.len() > 1 { // FIXME no check should be needed, but some instances ICE\n-            debug!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n \n         if self.stack.len() > self.tcx.sess.const_eval_stack_frame_limit {\n@@ -503,7 +503,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n \n     pub(super) fn pop_stack_frame(&mut self) -> EvalResult<'tcx> {\n         if self.stack.len() > 1 { // FIXME no check should be needed, but some instances ICE\n-            debug!(\"LEAVING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"LEAVING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n         ::log_settings::settings().indentation -= 1;\n         let frame = self.stack.pop().expect(\n@@ -557,7 +557,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n \n         if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n-            debug!(\"CONTINUING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"CONTINUING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n \n         Ok(())"}, {"sha": "0b3f5b2678c7f817cd098fc7ae34be5ab33ebc92", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/202904b3f7a7d2563e6808b8d8d530768c949a99/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202904b3f7a7d2563e6808b8d8d530768c949a99/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=202904b3f7a7d2563e6808b8d8d530768c949a99", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> EvalResult<'tcx> {\n-        debug!(\"{:?}\", stmt);\n+        info!(\"{:?}\", stmt);\n \n         use rustc::mir::StatementKind::*;\n \n@@ -293,7 +293,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> EvalResult<'tcx> {\n-        debug!(\"{:?}\", terminator.kind);\n+        info!(\"{:?}\", terminator.kind);\n         self.tcx.span = terminator.source_info.span;\n         self.memory.tcx.span = terminator.source_info.span;\n \n@@ -303,7 +303,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         if !self.stack.is_empty() {\n             // This should change *something*\n             debug_assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n-            debug!(\"// {:?}\", self.frame().block);\n+            info!(\"// {:?}\", self.frame().block);\n         }\n         Ok(())\n     }"}]}