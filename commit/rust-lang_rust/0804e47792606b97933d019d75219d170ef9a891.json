{"sha": "0804e47792606b97933d019d75219d170ef9a891", "node_id": "C_kwDOAAsO6NoAKDA4MDRlNDc3OTI2MDZiOTc5MzNkMDE5ZDc1MjE5ZDE3MGVmOWE4OTE", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-02-13T17:26:38Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-02-14T17:57:46Z"}, "message": "Add test for foreign double unwind", "tree": {"sha": "ff2a0a9ce6427a7812173bfe1e4ec8a9ad0eac51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2a0a9ce6427a7812173bfe1e4ec8a9ad0eac51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0804e47792606b97933d019d75219d170ef9a891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0804e47792606b97933d019d75219d170ef9a891", "html_url": "https://github.com/rust-lang/rust/commit/0804e47792606b97933d019d75219d170ef9a891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0804e47792606b97933d019d75219d170ef9a891/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42b41da33823f10aa39ca594c76fe13be3f53e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/42b41da33823f10aa39ca594c76fe13be3f53e63", "html_url": "https://github.com/rust-lang/rust/commit/42b41da33823f10aa39ca594c76fe13be3f53e63"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "27cf4d19ce0677e765a3a20cf8182fb3eea2d30e", "filename": "src/test/run-make-fulldeps/foreign-double-unwind/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0804e47792606b97933d019d75219d170ef9a891/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0804e47792606b97933d019d75219d170ef9a891/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2FMakefile?ref=0804e47792606b97933d019d75219d170ef9a891", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all: foo\n+\t$(call RUN,foo) | $(CGREP) -v unreachable\n+\n+foo: foo.rs $(call NATIVE_STATICLIB,foo)\n+\t$(RUSTC) $< -lfoo $(EXTRARSCXXFLAGS)\n+\n+$(TMPDIR)/libfoo.o: foo.cpp\n+\t$(call COMPILE_OBJ_CXX,$@,$<)"}, {"sha": "69a8f11c2db78e9bf83352b73f558b0f6c2f9f74", "filename": "src/test/run-make-fulldeps/foreign-double-unwind/foo.cpp", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0804e47792606b97933d019d75219d170ef9a891/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0804e47792606b97933d019d75219d170ef9a891/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2Ffoo.cpp?ref=0804e47792606b97933d019d75219d170ef9a891", "patch": "@@ -0,0 +1,33 @@\n+#include <cstdio>\n+#include <exception>\n+\n+void println(const char* s) {\n+    puts(s);\n+    fflush(stdout);\n+}\n+\n+struct outer_exception {};\n+struct inner_exception {};\n+\n+extern \"C\" {\n+    void throw_cxx_exception() {\n+        if (std::uncaught_exception()) {\n+            println(\"throwing inner C++ exception\");\n+            throw inner_exception();\n+        } else {\n+            println(\"throwing outer C++ exception\");\n+            throw outer_exception();\n+        }\n+    }\n+\n+    void cxx_catch_callback(void (*cb)()) {\n+        try {\n+            cb();\n+            println(\"unreachable: callback returns\");\n+        } catch (outer_exception) {\n+            println(\"unreachable: caught outer exception in catch (...)\");\n+        } catch (inner_exception) {\n+            println(\"unreachable: caught inner exception in catch (...)\");\n+        }\n+    }\n+}"}, {"sha": "cae8aa9402d88f7c5e6534b1dbf6936da438c90a", "filename": "src/test/run-make-fulldeps/foreign-double-unwind/foo.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0804e47792606b97933d019d75219d170ef9a891/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0804e47792606b97933d019d75219d170ef9a891/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-double-unwind%2Ffoo.rs?ref=0804e47792606b97933d019d75219d170ef9a891", "patch": "@@ -0,0 +1,26 @@\n+// Tests that C++ double unwinding through Rust code will be properly guarded\n+// against instead of exhibiting undefined behaviour.\n+\n+#![feature(c_unwind)]\n+\n+extern \"C-unwind\" {\n+    fn throw_cxx_exception();\n+    fn cxx_catch_callback(cb: extern \"C-unwind\" fn());\n+}\n+\n+struct ThrowOnDrop;\n+\n+impl Drop for ThrowOnDrop {\n+    fn drop(&mut self) {\n+        unsafe { throw_cxx_exception() };\n+    }\n+}\n+\n+extern \"C-unwind\" fn test_double_unwind() {\n+    let _a = ThrowOnDrop;\n+    let _b = ThrowOnDrop;\n+}\n+\n+fn main() {\n+    unsafe { cxx_catch_callback(test_double_unwind) };\n+}"}]}