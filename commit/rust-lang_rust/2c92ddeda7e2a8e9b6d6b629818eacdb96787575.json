{"sha": "2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOTJkZGVkYTdlMmE4ZTliNmQ2YjYyOTgxOGVhY2RiOTY3ODc1NzU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-01T04:40:24Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-01T21:28:19Z"}, "message": "More fallout", "tree": {"sha": "9543983dc912f84eb6c12a1db4531c17c280388e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9543983dc912f84eb6c12a1db4531c17c280388e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "html_url": "https://github.com/rust-lang/rust/commit/2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13392d19cae2b03883d531a47d660b985b98833b", "url": "https://api.github.com/repos/rust-lang/rust/commits/13392d19cae2b03883d531a47d660b985b98833b", "html_url": "https://github.com/rust-lang/rust/commit/13392d19cae2b03883d531a47d660b985b98833b"}], "stats": {"total": 298, "additions": 149, "deletions": 149}, "files": [{"sha": "f4ec787a7949109c7a2a95801cfdf49ce958baa3", "filename": "src/doc/guide.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -1617,7 +1617,7 @@ value. In this example, each element of `a` will be initialized to `0i`:\n let a = [0i; 20]; // a: [int; 20]\n ```\n \n-Arrays have type `[T,..N]`. We'll talk about this `T` notation later, when we\n+Arrays have type `[T; N]`. We'll talk about this `T` notation later, when we\n cover generics.\n \n You can get the number of elements in an array `a` with `a.len()`, and use"}, {"sha": "61111d96bd064cf3a7f8e9b13d0cd2d9ec587ee1", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -382,7 +382,7 @@ pub trait SliceExt<T> for Sized? {\n     fn get_mut(&mut self, index: uint) -> Option<&mut T>;\n \n     /// Work with `self` as a mut slice.\n-    /// Primarily intended for getting a &mut [T] from a [T, ..N].\n+    /// Primarily intended for getting a &mut [T] from a [T; N].\n     #[stable]\n     fn as_mut_slice(&mut self) -> &mut [T];\n \n@@ -2060,7 +2060,7 @@ mod tests {\n         }\n \n         // shouldn't panic\n-        let mut v: [uint, .. 0] = [];\n+        let mut v: [uint; 0] = [];\n         v.sort();\n \n         let mut v = [0xDEADBEEFu];\n@@ -2072,7 +2072,7 @@ mod tests {\n     fn test_sort_stability() {\n         for len in range(4i, 25) {\n             for _ in range(0u, 10) {\n-                let mut counts = [0i, .. 10];\n+                let mut counts = [0i; 10];\n \n                 // create a vector like [(6, 1), (5, 1), (6, 2), ...],\n                 // where the first item of each tuple is random, but"}, {"sha": "129ba77d9f7a6022a8673f8d315474ff9d212d39", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -2743,7 +2743,7 @@ mod tests {\n         use core::iter::order;\n         // official Unicode test data\n         // from http://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n-        let test_same: [(_, &[_]), .. 325] = [\n+        let test_same: [(_, &[_]); 325] = [\n             (\"\\u{20}\\u{20}\", &[\"\\u{20}\", \"\\u{20}\"]),\n             (\"\\u{20}\\u{308}\\u{20}\", &[\"\\u{20}\\u{308}\", \"\\u{20}\"]),\n             (\"\\u{20}\\u{D}\", &[\"\\u{20}\", \"\\u{D}\"]),\n@@ -3075,7 +3075,7 @@ mod tests {\n             (\"\\u{646}\\u{200D}\\u{20}\", &[\"\\u{646}\\u{200D}\", \"\\u{20}\"]),\n         ];\n \n-        let test_diff: [(_, &[_], &[_]), .. 23] = [\n+        let test_diff: [(_, &[_], &[_]); 23] = [\n             (\"\\u{20}\\u{903}\", &[\"\\u{20}\\u{903}\"], &[\"\\u{20}\", \"\\u{903}\"]), (\"\\u{20}\\u{308}\\u{903}\",\n             &[\"\\u{20}\\u{308}\\u{903}\"], &[\"\\u{20}\\u{308}\", \"\\u{903}\"]), (\"\\u{D}\\u{308}\\u{903}\",\n             &[\"\\u{D}\", \"\\u{308}\\u{903}\"], &[\"\\u{D}\", \"\\u{308}\", \"\\u{903}\"]), (\"\\u{A}\\u{308}\\u{903}\","}, {"sha": "28563a60b6164eaa4593dc57ecb45f686148f36b", "filename": "src/libcore/array.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -26,33 +26,33 @@ macro_rules! array_impls {\n     ($($N:expr)+) => {\n         $(\n             #[stable]\n-            impl<T:Copy> Clone for [T, ..$N] {\n-                fn clone(&self) -> [T, ..$N] {\n+            impl<T:Copy> Clone for [T; $N] {\n+                fn clone(&self) -> [T; $N] {\n                     *self\n                 }\n             }\n \n             #[unstable = \"waiting for Show to stabilize\"]\n-            impl<T:fmt::Show> fmt::Show for [T, ..$N] {\n+            impl<T:fmt::Show> fmt::Show for [T; $N] {\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                     fmt::Show::fmt(&self[], f)\n                 }\n             }\n \n             #[stable]\n-            impl<A, B> PartialEq<[B, ..$N]> for [A, ..$N] where A: PartialEq<B> {\n+            impl<A, B> PartialEq<[B; $N]> for [A; $N] where A: PartialEq<B> {\n                 #[inline]\n-                fn eq(&self, other: &[B, ..$N]) -> bool {\n+                fn eq(&self, other: &[B; $N]) -> bool {\n                     self[] == other[]\n                 }\n                 #[inline]\n-                fn ne(&self, other: &[B, ..$N]) -> bool {\n+                fn ne(&self, other: &[B; $N]) -> bool {\n                     self[] != other[]\n                 }\n             }\n \n             #[stable]\n-            impl<'a, A, B, Rhs> PartialEq<Rhs> for [A, ..$N] where\n+            impl<'a, A, B, Rhs> PartialEq<Rhs> for [A; $N] where\n                 A: PartialEq<B>,\n                 Rhs: Deref<[B]>,\n             {\n@@ -63,47 +63,47 @@ macro_rules! array_impls {\n             }\n \n             #[stable]\n-            impl<'a, A, B, Lhs> PartialEq<[B, ..$N]> for Lhs where\n+            impl<'a, A, B, Lhs> PartialEq<[B; $N]> for Lhs where\n                 A: PartialEq<B>,\n                 Lhs: Deref<[A]>\n             {\n                 #[inline(always)]\n-                fn eq(&self, other: &[B, ..$N]) -> bool { PartialEq::eq(&**self, other[]) }\n+                fn eq(&self, other: &[B; $N]) -> bool { PartialEq::eq(&**self, other[]) }\n                 #[inline(always)]\n-                fn ne(&self, other: &[B, ..$N]) -> bool { PartialEq::ne(&**self, other[]) }\n+                fn ne(&self, other: &[B; $N]) -> bool { PartialEq::ne(&**self, other[]) }\n             }\n \n             #[stable]\n-            impl<T:Eq> Eq for [T, ..$N] { }\n+            impl<T:Eq> Eq for [T; $N] { }\n \n             #[stable]\n-            impl<T:PartialOrd> PartialOrd for [T, ..$N] {\n+            impl<T:PartialOrd> PartialOrd for [T; $N] {\n                 #[inline]\n-                fn partial_cmp(&self, other: &[T, ..$N]) -> Option<Ordering> {\n+                fn partial_cmp(&self, other: &[T; $N]) -> Option<Ordering> {\n                     PartialOrd::partial_cmp(&self[], &other[])\n                 }\n                 #[inline]\n-                fn lt(&self, other: &[T, ..$N]) -> bool {\n+                fn lt(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::lt(&self[], &other[])\n                 }\n                 #[inline]\n-                fn le(&self, other: &[T, ..$N]) -> bool {\n+                fn le(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::le(&self[], &other[])\n                 }\n                 #[inline]\n-                fn ge(&self, other: &[T, ..$N]) -> bool {\n+                fn ge(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::ge(&self[], &other[])\n                 }\n                 #[inline]\n-                fn gt(&self, other: &[T, ..$N]) -> bool {\n+                fn gt(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::gt(&self[], &other[])\n                 }\n             }\n \n             #[stable]\n-            impl<T:Ord> Ord for [T, ..$N] {\n+            impl<T:Ord> Ord for [T; $N] {\n                 #[inline]\n-                fn cmp(&self, other: &[T, ..$N]) -> Ordering {\n+                fn cmp(&self, other: &[T; $N]) -> Ordering {\n                     Ord::cmp(&self[], &other[])\n                 }\n             }"}, {"sha": "d4d241752f20b6fe1edb0e01158c2ffb3f9490d8", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -100,7 +100,7 @@ macro_rules! impl_hash {\n         impl<S: Writer> Hash<S> for $ty {\n             #[inline]\n             fn hash(&self, state: &mut S) {\n-                let a: [u8, ..::$ty::BYTES] = unsafe {\n+                let a: [u8; ::$ty::BYTES] = unsafe {\n                     mem::transmute((*self as $uty).to_le() as $ty)\n                 };\n                 state.write(a.as_slice())"}, {"sha": "9faaedc45f3b10359104febec977e9f9b0f89a7f", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -1632,7 +1632,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct WSAPROTOCOLCHAIN {\n                     pub ChainLen: c_int,\n-                    pub ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN as uint],\n+                    pub ChainEntries: [DWORD; MAX_PROTOCOL_CHAIN as uint],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n@@ -1658,7 +1658,7 @@ pub mod types {\n                     pub iSecurityScheme: c_int,\n                     pub dwMessageSize: DWORD,\n                     pub dwProviderReserved: DWORD,\n-                    pub szProtocol: [u8, ..(WSAPROTOCOL_LEN as uint) + 1u],\n+                    pub szProtocol: [u8; (WSAPROTOCOL_LEN as uint) + 1u],\n                 }\n \n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;"}, {"sha": "49577cd279bf84bb22c341ff236448ba237f3ffe", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -31,14 +31,14 @@ const CHACHA_ROUNDS: uint = 20; // Cryptographically secure from 8 upwards as of\n \n #[deriving(Copy)]\n pub struct ChaChaRng {\n-    buffer:  [u32, ..STATE_WORDS], // Internal buffer of output\n-    state:   [u32, ..STATE_WORDS], // Initial state\n+    buffer:  [u32; STATE_WORDS], // Internal buffer of output\n+    state:   [u32; STATE_WORDS], // Initial state\n     index:   uint,                 // Index into state\n }\n \n static EMPTY: ChaChaRng = ChaChaRng {\n-    buffer:  [0, ..STATE_WORDS],\n-    state:   [0, ..STATE_WORDS],\n+    buffer:  [0; STATE_WORDS],\n+    state:   [0; STATE_WORDS],\n     index:   STATE_WORDS\n };\n \n@@ -68,7 +68,7 @@ macro_rules! double_round{\n }\n \n #[inline]\n-fn core(output: &mut [u32, ..STATE_WORDS], input: &[u32, ..STATE_WORDS]) {\n+fn core(output: &mut [u32; STATE_WORDS], input: &[u32; STATE_WORDS]) {\n     *output = *input;\n \n     for _ in range(0, CHACHA_ROUNDS / 2) {\n@@ -86,7 +86,7 @@ impl ChaChaRng {\n     /// fixed key of 8 zero words.\n     pub fn new_unseeded() -> ChaChaRng {\n         let mut rng = EMPTY;\n-        rng.init(&[0, ..KEY_WORDS]);\n+        rng.init(&[0; KEY_WORDS]);\n         rng\n     }\n \n@@ -124,7 +124,7 @@ impl ChaChaRng {\n     /// ```\n     /// [1]: Daniel J. Bernstein. [*Extending the Salsa20\n     /// nonce.*](http://cr.yp.to/papers.html#xsalsa)\n-    fn init(&mut self, key: &[u32, ..KEY_WORDS]) {\n+    fn init(&mut self, key: &[u32; KEY_WORDS]) {\n         self.state[0] = 0x61707865;\n         self.state[1] = 0x3320646E;\n         self.state[2] = 0x79622D32;\n@@ -174,7 +174,7 @@ impl<'a> SeedableRng<&'a [u32]> for ChaChaRng {\n \n     fn reseed(&mut self, seed: &'a [u32]) {\n         // reset state\n-        self.init(&[0u32, ..KEY_WORDS]);\n+        self.init(&[0u32; KEY_WORDS]);\n         // set key in place\n         let key = self.state.slice_mut(4, 4+KEY_WORDS);\n         for (k, s) in key.iter_mut().zip(seed.iter()) {\n@@ -195,7 +195,7 @@ impl<'a> SeedableRng<&'a [u32]> for ChaChaRng {\n \n impl Rand for ChaChaRng {\n     fn rand<R: Rng>(other: &mut R) -> ChaChaRng {\n-        let mut key : [u32, ..KEY_WORDS] = [0, ..KEY_WORDS];\n+        let mut key : [u32; KEY_WORDS] = [0; KEY_WORDS];\n         for word in key.iter_mut() {\n             *word = other.gen();\n         }"}, {"sha": "a108fd70d1ca9d6410eb60bc1f048dbacf68b211", "filename": "src/librand/distributions/ziggurat_tables.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -11,9 +11,9 @@\n // Tables for distributions which are sampled using the ziggurat\n // algorithm. Autogenerated by `ziggurat_tables.py`.\n \n-pub type ZigTable = &'static [f64, .. 257];\n+pub type ZigTable = &'static [f64; 257];\n pub static ZIG_NORM_R: f64 = 3.654152885361008796;\n-pub static ZIG_NORM_X: [f64, .. 257] =\n+pub static ZIG_NORM_X: [f64; 257] =\n     [3.910757959537090045, 3.654152885361008796, 3.449278298560964462, 3.320244733839166074,\n      3.224575052047029100, 3.147889289517149969, 3.083526132001233044, 3.027837791768635434,\n      2.978603279880844834, 2.934366867207854224, 2.894121053612348060, 2.857138730872132548,\n@@ -79,7 +79,7 @@ pub static ZIG_NORM_X: [f64, .. 257] =\n      0.487443966121754335, 0.463634336771763245, 0.437518402186662658, 0.408389134588000746,\n      0.375121332850465727, 0.335737519180459465, 0.286174591747260509, 0.215241895913273806,\n      0.000000000000000000];\n-pub static ZIG_NORM_F: [f64, .. 257] =\n+pub static ZIG_NORM_F: [f64; 257] =\n     [0.000477467764586655, 0.001260285930498598, 0.002609072746106363, 0.004037972593371872,\n      0.005522403299264754, 0.007050875471392110, 0.008616582769422917, 0.010214971439731100,\n      0.011842757857943104, 0.013497450601780807, 0.015177088307982072, 0.016880083152595839,\n@@ -146,7 +146,7 @@ pub static ZIG_NORM_F: [f64, .. 257] =\n      0.932060075968990209, 0.945198953453078028, 0.959879091812415930, 0.977101701282731328,\n      1.000000000000000000];\n pub static ZIG_EXP_R: f64 = 7.697117470131050077;\n-pub static ZIG_EXP_X: [f64, .. 257] =\n+pub static ZIG_EXP_X: [f64; 257] =\n     [8.697117470131052741, 7.697117470131050077, 6.941033629377212577, 6.478378493832569696,\n      6.144164665772472667, 5.882144315795399869, 5.666410167454033697, 5.482890627526062488,\n      5.323090505754398016, 5.181487281301500047, 5.054288489981304089, 4.938777085901250530,\n@@ -212,7 +212,7 @@ pub static ZIG_EXP_X: [f64, .. 257] =\n      0.253658363385912022, 0.233790483059674731, 0.212671510630966620, 0.189958689622431842,\n      0.165127622564187282, 0.137304980940012589, 0.104838507565818778, 0.063852163815001570,\n      0.000000000000000000];\n-pub static ZIG_EXP_F: [f64, .. 257] =\n+pub static ZIG_EXP_F: [f64; 257] =\n     [0.000167066692307963, 0.000454134353841497, 0.000967269282327174, 0.001536299780301573,\n      0.002145967743718907, 0.002788798793574076, 0.003460264777836904, 0.004157295120833797,\n      0.004877655983542396, 0.005619642207205489, 0.006381905937319183, 0.007163353183634991,"}, {"sha": "1fe435a59adcbd7186205c2316592485339c0bf9", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -32,17 +32,17 @@ const RAND_SIZE_UINT: uint = 1 << (RAND_SIZE_LEN as uint);\n #[deriving(Copy)]\n pub struct IsaacRng {\n     cnt: u32,\n-    rsl: [u32, ..RAND_SIZE_UINT],\n-    mem: [u32, ..RAND_SIZE_UINT],\n+    rsl: [u32; RAND_SIZE_UINT],\n+    mem: [u32; RAND_SIZE_UINT],\n     a: u32,\n     b: u32,\n     c: u32\n }\n \n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n-    rsl: [0, ..RAND_SIZE_UINT],\n-    mem: [0, ..RAND_SIZE_UINT],\n+    rsl: [0; RAND_SIZE_UINT],\n+    mem: [0; RAND_SIZE_UINT],\n     a: 0, b: 0, c: 0\n };\n \n@@ -267,17 +267,17 @@ const RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n #[deriving(Copy)]\n pub struct Isaac64Rng {\n     cnt: uint,\n-    rsl: [u64, .. RAND_SIZE_64],\n-    mem: [u64, .. RAND_SIZE_64],\n+    rsl: [u64; RAND_SIZE_64],\n+    mem: [u64; RAND_SIZE_64],\n     a: u64,\n     b: u64,\n     c: u64,\n }\n \n static EMPTY_64: Isaac64Rng = Isaac64Rng {\n     cnt: 0,\n-    rsl: [0, .. RAND_SIZE_64],\n-    mem: [0, .. RAND_SIZE_64],\n+    rsl: [0; RAND_SIZE_64],\n+    mem: [0; RAND_SIZE_64],\n     a: 0, b: 0, c: 0,\n };\n \n@@ -358,7 +358,7 @@ impl Isaac64Rng {\n         let mut a = self.a;\n         let mut b = self.b + self.c;\n         const MIDPOINT: uint =  RAND_SIZE_64 / 2;\n-        const MP_VEC: [(uint, uint), .. 2] = [(0,MIDPOINT), (MIDPOINT, 0)];\n+        const MP_VEC: [(uint, uint); 2] = [(0,MIDPOINT), (MIDPOINT, 0)];\n         macro_rules! ind (\n             ($x:expr) => {\n                 *self.mem.get_unchecked(($x as uint >> 3) & (RAND_SIZE_64 - 1))"}, {"sha": "568d245911826cbe0a38bdc939515eb007646bf2", "filename": "src/librand/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -140,7 +140,7 @@ pub trait Rng {\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n     ///\n-    /// let mut v = [0u8, .. 13579];\n+    /// let mut v = [0u8; 13579];\n     /// thread_rng().fill_bytes(&mut v);\n     /// println!(\"{}\", v.as_slice());\n     /// ```\n@@ -429,9 +429,9 @@ impl Rng for XorShiftRng {\n     }\n }\n \n-impl SeedableRng<[u32, .. 4]> for XorShiftRng {\n+impl SeedableRng<[u32; 4]> for XorShiftRng {\n     /// Reseed an XorShiftRng. This will panic if `seed` is entirely 0.\n-    fn reseed(&mut self, seed: [u32, .. 4]) {\n+    fn reseed(&mut self, seed: [u32; 4]) {\n         assert!(!seed.iter().all(|&x| x == 0),\n                 \"XorShiftRng.reseed called with an all zero seed.\");\n \n@@ -442,7 +442,7 @@ impl SeedableRng<[u32, .. 4]> for XorShiftRng {\n     }\n \n     /// Create a new XorShiftRng. This will panic if `seed` is entirely 0.\n-    fn from_seed(seed: [u32, .. 4]) -> XorShiftRng {\n+    fn from_seed(seed: [u32; 4]) -> XorShiftRng {\n         assert!(!seed.iter().all(|&x| x == 0),\n                 \"XorShiftRng::from_seed called with an all zero seed.\");\n "}, {"sha": "0baa5e6c24f22ab1efdc6c3538c6f0f4a328d07c", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -169,7 +169,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n         chars: CharReader::new(input),\n     }.run(start, end);\n \n-    type Captures = [Option<uint>, ..$num_cap_locs];\n+    type Captures = [Option<uint>; $num_cap_locs];\n \n     struct Nfa<'t> {\n         which: MatchKind,\n@@ -250,8 +250,8 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n \n     struct Threads {\n         which: MatchKind,\n-        queue: [Thread, ..$num_insts],\n-        sparse: [uint, ..$num_insts],\n+        queue: [Thread; $num_insts],\n+        sparse: [uint; $num_insts],\n         size: uint,\n     }\n "}, {"sha": "b39dbd71117e818b933e64f2b0d9aaeb134944cc", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // Small vector optimization. This should catch 100% of the cases that\n         // we care about.\n         if ixs.len() < 16 {\n-            let mut small_vec = [ C_i32(self.ccx, 0), ..16 ];\n+            let mut small_vec = [ C_i32(self.ccx, 0); 16 ];\n             for (small_vec_e, &ix) in small_vec.iter_mut().zip(ixs.iter()) {\n                 *small_vec_e = C_i32(self.ccx, ix as i32);\n             }"}, {"sha": "8ac427dd06124c75c93d457707cd3fc210e2e6ce", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -63,7 +63,7 @@ pub const EXIT_MAX: uint = 2;\n pub enum CleanupScopeKind<'blk, 'tcx: 'blk> {\n     CustomScopeKind,\n     AstScopeKind(ast::NodeId),\n-    LoopScopeKind(ast::NodeId, [Block<'blk, 'tcx>, ..EXIT_MAX])\n+    LoopScopeKind(ast::NodeId, [Block<'blk, 'tcx>; EXIT_MAX])\n }\n \n impl<'blk, 'tcx: 'blk> fmt::Show for CleanupScopeKind<'blk, 'tcx> {\n@@ -146,7 +146,7 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n \n     fn push_loop_cleanup_scope(&self,\n                                id: ast::NodeId,\n-                               exits: [Block<'blk, 'tcx>, ..EXIT_MAX]) {\n+                               exits: [Block<'blk, 'tcx>; EXIT_MAX]) {\n         debug!(\"push_loop_cleanup_scope({})\",\n                self.ccx.tcx().map.node_to_string(id));\n         assert_eq!(Some(id), self.top_ast_scope());\n@@ -1058,7 +1058,7 @@ pub trait CleanupMethods<'blk, 'tcx> {\n     fn push_ast_cleanup_scope(&self, id: NodeInfo);\n     fn push_loop_cleanup_scope(&self,\n                                id: ast::NodeId,\n-                               exits: [Block<'blk, 'tcx>, ..EXIT_MAX]);\n+                               exits: [Block<'blk, 'tcx>; EXIT_MAX]);\n     fn push_custom_cleanup_scope(&self) -> CustomScopeIndex;\n     fn push_custom_cleanup_scope_with_debug_loc(&self,\n                                                 debug_loc: NodeInfo)"}, {"sha": "8a9c2eebf3a5325db027fdad1c508e4dc58c09be", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -392,7 +392,7 @@ fn escape_str(writer: &mut io::Writer, v: &str) -> Result<(), io::IoError> {\n }\n \n fn escape_char(writer: &mut io::Writer, v: char) -> Result<(), io::IoError> {\n-    let mut buf = [0, .. 4];\n+    let mut buf = [0; 4];\n     let len = v.encode_utf8(&mut buf).unwrap();\n     escape_bytes(writer, buf[mut ..len])\n }"}, {"sha": "46498610e560448242951eeb504e8af32414a3b6", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -454,7 +454,7 @@ unsafe fn with_c_str<T, F>(v: &[u8], checked: bool, f: F) -> T where\n     F: FnOnce(*const libc::c_char) -> T,\n {\n     let c_str = if v.len() < BUF_LEN {\n-        let mut buf: [u8, .. BUF_LEN] = mem::uninitialized();\n+        let mut buf: [u8; BUF_LEN] = mem::uninitialized();\n         slice::bytes::copy_memory(&mut buf, v);\n         buf[v.len()] = 0;\n "}, {"sha": "7fa6ebc6e3bac0837633496428d44f9f6721d7ab", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -882,7 +882,7 @@ mod test {\n         }\n         {\n             let mut read_stream = File::open_mode(filename, Open, Read);\n-            let mut read_buf = [0, .. 1028];\n+            let mut read_buf = [0; 1028];\n             let read_str = match check!(read_stream.read(&mut read_buf)) {\n                 -1|0 => panic!(\"shouldn't happen\"),\n                 n => str::from_utf8(read_buf[..n]).unwrap().to_string()\n@@ -922,7 +922,7 @@ mod test {\n     #[test]\n     fn file_test_io_non_positional_read() {\n         let message: &str = \"ten-four\";\n-        let mut read_mem = [0, .. 8];\n+        let mut read_mem = [0; 8];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_positional.txt\");\n         {\n@@ -948,7 +948,7 @@ mod test {\n     #[test]\n     fn file_test_io_seek_and_tell_smoke_test() {\n         let message = \"ten-four\";\n-        let mut read_mem = [0, .. 4];\n+        let mut read_mem = [0; 4];\n         let set_cursor = 4 as u64;\n         let mut tell_pos_pre_read;\n         let mut tell_pos_post_read;\n@@ -978,7 +978,7 @@ mod test {\n         let overwrite_msg =    \"-the-bar!!\";\n         let final_msg =     \"foo-the-bar!!\";\n         let seek_idx = 3i;\n-        let mut read_mem = [0, .. 13];\n+        let mut read_mem = [0; 13];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_seek_and_write.txt\");\n         {\n@@ -1003,7 +1003,7 @@ mod test {\n         let chunk_one: &str = \"qwer\";\n         let chunk_two: &str = \"asdf\";\n         let chunk_three: &str = \"zxcv\";\n-        let mut read_mem = [0, .. 4];\n+        let mut read_mem = [0; 4];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_seek_shakedown.txt\");\n         {\n@@ -1105,7 +1105,7 @@ mod test {\n             check!(w.write(msg));\n         }\n         let files = check!(readdir(dir));\n-        let mut mem = [0u8, .. 4];\n+        let mut mem = [0u8; 4];\n         for f in files.iter() {\n             {\n                 let n = f.filestem_str();\n@@ -1137,7 +1137,7 @@ mod test {\n         check!(File::create(&dir2.join(\"14\")));\n \n         let mut files = check!(walk_dir(dir));\n-        let mut cur = [0u8, .. 2];\n+        let mut cur = [0u8; 2];\n         for f in files {\n             let stem = f.filestem_str().unwrap();\n             let root = stem.as_bytes()[0] - b'0';"}, {"sha": "f8ea373f8f456794abda187489bbb7a42200e619", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -725,9 +725,9 @@ mod test {\n             {\n                 let mut rdr = MemReader::new(buf);\n                 for _i in range(0u, 10) {\n-                    let mut buf = [0 as u8, .. 10];\n+                    let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n-                    assert_eq!(buf.as_slice(), [5, .. 10].as_slice());\n+                    assert_eq!(buf.as_slice(), [5; 10].as_slice());\n                 }\n             }\n         });\n@@ -740,10 +740,10 @@ mod test {\n             {\n                 let mut wr = BufWriter::new(&mut buf);\n                 for _i in range(0u, 10) {\n-                    wr.write(&[5, .. 10]).unwrap();\n+                    wr.write(&[5; 10]).unwrap();\n                 }\n             }\n-            assert_eq!(buf.as_slice(), [5, .. 100].as_slice());\n+            assert_eq!(buf.as_slice(), [5; 100].as_slice());\n         });\n     }\n \n@@ -754,9 +754,9 @@ mod test {\n             {\n                 let mut rdr = BufReader::new(&buf);\n                 for _i in range(0u, 10) {\n-                    let mut buf = [0 as u8, .. 10];\n+                    let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n-                    assert_eq!(buf, [5, .. 10]);\n+                    assert_eq!(buf, [5; 10]);\n                 }\n             }\n         });"}, {"sha": "6ce66c3273bd6c2acb64ab0af2377de344bb3952", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -672,7 +672,7 @@ mod tests {\n \n         s.set_timeout(Some(20));\n         for i in range(0u, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),\n@@ -701,7 +701,7 @@ mod tests {\n             rx.recv();\n             let mut amt = 0;\n             while amt < 100 * 128 * 1024 {\n-                match s.read(&mut [0, ..128 * 1024]) {\n+                match s.read(&mut [0;128 * 1024]) {\n                     Ok(n) => { amt += n; }\n                     Err(e) => panic!(\"{}\", e),\n                 }\n@@ -716,7 +716,7 @@ mod tests {\n \n         tx.send(());\n         for _ in range(0u, 100) {\n-            assert!(s.write(&[0, ..128 * 1024]).is_ok());\n+            assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n \n@@ -735,7 +735,7 @@ mod tests {\n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n         for i in range(0u, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),"}, {"sha": "826f492d85d3135f061963b85c23c9b820080e66", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -1256,7 +1256,7 @@ mod test {\n \n         s.set_timeout(Some(20));\n         for i in range(0i, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),\n@@ -1280,7 +1280,7 @@ mod test {\n             rx.recv();\n             let mut amt = 0;\n             while amt < 100 * 128 * 1024 {\n-                match s.read(&mut [0, ..128 * 1024]) {\n+                match s.read(&mut [0;128 * 1024]) {\n                     Ok(n) => { amt += n; }\n                     Err(e) => panic!(\"{}\", e),\n                 }\n@@ -1295,7 +1295,7 @@ mod test {\n \n         tx.send(());\n         for _ in range(0i, 100) {\n-            assert!(s.write(&[0, ..128 * 1024]).is_ok());\n+            assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n \n@@ -1314,7 +1314,7 @@ mod test {\n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n         for i in range(0i, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),"}, {"sha": "11c2f956c355259d922bba4c5eecceab72f55bf0", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -599,7 +599,7 @@ mod test {\n \n         a.set_write_timeout(Some(1000));\n         for _ in range(0u, 100) {\n-            match a.send_to(&[0, ..4*1024], addr2) {\n+            match a.send_to(&[0;4*1024], addr2) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"other error: {}\", e),"}, {"sha": "9840412160d9fb431e33d0c5bb0f9e99291f7be8", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -235,7 +235,7 @@ impl<R: Reader, W: Writer> Reader for TeeReader<R, W> {\n \n /// Copies all data from a `Reader` to a `Writer`.\n pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> io::IoResult<()> {\n-    let mut buf = [0, ..super::DEFAULT_BUF_SIZE];\n+    let mut buf = [0; super::DEFAULT_BUF_SIZE];\n     loop {\n         let len = match r.read(&mut buf) {\n             Ok(len) => len,"}, {"sha": "f665d150f387831334793ce6b9bda8dcc586d912", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -669,7 +669,7 @@ mod bench {\n     #[bench]\n     fn rand_shuffle_100(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        let x : &mut[uint] = &mut [1,..100];\n+        let x : &mut[uint] = &mut [1; 100];\n         b.iter(|| {\n             rng.shuffle(x);\n         })"}, {"sha": "ca36f2d8997b1df67dc3f00468a55753a1243132", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -217,12 +217,12 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0u8, .. 4];\n+            let mut v = [0u8; 4];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0u8, .. 8];\n+            let mut v = [0u8; 8];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n@@ -304,12 +304,12 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0u8, .. 4];\n+            let mut v = [0u8; 4];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0u8, .. 8];\n+            let mut v = [0u8; 8];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n@@ -351,7 +351,7 @@ mod test {\n         r.next_u32();\n         r.next_u64();\n \n-        let mut v = [0u8, .. 1000];\n+        let mut v = [0u8; 1000];\n         r.fill_bytes(&mut v);\n     }\n \n@@ -371,7 +371,7 @@ mod test {\n                 // as possible (XXX: is this a good test?)\n                 let mut r = OsRng::new().unwrap();\n                 Thread::yield_now();\n-                let mut v = [0u8, .. 1000];\n+                let mut v = [0u8; 1000];\n \n                 for _ in range(0u, 100) {\n                     r.next_u32();"}, {"sha": "15e63aa19eabc43312ffeae6ed3074d2cebe11cc", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -105,7 +105,7 @@ mod test {\n     #[test]\n     fn test_reader_rng_fill_bytes() {\n         let v = [1u8, 2, 3, 4, 5, 6, 7, 8];\n-        let mut w = [0u8, .. 8];\n+        let mut w = [0u8; 8];\n \n         let mut rng = ReaderRng::new(MemReader::new(v.as_slice().to_vec()));\n         rng.fill_bytes(&mut w);\n@@ -117,7 +117,7 @@ mod test {\n     #[should_fail]\n     fn test_reader_rng_insufficient_bytes() {\n         let mut rng = ReaderRng::new(MemReader::new(vec!()));\n-        let mut v = [0u8, .. 3];\n+        let mut v = [0u8; 3];\n         rng.fill_bytes(&mut v);\n     }\n }"}, {"sha": "4dbe878277da3d8efc2bc93495807954298773e6", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -82,7 +82,7 @@ pub const unwinder_private_data_size: uint = 2;\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,\n     pub exception_cleanup: _Unwind_Exception_Cleanup_Fn,\n-    pub private: [_Unwind_Word, ..unwinder_private_data_size],\n+    pub private: [_Unwind_Word; unwinder_private_data_size],\n }\n \n pub enum _Unwind_Context {}"}, {"sha": "e0c512706e6a96b5fcdd5260748606cabd7ccecc", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -83,7 +83,7 @@ pub type Callback = fn(msg: &(Any + Send), file: &'static str, line: uint);\n //\n // For more information, see below.\n const MAX_CALLBACKS: uint = 16;\n-static CALLBACKS: [atomic::AtomicUint, ..MAX_CALLBACKS] =\n+static CALLBACKS: [atomic::AtomicUint; MAX_CALLBACKS] =\n         [atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,\n@@ -168,7 +168,7 @@ fn rust_panic(cause: Box<Any + Send>) -> ! {\n             uwe: uw::_Unwind_Exception {\n                 exception_class: rust_exception_class(),\n                 exception_cleanup: exception_cleanup,\n-                private: [0, ..uw::unwinder_private_data_size],\n+                private: [0; uw::unwinder_private_data_size],\n             },\n             cause: Some(cause),\n         };"}, {"sha": "259c15b5f06347cbb93792023ecfe4e10afc0b17", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -310,7 +310,7 @@ pub fn get_address_name(addr: IpAddr) -> Result<String, IoError> {\n     let mut storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\n     let len = addr_to_sockaddr(addr, &mut storage);\n \n-    let mut hostbuf = [0 as c_char, ..NI_MAXHOST];\n+    let mut hostbuf = [0 as c_char; NI_MAXHOST];\n \n     let res = unsafe {\n         getnameinfo(&storage as *const _ as *const libc::sockaddr, len,"}, {"sha": "1bb8ed78177dc8e8735cef77dc5db511a3b2412f", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -94,7 +94,7 @@ mod select {\n \n     #[repr(C)]\n     pub struct fd_set {\n-        fds_bits: [i32, ..(FD_SETSIZE / 32)]\n+        fds_bits: [i32; (FD_SETSIZE / 32)]\n     }\n \n     pub fn fd_set(set: &mut fd_set, fd: i32) {\n@@ -115,7 +115,7 @@ mod select {\n     #[repr(C)]\n     pub struct fd_set {\n         // FIXME: shouldn't this be a c_ulong?\n-        fds_bits: [libc::uintptr_t, ..(FD_SETSIZE / uint::BITS)]\n+        fds_bits: [libc::uintptr_t; (FD_SETSIZE / uint::BITS)]\n     }\n \n     pub fn fd_set(set: &mut fd_set, fd: i32) {"}, {"sha": "595191db3b2829b91910524ad23961896a79e4cf", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -100,7 +100,7 @@ pub fn error_string(errno: i32) -> String {\n         }\n     }\n \n-    let mut buf = [0 as c_char, ..TMPBUF_SZ];\n+    let mut buf = [0 as c_char; TMPBUF_SZ];\n \n     let p = buf.as_mut_ptr();\n     unsafe {\n@@ -124,7 +124,7 @@ pub unsafe fn pipe() -> IoResult<(FileDesc, FileDesc)> {\n pub fn getcwd() -> IoResult<Path> {\n     use c_str::CString;\n \n-    let mut buf = [0 as c_char, ..BUF_BYTES];\n+    let mut buf = [0 as c_char; BUF_BYTES];\n     unsafe {\n         if libc::getcwd(buf.as_mut_ptr(), buf.len() as libc::size_t).is_null() {\n             Err(IoError::last_error())"}, {"sha": "77c5582d8a4ee8944e44686fc2afa886d83bb1e0", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -86,30 +86,30 @@ mod os {\n     #[repr(C)]\n     pub struct pthread_mutex_t {\n         __sig: libc::c_long,\n-        __opaque: [u8, ..__PTHREAD_MUTEX_SIZE__],\n+        __opaque: [u8; __PTHREAD_MUTEX_SIZE__],\n     }\n     #[repr(C)]\n     pub struct pthread_cond_t {\n         __sig: libc::c_long,\n-        __opaque: [u8, ..__PTHREAD_COND_SIZE__],\n+        __opaque: [u8; __PTHREAD_COND_SIZE__],\n     }\n     #[repr(C)]\n     pub struct pthread_rwlock_t {\n         __sig: libc::c_long,\n-        __opaque: [u8, ..__PTHREAD_RWLOCK_SIZE__],\n+        __opaque: [u8; __PTHREAD_RWLOCK_SIZE__],\n     }\n \n     pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n         __sig: _PTHREAD_MUTEX_SIG_INIT,\n-        __opaque: [0, ..__PTHREAD_MUTEX_SIZE__],\n+        __opaque: [0; __PTHREAD_MUTEX_SIZE__],\n     };\n     pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n         __sig: _PTHREAD_COND_SIG_INIT,\n-        __opaque: [0, ..__PTHREAD_COND_SIZE__],\n+        __opaque: [0; __PTHREAD_COND_SIZE__],\n     };\n     pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {\n         __sig: _PTHREAD_RWLOCK_SIG_INIT,\n-        __opaque: [0, ..__PTHREAD_RWLOCK_SIZE__],\n+        __opaque: [0; __PTHREAD_RWLOCK_SIZE__],\n     };\n }\n \n@@ -145,30 +145,30 @@ mod os {\n     #[repr(C)]\n     pub struct pthread_mutex_t {\n         __align: libc::c_longlong,\n-        size: [u8, ..__SIZEOF_PTHREAD_MUTEX_T],\n+        size: [u8; __SIZEOF_PTHREAD_MUTEX_T],\n     }\n     #[repr(C)]\n     pub struct pthread_cond_t {\n         __align: libc::c_longlong,\n-        size: [u8, ..__SIZEOF_PTHREAD_COND_T],\n+        size: [u8; __SIZEOF_PTHREAD_COND_T],\n     }\n     #[repr(C)]\n     pub struct pthread_rwlock_t {\n         __align: libc::c_longlong,\n-        size: [u8, ..__SIZEOF_PTHREAD_RWLOCK_T],\n+        size: [u8; __SIZEOF_PTHREAD_RWLOCK_T],\n     }\n \n     pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n         __align: 0,\n-        size: [0, ..__SIZEOF_PTHREAD_MUTEX_T],\n+        size: [0; __SIZEOF_PTHREAD_MUTEX_T],\n     };\n     pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n         __align: 0,\n-        size: [0, ..__SIZEOF_PTHREAD_COND_T],\n+        size: [0; __SIZEOF_PTHREAD_COND_T],\n     };\n     pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {\n         __align: 0,\n-        size: [0, ..__SIZEOF_PTHREAD_RWLOCK_T],\n+        size: [0; __SIZEOF_PTHREAD_RWLOCK_T],\n     };\n }\n #[cfg(target_os = \"android\")]"}, {"sha": "319a458087b9b51f949c997cf08c101ca55b662f", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -83,7 +83,7 @@ struct SYMBOL_INFO {\n     // note that windows has this as 1, but it basically just means that\n     // the name is inline at the end of the struct. For us, we just bump\n     // the struct size up to MAX_SYM_NAME.\n-    Name: [libc::c_char, ..MAX_SYM_NAME],\n+    Name: [libc::c_char; MAX_SYM_NAME],\n }\n \n \n@@ -162,7 +162,7 @@ mod arch {\n         EFlags: libc::DWORD,\n         Esp: libc::DWORD,\n         SegSs: libc::DWORD,\n-        ExtendedRegisters: [u8, ..MAXIMUM_SUPPORTED_EXTENSION],\n+        ExtendedRegisters: [u8; MAXIMUM_SUPPORTED_EXTENSION],\n     }\n \n     #[repr(C)]\n@@ -245,7 +245,7 @@ mod arch {\n \n         FltSave: FLOATING_SAVE_AREA,\n \n-        VectorRegister: [M128A, .. 26],\n+        VectorRegister: [M128A; 26],\n         VectorControl: DWORDLONG,\n \n         DebugControl: DWORDLONG,"}, {"sha": "6cccefbe89064dd20e0cf7133f88509c92541ca0", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -43,8 +43,8 @@ pub const WSA_WAIT_FAILED: libc::DWORD = libc::consts::os::extra::WAIT_FAILED;\n pub struct WSADATA {\n     pub wVersion: libc::WORD,\n     pub wHighVersion: libc::WORD,\n-    pub szDescription: [u8, ..WSADESCRIPTION_LEN + 1],\n-    pub szSystemStatus: [u8, ..WSASYS_STATUS_LEN + 1],\n+    pub szDescription: [u8; WSADESCRIPTION_LEN + 1],\n+    pub szSystemStatus: [u8; WSASYS_STATUS_LEN + 1],\n     pub iMaxSockets: u16,\n     pub iMaxUdpDg: u16,\n     pub lpVendorInfo: *mut u8,\n@@ -57,16 +57,16 @@ pub struct WSADATA {\n     pub iMaxSockets: u16,\n     pub iMaxUdpDg: u16,\n     pub lpVendorInfo: *mut u8,\n-    pub szDescription: [u8, ..WSADESCRIPTION_LEN + 1],\n-    pub szSystemStatus: [u8, ..WSASYS_STATUS_LEN + 1],\n+    pub szDescription: [u8; WSADESCRIPTION_LEN + 1],\n+    pub szSystemStatus: [u8; WSASYS_STATUS_LEN + 1],\n }\n \n pub type LPWSADATA = *mut WSADATA;\n \n #[repr(C)]\n pub struct WSANETWORKEVENTS {\n     pub lNetworkEvents: libc::c_long,\n-    pub iErrorCode: [libc::c_int, ..FD_MAX_EVENTS],\n+    pub iErrorCode: [libc::c_int; FD_MAX_EVENTS],\n }\n \n pub type LPWSANETWORKEVENTS = *mut WSANETWORKEVENTS;\n@@ -76,7 +76,7 @@ pub type WSAEVENT = libc::HANDLE;\n #[repr(C)]\n pub struct fd_set {\n     fd_count: libc::c_uint,\n-    fd_array: [libc::SOCKET, ..FD_SETSIZE],\n+    fd_array: [libc::SOCKET; FD_SETSIZE],\n }\n \n pub fn fd_set(set: &mut fd_set, s: libc::SOCKET) {"}, {"sha": "09003f87ff0c143d655a7eb0da756caf170fc195", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -80,7 +80,7 @@ pub fn error_string(errnum: i32) -> String {\n     // MAKELANGID(LANG_SYSTEM_DEFAULT, SUBLANG_SYS_DEFAULT)\n     let langId = 0x0800 as DWORD;\n \n-    let mut buf = [0 as WCHAR, ..TMPBUF_SZ];\n+    let mut buf = [0 as WCHAR; TMPBUF_SZ];\n \n     unsafe {\n         let res = FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM |\n@@ -164,7 +164,7 @@ pub fn getcwd() -> IoResult<Path> {\n     use libc::GetCurrentDirectoryW;\n     use io::OtherIoError;\n \n-    let mut buf = [0 as u16, ..BUF_BYTES];\n+    let mut buf = [0 as u16; BUF_BYTES];\n     unsafe {\n         if libc::GetCurrentDirectoryW(buf.len() as DWORD, buf.as_mut_ptr()) == 0 as DWORD {\n             return Err(IoError::last_error());"}, {"sha": "e8b447022cbf4f0b0134bc857c5fd3ca4290d76f", "filename": "src/libstd/sys/windows/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -90,7 +90,7 @@ pub struct EXCEPTION_RECORD {\n     pub ExceptionRecord: *mut EXCEPTION_RECORD,\n     pub ExceptionAddress: LPVOID,\n     pub NumberParameters: DWORD,\n-    pub ExceptionInformation: [LPVOID, ..EXCEPTION_MAXIMUM_PARAMETERS]\n+    pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS]\n }\n \n pub struct EXCEPTION_POINTERS {"}, {"sha": "720a907fe77f0cb4971bbfc92c9232741bd6bbf0", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -119,6 +119,6 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         });\n \n     MacItems::new(vec![quote_item!(ecx,\n-        pub static $name: [(&'static str, &'static str), ..$count] = $expr;\n+        pub static $name: [(&'static str, &'static str); $count] = $expr;\n     ).unwrap()].into_iter())\n }"}, {"sha": "3c01a7756a6b9656fbabb3e67a38e7272f778721", "filename": "src/test/compile-fail/array-old-syntax-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -11,5 +11,5 @@\n // Test that the old fixed length array syntax is a parsing error.\n \n fn main() {\n-    let _x: [int, ..3] = [0i, 1, 2]; //~ ERROR \n+    let _x: [int, ..3] = [0i, 1, 2]; //~ ERROR\n }"}, {"sha": "672d8a30fc56c808c2636f11ad688d9f8de0f63c", "filename": "src/test/compile-fail/better-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x: [int 3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `3`\n+    let x: [int 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `3`\n }"}, {"sha": "3224edb381cccbf2d1c4c0dbecc230308478eca4", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -13,13 +13,13 @@\n #[cfg(target_word_size = \"64\")]\n fn main() {\n     let n = 0u;\n-    let a = box [&n,..0xF000000000000000u];\n+    let a = box [&n; 0xF000000000000000u];\n     println!(\"{}\", a[0xFFFFFFu]);\n }\n \n #[cfg(target_word_size = \"32\")]\n fn main() {\n     let n = 0u;\n-    let a = box [&n,..0xFFFFFFFFu];\n+    let a = box [&n; 0xFFFFFFFFu];\n     println!(\"{}\", a[0xFFFFFFu]);\n }"}, {"sha": "c2bd810abad2537858a7a202cc1fed87fff22b73", "filename": "src/test/compile-fail/issue-6977.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -11,5 +11,5 @@\n // Trying to create a fixed-length vector with a negative size\n \n fn main() {\n-      let _x = [0,..-1]; //~ ERROR found negative integer\n+      let _x = [0; -1]; //~ ERROR found negative integer\n }"}, {"sha": "6537e3ddd27d0c11caa7f475171007181a8ef128", "filename": "src/test/compile-fail/removed-syntax-fixed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type v = [int * 3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `*`\n+type v = [int * 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `*`"}, {"sha": "efde1f1b24d617efe673cf8bebc9bb6a2ea4be6b", "filename": "src/test/compile-fail/removed-syntax-mut-vec-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -10,4 +10,4 @@\n \n type v = [mut int];\n     //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `int`\n+    //~^^ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `int`"}, {"sha": "b481e109e1a3d4e30e7eda1ec7d79a5a4a79a0ec", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -20,29 +20,29 @@ pub fn bar() {\n     const FOO: uint = 5u - 4u;\n     let _: [(); FOO] = [()];\n \n-    let _ : [(), ..1u] = [()];\n+    let _ : [(); 1u] = [()];\n \n-    let _ = &([1i,2,3]) as *const _ as *const [int, ..3u];\n+    let _ = &([1i,2,3]) as *const _ as *const [int; 3u];\n \n     format!(\"test\");\n }\n \n-pub type Foo = [int, ..3u];\n+pub type Foo = [int; 3u];\n \n pub struct Bar {\n-    pub x: [int, ..3u]\n+    pub x: [int; 3u]\n }\n \n-pub struct TupleBar([int, ..4u]);\n+pub struct TupleBar([int; 4u]);\n \n pub enum Baz {\n-    BazVariant([int, ..5u])\n+    BazVariant([int; 5u])\n }\n \n pub fn id<T>(x: T) -> T { x }\n \n pub fn use_id() {\n-    let _ = id::<[int, ..3u]>([1,2,3]);\n+    let _ = id::<[int; 3u]>([1,2,3]);\n }\n \n "}, {"sha": "5f7770e97a9cf99258c19f8752b4af5d248fcb0e", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n+    let x = [1i; 100];\n     let mut y = 0i;\n     for i in x.iter() {\n         if y > 10 {"}, {"sha": "d8c6dd6a93dae97d8e745e9e8fc006f04f3c6d22", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n+    let x = [1i; 100];\n     let mut y = 0i;\n     for (n,i) in x.iter().enumerate() {\n         if n < 10 {"}, {"sha": "20ea9c440a1fc49be8878406bf1cf52f420b60ba", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n-    let y = [2i,..100];\n+    let x = [1i; 100];\n+    let y = [2i; 100];\n     let mut p = 0i;\n     let mut q = 0i;\n     for i in x.iter() {"}, {"sha": "0ac642cc449af763ef05bfb14899b7c2ac8ab626", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n+    let x = [1i; 100];\n     let mut y = 0i;\n     for i in x.iter() {\n         y += *i"}, {"sha": "70a41f773a3e0a2c4cdd45ebfe12087525b6e630", "filename": "src/test/run-pass/transmute-non-immediate-to-immediate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c92ddeda7e2a8e9b6d6b629818eacdb96787575/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs?ref=2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "patch": "@@ -13,6 +13,6 @@\n \n pub fn main() {\n     unsafe {\n-        ::std::mem::transmute::<[int,..1],int>([1])\n+        ::std::mem::transmute::<[int; 1],int>([1])\n     };\n }"}]}