{"sha": "26a62701e42d10c03ce5f2f911e7d5edeefa2f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YTYyNzAxZTQyZDEwYzAzY2U1ZjJmOTExZTdkNWVkZWVmYTJmMGY=", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-03-20T17:42:54Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-03-20T17:42:54Z"}, "message": "Update the comment", "tree": {"sha": "3fea1adf28791e850f233b6dc9e1fe3f8f0f8402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fea1adf28791e850f233b6dc9e1fe3f8f0f8402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26a62701e42d10c03ce5f2f911e7d5edeefa2f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26a62701e42d10c03ce5f2f911e7d5edeefa2f0f", "html_url": "https://github.com/rust-lang/rust/commit/26a62701e42d10c03ce5f2f911e7d5edeefa2f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26a62701e42d10c03ce5f2f911e7d5edeefa2f0f/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d43225bfb08ec91f7476b76c7fec632c4a096ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d43225bfb08ec91f7476b76c7fec632c4a096ef", "html_url": "https://github.com/rust-lang/rust/commit/6d43225bfb08ec91f7476b76c7fec632c4a096ef"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "4d1e876457b8e93989b3dbc2df815a7ea2b18cb0", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26a62701e42d10c03ce5f2f911e7d5edeefa2f0f/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a62701e42d10c03ce5f2f911e7d5edeefa2f0f/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=26a62701e42d10c03ce5f2f911e7d5edeefa2f0f", "patch": "@@ -163,7 +163,7 @@ where\n         })\n         .expect(\"attempt to join into collection with len > usize::MAX\");\n \n-    // crucial for safety\n+    // prepare an uninitialized buffer\n     let mut result = Vec::with_capacity(reserved_len);\n     debug_assert!(result.capacity() >= reserved_len);\n \n@@ -178,9 +178,9 @@ where\n         // massive improvements possible (~ x2)\n         let remain = specialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n \n-        // issue #80335: A weird borrow implementation can return different\n-        // slices for the length calculation and the actual copy, so\n-        // `remain.len()` might be non-zero.\n+        // A weird borrow implementation may return different\n+        // slices for the length calculation and the actual copy.\n+        // Make sure we don't expose uninitialized bytes to the caller.\n         let result_len = reserved_len - remain.len();\n         result.set_len(result_len);\n     }"}]}