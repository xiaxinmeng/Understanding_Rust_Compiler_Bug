{"sha": "4c346939b088cf07ece818b7dc093f993eae2578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzQ2OTM5YjA4OGNmMDdlY2U4MThiN2RjMDkzZjk5M2VhZTI1Nzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T00:49:37Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T16:50:44Z"}, "message": "or-patterns: fix problems in typeck.", "tree": {"sha": "0e6ee5a299c993ada647da80b1bbcea48cca549a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e6ee5a299c993ada647da80b1bbcea48cca549a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c346939b088cf07ece818b7dc093f993eae2578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c346939b088cf07ece818b7dc093f993eae2578", "html_url": "https://github.com/rust-lang/rust/commit/4c346939b088cf07ece818b7dc093f993eae2578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c346939b088cf07ece818b7dc093f993eae2578/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89bbef302646c4b33148e2a34b69de7643a55ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/89bbef302646c4b33148e2a34b69de7643a55ffa", "html_url": "https://github.com/rust-lang/rust/commit/89bbef302646c4b33148e2a34b69de7643a55ffa"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "c8869132fb654bf7d1e3354ff837c7e2f8373c52", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c346939b088cf07ece818b7dc093f993eae2578/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c346939b088cf07ece818b7dc093f993eae2578/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=4c346939b088cf07ece818b7dc093f993eae2578", "patch": "@@ -97,11 +97,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_struct(pat, qpath, fields, *etc, expected, def_bm, discrim_span)\n             }\n             PatKind::Or(pats) => {\n-                let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 for pat in pats {\n                     self.check_pat(pat, expected, def_bm, discrim_span);\n                 }\n-                expected_ty\n+                expected\n             }\n             PatKind::Tuple(elements, ddpos) => {\n                 self.check_pat_tuple(pat.span, elements, *ddpos, expected, def_bm, discrim_span)\n@@ -208,7 +207,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match pat.node {\n             PatKind::Struct(..) |\n             PatKind::TupleStruct(..) |\n-            PatKind::Or(_) |\n             PatKind::Tuple(..) |\n             PatKind::Box(_) |\n             PatKind::Range(..) |\n@@ -226,6 +224,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => true,\n                 }\n             }\n+            // FIXME(or_patterns; Centril | dlrobertson): To keep things compiling\n+            // for or-patterns at the top level, we need to make `p_0 | ... | p_n`\n+            // a \"non reference pattern\". For example the following currently compiles:\n+            // ```\n+            // match &1 {\n+            //     e @ &(1...2) | e @ &(3...4) => {}\n+            //     _ => {}\n+            // }\n+            // ```\n+            //\n+            // We should consider whether we should do something special in nested or-patterns.\n+            PatKind::Or(_) |\n             PatKind::Wild |\n             PatKind::Binding(..) |\n             PatKind::Ref(..) => false,\n@@ -426,12 +436,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // If the binding is like `ref x | ref const x | ref mut x`\n                 // then `x` is assigned a value of type `&M T` where M is the\n                 // mutability and T is the expected type.\n-                let region_ty = self.new_ref_ty(pat.span, mutbl, expected);\n-\n+                //\n                 // `x` is assigned a value of type `&M T`, hence `&M T <: typeof(x)`\n                 // is required. However, we use equality, which is stronger.\n                 // See (note_1) for an explanation.\n-                region_ty\n+                self.new_ref_ty(pat.span, mutbl, expected)\n             }\n             // Otherwise, the type of x is the expected type `T`.\n             ty::BindByValue(_) => {"}]}