{"sha": "74711deb724e0a6c84a221bfdfa15eaedbdb2300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzExZGViNzI0ZTBhNmM4NGEyMjFiZmRmYTE1ZWFlZGJkYjIzMDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-06T15:09:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-06T15:09:38Z"}, "message": "Merge #8375\n\n8375: feat: show errors from `cargo metadata` and initial `cargo check` in the status bar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4ac4d3965dd7aca499b8f3bcbf0a80a37a755a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ac4d3965dd7aca499b8f3bcbf0a80a37a755a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74711deb724e0a6c84a221bfdfa15eaedbdb2300", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbHmyCRBK7hj4Ov3rIwAAdHIIAGprMxciymUtPxtm/ejc8NZ9\n7rylLVM94QsGBHh2MiMklPD79Ie36cNjA3mdpg247yo9r5Tn6qKEC8MH6IirdcDi\nzFi8ZNYm3iL19cXgrolOb+iC2BNCuNpoiFC55aEBm4188wr/WmlEsPirXtwEO8d+\nD9oiDABwEQBKnt2ATLoZrGOk55mbBQs0fFtkF0najhKNlRTFMR6tlXfVkHlxGgWJ\naTZOWd0eQT3n17l1HHmqT2pnH9CXotVqSDKVclJpPGvv9XqfXW4j+TSfQ4RbF4kI\nbcWWgclrQljWl0Yg8qSMnNiM345hZHIAq3zNSUEZruKoo6l5pa46HQvdAeXpswQ=\n=8aEC\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ac4d3965dd7aca499b8f3bcbf0a80a37a755a66\nparent 8e768a5a1f83bd0531835687d703ddec85446f8c\nparent de3370278468e5135e4990fc14562e5ce523ef37\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617721778 +0000\ncommitter GitHub <noreply@github.com> 1617721778 +0000\n\nMerge #8375\n\n8375: feat: show errors from `cargo metadata` and initial `cargo check` in the status bar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74711deb724e0a6c84a221bfdfa15eaedbdb2300", "html_url": "https://github.com/rust-lang/rust/commit/74711deb724e0a6c84a221bfdfa15eaedbdb2300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74711deb724e0a6c84a221bfdfa15eaedbdb2300/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e768a5a1f83bd0531835687d703ddec85446f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e768a5a1f83bd0531835687d703ddec85446f8c", "html_url": "https://github.com/rust-lang/rust/commit/8e768a5a1f83bd0531835687d703ddec85446f8c"}, {"sha": "de3370278468e5135e4990fc14562e5ce523ef37", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3370278468e5135e4990fc14562e5ce523ef37", "html_url": "https://github.com/rust-lang/rust/commit/de3370278468e5135e4990fc14562e5ce523ef37"}], "stats": {"total": 152, "additions": 110, "deletions": 42}, "files": [{"sha": "f09ad37e33a14bffc0ac76bff8b6371ca4bd041c", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=74711deb724e0a6c84a221bfdfa15eaedbdb2300", "patch": "@@ -1,6 +1,7 @@\n //! Thin wrappers around `std::path`, distinguishing between absolute and\n //! relative paths.\n use std::{\n+    borrow::Borrow,\n     convert::{TryFrom, TryInto},\n     ops,\n     path::{Component, Path, PathBuf},\n@@ -35,6 +36,12 @@ impl AsRef<AbsPath> for AbsPathBuf {\n     }\n }\n \n+impl Borrow<AbsPath> for AbsPathBuf {\n+    fn borrow(&self) -> &AbsPath {\n+        self.as_path()\n+    }\n+}\n+\n impl TryFrom<PathBuf> for AbsPathBuf {\n     type Error = PathBuf;\n     fn try_from(path_buf: PathBuf) -> Result<AbsPathBuf, PathBuf> {"}, {"sha": "0d4d39fefff221fd3e01f1a6b8f9a189b171fd30", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 60, "deletions": 26, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=74711deb724e0a6c84a221bfdfa15eaedbdb2300", "patch": "@@ -13,12 +13,12 @@ use cargo_metadata::{BuildScript, Message};\n use itertools::Itertools;\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n-use stdx::JodChild;\n+use stdx::{format_to, JodChild};\n \n use crate::{cfg_flag::CfgFlag, CargoConfig};\n \n #[derive(Debug, Clone, Default, PartialEq, Eq)]\n-pub(crate) struct BuildData {\n+pub(crate) struct PackageBuildData {\n     /// List of config flags defined by this package's build script\n     pub(crate) cfgs: Vec<CfgFlag>,\n     /// List of cargo-related environment variables with their value\n@@ -32,6 +32,17 @@ pub(crate) struct BuildData {\n     pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n }\n \n+#[derive(Debug, Default, PartialEq, Eq, Clone)]\n+pub(crate) struct WorkspaceBuildData {\n+    per_package: FxHashMap<String, PackageBuildData>,\n+    error: Option<String>,\n+}\n+\n+#[derive(Debug, Default, PartialEq, Eq, Clone)]\n+pub struct BuildDataResult {\n+    per_workspace: FxHashMap<AbsPathBuf, WorkspaceBuildData>,\n+}\n+\n #[derive(Clone, Debug)]\n pub(crate) struct BuildDataConfig {\n     cargo_toml: AbsPathBuf,\n@@ -52,13 +63,6 @@ pub struct BuildDataCollector {\n     configs: FxHashMap<AbsPathBuf, BuildDataConfig>,\n }\n \n-#[derive(Debug, Default, PartialEq, Eq, Clone)]\n-pub struct BuildDataResult {\n-    data: FxHashMap<AbsPathBuf, BuildDataMap>,\n-}\n-\n-pub(crate) type BuildDataMap = FxHashMap<String, BuildData>;\n-\n impl BuildDataCollector {\n     pub(crate) fn add_config(&mut self, workspace_root: &AbsPath, config: BuildDataConfig) {\n         self.configs.insert(workspace_root.to_path_buf(), config);\n@@ -67,7 +71,7 @@ impl BuildDataCollector {\n     pub fn collect(&mut self, progress: &dyn Fn(String)) -> Result<BuildDataResult> {\n         let mut res = BuildDataResult::default();\n         for (path, config) in self.configs.iter() {\n-            res.data.insert(\n+            res.per_workspace.insert(\n                 path.clone(),\n                 collect_from_workspace(\n                     &config.cargo_toml,\n@@ -81,9 +85,28 @@ impl BuildDataCollector {\n     }\n }\n \n+impl WorkspaceBuildData {\n+    pub(crate) fn get(&self, package_id: &str) -> Option<&PackageBuildData> {\n+        self.per_package.get(package_id)\n+    }\n+}\n+\n impl BuildDataResult {\n-    pub(crate) fn get(&self, root: &AbsPath) -> Option<&BuildDataMap> {\n-        self.data.get(&root.to_path_buf())\n+    pub(crate) fn get(&self, workspace_root: &AbsPath) -> Option<&WorkspaceBuildData> {\n+        self.per_workspace.get(workspace_root)\n+    }\n+    pub fn error(&self) -> Option<String> {\n+        let mut buf = String::new();\n+        for (_workspace_root, build_data) in &self.per_workspace {\n+            if let Some(err) = &build_data.error {\n+                format_to!(buf, \"cargo check failed:\\n{}\", err);\n+            }\n+        }\n+        if buf.is_empty() {\n+            return None;\n+        }\n+\n+        Some(buf)\n     }\n }\n \n@@ -102,7 +125,7 @@ fn collect_from_workspace(\n     cargo_features: &CargoConfig,\n     packages: &Vec<cargo_metadata::Package>,\n     progress: &dyn Fn(String),\n-) -> Result<BuildDataMap> {\n+) -> Result<WorkspaceBuildData> {\n     let mut cmd = Command::new(toolchain::cargo());\n     cmd.args(&[\"check\", \"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n         .arg(cargo_toml.as_ref());\n@@ -130,13 +153,13 @@ fn collect_from_workspace(\n         }\n     }\n \n-    cmd.stdout(Stdio::piped()).stderr(Stdio::null()).stdin(Stdio::null());\n+    cmd.stdout(Stdio::piped()).stderr(Stdio::piped()).stdin(Stdio::null());\n \n     let mut child = cmd.spawn().map(JodChild)?;\n     let child_stdout = child.stdout.take().unwrap();\n     let stdout = BufReader::new(child_stdout);\n \n-    let mut res = BuildDataMap::default();\n+    let mut res = WorkspaceBuildData::default();\n     for message in cargo_metadata::Message::parse_stream(stdout).flatten() {\n         match message {\n             Message::BuildScriptExecuted(BuildScript {\n@@ -154,16 +177,17 @@ fn collect_from_workspace(\n                     }\n                     acc\n                 };\n-                let res = res.entry(package_id.repr.clone()).or_default();\n+                let package_build_data =\n+                    res.per_package.entry(package_id.repr.clone()).or_default();\n                 // cargo_metadata crate returns default (empty) path for\n                 // older cargos, which is not absolute, so work around that.\n                 if !out_dir.as_str().is_empty() {\n                     let out_dir = AbsPathBuf::assert(PathBuf::from(out_dir.into_os_string()));\n-                    res.out_dir = Some(out_dir);\n-                    res.cfgs = cfgs;\n+                    package_build_data.out_dir = Some(out_dir);\n+                    package_build_data.cfgs = cfgs;\n                 }\n \n-                res.envs = env;\n+                package_build_data.envs = env;\n             }\n             Message::CompilerArtifact(message) => {\n                 progress(format!(\"metadata {}\", message.target.name));\n@@ -173,8 +197,9 @@ fn collect_from_workspace(\n                     // Skip rmeta file\n                     if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name)) {\n                         let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n-                        let res = res.entry(package_id.repr.clone()).or_default();\n-                        res.proc_macro_dylib_path = Some(filename);\n+                        let package_build_data =\n+                            res.per_package.entry(package_id.repr.clone()).or_default();\n+                        package_build_data.proc_macro_dylib_path = Some(filename);\n                     }\n                 }\n             }\n@@ -188,16 +213,25 @@ fn collect_from_workspace(\n     }\n \n     for package in packages {\n-        let build_data = res.entry(package.id.repr.clone()).or_default();\n-        inject_cargo_env(package, build_data);\n-        if let Some(out_dir) = &build_data.out_dir {\n+        let package_build_data = res.per_package.entry(package.id.repr.clone()).or_default();\n+        inject_cargo_env(package, package_build_data);\n+        if let Some(out_dir) = &package_build_data.out_dir {\n             // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n             if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n-                build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n+                package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n             }\n         }\n     }\n \n+    let output = child.into_inner().wait_with_output()?;\n+    if !output.status.success() {\n+        let mut stderr = String::from_utf8(output.stderr).unwrap_or_default();\n+        if stderr.is_empty() {\n+            stderr = \"cargo check failed\".to_string();\n+        }\n+        res.error = Some(stderr)\n+    }\n+\n     Ok(res)\n }\n \n@@ -212,7 +246,7 @@ fn is_dylib(path: &Utf8Path) -> bool {\n /// Recreates the compile-time environment variables that Cargo sets.\n ///\n /// Should be synced with <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates>\n-fn inject_cargo_env(package: &cargo_metadata::Package, build_data: &mut BuildData) {\n+fn inject_cargo_env(package: &cargo_metadata::Package, build_data: &mut PackageBuildData) {\n     let env = &mut build_data.envs;\n \n     // FIXME: Missing variables:"}, {"sha": "2fcd0f8facee8957f1f75151d53c2534d7c450e0", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=74711deb724e0a6c84a221bfdfa15eaedbdb2300", "patch": "@@ -12,7 +12,7 @@ use proc_macro_api::ProcMacroClient;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    build_data::{BuildData, BuildDataMap, BuildDataResult},\n+    build_data::{BuildDataResult, PackageBuildData, WorkspaceBuildData},\n     cargo_workspace,\n     cfg_flag::CfgFlag,\n     rustc_cfg,\n@@ -354,10 +354,10 @@ fn cargo_to_crate_graph(\n     proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n-    build_data_map: Option<&BuildDataMap>,\n+    build_data_map: Option<&WorkspaceBuildData>,\n     sysroot: &Sysroot,\n     rustc: &Option<CargoWorkspace>,\n-    rustc_build_data_map: Option<&BuildDataMap>,\n+    rustc_build_data_map: Option<&WorkspaceBuildData>,\n ) -> CrateGraph {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n@@ -464,7 +464,7 @@ fn handle_rustc_crates(\n     rustc_workspace: &CargoWorkspace,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     crate_graph: &mut CrateGraph,\n-    rustc_build_data_map: Option<&FxHashMap<String, BuildData>>,\n+    rustc_build_data_map: Option<&WorkspaceBuildData>,\n     cfg_options: &CfgOptions,\n     proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n@@ -555,7 +555,7 @@ fn handle_rustc_crates(\n fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n     pkg: &cargo_workspace::PackageData,\n-    build_data: Option<&BuildData>,\n+    build_data: Option<&PackageBuildData>,\n     cfg_options: &CfgOptions,\n     proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     file_id: FileId,"}, {"sha": "d0cc1b61a155fb53d38fa30ea75b56314552521a", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=74711deb724e0a6c84a221bfdfa15eaedbdb2300", "patch": "@@ -109,16 +109,22 @@ impl GlobalState {\n             quiescent: self.is_quiescent(),\n             message: None,\n         };\n+\n+        if let Some(error) = self.build_data_error() {\n+            status.health = lsp_ext::Health::Warning;\n+            status.message = Some(error)\n+        }\n         if !self.config.cargo_autoreload()\n             && self.is_quiescent()\n             && self.fetch_workspaces_queue.op_requested()\n         {\n             status.health = lsp_ext::Health::Warning;\n             status.message = Some(\"Workspace reload required\".to_string())\n         }\n-        if let Some(error) = self.loading_error() {\n+\n+        if let Some(error) = self.fetch_workspace_error() {\n             status.health = lsp_ext::Health::Error;\n-            status.message = Some(format!(\"Workspace reload failed: {}\", error))\n+            status.message = Some(error)\n         }\n \n         if self.last_reported_status.as_ref() != Some(&status) {\n@@ -217,14 +223,19 @@ impl GlobalState {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         log::info!(\"will switch workspaces\");\n \n-        if let Some(error_message) = self.loading_error() {\n+        if let Some(error_message) = self.fetch_workspace_error() {\n             log::error!(\"failed to switch workspaces: {}\", error_message);\n             self.show_message(lsp_types::MessageType::Error, error_message);\n             if !self.workspaces.is_empty() {\n                 return;\n             }\n         }\n \n+        if let Some(error_message) = self.build_data_error() {\n+            log::error!(\"failed to switch build data: {}\", error_message);\n+            self.show_message(lsp_types::MessageType::Error, error_message);\n+        }\n+\n         let workspaces = self\n             .fetch_workspaces_queue\n             .last_op_result()\n@@ -343,22 +354,30 @@ impl GlobalState {\n         log::info!(\"did switch workspaces\");\n     }\n \n-    fn loading_error(&self) -> Option<String> {\n-        let mut message = None;\n+    fn fetch_workspace_error(&self) -> Option<String> {\n+        let mut buf = String::new();\n \n         for ws in self.fetch_workspaces_queue.last_op_result() {\n             if let Err(err) = ws {\n-                let message = message.get_or_insert_with(String::new);\n-                stdx::format_to!(message, \"rust-analyzer failed to load workspace: {:#}\\n\", err);\n+                stdx::format_to!(buf, \"rust-analyzer failed to load workspace: {:#}\\n\", err);\n             }\n         }\n \n-        if let Some(Err(err)) = self.fetch_build_data_queue.last_op_result() {\n-            let message = message.get_or_insert_with(String::new);\n-            stdx::format_to!(message, \"rust-analyzer failed to fetch build data: {:#}\\n\", err);\n+        if buf.is_empty() {\n+            return None;\n         }\n \n-        message\n+        Some(buf)\n+    }\n+\n+    fn build_data_error(&self) -> Option<String> {\n+        match self.fetch_build_data_queue.last_op_result() {\n+            Some(Err(err)) => {\n+                Some(format!(\"rust-analyzer failed to fetch build data: {:#}\\n\", err))\n+            }\n+            Some(Ok(data)) => data.error(),\n+            None => None,\n+        }\n     }\n \n     fn reload_flycheck(&mut self) {"}, {"sha": "b0a18d58de87e699fa32f61cfc0dd9d342661d9a", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74711deb724e0a6c84a221bfdfa15eaedbdb2300/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=74711deb724e0a6c84a221bfdfa15eaedbdb2300", "patch": "@@ -178,6 +178,7 @@ where\n     start..start + len\n }\n \n+#[repr(transparent)]\n pub struct JodChild(pub process::Child);\n \n impl ops::Deref for JodChild {\n@@ -200,6 +201,13 @@ impl Drop for JodChild {\n     }\n }\n \n+impl JodChild {\n+    pub fn into_inner(self) -> process::Child {\n+        // SAFETY: repr transparent\n+        unsafe { std::mem::transmute::<JodChild, process::Child>(self) }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}