{"sha": "bbba87ce5450eb0145e4aec0d50b546effc054ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYmE4N2NlNTQ1MGViMDE0NWU0YWVjMGQ1MGI1NDZlZmZjMDU0ZmY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T13:41:15Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T16:06:51Z"}, "message": "Swap order of assertions for easier debugging", "tree": {"sha": "479776a0612f1b90f13ca89c523f925dbd91d998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/479776a0612f1b90f13ca89c523f925dbd91d998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbba87ce5450eb0145e4aec0d50b546effc054ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl958xsACgkQtAh+UQ6Y\nsWQPqg/+Mls2zR0zful4KoEXXfiV+Zn2hr/KKAX5Qds0teAqE22hwqDb2evVUkkH\nOH0MMIgsNV+FF2BhAAm8DiCfchFJh+E422U3U9+TWFB9TS6mu2Omz5S9ORUBjhBy\n7fMxJ9qqppWkIzGCABltlo/uWz/UPl6bn+xhJeZD1AbNJJqaVcdT9ELhQydL5S7M\nqTctZph+f3Zm3uxb8YRpSP/Lc/r5hheqDnb3v1icCpgaAF4jVEKv4Hy8wjVQtj7K\nR1mecmBE6Ztrbrjc0AKkF4ZUPThDyIJbnc1UzN+cK3vLd8V8XGENyaTLMIeOOZfE\neaEjD43sDlinLH7YsKH/weyrKtBDb9xo/KL4PEnUHlfdfn1Sqz+4qR3N46/OI0T3\nSYjuwHZfUTv/04apsUtZI+V0TnRbr23n8dkPTeotK7YTkJaXxxBVR/EnDF6zXuNW\nUQ/Pgongr3DUas1gGo8OIozJIn+vC6Ez6Fs6tWJgnpjQxiBsYWFMxcahZYst4Sh5\n0R8CcWBrtWB0TUx157ZZ9WVQrDz+c9+mj17EbtT/vvApAXkRAuZDlo4o7MRNyOAW\n4KhK1zY7D7MAJ+7V9lF4nZU5IWEZG4mIvh7ZoV1asR9uMXXjmvtan9D3yGKMsKtL\nRyEKoAc+WonhD03n1/im0ZazRY3GXAM76hJqPAp/mkJHyFepL2I=\n=Mlqm\n-----END PGP SIGNATURE-----", "payload": "tree 479776a0612f1b90f13ca89c523f925dbd91d998\nparent 462f58298a3a75c15509bf57d8935c3954be6685\nauthor Aaron Hill <aa1ronham@gmail.com> 1601818875 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601827611 -0400\n\nSwap order of assertions for easier debugging\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbba87ce5450eb0145e4aec0d50b546effc054ff", "html_url": "https://github.com/rust-lang/rust/commit/bbba87ce5450eb0145e4aec0d50b546effc054ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbba87ce5450eb0145e4aec0d50b546effc054ff/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "462f58298a3a75c15509bf57d8935c3954be6685", "url": "https://api.github.com/repos/rust-lang/rust/commits/462f58298a3a75c15509bf57d8935c3954be6685", "html_url": "https://github.com/rust-lang/rust/commit/462f58298a3a75c15509bf57d8935c3954be6685"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "947c650197cca01b530bdfe64daea81c0e906ca3", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbba87ce5450eb0145e4aec0d50b546effc054ff/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbba87ce5450eb0145e4aec0d50b546effc054ff/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=bbba87ce5450eb0145e4aec0d50b546effc054ff", "patch": "@@ -239,17 +239,17 @@ fn test_symlink() {\n         // and check that the last byte is not overwritten.\n         let mut large_buf = vec![0xFF; expected_path.len() + 1];\n         let res = unsafe { libc::readlink(symlink_c_ptr, large_buf.as_mut_ptr().cast(), large_buf.len()) };\n-        assert_eq!(res, large_buf.len() as isize - 1);\n         // Check that the resovled path was properly written into the buf.\n         assert_eq!(&large_buf[..(large_buf.len() - 1)], expected_path);\n         assert_eq!(large_buf.last(), Some(&0xFF));\n+        assert_eq!(res, large_buf.len() as isize - 1);\n \n         // Test that the resolved path is truncated if the provided buffer\n         // is too small.\n         let mut small_buf = [0u8; 2];\n         let res = unsafe { libc::readlink(symlink_c_ptr, small_buf.as_mut_ptr().cast(), small_buf.len()) };\n-        assert_eq!(res, small_buf.len() as isize);\n         assert_eq!(small_buf, &expected_path[..small_buf.len()]);\n+        assert_eq!(res, small_buf.len() as isize);\n \n         // Test that we report a proper error for a missing path.\n         let bad_path = CString::new(\"MIRI_MISSING_FILE_NAME\").unwrap();"}]}