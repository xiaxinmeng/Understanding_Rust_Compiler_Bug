{"sha": "3a63bf02998f7b5e040a4b87e049d03ddd144f74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNjNiZjAyOTk4ZjdiNWUwNDBhNGI4N2UwNDlkMDNkZGQxNDRmNzQ=", "commit": {"author": {"name": "Florian Warzecha", "email": "liketechnik@disroot.org", "date": "2020-10-21T22:02:26Z"}, "committer": {"name": "Florian Warzecha", "email": "liketechnik@disroot.org", "date": "2020-10-21T22:02:26Z"}, "message": "validate rustc_allow_const_fn_unstable targets\n\nAdds a check to make sure `#[rustc_allow_const_fn_unstable]`\ncan be applied only to functions.", "tree": {"sha": "b240a2332a42c0ead1ca5fa9e2731835f645bef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b240a2332a42c0ead1ca5fa9e2731835f645bef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a63bf02998f7b5e040a4b87e049d03ddd144f74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmbauVGD14yLN3Z9qS+jH2X+RDGAFAl+QsDUACgkQS+jH2X+R\nDGBkXBAAnCdZ0Odh5vDqWJofjF0Mq+iLF7OnU3c/tqyd1bvRCUczwcdi56mnc8iU\nL4OHHacR7RjffhhIoGwrqNzcJgSrM9nqRqCZ1QMIZ1v4SPat0nPFsVzVZfpbVs7D\novGj0RuvHKi5IhYURATrmxaqKlMn7LqnjgJACoVAmsT3ixgVYldmTADuvHXun5w4\nXCI90eWdp4ukhj79UOaG8IMobkymiU+5BpH+dzCaAACTptnnpbwpU6szjdmtIWbE\ngJC5RF0rIdJx6GwXAtr9TB6wX9oS2D71GvjanXSX3tnRuJCGNXrCvZvd9OfaXdcA\nPf26ig0MxaZCCgI9Y3Tf8P976g8Sf9Dj/FrAzXCwDV+tMuWxjuNRFkNBC+Uy/g2d\nEX/6cvrHsBI6230Ix7o4iQD4DLdg0cDH7ZmReqEVoTWMg6pPiU3oBecqdmCIeLkv\n6+ooNauTKgok2MLlsBjTrRU/6lKYdRxVn84/5QnH8pMylanwEZBsPd9i4JC4CV6/\nE+Ri77GgAnfYbatb/T+Ges4k9kE1iqqQkIx5IASdDUZ9ZIil38hLbk6v3+CpbWrq\nS0O1+bkVZi6GH4J2otu/D0vYD8oa77nHaq5f3mhHJiJzphBtYLFRN9dSkS6eh0Jw\nn2X/YpGNwur8MbbMtgsDWVTn1uirKqJA5wQQQRsBmPdtWStdITs=\n=clDU\n-----END PGP SIGNATURE-----", "payload": "tree b240a2332a42c0ead1ca5fa9e2731835f645bef5\nparent 7258740509877ff97c32c52cea7ac236ba80c51a\nauthor Florian Warzecha <liketechnik@disroot.org> 1603317746 +0200\ncommitter Florian Warzecha <liketechnik@disroot.org> 1603317746 +0200\n\nvalidate rustc_allow_const_fn_unstable targets\n\nAdds a check to make sure `#[rustc_allow_const_fn_unstable]`\ncan be applied only to functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a63bf02998f7b5e040a4b87e049d03ddd144f74", "html_url": "https://github.com/rust-lang/rust/commit/3a63bf02998f7b5e040a4b87e049d03ddd144f74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a63bf02998f7b5e040a4b87e049d03ddd144f74/comments", "author": {"login": "liketechnik", "id": 24209689, "node_id": "MDQ6VXNlcjI0MjA5Njg5", "avatar_url": "https://avatars.githubusercontent.com/u/24209689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liketechnik", "html_url": "https://github.com/liketechnik", "followers_url": "https://api.github.com/users/liketechnik/followers", "following_url": "https://api.github.com/users/liketechnik/following{/other_user}", "gists_url": "https://api.github.com/users/liketechnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/liketechnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liketechnik/subscriptions", "organizations_url": "https://api.github.com/users/liketechnik/orgs", "repos_url": "https://api.github.com/users/liketechnik/repos", "events_url": "https://api.github.com/users/liketechnik/events{/privacy}", "received_events_url": "https://api.github.com/users/liketechnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liketechnik", "id": 24209689, "node_id": "MDQ6VXNlcjI0MjA5Njg5", "avatar_url": "https://avatars.githubusercontent.com/u/24209689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liketechnik", "html_url": "https://github.com/liketechnik", "followers_url": "https://api.github.com/users/liketechnik/followers", "following_url": "https://api.github.com/users/liketechnik/following{/other_user}", "gists_url": "https://api.github.com/users/liketechnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/liketechnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liketechnik/subscriptions", "organizations_url": "https://api.github.com/users/liketechnik/orgs", "repos_url": "https://api.github.com/users/liketechnik/repos", "events_url": "https://api.github.com/users/liketechnik/events{/privacy}", "received_events_url": "https://api.github.com/users/liketechnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7258740509877ff97c32c52cea7ac236ba80c51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7258740509877ff97c32c52cea7ac236ba80c51a", "html_url": "https://github.com/rust-lang/rust/commit/7258740509877ff97c32c52cea7ac236ba80c51a"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "d6936ae942cdd1ab1b7a9066aa3ddb2cc6ec1678", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a63bf02998f7b5e040a4b87e049d03ddd144f74/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a63bf02998f7b5e040a4b87e049d03ddd144f74/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3a63bf02998f7b5e040a4b87e049d03ddd144f74", "patch": "@@ -87,6 +87,8 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_rustc_args_required_const(&attr, span, target, item)\n             } else if self.tcx.sess.check_name(attr, sym::allow_internal_unstable) {\n                 self.check_allow_internal_unstable(&attr, span, target, &attrs)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_allow_const_fn_unstable) {\n+                self.check_rustc_allow_const_fn_unstable(&attr, span, target)\n             } else {\n                 // lint-only checks\n                 if self.tcx.sess.check_name(attr, sym::cold) {\n@@ -791,6 +793,26 @@ impl CheckAttrVisitor<'tcx> {\n             .emit();\n         false\n     }\n+\n+    /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.\n+    /// (Allows proc_macro functions)\n+    fn check_rustc_allow_const_fn_unstable(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        if let Target::Fn | Target::Method(_) = target {\n+            // FIXME Check that this isn't just a function, but a const fn\n+            return true;\n+        }\n+        self.tcx\n+            .sess\n+            .struct_span_err(attr.span, \"attribute should be applied to `const fn`\")\n+            .span_label(*span, \"not a `const fn`\")\n+            .emit();\n+        false\n+    }\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {"}]}