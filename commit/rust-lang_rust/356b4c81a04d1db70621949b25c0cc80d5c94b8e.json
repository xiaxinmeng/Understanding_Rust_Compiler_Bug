{"sha": "356b4c81a04d1db70621949b25c0cc80d5c94b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmI0YzgxYTA0ZDFkYjcwNjIxOTQ5YjI1YzBjYzgwZDVjOTRiOGU=", "commit": {"author": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-10T12:03:31Z"}, "committer": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-10T12:03:31Z"}, "message": "documentation enhancement for 'spin loop hint': replace 'CPU' with 'CPU or core'", "tree": {"sha": "8c4ff5d52cc31998300769b86ce8e5057b1981ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c4ff5d52cc31998300769b86ce8e5057b1981ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356b4c81a04d1db70621949b25c0cc80d5c94b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356b4c81a04d1db70621949b25c0cc80d5c94b8e", "html_url": "https://github.com/rust-lang/rust/commit/356b4c81a04d1db70621949b25c0cc80d5c94b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356b4c81a04d1db70621949b25c0cc80d5c94b8e/comments", "author": null, "committer": null, "parents": [{"sha": "61dced18277a8cd55c963502db5a4cdf837858f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/61dced18277a8cd55c963502db5a4cdf837858f3", "html_url": "https://github.com/rust-lang/rust/commit/61dced18277a8cd55c963502db5a4cdf837858f3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "9a581d90cc205aeba7d597a263be2981a3762847", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/356b4c81a04d1db70621949b25c0cc80d5c94b8e/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356b4c81a04d1db70621949b25c0cc80d5c94b8e/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=356b4c81a04d1db70621949b25c0cc80d5c94b8e", "patch": "@@ -59,12 +59,12 @@ pub unsafe fn unreachable_unchecked() -> ! {\n /// busy-wait spin-loop without yielding control to the system's scheduler.\n ///\n /// Using a busy-wait spin-loop with `spin_loop` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU and where the waiting\n+/// contended lock is held by another thread executed on a different CPU or core and where the waiting\n /// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n /// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n+/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire CPU slice\n /// before switching to the thread that holds the lock. If the contending lock is held by a thread\n-/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n+/// on the same CPU or thread or if the waiting times for acquiring the lock are longer, it is often better to\n /// use [`std::thread::yield_now`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not"}, {"sha": "bdd045f75651e426f032054df08ce4441d6e0d4a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/356b4c81a04d1db70621949b25c0cc80d5c94b8e/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356b4c81a04d1db70621949b25c0cc80d5c94b8e/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=356b4c81a04d1db70621949b25c0cc80d5c94b8e", "patch": "@@ -134,12 +134,12 @@ use crate::hint::spin_loop;\n /// busy-wait spin-loop without yielding control to the system's scheduler.\n ///\n /// Using a busy-wait spin-loop with `spin_loop_hint` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU and where the waiting\n+/// contended lock is held by another thread executed on a different CPU or core and where the waiting\n /// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n /// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n+/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire CPU slice\n /// before switching to the thread that holds the lock. If the contending lock is held by a thread\n-/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n+/// on the same CPU or core or if the waiting times for acquiring the lock are longer, it is often better to\n /// use [`std::thread::yield_now`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not"}]}