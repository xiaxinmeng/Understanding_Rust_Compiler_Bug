{"sha": "df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOTdmYzYwMzhjNjQ4Y2U3Mzk2ZDNmNGRkZTZmNmQ3ODNhZWMxYmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-27T21:01:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-27T21:01:01Z"}, "message": "Rollup merge of #62067 - doctorn:await_diagnostic, r=matthewjasper\n\nAdd suggestion for missing `.await` keyword\n\nThis commit adds a suggestion diagnostic for missing `.await`. In order to do this, the trait `Future` is promoted to a lang item.\n\nCompiling code of the form:\n\n```rust\n#![feature(async_await)]\n\nfn take_u32(x: u32) {}\n\nasync fn make_u32() -> u32 {\n    22\n}\n\nasync fn foo() {\n    let x = make_u32();\n    take_u32(x)\n}\n\nfn main() {}\n```\n\nWill now result in the suggestion:\n\n```\nerror[E0308]: mismatched types\n  --> src/main.rs:11:18\n   |\n11 |         take_u32(x)\n   |                  ^\n   |                  |\n   |                  expected u32, found opaque type\n   |                  help: consider using `.await` here: `x.await`\n   |\n   = note: expected type `u32`\n              found type `impl std::future::Future`\n```\n\nThis commit does not cover chained expressions and therefore only covers the case originally pointed out in #61076. Cases I can think of that still need to be covered:\n\n- [ ] Return places for functions\n- [ ] Field access\n- [ ] Method invocation\n\nI'm planning to submit PRs for each of these separately as and when I have figured them out.", "tree": {"sha": "7a86dc790708086050272878dcfed6efa7741f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a86dc790708086050272878dcfed6efa7741f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdFS6NCRBK7hj4Ov3rIwAAdHIIACh4tK3/L4FkakY1yWoUygSe\nFJPEYs0kilCXzhiSVTZZdOCP6mjzRCAkF32vELjC5ypKIx5oMIkxBlYtcR35oos7\nNZNeoVWh8ckIB+oPRJrptkUju9vFCkxiWe8u2Rwws2GzTVW7S7LiUF2I8Xwo1D9y\noEmrg7GFpEIWzK+aDlwVMvk5kFNAX9Q2prtLTkrgBNDVOHQZBwgohbVGrro8PI0m\nfZh0OzHjoGOEFcdVS/5jBHMPKj2+zlPPEZNj5416jaRPLPgT+h5ZIsvbS/n5Fj3q\n5Ke14moH3iDX0CCdEIrWOCsgXdZCm5byfYVvFVgozDNJDNgV/nsxveULbtCIQvc=\n=OuE0\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a86dc790708086050272878dcfed6efa7741f4e\nparent 2f6cf36b326d5045872785782cdd0c121a3198ec\nparent 88194200e57c90ba0fa7b725d63ff4de28e71bbb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561669261 +0200\ncommitter GitHub <noreply@github.com> 1561669261 +0200\n\nRollup merge of #62067 - doctorn:await_diagnostic, r=matthewjasper\n\nAdd suggestion for missing `.await` keyword\n\nThis commit adds a suggestion diagnostic for missing `.await`. In order to do this, the trait `Future` is promoted to a lang item.\n\nCompiling code of the form:\n\n```rust\n#![feature(async_await)]\n\nfn take_u32(x: u32) {}\n\nasync fn make_u32() -> u32 {\n    22\n}\n\nasync fn foo() {\n    let x = make_u32();\n    take_u32(x)\n}\n\nfn main() {}\n```\n\nWill now result in the suggestion:\n\n```\nerror[E0308]: mismatched types\n  --> src/main.rs:11:18\n   |\n11 |         take_u32(x)\n   |                  ^\n   |                  |\n   |                  expected u32, found opaque type\n   |                  help: consider using `.await` here: `x.await`\n   |\n   = note: expected type `u32`\n              found type `impl std::future::Future`\n```\n\nThis commit does not cover chained expressions and therefore only covers the case originally pointed out in #61076. Cases I can think of that still need to be covered:\n\n- [ ] Return places for functions\n- [ ] Field access\n- [ ] Method invocation\n\nI'm planning to submit PRs for each of these separately as and when I have figured them out.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "html_url": "https://github.com/rust-lang/rust/commit/df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6cf36b326d5045872785782cdd0c121a3198ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6cf36b326d5045872785782cdd0c121a3198ec", "html_url": "https://github.com/rust-lang/rust/commit/2f6cf36b326d5045872785782cdd0c121a3198ec"}, {"sha": "88194200e57c90ba0fa7b725d63ff4de28e71bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/88194200e57c90ba0fa7b725d63ff4de28e71bbb", "html_url": "https://github.com/rust-lang/rust/commit/88194200e57c90ba0fa7b725d63ff4de28e71bbb"}], "stats": {"total": 193, "additions": 193, "deletions": 0}, "files": [{"sha": "acca8d7ba15339e1ddae04985f0fa081d4fd09fb", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -25,6 +25,7 @@ use crate::task::{Context, Poll};\n #[doc(spotlight)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+#[cfg_attr(not(bootstrap), lang = \"future_trait\")]\n pub trait Future {\n     /// The type of value produced on completion.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "a6e5bd275ae19008442a28c90751be2cb7905afe", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -320,6 +320,7 @@ language_item_table! {\n     FnMutTraitLangItem,          \"fn_mut\",             fn_mut_trait,            Target::Trait;\n     FnOnceTraitLangItem,         \"fn_once\",            fn_once_trait,           Target::Trait;\n \n+    FutureTraitLangItem,         \"future_trait\",       future_trait,            Target::Trait;\n     GeneratorStateLangItem,      \"generator_state\",    gen_state,               Target::Enum;\n     GeneratorTraitLangItem,      \"generator\",          gen_trait,               Target::Trait;\n     UnpinTraitLangItem,          \"unpin\",              unpin_trait,             Target::Trait;"}, {"sha": "14c38ae053d23d4cb5001411b8aa7c6db2a617d7", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -127,6 +127,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.suggest_compatible_variants(&mut err, expr, expected, expr_ty);\n         self.suggest_ref_or_into(&mut err, expr, expected, expr_ty);\n+        self.suggest_missing_await(&mut err, expr, expected, expr_ty);\n \n         (expected, Some(err))\n     }"}, {"sha": "37866bab9009d9f5175a6499508804503048c24a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -3932,6 +3932,72 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// A possible error is to forget to add `.await` when using futures:\n+    ///\n+    /// ```\n+    /// #![feature(async_await)]\n+    ///\n+    /// async fn make_u32() -> u32 {\n+    ///     22\n+    /// }\n+    ///\n+    /// fn take_u32(x: u32) {}\n+    ///\n+    /// async fn foo() {\n+    ///     let x = make_u32();\n+    ///     take_u32(x);\n+    /// }\n+    /// ```\n+    ///\n+    /// This routine checks if the found type `T` implements `Future<Output=U>` where `U` is the\n+    /// expected type. If this is the case, and we are inside of an async body, it suggests adding\n+    /// `.await` to the tail of the expression.\n+    fn suggest_missing_await(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expr: &hir::Expr,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        // `.await` is not permitted outside of `async` bodies, so don't bother to suggest if the\n+        // body isn't `async`.\n+        let item_id = self.tcx().hir().get_parent_node(self.body_id);\n+        if let Some(body_id) = self.tcx().hir().maybe_body_owned_by(item_id) {\n+            let body = self.tcx().hir().body(body_id);\n+            if let Some(hir::GeneratorKind::Async) = body.generator_kind {\n+                let sp = expr.span;\n+                // Check for `Future` implementations by constructing a predicate to\n+                // prove: `<T as Future>::Output == U`\n+                let future_trait = self.tcx.lang_items().future_trait().unwrap();\n+                let item_def_id = self.tcx.associated_items(future_trait).next().unwrap().def_id;\n+                let predicate = ty::Predicate::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n+                    // `<T as Future>::Output`\n+                    projection_ty: ty::ProjectionTy {\n+                        // `T`\n+                        substs: self.tcx.mk_substs_trait(\n+                            found,\n+                            self.fresh_substs_for_item(sp, item_def_id)\n+                        ),\n+                        // `Future::Output`\n+                        item_def_id,\n+                    },\n+                    ty: expected,\n+                }));\n+                let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n+                if self.infcx.predicate_may_hold(&obligation) {\n+                    if let Ok(code) = self.sess().source_map().span_to_snippet(sp) {\n+                        err.span_suggestion(\n+                            sp,\n+                            \"consider using `.await` here\",\n+                            format!(\"{}.await\", code),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /// A common error is to add an extra semicolon:\n     ///\n     /// ```"}, {"sha": "d551ef57985a1b8f73d19516b1f0452968e62b90", "filename": "src/test/ui/async-await/dont-suggest-missing-await.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+// This test ensures we don't make the suggestion in bodies that aren't `async`.\n+\n+#![feature(async_await)]\n+\n+fn take_u32(x: u32) {}\n+\n+async fn make_u32() -> u32 {\n+    22\n+}\n+\n+async fn dont_suggest_await_in_closure() {\n+    || {\n+        let x = make_u32();\n+        take_u32(x)\n+        //~^ ERROR mismatched types [E0308]\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "c60b0d1f30e803e25c33e8062af793ec2bac45ae", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/dont-suggest-missing-await.rs:16:18\n+   |\n+LL |         take_u32(x)\n+   |                  ^ expected u32, found opaque type\n+   |\n+   = note: expected type `u32`\n+              found type `impl std::future::Future`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "282be368c69cdaeb24b41264e214834eadb4462f", "filename": "src/test/ui/async-await/suggest-missing-await.fixed", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -0,0 +1,32 @@\n+// edition:2018\n+// run-rustfix\n+\n+#![feature(async_await)]\n+\n+fn take_u32(_x: u32) {}\n+\n+async fn make_u32() -> u32 {\n+    22\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_fn() {\n+    let x = make_u32();\n+    take_u32(x.await)\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider using `.await` here\n+    //~| SUGGESTION x.await\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_closure() {\n+    async || {\n+        let x = make_u32();\n+        take_u32(x.await)\n+        //~^ ERROR mismatched types [E0308]\n+        //~| HELP consider using `.await` here\n+        //~| SUGGESTION x.await\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "36103f050c1472e2a525b184c049546fa5613778", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -0,0 +1,32 @@\n+// edition:2018\n+// run-rustfix\n+\n+#![feature(async_await)]\n+\n+fn take_u32(_x: u32) {}\n+\n+async fn make_u32() -> u32 {\n+    22\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_fn() {\n+    let x = make_u32();\n+    take_u32(x)\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider using `.await` here\n+    //~| SUGGESTION x.await\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_closure() {\n+    async || {\n+        let x = make_u32();\n+        take_u32(x)\n+        //~^ ERROR mismatched types [E0308]\n+        //~| HELP consider using `.await` here\n+        //~| SUGGESTION x.await\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "59c20dcfbc9473545da76246499188045b449071", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df97fc6038c648ce7396d3f4dde6f6d783aec1ba/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=df97fc6038c648ce7396d3f4dde6f6d783aec1ba", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:15:14\n+   |\n+LL |     take_u32(x)\n+   |              ^\n+   |              |\n+   |              expected u32, found opaque type\n+   |              help: consider using `.await` here: `x.await`\n+   |\n+   = note: expected type `u32`\n+              found type `impl std::future::Future`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:25:18\n+   |\n+LL |         take_u32(x)\n+   |                  ^\n+   |                  |\n+   |                  expected u32, found opaque type\n+   |                  help: consider using `.await` here: `x.await`\n+   |\n+   = note: expected type `u32`\n+              found type `impl std::future::Future`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}