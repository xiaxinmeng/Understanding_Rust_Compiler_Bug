{"sha": "3dff918c6c3748104bf83db1b27fd13d51d587be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZmY5MThjNmMzNzQ4MTA0YmY4M2RiMWIyN2ZkMTNkNTFkNTg3YmU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-02T01:06:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-02T01:06:17Z"}, "message": "Remove dependency on regex", "tree": {"sha": "643ef496dc1dae82ff7a965803900c60cd0a67ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643ef496dc1dae82ff7a965803900c60cd0a67ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dff918c6c3748104bf83db1b27fd13d51d587be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dff918c6c3748104bf83db1b27fd13d51d587be", "html_url": "https://github.com/rust-lang/rust/commit/3dff918c6c3748104bf83db1b27fd13d51d587be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dff918c6c3748104bf83db1b27fd13d51d587be/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1aa017645925ef1fd80c0d69b08ebca532e6a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1aa017645925ef1fd80c0d69b08ebca532e6a38", "html_url": "https://github.com/rust-lang/rust/commit/c1aa017645925ef1fd80c0d69b08ebca532e6a38"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "c22187ee13e8eaed8de6d38d8aaa4d24fe5b8c64", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=3dff918c6c3748104bf83db1b27fd13d51d587be", "patch": "@@ -967,11 +967,6 @@ name = \"lazy_static\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"lazy_static\"\n-version = \"1.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"lazycell\"\n version = \"0.5.1\"\n@@ -1868,9 +1863,7 @@ dependencies = [\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n- \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -2820,7 +2813,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum kuchiki 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e03098e8e719c92b7794515dfd5c1724e2b12f5ce1788e61cfa4663f82eba8d8\"\n \"checksum languageserver-types 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"773e175c945800aeea4c21c04090bcb9db987b1a566ad9c6f569972299950e3e\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n-\"checksum lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8f31047daa365f19be14b47c29df4f7c3b581832407daabe6ae77397619237d\"\n \"checksum lazycell 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b585b7a6811fb03aa10e74b278a0f00f8dd9b45dc681f148bb29fa5cb61859b\"\n \"checksum libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36fbc8a8929c632868295d0178dd8f63fc423fd7537ad0738372bd010b3ac9b0\"\n \"checksum libgit2-sys 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6f74b4959cef96898f5123148724fc7dee043b9a6b99f219d948851bfbe53cb2\""}, {"sha": "cebf52d5af7a9c2cf4f2686617bb3e60fdb5f1cd", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=3dff918c6c3748104bf83db1b27fd13d51d587be", "patch": "@@ -6,7 +6,7 @@ version = \"0.0.0\"\n [lib]\n name = \"rustc_lint\"\n path = \"lib.rs\"\n-crate-types = [\"rlib\", \"dylib\"]\n+crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n@@ -15,5 +15,3 @@ rustc = { path = \"../librustc\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-lazy_static = \"1.0\"\n-regex = \"0.2.3\""}, {"sha": "f089ce8f06533c415cc4adf988a7094151d45b96", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=3dff918c6c3748104bf83db1b27fd13d51d587be", "patch": "@@ -21,13 +21,6 @@ use syntax_pos::Span;\n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;\n \n-use regex::Regex;\n-\n-lazy_static! {\n-    static ref ALPHABETIC_UNDERSCORE: Regex =\n-        Regex::new(\"([[:alpha:]])_+|_+([[:alpha:]])\").unwrap();\n-}\n-\n #[derive(PartialEq)]\n pub enum MethodLateContext {\n     TraitAutoImpl,\n@@ -60,6 +53,10 @@ pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &LateContext, sort: &str, name: ast::Name, span: Span) {\n+        fn char_has_case(c: char) -> bool {\n+            c.is_lowercase() || c.is_uppercase()\n+        }\n+\n         fn is_camel_case(name: ast::Name) -> bool {\n             let name = name.as_str();\n             if name.is_empty() {\n@@ -70,25 +67,37 @@ impl NonCamelCaseTypes {\n             // start with a non-lowercase letter rather than non-uppercase\n             // ones (some scripts don't have a concept of upper/lowercase)\n             !name.is_empty() && !name.chars().next().unwrap().is_lowercase() &&\n-                !name.contains(\"__\") && !ALPHABETIC_UNDERSCORE.is_match(name)\n+                !name.contains(\"__\") && !name.chars().collect::<Vec<_>>().windows(2).any(|pair| {\n+                    // contains a capitalisable character followed by, or preceded by, an underscore\n+                    char_has_case(pair[0]) && pair[1] == '_' ||\n+                    char_has_case(pair[1]) && pair[0] == '_'\n+                })\n         }\n \n         fn to_camel_case(s: &str) -> String {\n-            let s = s.trim_matches('_')\n-                     .split('_')\n-                        .map(|word| {\n-                            word.chars().enumerate().map(|(i, c)| if i == 0 {\n-                                c.to_uppercase().collect::<String>()\n-                            } else {\n-                                c.to_lowercase().collect()\n-                            })\n-                            .collect::<Vec<_>>()\n-                            .concat()\n-                        })\n-                        .filter(|x| !x.is_empty())\n-                        .collect::<Vec<_>>()\n-                        .join(\"_\");\n-            ALPHABETIC_UNDERSCORE.replace_all(s.as_str(), \"$1$2\").to_string()\n+            s.trim_matches('_')\n+                .split('_')\n+                .map(|word| {\n+                    word.chars().enumerate().map(|(i, c)| if i == 0 {\n+                        c.to_uppercase().collect::<String>()\n+                    } else {\n+                        c.to_lowercase().collect()\n+                    })\n+                    .collect::<Vec<_>>()\n+                    .concat()\n+                })\n+                .filter(|x| !x.is_empty())\n+                .collect::<Vec<_>>()\n+                .iter().fold((String::new(), None), |(acc, prev): (String, Option<&String>), next| {\n+                    // separate two components with an underscore if their boundary cannot\n+                    // be distinguished using a uppercase/lowercase case distinction\n+                    let join = if let Some(prev) = prev {\n+                                    let l = prev.chars().last().unwrap();\n+                                    let f = next.chars().next().unwrap();\n+                                    !char_has_case(l) && !char_has_case(f)\n+                                } else { false };\n+                    (acc + if join { \"_\" } else { \"\" } + next, Some(next))\n+                }).0\n         }\n \n         if !is_camel_case(name) {"}, {"sha": "8b41dd62742ce278fe51f92ed5f570b330daa810", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff918c6c3748104bf83db1b27fd13d51d587be/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=3dff918c6c3748104bf83db1b27fd13d51d587be", "patch": "@@ -41,9 +41,6 @@ extern crate rustc;\n extern crate log;\n extern crate rustc_const_eval;\n extern crate syntax_pos;\n-#[macro_use]\n-extern crate lazy_static;\n-extern crate regex;\n \n use rustc::lint;\n use rustc::middle;"}]}