{"sha": "85ef2f0cfe7c176755d4ec542c38df868bca8bcb", "node_id": "C_kwDOAAsO6NoAKDg1ZWYyZjBjZmU3YzE3Njc1NWQ0ZWM1NDJjMzhkZjg2OGJjYThiY2I", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T16:32:15Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:19:31Z"}, "message": "Inline string literals into format_args!().", "tree": {"sha": "478ab2f0c62536affe96a1dcf4c3b01ec847223a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/478ab2f0c62536affe96a1dcf4c3b01ec847223a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ef2f0cfe7c176755d4ec542c38df868bca8bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ef2f0cfe7c176755d4ec542c38df868bca8bcb", "html_url": "https://github.com/rust-lang/rust/commit/85ef2f0cfe7c176755d4ec542c38df868bca8bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ef2f0cfe7c176755d4ec542c38df868bca8bcb/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ad7e881dbf28784e44198dcf7dd865661b5424", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ad7e881dbf28784e44198dcf7dd865661b5424", "html_url": "https://github.com/rust-lang/rust/commit/94ad7e881dbf28784e44198dcf7dd865661b5424"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "3db4d061f212e034e836e0a3ba3c0fa258d6c58d", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/85ef2f0cfe7c176755d4ec542c38df868bca8bcb/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ef2f0cfe7c176755d4ec542c38df868bca8bcb/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=85ef2f0cfe7c176755d4ec542c38df868bca8bcb", "patch": "@@ -13,7 +13,8 @@ use std::borrow::Cow;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     pub(crate) fn lower_format_args(&mut self, sp: Span, fmt: &FormatArgs) -> hir::ExprKind<'hir> {\n-        let fmt = flatten_format_args(fmt);\n+        let fmt = flatten_format_args(Cow::Borrowed(fmt));\n+        let fmt = inline_literals(fmt);\n         expand_format_args(self, sp, &fmt)\n     }\n }\n@@ -27,8 +28,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n /// into\n ///\n /// `format_args!(\"a {} b{}! {}.\", 1, 2, 3)`.\n-fn flatten_format_args(fmt: &FormatArgs) -> Cow<'_, FormatArgs> {\n-    let mut fmt = Cow::Borrowed(fmt);\n+fn flatten_format_args(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n     let mut i = 0;\n     while i < fmt.template.len() {\n         if let FormatArgsPiece::Placeholder(placeholder) = &fmt.template[i]\n@@ -100,6 +100,64 @@ fn flatten_format_args(fmt: &FormatArgs) -> Cow<'_, FormatArgs> {\n     fmt\n }\n \n+/// Inline literals into the format string.\n+///\n+/// Turns\n+///\n+/// `format_args!(\"Hello, {}! {}\", \"World\", 123)`\n+///\n+/// into\n+///\n+/// `format_args!(\"Hello, World! {}\", 123)`.\n+fn inline_literals(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n+    // None: Not sure yet.\n+    // Some(true): Remove, because it was inlined. (Might be set to false later if it is used in another way.)\n+    // Some(false): Do not remove, because some non-inlined placeholder uses it.\n+    let mut remove = vec![None; fmt.arguments.all_args().len()];\n+\n+    for i in 0..fmt.template.len() {\n+        let FormatArgsPiece::Placeholder(placeholder) = &fmt.template[i] else { continue };\n+        let Ok(arg_index) = placeholder.argument.index else { continue };\n+        if let FormatTrait::Display = placeholder.format_trait\n+            && let ExprKind::Lit(lit) = fmt.arguments.all_args()[arg_index].expr.kind\n+            && let token::LitKind::Str | token::LitKind::StrRaw(_) = lit.kind\n+            && let Ok(LitKind::Str(s, _)) = LitKind::from_token_lit(lit)\n+        {\n+            // Now we need to mutate the outer FormatArgs.\n+            // If this is the first time, this clones the outer FormatArgs.\n+            let fmt = fmt.to_mut();\n+            // Replace the placeholder with the literal.\n+            fmt.template[i] = FormatArgsPiece::Literal(s);\n+            // Only remove it wasn't set to 'do not remove'.\n+            remove[arg_index].get_or_insert(true);\n+        } else {\n+            // Never remove an argument that's used by a non-inlined placeholder,\n+            // even if this argument is inlined in another place.\n+            remove[arg_index] = Some(false);\n+        }\n+    }\n+\n+    // Remove the arguments that were inlined.\n+    if remove.iter().any(|&x| x == Some(true)) {\n+        let fmt = fmt.to_mut();\n+        // Drop all the arguments that are marked for removal.\n+        let mut remove_it = remove.iter();\n+        fmt.arguments.all_args_mut().retain(|_| remove_it.next() != Some(&Some(true)));\n+        // Correct the indexes that refer to arguments that have shifted position.\n+        for piece in &mut fmt.template {\n+            let FormatArgsPiece::Placeholder(placeholder) = piece else { continue };\n+            let Ok(arg_index) = &mut placeholder.argument.index else { continue };\n+            for i in 0..*arg_index {\n+                if remove[i] == Some(true) {\n+                    *arg_index -= 1;\n+                }\n+            }\n+        }\n+    }\n+\n+    fmt\n+}\n+\n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n enum ArgumentType {\n     Format(FormatTrait),"}]}