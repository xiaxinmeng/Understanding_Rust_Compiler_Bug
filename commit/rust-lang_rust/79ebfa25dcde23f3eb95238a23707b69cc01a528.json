{"sha": "79ebfa25dcde23f3eb95238a23707b69cc01a528", "node_id": "C_kwDOAAsO6NoAKDc5ZWJmYTI1ZGNkZTIzZjNlYjk1MjM4YTIzNzA3YjY5Y2MwMWE1Mjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-15T22:35:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-15T22:35:11Z"}, "message": "make Miri build without the stack-cache feature", "tree": {"sha": "87fde5d74daeae75e7a2d377ffffe8f97e166a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87fde5d74daeae75e7a2d377ffffe8f97e166a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ebfa25dcde23f3eb95238a23707b69cc01a528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ebfa25dcde23f3eb95238a23707b69cc01a528", "html_url": "https://github.com/rust-lang/rust/commit/79ebfa25dcde23f3eb95238a23707b69cc01a528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ebfa25dcde23f3eb95238a23707b69cc01a528/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297ddffff3248c0d60a07a8a96cb2d06d6191a2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/297ddffff3248c0d60a07a8a96cb2d06d6191a2b", "html_url": "https://github.com/rust-lang/rust/commit/297ddffff3248c0d60a07a8a96cb2d06d6191a2b"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "4a9a13d35b5278e7224b7f775f174b7fe9963404", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79ebfa25dcde23f3eb95238a23707b69cc01a528/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ebfa25dcde23f3eb95238a23707b69cc01a528/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=79ebfa25dcde23f3eb95238a23707b69cc01a528", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> Stack {\n     /// Panics if any of the caching mechanisms have broken,\n     /// - The StackCache indices don't refer to the parallel items,\n     /// - There are no Unique items outside of first_unique..last_unique\n-    #[cfg(debug_assertions)]\n+    #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n     fn verify_cache_consistency(&self) {\n         // Only a full cache needs to be valid. Also see the comments in find_granting_cache\n         // and set_unknown_bottom.\n@@ -128,7 +128,7 @@ impl<'tcx> Stack {\n         tag: ProvenanceExtra,\n         exposed_tags: &FxHashSet<SbTag>,\n     ) -> Result<Option<usize>, ()> {\n-        #[cfg(debug_assertions)]\n+        #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n \n         let ProvenanceExtra::Concrete(tag) = tag else {\n@@ -320,13 +320,14 @@ impl<'tcx> Stack {\n \n         if disable_start <= unique_range.end {\n             let lower = unique_range.start.max(disable_start);\n-            let upper = self.unique_range.end;\n+            let upper = unique_range.end;\n             for item in &mut self.borrows[lower..upper] {\n                 if item.perm() == Permission::Unique {\n                     log::trace!(\"access: disabling item {:?}\", item);\n                     visitor(*item)?;\n                     item.set_permission(Permission::Disabled);\n                     // Also update all copies of this item in the cache.\n+                    #[cfg(feature = \"stack-cache\")]\n                     for it in &mut self.cache.items {\n                         if it.tag() == item.tag() {\n                             it.set_permission(Permission::Disabled);\n@@ -347,7 +348,7 @@ impl<'tcx> Stack {\n             self.unique_range.end = self.unique_range.end.min(disable_start);\n         }\n \n-        #[cfg(debug_assertions)]\n+        #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n \n         Ok(())\n@@ -402,7 +403,7 @@ impl<'tcx> Stack {\n             self.unique_range = 0..0;\n         }\n \n-        #[cfg(debug_assertions)]\n+        #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n         Ok(())\n     }"}]}