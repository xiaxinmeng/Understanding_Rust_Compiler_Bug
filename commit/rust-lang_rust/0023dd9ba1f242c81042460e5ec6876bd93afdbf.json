{"sha": "0023dd9ba1f242c81042460e5ec6876bd93afdbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjNkZDliYTFmMjQyYzgxMDQyNDYwZTVlYzY4NzZiZDkzYWZkYmY=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-16T05:36:19Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-16T05:36:19Z"}, "message": "Split tests more and bless them again", "tree": {"sha": "721225d506260102f4ae080bf3475b24adf9a0f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/721225d506260102f4ae080bf3475b24adf9a0f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0023dd9ba1f242c81042460e5ec6876bd93afdbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0023dd9ba1f242c81042460e5ec6876bd93afdbf", "html_url": "https://github.com/rust-lang/rust/commit/0023dd9ba1f242c81042460e5ec6876bd93afdbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0023dd9ba1f242c81042460e5ec6876bd93afdbf/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f335fb08c2b98df6afd242eb2fc428679a15bbf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f335fb08c2b98df6afd242eb2fc428679a15bbf3", "html_url": "https://github.com/rust-lang/rust/commit/f335fb08c2b98df6afd242eb2fc428679a15bbf3"}], "stats": {"total": 1255, "additions": 653, "deletions": 602}, "files": [{"sha": "dc0186e3f26bf4dcf03a8f8b2eb84b5720789a28", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs?ref=0023dd9ba1f242c81042460e5ec6876bd93afdbf", "patch": "@@ -0,0 +1,162 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+enum Either {\n+    One(X),\n+    Two(X),\n+}\n+\n+#[derive(Clone)]\n+struct X(Y);\n+\n+#[derive(Clone)]\n+struct Y;\n+\n+\n+pub fn main() {\n+    let e = Either::One(X(Y));\n+    let mut em = Either::One(X(Y));\n+\n+    let r = &e;\n+    let rm = &mut Either::One(X(Y));\n+\n+    let x = X(Y);\n+    let mut xm = X(Y);\n+\n+    let s = &x;\n+    let sm = &mut X(Y);\n+\n+    let ve = vec![Either::One(X(Y))];\n+\n+    let vr = &ve;\n+    let vrm = &mut vec![Either::One(X(Y))];\n+\n+    let vx = vec![X(Y)];\n+\n+    let vs = &vx;\n+    let vsm = &mut vec![X(Y)];\n+\n+    // -------- test for duplicate suggestions --------\n+\n+    let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (X(_t), X(_u))\n+    if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &(Either::Two(_t), Either::One(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n+        _ => (),\n+    }\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        | &(Either::Two(_t), Either::One(_u)) => (),\n+        // FIXME: would really like a suggestion here too\n+        _ => (),\n+    }\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &(Either::Two(ref _t), Either::One(ref _u)) => (),\n+        _ => (),\n+    }\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        (Either::Two(_t), Either::One(_u)) => (),\n+        _ => (),\n+    }\n+    fn f5(&(X(_t), X(_u)): &(X, X)) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (X(_t), X(_u))\n+\n+    let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (X(_t), X(_u))\n+    if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &mut (Either::Two(_t), Either::One(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        | &mut (Either::Two(_t), Either::One(_u)) => (),\n+        // FIXME: would really like a suggestion here too\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &mut (Either::Two(ref _t), Either::One(ref _u)) => (),\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &mut (Either::Two(ref mut _t), Either::One(ref mut _u)) => (),\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        (Either::Two(_t), Either::One(_u)) => (),\n+        _ => (),\n+    }\n+    fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (X(_t), X(_u))\n+}"}, {"sha": "bb3688411f718c46168acbb3c5efd9b5542c1f81", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "added", "additions": 328, "deletions": 0, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=0023dd9ba1f242c81042460e5ec6876bd93afdbf", "patch": "@@ -0,0 +1,328 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:51:27\n+   |\n+LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n+   |         ---------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         |   |      |\n+   |         |   |      ...and here\n+   |         |   data moved here\n+   |         help: consider removing the `&`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:51:13\n+   |\n+LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n+   |             ^^     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:55:50\n+   |\n+LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |            -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |            |             |                |\n+   |            |             |                ...and here\n+   |            |             data moved here\n+   |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:55:26\n+   |\n+LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |                          ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:59:53\n+   |\n+LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |               -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |               |             |                |\n+   |               |             |                ...and here\n+   |               |             data moved here\n+   |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:59:29\n+   |\n+LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |                             ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:63:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       --               -- ...and here\n+   |                       |\n+   |                       data moved here\n+...\n+LL |         &(Either::Two(_t), Either::One(_u)) => (),\n+   |                       -- ...and here   -- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:65:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       ^^               ^^\n+...\n+LL |         &(Either::Two(_t), Either::One(_u)) => (),\n+   |                       ^^               ^^\n+help: consider removing the `&`\n+   |\n+LL |         (Either::One(_t), Either::Two(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider removing the `&`\n+   |\n+LL |         (Either::Two(_t), Either::One(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:73:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u))\n+   |         -----------------------------------\n+   |         |             |                |\n+   |         |             |                ...and here\n+   |         |             data moved here\n+   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:75:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u))\n+   |                       ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:82:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |         -----------------------------------\n+   |         |             |                |\n+   |         |             |                ...and here\n+   |         |             data moved here\n+   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:84:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:90:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |         -----------------------------------\n+   |         |             |                |\n+   |         |             |                ...and here\n+   |         |             data moved here\n+   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:92:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:103:31\n+   |\n+LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+   |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         |       |      |\n+   |         |       |      ...and here\n+   |         |       data moved here\n+   |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:103:17\n+   |\n+LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+   |                 ^^     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:107:54\n+   |\n+LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |            ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |            |                 |                |\n+   |            |                 |                ...and here\n+   |            |                 data moved here\n+   |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:107:30\n+   |\n+LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |                              ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:111:57\n+   |\n+LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |               ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |               |                 |                |\n+   |               |                 |                ...and here\n+   |               |                 data moved here\n+   |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:111:33\n+   |\n+LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |                                 ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:115:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           --               -- ...and here\n+   |                           |\n+   |                           data moved here\n+...\n+LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n+   |                           -- ...and here   -- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:117:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+...\n+LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n+   |                           ^^               ^^\n+help: consider removing the `&mut`\n+   |\n+LL |         (Either::One(_t), Either::Two(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider removing the `&mut`\n+   |\n+LL |         (Either::Two(_t), Either::One(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:125:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u))\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:127:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u))\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:134:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:136:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:142:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:144:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:150:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:152:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:98:11\n+   |\n+LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n+   |           ^^^^--^^^^^--^^\n+   |           |   |      |\n+   |           |   |      ...and here\n+   |           |   data moved here\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `&`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:98:15\n+   |\n+LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n+   |               ^^     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:158:11\n+   |\n+LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n+   |           ^^^^^^^^--^^^^^--^^\n+   |           |       |      |\n+   |           |       |      ...and here\n+   |           |       data moved here\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:158:19\n+   |\n+LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n+   |                   ^^     ^^\n+\n+error: aborting due to 17 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "228ec5afce635a254919779139a75d0f9dc6f5bf", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=0023dd9ba1f242c81042460e5ec6876bd93afdbf", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:40:21\n+  --> $DIR/move-into-closure.rs:40:21\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -12,13 +12,13 @@ LL |         let X(_t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:40:15\n+  --> $DIR/move-into-closure.rs:40:15\n    |\n LL |         let X(_t) = x;\n    |               ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:44:34\n+  --> $DIR/move-into-closure.rs:44:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -31,13 +31,13 @@ LL |         if let Either::One(_t) = e { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:44:28\n+  --> $DIR/move-into-closure.rs:44:28\n    |\n LL |         if let Either::One(_t) = e { }\n    |                            ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:48:37\n+  --> $DIR/move-into-closure.rs:48:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -50,13 +50,13 @@ LL |         while let Either::One(_t) = e { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:48:31\n+  --> $DIR/move-into-closure.rs:48:31\n    |\n LL |         while let Either::One(_t) = e { }\n    |                               ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:52:15\n+  --> $DIR/move-into-closure.rs:52:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -71,13 +71,13 @@ LL |             Either::One(_t)\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:56:25\n+  --> $DIR/move-into-closure.rs:56:25\n    |\n LL |             Either::One(_t)\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:59:15\n+  --> $DIR/move-into-closure.rs:59:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -92,13 +92,13 @@ LL |             Either::One(_t) => (),\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:63:25\n+  --> $DIR/move-into-closure.rs:63:25\n    |\n LL |             Either::One(_t) => (),\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:68:25\n+  --> $DIR/move-into-closure.rs:68:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -111,13 +111,13 @@ LL |         let X(mut _t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:68:15\n+  --> $DIR/move-into-closure.rs:68:15\n    |\n LL |         let X(mut _t) = x;\n    |               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:72:38\n+  --> $DIR/move-into-closure.rs:72:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -130,13 +130,13 @@ LL |         if let Either::One(mut _t) = em { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:72:28\n+  --> $DIR/move-into-closure.rs:72:28\n    |\n LL |         if let Either::One(mut _t) = em { }\n    |                            ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:76:41\n+  --> $DIR/move-into-closure.rs:76:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -149,13 +149,13 @@ LL |         while let Either::One(mut _t) = em { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:76:31\n+  --> $DIR/move-into-closure.rs:76:31\n    |\n LL |         while let Either::One(mut _t) = em { }\n    |                               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:80:15\n+  --> $DIR/move-into-closure.rs:80:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -170,13 +170,13 @@ LL |             Either::One(mut _t)\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:84:25\n+  --> $DIR/move-into-closure.rs:84:25\n    |\n LL |             Either::One(mut _t)\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:87:15\n+  --> $DIR/move-into-closure.rs:87:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -191,13 +191,13 @@ LL |             Either::One(mut _t) => (),\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:91:25\n+  --> $DIR/move-into-closure.rs:91:25\n    |\n LL |             Either::One(mut _t) => (),\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:107:21\n+  --> $DIR/move-into-closure.rs:107:21\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -210,13 +210,13 @@ LL |         let X(_t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:107:15\n+  --> $DIR/move-into-closure.rs:107:15\n    |\n LL |         let X(_t) = x;\n    |               ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:111:34\n+  --> $DIR/move-into-closure.rs:111:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -229,13 +229,13 @@ LL |         if let Either::One(_t) = e { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:111:28\n+  --> $DIR/move-into-closure.rs:111:28\n    |\n LL |         if let Either::One(_t) = e { }\n    |                            ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:115:37\n+  --> $DIR/move-into-closure.rs:115:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -248,13 +248,13 @@ LL |         while let Either::One(_t) = e { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:115:31\n+  --> $DIR/move-into-closure.rs:115:31\n    |\n LL |         while let Either::One(_t) = e { }\n    |                               ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:119:15\n+  --> $DIR/move-into-closure.rs:119:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -269,13 +269,13 @@ LL |             Either::One(_t)\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:123:25\n+  --> $DIR/move-into-closure.rs:123:25\n    |\n LL |             Either::One(_t)\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:126:15\n+  --> $DIR/move-into-closure.rs:126:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -290,13 +290,13 @@ LL |             Either::One(_t) => (),\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:130:25\n+  --> $DIR/move-into-closure.rs:130:25\n    |\n LL |             Either::One(_t) => (),\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:135:25\n+  --> $DIR/move-into-closure.rs:135:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -309,13 +309,13 @@ LL |         let X(mut _t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:135:15\n+  --> $DIR/move-into-closure.rs:135:15\n    |\n LL |         let X(mut _t) = x;\n    |               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:139:38\n+  --> $DIR/move-into-closure.rs:139:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -328,13 +328,13 @@ LL |         if let Either::One(mut _t) = em { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:139:28\n+  --> $DIR/move-into-closure.rs:139:28\n    |\n LL |         if let Either::One(mut _t) = em { }\n    |                            ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:143:41\n+  --> $DIR/move-into-closure.rs:143:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -347,13 +347,13 @@ LL |         while let Either::One(mut _t) = em { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:143:31\n+  --> $DIR/move-into-closure.rs:143:31\n    |\n LL |         while let Either::One(mut _t) = em { }\n    |                               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:147:15\n+  --> $DIR/move-into-closure.rs:147:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -368,13 +368,13 @@ LL |             Either::One(mut _t)\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:151:25\n+  --> $DIR/move-into-closure.rs:151:25\n    |\n LL |             Either::One(mut _t)\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:154:15\n+  --> $DIR/move-into-closure.rs:154:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -389,13 +389,13 @@ LL |             Either::One(mut _t) => (),\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:158:25\n+  --> $DIR/move-into-closure.rs:158:25\n    |\n LL |             Either::One(mut _t) => (),\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/dont-suggest-ref-in-closure.rs:162:15\n+  --> $DIR/move-into-closure.rs:162:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -410,7 +410,7 @@ LL |             Either::One(mut _t) => (),\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref-in-closure.rs:166:25\n+  --> $DIR/move-into-closure.rs:166:25\n    |\n LL |             Either::One(mut _t) => (),\n    |                         ^^^^^^"}, {"sha": "474e88c4d53950642269b42d96f62f0731ca9747", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=0023dd9ba1f242c81042460e5ec6876bd93afdbf", "patch": "@@ -373,118 +373,4 @@ pub fn main() {\n         //~| SUGGESTION Either::One(_t)\n         Either::Two(_t) => (),\n     }\n-\n-    // -------- test for duplicate suggestions --------\n-\n-    let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (X(_t), X(_u))\n-    if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-    while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-    match &(e.clone(), e.clone()) {\n-        //~^ ERROR cannot move\n-        &(Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        &(Either::Two(_t), Either::One(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n-        _ => (),\n-    }\n-    match &(e.clone(), e.clone()) {\n-        //~^ ERROR cannot move\n-        &(Either::One(_t), Either::Two(_u))\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        | &(Either::Two(_t), Either::One(_u)) => (),\n-        // FIXME: would really like a suggestion here too\n-        _ => (),\n-    }\n-    match &(e.clone(), e.clone()) {\n-        //~^ ERROR cannot move\n-        &(Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        &(Either::Two(ref _t), Either::One(ref _u)) => (),\n-        _ => (),\n-    }\n-    match &(e.clone(), e.clone()) {\n-        //~^ ERROR cannot move\n-        &(Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        (Either::Two(_t), Either::One(_u)) => (),\n-        _ => (),\n-    }\n-    fn f5(&(X(_t), X(_u)): &(X, X)) { }\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (X(_t), X(_u))\n-\n-    let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (X(_t), X(_u))\n-    if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-    while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-    match &mut (em.clone(), em.clone()) {\n-        //~^ ERROR cannot move\n-        &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        &mut (Either::Two(_t), Either::One(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n-        _ => (),\n-    }\n-    match &mut (em.clone(), em.clone()) {\n-        //~^ ERROR cannot move\n-        &mut (Either::One(_t), Either::Two(_u))\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        | &mut (Either::Two(_t), Either::One(_u)) => (),\n-        // FIXME: would really like a suggestion here too\n-        _ => (),\n-    }\n-    match &mut (em.clone(), em.clone()) {\n-        //~^ ERROR cannot move\n-        &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        &mut (Either::Two(ref _t), Either::One(ref _u)) => (),\n-        _ => (),\n-    }\n-    match &mut (em.clone(), em.clone()) {\n-        //~^ ERROR cannot move\n-        &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        &mut (Either::Two(ref mut _t), Either::One(ref mut _u)) => (),\n-        _ => (),\n-    }\n-    match &mut (em.clone(), em.clone()) {\n-        //~^ ERROR cannot move\n-        &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n-        (Either::Two(_t), Either::One(_u)) => (),\n-        _ => (),\n-    }\n-    fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n-    //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (X(_t), X(_u))\n }"}, {"sha": "d7a32dbfcc643b2cd633eec9f55506b1982cbcb4", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 121, "deletions": 446, "changes": 567, "blob_url": "https://github.com/rust-lang/rust/blob/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0023dd9ba1f242c81042460e5ec6876bd93afdbf/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=0023dd9ba1f242c81042460e5ec6876bd93afdbf", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:50:17\n+  --> $DIR/simple.rs:50:17\n    |\n LL |     let X(_t) = *s;\n    |           --    ^^\n@@ -9,13 +9,13 @@ LL |     let X(_t) = *s;\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:50:11\n+  --> $DIR/simple.rs:50:11\n    |\n LL |     let X(_t) = *s;\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:54:30\n+  --> $DIR/simple.rs:54:30\n    |\n LL |     if let Either::One(_t) = *r { }\n    |                        --    ^^\n@@ -25,13 +25,13 @@ LL |     if let Either::One(_t) = *r { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:54:24\n+  --> $DIR/simple.rs:54:24\n    |\n LL |     if let Either::One(_t) = *r { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:58:33\n+  --> $DIR/simple.rs:58:33\n    |\n LL |     while let Either::One(_t) = *r { }\n    |                           --    ^^\n@@ -41,13 +41,13 @@ LL |     while let Either::One(_t) = *r { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:58:27\n+  --> $DIR/simple.rs:58:27\n    |\n LL |     while let Either::One(_t) = *r { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:62:11\n+  --> $DIR/simple.rs:62:11\n    |\n LL |     match *r {\n    |           ^^\n@@ -59,13 +59,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:66:21\n+  --> $DIR/simple.rs:66:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:69:11\n+  --> $DIR/simple.rs:69:11\n    |\n LL |     match *r {\n    |           ^^\n@@ -77,13 +77,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:73:21\n+  --> $DIR/simple.rs:73:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:78:17\n+  --> $DIR/simple.rs:78:17\n    |\n LL |     let X(_t) = *sm;\n    |           --    ^^^\n@@ -93,13 +93,13 @@ LL |     let X(_t) = *sm;\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:78:11\n+  --> $DIR/simple.rs:78:11\n    |\n LL |     let X(_t) = *sm;\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:82:30\n+  --> $DIR/simple.rs:82:30\n    |\n LL |     if let Either::One(_t) = *rm { }\n    |                        --    ^^^\n@@ -109,13 +109,13 @@ LL |     if let Either::One(_t) = *rm { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:82:24\n+  --> $DIR/simple.rs:82:24\n    |\n LL |     if let Either::One(_t) = *rm { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:86:33\n+  --> $DIR/simple.rs:86:33\n    |\n LL |     while let Either::One(_t) = *rm { }\n    |                           --    ^^^\n@@ -125,13 +125,13 @@ LL |     while let Either::One(_t) = *rm { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:86:27\n+  --> $DIR/simple.rs:86:27\n    |\n LL |     while let Either::One(_t) = *rm { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:90:11\n+  --> $DIR/simple.rs:90:11\n    |\n LL |     match *rm {\n    |           ^^^\n@@ -143,13 +143,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:94:21\n+  --> $DIR/simple.rs:94:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:97:11\n+  --> $DIR/simple.rs:97:11\n    |\n LL |     match *rm {\n    |           ^^^\n@@ -161,13 +161,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:101:21\n+  --> $DIR/simple.rs:101:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:105:11\n+  --> $DIR/simple.rs:105:11\n    |\n LL |     match *rm {\n    |           ^^^\n@@ -179,13 +179,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:109:21\n+  --> $DIR/simple.rs:109:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:114:17\n+  --> $DIR/simple.rs:114:17\n    |\n LL |     let X(_t) = vs[0];\n    |           --    ^^^^^\n@@ -195,13 +195,13 @@ LL |     let X(_t) = vs[0];\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:114:11\n+  --> $DIR/simple.rs:114:11\n    |\n LL |     let X(_t) = vs[0];\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:118:30\n+  --> $DIR/simple.rs:118:30\n    |\n LL |     if let Either::One(_t) = vr[0] { }\n    |                        --    ^^^^^\n@@ -211,13 +211,13 @@ LL |     if let Either::One(_t) = vr[0] { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:118:24\n+  --> $DIR/simple.rs:118:24\n    |\n LL |     if let Either::One(_t) = vr[0] { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:122:33\n+  --> $DIR/simple.rs:122:33\n    |\n LL |     while let Either::One(_t) = vr[0] { }\n    |                           --    ^^^^^\n@@ -227,13 +227,13 @@ LL |     while let Either::One(_t) = vr[0] { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:122:27\n+  --> $DIR/simple.rs:122:27\n    |\n LL |     while let Either::One(_t) = vr[0] { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:126:11\n+  --> $DIR/simple.rs:126:11\n    |\n LL |     match vr[0] {\n    |           ^^^^^\n@@ -245,13 +245,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:130:21\n+  --> $DIR/simple.rs:130:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:133:11\n+  --> $DIR/simple.rs:133:11\n    |\n LL |     match vr[0] {\n    |           ^^^^^\n@@ -263,13 +263,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:137:21\n+  --> $DIR/simple.rs:137:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:142:17\n+  --> $DIR/simple.rs:142:17\n    |\n LL |     let X(_t) = vsm[0];\n    |           --    ^^^^^^\n@@ -279,13 +279,13 @@ LL |     let X(_t) = vsm[0];\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:142:11\n+  --> $DIR/simple.rs:142:11\n    |\n LL |     let X(_t) = vsm[0];\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:146:30\n+  --> $DIR/simple.rs:146:30\n    |\n LL |     if let Either::One(_t) = vrm[0] { }\n    |                        --    ^^^^^^\n@@ -295,13 +295,13 @@ LL |     if let Either::One(_t) = vrm[0] { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:146:24\n+  --> $DIR/simple.rs:146:24\n    |\n LL |     if let Either::One(_t) = vrm[0] { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:150:33\n+  --> $DIR/simple.rs:150:33\n    |\n LL |     while let Either::One(_t) = vrm[0] { }\n    |                           --    ^^^^^^\n@@ -311,13 +311,13 @@ LL |     while let Either::One(_t) = vrm[0] { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:150:27\n+  --> $DIR/simple.rs:150:27\n    |\n LL |     while let Either::One(_t) = vrm[0] { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:154:11\n+  --> $DIR/simple.rs:154:11\n    |\n LL |     match vrm[0] {\n    |           ^^^^^^\n@@ -329,13 +329,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:158:21\n+  --> $DIR/simple.rs:158:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:161:11\n+  --> $DIR/simple.rs:161:11\n    |\n LL |     match vrm[0] {\n    |           ^^^^^^\n@@ -347,13 +347,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:165:21\n+  --> $DIR/simple.rs:165:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:169:11\n+  --> $DIR/simple.rs:169:11\n    |\n LL |     match vrm[0] {\n    |           ^^^^^^\n@@ -365,13 +365,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:173:21\n+  --> $DIR/simple.rs:173:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:180:18\n+  --> $DIR/simple.rs:180:18\n    |\n LL |     let &X(_t) = s;\n    |         ------   ^ cannot move out of borrowed content\n@@ -380,13 +380,13 @@ LL |     let &X(_t) = s;\n    |         help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:180:12\n+  --> $DIR/simple.rs:180:12\n    |\n LL |     let &X(_t) = s;\n    |            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:184:31\n+  --> $DIR/simple.rs:184:31\n    |\n LL |     if let &Either::One(_t) = r { }\n    |            ----------------   ^ cannot move out of borrowed content\n@@ -395,13 +395,13 @@ LL |     if let &Either::One(_t) = r { }\n    |            help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:184:25\n+  --> $DIR/simple.rs:184:25\n    |\n LL |     if let &Either::One(_t) = r { }\n    |                         ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:188:34\n+  --> $DIR/simple.rs:188:34\n    |\n LL |     while let &Either::One(_t) = r { }\n    |               ----------------   ^ cannot move out of borrowed content\n@@ -410,13 +410,13 @@ LL |     while let &Either::One(_t) = r { }\n    |               help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:188:28\n+  --> $DIR/simple.rs:188:28\n    |\n LL |     while let &Either::One(_t) = r { }\n    |                            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:192:11\n+  --> $DIR/simple.rs:192:11\n    |\n LL |     match r {\n    |           ^ cannot move out of borrowed content\n@@ -428,13 +428,13 @@ LL |         &Either::One(_t)\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:194:22\n+  --> $DIR/simple.rs:194:22\n    |\n LL |         &Either::One(_t)\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:200:11\n+  --> $DIR/simple.rs:200:11\n    |\n LL |     match r {\n    |           ^ cannot move out of borrowed content\n@@ -446,13 +446,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:202:22\n+  --> $DIR/simple.rs:202:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:207:11\n+  --> $DIR/simple.rs:207:11\n    |\n LL |     match r {\n    |           ^ cannot move out of borrowed content\n@@ -464,13 +464,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:209:22\n+  --> $DIR/simple.rs:209:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:219:22\n+  --> $DIR/simple.rs:219:22\n    |\n LL |     let &mut X(_t) = sm;\n    |         ----------   ^^ cannot move out of borrowed content\n@@ -479,13 +479,13 @@ LL |     let &mut X(_t) = sm;\n    |         help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:219:16\n+  --> $DIR/simple.rs:219:16\n    |\n LL |     let &mut X(_t) = sm;\n    |                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:223:35\n+  --> $DIR/simple.rs:223:35\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n    |            --------------------   ^^ cannot move out of borrowed content\n@@ -494,13 +494,13 @@ LL |     if let &mut Either::One(_t) = rm { }\n    |            help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:223:29\n+  --> $DIR/simple.rs:223:29\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n    |                             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:227:38\n+  --> $DIR/simple.rs:227:38\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n    |               --------------------   ^^ cannot move out of borrowed content\n@@ -509,13 +509,13 @@ LL |     while let &mut Either::One(_t) = rm { }\n    |               help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:227:32\n+  --> $DIR/simple.rs:227:32\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n    |                                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:231:11\n+  --> $DIR/simple.rs:231:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -527,7 +527,7 @@ LL |         &mut Either::Two(_t) => (),\n    |                          -- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:233:26\n+  --> $DIR/simple.rs:233:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n@@ -544,7 +544,7 @@ LL |         Either::Two(_t) => (),\n    |         ^^^^^^^^^^^^^^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:240:11\n+  --> $DIR/simple.rs:240:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -556,13 +556,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:242:26\n+  --> $DIR/simple.rs:242:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:247:11\n+  --> $DIR/simple.rs:247:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -574,13 +574,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:249:26\n+  --> $DIR/simple.rs:249:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:254:11\n+  --> $DIR/simple.rs:254:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -592,55 +592,55 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:256:26\n+  --> $DIR/simple.rs:256:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:270:21\n+  --> $DIR/simple.rs:270:21\n    |\n LL |     let (&X(_t),) = (&x.clone(),);\n    |             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n    |             |\n    |             data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:270:13\n+  --> $DIR/simple.rs:270:13\n    |\n LL |     let (&X(_t),) = (&x.clone(),);\n    |             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:272:34\n+  --> $DIR/simple.rs:272:34\n    |\n LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n    |                          --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                          |\n    |                          data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:272:26\n+  --> $DIR/simple.rs:272:26\n    |\n LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:274:37\n+  --> $DIR/simple.rs:274:37\n    |\n LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n    |                             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                             |\n    |                             data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:274:29\n+  --> $DIR/simple.rs:274:29\n    |\n LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n    |                             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:276:11\n+  --> $DIR/simple.rs:276:11\n    |\n LL |     match (&e.clone(),) {\n    |           ^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -649,55 +649,55 @@ LL |         (&Either::One(_t),)\n    |                       -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:278:23\n+  --> $DIR/simple.rs:278:23\n    |\n LL |         (&Either::One(_t),)\n    |                       ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:284:25\n+  --> $DIR/simple.rs:284:25\n    |\n LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n    |                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                 |\n    |                 data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:284:17\n+  --> $DIR/simple.rs:284:17\n    |\n LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n    |                 ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:286:38\n+  --> $DIR/simple.rs:286:38\n    |\n LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                              --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                              |\n    |                              data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:286:30\n+  --> $DIR/simple.rs:286:30\n    |\n LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                              ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:288:41\n+  --> $DIR/simple.rs:288:41\n    |\n LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                                 |\n    |                                 data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:288:33\n+  --> $DIR/simple.rs:288:33\n    |\n LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                                 ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:290:11\n+  --> $DIR/simple.rs:290:11\n    |\n LL |     match (&mut em.clone(),) {\n    |           ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -708,15 +708,15 @@ LL |         (&mut Either::Two(_t),) => (),\n    |                           -- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:292:27\n+  --> $DIR/simple.rs:292:27\n    |\n LL |         (&mut Either::One(_t),) => (),\n    |                           ^^\n LL |         (&mut Either::Two(_t),) => (),\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:300:18\n+  --> $DIR/simple.rs:300:18\n    |\n LL |     let &X(_t) = &x;\n    |         ------   ^^ cannot move out of borrowed content\n@@ -725,13 +725,13 @@ LL |     let &X(_t) = &x;\n    |         help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:300:12\n+  --> $DIR/simple.rs:300:12\n    |\n LL |     let &X(_t) = &x;\n    |            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:304:31\n+  --> $DIR/simple.rs:304:31\n    |\n LL |     if let &Either::One(_t) = &e { }\n    |            ----------------   ^^ cannot move out of borrowed content\n@@ -740,13 +740,13 @@ LL |     if let &Either::One(_t) = &e { }\n    |            help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:304:25\n+  --> $DIR/simple.rs:304:25\n    |\n LL |     if let &Either::One(_t) = &e { }\n    |                         ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:308:34\n+  --> $DIR/simple.rs:308:34\n    |\n LL |     while let &Either::One(_t) = &e { }\n    |               ----------------   ^^ cannot move out of borrowed content\n@@ -755,13 +755,13 @@ LL |     while let &Either::One(_t) = &e { }\n    |               help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:308:28\n+  --> $DIR/simple.rs:308:28\n    |\n LL |     while let &Either::One(_t) = &e { }\n    |                            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:312:11\n+  --> $DIR/simple.rs:312:11\n    |\n LL |     match &e {\n    |           ^^ cannot move out of borrowed content\n@@ -773,13 +773,13 @@ LL |         &Either::One(_t)\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:314:22\n+  --> $DIR/simple.rs:314:22\n    |\n LL |         &Either::One(_t)\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:320:11\n+  --> $DIR/simple.rs:320:11\n    |\n LL |     match &e {\n    |           ^^ cannot move out of borrowed content\n@@ -791,13 +791,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:322:22\n+  --> $DIR/simple.rs:322:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:327:11\n+  --> $DIR/simple.rs:327:11\n    |\n LL |     match &e {\n    |           ^^ cannot move out of borrowed content\n@@ -809,13 +809,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:329:22\n+  --> $DIR/simple.rs:329:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:335:22\n+  --> $DIR/simple.rs:335:22\n    |\n LL |     let &mut X(_t) = &mut xm;\n    |         ----------   ^^^^^^^ cannot move out of borrowed content\n@@ -824,13 +824,13 @@ LL |     let &mut X(_t) = &mut xm;\n    |         help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:335:16\n+  --> $DIR/simple.rs:335:16\n    |\n LL |     let &mut X(_t) = &mut xm;\n    |                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:339:35\n+  --> $DIR/simple.rs:339:35\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n    |            --------------------   ^^^^^^^ cannot move out of borrowed content\n@@ -839,13 +839,13 @@ LL |     if let &mut Either::One(_t) = &mut em { }\n    |            help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:339:29\n+  --> $DIR/simple.rs:339:29\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n    |                             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:343:38\n+  --> $DIR/simple.rs:343:38\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n    |               --------------------   ^^^^^^^ cannot move out of borrowed content\n@@ -854,13 +854,13 @@ LL |     while let &mut Either::One(_t) = &mut em { }\n    |               help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:343:32\n+  --> $DIR/simple.rs:343:32\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n    |                                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:347:11\n+  --> $DIR/simple.rs:347:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -872,13 +872,13 @@ LL |         &mut Either::One(_t)\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:349:26\n+  --> $DIR/simple.rs:349:26\n    |\n LL |         &mut Either::One(_t)\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:355:11\n+  --> $DIR/simple.rs:355:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -890,13 +890,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:357:26\n+  --> $DIR/simple.rs:357:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:362:11\n+  --> $DIR/simple.rs:362:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -908,13 +908,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:364:26\n+  --> $DIR/simple.rs:364:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:369:11\n+  --> $DIR/simple.rs:369:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -926,304 +926,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:371:26\n+  --> $DIR/simple.rs:371:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:379:27\n-   |\n-LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |         ---------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |         |   |      |\n-   |         |   |      ...and here\n-   |         |   data moved here\n-   |         help: consider removing the `&`: `(X(_t), X(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:379:13\n-   |\n-LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |             ^^     ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:383:50\n-   |\n-LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |            -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |            |             |                |\n-   |            |             |                ...and here\n-   |            |             data moved here\n-   |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:383:26\n-   |\n-LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                          ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:387:53\n-   |\n-LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |               -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |               |             |                |\n-   |               |             |                ...and here\n-   |               |             data moved here\n-   |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:387:29\n-   |\n-LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                             ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:391:11\n-   |\n-LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       --               -- ...and here\n-   |                       |\n-   |                       data moved here\n-...\n-LL |         &(Either::Two(_t), Either::One(_u)) => (),\n-   |                       -- ...and here   -- ...and here\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:393:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n-...\n-LL |         &(Either::Two(_t), Either::One(_u)) => (),\n-   |                       ^^               ^^\n-help: consider removing the `&`\n-   |\n-LL |         (Either::One(_t), Either::Two(_u)) => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider removing the `&`\n-   |\n-LL |         (Either::Two(_t), Either::One(_u)) => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:401:11\n-   |\n-LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &(Either::One(_t), Either::Two(_u))\n-   |         -----------------------------------\n-   |         |             |                |\n-   |         |             |                ...and here\n-   |         |             data moved here\n-   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:403:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u))\n-   |                       ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:410:11\n-   |\n-LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |         -----------------------------------\n-   |         |             |                |\n-   |         |             |                ...and here\n-   |         |             data moved here\n-   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:412:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:418:11\n-   |\n-LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |         -----------------------------------\n-   |         |             |                |\n-   |         |             |                ...and here\n-   |         |             data moved here\n-   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:420:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:431:31\n-   |\n-LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |         |       |      |\n-   |         |       |      ...and here\n-   |         |       data moved here\n-   |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:431:17\n-   |\n-LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |                 ^^     ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:435:54\n-   |\n-LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |            ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |            |                 |                |\n-   |            |                 |                ...and here\n-   |            |                 data moved here\n-   |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:435:30\n-   |\n-LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                              ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:439:57\n-   |\n-LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |               ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |               |                 |                |\n-   |               |                 |                ...and here\n-   |               |                 data moved here\n-   |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:439:33\n-   |\n-LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                                 ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:443:11\n-   |\n-LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           --               -- ...and here\n-   |                           |\n-   |                           data moved here\n-...\n-LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n-   |                           -- ...and here   -- ...and here\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:445:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n-...\n-LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n-   |                           ^^               ^^\n-help: consider removing the `&mut`\n-   |\n-LL |         (Either::One(_t), Either::Two(_u)) => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider removing the `&mut`\n-   |\n-LL |         (Either::Two(_t), Either::One(_u)) => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:453:11\n-   |\n-LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &mut (Either::One(_t), Either::Two(_u))\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:455:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u))\n-   |                           ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:462:11\n-   |\n-LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:464:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:470:11\n-   |\n-LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:472:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:478:11\n-   |\n-LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-LL |         //~^ ERROR cannot move\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:480:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:214:11\n+  --> $DIR/simple.rs:214:11\n    |\n LL |     fn f1(&X(_t): &X) { }\n    |           ^^^--^\n@@ -1233,13 +942,13 @@ LL |     fn f1(&X(_t): &X) { }\n    |           help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:214:14\n+  --> $DIR/simple.rs:214:14\n    |\n LL |     fn f1(&X(_t): &X) { }\n    |              ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:261:11\n+  --> $DIR/simple.rs:261:11\n    |\n LL |     fn f2(&mut X(_t): &mut X) { }\n    |           ^^^^^^^--^\n@@ -1249,13 +958,13 @@ LL |     fn f2(&mut X(_t): &mut X) { }\n    |           help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:261:18\n+  --> $DIR/simple.rs:261:18\n    |\n LL |     fn f2(&mut X(_t): &mut X) { }\n    |                  ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:281:11\n+  --> $DIR/simple.rs:281:11\n    |\n LL |     fn f3((&X(_t),): (&X,)) { }\n    |           ^^^^--^^^\n@@ -1264,13 +973,13 @@ LL |     fn f3((&X(_t),): (&X,)) { }\n    |           cannot move out of borrowed content\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:281:15\n+  --> $DIR/simple.rs:281:15\n    |\n LL |     fn f3((&X(_t),): (&X,)) { }\n    |               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:295:11\n+  --> $DIR/simple.rs:295:11\n    |\n LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |           ^^^^^^^^--^^^\n@@ -1279,45 +988,11 @@ LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |           cannot move out of borrowed content\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:295:19\n+  --> $DIR/simple.rs:295:19\n    |\n LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |                   ^^\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:426:11\n-   |\n-LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n-   |           ^^^^--^^^^^--^^\n-   |           |   |      |\n-   |           |   |      ...and here\n-   |           |   data moved here\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `&`: `(X(_t), X(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:426:15\n-   |\n-LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n-   |               ^^     ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dont-suggest-ref.rs:486:11\n-   |\n-LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n-   |           ^^^^^^^^--^^^^^--^^\n-   |           |       |      |\n-   |           |       |      ...and here\n-   |           |       data moved here\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:486:19\n-   |\n-LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n-   |                   ^^     ^^\n-\n-error: aborting due to 77 previous errors\n+error: aborting due to 60 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}]}