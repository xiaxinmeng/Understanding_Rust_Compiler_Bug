{"sha": "2f5a77658baafad1fe3551971ebbcdce87760847", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNWE3NzY1OGJhYWZhZDFmZTM1NTE5NzFlYmJjZGNlODc3NjA4NDc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:17:35Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:58:03Z"}, "message": "Substitution::single -> from1", "tree": {"sha": "940789c56348e2994d8941136fbc2f5dfc90fbc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/940789c56348e2994d8941136fbc2f5dfc90fbc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f5a77658baafad1fe3551971ebbcdce87760847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5a77658baafad1fe3551971ebbcdce87760847", "html_url": "https://github.com/rust-lang/rust/commit/2f5a77658baafad1fe3551971ebbcdce87760847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f5a77658baafad1fe3551971ebbcdce87760847/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788533d38091472ed05c8b55fd7a2002c49f4eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/788533d38091472ed05c8b55fd7a2002c49f4eb7", "html_url": "https://github.com/rust-lang/rust/commit/788533d38091472ed05c8b55fd7a2002c49f4eb7"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "82ab9c5fe5346d2ec3d73caeb0f565e3bfacf7d2", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=2f5a77658baafad1fe3551971ebbcdce87760847", "patch": "@@ -180,7 +180,8 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.infer_expr(*body, &Expectation::none());\n                 let impl_trait_id = crate::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, *body);\n                 let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n-                TyKind::OpaqueType(opaque_ty_id, Substitution::single(inner_ty)).intern(&Interner)\n+                TyKind::OpaqueType(opaque_ty_id, Substitution::from1(&Interner, inner_ty))\n+                    .intern(&Interner)\n             }\n             Expr::Loop { body, label } => {\n                 self.breakables.push(BreakableContext {\n@@ -266,7 +267,8 @@ impl<'a> InferenceContext<'a> {\n                 .intern(&Interner);\n                 let closure_id = self.db.intern_closure((self.owner, tgt_expr)).into();\n                 let closure_ty =\n-                    TyKind::Closure(closure_id, Substitution::single(sig_ty)).intern(&Interner);\n+                    TyKind::Closure(closure_id, Substitution::from1(&Interner, sig_ty))\n+                        .intern(&Interner);\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to"}, {"sha": "6d5123cf1baac7c0631a3a8b051e1b784dd484a7", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=2f5a77658baafad1fe3551971ebbcdce87760847", "patch": "@@ -31,7 +31,6 @@ mod test_db;\n use std::sync::Arc;\n \n use itertools::Itertools;\n-use smallvec::SmallVec;\n \n use base_db::salsa;\n use hir_def::{\n@@ -77,14 +76,6 @@ pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n pub type FnSig = chalk_ir::FnSig<Interner>;\n \n impl Substitution {\n-    pub fn single(ty: Ty) -> Substitution {\n-        Substitution::intern({\n-            let mut v = SmallVec::new();\n-            v.push(ty.cast(&Interner));\n-            v\n-        })\n-    }\n-\n     pub fn prefix(&self, n: usize) -> Substitution {\n         Substitution::intern(self.interned()[..std::cmp::min(self.len(&Interner), n)].into())\n     }"}, {"sha": "075e82f4b3619250214b84097b4ca1e76e2f8dbf", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=2f5a77658baafad1fe3551971ebbcdce87760847", "patch": "@@ -220,7 +220,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     let impl_bound = WhereClause::Implemented(TraitRef {\n                         trait_id: to_chalk_trait_id(future_trait),\n                         // Self type as the first parameter.\n-                        substitution: Substitution::single(\n+                        substitution: Substitution::from1(\n+                            &Interner,\n                             TyKind::BoundVar(BoundVar {\n                                 debruijn: DebruijnIndex::INNERMOST,\n                                 index: 0,\n@@ -232,7 +233,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                         alias: AliasTy::Projection(ProjectionTy {\n                             associated_ty_id: to_assoc_type_id(future_output),\n                             // Self type as the first parameter.\n-                            substitution: Substitution::single(\n+                            substitution: Substitution::from1(\n+                                &Interner,\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n                                     .intern(&Interner),\n                             ),"}, {"sha": "6dffda1ca2a0c685bbf95d288df075fa9059b729", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5a77658baafad1fe3551971ebbcdce87760847/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=2f5a77658baafad1fe3551971ebbcdce87760847", "patch": "@@ -4,7 +4,7 @@\n use std::sync::Arc;\n \n use chalk_ir::{\n-    cast::{CastTo, Caster},\n+    cast::{Cast, CastTo, Caster},\n     BoundVar, Mutability, Scalar, TyVariableKind,\n };\n use smallvec::SmallVec;\n@@ -278,6 +278,14 @@ impl Substitution {\n         self.0.iter()\n     }\n \n+    pub fn from1(_interner: &Interner, ty: Ty) -> Substitution {\n+        Substitution::intern({\n+            let mut v = SmallVec::new();\n+            v.push(ty.cast(&Interner));\n+            v\n+        })\n+    }\n+\n     pub fn from_iter(\n         interner: &Interner,\n         elements: impl IntoIterator<Item = impl CastTo<GenericArg>>,"}]}