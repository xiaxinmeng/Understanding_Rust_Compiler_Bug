{"sha": "dcc64d113ccdd4ecfe33fb35267ef4533cfefb00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYzY0ZDExM2NjZGQ0ZWNmZTMzZmIzNTI2N2VmNDUzM2NmZWZiMDA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-12T13:05:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-12T13:05:55Z"}, "message": "Rollup merge of #26974 - tshepang:trailing-comma, r=Gankro", "tree": {"sha": "24c40263925189c1d23cdb24c2fb30a35d3e6929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24c40263925189c1d23cdb24c2fb30a35d3e6929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcc64d113ccdd4ecfe33fb35267ef4533cfefb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc64d113ccdd4ecfe33fb35267ef4533cfefb00", "html_url": "https://github.com/rust-lang/rust/commit/dcc64d113ccdd4ecfe33fb35267ef4533cfefb00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcc64d113ccdd4ecfe33fb35267ef4533cfefb00/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcc0b8cec7b818644234e9574f135a366fd0391d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc0b8cec7b818644234e9574f135a366fd0391d", "html_url": "https://github.com/rust-lang/rust/commit/bcc0b8cec7b818644234e9574f135a366fd0391d"}, {"sha": "65591595a03ee9f85ba966a91546f254775b2708", "url": "https://api.github.com/repos/rust-lang/rust/commits/65591595a03ee9f85ba966a91546f254775b2708", "html_url": "https://github.com/rust-lang/rust/commit/65591595a03ee9f85ba966a91546f254775b2708"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "9ccba7ad78d45a785278ab64b02e34300812ae23", "filename": "src/libcore/option.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dcc64d113ccdd4ecfe33fb35267ef4533cfefb00/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc64d113ccdd4ecfe33fb35267ef4533cfefb00/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=dcc64d113ccdd4ecfe33fb35267ef4533cfefb00", "patch": "@@ -46,7 +46,7 @@\n //!     // The division was valid\n //!     Some(x) => println!(\"Result: {}\", x),\n //!     // The division was invalid\n-//!     None    => println!(\"Cannot divide by 0\")\n+//!     None    => println!(\"Cannot divide by 0\"),\n //! }\n //! ```\n //!\n@@ -75,7 +75,7 @@\n //! fn check_optional(optional: &Option<Box<i32>>) {\n //!     match *optional {\n //!         Some(ref p) => println!(\"have value {}\", p),\n-//!         None => println!(\"have no value\")\n+//!         None => println!(\"have no value\"),\n //!     }\n //! }\n //! ```\n@@ -95,13 +95,13 @@\n //! // Take a reference to the contained string\n //! match msg {\n //!     Some(ref m) => println!(\"{}\", *m),\n-//!     None => ()\n+//!     None => (),\n //! }\n //!\n //! // Remove the contained string, destroying the Option\n //! let unwrapped_msg = match msg {\n //!     Some(m) => m,\n-//!     None => \"default message\"\n+//!     None => \"default message\",\n //! };\n //! ```\n //!\n@@ -137,7 +137,7 @@\n //!\n //! match name_of_biggest_animal {\n //!     Some(name) => println!(\"the biggest animal is {}\", name),\n-//!     None => println!(\"there are no animals :(\")\n+//!     None => println!(\"there are no animals :(\"),\n //! }\n //! ```\n \n@@ -198,7 +198,7 @@ impl<T> Option<T> {\n     pub fn is_some(&self) -> bool {\n         match *self {\n             Some(_) => true,\n-            None => false\n+            None => false,\n         }\n     }\n \n@@ -244,7 +244,7 @@ impl<T> Option<T> {\n     pub fn as_ref<'r>(&'r self) -> Option<&'r T> {\n         match *self {\n             Some(ref x) => Some(x),\n-            None => None\n+            None => None,\n         }\n     }\n \n@@ -265,7 +265,7 @@ impl<T> Option<T> {\n     pub fn as_mut<'r>(&'r mut self) -> Option<&'r mut T> {\n         match *self {\n             Some(ref mut x) => Some(x),\n-            None => None\n+            None => None,\n         }\n     }\n \n@@ -376,7 +376,7 @@ impl<T> Option<T> {\n     pub fn unwrap_or(self, def: T) -> T {\n         match self {\n             Some(x) => x,\n-            None => def\n+            None => def,\n         }\n     }\n \n@@ -394,7 +394,7 @@ impl<T> Option<T> {\n     pub fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n         match self {\n             Some(x) => x,\n-            None => f()\n+            None => f(),\n         }\n     }\n \n@@ -420,7 +420,7 @@ impl<T> Option<T> {\n     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n         match self {\n             Some(x) => Some(f(x)),\n-            None => None\n+            None => None,\n         }\n     }\n \n@@ -464,7 +464,7 @@ impl<T> Option<T> {\n     pub fn map_or_else<U, D: FnOnce() -> U, F: FnOnce(T) -> U>(self, default: D, f: F) -> U {\n         match self {\n             Some(t) => f(t),\n-            None => default()\n+            None => default(),\n         }\n     }\n \n@@ -637,7 +637,7 @@ impl<T> Option<T> {\n     pub fn or(self, optb: Option<T>) -> Option<T> {\n         match self {\n             Some(_) => self,\n-            None => optb\n+            None => optb,\n         }\n     }\n \n@@ -659,7 +659,7 @@ impl<T> Option<T> {\n     pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n         match self {\n             Some(_) => self,\n-            None => f()\n+            None => f(),\n         }\n     }\n \n@@ -736,7 +736,7 @@ impl<T: Default> Option<T> {\n     pub fn unwrap_or_default(self) -> T {\n         match self {\n             Some(x) => x,\n-            None => Default::default()\n+            None => Default::default(),\n         }\n     }\n }"}]}