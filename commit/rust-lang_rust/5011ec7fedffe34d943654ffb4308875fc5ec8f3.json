{"sha": "5011ec7fedffe34d943654ffb4308875fc5ec8f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMTFlYzdmZWRmZmUzNGQ5NDM2NTRmZmI0MzA4ODc1ZmM1ZWM4ZjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-11T19:00:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-09T01:04:24Z"}, "message": "move attr meta grammar to parse::validate_atr + ast_validation", "tree": {"sha": "e3fd7fb355643dd09c242a1020ad0eae9580d974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3fd7fb355643dd09c242a1020ad0eae9580d974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5011ec7fedffe34d943654ffb4308875fc5ec8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5011ec7fedffe34d943654ffb4308875fc5ec8f3", "html_url": "https://github.com/rust-lang/rust/commit/5011ec7fedffe34d943654ffb4308875fc5ec8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5011ec7fedffe34d943654ffb4308875fc5ec8f3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e346646e93cc243567e27bb0f4e8716d56ad1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e346646e93cc243567e27bb0f4e8716d56ad1f1", "html_url": "https://github.com/rust-lang/rust/commit/9e346646e93cc243567e27bb0f4e8716d56ad1f1"}], "stats": {"total": 266, "additions": 142, "deletions": 124}, "files": [{"sha": "a45035f123f566348af2de243a3d11b9277b2be3", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -15,6 +15,7 @@ use syntax::ast::*;\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n use syntax::feature_gate::is_builtin_attr;\n+use syntax::parse::validate_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n@@ -369,6 +370,10 @@ fn validate_generics_order<'a>(\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n+    fn visit_attribute(&mut self, attr: &Attribute) {\n+        validate_attr::check_meta(&self.session.parse_sess, attr);\n+    }\n+\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match &expr.kind {\n             ExprKind::Closure(_, _, _, fn_decl, _, _) => {"}, {"sha": "3ac9abb72236195343b136fe56efa61e77b96ca0", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -1,7 +1,6 @@\n //! Parsing and validation of builtin attributes\n \n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::feature_gate::{Features, GatedCfg};\n use crate::print::pprust;\n use crate::sess::ParseSess;\n@@ -36,7 +35,7 @@ impl AttributeTemplate {\n     }\n \n     /// Checks that the given meta-item is compatible with this template.\n-    fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n+    pub fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n         match meta_item_kind {\n             ast::MetaItemKind::Word => self.word,\n             ast::MetaItemKind::List(..) => self.list.is_some(),\n@@ -938,69 +937,3 @@ pub fn find_transparency(\n     let fallback = if is_legacy { Transparency::SemiTransparent } else { Transparency::Opaque };\n     (transparency.map_or(fallback, |t| t.0), error)\n }\n-\n-pub fn check_builtin_attribute(\n-    sess: &ParseSess, attr: &ast::Attribute, name: Symbol, template: AttributeTemplate\n-) {\n-    // Some special attributes like `cfg` must be checked\n-    // before the generic check, so we skip them here.\n-    let should_skip = |name| name == sym::cfg;\n-    // Some of previously accepted forms were used in practice,\n-    // report them as warnings for now.\n-    let should_warn = |name| name == sym::doc || name == sym::ignore ||\n-                             name == sym::inline || name == sym::link ||\n-                             name == sym::test || name == sym::bench;\n-\n-    match attr.parse_meta(sess) {\n-        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n-            let error_msg = format!(\"malformed `{}` attribute input\", name);\n-            let mut msg = \"attribute must be of the form \".to_owned();\n-            let mut suggestions = vec![];\n-            let mut first = true;\n-            if template.word {\n-                first = false;\n-                let code = format!(\"#[{}]\", name);\n-                msg.push_str(&format!(\"`{}`\", &code));\n-                suggestions.push(code);\n-            }\n-            if let Some(descr) = template.list {\n-                if !first {\n-                    msg.push_str(\" or \");\n-                }\n-                first = false;\n-                let code = format!(\"#[{}({})]\", name, descr);\n-                msg.push_str(&format!(\"`{}`\", &code));\n-                suggestions.push(code);\n-            }\n-            if let Some(descr) = template.name_value_str {\n-                if !first {\n-                    msg.push_str(\" or \");\n-                }\n-                let code = format!(\"#[{} = \\\"{}\\\"]\", name, descr);\n-                msg.push_str(&format!(\"`{}`\", &code));\n-                suggestions.push(code);\n-            }\n-            if should_warn(name) {\n-                sess.buffer_lint(\n-                    BufferedEarlyLintId::IllFormedAttributeInput,\n-                    meta.span,\n-                    ast::CRATE_NODE_ID,\n-                    &msg,\n-                );\n-            } else {\n-                sess.span_diagnostic.struct_span_err(meta.span, &error_msg)\n-                    .span_suggestions(\n-                        meta.span,\n-                        if suggestions.len() == 1 {\n-                            \"must be of the form\"\n-                        } else {\n-                            \"the following are the possible correct uses\"\n-                        },\n-                        suggestions.into_iter(),\n-                        Applicability::HasPlaceholders,\n-                    ).emit();\n-            }\n-        }\n-        Err(mut err) => err.emit(),\n-    }\n-}"}, {"sha": "2c011b0647004fd5157330e74db54fb86868e2f8", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -14,17 +14,13 @@ use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned};\n-use crate::parse;\n use crate::token::{self, Token};\n use crate::ptr::P;\n-use crate::sess::ParseSess;\n use crate::symbol::{sym, Symbol};\n use crate::ThinVec;\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use crate::GLOBALS;\n \n-use errors::PResult;\n-\n use log::debug;\n use syntax_pos::Span;\n \n@@ -328,21 +324,6 @@ impl Attribute {\n                 Some(mk_name_value_item_str(Ident::new(sym::doc, self.span), comment, self.span)),\n         }\n     }\n-\n-    pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n-        match self.kind {\n-            AttrKind::Normal(ref item) => {\n-                Ok(MetaItem {\n-                    path: item.path.clone(),\n-                    kind: parse::parse_in_attr(sess, self, |parser| parser.parse_meta_item_kind())?,\n-                    span: self.span,\n-                })\n-            }\n-            AttrKind::DocComment(comment) => {\n-                Ok(mk_name_value_item_str(Ident::new(sym::doc, self.span), comment, self.span))\n-            }\n-        }\n-    }\n }\n \n /* Constructors */"}, {"sha": "a460fc2b99af3b8978792ab42d1af401220fecf1", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -10,7 +10,7 @@ use crate::attr;\n use crate::ast;\n use crate::edition::Edition;\n use crate::mut_visit::*;\n-use crate::parse;\n+use crate::parse::{self, validate_attr};\n use crate::ptr::P;\n use crate::sess::ParseSess;\n use crate::symbol::sym;\n@@ -168,7 +168,7 @@ impl<'a> StripUnconfigured<'a> {\n                 true\n             };\n \n-            let meta_item = match attr.parse_meta(self.sess) {\n+            let meta_item = match validate_attr::parse_meta(self.sess, attr) {\n                 Ok(meta_item) => meta_item,\n                 Err(mut err) => { err.emit(); return true; }\n             };"}, {"sha": "4742e01d7f4eac2e3005bd266234d306e126dbbe", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -3,18 +3,14 @@ use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n-use crate::ast::{\n-    self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n-    PatKind, RangeEnd, VariantData,\n-};\n-use crate::attr::{self, check_builtin_attribute};\n+use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n+use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n+use crate::attr;\n use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n-use crate::token;\n use crate::sess::ParseSess;\n use crate::symbol::{Symbol, sym};\n-use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n@@ -331,19 +327,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n             gate_feature_fn!(self, has_feature, attr.span, name, descr, GateStrength::Hard);\n         }\n-        // Check input tokens for built-in and key-value attributes.\n-        match attr_info {\n-            // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n-            Some((name, _, template, _)) if name != sym::rustc_dummy =>\n-                check_builtin_attribute(self.parse_sess, attr, name, template),\n-            _ => if let Some(TokenTree::Token(token)) =\n-                    attr.get_normal_item().tokens.trees().next() {\n-                if token == token::Eq {\n-                    // All key-value attributes are restricted to meta-item syntax.\n-                    attr.parse_meta(self.parse_sess).map_err(|mut err| err.emit()).ok();\n-                }\n-            }\n-        }\n         // Check unstable flavors of the `#[doc]` attribute.\n         if attr.check_name(sym::doc) {\n             for nested_meta in attr.meta_item_list().unwrap_or_default() {"}, {"sha": "9155cbe5dd8e388871f997c022f5800ab23737b2", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -23,6 +23,7 @@ mod tests;\n #[macro_use]\n pub mod parser;\n pub mod lexer;\n+pub mod validate_attr;\n \n #[derive(Clone)]\n pub struct Directory<'a> {"}, {"sha": "6cc8a1ec33e50a852407a988d26e0bbcb3134be0", "filename": "src/libsyntax/parse/validate_attr.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fparse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax%2Fparse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fvalidate_attr.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -0,0 +1,112 @@\n+//! Meta-syntax validation logic of attributes for post-expansion.\n+\n+use crate::ast::{self, Attribute, AttrKind, Ident, MetaItem};\n+use crate::attr::{AttributeTemplate, mk_name_value_item_str};\n+use crate::sess::ParseSess;\n+use crate::feature_gate::BUILTIN_ATTRIBUTE_MAP;\n+use crate::early_buffered_lints::BufferedEarlyLintId;\n+use crate::token;\n+use crate::tokenstream::TokenTree;\n+\n+use errors::{PResult, Applicability};\n+use syntax_pos::{Symbol, sym};\n+\n+pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n+    let attr_info =\n+        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+\n+    // Check input tokens for built-in and key-value attributes.\n+    match attr_info {\n+        // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n+        Some((name, _, template, _)) if name != sym::rustc_dummy =>\n+            check_builtin_attribute(sess, attr, name, template),\n+        _ => if let Some(TokenTree::Token(token)) = attr.get_normal_item().tokens.trees().next() {\n+            if token == token::Eq {\n+                // All key-value attributes are restricted to meta-item syntax.\n+                parse_meta(sess, attr).map_err(|mut err| err.emit()).ok();\n+            }\n+        }\n+    }\n+}\n+\n+pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, MetaItem> {\n+    Ok(match attr.kind {\n+        AttrKind::Normal(ref item) => MetaItem {\n+            path: item.path.clone(),\n+            kind: super::parse_in_attr(sess, attr, |p| p.parse_meta_item_kind())?,\n+            span: attr.span,\n+        },\n+        AttrKind::DocComment(comment) => {\n+            mk_name_value_item_str(Ident::new(sym::doc, attr.span), comment, attr.span)\n+        }\n+    })\n+}\n+\n+pub fn check_builtin_attribute(\n+    sess: &ParseSess,\n+    attr: &Attribute,\n+    name: Symbol,\n+    template: AttributeTemplate,\n+) {\n+    // Some special attributes like `cfg` must be checked\n+    // before the generic check, so we skip them here.\n+    let should_skip = |name| name == sym::cfg;\n+    // Some of previously accepted forms were used in practice,\n+    // report them as warnings for now.\n+    let should_warn = |name| name == sym::doc || name == sym::ignore ||\n+                             name == sym::inline || name == sym::link ||\n+                             name == sym::test || name == sym::bench;\n+\n+    match parse_meta(sess, attr) {\n+        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n+            let error_msg = format!(\"malformed `{}` attribute input\", name);\n+            let mut msg = \"attribute must be of the form \".to_owned();\n+            let mut suggestions = vec![];\n+            let mut first = true;\n+            if template.word {\n+                first = false;\n+                let code = format!(\"#[{}]\", name);\n+                msg.push_str(&format!(\"`{}`\", &code));\n+                suggestions.push(code);\n+            }\n+            if let Some(descr) = template.list {\n+                if !first {\n+                    msg.push_str(\" or \");\n+                }\n+                first = false;\n+                let code = format!(\"#[{}({})]\", name, descr);\n+                msg.push_str(&format!(\"`{}`\", &code));\n+                suggestions.push(code);\n+            }\n+            if let Some(descr) = template.name_value_str {\n+                if !first {\n+                    msg.push_str(\" or \");\n+                }\n+                let code = format!(\"#[{} = \\\"{}\\\"]\", name, descr);\n+                msg.push_str(&format!(\"`{}`\", &code));\n+                suggestions.push(code);\n+            }\n+            if should_warn(name) {\n+                sess.buffer_lint(\n+                    BufferedEarlyLintId::IllFormedAttributeInput,\n+                    meta.span,\n+                    ast::CRATE_NODE_ID,\n+                    &msg,\n+                );\n+            } else {\n+                sess.span_diagnostic.struct_span_err(meta.span, &error_msg)\n+                    .span_suggestions(\n+                        meta.span,\n+                        if suggestions.len() == 1 {\n+                            \"must be of the form\"\n+                        } else {\n+                            \"the following are the possible correct uses\"\n+                        },\n+                        suggestions.into_iter(),\n+                        Applicability::HasPlaceholders,\n+                    ).emit();\n+            }\n+        }\n+        Err(mut err) => err.emit(),\n+    }\n+}"}, {"sha": "d0b60fa308dd6969635125bdd8b9e26fc9a1aeaa", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -14,6 +14,7 @@ use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feat\n use syntax::mut_visit::*;\n use syntax::parse::DirectoryOwnership;\n use syntax::parse::parser::Parser;\n+use syntax::parse::validate_attr;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n@@ -640,7 +641,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     self.parse_ast_fragment(tok_result, fragment_kind, &item.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyAttr(expander) => {\n-                    match attr.parse_meta(self.cx.parse_sess) {\n+                    match validate_attr::parse_meta(self.cx.parse_sess, &attr) {\n                         Ok(meta) => {\n                             let item = expander.expand(self.cx, span, &meta, item);\n                             fragment_kind.expect_from_annotatables(item)\n@@ -1031,6 +1032,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         let features = self.cx.ecfg.features.unwrap();\n         for attr in attrs.iter() {\n             feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n+            validate_attr::check_meta(self.cx.parse_sess, attr);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded\n             if attr.has_name(sym::derive) {"}, {"sha": "c8f0eb4ad25fc9e81c1e7d104af1d2466d12475f", "filename": "src/libsyntax_ext/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax_ext%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Flibsyntax_ext%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Futil.rs?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -1,11 +1,12 @@\n use syntax_pos::Symbol;\n use syntax::ast::MetaItem;\n-use syntax::attr::{check_builtin_attribute, AttributeTemplate};\n+use syntax::attr::AttributeTemplate;\n+use syntax::parse::validate_attr;\n use syntax_expand::base::ExtCtxt;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment.\n     let template = AttributeTemplate::only_word();\n     let attr = ecx.attribute(meta_item.clone());\n-    check_builtin_attribute(ecx.parse_sess, &attr, name, template);\n+    validate_attr::check_builtin_attribute(ecx.parse_sess, &attr, name, template);\n }"}, {"sha": "021e7cad09b695c7e1bc72cece3b99d61431cbe9", "filename": "src/test/ui/proc-macro/attribute.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5011ec7fedffe34d943654ffb4308875fc5ec8f3/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr?ref=5011ec7fedffe34d943654ffb4308875fc5ec8f3", "patch": "@@ -1,3 +1,15 @@\n+error: malformed `proc_macro_derive` attribute input\n+  --> $DIR/attribute.rs:9:1\n+   |\n+LL | #[proc_macro_derive]\n+   | ^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n+\n+error: malformed `proc_macro_derive` attribute input\n+  --> $DIR/attribute.rs:12:1\n+   |\n+LL | #[proc_macro_derive = \"\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n+\n error: attribute must have either one or two arguments\n   --> $DIR/attribute.rs:15:1\n    |\n@@ -88,17 +100,5 @@ error: `self` cannot be a name of derive helper attribute\n LL | #[proc_macro_derive(d17, attributes(self))]\n    |                                     ^^^^\n \n-error: malformed `proc_macro_derive` attribute input\n-  --> $DIR/attribute.rs:9:1\n-   |\n-LL | #[proc_macro_derive]\n-   | ^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n-\n-error: malformed `proc_macro_derive` attribute input\n-  --> $DIR/attribute.rs:12:1\n-   |\n-LL | #[proc_macro_derive = \"\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n-\n error: aborting due to 17 previous errors\n "}]}