{"sha": "cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "node_id": "C_kwDOAAsO6NoAKGNiMzkwNzM1YjAzYWE0NDIyOWZmMjg1OGJlOGZlZGJkN2IwY2U3Y2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T22:15:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T22:15:30Z"}, "message": "Auto merge of #96838 - tmiasko:lazy-switch-sources, r=oli-obk\n\nOptimize switch sources representation and usage\n\n* Avoid constructing switch sources unless necessary - switch sources are used by backward analysis with a custom switch int edge effects, but are otherwise unnecessarily computed.\n* Use sparse representation of switch sources to avoid quadratic space overhead.", "tree": {"sha": "82f01c52f9ff24109fddbfb22f1e34059824d8ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82f01c52f9ff24109fddbfb22f1e34059824d8ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "html_url": "https://github.com/rust-lang/rust/commit/cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb390735b03aa44229ff2858be8fedbd7b0ce7cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88860d5474a32f507dde8fba8df35fd2064f11b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/88860d5474a32f507dde8fba8df35fd2064f11b9", "html_url": "https://github.com/rust-lang/rust/commit/88860d5474a32f507dde8fba8df35fd2064f11b9"}, {"sha": "2be012a0c664bf1ee90af0e5cac9a3e3e24f4666", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be012a0c664bf1ee90af0e5cac9a3e3e24f4666", "html_url": "https://github.com/rust-lang/rust/commit/2be012a0c664bf1ee90af0e5cac9a3e3e24f4666"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "2c97c7704e77dbc5d7452218b899a1d23c8adb40", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb390735b03aa44229ff2858be8fedbd7b0ce7cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb390735b03aa44229ff2858be8fedbd7b0ce7cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "patch": "@@ -580,6 +580,8 @@ impl<'tcx> Body<'tcx> {\n         self.predecessor_cache.compute(&self.basic_blocks)\n     }\n \n+    /// `body.switch_sources()[&(target, switch)]` returns a list of switch\n+    /// values that lead to a `target` block from a `switch` block.\n     #[inline]\n     pub fn switch_sources(&self) -> &SwitchSources {\n         self.switch_source_cache.compute(&self.basic_blocks)"}, {"sha": "adeeec70d1c0bb80b6af435db5519818b2d57eae", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb390735b03aa44229ff2858be8fedbd7b0ce7cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb390735b03aa44229ff2858be8fedbd7b0ce7cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "patch": "@@ -2,14 +2,15 @@\n //! `Predecessors`/`PredecessorCache`.\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::vec::IndexVec;\n use rustc_serialize as serialize;\n use smallvec::SmallVec;\n \n use crate::mir::{BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n \n-pub type SwitchSources = IndexVec<BasicBlock, IndexVec<BasicBlock, SmallVec<[Option<u128>; 1]>>>;\n+pub type SwitchSources = FxHashMap<(BasicBlock, BasicBlock), SmallVec<[Option<u128>; 1]>>;\n \n #[derive(Clone, Debug)]\n pub(super) struct SwitchSourceCache {\n@@ -35,19 +36,16 @@ impl SwitchSourceCache {\n         basic_blocks: &IndexVec<BasicBlock, BasicBlockData<'_>>,\n     ) -> &SwitchSources {\n         self.cache.get_or_init(|| {\n-            let mut switch_sources = IndexVec::from_elem(\n-                IndexVec::from_elem(SmallVec::new(), basic_blocks),\n-                basic_blocks,\n-            );\n+            let mut switch_sources: SwitchSources = FxHashMap::default();\n             for (bb, data) in basic_blocks.iter_enumerated() {\n                 if let Some(Terminator {\n                     kind: TerminatorKind::SwitchInt { targets, .. }, ..\n                 }) = &data.terminator\n                 {\n                     for (value, target) in targets.iter() {\n-                        switch_sources[target][bb].push(Some(value));\n+                        switch_sources.entry((target, bb)).or_default().push(Some(value));\n                     }\n-                    switch_sources[targets.otherwise()][bb].push(None);\n+                    switch_sources.entry((targets.otherwise(), bb)).or_default().push(None);\n                 }\n             }\n "}, {"sha": "18795128b8571ca0f56d3a70f0d9a93ec0a72936", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb390735b03aa44229ff2858be8fedbd7b0ce7cb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb390735b03aa44229ff2858be8fedbd7b0ce7cb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "patch": "@@ -269,9 +269,9 @@ impl Direction for Backward {\n \n                 mir::TerminatorKind::SwitchInt { targets: _, ref discr, switch_ty: _ } => {\n                     let mut applier = BackwardSwitchIntEdgeEffectsApplier {\n+                        body,\n                         pred,\n                         exit_state,\n-                        values: &body.switch_sources()[bb][pred],\n                         bb,\n                         propagate: &mut propagate,\n                         effects_applied: false,\n@@ -305,9 +305,9 @@ impl Direction for Backward {\n }\n \n struct BackwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n+    body: &'a mir::Body<'a>,\n     pred: BasicBlock,\n     exit_state: &'a mut D,\n-    values: &'a [Option<u128>],\n     bb: BasicBlock,\n     propagate: &'a mut F,\n \n@@ -322,7 +322,8 @@ where\n     fn apply(&mut self, mut apply_edge_effect: impl FnMut(&mut D, SwitchIntTarget)) {\n         assert!(!self.effects_applied);\n \n-        let targets = self.values.iter().map(|&value| SwitchIntTarget { value, target: self.bb });\n+        let values = &self.body.switch_sources()[&(self.bb, self.pred)];\n+        let targets = values.iter().map(|&value| SwitchIntTarget { value, target: self.bb });\n \n         let mut tmp = None;\n         for target in targets {"}]}