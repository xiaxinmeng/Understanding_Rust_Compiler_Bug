{"sha": "7c316090ebf216308b36ba1651bc6286b113ebd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMzE2MDkwZWJmMjE2MzA4YjM2YmExNjUxYmM2Mjg2YjExM2ViZDc=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2018-06-26T10:34:42Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2018-06-26T10:34:42Z"}, "message": "Deprecation of str::slice_uncheked(_mut)", "tree": {"sha": "85e967284398f9cf0be759fd42d1457e11a7945e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85e967284398f9cf0be759fd42d1457e11a7945e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c316090ebf216308b36ba1651bc6286b113ebd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c316090ebf216308b36ba1651bc6286b113ebd7", "html_url": "https://github.com/rust-lang/rust/commit/7c316090ebf216308b36ba1651bc6286b113ebd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c316090ebf216308b36ba1651bc6286b113ebd7/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "html_url": "https://github.com/rust-lang/rust/commit/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "2184a84ac7d4897cd547f07a31d548f617c60089", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=7c316090ebf216308b36ba1651bc6286b113ebd7", "patch": "@@ -266,11 +266,11 @@ impl str {\n         let mut result = String::new();\n         let mut last_end = 0;\n         for (start, part) in self.match_indices(from) {\n-            result.push_str(unsafe { self.slice_unchecked(last_end, start) });\n+            result.push_str(unsafe { self.get_unchecked(last_end..start) });\n             result.push_str(to);\n             last_end = start + part.len();\n         }\n-        result.push_str(unsafe { self.slice_unchecked(last_end, self.len()) });\n+        result.push_str(unsafe { self.get_unchecked(last_end..self.len()) });\n         result\n     }\n \n@@ -307,11 +307,11 @@ impl str {\n         let mut result = String::with_capacity(32);\n         let mut last_end = 0;\n         for (start, part) in self.match_indices(pat).take(count) {\n-            result.push_str(unsafe { self.slice_unchecked(last_end, start) });\n+            result.push_str(unsafe { self.get_unchecked(last_end..start) });\n             result.push_str(to);\n             last_end = start + part.len();\n         }\n-        result.push_str(unsafe { self.slice_unchecked(last_end, self.len()) });\n+        result.push_str(unsafe { self.get_unchecked(last_end..self.len()) });\n         result\n     }\n "}, {"sha": "7dbd86c003851c589575698d9ae7e67549c72250", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=7c316090ebf216308b36ba1651bc6286b113ebd7", "patch": "@@ -1222,7 +1222,7 @@ impl String {\n \n         while idx < len {\n             let ch = unsafe {\n-                self.slice_unchecked(idx, len).chars().next().unwrap()\n+                self.get_unchecked(idx..len).chars().next().unwrap()\n             };\n             let ch_len = ch.len_utf8();\n "}, {"sha": "210fc5fd5a6c25478e80a8f67dcfae1368a78d6e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=7c316090ebf216308b36ba1651bc6286b113ebd7", "patch": "@@ -1055,7 +1055,7 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n         if !self.finished && (self.allow_trailing_empty || self.end - self.start > 0) {\n             self.finished = true;\n             unsafe {\n-                let string = self.matcher.haystack().slice_unchecked(self.start, self.end);\n+                let string = self.matcher.haystack().get_unchecked(self.start..self.end);\n                 Some(string)\n             }\n         } else {\n@@ -1070,7 +1070,7 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n         let haystack = self.matcher.haystack();\n         match self.matcher.next_match() {\n             Some((a, b)) => unsafe {\n-                let elt = haystack.slice_unchecked(self.start, a);\n+                let elt = haystack.get_unchecked(self.start..a);\n                 self.start = b;\n                 Some(elt)\n             },\n@@ -1095,13 +1095,13 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n         let haystack = self.matcher.haystack();\n         match self.matcher.next_match_back() {\n             Some((a, b)) => unsafe {\n-                let elt = haystack.slice_unchecked(b, self.end);\n+                let elt = haystack.get_unchecked(b..self.end);\n                 self.end = a;\n                 Some(elt)\n             },\n             None => unsafe {\n                 self.finished = true;\n-                Some(haystack.slice_unchecked(self.start, self.end))\n+                Some(haystack.get_unchecked(self.start..self.end))\n             },\n         }\n     }\n@@ -1222,7 +1222,7 @@ impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n     #[inline]\n     fn next(&mut self) -> Option<(usize, &'a str)> {\n         self.0.next_match().map(|(start, end)| unsafe {\n-            (start, self.0.haystack().slice_unchecked(start, end))\n+            (start, self.0.haystack().get_unchecked(start..end))\n         })\n     }\n \n@@ -1231,7 +1231,7 @@ impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n         where P::Searcher: ReverseSearcher<'a>\n     {\n         self.0.next_match_back().map(|(start, end)| unsafe {\n-            (start, self.0.haystack().slice_unchecked(start, end))\n+            (start, self.0.haystack().get_unchecked(start..end))\n         })\n     }\n }\n@@ -1274,7 +1274,7 @@ impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n     fn next(&mut self) -> Option<&'a str> {\n         self.0.next_match().map(|(a, b)| unsafe {\n             // Indices are known to be on utf8 boundaries\n-            self.0.haystack().slice_unchecked(a, b)\n+            self.0.haystack().get_unchecked(a..b)\n         })\n     }\n \n@@ -1284,7 +1284,7 @@ impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n     {\n         self.0.next_match_back().map(|(a, b)| unsafe {\n             // Indices are known to be on utf8 boundaries\n-            self.0.haystack().slice_unchecked(a, b)\n+            self.0.haystack().get_unchecked(a..b)\n         })\n     }\n }\n@@ -2453,6 +2453,7 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(since = \"1.28.0\", reason = \"duplicates `get_unchecked`\")]\n     #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         (begin..end).get_unchecked(self)\n@@ -2483,6 +2484,7 @@ impl str {\n     /// * `begin` and `end` must be byte positions within the string slice.\n     /// * `begin` and `end` must lie on UTF-8 sequence boundaries.\n     #[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]\n+    #[rustc_deprecated(since = \"1.28.0\", reason = \"duplicates `get_unchecked`\")]\n     #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         (begin..end).get_unchecked_mut(self)\n@@ -2524,8 +2526,8 @@ impl str {\n         // is_char_boundary checks that the index is in [0, .len()]\n         if self.is_char_boundary(mid) {\n             unsafe {\n-                (self.slice_unchecked(0, mid),\n-                 self.slice_unchecked(mid, self.len()))\n+                (self.get_unchecked(0..mid),\n+                 self.get_unchecked(mid..self.len()))\n             }\n         } else {\n             slice_error_fail(self, 0, mid)\n@@ -3652,7 +3654,7 @@ impl str {\n         }\n         unsafe {\n             // Searcher is known to return valid indices\n-            self.slice_unchecked(i, j)\n+            self.get_unchecked(i..j)\n         }\n     }\n \n@@ -3691,7 +3693,7 @@ impl str {\n         }\n         unsafe {\n             // Searcher is known to return valid indices\n-            self.slice_unchecked(i, self.len())\n+            self.get_unchecked(i..self.len())\n         }\n     }\n \n@@ -3738,7 +3740,7 @@ impl str {\n         }\n         unsafe {\n             // Searcher is known to return valid indices\n-            self.slice_unchecked(0, j)\n+            self.get_unchecked(0..j)\n         }\n     }\n "}, {"sha": "5e63fa9ff354c60d1adcb892041a8077a323b956", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c316090ebf216308b36ba1651bc6286b113ebd7/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=7c316090ebf216308b36ba1651bc6286b113ebd7", "patch": "@@ -354,7 +354,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn next_back(&mut self) -> SearchStep {\n         let old_finger = self.finger_back;\n-        let slice = unsafe { self.haystack.slice_unchecked(self.finger, old_finger) };\n+        let slice = unsafe { self.haystack.get_unchecked(self.finger..old_finger) };\n         let mut iter = slice.chars();\n         let old_len = iter.iter.len();\n         if let Some(ch) = iter.next_back() {"}]}