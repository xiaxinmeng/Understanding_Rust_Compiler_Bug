{"sha": "05c300144cebbf3ddaff213b7485f669a9e0b660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YzMwMDE0NGNlYmJmM2RkYWZmMjEzYjc0ODVmNjY5YTllMGI2NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T05:39:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T05:39:01Z"}, "message": "Auto merge of #82440 - ssomers:btree_fix_casts, r=Mark-Simulacrum\n\nBTree: no longer define impossible casts\n\nCasts to leaf to internal only make sense when the original has a chance of being the thing it's cast to.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "13c535f7234460e1985c4bb23bf30fe97f9d250d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13c535f7234460e1985c4bb23bf30fe97f9d250d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c300144cebbf3ddaff213b7485f669a9e0b660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c300144cebbf3ddaff213b7485f669a9e0b660", "html_url": "https://github.com/rust-lang/rust/commit/05c300144cebbf3ddaff213b7485f669a9e0b660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c300144cebbf3ddaff213b7485f669a9e0b660/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b150b7a8f77874f26c617666f5608fe4a3e58df", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b150b7a8f77874f26c617666f5608fe4a3e58df", "html_url": "https://github.com/rust-lang/rust/commit/3b150b7a8f77874f26c617666f5608fe4a3e58df"}, {"sha": "794561c3917de0f050eae5c9f708e1c295a1e326", "url": "https://api.github.com/repos/rust-lang/rust/commits/794561c3917de0f050eae5c9f708e1c295a1e326", "html_url": "https://github.com/rust-lang/rust/commit/794561c3917de0f050eae5c9f708e1c295a1e326"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "eb8ec7cd2e47799f43e4c41e045e1f149768ffb3", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05c300144cebbf3ddaff213b7485f669a9e0b660/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c300144cebbf3ddaff213b7485f669a9e0b660/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=05c300144cebbf3ddaff213b7485f669a9e0b660", "patch": "@@ -460,7 +460,7 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n     }\n }\n \n-impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n+impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n     /// Unsafely asserts to the compiler the static information that this node is a `Leaf`.\n     unsafe fn cast_to_leaf_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n         debug_assert!(self.height == 0);\n@@ -472,7 +472,9 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(self.height > 0);\n         NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n     }\n+}\n \n+impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Temporarily takes out another, mutable reference to the same node. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n@@ -751,15 +753,17 @@ impl<BorrowType, K, V, NodeType, HandleType>\n     }\n }\n \n-impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n+impl<'a, K, V, Type> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, Type> {\n     /// Unsafely asserts to the compiler the static information that the handle's node is a `Leaf`.\n     pub unsafe fn cast_to_leaf_unchecked(\n         self,\n-    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, HandleType> {\n+    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, Type> {\n         let node = unsafe { self.node.cast_to_leaf_unchecked() };\n         Handle { node, idx: self.idx, _marker: PhantomData }\n     }\n+}\n \n+impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n     /// Temporarily takes out another, mutable handle on the same location. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n@@ -1509,15 +1513,13 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marke\n     }\n }\n \n-impl<BorrowType, K, V, HandleType>\n-    Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, HandleType>\n-{\n+impl<BorrowType, K, V, Type> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, Type> {\n     /// Checks whether the underlying node is an `Internal` node or a `Leaf` node.\n     pub fn force(\n         self,\n     ) -> ForceResult<\n-        Handle<NodeRef<BorrowType, K, V, marker::Leaf>, HandleType>,\n-        Handle<NodeRef<BorrowType, K, V, marker::Internal>, HandleType>,\n+        Handle<NodeRef<BorrowType, K, V, marker::Leaf>, Type>,\n+        Handle<NodeRef<BorrowType, K, V, marker::Internal>, Type>,\n     > {\n         match self.node.force() {\n             ForceResult::Leaf(node) => {"}]}