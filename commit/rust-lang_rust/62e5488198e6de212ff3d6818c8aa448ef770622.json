{"sha": "62e5488198e6de212ff3d6818c8aa448ef770622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZTU0ODgxOThlNmRlMjEyZmYzZDY4MThjOGFhNDQ4ZWY3NzA2MjI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-10T00:07:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-10T00:07:46Z"}, "message": "Rollup merge of #74200 - poliorcetics:std-panicking-unsafe-block-in-unsafe-fn, r=Mark-Simulacrum\n\nStd panicking unsafe block in unsafe fn\n\nPartial fix of #73904.\n\nThis encloses `unsafe` operations in `unsafe fn` in `libstd/ffi/panicking.rs`.\n\nI also made a two lines change to `libstd/thread/local.rs` to add the necessary `unsafe` block without breaking everything else.\n\n@rustbot modify labels: F-unsafe-block-in-unsafe-fn", "tree": {"sha": "ffe66ae42492772165a97f7d5209bba71d83079b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe66ae42492772165a97f7d5209bba71d83079b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62e5488198e6de212ff3d6818c8aa448ef770622", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMI/TCRBK7hj4Ov3rIwAAdHIIAKc2X/8Mvsh9KIHCAfoQ+YtK\nGTFyvUFwhB3GywuTsw+lQNnjCw3iQCJKzWocIbVASqScvRKwJMHWL+ctjt1Fw3Wy\n/j69UtvwXj1Z39yITdFFFtNXXYpP8MmjEpqXR1a1aX6ANJWhjfafTPJ+b/poD6yM\nWfyHm0Mm7AnV2wHA8u3EkNk5b5gxYjsx2DLoJA0ZBc4musQrhOZcnIJUn/DZAiC9\ninWuGCmOC19pBEkEoaj+X0DlQMqfhS2sTFVRV89rjrlkizTL/e3y4K+ZSHefImnu\nhbPnLnbtbxbOO7PxskATHzDYBOKNPbwqZJKX1wjZmuSLSPRAtdLealqFDI99Ep0=\n=iWC8\n-----END PGP SIGNATURE-----\n", "payload": "tree ffe66ae42492772165a97f7d5209bba71d83079b\nparent 18f3be7704a4ec7976fcd1272c728974243d29bd\nparent 82ccdab96cd8c146d9958c1050a2d2669dd367e8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597018066 +0900\ncommitter GitHub <noreply@github.com> 1597018066 +0900\n\nRollup merge of #74200 - poliorcetics:std-panicking-unsafe-block-in-unsafe-fn, r=Mark-Simulacrum\n\nStd panicking unsafe block in unsafe fn\n\nPartial fix of #73904.\n\nThis encloses `unsafe` operations in `unsafe fn` in `libstd/ffi/panicking.rs`.\n\nI also made a two lines change to `libstd/thread/local.rs` to add the necessary `unsafe` block without breaking everything else.\n\n@rustbot modify labels: F-unsafe-block-in-unsafe-fn\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62e5488198e6de212ff3d6818c8aa448ef770622", "html_url": "https://github.com/rust-lang/rust/commit/62e5488198e6de212ff3d6818c8aa448ef770622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62e5488198e6de212ff3d6818c8aa448ef770622/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f3be7704a4ec7976fcd1272c728974243d29bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f3be7704a4ec7976fcd1272c728974243d29bd", "html_url": "https://github.com/rust-lang/rust/commit/18f3be7704a4ec7976fcd1272c728974243d29bd"}, {"sha": "82ccdab96cd8c146d9958c1050a2d2669dd367e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ccdab96cd8c146d9958c1050a2d2669dd367e8", "html_url": "https://github.com/rust-lang/rust/commit/82ccdab96cd8c146d9958c1050a2d2669dd367e8"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "08d363a9a29649d1359f1de996bb8bcd64bc0661", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/62e5488198e6de212ff3d6818c8aa448ef770622/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e5488198e6de212ff3d6818c8aa448ef770622/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=62e5488198e6de212ff3d6818c8aa448ef770622", "patch": "@@ -7,6 +7,8 @@\n //! * Executing a panic up to doing the actual implementation\n //! * Shims around \"try\"\n \n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use core::panic::{BoxMeUp, Location, PanicInfo};\n \n use crate::any::Any;\n@@ -322,25 +324,48 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     let mut data = Data { f: ManuallyDrop::new(f) };\n \n     let data_ptr = &mut data as *mut _ as *mut u8;\n-    return if intrinsics::r#try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n-        Ok(ManuallyDrop::into_inner(data.r))\n-    } else {\n-        Err(ManuallyDrop::into_inner(data.p))\n-    };\n+    // SAFETY:\n+    //\n+    // Access to the union's fields: this is `std` and we know that the `r#try`\n+    // intrinsic fills in the `r` or `p` union field based on its return value.\n+    //\n+    // The call to `intrinsics::r#try` is made safe by:\n+    // - `do_call`, the first argument, can be called with the initial `data_ptr`.\n+    // - `do_catch`, the second argument, can be called with the `data_ptr` as well.\n+    // See their safety preconditions for more informations\n+    unsafe {\n+        return if intrinsics::r#try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n+            Ok(ManuallyDrop::into_inner(data.r))\n+        } else {\n+            Err(ManuallyDrop::into_inner(data.p))\n+        };\n+    }\n \n     // We consider unwinding to be rare, so mark this function as cold. However,\n     // do not mark it no-inline -- that decision is best to leave to the\n     // optimizer (in most cases this function is not inlined even as a normal,\n     // non-cold function, though, as of the writing of this comment).\n     #[cold]\n     unsafe fn cleanup(payload: *mut u8) -> Box<dyn Any + Send + 'static> {\n-        let obj = Box::from_raw(__rust_panic_cleanup(payload));\n+        // SAFETY: The whole unsafe block hinges on a correct implementation of\n+        // the panic handler `__rust_panic_cleanup`. As such we can only\n+        // assume it returns the correct thing for `Box::from_raw` to work\n+        // without undefined behavior.\n+        let obj = unsafe { Box::from_raw(__rust_panic_cleanup(payload)) };\n         panic_count::decrease();\n         obj\n     }\n \n+    // SAFETY:\n+    // data must be non-NUL, correctly aligned, and a pointer to a `Data<F, R>`\n+    // Its must contains a valid `f` (type: F) value that can be use to fill\n+    // `data.r`.\n+    //\n+    // This function cannot be marked as `unsafe` because `intrinsics::r#try`\n+    // expects normal function pointers.\n     #[inline]\n     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n+        // SAFETY: this is the responsibilty of the caller, see above.\n         unsafe {\n             let data = data as *mut Data<F, R>;\n             let data = &mut (*data);\n@@ -352,8 +377,21 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // We *do* want this part of the catch to be inlined: this allows the\n     // compiler to properly track accesses to the Data union and optimize it\n     // away most of the time.\n+    //\n+    // SAFETY:\n+    // data must be non-NUL, correctly aligned, and a pointer to a `Data<F, R>`\n+    // Since this uses `cleanup` it also hinges on a correct implementation of\n+    // `__rustc_panic_cleanup`.\n+    //\n+    // This function cannot be marked as `unsafe` because `intrinsics::r#try`\n+    // expects normal function pointers.\n     #[inline]\n     fn do_catch<F: FnOnce() -> R, R>(data: *mut u8, payload: *mut u8) {\n+        // SAFETY: this is the responsibilty of the caller, see above.\n+        //\n+        // When `__rustc_panic_cleaner` is correctly implemented we can rely\n+        // on `obj` being the correct thing to pass to `data.p` (after wrapping\n+        // in `ManuallyDrop`).\n         unsafe {\n             let data = data as *mut Data<F, R>;\n             let data = &mut (*data);"}, {"sha": "66508f06b2884ccb4de9147d890d3f08fa35e8cb", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62e5488198e6de212ff3d6818c8aa448ef770622/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e5488198e6de212ff3d6818c8aa448ef770622/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=62e5488198e6de212ff3d6818c8aa448ef770622", "patch": "@@ -172,7 +172,11 @@ macro_rules! __thread_local_inner {\n                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                     $crate::thread::__OsLocalKeyInner::new();\n \n-                __KEY.get(__init)\n+                // FIXME: remove the #[allow(...)] marker when macros don't\n+                // raise warning for missing/extraneous unsafe blocks anymore.\n+                // See https://github.com/rust-lang/rust/issues/74838.\n+                #[allow(unused_unsafe)]\n+                unsafe { __KEY.get(__init) }\n             }\n \n             unsafe {"}]}