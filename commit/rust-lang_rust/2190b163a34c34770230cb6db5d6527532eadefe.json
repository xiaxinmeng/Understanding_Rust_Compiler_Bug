{"sha": "2190b163a34c34770230cb6db5d6527532eadefe", "node_id": "C_kwDOAAsO6NoAKDIxOTBiMTYzYTM0YzM0NzcwMjMwY2I2ZGI1ZDY1Mjc1MzJlYWRlZmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-24T07:42:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-24T07:42:37Z"}, "message": "Rollup merge of #104775 - spastorino:use-obligation-ctxt-normalize, r=lcnr\n\nUse ObligationCtxt::normalize\n\nr? ```@lcnr```", "tree": {"sha": "3d3c4d9cd13b00cc6db539e68bb2620a28d4830e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d3c4d9cd13b00cc6db539e68bb2620a28d4830e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2190b163a34c34770230cb6db5d6527532eadefe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfyBtCRBK7hj4Ov3rIwAA5j0IAIMUDct2eYagnewV4s/2qomc\nghOPFfyKjTu+yPsE7G1bea9LBYeKyEqoy8Qx9i6sXy0y7xsT0ZYEhKn1UDo9hBi/\nkhc7+eYXTXr9lo5uLuGLOfcAyn9NujsuH7ujLDjRR2WYYZhc6+0Sb36UtK++j3IW\nn4KtIshBMNUVUj9NVJW24EfVzjjyap+mz1HfxGbcoerNzSNlsHqIR6Wb7xlFcU59\nKftLguSWeq+Q02R7SSiVtZ20KaP4syL4y/OK/oRR6h84YtApHnFknOOEJQYxD+la\nJcb5YrT/343bDFNyZ+IEWoBfbEON3MPdAvoTH7dLE+8ePC78SBsrzgaOzBKlzFM=\n=QdZ+\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d3c4d9cd13b00cc6db539e68bb2620a28d4830e\nparent a3371560ee465fb3a1d142b1f2672770887d3dd8\nparent 409203a3151dd7d45b05145f267a83f81be52c5e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669275757 +0100\ncommitter GitHub <noreply@github.com> 1669275757 +0100\n\nRollup merge of #104775 - spastorino:use-obligation-ctxt-normalize, r=lcnr\n\nUse ObligationCtxt::normalize\n\nr? ```@lcnr```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2190b163a34c34770230cb6db5d6527532eadefe", "html_url": "https://github.com/rust-lang/rust/commit/2190b163a34c34770230cb6db5d6527532eadefe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2190b163a34c34770230cb6db5d6527532eadefe/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3371560ee465fb3a1d142b1f2672770887d3dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3371560ee465fb3a1d142b1f2672770887d3dd8", "html_url": "https://github.com/rust-lang/rust/commit/a3371560ee465fb3a1d142b1f2672770887d3dd8"}, {"sha": "409203a3151dd7d45b05145f267a83f81be52c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/409203a3151dd7d45b05145f267a83f81be52c5e", "html_url": "https://github.com/rust-lang/rust/commit/409203a3151dd7d45b05145f267a83f81be52c5e"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "de386e2d135568c0c5cdc3e784f060efdaf34752", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2190b163a34c34770230cb6db5d6527532eadefe/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2190b163a34c34770230cb6db5d6527532eadefe/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=2190b163a34c34770230cb6db5d6527532eadefe", "patch": "@@ -218,14 +218,11 @@ fn compare_predicate_entailment<'tcx>(\n \n     debug!(\"compare_impl_method: caller_bounds={:?}\", param_env.caller_bounds());\n \n-    let mut selcx = traits::SelectionContext::new(&infcx);\n     let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n     for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n         let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n-        let traits::Normalized { value: predicate, obligations } =\n-            traits::normalize(&mut selcx, param_env, normalize_cause, predicate);\n+        let predicate = ocx.normalize(normalize_cause, param_env, predicate);\n \n-        ocx.register_obligations(obligations);\n         let cause = ObligationCause::new(\n             span,\n             impl_m_hir_id,\n@@ -1555,14 +1552,11 @@ fn compare_type_predicate_entailment<'tcx>(\n \n     debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds());\n \n-    let mut selcx = traits::SelectionContext::new(&infcx);\n-\n     assert_eq!(impl_ty_own_bounds.predicates.len(), impl_ty_own_bounds.spans.len());\n     for (span, predicate) in std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n     {\n         let cause = ObligationCause::misc(span, impl_ty_hir_id);\n-        let traits::Normalized { value: predicate, obligations } =\n-            traits::normalize(&mut selcx, param_env, cause, predicate);\n+        let predicate = ocx.normalize(cause, param_env, predicate);\n \n         let cause = ObligationCause::new(\n             span,\n@@ -1573,7 +1567,6 @@ fn compare_type_predicate_entailment<'tcx>(\n                 kind: impl_ty.kind,\n             },\n         );\n-        ocx.register_obligations(obligations);\n         ocx.register_obligation(traits::Obligation::new(tcx, cause, param_env, predicate));\n     }\n \n@@ -1756,7 +1749,6 @@ pub fn check_type_bounds<'tcx>(\n     let assumed_wf_types =\n         ocx.assumed_wf_types(param_env, impl_ty_span, impl_ty.def_id.expect_local());\n \n-    let mut selcx = traits::SelectionContext::new(&infcx);\n     let normalize_cause = ObligationCause::new(\n         impl_ty_span,\n         impl_ty_hir_id,\n@@ -1785,16 +1777,11 @@ pub fn check_type_bounds<'tcx>(\n     debug!(\"check_type_bounds: item_bounds={:?}\", obligations);\n \n     for mut obligation in util::elaborate_obligations(tcx, obligations) {\n-        let traits::Normalized { value: normalized_predicate, obligations } = traits::normalize(\n-            &mut selcx,\n-            normalize_param_env,\n-            normalize_cause.clone(),\n-            obligation.predicate,\n-        );\n+        let normalized_predicate =\n+            ocx.normalize(normalize_cause.clone(), normalize_param_env, obligation.predicate);\n         debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n         obligation.predicate = normalized_predicate;\n \n-        ocx.register_obligations(obligations);\n         ocx.register_obligation(obligation);\n     }\n     // Check that all obligations are satisfied by the implementation's"}]}