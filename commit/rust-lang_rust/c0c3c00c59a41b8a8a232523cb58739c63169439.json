{"sha": "c0c3c00c59a41b8a8a232523cb58739c63169439", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzNjMDBjNTlhNDFiOGE4YTIzMjUyM2NiNTg3MzljNjMxNjk0Mzk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-03-01T20:10:01Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-04T17:47:14Z"}, "message": "Update tests for restrictive two-phase borrows", "tree": {"sha": "48557ed775ff000eb31b793e0998cf63d87b35bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48557ed775ff000eb31b793e0998cf63d87b35bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c3c00c59a41b8a8a232523cb58739c63169439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c3c00c59a41b8a8a232523cb58739c63169439", "html_url": "https://github.com/rust-lang/rust/commit/c0c3c00c59a41b8a8a232523cb58739c63169439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c3c00c59a41b8a8a232523cb58739c63169439/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e2beb3d49a92432234882472b32e1e33f11fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e2beb3d49a92432234882472b32e1e33f11fee", "html_url": "https://github.com/rust-lang/rust/commit/f8e2beb3d49a92432234882472b32e1e33f11fee"}], "stats": {"total": 125, "additions": 1, "deletions": 124}, "files": [{"sha": "9bfd8b994bf23b18f3bff6bc670c0717f92667f0", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c3c00c59a41b8a8a232523cb58739c63169439/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c3c00c59a41b8a8a232523cb58739c63169439/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr?ref=c0c3c00c59a41b8a8a232523cb58739c63169439", "patch": "@@ -7,7 +7,7 @@ LL |     vec.get({\n    |     immutable borrow occurs here\n LL | \n LL |         vec.push(2);\n-   |         ^^^^^^^^^^^ mutable borrow occurs here\n+   |         ^^^ mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "0f71452805db065fdb18004b2e61f5d922b495f1", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -1,84 +0,0 @@\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:23:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:35:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:41:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:23:17\n-   |\n-LL | fn ok(map: &mut Map) -> &String {\n-   |            - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-...\n-LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:35:17\n-   |\n-LL | fn err(map: &mut Map) -> &String {\n-   |             - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:41:17\n-   |\n-LL | fn err(map: &mut Map) -> &String {\n-   |             - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-...\n-LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "ab8d96d4e9916c8ec5c2cdb5b46bb0ff357e2f66", "filename": "src/test/ui/nll/region-ends-after-if-condition.nll.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -1,39 +0,0 @@\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:19:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                 ---------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL |     drop(value);\n-   |          ----- immutable borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}]}