{"sha": "53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYTZkMTRlNWJiOGIxOTE1YTVmMGI5MzcxYmJmMGRhOTM0ZWQwNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-17T04:23:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-17T04:23:55Z"}, "message": "Auto merge of #46778 - petrochenkov:nounwrap, r=arielb1\n\nsyntax: Rename `P::unwrap` into something less alarming", "tree": {"sha": "85a7fbce9c5bf3beb9746628800a9fa9561699d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85a7fbce9c5bf3beb9746628800a9fa9561699d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "html_url": "https://github.com/rust-lang/rust/commit/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35376587c802f3f142c63a443422184fd0ad40bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/35376587c802f3f142c63a443422184fd0ad40bd", "html_url": "https://github.com/rust-lang/rust/commit/35376587c802f3f142c63a443422184fd0ad40bd"}, {"sha": "a4aa26aaa076ce732f2c26803d9d48459aa2046a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4aa26aaa076ce732f2c26803d9d48459aa2046a", "html_url": "https://github.com/rust-lang/rust/commit/a4aa26aaa076ce732f2c26803d9d48459aa2046a"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "5499351e9514b50e0f0bcf24cfa503058186b056", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "patch": "@@ -2063,9 +2063,9 @@ impl Clean<Type> for hir::Ty {\n                         for (i, ty_param) in generics.ty_params.iter().enumerate() {\n                             let ty_param_def = Def::TyParam(cx.tcx.hir.local_def_id(ty_param.id));\n                             if let Some(ty) = provided_params.types.get(i).cloned() {\n-                                ty_substs.insert(ty_param_def, ty.unwrap().clean(cx));\n+                                ty_substs.insert(ty_param_def, ty.into_inner().clean(cx));\n                             } else if let Some(default) = ty_param.default.clone() {\n-                                ty_substs.insert(ty_param_def, default.unwrap().clean(cx));\n+                                ty_substs.insert(ty_param_def, default.into_inner().clean(cx));\n                             }\n                         }\n                         for (i, lt_param) in generics.lifetimes.iter().enumerate() {"}, {"sha": "fc82357455b914ed5385e4ba67caed692fa21f2e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "patch": "@@ -284,13 +284,13 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n     }\n \n     fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let mut expr = self.configure_expr(expr).unwrap();\n+        let mut expr = self.configure_expr(expr).into_inner();\n         expr.node = self.configure_expr_kind(expr.node);\n         P(fold::noop_fold_expr(expr, self))\n     }\n \n     fn fold_opt_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n-        let mut expr = configure!(self, expr).unwrap();\n+        let mut expr = configure!(self, expr).into_inner();\n         expr.node = self.configure_expr_kind(expr.node);\n         Some(P(fold::noop_fold_expr(expr, self)))\n     }"}, {"sha": "0eb4ec23d08a20b15d43a75a1002e7a1aa0208f7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "patch": "@@ -85,14 +85,14 @@ impl Annotatable {\n \n     pub fn expect_trait_item(self) -> ast::TraitItem {\n         match self {\n-            Annotatable::TraitItem(i) => i.unwrap(),\n+            Annotatable::TraitItem(i) => i.into_inner(),\n             _ => panic!(\"expected Item\")\n         }\n     }\n \n     pub fn expect_impl_item(self) -> ast::ImplItem {\n         match self {\n-            Annotatable::ImplItem(i) => i.unwrap(),\n+            Annotatable::ImplItem(i) => i.into_inner(),\n             _ => panic!(\"expected Item\")\n         }\n     }"}, {"sha": "f2346ed19de429f446a285f96b64eac3f69e0b75", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "patch": "@@ -242,7 +242,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             tokens: None,\n         })));\n \n-        match self.expand(krate_item).make_items().pop().map(P::unwrap) {\n+        match self.expand(krate_item).make_items().pop().map(P::into_inner) {\n             Some(ast::Item { attrs, node: ast::ItemKind::Mod(module), .. }) => {\n                 krate.attrs = attrs;\n                 krate.module = module;\n@@ -504,8 +504,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             AttrProcMacro(ref mac) => {\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n-                    Annotatable::TraitItem(item) => token::NtTraitItem(item.unwrap()),\n-                    Annotatable::ImplItem(item) => token::NtImplItem(item.unwrap()),\n+                    Annotatable::TraitItem(item) => token::NtTraitItem(item.into_inner()),\n+                    Annotatable::ImplItem(item) => token::NtImplItem(item.into_inner()),\n                 })).into();\n                 let tok_result = mac.expand(self.cx, attr.span, attr.tokens, item_tok);\n                 self.parse_expansion(tok_result, kind, &attr.path, attr.span)\n@@ -863,7 +863,7 @@ pub fn find_attr_invoc(attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute\n \n impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let mut expr = self.cfg.configure_expr(expr).unwrap();\n+        let mut expr = self.cfg.configure_expr(expr).into_inner();\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n         if let ast::ExprKind::Mac(mac) = expr.node {\n@@ -875,7 +875,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_opt_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n-        let mut expr = configure!(self, expr).unwrap();\n+        let mut expr = configure!(self, expr).into_inner();\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n         if let ast::ExprKind::Mac(mac) = expr.node {\n@@ -906,7 +906,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         };\n \n         let (mac, style, attrs) = if let StmtKind::Mac(mac) = stmt.node {\n-            mac.unwrap()\n+            mac.into_inner()\n         } else {\n             // The placeholder expander gives ids to statements, so we avoid folding the id here.\n             let ast::Stmt { id, node, span } = stmt;\n@@ -1056,7 +1056,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n     fn fold_ty(&mut self, ty: P<ast::Ty>) -> P<ast::Ty> {\n         let ty = match ty.node {\n-            ast::TyKind::Mac(_) => ty.unwrap(),\n+            ast::TyKind::Mac(_) => ty.into_inner(),\n             _ => return fold::noop_fold_ty(ty, self),\n         };\n "}, {"sha": "09a65046e20f0897463983859c2929ff3423cbd1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "patch": "@@ -1456,7 +1456,7 @@ impl<'a> Parser<'a> {\n             self.expect(&token::CloseDelim(token::Paren))?;\n \n             if ts.len() == 1 && !last_comma {\n-                let ty = ts.into_iter().nth(0).unwrap().unwrap();\n+                let ty = ts.into_iter().nth(0).unwrap().into_inner();\n                 let maybe_bounds = allow_plus && self.token == token::BinOp(token::Plus);\n                 match ty.node {\n                     // `(TY_BOUND_NOPAREN) + BOUND + ...`.\n@@ -6077,7 +6077,7 @@ impl<'a> Parser<'a> {\n     fn parse_item_(&mut self, attrs: Vec<Attribute>,\n                    macros_allowed: bool, attributes_allowed: bool) -> PResult<'a, Option<P<Item>>> {\n         maybe_whole!(self, NtItem, |item| {\n-            let mut item = item.unwrap();\n+            let mut item = item.into_inner();\n             let mut attrs = attrs;\n             mem::swap(&mut item.attrs, &mut attrs);\n             item.attrs.extend(attrs);"}, {"sha": "25d916af77d28a8690da64856ba9893925da5234", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "patch": "@@ -68,7 +68,7 @@ impl<T: 'static> P<T> {\n         f(*self.ptr)\n     }\n     /// Equivalent to and_then(|x| x)\n-    pub fn unwrap(self) -> T {\n+    pub fn into_inner(self) -> T {\n         *self.ptr\n     }\n "}, {"sha": "694a9c1f47252ca8b6cb9bd4c879db5476e64eaa", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a6d14e5bb8b1915a5f0b9371bbf0da934ed052/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=53a6d14e5bb8b1915a5f0b9371bbf0da934ed052", "patch": "@@ -141,7 +141,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n             }\n         }\n \n-        let mut item = i.unwrap();\n+        let mut item = i.into_inner();\n         // We don't want to recurse into anything other than mods, since\n         // mods or tests inside of functions will break things\n         if let ast::ItemKind::Mod(module) = item.node {"}]}