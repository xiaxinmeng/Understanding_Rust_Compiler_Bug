{"sha": "7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMjQ3YWRkNDE0NGRmMGUxZmQzOTUxYTFkNWFhNjQ1MWM4YThlYjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-21T16:17:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T14:14:37Z"}, "message": "move `liberate_late_bound_regions` to a method on the tcx\n\nNo reason for it to live on `Inherited`.", "tree": {"sha": "21978dedb46c4edc7698263658403f7089892d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21978dedb46c4edc7698263658403f7089892d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "html_url": "https://github.com/rust-lang/rust/commit/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9067bd5cc5804edf75bb9d9e56956e0670c3ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9067bd5cc5804edf75bb9d9e56956e0670c3ed1", "html_url": "https://github.com/rust-lang/rust/commit/e9067bd5cc5804edf75bb9d9e56956e0670c3ed1"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "fbbc0e92bcdba2d17c094f7fe94361db9865d219", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "patch": "@@ -40,6 +40,7 @@\n //! and does not need to visit anything else.\n \n use middle::const_val::ConstVal;\n+use hir::def_id::DefId;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n use std::fmt;\n@@ -329,6 +330,14 @@ struct RegionReplacer<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n+    /// Replace all regions bound by the given `Binder` with the\n+    /// results returned by the closure; the closure is expected to\n+    /// return a free region (relative to this binder), and hence the\n+    /// binder is removed in the return type. The closure is invoked\n+    /// once for each unique `BoundRegion`; multiple references to the\n+    /// same `BoundRegion` will reuse the previous result.  A map is\n+    /// returned at the end with each bound region and the free region\n+    /// that replaced it.\n     pub fn replace_late_bound_regions<T,F>(self,\n         value: &Binder<T>,\n         mut f: F)\n@@ -341,6 +350,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         (result, replacer.map)\n     }\n \n+    /// Replace any late-bound regions bound in `value` with\n+    /// free variants attached to `all_outlive_scope`.\n+    pub fn liberate_late_bound_regions<T>(\n+        &self,\n+        all_outlive_scope: DefId,\n+        value: &ty::Binder<T>\n+    ) -> T\n+    where T: TypeFoldable<'tcx> {\n+        self.replace_late_bound_regions(value, |br| {\n+            self.mk_region(ty::ReFree(ty::FreeRegion {\n+                scope: all_outlive_scope,\n+                bound_region: br\n+            }))\n+        }).0\n+    }\n+\n     /// Flattens two binding levels into one. So `for<'a> for<'b> Foo`\n     /// becomes `for<'a,'b> Foo`.\n     pub fn flatten_late_bound_regions<T>(self, bound2_value: &Binder<Binder<T>>)"}, {"sha": "147347a75abe8264f04a1f140240ae809fb7189d", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         body: &hir::Body,\n         bound_sig: ty::PolyFnSig<'tcx>,\n     ) -> ClosureSignatures<'tcx> {\n-        let liberated_sig = self.liberate_late_bound_regions(expr_def_id, &bound_sig);\n+        let liberated_sig = self.tcx().liberate_late_bound_regions(expr_def_id, &bound_sig);\n         let liberated_sig = self.inh.normalize_associated_types_in(\n             body.value.span,\n             body.value.id,"}, {"sha": "70607bf4842a55e1c3c5dbb25863d7d0638f0267", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "patch": "@@ -270,7 +270,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let impl_fty = tcx.mk_fn_ptr(ty::Binder(impl_sig));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n-        let trait_sig = inh.liberate_late_bound_regions(\n+        let trait_sig = tcx.liberate_late_bound_regions(\n             impl_m.def_id,\n             &tcx.fn_sig(trait_m.def_id));\n         let trait_sig ="}, {"sha": "27a0e4f6dfe6330e36a760aa30eb3a688bf68658", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "patch": "@@ -698,22 +698,6 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n         let ok = self.partially_normalize_associated_types_in(span, body_id, param_env, value);\n         self.register_infer_ok_obligations(ok)\n     }\n-\n-    /// Replace any late-bound regions bound in `value` with\n-    /// free variants attached to `all_outlive_scope`.\n-    fn liberate_late_bound_regions<T>(&self,\n-        all_outlive_scope: DefId,\n-        value: &ty::Binder<T>)\n-        -> T\n-        where T: TypeFoldable<'tcx>\n-    {\n-        self.tcx.replace_late_bound_regions(value, |br| {\n-            self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: all_outlive_scope,\n-                bound_region: br\n-            }))\n-        }).0\n-    }\n }\n \n struct CheckItemTypesVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n@@ -882,7 +866,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             // Compute the fty from point of view of inside fn.\n             let fn_sig =\n-                inh.liberate_late_bound_regions(def_id, &fn_sig);\n+                tcx.liberate_late_bound_regions(def_id, &fn_sig);\n             let fn_sig =\n                 inh.normalize_associated_types_in(body.value.span,\n                                                   body_id.node_id,"}, {"sha": "d4625bb58c33878efa04a2a885d4d57b16098025", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "patch": "@@ -451,7 +451,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                       implied_bounds: &mut Vec<Ty<'tcx>>)\n     {\n         let sig = fcx.normalize_associated_types_in(span, &sig);\n-        let sig = fcx.liberate_late_bound_regions(def_id, &sig);\n+        let sig = fcx.tcx.liberate_late_bound_regions(def_id, &sig);\n \n         for input_ty in sig.inputs() {\n             fcx.register_wf_obligation(&input_ty, span, self.code.clone());\n@@ -484,12 +484,12 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n         let sig = fcx.tcx.fn_sig(method.def_id);\n         let sig = fcx.normalize_associated_types_in(span, &sig);\n-        let sig = fcx.liberate_late_bound_regions(method.def_id, &sig);\n+        let sig = fcx.tcx.liberate_late_bound_regions(method.def_id, &sig);\n \n         debug!(\"check_method_receiver: sig={:?}\", sig);\n \n         let self_ty = fcx.normalize_associated_types_in(span, &self_ty);\n-        let self_ty = fcx.liberate_late_bound_regions(\n+        let self_ty = fcx.tcx.liberate_late_bound_regions(\n             method.def_id,\n             &ty::Binder(self_ty)\n         );\n@@ -498,7 +498,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n         let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n         let self_arg_ty = fcx.normalize_associated_types_in(span, &self_arg_ty);\n-        let self_arg_ty = fcx.liberate_late_bound_regions(\n+        let self_arg_ty = fcx.tcx.liberate_late_bound_regions(\n             method.def_id,\n             &ty::Binder(self_arg_ty)\n         );"}]}