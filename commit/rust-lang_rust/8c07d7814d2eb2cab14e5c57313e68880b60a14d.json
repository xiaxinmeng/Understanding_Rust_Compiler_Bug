{"sha": "8c07d7814d2eb2cab14e5c57313e68880b60a14d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDdkNzgxNGQyZWIyY2FiMTRlNWM1NzMxM2U2ODg4MGI2MGExNGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-16T01:58:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T22:41:51Z"}, "message": "When declaring a declarative macro in an item it's only accessible inside it", "tree": {"sha": "d586d85e96abc4a08833b1afe4a896f3b339a275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d586d85e96abc4a08833b1afe4a896f3b339a275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c07d7814d2eb2cab14e5c57313e68880b60a14d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c07d7814d2eb2cab14e5c57313e68880b60a14d", "html_url": "https://github.com/rust-lang/rust/commit/8c07d7814d2eb2cab14e5c57313e68880b60a14d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c07d7814d2eb2cab14e5c57313e68880b60a14d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "html_url": "https://github.com/rust-lang/rust/commit/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "5bf310ce8d9564bbcb3f19961c9c13d60ac56414", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8c07d7814d2eb2cab14e5c57313e68880b60a14d", "patch": "@@ -514,18 +514,21 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n-    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId)\n-    {\n+    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId) {\n+        self.get_if_module(module).expect(\"not a module\")\n+    }\n+\n+    pub fn get_if_module(&self, module: DefId) -> Option<(&'hir Mod, Span, HirId)> {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n         self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {\n             Node::Item(&Item {\n                 span,\n                 node: ItemKind::Mod(ref m),\n                 ..\n-            }) => (m, span, hir_id),\n-            Node::Crate => (&self.forest.krate.module, self.forest.krate.span, hir_id),\n-            _ => panic!(\"not a module\")\n+            }) => Some((m, span, hir_id)),\n+            Node::Crate => Some((&self.forest.krate.module, self.forest.krate.span, hir_id)),\n+            _ => None,\n         }\n     }\n "}, {"sha": "dc787d22538847a7c107a69d67494b7b7d73fddc", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8c07d7814d2eb2cab14e5c57313e68880b60a14d", "patch": "@@ -508,39 +508,45 @@ impl EmbargoVisitor<'tcx> {\n         }\n     }\n \n-    fn update_macro_reachable_mod(\n-        &mut self,\n-        reachable_mod: hir::HirId,\n-        defining_mod: DefId,\n-    ) {\n-        let module_def_id = self.tcx.hir().local_def_id(reachable_mod);\n-        let module = self.tcx.hir().get_module(module_def_id).0;\n-        for item_id in &module.item_ids {\n-            let hir_id = item_id.id;\n-            let item_def_id = self.tcx.hir().local_def_id(hir_id);\n-            if let Some(def_kind) = self.tcx.def_kind(item_def_id) {\n-                let item = self.tcx.hir().expect_item(hir_id);\n-                let vis = ty::Visibility::from_hir(&item.vis, hir_id, self.tcx);\n-                self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n+    fn update_macro_reachable_mod(&mut self, reachable_mod: hir::HirId, defining_mod: DefId) {\n+        let set_vis = |this: &mut Self, hir_id: hir::HirId| {\n+            let item_def_id = this.tcx.hir().local_def_id(hir_id);\n+            if let Some(def_kind) = this.tcx.def_kind(item_def_id) {\n+                let item = this.tcx.hir().expect_item(hir_id);\n+                let vis = ty::Visibility::from_hir(&item.vis, hir_id, this.tcx);\n+                this.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n             }\n-        }\n+        };\n \n-        if let Some(exports) = self.tcx.module_exports(module_def_id) {\n-            for export in exports {\n-                if export.vis.is_accessible_from(defining_mod, self.tcx) {\n-                    if let Res::Def(def_kind, def_id) = export.res {\n-                        let vis = def_id_visibility(self.tcx, def_id).0;\n-                        if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n-                            self.update_macro_reachable_def(\n-                                hir_id,\n-                                def_kind,\n-                                vis,\n-                                defining_mod,\n-                            );\n+        let module_def_id = self.tcx.hir().local_def_id(reachable_mod);\n+        if let Some((module, _, _)) = self.tcx.hir().get_if_module(module_def_id) {\n+            for item_id in &module.item_ids {\n+                let hir_id = item_id.id;\n+                set_vis(self, hir_id);\n+            }\n+            if let Some(exports) = self.tcx.module_exports(module_def_id) {\n+                for export in exports {\n+                    if export.vis.is_accessible_from(defining_mod, self.tcx) {\n+                        if let Res::Def(def_kind, def_id) = export.res {\n+                            let vis = def_id_visibility(self.tcx, def_id).0;\n+                            if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n+                                self.update_macro_reachable_def(\n+                                    hir_id,\n+                                    def_kind,\n+                                    vis,\n+                                    defining_mod,\n+                                );\n+                            }\n                         }\n                     }\n                 }\n             }\n+        } else if let Some(hir::Node::Item(hir::Item {\n+            hir_id,\n+            ..\n+        })) = self.tcx.hir().get_if_local(module_def_id) { // #63164\n+            // `macro` defined inside of an item is only visible inside of that item's scope.\n+            set_vis(self, *hir_id);\n         }\n     }\n "}, {"sha": "1e46346fc01eae37b452308585828359e3833268", "filename": "src/test/ui/macros/macro-in-fn.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs?ref=8c07d7814d2eb2cab14e5c57313e68880b60a14d", "patch": "@@ -0,0 +1,9 @@\n+#![feature(decl_macro)]\n+\n+pub fn moo() {\n+    pub macro ABC() {{}}\n+}\n+\n+fn main() {\n+    ABC!(); //~ ERROR cannot find macro `ABC!` in this scope\n+}"}, {"sha": "0c35fe65aa2852a929ea020c568a19d9d6c489ed", "filename": "src/test/ui/macros/macro-in-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.stderr?ref=8c07d7814d2eb2cab14e5c57313e68880b60a14d", "patch": "@@ -0,0 +1,8 @@\n+error: cannot find macro `ABC!` in this scope\n+  --> $DIR/macro-in-fn.rs:8:5\n+   |\n+LL |     ABC!();\n+   |     ^^^\n+\n+error: aborting due to previous error\n+"}]}