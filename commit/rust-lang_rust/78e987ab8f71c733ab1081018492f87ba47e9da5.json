{"sha": "78e987ab8f71c733ab1081018492f87ba47e9da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZTk4N2FiOGY3MWM3MzNhYjEwODEwMTg0OTJmODdiYTQ3ZTlkYTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-10T22:05:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-19T14:34:44Z"}, "message": "just check whether a variable is initialized\n\nDon't iterate over all things that are initialized.", "tree": {"sha": "69a0b34b688dcf14f6222efa73e528d1f5a613b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69a0b34b688dcf14f6222efa73e528d1f5a613b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e987ab8f71c733ab1081018492f87ba47e9da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e987ab8f71c733ab1081018492f87ba47e9da5", "html_url": "https://github.com/rust-lang/rust/commit/78e987ab8f71c733ab1081018492f87ba47e9da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e987ab8f71c733ab1081018492f87ba47e9da5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a982bb61d500f9e54de8f546f8522e1783c874", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a982bb61d500f9e54de8f546f8522e1783c874", "html_url": "https://github.com/rust-lang/rust/commit/a8a982bb61d500f9e54de8f546f8522e1783c874"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "ce0e76a636db2511cb2886ba85c361860039943c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/78e987ab8f71c733ab1081018492f87ba47e9da5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e987ab8f71c733ab1081018492f87ba47e9da5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=78e987ab8f71c733ab1081018492f87ba47e9da5", "patch": "@@ -1264,7 +1264,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if let &Place::Local(local) = place_span.0 {\n             if let Mutability::Not = self.mir.local_decls[local].mutability {\n                 // check for reassignments to immutable local variables\n-                self.check_if_reassignment_to_immutable_state(context, place_span, flow_state);\n+                self.check_if_reassignment_to_immutable_state(\n+                    context,\n+                    local,\n+                    place_span,\n+                    flow_state,\n+                );\n                 return;\n             }\n         }\n@@ -1575,27 +1580,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn check_if_reassignment_to_immutable_state(\n         &mut self,\n         context: Context,\n-        (place, span): (&Place<'tcx>, Span),\n+        local: Local,\n+        place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        debug!(\"check_if_reassignment_to_immutable_state({:?})\", place);\n-        // determine if this path has a non-mut owner (and thus needs checking).\n-        let err_place = match self.is_mutable(place, LocalMutationIsAllowed::No) {\n-            Ok(..) => return,\n-            Err(place) => place,\n-        };\n-        debug!(\n-            \"check_if_reassignment_to_immutable_state({:?}) - is an imm local\",\n-            place\n-        );\n-\n-        for i in flow_state.ever_inits.iter_incoming() {\n-            let init = self.move_data.inits[i];\n-            let init_place = &self.move_data.move_paths[init.path].place;\n-            if places_conflict::places_conflict(self.tcx, self.mir, &init_place, place, Deep) {\n-                self.report_illegal_reassignment(context, (place, span), init.span, err_place);\n-                break;\n-            }\n+        debug!(\"check_if_reassignment_to_immutable_state({:?})\", local);\n+\n+        // Check if any of the initializiations of `local` have happened yet:\n+        let mpi = self.move_data.rev_lookup.find_local(local);\n+        let init_indices = &self.move_data.init_path_map[mpi];\n+        let first_init_index = init_indices.iter().find(|ii| flow_state.ever_inits.contains(ii));\n+        if let Some(&init_index) = first_init_index {\n+            // And, if so, report an error.\n+            let init = &self.move_data.inits[init_index];\n+            self.report_illegal_reassignment(context, place_span, init.span, place_span.0);\n         }\n     }\n "}, {"sha": "34bdf48e2a65f7a319705040244ba0da3942fe0e", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78e987ab8f71c733ab1081018492f87ba47e9da5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e987ab8f71c733ab1081018492f87ba47e9da5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=78e987ab8f71c733ab1081018492f87ba47e9da5", "patch": "@@ -6,26 +6,23 @@ LL |     let f = Foo { v: Vec::new() };\n LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot borrow as mutable\n \n-error[E0384]: cannot assign twice to immutable variable `s`\n+error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:26:5\n    |\n LL |     let s = S { x: 42 };\n-   |         -\n-   |         |\n-   |         first assignment to `s`\n-   |         consider changing this to `mut s`\n+   |         - help: consider changing this to be mutable: `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n-   |     ^^^^^^^^ cannot assign twice to immutable variable\n+   |     ^^^^^^^^ cannot assign\n \n-error[E0384]: cannot assign to immutable argument `s`\n+error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:30:5\n    |\n LL | fn bar(s: S) {\n-   |        - consider changing this to `mut s`\n+   |        - help: consider changing this to be mutable: `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n-   |     ^^^^^^^^ cannot assign to immutable argument\n+   |     ^^^^^^^^ cannot assign\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0384, E0596.\n-For more information about an error, try `rustc --explain E0384`.\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}]}