{"sha": "168cfea8afaf2dddae3d848a7f49ecb63d130b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OGNmZWE4YWZhZjJkZGRhZTNkODQ4YTdmNDllY2I2M2QxMzBiNDc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-23T23:22:18Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-25T06:27:25Z"}, "message": "Implement `From<ast::UintTy>` for `PrimitiveType`.", "tree": {"sha": "68758f261715b62ae5b1128693c969021de8ecce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68758f261715b62ae5b1128693c969021de8ecce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/168cfea8afaf2dddae3d848a7f49ecb63d130b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/168cfea8afaf2dddae3d848a7f49ecb63d130b47", "html_url": "https://github.com/rust-lang/rust/commit/168cfea8afaf2dddae3d848a7f49ecb63d130b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/168cfea8afaf2dddae3d848a7f49ecb63d130b47/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7", "html_url": "https://github.com/rust-lang/rust/commit/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "4f455e7d073de9888cef7811f501b8e955ce87ec", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/168cfea8afaf2dddae3d848a7f49ecb63d130b47/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168cfea8afaf2dddae3d848a7f49ecb63d130b47/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=168cfea8afaf2dddae3d848a7f49ecb63d130b47", "patch": "@@ -1631,6 +1631,18 @@ impl From<ast::IntTy> for PrimitiveType {\n     }\n }\n \n+impl From<ast::UintTy> for PrimitiveType {\n+    fn from(uint_ty: ast::UintTy) -> PrimitiveType {\n+        match uint_ty {\n+            ast::UintTy::Us => PrimitiveType::Usize,\n+            ast::UintTy::U8 => PrimitiveType::U8,\n+            ast::UintTy::U16 => PrimitiveType::U16,\n+            ast::UintTy::U32 => PrimitiveType::U32,\n+            ast::UintTy::U64 => PrimitiveType::U64,\n+        }\n+    }\n+}\n+\n // Poor man's type parameter substitution at HIR level.\n // Used to replace private type aliases in public signatures with their aliased types.\n struct SubstAlias<'a, 'tcx: 'a> {\n@@ -1784,11 +1796,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyBool => Primitive(PrimitiveType::Bool),\n             ty::TyChar => Primitive(PrimitiveType::Char),\n             ty::TyInt(int_ty) => Primitive(int_ty.into()),\n-            ty::TyUint(ast::UintTy::Us) => Primitive(PrimitiveType::Usize),\n-            ty::TyUint(ast::UintTy::U8) => Primitive(PrimitiveType::U8),\n-            ty::TyUint(ast::UintTy::U16) => Primitive(PrimitiveType::U16),\n-            ty::TyUint(ast::UintTy::U32) => Primitive(PrimitiveType::U32),\n-            ty::TyUint(ast::UintTy::U64) => Primitive(PrimitiveType::U64),\n+            ty::TyUint(uint_ty) => Primitive(uint_ty.into()),\n             ty::TyFloat(ast::FloatTy::F32) => Primitive(PrimitiveType::F32),\n             ty::TyFloat(ast::FloatTy::F64) => Primitive(PrimitiveType::F64),\n             ty::TyStr => Primitive(PrimitiveType::Str),\n@@ -2749,11 +2757,7 @@ fn resolve_type(cx: &DocContext,\n             hir::TyBool => return Primitive(PrimitiveType::Bool),\n             hir::TyChar => return Primitive(PrimitiveType::Char),\n             hir::TyInt(int_ty) => return Primitive(int_ty.into()),\n-            hir::TyUint(ast::UintTy::Us) => return Primitive(PrimitiveType::Usize),\n-            hir::TyUint(ast::UintTy::U8) => return Primitive(PrimitiveType::U8),\n-            hir::TyUint(ast::UintTy::U16) => return Primitive(PrimitiveType::U16),\n-            hir::TyUint(ast::UintTy::U32) => return Primitive(PrimitiveType::U32),\n-            hir::TyUint(ast::UintTy::U64) => return Primitive(PrimitiveType::U64),\n+            hir::TyUint(uint_ty) => return Primitive(uint_ty.into()),\n             hir::TyFloat(ast::FloatTy::F32) => return Primitive(PrimitiveType::F32),\n             hir::TyFloat(ast::FloatTy::F64) => return Primitive(PrimitiveType::F64),\n         },"}]}