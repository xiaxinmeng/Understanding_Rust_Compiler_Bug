{"sha": "aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "node_id": "C_kwDOAAsO6NoAKGFlYmY3YzRhMGU2OGYwMjExYjIyZWQzYzdjZWM5NDc3OWUyZDgzZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T01:20:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T01:20:41Z"}, "message": "Auto merge of #103991 - matthiaskrgr:rollup-tj53nte, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #103868 (Use `TraitEngine` (by itself) less)\n - #103878 (Fix artifact version/channel detection for stable)\n - #103946 (Cleanup bind_pattern args)\n - #103956 (Make mir opt unused file check blessable)\n - #103977 (LLVM 16: Switch to using MemoryEffects)\n - #103980 (rustdoc: simplify search results CSS and DOM)\n - #103984 (Refactor tcx mk_const parameters.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a1e2e1e354c2f81ee15b1fe5d299600e59007d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e2e1e354c2f81ee15b1fe5d299600e59007d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "html_url": "https://github.com/rust-lang/rust/commit/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ff7e7385be9846f28616081e836163a36681da", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ff7e7385be9846f28616081e836163a36681da", "html_url": "https://github.com/rust-lang/rust/commit/81ff7e7385be9846f28616081e836163a36681da"}, {"sha": "b101f3a86527e4541d850c4e0f8974ba6fb5fbe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b101f3a86527e4541d850c4e0f8974ba6fb5fbe7", "html_url": "https://github.com/rust-lang/rust/commit/b101f3a86527e4541d850c4e0f8974ba6fb5fbe7"}], "stats": {"total": 579, "additions": 284, "deletions": 295}, "files": [{"sha": "8987a51757cd50ff2fa23fc72aba03839c4d4d59", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -23,7 +23,6 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n-use rustc_trait_selection::traits::TraitEngineExt as _;\n \n use crate::borrow_set::TwoPhaseActivation;\n use crate::borrowck_errors;\n@@ -613,24 +612,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         else { return; };\n         // Try to find predicates on *generic params* that would allow copying `ty`\n         let infcx = tcx.infer_ctxt().build();\n-        let mut fulfill_cx = <dyn rustc_infer::traits::TraitEngine<'_>>::new(infcx.tcx);\n-\n         let copy_did = infcx.tcx.lang_items().copy_trait().unwrap();\n         let cause = ObligationCause::new(\n             span,\n             self.mir_hir_id(),\n             rustc_infer::traits::ObligationCauseCode::MiscObligation,\n         );\n-        fulfill_cx.register_bound(\n+        let errors = rustc_trait_selection::traits::fully_solve_bound(\n             &infcx,\n+            cause,\n             self.param_env,\n             // Erase any region vids from the type, which may not be resolved\n             infcx.tcx.erase_regions(ty),\n             copy_did,\n-            cause,\n         );\n-        // Select all, including ambiguous predicates\n-        let errors = fulfill_cx.select_all_or_error(&infcx);\n \n         // Only emit suggestion if all required predicates are on generic\n         let predicates: Result<Vec<_>, _> = errors"}, {"sha": "95ea42b584a3a6d502798fb28467597764193927", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -4,15 +4,15 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::TyCtxtInferExt as _;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt};\n-use rustc_infer::traits::{Obligation, ObligationCause, TraitEngine};\n+use rustc_infer::traits::{Obligation, ObligationCause};\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, OpaqueHiddenType, OpaqueTypeKey, ToPredicate, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::TraitEngineExt as _;\n+use rustc_trait_selection::traits::ObligationCtxt;\n \n use super::RegionInferenceContext;\n \n@@ -252,48 +252,45 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         // type-alias-impl-trait/issue-67844-nested-opaque.rs\n         let infcx =\n             self.tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).build();\n+        let ocx = ObligationCtxt::new(&infcx);\n         // Require the hidden type to be well-formed with only the generics of the opaque type.\n         // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n         // hidden type is well formed even without those bounds.\n         let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()))\n             .to_predicate(infcx.tcx);\n-        let mut fulfillment_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n \n         let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id.to_def_id());\n \n         // Require that the hidden type actually fulfills all the bounds of the opaque type, even without\n         // the bounds that the function supplies.\n         let opaque_ty = self.tcx.mk_opaque(def_id.to_def_id(), id_substs);\n-        match infcx\n-            .at(&ObligationCause::misc(instantiated_ty.span, body_id), param_env)\n-            .eq(opaque_ty, definition_ty)\n-        {\n-            Ok(infer_ok) => {\n-                for obligation in infer_ok.obligations {\n-                    fulfillment_cx.register_predicate_obligation(&infcx, obligation);\n-                }\n-            }\n-            Err(err) => {\n-                infcx\n-                    .err_ctxt()\n-                    .report_mismatched_types(\n-                        &ObligationCause::misc(instantiated_ty.span, body_id),\n-                        opaque_ty,\n-                        definition_ty,\n-                        err,\n-                    )\n-                    .emit();\n-            }\n+        if let Err(err) = ocx.eq(\n+            &ObligationCause::misc(instantiated_ty.span, body_id),\n+            param_env,\n+            opaque_ty,\n+            definition_ty,\n+        ) {\n+            infcx\n+                .err_ctxt()\n+                .report_mismatched_types(\n+                    &ObligationCause::misc(instantiated_ty.span, body_id),\n+                    opaque_ty,\n+                    definition_ty,\n+                    err,\n+                )\n+                .emit();\n         }\n \n-        fulfillment_cx.register_predicate_obligation(\n-            &infcx,\n-            Obligation::misc(instantiated_ty.span, body_id, param_env, predicate),\n-        );\n+        ocx.register_obligation(Obligation::misc(\n+            instantiated_ty.span,\n+            body_id,\n+            param_env,\n+            predicate,\n+        ));\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        let errors = fulfillment_cx.select_all_or_error(&infcx);\n+        let errors = ocx.select_all_or_error();\n \n         // This is still required for many(half of the tests in ui/type-alias-impl-trait)\n         // tests to pass"}, {"sha": "219a4f8fa89594a909cfb3936557c950067fdac9", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -285,13 +285,13 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n         let mut attrs = SmallVec::<[_; 2]>::new();\n         if options.contains(InlineAsmOptions::PURE) {\n             if options.contains(InlineAsmOptions::NOMEM) {\n-                attrs.push(llvm::AttributeKind::ReadNone.create_attr(self.cx.llcx));\n+                attrs.push(llvm::MemoryEffects::None.create_attr(self.cx.llcx));\n             } else if options.contains(InlineAsmOptions::READONLY) {\n-                attrs.push(llvm::AttributeKind::ReadOnly.create_attr(self.cx.llcx));\n+                attrs.push(llvm::MemoryEffects::ReadOnly.create_attr(self.cx.llcx));\n             }\n             attrs.push(llvm::AttributeKind::WillReturn.create_attr(self.cx.llcx));\n         } else if options.contains(InlineAsmOptions::NOMEM) {\n-            attrs.push(llvm::AttributeKind::InaccessibleMemOnly.create_attr(self.cx.llcx));\n+            attrs.push(llvm::MemoryEffects::InaccessibleMemOnly.create_attr(self.cx.llcx));\n         } else {\n             // LLVM doesn't have an attribute to represent ReadOnly + SideEffect\n         }"}, {"sha": "d96da5cc11d1f72fba53e7116afb7810ca11d39c", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -13,7 +13,7 @@ use smallvec::SmallVec;\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n-use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace};\n+use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace, MemoryEffects};\n use crate::llvm_util;\n pub use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n \n@@ -303,10 +303,10 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         to_add.push(AttributeKind::ReturnsTwice.create_attr(cx.llcx));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_PURE) {\n-        to_add.push(AttributeKind::ReadOnly.create_attr(cx.llcx));\n+        to_add.push(MemoryEffects::ReadOnly.create_attr(cx.llcx));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_CONST) {\n-        to_add.push(AttributeKind::ReadNone.create_attr(cx.llcx));\n+        to_add.push(MemoryEffects::None.create_attr(cx.llcx));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n         to_add.push(AttributeKind::Naked.create_attr(cx.llcx));"}, {"sha": "e2d0390821d1eb780fb387f5412cc225f325586c", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -183,7 +183,6 @@ pub enum AttributeKind {\n     OptimizeNone = 24,\n     ReturnsTwice = 25,\n     ReadNone = 26,\n-    InaccessibleMemOnly = 27,\n     SanitizeHWAddress = 28,\n     WillReturn = 29,\n     StackProtectReq = 30,\n@@ -590,6 +589,15 @@ pub enum ChecksumKind {\n     SHA256,\n }\n \n+/// LLVMRustMemoryEffects\n+#[derive(Copy, Clone)]\n+#[repr(C)]\n+pub enum MemoryEffects {\n+    None,\n+    ReadOnly,\n+    InaccessibleMemOnly,\n+}\n+\n extern \"C\" {\n     type Opaque;\n }\n@@ -1175,6 +1183,7 @@ extern \"C\" {\n     pub fn LLVMRustCreateUWTableAttr(C: &Context, async_: bool) -> &Attribute;\n     pub fn LLVMRustCreateAllocSizeAttr(C: &Context, size_arg: u32) -> &Attribute;\n     pub fn LLVMRustCreateAllocKindAttr(C: &Context, size_arg: u64) -> &Attribute;\n+    pub fn LLVMRustCreateMemoryEffectsAttr(C: &Context, effects: MemoryEffects) -> &Attribute;\n \n     // Operations on functions\n     pub fn LLVMRustGetOrInsertFunction<'a>("}, {"sha": "f820e7523712ce541fc32cb1a71dd69623e8a639", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -185,6 +185,13 @@ impl AttributeKind {\n     }\n }\n \n+impl MemoryEffects {\n+    /// Create an LLVM Attribute with these memory effects.\n+    pub fn create_attr(self, llcx: &Context) -> &Attribute {\n+        unsafe { LLVMRustCreateMemoryEffectsAttr(llcx, self) }\n+    }\n+}\n+\n pub fn set_section(llglobal: &Value, section_name: &str) {\n     let section_name_cstr = CString::new(section_name).expect(\"unexpected CString error\");\n     unsafe {"}, {"sha": "b1ad22b899e30215f339ed97c5c0d2496bb8ff00", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -13,11 +13,8 @@ use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty,\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef, TypeVisitable};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n-use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{\n-    self, ObligationCauseCode, SelectionContext, TraitEngine, TraitEngineExt,\n-};\n+use rustc_trait_selection::traits::{self, ObligationCauseCode, ObligationCtxt, SelectionContext};\n \n use std::mem;\n use std::ops::Deref;\n@@ -747,35 +744,26 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     // \"non-const\" check. This is required for correctness here.\n                     {\n                         let infcx = tcx.infer_ctxt().build();\n-                        let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n+                        let ocx = ObligationCtxt::new(&infcx);\n+\n                         let predicates = tcx.predicates_of(callee).instantiate(tcx, substs);\n                         let hir_id = tcx\n                             .hir()\n                             .local_def_id_to_hir_id(self.body.source.def_id().expect_local());\n-                        let cause = || {\n-                            ObligationCause::new(\n-                                terminator.source_info.span,\n-                                hir_id,\n-                                ObligationCauseCode::ItemObligation(callee),\n-                            )\n-                        };\n-                        let normalized = infcx.partially_normalize_associated_types_in(\n-                            cause(),\n-                            param_env,\n-                            predicates,\n+                        let cause = ObligationCause::new(\n+                            terminator.source_info.span,\n+                            hir_id,\n+                            ObligationCauseCode::ItemObligation(callee),\n                         );\n-\n-                        for p in normalized.obligations {\n-                            fulfill_cx.register_predicate_obligation(&infcx, p);\n-                        }\n-                        for obligation in traits::predicates_for_generics(\n-                            |_, _| cause(),\n+                        let normalized_predicates =\n+                            ocx.normalize(cause.clone(), param_env, predicates);\n+                        ocx.register_obligations(traits::predicates_for_generics(\n+                            |_, _| cause.clone(),\n                             self.param_env,\n-                            normalized.value,\n-                        ) {\n-                            fulfill_cx.register_predicate_obligation(&infcx, obligation);\n-                        }\n-                        let errors = fulfill_cx.select_all_or_error(&infcx);\n+                            normalized_predicates,\n+                        ));\n+\n+                        let errors = ocx.select_all_or_error();\n                         if !errors.is_empty() {\n                             infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n                         }"}, {"sha": "c6b497e9b9fc40aad71e61a8d16ef285c4cdea9b", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1655,13 +1655,10 @@ pub fn check_type_bounds<'tcx>(\n         GenericParamDefKind::Const { .. } => {\n             let bound_var = ty::BoundVariableKind::Const;\n             bound_vars.push(bound_var);\n-            tcx.mk_const(ty::ConstS {\n-                ty: tcx.type_of(param.def_id),\n-                kind: ty::ConstKind::Bound(\n-                    ty::INNERMOST,\n-                    ty::BoundVar::from_usize(bound_vars.len() - 1),\n-                ),\n-            })\n+            tcx.mk_const(\n+                ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(bound_vars.len() - 1)),\n+                tcx.type_of(param.def_id),\n+            )\n             .into()\n         }\n     });"}, {"sha": "8598369e884b4e4a1fccbb0fdcb4352619ea0919", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -19,7 +19,7 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{FulfillmentError, TraitEngine, TraitEngineExt};\n+use rustc_trait_selection::traits::FulfillmentError;\n use rustc_type_ir::sty::TyKind::*;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -785,9 +785,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     other_ty_expr,\n                     expected,\n                 );\n-                let mut fulfill = <dyn TraitEngine<'_>>::new(self.tcx);\n-                fulfill.register_predicate_obligation(self, obligation);\n-                Err(fulfill.select_where_possible(&self.infcx))\n+                Err(rustc_trait_selection::traits::fully_solve_obligation(self, obligation))\n             }\n         }\n     }"}, {"sha": "365b4b1fccdb4ef8ad018c5dd3c88a85751d33b9", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -773,10 +773,10 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_const(bound_to)\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n-            self.tcx().mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Bound(self.binder_index, var),\n-                ty: self.fold_ty(const_var.ty()),\n-            })\n+            self.tcx().mk_const(\n+                ty::ConstKind::Bound(self.binder_index, var),\n+                self.fold_ty(const_var.ty()),\n+            )\n         }\n     }\n }"}, {"sha": "0794792d8cb3786311cc2758fb8f647cfcebb7ad", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -147,12 +147,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }, ty) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n-                self.tcx\n-                    .mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Placeholder(placeholder_mapped),\n-                        ty,\n-                    })\n-                    .into()\n+                self.tcx.mk_const(ty::ConstKind::Placeholder(placeholder_mapped), ty).into()\n             }\n         }\n     }"}, {"sha": "a973bf54b055eb7b98ca89147abc3d3f1f8007d5", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -741,10 +741,10 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     substs,\n                     substs,\n                 )?;\n-                Ok(self.tcx().mk_const(ty::ConstS {\n-                    ty: c.ty(),\n-                    kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                }))\n+                Ok(self.tcx().mk_const(\n+                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n+                    c.ty(),\n+                ))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n@@ -955,10 +955,10 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     substs,\n                 )?;\n \n-                Ok(self.tcx().mk_const(ty::ConstS {\n-                    ty: c.ty(),\n-                    kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                }))\n+                Ok(self.tcx().mk_const(\n+                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n+                    c.ty(),\n+                ))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }"}, {"sha": "d739323de77c817d7bbe41e3ea2fee0e70b15297", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -94,13 +94,13 @@ impl<'tcx> InferCtxt<'tcx> {\n                 }))\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n-                self.tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                self.tcx.mk_const(\n+                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: next_universe,\n                         name: bound_var,\n                     }),\n                     ty,\n-                })\n+                )\n             },\n         };\n "}, {"sha": "c2eecd9e87a384f16725433eb85bd9ddd0d97059", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -2065,13 +2065,13 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                 if ty.has_non_region_param() || ty.has_non_region_infer() {\n                     bug!(\"const `{ct}`'s type should not reference params or types\");\n                 }\n-                tcx.mk_const(ty::ConstS {\n-                    ty,\n-                    kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                tcx.mk_const(\n+                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n                         name: ty::BoundVar::from_usize(idx),\n                     }),\n-                })\n+                    ty,\n+                )\n                 .into()\n             }\n             _ => arg,"}, {"sha": "4187850153ccd001c22f3659f4803a0f5b1ea75c", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -3,11 +3,9 @@ use crate::{LateContext, LateLintPass, LintContext};\n use hir::{Expr, Pat};\n use rustc_errors::{Applicability, DelayDm};\n use rustc_hir as hir;\n-use rustc_infer::traits::TraitEngine;\n use rustc_infer::{infer::TyCtxtInferExt, traits::ObligationCause};\n use rustc_middle::ty::{self, List};\n use rustc_span::{sym, Span};\n-use rustc_trait_selection::traits::TraitEngineExt;\n \n declare_lint! {\n     /// The `for_loops_over_fallibles` lint checks for `for` loops over `Option` or `Result` values.\n@@ -160,24 +158,19 @@ fn suggest_question_mark<'tcx>(\n \n     let ty = substs.type_at(0);\n     let infcx = cx.tcx.infer_ctxt().build();\n-    let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n-\n     let cause = ObligationCause::new(\n         span,\n         body_id.hir_id,\n         rustc_infer::traits::ObligationCauseCode::MiscObligation,\n     );\n-    fulfill_cx.register_bound(\n+    let errors = rustc_trait_selection::traits::fully_solve_bound(\n         &infcx,\n+        cause,\n         ty::ParamEnv::empty(),\n         // Erase any region vids from the type, which may not be resolved\n         infcx.tcx.erase_regions(ty),\n         into_iterator_did,\n-        cause,\n     );\n \n-    // Select all, including ambiguous predicates\n-    let errors = fulfill_cx.select_all_or_error(&infcx);\n-\n     errors.is_empty()\n }"}, {"sha": "727cfc4416ee94889cef6eb11cc01f98e120ab45", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -76,7 +76,6 @@ enum LLVMRustAttribute {\n   OptimizeNone = 24,\n   ReturnsTwice = 25,\n   ReadNone = 26,\n-  InaccessibleMemOnly = 27,\n   SanitizeHWAddress = 28,\n   WillReturn = 29,\n   StackProtectReq = 30,"}, {"sha": "0d9b5a57b69a2dc719d72ebd7792af14d4b2da9b", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -8,6 +8,9 @@\n #include \"llvm/IR/Intrinsics.h\"\n #include \"llvm/IR/IntrinsicsARM.h\"\n #include \"llvm/IR/Mangler.h\"\n+#if LLVM_VERSION_GE(16, 0)\n+#include \"llvm/IR/ModRef.h\"\n+#endif\n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/COFFImportFile.h\"\n #include \"llvm/Object/ObjectFile.h\"\n@@ -213,8 +216,6 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ReturnsTwice;\n   case ReadNone:\n     return Attribute::ReadNone;\n-  case InaccessibleMemOnly:\n-    return Attribute::InaccessibleMemOnly;\n   case SanitizeHWAddress:\n     return Attribute::SanitizeHWAddress;\n   case WillReturn:\n@@ -379,6 +380,43 @@ extern \"C\" LLVMAttributeRef LLVMRustCreateAllocKindAttr(LLVMContextRef C, uint64\n #endif\n }\n \n+// Simplified representation of `MemoryEffects` across the FFI boundary.\n+//\n+// Each variant corresponds to one of the static factory methods on `MemoryEffects`.\n+enum class LLVMRustMemoryEffects {\n+  None,\n+  ReadOnly,\n+  InaccessibleMemOnly,\n+};\n+\n+extern \"C\" LLVMAttributeRef LLVMRustCreateMemoryEffectsAttr(LLVMContextRef C,\n+                                                            LLVMRustMemoryEffects Effects) {\n+#if LLVM_VERSION_GE(16, 0)\n+  switch (Effects) {\n+    case LLVMRustMemoryEffects::None:\n+      return wrap(Attribute::getWithMemoryEffects(*unwrap(C), MemoryEffects::none()));\n+    case LLVMRustMemoryEffects::ReadOnly:\n+      return wrap(Attribute::getWithMemoryEffects(*unwrap(C), MemoryEffects::readOnly()));\n+    case LLVMRustMemoryEffects::InaccessibleMemOnly:\n+      return wrap(Attribute::getWithMemoryEffects(*unwrap(C),\n+                                                  MemoryEffects::inaccessibleMemOnly()));\n+    default:\n+      report_fatal_error(\"bad MemoryEffects.\");\n+  }\n+#else\n+  switch (Effects) {\n+    case LLVMRustMemoryEffects::None:\n+      return wrap(Attribute::get(*unwrap(C), Attribute::ReadNone));\n+    case LLVMRustMemoryEffects::ReadOnly:\n+      return wrap(Attribute::get(*unwrap(C), Attribute::ReadOnly));\n+    case LLVMRustMemoryEffects::InaccessibleMemOnly:\n+      return wrap(Attribute::get(*unwrap(C), Attribute::InaccessibleMemOnly));\n+    default:\n+      report_fatal_error(\"bad MemoryEffects.\");\n+  }\n+#endif\n+}\n+\n // Enable a fast-math flag\n //\n // https://llvm.org/docs/LangRef.html#fast-math-flags"}, {"sha": "8d1ed4b2a5228d4a82560676f93f400e7f7ea757", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -341,10 +341,10 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                         tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n                     }\n                     GenericArgKind::Const(ct) => tcx\n-                        .mk_const(ty::ConstS {\n-                            ty: ct.ty(),\n-                            kind: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n-                        })\n+                        .mk_const(\n+                            ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n+                            ct.ty(),\n+                        )\n                         .into(),\n                 })\n                 .collect(),"}, {"sha": "0a96d23e3543b49306b959ff04bc65fa04a54cfa", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -2414,10 +2414,8 @@ impl<'tcx> ConstantKind<'tcx> {\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n-                let ty_const = tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n-                    ty,\n-                });\n+                let ty_const =\n+                    tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty);\n                 debug!(?ty_const);\n \n                 return Self::Ty(ty_const);"}, {"sha": "7263e8306cf0933d52a5bd30d0b2f4d0e878450e", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -310,7 +310,8 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::Const<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n-        decoder.interner().mk_const(Decodable::decode(decoder))\n+        let consts: ty::ConstS<'tcx> = Decodable::decode(decoder);\n+        decoder.interner().mk_const(consts.kind, consts.ty)\n     }\n }\n "}, {"sha": "33fdf1a83709465ed858e95f839111412dc37c43", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -77,13 +77,13 @@ impl<'tcx> Const<'tcx> {\n \n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n-            None => tcx.mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst {\n+            None => tcx.mk_const(\n+                ty::ConstKind::Unevaluated(ty::UnevaluatedConst {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                 }),\n                 ty,\n-            }),\n+            ),\n         }\n     }\n \n@@ -138,10 +138,7 @@ impl<'tcx> Const<'tcx> {\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n-                Some(tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n-                    ty,\n-                }))\n+                Some(tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty))\n             }\n             _ => None,\n         }\n@@ -150,7 +147,7 @@ impl<'tcx> Const<'tcx> {\n     /// Interns the given value as a constant.\n     #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ty::ValTree<'tcx>, ty: Ty<'tcx>) -> Self {\n-        tcx.mk_const(ConstS { kind: ConstKind::Value(val), ty })\n+        tcx.mk_const(ConstKind::Value(val), ty)\n     }\n \n     /// Panics if self.kind != ty::ConstKind::Value"}, {"sha": "e039436fe0afa69c0108293c2cb792d6f8cacbfd", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1316,7 +1316,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         msg: &str,\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Error(reported), ty })\n+        self.mk_const(ty::ConstKind::Error(reported), ty)\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n@@ -2231,7 +2231,7 @@ macro_rules! direct_interners {\n \n direct_interners! {\n     region: mk_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n-    const_: mk_const(ConstS<'tcx>): Const -> Const<'tcx>,\n+    const_: mk_const_internal(ConstS<'tcx>): Const -> Const<'tcx>,\n     const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n     layout: intern_layout(LayoutS<'tcx>): Layout -> Layout<'tcx>,\n     adt_def: intern_adt_def(AdtDefData): AdtDef -> AdtDef<'tcx>,\n@@ -2569,9 +2569,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty_infer(TyVar(v))\n     }\n \n+    #[inline]\n+    pub fn mk_const(self, kind: ty::ConstKind<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const_internal(ty::ConstS { kind, ty })\n+    }\n+\n     #[inline]\n     pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Infer(InferConst::Var(v)), ty })\n+        self.mk_const(ty::ConstKind::Infer(InferConst::Var(v)), ty)\n     }\n \n     #[inline]\n@@ -2591,7 +2596,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Infer(ic), ty })\n+        self.mk_const(ty::ConstKind::Infer(ic), ty)\n     }\n \n     #[inline]\n@@ -2601,7 +2606,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Param(ParamConst { index, name }), ty })\n+        self.mk_const(ty::ConstKind::Param(ParamConst { index, name }), ty)\n     }\n \n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {"}, {"sha": "a329753726ef2b91a114d9e3d24a9862226e1525", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -566,10 +566,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     ))\n                 },\n                 consts: &mut |c, ty: Ty<'tcx>| {\n-                    self.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)),\n-                        ty,\n-                    })\n+                    self.mk_const(ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)), ty)\n                 },\n             },\n         )\n@@ -648,7 +645,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let () = entry.or_insert_with(|| ty::BoundVariableKind::Const).expect_const();\n-                self.tcx.mk_const(ty::ConstS { ty, kind: ty::ConstKind::Bound(ty::INNERMOST, var) })\n+                self.tcx.mk_const(ty::ConstKind::Bound(ty::INNERMOST, var), ty)\n             }\n         }\n \n@@ -732,10 +729,7 @@ impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n                 ct\n             } else {\n                 let debruijn = debruijn.shifted_in(self.amount);\n-                self.tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Bound(debruijn, bound_ct),\n-                    ty: ct.ty(),\n-                })\n+                self.tcx.mk_const(ty::ConstKind::Bound(debruijn, bound_ct), ct.ty())\n             }\n         } else {\n             ct.super_fold_with(self)"}, {"sha": "c083a405e3cfb605252b89902a4a6efe4f7007b0", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -639,10 +639,10 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 au.substs,\n                 bu.substs,\n             )?;\n-            return Ok(tcx.mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def: au.def, substs }),\n-                ty: a.ty(),\n-            }));\n+            return Ok(tcx.mk_const(\n+                ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def: au.def, substs }),\n+                a.ty(),\n+            ));\n         }\n         _ => false,\n     };"}, {"sha": "f2070869ce0cd887cf5ae297121ef41f95d6cdad", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -805,7 +805,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n         let ty = self.ty().try_fold_with(folder)?;\n         let kind = self.kind().try_fold_with(folder)?;\n         if ty != self.ty() || kind != self.kind() {\n-            Ok(folder.tcx().mk_const(ty::ConstS { ty, kind }))\n+            Ok(folder.tcx().mk_const(kind, ty))\n         } else {\n             Ok(self)\n         }"}, {"sha": "98df9c3f0e8df364a961a1f6d8f9699d554058ab", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -74,8 +74,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { user_ty, span, literal }\n             }\n             ExprKind::ConstParam { param, def_id: _ } => {\n-                let const_param =\n-                    tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Param(param), ty: expr.ty });\n+                let const_param = tcx.mk_const(ty::ConstKind::Param(param), expr.ty);\n                 let literal = ConstantKind::Ty(const_param);\n \n                 Constant { user_ty: None, span, literal }"}, {"sha": "dfd8649cb97e7f716e5ab3218b9157cb192a732d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -364,12 +364,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let arm_block = this.bind_pattern(\n                         outer_source_info,\n                         candidate,\n-                        arm.guard.as_ref(),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n-                        Some(arm.span),\n-                        Some(arm.scope),\n-                        Some(match_scope),\n+                        Some((arm, match_scope)),\n                         false,\n                     );\n \n@@ -410,12 +407,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         outer_source_info: SourceInfo,\n         candidate: Candidate<'_, 'tcx>,\n-        guard: Option<&Guard<'tcx>>,\n         fake_borrow_temps: &[(Place<'tcx>, Local)],\n         scrutinee_span: Span,\n-        arm_span: Option<Span>,\n-        arm_scope: Option<region::Scope>,\n-        match_scope: Option<region::Scope>,\n+        arm_match_scope: Option<(&Arm<'tcx>, region::Scope)>,\n         storages_alive: bool,\n     ) -> BasicBlock {\n         if candidate.subcandidates.is_empty() {\n@@ -424,11 +418,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.bind_and_guard_matched_candidate(\n                 candidate,\n                 &[],\n-                guard,\n                 fake_borrow_temps,\n                 scrutinee_span,\n-                arm_span,\n-                match_scope,\n+                arm_match_scope,\n                 true,\n                 storages_alive,\n             )\n@@ -449,28 +441,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // we lower the guard.\n             let target_block = self.cfg.start_new_block();\n             let mut schedule_drops = true;\n+            let arm = arm_match_scope.unzip().0;\n             // We keep a stack of all of the bindings and type ascriptions\n             // from the parent candidates that we visit, that also need to\n             // be bound for each candidate.\n             traverse_candidate(\n                 candidate,\n                 &mut Vec::new(),\n                 &mut |leaf_candidate, parent_bindings| {\n-                    if let Some(arm_scope) = arm_scope {\n-                        self.clear_top_scope(arm_scope);\n+                    if let Some(arm) = arm {\n+                        self.clear_top_scope(arm.scope);\n                     }\n                     let binding_end = self.bind_and_guard_matched_candidate(\n                         leaf_candidate,\n                         parent_bindings,\n-                        guard,\n                         &fake_borrow_temps,\n                         scrutinee_span,\n-                        arm_span,\n-                        match_scope,\n+                        arm_match_scope,\n                         schedule_drops,\n                         storages_alive,\n                     );\n-                    if arm_scope.is_none() {\n+                    if arm.is_none() {\n                         schedule_drops = false;\n                     }\n                     self.cfg.goto(binding_end, outer_source_info, target_block);\n@@ -636,12 +627,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.bind_pattern(\n             self.source_info(irrefutable_pat.span),\n             candidate,\n-            None,\n             &fake_borrow_temps,\n             irrefutable_pat.span,\n             None,\n-            None,\n-            None,\n             false,\n         )\n         .unit()\n@@ -1820,12 +1808,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let post_guard_block = self.bind_pattern(\n             self.source_info(pat.span),\n             guard_candidate,\n-            None,\n             &fake_borrow_temps,\n             expr.span,\n             None,\n-            None,\n-            None,\n             false,\n         );\n \n@@ -1844,11 +1829,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         candidate: Candidate<'pat, 'tcx>,\n         parent_bindings: &[(Vec<Binding<'tcx>>, Vec<Ascription<'tcx>>)],\n-        guard: Option<&Guard<'tcx>>,\n         fake_borrows: &[(Place<'tcx>, Local)],\n         scrutinee_span: Span,\n-        arm_span: Option<Span>,\n-        match_scope: Option<region::Scope>,\n+        arm_match_scope: Option<(&Arm<'tcx>, region::Scope)>,\n         schedule_drops: bool,\n         storages_alive: bool,\n     ) -> BasicBlock {\n@@ -1960,7 +1943,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         //      the reference that we create for the arm.\n         //    * So we eagerly create the reference for the arm and then take a\n         //      reference to that.\n-        if let Some(guard) = guard {\n+        if let Some((arm, match_scope)) = arm_match_scope\n+            && let Some(guard) = &arm.guard\n+        {\n             let tcx = self.tcx;\n             let bindings = parent_bindings\n                 .iter()\n@@ -1981,8 +1966,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(block, scrutinee_source_info, Place::from(temp), borrow);\n             }\n \n-            let arm_span = arm_span.unwrap();\n-            let match_scope = match_scope.unwrap();\n             let mut guard_span = rustc_span::DUMMY_SP;\n \n             let (post_guard_block, otherwise_post_guard_block) =\n@@ -1995,13 +1978,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             e,\n                             None,\n                             match_scope,\n-                            this.source_info(arm_span),\n+                            this.source_info(arm.span),\n                         )\n                     }\n                     Guard::IfLet(ref pat, scrutinee) => {\n                         let s = &this.thir[scrutinee];\n                         guard_span = s.span;\n-                        this.lower_let_expr(block, s, pat, match_scope, None, arm_span)\n+                        this.lower_let_expr(block, s, pat, match_scope, None, arm.span)\n                     }\n                 });\n \n@@ -2317,24 +2300,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let matching = this.bind_pattern(\n                 this.source_info(pattern.span),\n                 candidate,\n-                None,\n                 &fake_borrow_temps,\n                 initializer_span,\n                 None,\n-                None,\n-                None,\n                 true,\n             );\n             // This block is for the failure case\n             let failure = this.bind_pattern(\n                 this.source_info(else_block_span),\n                 wildcard,\n-                None,\n                 &fake_borrow_temps,\n                 initializer_span,\n                 None,\n-                None,\n-                None,\n                 true,\n             );\n             this.break_for_else(failure, *let_else_scope, this.source_info(initializer_span));"}, {"sha": "2109b3c24962e6b4db7d1d01637decdcdeeb7f7b", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -654,8 +654,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                             .builtin_deref(true)\n                             .expect(\"tried to dereference on non-ptr type\")\n                             .ty;\n-                        let dereferenced_const =\n-                            self.tcx.mk_const(ty::ConstS { kind: ct.kind(), ty: pointee_ty });\n+                        let dereferenced_const = self.tcx.mk_const(ct.kind(), pointee_ty);\n                         self = dereferenced_const.print(self)?;\n                     }\n                 }"}, {"sha": "b1a161c353637610c4d3fd3caad65ed26bb0219e", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::InferCtxt;\n use crate::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use crate::traits::query::NoSolution;\n-use crate::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n+use crate::traits::ObligationCause;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::HirId;\n@@ -74,20 +74,20 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n             debug!(?constraints);\n             // Instantiation may have produced new inference variables and constraints on those\n             // variables. Process these constraints.\n-            let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(self.tcx);\n             let cause = ObligationCause::misc(span, body_id);\n-            for &constraint in &constraints.outlives {\n-                let obligation = self.query_outlives_constraint_to_obligation(\n-                    constraint,\n-                    cause.clone(),\n-                    param_env,\n-                );\n-                fulfill_cx.register_predicate_obligation(self, obligation);\n-            }\n+            let errors = super::fully_solve_obligations(\n+                self,\n+                constraints.outlives.iter().map(|constraint| {\n+                    self.query_outlives_constraint_to_obligation(\n+                        *constraint,\n+                        cause.clone(),\n+                        param_env,\n+                    )\n+                }),\n+            );\n             if !constraints.member_constraints.is_empty() {\n                 span_bug!(span, \"{:#?}\", constraints.member_constraints);\n             }\n-            let errors = fulfill_cx.select_all_or_error(self);\n             if !errors.is_empty() {\n                 self.tcx.sess.delay_span_bug(\n                     span,"}, {"sha": "daee5dd8f02e6ed14a210c950bdf429a59d1b25c", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -831,9 +831,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderConst { universe, name: bound_const };\n                 self.mapped_consts.insert(p, bound_const);\n-                self.infcx\n-                    .tcx\n-                    .mk_const(ty::ConstS { kind: ty::ConstKind::Placeholder(p), ty: ct.ty() })\n+                self.infcx.tcx.mk_const(ty::ConstKind::Placeholder(p), ct.ty())\n             }\n             _ => ct.super_fold_with(self),\n         }\n@@ -968,10 +966,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                     let db = ty::DebruijnIndex::from_usize(\n                         self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                     );\n-                    self.tcx().mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Bound(db, *replace_var),\n-                        ty: ct.ty(),\n-                    })\n+                    self.tcx().mk_const(ty::ConstKind::Bound(db, *replace_var), ct.ty())\n                 }\n                 None => ct,\n             }\n@@ -2173,7 +2168,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n             crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n         let kind = ty::ConstKind::Unevaluated(ty::UnevaluatedConst::new(did, identity_substs));\n-        ty.map_bound(|ty| tcx.mk_const(ty::ConstS { ty, kind }).into())\n+        ty.map_bound(|ty| tcx.mk_const(kind, ty).into())\n     } else {\n         ty.map_bound(|ty| ty.into())\n     };"}, {"sha": "28b4bae7cbecf2c44e6f50c86d4d7f78147d2d10", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -555,13 +555,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             GenericParamDefKind::Const { .. } => {\n                                 let bound_var = ty::BoundVariableKind::Const;\n                                 bound_vars.push(bound_var);\n-                                tcx.mk_const(ty::ConstS {\n-                                    ty: tcx.type_of(param.def_id),\n-                                    kind: ty::ConstKind::Bound(\n+                                tcx.mk_const(\n+                                    ty::ConstKind::Bound(\n                                         ty::INNERMOST,\n                                         ty::BoundVar::from_usize(bound_vars.len() - 1),\n                                     ),\n-                                })\n+                                    tcx.type_of(param.def_id),\n+                                )\n                                 .into()\n                             }\n                         });"}, {"sha": "2035252fe39a63bb66611c6e84cfebab0e954541", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -734,10 +734,10 @@ fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx\n         }\n \n         ty::GenericParamDefKind::Const { .. } => tcx\n-            .mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n-                ty: tcx.type_of(param.def_id),\n-            })\n+            .mk_const(\n+                ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n+                tcx.type_of(param.def_id),\n+            )\n             .into(),\n     })\n }"}, {"sha": "0492e94b94e9830d602f2cdee3a8940abf488cb7", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -546,7 +546,7 @@ impl<'tcx> LowerInto<'tcx, ty::Const<'tcx>> for &chalk_ir::Const<RustInterner<'t\n             chalk_ir::ConstValue::Placeholder(_p) => unimplemented!(),\n             chalk_ir::ConstValue::Concrete(c) => ty::ConstKind::Value(c.interned),\n         };\n-        interner.tcx.mk_const(ty::ConstS { ty, kind })\n+        interner.tcx.mk_const(kind, ty)\n     }\n }\n "}, {"sha": "3cef47c0f8ba481d2b3bde2a117b38be3ae5bb18", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn destructure_const<'tcx>(\n             // construct the consts for the elements of the array/slice\n             let field_consts = branches\n                 .iter()\n-                .map(|b| tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty }))\n+                .map(|b| tcx.mk_const(ty::ConstKind::Value(*b), *inner_ty))\n                 .collect::<Vec<_>>();\n             debug!(?field_consts);\n \n@@ -52,10 +52,7 @@ pub(crate) fn destructure_const<'tcx>(\n \n             for (field, field_valtree) in iter::zip(fields, branches) {\n                 let field_ty = field.ty(tcx, substs);\n-                let field_const = tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Value(*field_valtree),\n-                    ty: field_ty,\n-                });\n+                let field_const = tcx.mk_const(ty::ConstKind::Value(*field_valtree), field_ty);\n                 field_consts.push(field_const);\n             }\n             debug!(?field_consts);\n@@ -65,10 +62,7 @@ pub(crate) fn destructure_const<'tcx>(\n         ty::Tuple(elem_tys) => {\n             let fields = iter::zip(*elem_tys, branches)\n                 .map(|(elem_ty, elem_valtree)| {\n-                    tcx.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Value(*elem_valtree),\n-                        ty: elem_ty,\n-                    })\n+                    tcx.mk_const(ty::ConstKind::Value(*elem_valtree), elem_ty)\n                 })\n                 .collect::<Vec<_>>();\n \n@@ -261,17 +255,13 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let uneval =\n                     ty::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n \n-                let constant = self\n-                    .tcx\n-                    .mk_const(ty::ConstS { kind: ty::ConstKind::Unevaluated(uneval), ty: node.ty });\n+                let constant = self.tcx.mk_const(ty::ConstKind::Unevaluated(uneval), node.ty);\n \n                 self.nodes.push(Node::Leaf(constant))\n             }\n \n             ExprKind::ConstParam { param, .. } => {\n-                let const_param = self\n-                    .tcx\n-                    .mk_const(ty::ConstS { kind: ty::ConstKind::Param(*param), ty: node.ty });\n+                let const_param = self.tcx.mk_const(ty::ConstKind::Param(*param), node.ty);\n                 self.nodes.push(Node::Leaf(const_param))\n             }\n "}, {"sha": "21dc11c48081e8f18ac2da327378772b85a5cd8c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1380,21 +1380,46 @@ impl Config {\n         git\n     }\n \n-    pub(crate) fn artifact_channel(&self, builder: &Builder<'_>, commit: &str) -> String {\n-        if builder.rust_info.is_managed_git_subrepository() {\n+    /// Bootstrap embeds a version number into the name of shared libraries it uploads in CI.\n+    /// Return the version it would have used for the given commit.\n+    pub(crate) fn artifact_version_part(&self, builder: &Builder<'_>, commit: &str) -> String {\n+        let (channel, version) = if builder.rust_info.is_managed_git_subrepository() {\n             let mut channel = self.git();\n             channel.arg(\"show\").arg(format!(\"{}:src/ci/channel\", commit));\n             let channel = output(&mut channel);\n-            channel.trim().to_owned()\n-        } else if let Ok(channel) = fs::read_to_string(builder.src.join(\"src/ci/channel\")) {\n-            channel.trim().to_owned()\n+            let mut version = self.git();\n+            version.arg(\"show\").arg(format!(\"{}:src/version\", commit));\n+            let version = output(&mut version);\n+            (channel.trim().to_owned(), version.trim().to_owned())\n         } else {\n-            let src = builder.src.display();\n-            eprintln!(\"error: failed to determine artifact channel\");\n-            eprintln!(\n-                \"help: either use git or ensure that {src}/src/ci/channel contains the name of the channel to use\"\n-            );\n-            panic!();\n+            let channel = fs::read_to_string(builder.src.join(\"src/ci/channel\"));\n+            let version = fs::read_to_string(builder.src.join(\"src/version\"));\n+            match (channel, version) {\n+                (Ok(channel), Ok(version)) => {\n+                    (channel.trim().to_owned(), version.trim().to_owned())\n+                }\n+                (channel, version) => {\n+                    let src = builder.src.display();\n+                    eprintln!(\"error: failed to determine artifact channel and/or version\");\n+                    eprintln!(\n+                        \"help: consider using a git checkout or ensure these files are readable\"\n+                    );\n+                    if let Err(channel) = channel {\n+                        eprintln!(\"reading {}/src/ci/channel failed: {:?}\", src, channel);\n+                    }\n+                    if let Err(version) = version {\n+                        eprintln!(\"reading {}/src/version failed: {:?}\", src, version);\n+                    }\n+                    panic!();\n+                }\n+            }\n+        };\n+\n+        match channel.as_str() {\n+            \"stable\" => version,\n+            \"beta\" => channel,\n+            \"nightly\" => channel,\n+            other => unreachable!(\"{:?} is not recognized as a valid channel\", other),\n         }\n     }\n \n@@ -1637,7 +1662,7 @@ fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n \n fn download_ci_rustc(builder: &Builder<'_>, commit: &str) {\n     builder.verbose(&format!(\"using downloaded stage2 artifacts from CI (commit {commit})\"));\n-    let channel = builder.config.artifact_channel(builder, commit);\n+    let version = builder.config.artifact_version_part(builder, commit);\n     let host = builder.config.build.triple;\n     let bin_root = builder.out.join(host).join(\"ci-rustc\");\n     let rustc_stamp = bin_root.join(\".rustc-stamp\");\n@@ -1646,13 +1671,13 @@ fn download_ci_rustc(builder: &Builder<'_>, commit: &str) {\n         if bin_root.exists() {\n             t!(fs::remove_dir_all(&bin_root));\n         }\n-        let filename = format!(\"rust-std-{channel}-{host}.tar.xz\");\n+        let filename = format!(\"rust-std-{version}-{host}.tar.xz\");\n         let pattern = format!(\"rust-std-{host}\");\n         download_ci_component(builder, filename, &pattern, commit);\n-        let filename = format!(\"rustc-{channel}-{host}.tar.xz\");\n+        let filename = format!(\"rustc-{version}-{host}.tar.xz\");\n         download_ci_component(builder, filename, \"rustc\", commit);\n         // download-rustc doesn't need its own cargo, it can just use beta's.\n-        let filename = format!(\"rustc-dev-{channel}-{host}.tar.xz\");\n+        let filename = format!(\"rustc-dev-{version}-{host}.tar.xz\");\n         download_ci_component(builder, filename, \"rustc-dev\", commit);\n \n         builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));"}, {"sha": "94a61b727a32bccfb2bd33e1b47b1fc68a4d74f5", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -269,8 +269,8 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n     } else {\n         &builder.config.stage0_metadata.config.artifacts_server\n     };\n-    let channel = builder.config.artifact_channel(builder, llvm_sha);\n-    let filename = format!(\"rust-dev-{}-{}.tar.xz\", channel, builder.build.build.triple);\n+    let version = builder.config.artifact_version_part(builder, llvm_sha);\n+    let filename = format!(\"rust-dev-{}-{}.tar.xz\", version, builder.build.build.triple);\n     let tarball = rustc_cache.join(&filename);\n     if !tarball.exists() {\n         let help_on_error = \"error: failed to download llvm from ci"}, {"sha": "7c0dab1c527d1eb86d91f204b8cd45b680313e2a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -881,31 +881,24 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tdisplay: block;\n }\n \n-.search-results .desc > span {\n-\twhite-space: nowrap;\n-\ttext-overflow: ellipsis;\n-\toverflow: hidden;\n-\tdisplay: block;\n-}\n-\n .search-results > a {\n-\tdisplay: block;\n+\tdisplay: flex;\n \t/* A little margin ensures the browser's outlining of focused links has room to display. */\n \tmargin-left: 2px;\n \tmargin-right: 2px;\n \tborder-bottom: 1px solid var(--border-color);\n+\tgap: 1em;\n }\n \n .search-results > a > div {\n-\tdisplay: flex;\n-\tflex-flow: row wrap;\n+\tflex: 1;\n }\n \n-.search-results .result-name, .search-results div.desc {\n-\twidth: 50%;\n-}\n-.search-results .result-name {\n-\tpadding-right: 1em;\n+.search-results > a > div.desc {\n+\twhite-space: nowrap;\n+\ttext-overflow: ellipsis;\n+\toverflow: hidden;\n+\tdisplay: block;\n }\n \n .search-results a:hover,\n@@ -1867,18 +1860,16 @@ in storage.js\n \t}\n \n \t/* Display an alternating layout on tablets and phones */\n-\t.item-table, .item-row, .item-left, .item-right {\n+\t.item-table, .item-row, .item-left, .item-right,\n+\t.search-results > a, .search-results > a > div {\n \t\tdisplay: block;\n \t}\n \n \t/* Display an alternating layout on tablets and phones */\n \t.search-results > a {\n \t\tpadding: 5px 0px;\n \t}\n-\t.search-results .result-name, .search-results div.desc {\n-\t\twidth: 100%;\n-\t}\n-\t.search-results div.desc, .item-right {\n+\t.search-results > a > div.desc, .item-right {\n \t\tpadding-left: 2em;\n \t}\n "}, {"sha": "dd0531c5e70e4da1b4cd02a8ee1b010d276a0654", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1593,7 +1593,6 @@ function initSearch(rawSearchIndex) {\n                 link.className = \"result-\" + type;\n                 link.href = item.href;\n \n-                const wrapper = document.createElement(\"div\");\n                 const resultName = document.createElement(\"div\");\n                 resultName.className = \"result-name\";\n \n@@ -1614,16 +1613,13 @@ function initSearch(rawSearchIndex) {\n                 resultName.insertAdjacentHTML(\n                     \"beforeend\",\n                     item.displayPath + \"<span class=\\\"\" + type + \"\\\">\" + name + extra + \"</span>\");\n-                wrapper.appendChild(resultName);\n+                link.appendChild(resultName);\n \n                 const description = document.createElement(\"div\");\n                 description.className = \"desc\";\n-                const spanDesc = document.createElement(\"span\");\n-                spanDesc.insertAdjacentHTML(\"beforeend\", item.desc);\n+                description.insertAdjacentHTML(\"beforeend\", item.desc);\n \n-                description.appendChild(spanDesc);\n-                wrapper.appendChild(description);\n-                link.appendChild(wrapper);\n+                link.appendChild(description);\n                 output.appendChild(link);\n             });\n         } else if (query.error === null) {"}, {"sha": "93720503480881a3ccf0df16ae6e81bdeea30a90", "filename": "src/test/codegen/ffi-const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fcodegen%2Fffi-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fcodegen%2Fffi-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-const.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -7,6 +7,7 @@ pub fn bar() { unsafe { foo() } }\n extern \"C\" {\n     // CHECK-LABEL: declare{{.*}}void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n-    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readnone{{.*}} }\n+    // The attribute changed from `readnone` to `memory(none)` with LLVM 16.0.\n+    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}{{readnone|memory\\(none\\)}}{{.*}} }\n     #[ffi_const] pub fn foo();\n }"}, {"sha": "2ed735813582f67138a6e92689509d06ae6c6b75", "filename": "src/test/codegen/ffi-pure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-pure.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -7,6 +7,7 @@ pub fn bar() { unsafe { foo() } }\n extern \"C\" {\n     // CHECK-LABEL: declare{{.*}}void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n-    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readonly{{.*}} }\n+    // The attribute changed from `readonly` to `memory(read)` with LLVM 16.0.\n+    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}{{readonly|memory\\(read\\)}}{{.*}} }\n     #[ffi_pure] pub fn foo();\n }"}, {"sha": "0c3b111907424ad436cbf14c3fabb2e19ca2f9ad", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -67,7 +67,7 @@ reload:\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n assert-css: (\n-    \"//*[@class='desc']//*[text()='Just a normal struct.']\",\n+    \"//*[@class='desc'][text()='Just a normal struct.']\",\n     {\"color\": \"rgb(197, 197, 197)\"},\n )\n assert-css: (\n@@ -159,7 +159,7 @@ assert-css: (\n )\n \n // Checking color and background on hover.\n-move-cursor-to: \"//*[@class='desc']//*[text()='Just a normal struct.']\"\n+move-cursor-to: \"//*[@class='desc'][text()='Just a normal struct.']\"\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n     {\"color\": \"rgb(255, 255, 255)\"},\n@@ -179,7 +179,7 @@ reload:\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n assert-css: (\n-    \"//*[@class='desc']//*[text()='Just a normal struct.']\",\n+    \"//*[@class='desc'][text()='Just a normal struct.']\",\n     {\"color\": \"rgb(221, 221, 221)\"},\n )\n assert-css: (\n@@ -276,7 +276,7 @@ reload:\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n assert-css: (\n-    \"//*[@class='desc']//*[text()='Just a normal struct.']\",\n+    \"//*[@class='desc'][text()='Just a normal struct.']\",\n     {\"color\": \"rgb(0, 0, 0)\"},\n )\n assert-css: ("}, {"sha": "b8abd9f906242864018b5bc6216272276b77c9a6", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -7,7 +7,7 @@ press-key: 'Enter'\n wait-for: \"#crate-search\"\n // The width is returned by \"getComputedStyle\" which returns the exact number instead of the\n // CSS rule which is \"50%\"...\n-assert-css: (\".search-results div.desc\", {\"width\": \"318px\"})\n+assert-css: (\".search-results div.desc\", {\"width\": \"310px\"})\n size: (600, 100)\n // As counter-intuitive as it may seem, in this width, the width is \"100%\", which is why\n // when computed it's larger."}, {"sha": "018573284ea7959f6db074e64a11226a21ea8c69", "filename": "src/tools/tidy/src/mir_opt_tests.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -3,7 +3,7 @@\n use std::collections::HashSet;\n use std::path::{Path, PathBuf};\n \n-fn check_unused_files(path: &Path, bad: &mut bool) {\n+fn check_unused_files(path: &Path, bless: bool, bad: &mut bool) {\n     let mut rs_files = Vec::<PathBuf>::new();\n     let mut output_files = HashSet::<PathBuf>::new();\n     let files = walkdir::WalkDir::new(&path.join(\"test/mir-opt\")).into_iter();\n@@ -27,11 +27,15 @@ fn check_unused_files(path: &Path, bad: &mut bool) {\n \n     for extra in output_files {\n         if extra.file_name() != Some(\"README.md\".as_ref()) {\n-            tidy_error!(\n-                bad,\n-                \"the following output file is not associated with any mir-opt test, you can remove it: {}\",\n-                extra.display()\n-            );\n+            if !bless {\n+                tidy_error!(\n+                    bad,\n+                    \"the following output file is not associated with any mir-opt test, you can remove it: {}\",\n+                    extra.display()\n+                );\n+            } else {\n+                let _ = std::fs::remove_file(extra);\n+            }\n         }\n     }\n }\n@@ -65,6 +69,6 @@ fn check_dash_files(path: &Path, bless: bool, bad: &mut bool) {\n }\n \n pub fn check(path: &Path, bless: bool, bad: &mut bool) {\n-    check_unused_files(path, bad);\n+    check_unused_files(path, bless, bad);\n     check_dash_files(path, bless, bad);\n }"}]}