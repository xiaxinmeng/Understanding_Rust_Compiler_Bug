{"sha": "64112b0b61cd842f2186240374a89ae05a8d0bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTEyYjBiNjFjZDg0MmYyMTg2MjQwMzc0YTg5YWUwNWE4ZDBiYjk=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-16T20:58:17Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-16T21:00:10Z"}, "message": "docs: update debugging.md with the freshest VSCode debugging information", "tree": {"sha": "0578ad5b2a81e8126cb4f180f777023ef92a9946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0578ad5b2a81e8126cb4f180f777023ef92a9946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64112b0b61cd842f2186240374a89ae05a8d0bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64112b0b61cd842f2186240374a89ae05a8d0bb9", "html_url": "https://github.com/rust-lang/rust/commit/64112b0b61cd842f2186240374a89ae05a8d0bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64112b0b61cd842f2186240374a89ae05a8d0bb9/comments", "author": null, "committer": null, "parents": [{"sha": "43a41819cbb1d400c8787936e3d35b8b65c55a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a41819cbb1d400c8787936e3d35b8b65c55a29", "html_url": "https://github.com/rust-lang/rust/commit/43a41819cbb1d400c8787936e3d35b8b65c55a29"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "5a942ba5de38bbba6faf755f516efe3000b7a25d", "filename": "docs/dev/debugging.md", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/64112b0b61cd842f2186240374a89ae05a8d0bb9/docs%2Fdev%2Fdebugging.md", "raw_url": "https://github.com/rust-lang/rust/raw/64112b0b61cd842f2186240374a89ae05a8d0bb9/docs%2Fdev%2Fdebugging.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fdebugging.md?ref=64112b0b61cd842f2186240374a89ae05a8d0bb9", "patch": "@@ -1,42 +1,67 @@\n # Debugging vs Code plugin and the Language Server\n \n-Install [LLDB](https://lldb.llvm.org/) and the [LLDB Extension](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb).\n+## Prerequsities\n \n-Checkout rust rust-analyzer and open it in vscode.\n+- Install [LLDB](https://lldb.llvm.org/) and the [LLDB Extension](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb) VSCode extensions.\n+- Open the root folder in VSCode. Here you can access the preconfigured debug setups.\n \n-```\n-$ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n-$ cd rust-analyzer\n-$ code .\n-```\n+  <img height=150px src=\"https://user-images.githubusercontent.com/36276403/74611090-92ec5380-5101-11ea-8a41-598f51f3f3e3.png\" alt=\"Debug options view\">\n+\n+- Install all TypeScript dependencies\n+  ```bash\n+  cd editors/code\n+  npm i\n+  ```\n+\n+## Common knowledge\n+\n+* All debug configurations open new `[Extension Development Host]` VSCode instance\n+where **only** your `rust-analyzer` extension is enabled.\n+* To activate the extension you need to open any Rust project folder in `[Extension Development Host]`.\n \n-- To attach to the `lsp server` in linux you'll have to run:\n \n-  `echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope`\n+## Debug TypeScript VSCode extension\n \n-  This enables ptrace on non forked processes\n+- `Run Extension` - runs the extension with globally installed `ra_lsp_server` binary.\n+- `Run Extension (Dev Server)` - runs extension with binary from your locally built `target/debug/ra_lsp_server`.\n \n-- Ensure the dependencies for the extension are installed, run the `npm: install - editors/code` task in vscode.\n+TypeScript debugging is configured to watch your source edits and recompile.\n+To apply changes to already running debug process press <kbd>Ctrl+Shift+P</kbd> and run the following command in your `[Extension Development Host]`\n+\n+```\n+> Developer: Reload Window\n+```\n+\n+## Debug Rust LSP server\n+\n+- To attach to the `lsp server` in linux you'll have to run:\n \n-- Launch the `Debug Extension`, this will build the extension and the `lsp server`.\n+  ```\n+  echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n+  ```\n \n-- A new instance of vscode with `[Extension Development Host]` in the title.\n+  This enables ptrace on non-forked processes\n \n-  Don't worry about disabling `rls` all other extensions will be disabled but this one.\n+- Enable debug symbols in `Cargo.toml`:\n+  ```toml\n+    [profile.dev]\n+    debug = 2\n+  ```\n \n-- In the new vscode instance open a rust project, and navigate to a rust file\n+- Select `Run Extension (Dev Server)` to run your local built `target/debug/ra_lsp_server`.\n \n-- In the original vscode start an additional debug session (the three periods in the launch) and select `Debug Lsp Server`.\n+- In the original VSCode window once again select `Attach To Server` debug configuration.\n \n-- A list of running processes should appear select the `ra_lsp_server` from this repo.\n+- A list of running processes should appear. Select the `ra_lsp_server` from this repo.\n \n - Navigate to `crates/ra_lsp_server/src/main_loop.rs` and add a breakpoint to the `on_task` function.\n \n - Go back to the `[Extension Development Host]` instance and hover over a rust variable and your breakpoint should hit.\n \n ## Demo\n \n-![demonstration of debugging](https://user-images.githubusercontent.com/1711539/51384036-254fab80-1b2c-11e9-824d-95f9a6e9cf4f.gif)\n+- [Debugging TypeScript VScode extension](https://www.youtube.com/watch?v=T-hvpK6s4wM).\n+- [Debugging Rust LSP server](https://www.youtube.com/watch?v=EaNb5rg4E0M).\n \n ## Troubleshooting\n "}]}