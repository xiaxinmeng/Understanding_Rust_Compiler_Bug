{"sha": "9129f4306f4993b2a61287af6e157152bc758815", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMjlmNDMwNmY0OTkzYjJhNjEyODdhZjZlMTU3MTUyYmM3NTg4MTU=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-09-06T18:11:29Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-09-09T08:41:19Z"}, "message": "Move `unsigned_max` etc into `Size` again", "tree": {"sha": "31b968c8cff7de750b86edfaf460f408ef5affa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31b968c8cff7de750b86edfaf460f408ef5affa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9129f4306f4993b2a61287af6e157152bc758815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9129f4306f4993b2a61287af6e157152bc758815", "html_url": "https://github.com/rust-lang/rust/commit/9129f4306f4993b2a61287af6e157152bc758815", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9129f4306f4993b2a61287af6e157152bc758815/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459c9108e405e88fc23088c97d0b093e72d65b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/459c9108e405e88fc23088c97d0b093e72d65b48", "html_url": "https://github.com/rust-lang/rust/commit/459c9108e405e88fc23088c97d0b093e72d65b48"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "dea5aa8254534368090a079579304c478979fcbb", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=9129f4306f4993b2a61287af6e157152bc758815", "patch": "@@ -234,7 +234,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     &r,\n                 )?;\n                 let val = if overflowed {\n-                    let num_bits = l.layout.size.bits();\n+                    let size = l.layout.size;\n+                    let num_bits = size.bits();\n                     if l.layout.abi.is_signed() {\n                         // For signed ints the saturated value depends on the sign of the first\n                         // term since the sign of the second term can be inferred from this and\n@@ -259,10 +260,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // unsigned\n                         if is_add {\n                             // max unsigned\n-                            Scalar::from_uint(\n-                                u128::MAX >> (128 - num_bits),\n-                                Size::from_bits(num_bits),\n-                            )\n+                            Scalar::from_uint(size.unsigned_max(), Size::from_bits(num_bits))\n                         } else {\n                             // underflow to 0\n                             Scalar::from_uint(0u128, Size::from_bits(num_bits))"}, {"sha": "5bac561f24e5a76b5f8cd5f5a97f901075ff1b10", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=9129f4306f4993b2a61287af6e157152bc758815", "patch": "@@ -627,7 +627,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         // At least one value is excluded.\n         let valid_range = scalar_layout.valid_range;\n         let WrappingRange { start, end } = valid_range;\n-        let max_value = u128::MAX >> (128 - op.layout.size.bits());\n+        let max_value = op.layout.size.unsigned_max();\n         assert!(end <= max_value);\n         // Determine the allowed range\n         let value = self.read_scalar(op)?;"}, {"sha": "6abad26e46ebedcfe212f71e0fa3cd152055afee", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=9129f4306f4993b2a61287af6e157152bc758815", "patch": "@@ -512,9 +512,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let param_env = self.param_env;\n         let dl = self.data_layout();\n         let scalar_unit = |value: Primitive| {\n-            let bits = value.size(dl).bits();\n-            assert!(bits <= 128);\n-            Scalar { value, valid_range: WrappingRange { start: 0, end: (!0 >> (128 - bits)) } }\n+            let size = value.size(dl);\n+            assert!(size.bits() <= 128);\n+            Scalar { value, valid_range: WrappingRange { start: 0, end: size.unsigned_max() } }\n         };\n         let scalar = |value: Primitive| tcx.intern_layout(Layout::scalar(self, scalar_unit(value)));\n \n@@ -1266,7 +1266,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n                 }\n \n-                let tag_mask = !0u128 >> (128 - ity.size().bits());\n+                let tag_mask = ity.size().unsigned_max();\n                 let tag = Scalar {\n                     value: Int(ity, signed),\n                     valid_range: WrappingRange {"}, {"sha": "55f89f11c61ea01a336171f7c52196e2cb547121", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=9129f4306f4993b2a61287af6e157152bc758815", "patch": "@@ -45,18 +45,6 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n     }\n }\n \n-fn signed_min(size: Size) -> i128 {\n-    size.sign_extend(1_u128 << (size.bits() - 1)) as i128\n-}\n-\n-fn signed_max(size: Size) -> i128 {\n-    i128::MAX >> (128 - size.bits())\n-}\n-\n-fn unsigned_max(size: Size) -> u128 {\n-    u128::MAX >> (128 - size.bits())\n-}\n-\n fn int_size_and_signed<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> (Size, bool) {\n     let (int, signed) = match *ty.kind() {\n         Int(ity) => (Integer::from_int_ty(&tcx, ity), true),\n@@ -74,8 +62,8 @@ impl<'tcx> Discr<'tcx> {\n     pub fn checked_add(self, tcx: TyCtxt<'tcx>, n: u128) -> (Self, bool) {\n         let (size, signed) = int_size_and_signed(tcx, self.ty);\n         let (val, oflo) = if signed {\n-            let min = signed_min(size);\n-            let max = signed_max(size);\n+            let min = size.signed_min();\n+            let max = size.signed_max();\n             let val = size.sign_extend(self.val) as i128;\n             assert!(n < (i128::MAX as u128));\n             let n = n as i128;\n@@ -86,7 +74,7 @@ impl<'tcx> Discr<'tcx> {\n             let val = size.truncate(val);\n             (val, oflo)\n         } else {\n-            let max = unsigned_max(size);\n+            let max = size.unsigned_max();\n             let val = self.val;\n             let oflo = val > max - n;\n             let val = if oflo { n - (max - val) - 1 } else { val + n };\n@@ -621,7 +609,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         let val = match self.kind() {\n             ty::Int(_) | ty::Uint(_) => {\n                 let (size, signed) = int_size_and_signed(tcx, self);\n-                let val = if signed { signed_max(size) as u128 } else { unsigned_max(size) };\n+                let val = if signed { size.signed_max() as u128 } else { size.unsigned_max() };\n                 Some(val)\n             }\n             ty::Char => Some(std::char::MAX as u128),\n@@ -640,7 +628,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         let val = match self.kind() {\n             ty::Int(_) | ty::Uint(_) => {\n                 let (size, signed) = int_size_and_signed(tcx, self);\n-                let val = if signed { size.truncate(signed_min(size) as u128) } else { 0 };\n+                let val = if signed { size.truncate(size.signed_min() as u128) } else { 0 };\n                 Some(val)\n             }\n             ty::Char => Some(0),"}, {"sha": "3706543d07d415e1364a05d93e36679a1d7875c5", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=9129f4306f4993b2a61287af6e157152bc758815", "patch": "@@ -494,9 +494,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     // Helper to get a `-1` value of the appropriate type\n     fn neg_1_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let param_ty = ty::ParamEnv::empty().and(ty);\n-        let bits = self.tcx.layout_of(param_ty).unwrap().size.bits();\n-        let n = (!0u128) >> (128 - bits);\n-        let literal = ty::Const::from_bits(self.tcx, n, param_ty);\n+        let size = self.tcx.layout_of(param_ty).unwrap().size;\n+        let literal = ty::Const::from_bits(self.tcx, size.unsigned_max(), param_ty);\n \n         self.literal_operand(span, literal)\n     }"}, {"sha": "eb0c51efb66cc941a081536b0b9f2cc68265acee", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9129f4306f4993b2a61287af6e157152bc758815/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=9129f4306f4993b2a61287af6e157152bc758815", "patch": "@@ -392,6 +392,21 @@ impl Size {\n         // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).\n         (value << shift) >> shift\n     }\n+\n+    #[inline]\n+    pub fn signed_min(&self) -> i128 {\n+        self.sign_extend(1_u128 << (self.bits() - 1)) as i128\n+    }\n+\n+    #[inline]\n+    pub fn signed_max(&self) -> i128 {\n+        i128::MAX >> (128 - self.bits())\n+    }\n+\n+    #[inline]\n+    pub fn unsigned_max(&self) -> u128 {\n+        u128::MAX >> (128 - self.bits())\n+    }\n }\n \n // Panicking addition, subtraction and multiplication for convenience.\n@@ -775,7 +790,7 @@ impl WrappingRange {\n     /// Returns `true` if `size` completely fills the range.\n     #[inline]\n     pub fn is_full_for(&self, size: Size) -> bool {\n-        let max_value = u128::MAX >> (128 - size.bits());\n+        let max_value = size.unsigned_max();\n         debug_assert!(self.start <= max_value && self.end <= max_value);\n         (self.start == 0 && self.end == max_value) || (self.end + 1 == self.start)\n     }\n@@ -1067,9 +1082,9 @@ impl Niche {\n \n     pub fn available<C: HasDataLayout>(&self, cx: &C) -> u128 {\n         let Scalar { value, valid_range: v } = self.scalar;\n-        let bits = value.size(cx).bits();\n-        assert!(bits <= 128);\n-        let max_value = !0u128 >> (128 - bits);\n+        let size = value.size(cx);\n+        assert!(size.bits() <= 128);\n+        let max_value = size.unsigned_max();\n \n         // Find out how many values are outside the valid range.\n         let niche = v.end.wrapping_add(1)..v.start;\n@@ -1080,9 +1095,9 @@ impl Niche {\n         assert!(count > 0);\n \n         let Scalar { value, valid_range: v } = self.scalar;\n-        let bits = value.size(cx).bits();\n-        assert!(bits <= 128);\n-        let max_value = !0u128 >> (128 - bits);\n+        let size = value.size(cx);\n+        assert!(size.bits() <= 128);\n+        let max_value = size.unsigned_max();\n \n         if count > max_value {\n             return None;"}]}