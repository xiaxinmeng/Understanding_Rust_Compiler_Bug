{"sha": "d11bfba71bb71e05ab93e1576a07a48269b13021", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMWJmYmE3MWJiNzFlMDVhYjkzZTE1NzZhMDdhNDgyNjliMTMwMjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:38:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:38:03Z"}, "message": "rollup merge of #20720: nick29581/assoc-ice-missing", "tree": {"sha": "c066874abec04d60a316410fbd147990de45b7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c066874abec04d60a316410fbd147990de45b7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d11bfba71bb71e05ab93e1576a07a48269b13021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d11bfba71bb71e05ab93e1576a07a48269b13021", "html_url": "https://github.com/rust-lang/rust/commit/d11bfba71bb71e05ab93e1576a07a48269b13021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d11bfba71bb71e05ab93e1576a07a48269b13021/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "662132560133a17cb598083f44de2fbf3d74f157", "url": "https://api.github.com/repos/rust-lang/rust/commits/662132560133a17cb598083f44de2fbf3d74f157", "html_url": "https://github.com/rust-lang/rust/commit/662132560133a17cb598083f44de2fbf3d74f157"}, {"sha": "68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "html_url": "https://github.com/rust-lang/rust/commit/68a783a89f4c7e74d4c7e09bfac67283e054d4fc"}], "stats": {"total": 127, "additions": 105, "deletions": 22}, "files": [{"sha": "ab956587d8248045d0d680322c530dbd5e1a3869", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d11bfba71bb71e05ab93e1576a07a48269b13021/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11bfba71bb71e05ab93e1576a07a48269b13021/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=d11bfba71bb71e05ab93e1576a07a48269b13021", "patch": "@@ -65,6 +65,7 @@ use clone::Clone;\n use iter::{Step, Iterator,DoubleEndedIterator,ExactSizeIterator};\n use marker::Sized;\n use option::Option::{self, Some, None};\n+use fmt;\n \n /// The `Drop` trait is used to run some code when a value goes out of scope. This\n /// is sometimes called a 'destructor'.\n@@ -847,13 +848,20 @@ pub trait IndexMut<Index: ?Sized> {\n }\n \n /// An unbounded range.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"full_range\"]\n #[unstable = \"API still in development\"]\n pub struct FullRange;\n \n+#[unstable = \"API still in development\"]\n+impl fmt::Show for FullRange {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Show::fmt(\"..\", fmt)\n+    }\n+}\n+\n /// A (half-open) range which is bounded at both ends.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"range\"]\n #[unstable = \"API still in development\"]\n pub struct Range<Idx> {\n@@ -904,8 +912,15 @@ impl<Idx: Clone + Step> DoubleEndedIterator for Range<Idx> {\n #[unstable = \"API still in development\"]\n impl<Idx: Clone + Step> ExactSizeIterator for Range<Idx> {}\n \n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::Show> fmt::Show for Range<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{:?}..{:?}\", self.start, self.end)\n+    }\n+}\n+\n /// A range which is only bounded below.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"range_from\"]\n #[unstable = \"API still in development\"]\n pub struct RangeFrom<Idx> {\n@@ -926,15 +941,29 @@ impl<Idx: Clone + Step> Iterator for RangeFrom<Idx> {\n     }\n }\n \n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::Show> fmt::Show for RangeFrom<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{:?}..\", self.start)\n+    }\n+}\n+\n /// A range which is only bounded above.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"range_to\"]\n #[unstable = \"API still in development\"]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive).\n     pub end: Idx,\n }\n \n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::Show> fmt::Show for RangeTo<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"..{:?}\", self.end)\n+    }\n+}\n+\n \n /// The `Deref` trait is used to specify the functionality of dereferencing\n /// operations like `*v`."}, {"sha": "531e611594a5919ce57b9ccaae27a63653db63d9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d11bfba71bb71e05ab93e1576a07a48269b13021/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11bfba71bb71e05ab93e1576a07a48269b13021/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d11bfba71bb71e05ab93e1576a07a48269b13021", "patch": "@@ -2535,7 +2535,7 @@ impl<'a> Parser<'a> {\n               }\n \n               // expr[...]\n-              // An index expression.\n+              // Could be either an index expression or a slicing expression.\n               token::OpenDelim(token::Bracket) => {\n                 let bracket_pos = self.span.lo;\n                 self.bump();\n@@ -2575,22 +2575,6 @@ impl<'a> Parser<'a> {\n                                    \"use `&expr[]` to construct a slice of the whole of expr\");\n                 }\n               }\n-\n-              // A range expression, either `expr..expr` or `expr..`.\n-              token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n-                self.bump();\n-\n-                let opt_end = if self.token.can_begin_expr() {\n-                    let end = self.parse_expr_res(RESTRICTION_NO_DOTS);\n-                    Some(end)\n-                } else {\n-                    None\n-                };\n-\n-                let hi = self.span.hi;\n-                let range = self.mk_range(Some(e), opt_end);\n-                return self.mk_expr(lo, hi, range);\n-              }\n               _ => return e\n             }\n         }\n@@ -2833,7 +2817,7 @@ impl<'a> Parser<'a> {\n           token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n             // A range, closed above: `..expr`.\n             self.bump();\n-            let e = self.parse_prefix_expr();\n+            let e = self.parse_expr();\n             hi = e.span.hi;\n             ex = self.mk_range(None, Some(e));\n           }\n@@ -2900,6 +2884,7 @@ impl<'a> Parser<'a> {\n             self.restrictions.contains(RESTRICTION_NO_BAR_OP) {\n             return lhs;\n         }\n+\n         self.expected_tokens.push(TokenType::Operator);\n \n         let cur_opt = self.token.to_binop();\n@@ -2991,6 +2976,23 @@ impl<'a> Parser<'a> {\n               let assign_op = self.mk_assign_op(aop, lhs, rhs);\n               self.mk_expr(span.lo, rhs_span.hi, assign_op)\n           }\n+          // A range expression, either `expr..expr` or `expr..`.\n+          token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n+            self.bump();\n+\n+            let opt_end = if self.token.can_begin_expr() {\n+                let end = self.parse_expr_res(RESTRICTION_NO_DOTS);\n+                Some(end)\n+            } else {\n+                None\n+            };\n+\n+            let lo = lhs.span.lo;\n+            let hi = self.span.hi;\n+            let range = self.mk_range(Some(lhs), opt_end);\n+            return self.mk_expr(lo, hi, range);\n+          }\n+\n           _ => {\n               lhs\n           }"}, {"sha": "f678eed8775cd34c28e910a101fb9d20de3044f4", "filename": "src/test/run-pass/ranges-precedence.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d11bfba71bb71e05ab93e1576a07a48269b13021/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11bfba71bb71e05ab93e1576a07a48269b13021/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Franges-precedence.rs?ref=d11bfba71bb71e05ab93e1576a07a48269b13021", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the precedence of ranges is correct\n+\n+#![feature(slicing_syntax)]\n+\n+struct Foo {\n+    foo: uint,\n+}\n+\n+impl Foo {\n+    fn bar(&self) -> uint { 5 }\n+}\n+\n+fn main() {\n+    let x = 1+3..4+5;\n+    assert!(x == (4..9));\n+\n+    let x = 1..4+5;\n+    assert!(x == (1..9));\n+\n+    let x = 1+3..4;\n+    assert!(x == (4..4));\n+\n+    let a = Foo { foo: 3 };\n+    let x = a.foo..a.bar();\n+    assert!(x == (3..5));\n+\n+    let x = 1+3..;\n+    assert!(x == (4..));\n+    let x = ..1+3;\n+    assert!(x == (..4));\n+\n+    let a = &[0i32, 1, 2, 3, 4, 5, 6];\n+    let x = &a[1+1..2+2];\n+    assert!(x == &a[2..4]);\n+    let x = &a[..1+2];\n+    assert!(x == &a[..3]);\n+    let x = &a[1+2..];\n+    assert!(x == &a[3..]);\n+\n+    for _i in 2+4..10-3 {}\n+}\n+"}]}