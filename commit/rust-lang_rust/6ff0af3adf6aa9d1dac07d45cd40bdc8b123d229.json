{"sha": "6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZjBhZjNhZGY2YWE5ZDFkYWMwN2Q0NWNkNDBiZGM4YjEyM2QyMjk=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2020-05-24T18:20:28Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2020-05-24T22:02:54Z"}, "message": "Fix #1419.", "tree": {"sha": "a1e94ef5fc8cfd4cb3dcbafea21c95f284482539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e94ef5fc8cfd4cb3dcbafea21c95f284482539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229", "html_url": "https://github.com/rust-lang/rust/commit/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229/comments", "author": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd97074517c6ba334247b70f33199e40374c223a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd97074517c6ba334247b70f33199e40374c223a", "html_url": "https://github.com/rust-lang/rust/commit/bd97074517c6ba334247b70f33199e40374c223a"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "ee139b057914daa0562011d62dcfaf14df4c123b", "filename": "src/shims/sync.rs", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229", "patch": "@@ -58,8 +58,31 @@ fn set_at_offset<'mir, 'tcx: 'mir>(\n // store an i32 in the first four bytes equal to the corresponding libc mutex kind constant\n // (e.g. PTHREAD_MUTEX_NORMAL).\n \n+/// A flag that allows to distinguish `PTHREAD_MUTEX_NORMAL` from\n+/// `PTHREAD_MUTEX_DEFAULT`. Since in `glibc` they have the same numeric values,\n+/// but different behaviour, we need a way to distinguish them. We do this by\n+/// setting this bit flag to the `PTHREAD_MUTEX_NORMAL` mutexes. See the comment\n+/// in `pthread_mutexattr_settype` function.\n+const PTHREAD_MUTEX_NORMAL_FLAG: i32 = 0x8000000;\n+\n const PTHREAD_MUTEXATTR_T_MIN_SIZE: u64 = 4;\n \n+fn is_mutex_kind_default<'mir, 'tcx: 'mir>(\n+    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    kind: Scalar<Tag>,\n+) -> InterpResult<'tcx, bool> {\n+    Ok(kind == ecx.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?)\n+}\n+\n+fn is_mutex_kind_normal<'mir, 'tcx: 'mir>(\n+    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    kind: Scalar<Tag>,\n+) -> InterpResult<'tcx, bool> {\n+    let kind = kind.to_i32()?;\n+    let mutex_normal_kind = ecx.eval_libc(\"PTHREAD_MUTEX_NORMAL\")?.to_i32()?;\n+    Ok(kind == (mutex_normal_kind | PTHREAD_MUTEX_NORMAL_FLAG))\n+}\n+\n fn mutexattr_get_kind<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     attr_op: OpTy<'tcx, Tag>,\n@@ -318,8 +341,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         let kind = this.read_scalar(kind_op)?.not_undef()?;\n-        if kind == this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?\n-            || kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")?\n+        if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? {\n+            // In `glibc` implementation, the numeric values of\n+            // `PTHREAD_MUTEX_NORMAL` and `PTHREAD_MUTEX_DEFAULT` are equal, but\n+            // they have different behaviour in some cases. Therefore, we add\n+            // this flag to ensure that we can distinguish\n+            // `PTHREAD_MUTEX_NORMAL` from `PTHREAD_MUTEX_DEFAULT`.\n+            let normal_kind = kind.to_i32()? | PTHREAD_MUTEX_NORMAL_FLAG;\n+            // Check that after setting the flag, the kind is distinguishable\n+            // from all other kinds.\n+            assert_ne!(normal_kind, this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?.to_i32()?);\n+            assert_ne!(normal_kind, this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")?.to_i32()?);\n+            assert_ne!(normal_kind, this.eval_libc(\"PTHREAD_MUTEX_RECURSIVE\")?.to_i32()?);\n+            mutexattr_set_kind(this, attr_op, Scalar::from_i32(normal_kind))?;\n+        } else if kind == this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?\n             || kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")?\n             || kind == this.eval_libc(\"PTHREAD_MUTEX_RECURSIVE\")?\n         {\n@@ -378,14 +413,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 Ok(0)\n             } else {\n                 // Trying to acquire the same mutex again.\n-                if kind == this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")? {\n-                    // FIXME: Sometimes this is actually a Deadlock.\n-                    // https://github.com/rust-lang/miri/issues/1419\n-                    throw_ub_format!(\n-                        \"trying to acquire already locked PTHREAD_MUTEX_DEFAULT (see #1419)\"\n-                    );\n-                }\n-                if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? {\n+                if is_mutex_kind_default(this, kind)? {\n+                    throw_ub_format!(\"trying to acquire already locked PTHREAD_MUTEX_DEFAULT\");\n+                } else if is_mutex_kind_normal(this, kind)? {\n                     throw_machine_stop!(TerminationInfo::Deadlock);\n                 } else if kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")? {\n                     this.eval_libc_i32(\"EDEADLK\")\n@@ -417,8 +447,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             if owner_thread != active_thread {\n                 this.eval_libc_i32(\"EBUSY\")\n             } else {\n-                if kind == this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?\n-                    || kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")?\n+                if is_mutex_kind_default(this, kind)?\n+                    || is_mutex_kind_normal(this, kind)?\n                     || kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")?\n                 {\n                     this.eval_libc_i32(\"EBUSY\")\n@@ -452,11 +482,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // The mutex was locked by another thread or not locked at all. See\n             // the \u201cUnlock When Not Owner\u201d column in\n             // https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_unlock.html.\n-            if kind == this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")? {\n+            if is_mutex_kind_default(this, kind)? {\n                 throw_ub_format!(\n                     \"unlocked a PTHREAD_MUTEX_DEFAULT mutex that was not locked by the current thread\"\n                 );\n-            } else if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? {\n+            } else if is_mutex_kind_normal(this, kind)? {\n                 throw_ub_format!(\n                     \"unlocked a PTHREAD_MUTEX_NORMAL mutex that was not locked by the current thread\"\n                 );"}, {"sha": "96e0ff3bfff7211f2ca4f5922cf6fad81463a980", "filename": "tests/compile-fail/sync/libc_pthread_mutex_normal_deadlock.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs?ref=6ff0af3adf6aa9d1dac07d45cd40bdc8b123d229", "patch": "@@ -11,8 +11,6 @@ fn main() {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        // FIXME: The error should be deadlock. See issue\n-        // https://github.com/rust-lang/miri/issues/1419.\n-        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR Undefined Behavior\n+        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR deadlock: the evaluated program deadlocked\n     }\n }"}]}