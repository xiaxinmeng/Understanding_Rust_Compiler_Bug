{"sha": "b69520f5fd1309741445fe069edca9e4b1e6d48c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTUyMGY1ZmQxMzA5NzQxNDQ1ZmUwNjllZGNhOWU0YjFlNmQ0OGM=", "commit": {"author": {"name": "Victor Korkin", "email": "victor.korkin@gmail.com", "date": "2018-05-30T04:48:46Z"}, "committer": {"name": "Victor Korkin", "email": "victor.korkin@gmail.com", "date": "2018-05-30T04:48:46Z"}, "message": "Fixes for suggestion message, tests and lint explanation.", "tree": {"sha": "5477236b55f72c98198026b884aa6eb77a7ea363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5477236b55f72c98198026b884aa6eb77a7ea363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69520f5fd1309741445fe069edca9e4b1e6d48c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69520f5fd1309741445fe069edca9e4b1e6d48c", "html_url": "https://github.com/rust-lang/rust/commit/b69520f5fd1309741445fe069edca9e4b1e6d48c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69520f5fd1309741445fe069edca9e4b1e6d48c/comments", "author": {"login": "VKlayd", "id": 2850547, "node_id": "MDQ6VXNlcjI4NTA1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2850547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VKlayd", "html_url": "https://github.com/VKlayd", "followers_url": "https://api.github.com/users/VKlayd/followers", "following_url": "https://api.github.com/users/VKlayd/following{/other_user}", "gists_url": "https://api.github.com/users/VKlayd/gists{/gist_id}", "starred_url": "https://api.github.com/users/VKlayd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VKlayd/subscriptions", "organizations_url": "https://api.github.com/users/VKlayd/orgs", "repos_url": "https://api.github.com/users/VKlayd/repos", "events_url": "https://api.github.com/users/VKlayd/events{/privacy}", "received_events_url": "https://api.github.com/users/VKlayd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VKlayd", "id": 2850547, "node_id": "MDQ6VXNlcjI4NTA1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2850547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VKlayd", "html_url": "https://github.com/VKlayd", "followers_url": "https://api.github.com/users/VKlayd/followers", "following_url": "https://api.github.com/users/VKlayd/following{/other_user}", "gists_url": "https://api.github.com/users/VKlayd/gists{/gist_id}", "starred_url": "https://api.github.com/users/VKlayd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VKlayd/subscriptions", "organizations_url": "https://api.github.com/users/VKlayd/orgs", "repos_url": "https://api.github.com/users/VKlayd/repos", "events_url": "https://api.github.com/users/VKlayd/events{/privacy}", "received_events_url": "https://api.github.com/users/VKlayd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b2a97401f0139751f926fd1479898494b20a80", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b2a97401f0139751f926fd1479898494b20a80", "html_url": "https://github.com/rust-lang/rust/commit/e4b2a97401f0139751f926fd1479898494b20a80"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "fc65ebcc1471589e18b58c87dc95fdc1ebb2c2fd", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b69520f5fd1309741445fe069edca9e4b1e6d48c/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69520f5fd1309741445fe069edca9e4b1e6d48c/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=b69520f5fd1309741445fe069edca9e4b1e6d48c", "patch": "@@ -679,9 +679,9 @@ declare_clippy_lint! {\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n-/// **What it does:** Checks for casts function pointer to the numeric type.\n+/// **What it does:** Checks for casts of a function pointer to a numeric type except `usize`.\n ///\n-/// **Why is this bad?** Cast pointer not to usize truncate value.\n+/// **Why is this bad?** Casting a function pointer to something other than `usize` could truncate the address value.\n ///\n /// **Known problems:** None.\n ///\n@@ -1003,8 +1003,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                             FN_TO_NUMERIC_CAST,\n                             expr.span,\n                             &format!(\"casting a `{}` to `{}` may truncate the function address value.\", cast_from, cast_to),\n-                            //   &format!(\"if you need address of function, use cast zz `usize`:\"),\n-                            &format!(\"if you need the address of the function, z consider:\"),\n+                            \"if you need the address of the function, consider :\",\n                             format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n                         );\n                     }"}, {"sha": "0cce65798133c390e1092417d3031b911ddcb5b5", "filename": "tests/ui/types_fn_to_int.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b69520f5fd1309741445fe069edca9e4b1e6d48c/tests%2Fui%2Ftypes_fn_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69520f5fd1309741445fe069edca9e4b1e6d48c/tests%2Fui%2Ftypes_fn_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.rs?ref=b69520f5fd1309741445fe069edca9e4b1e6d48c", "patch": "@@ -12,7 +12,4 @@ fn main() {\n     let y = x as i32;\n \n     let z = bar as u32;\n-\n-    //let c = || {0i32};\n-    //let ac = c as u32;\n }"}, {"sha": "d5e8ad8bbb29393fde7c8e29b81f50e694813da5", "filename": "tests/ui/types_fn_to_int.stderr", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b69520f5fd1309741445fe069edca9e4b1e6d48c/tests%2Fui%2Ftypes_fn_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b69520f5fd1309741445fe069edca9e4b1e6d48c/tests%2Fui%2Ftypes_fn_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.stderr?ref=b69520f5fd1309741445fe069edca9e4b1e6d48c", "patch": "@@ -1,14 +1,24 @@\n-error: casting a Fn to i32 may truncate the function address value.\n- --> $DIR/types_fn_to_int.rs:8:13\n-  |\n-8 |     let y = x as i32;\n-  |             ^^^^^^^^\n-  |\n-  = note: #[deny(fn_to_numeric_cast)] on by default\n-help: if you need address of function, use cast to `usize` instead:\n-  |\n-8 |     let y = x as usize;\n-  |             ^^^^^^^^^^\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `i32` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:12:13\n+   |\n+12 |     let y = x as i32;\n+   |             ^^^^^^^^\n+   |\n+   = note: #[deny(fn_to_numeric_cast)] on by default\n+help: if you need the address of the function, consider :\n+   |\n+12 |     let y = x as usize;\n+   |             ^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: casting a `fn() -> i32 {bar}` to `u32` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:14:13\n+   |\n+14 |     let z = bar as u32;\n+   |             ^^^^^^^^^^\n+help: if you need the address of the function, consider :\n+   |\n+14 |     let z = bar as usize;\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}