{"sha": "bcfcbfc923aa821332d8ae8ce977f311764768b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZmNiZmM5MjNhYTgyMTMzMmQ4YWU4Y2U5NzdmMzExNzY0NzY4YjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-11T18:46:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-11T18:46:34Z"}, "message": "parser: {check,expect}_lifetime into ty.rs", "tree": {"sha": "6bad9725997dd80449af3321fb28bb73ad1255cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bad9725997dd80449af3321fb28bb73ad1255cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcfcbfc923aa821332d8ae8ce977f311764768b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfcbfc923aa821332d8ae8ce977f311764768b1", "html_url": "https://github.com/rust-lang/rust/commit/bcfcbfc923aa821332d8ae8ce977f311764768b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcfcbfc923aa821332d8ae8ce977f311764768b1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385d07f359cd4d4237cac6ae030d07792750a506", "url": "https://api.github.com/repos/rust-lang/rust/commits/385d07f359cd4d4237cac6ae030d07792750a506", "html_url": "https://github.com/rust-lang/rust/commit/385d07f359cd4d4237cac6ae030d07792750a506"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "1c1428c5713f70b146192b66c97fe6efdde67d23", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcfcbfc923aa821332d8ae8ce977f311764768b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfcbfc923aa821332d8ae8ce977f311764768b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bcfcbfc923aa821332d8ae8ce977f311764768b1", "patch": "@@ -11,7 +11,7 @@ mod stmt;\n mod generics;\n \n use crate::ast::{self, AttrStyle, Attribute, Arg, BindingMode, StrStyle, SelfKind};\n-use crate::ast::{FnDecl, Ident, IsAsync, Lifetime, MacDelimiter, Mutability, TyKind};\n+use crate::ast::{FnDecl, Ident, IsAsync, MacDelimiter, Mutability, TyKind};\n use crate::ast::{Visibility, VisibilityKind, Unsafety, CrateSugar};\n use crate::ext::hygiene::SyntaxContext;\n use crate::source_map::{self, respan};\n@@ -1046,22 +1046,6 @@ impl<'a> Parser<'a> {\n         Ok(Arg { attrs: attrs.into(), id: ast::DUMMY_NODE_ID, pat, span, ty })\n     }\n \n-    crate fn check_lifetime(&mut self) -> bool {\n-        self.expected_tokens.push(TokenType::Lifetime);\n-        self.token.is_lifetime()\n-    }\n-\n-    /// Parses a single lifetime `'a` or panics.\n-    crate fn expect_lifetime(&mut self) -> Lifetime {\n-        if let Some(ident) = self.token.lifetime() {\n-            let span = self.token.span;\n-            self.bump();\n-            Lifetime { ident: Ident::new(ident.name, span), id: ast::DUMMY_NODE_ID }\n-        } else {\n-            self.span_bug(self.token.span, \"not a lifetime\")\n-        }\n-    }\n-\n     /// Parses mutability (`mut` or nothing).\n     fn parse_mutability(&mut self) -> Mutability {\n         if self.eat_keyword(kw::Mut) {"}, {"sha": "1eb3d441e698a06fd7d1748ac5d1c5439defa5b1", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcfcbfc923aa821332d8ae8ce977f311764768b1/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfcbfc923aa821332d8ae8ce977f311764768b1/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=bcfcbfc923aa821332d8ae8ce977f311764768b1", "patch": "@@ -1,8 +1,8 @@\n-use super::{Parser, PResult, PathStyle, PrevTokenKind};\n+use super::{Parser, PResult, PathStyle, PrevTokenKind, TokenType};\n \n use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n use crate::ptr::P;\n-use crate::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam};\n+use crate::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n use crate::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n use crate::ast::{Mutability, AnonConst, FnDecl, Mac_};\n use crate::parse::token::{self, Token};\n@@ -442,4 +442,20 @@ impl<'a> Parser<'a> {\n             Ok(Vec::new())\n         }\n     }\n+\n+    crate fn check_lifetime(&mut self) -> bool {\n+        self.expected_tokens.push(TokenType::Lifetime);\n+        self.token.is_lifetime()\n+    }\n+\n+    /// Parses a single lifetime `'a` or panics.\n+    crate fn expect_lifetime(&mut self) -> Lifetime {\n+        if let Some(ident) = self.token.lifetime() {\n+            let span = self.token.span;\n+            self.bump();\n+            Lifetime { ident: Ident::new(ident.name, span), id: ast::DUMMY_NODE_ID }\n+        } else {\n+            self.span_bug(self.token.span, \"not a lifetime\")\n+        }\n+    }\n }"}]}