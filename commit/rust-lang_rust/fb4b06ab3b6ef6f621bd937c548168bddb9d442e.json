{"sha": "fb4b06ab3b6ef6f621bd937c548168bddb9d442e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNGIwNmFiM2I2ZWY2ZjYyMWJkOTM3YzU0ODE2OGJkZGI5ZDQ0MmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-20T10:15:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T13:51:13Z"}, "message": "rename `greater_than` to `reachable_from`", "tree": {"sha": "bf4f88bc23e04405de0416841eff3842e7ce3d05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4f88bc23e04405de0416841eff3842e7ce3d05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb4b06ab3b6ef6f621bd937c548168bddb9d442e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4b06ab3b6ef6f621bd937c548168bddb9d442e", "html_url": "https://github.com/rust-lang/rust/commit/fb4b06ab3b6ef6f621bd937c548168bddb9d442e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb4b06ab3b6ef6f621bd937c548168bddb9d442e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f60271960c7a56a7d455366ec41a1e423d61a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f60271960c7a56a7d455366ec41a1e423d61a2", "html_url": "https://github.com/rust-lang/rust/commit/45f60271960c7a56a7d455366ec41a1e423d61a2"}], "stats": {"total": 18, "additions": 3, "deletions": 15}, "files": [{"sha": "72db8622672f827707983f194193f0ebb93182a6", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb4b06ab3b6ef6f621bd937c548168bddb9d442e/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4b06ab3b6ef6f621bd937c548168bddb9d442e/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=fb4b06ab3b6ef6f621bd937c548168bddb9d442e", "patch": "@@ -73,19 +73,6 @@ impl<'tcx> FreeRegionMap<'tcx> {\n         debug!(\"lub_free_regions(r_a={:?}, r_b={:?}) = {:?}\", r_a, r_b, result);\n         result\n     }\n-\n-    /// Returns all regions that are known to outlive `r_a`. For\n-    /// example, in a function:\n-    ///\n-    /// ```\n-    /// fn foo<'a, 'b: 'a, 'c: 'b>() { .. }\n-    /// ```\n-    ///\n-    /// if `r_a` represents `'a`, this function would return `{'b, 'c}`.\n-    pub fn regions_that_outlive<'a, 'gcx>(&self, r_a: Region<'tcx>) -> Vec<&Region<'tcx>> {\n-        assert!(is_free(r_a) || *r_a == ty::ReStatic);\n-        self.relation.greater_than(&r_a)\n-    }\n }\n \n fn is_free(r: Region) -> bool {"}, {"sha": "2419edf5ddcce6676880b9a32b18f1e160a45823", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb4b06ab3b6ef6f621bd937c548168bddb9d442e/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4b06ab3b6ef6f621bd937c548168bddb9d442e/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=fb4b06ab3b6ef6f621bd937c548168bddb9d442e", "patch": "@@ -134,12 +134,13 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n         }\n     }\n \n-    /// Returns a vector of all things greater than `a`.\n+    /// Thinking of `x R y` as an edge `x -> y` in a graph, this\n+    /// returns all things reachable from `a`.\n     ///\n     /// Really this probably ought to be `impl Iterator<Item=&T>`, but\n     /// I'm too lazy to make that work, and -- given the caching\n     /// strategy -- it'd be a touch tricky anyhow.\n-    pub fn greater_than(&self, a: &T) -> Vec<&T> {\n+    pub fn reachable_from(&self, a: &T) -> Vec<&T> {\n         match self.index(a) {\n             Some(a) => self.with_closure(|closure| {\n                 closure.iter(a.0).map(|i| &self.elements[i]).collect()"}]}