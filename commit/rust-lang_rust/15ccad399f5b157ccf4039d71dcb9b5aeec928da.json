{"sha": "15ccad399f5b157ccf4039d71dcb9b5aeec928da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1Y2NhZDM5OWY1YjE1N2NjZjQwMzlkNzFkY2I5YjVhZWVjOTI4ZGE=", "commit": {"author": {"name": "Pi Lanningham", "email": "pi.lanningham@gmail.com", "date": "2019-11-05T15:42:34Z"}, "committer": {"name": "Pi Lanningham", "email": "pi.lanningham@gmail.com", "date": "2019-11-05T15:42:34Z"}, "message": "Detect if item.span is in a macro, and fall back\n\nIf item.span is part of a macro invocation, this has several downstream\nimplications.  To name two that were found while working on this:\n\n - The dead-code error gets annotated with a \"in this macro invocation\"\n - Some errors get canceled if they refer to remote crates\n\nIdeally, we should annotate item.ident.span with the same macro info,\nbut this is a larger change (see: #66095), so for now we just fall\nback to the old behavior if this item was generated by a macro.\n\nI use span.macro_backtrace().len() to detect if it's part of a macro,\nbecause that (among other things) is what is used by the code which\nadds the \"in this macro invocation\" annotations mentioned above.", "tree": {"sha": "b75b89aa92008ade0daae589d7f69564c4c366e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75b89aa92008ade0daae589d7f69564c4c366e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ccad399f5b157ccf4039d71dcb9b5aeec928da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ccad399f5b157ccf4039d71dcb9b5aeec928da", "html_url": "https://github.com/rust-lang/rust/commit/15ccad399f5b157ccf4039d71dcb9b5aeec928da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ccad399f5b157ccf4039d71dcb9b5aeec928da/comments", "author": {"login": "Quantumplation", "id": 49870, "node_id": "MDQ6VXNlcjQ5ODcw", "avatar_url": "https://avatars.githubusercontent.com/u/49870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quantumplation", "html_url": "https://github.com/Quantumplation", "followers_url": "https://api.github.com/users/Quantumplation/followers", "following_url": "https://api.github.com/users/Quantumplation/following{/other_user}", "gists_url": "https://api.github.com/users/Quantumplation/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quantumplation/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quantumplation/subscriptions", "organizations_url": "https://api.github.com/users/Quantumplation/orgs", "repos_url": "https://api.github.com/users/Quantumplation/repos", "events_url": "https://api.github.com/users/Quantumplation/events{/privacy}", "received_events_url": "https://api.github.com/users/Quantumplation/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Quantumplation", "id": 49870, "node_id": "MDQ6VXNlcjQ5ODcw", "avatar_url": "https://avatars.githubusercontent.com/u/49870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quantumplation", "html_url": "https://github.com/Quantumplation", "followers_url": "https://api.github.com/users/Quantumplation/followers", "following_url": "https://api.github.com/users/Quantumplation/following{/other_user}", "gists_url": "https://api.github.com/users/Quantumplation/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quantumplation/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quantumplation/subscriptions", "organizations_url": "https://api.github.com/users/Quantumplation/orgs", "repos_url": "https://api.github.com/users/Quantumplation/repos", "events_url": "https://api.github.com/users/Quantumplation/events{/privacy}", "received_events_url": "https://api.github.com/users/Quantumplation/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7985510e37b91cab66a808ef6b3e4110e369dc9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7985510e37b91cab66a808ef6b3e4110e369dc9e", "html_url": "https://github.com/rust-lang/rust/commit/7985510e37b91cab66a808ef6b3e4110e369dc9e"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "888351c61324b84996261a345cd275977c7c5e01", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15ccad399f5b157ccf4039d71dcb9b5aeec928da/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ccad399f5b157ccf4039d71dcb9b5aeec928da/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=15ccad399f5b157ccf4039d71dcb9b5aeec928da", "patch": "@@ -569,16 +569,26 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         if self.should_warn_about_item(item) {\n-            // For items that have a definition with a signature followed by a\n-            // block, point only at the signature.\n+            // For most items, we want to highlight its identifier\n             let span = match item.kind {\n                 hir::ItemKind::Fn(..) |\n                 hir::ItemKind::Mod(..) |\n                 hir::ItemKind::Enum(..) |\n                 hir::ItemKind::Struct(..) |\n                 hir::ItemKind::Union(..) |\n                 hir::ItemKind::Trait(..) |\n-                hir::ItemKind::Impl(..) => item.ident.span,\n+                hir::ItemKind::Impl(..) => {\n+                    // FIXME(66095): Because item.span is annotated with things\n+                    // like a macro_backtrace, and ident.span isn't, we use the\n+                    // def_span method if it's part of a macro invocation\n+                    // We should probably annotate ident.span with the macro\n+                    // context, but that's a larger change.\n+                    if item.span.macro_backtrace().len() == 0 {\n+                        item.ident.span\n+                    } else {\n+                        self.tcx.sess.source_map().def_span(item.span)\n+                    }\n+                },\n                 _ => item.span,\n             };\n             let participle = match item.kind {"}, {"sha": "8b65e798b6ef51e8550c67833d3bddbc72ad59ee", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15ccad399f5b157ccf4039d71dcb9b5aeec928da/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15ccad399f5b157ccf4039d71dcb9b5aeec928da/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=15ccad399f5b157ccf4039d71dcb9b5aeec928da", "patch": "@@ -1,8 +1,11 @@\n warning: struct is never constructed: `S`\n-  --> $DIR/macro-span-replacement.rs:7:12\n+  --> $DIR/macro-span-replacement.rs:7:14\n    |\n LL |         $b $a;\n-   |            ^^\n+   |              ^\n+...\n+LL |     m!(S struct);\n+   |     ------------- in this macro invocation\n    |\n note: lint level defined here\n   --> $DIR/macro-span-replacement.rs:3:9"}]}