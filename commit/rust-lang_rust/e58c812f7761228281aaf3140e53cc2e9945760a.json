{"sha": "e58c812f7761228281aaf3140e53cc2e9945760a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGM4MTJmNzc2MTIyODI4MWFhZjMxNDBlNTNjYzJlOTk0NTc2MGE=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-02-08T04:23:43Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-02-13T17:47:43Z"}, "message": "Partially de-vec-mut librustc", "tree": {"sha": "094fd1d223a11b86dc0125f45ee165177f718360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/094fd1d223a11b86dc0125f45ee165177f718360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58c812f7761228281aaf3140e53cc2e9945760a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58c812f7761228281aaf3140e53cc2e9945760a", "html_url": "https://github.com/rust-lang/rust/commit/e58c812f7761228281aaf3140e53cc2e9945760a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58c812f7761228281aaf3140e53cc2e9945760a/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6016214101d40c627f2c52412fb77d56254c901e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6016214101d40c627f2c52412fb77d56254c901e", "html_url": "https://github.com/rust-lang/rust/commit/6016214101d40c627f2c52412fb77d56254c901e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "043ee4115270a0252abe8fbad6bd411a6b99b75e", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e58c812f7761228281aaf3140e53cc2e9945760a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c812f7761228281aaf3140e53cc2e9945760a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=e58c812f7761228281aaf3140e53cc2e9945760a", "patch": "@@ -127,13 +127,13 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n         }\n     }\n \n-    fn all_mem(cls: &[mut x86_64_reg_class]) {\n+    fn all_mem(cls: &mut [x86_64_reg_class]) {\n         for uint::range(0, cls.len()) |i| {\n             cls[i] = memory_class;\n         }\n     }\n \n-    fn unify(cls: &[mut x86_64_reg_class],\n+    fn unify(cls: &mut [x86_64_reg_class],\n              i: uint,\n              newv: x86_64_reg_class) {\n         if cls[i] == newv {\n@@ -159,7 +159,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     fn classify_struct(tys: &[TypeRef],\n-                       cls: &[mut x86_64_reg_class], i: uint,\n+                       cls: &mut [x86_64_reg_class], i: uint,\n                        off: uint) {\n         let mut field_off = off;\n         for vec::each(tys) |ty| {\n@@ -170,7 +170,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     fn classify(ty: TypeRef,\n-                cls: &[mut x86_64_reg_class], ix: uint,\n+                cls: &mut [x86_64_reg_class], ix: uint,\n                 off: uint) {\n         unsafe {\n             let t_align = ty_align(ty);\n@@ -220,7 +220,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n         }\n     }\n \n-    fn fixup(ty: TypeRef, cls: &[mut x86_64_reg_class]) {\n+    fn fixup(ty: TypeRef, cls: &mut [x86_64_reg_class]) {\n         unsafe {\n             let mut i = 0u;\n             let llty = llvm::LLVMGetTypeKind(ty) as int;"}, {"sha": "45b0fa962ad91e5f4a00c70b89a45bda15ce7ba4", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58c812f7761228281aaf3140e53cc2e9945760a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c812f7761228281aaf3140e53cc2e9945760a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=e58c812f7761228281aaf3140e53cc2e9945760a", "patch": "@@ -779,7 +779,7 @@ pub impl LookupContext {\n         /*!\n          *\n          * In the event that we are invoking a method with a receiver\n-         * of a linear borrowed type like `&mut T` or `&[mut T]`,\n+         * of a linear borrowed type like `&mut T` or `&mut [T]`,\n          * we will \"reborrow\" the receiver implicitly.  For example, if\n          * you have a call `r.inc()` and where `r` has type `&mut T`,\n          * then we treat that like `(&mut *r).inc()`.  This avoids"}]}