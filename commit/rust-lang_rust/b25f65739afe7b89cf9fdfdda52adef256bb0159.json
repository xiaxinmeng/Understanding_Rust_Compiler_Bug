{"sha": "b25f65739afe7b89cf9fdfdda52adef256bb0159", "node_id": "C_kwDOAAsO6NoAKGIyNWY2NTczOWFmZTdiODljZjlmZGZkZGE1MmFkZWYyNTZiYjAxNTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-22T21:52:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-22T21:52:04Z"}, "message": "Auto merge of #13466 - Veykril:invocation-location, r=Veykril\n\nImplement invocation location config\n\nThis allows setting the working directory for build-scripts on flycheck\nComplements https://github.com/rust-lang/rust-analyzer/pull/13128\n\nThis will be followed up by one more PR that adds a few simple interpolation vars for `overrideCommand`, with that we should cover the needs for most build systems I believe.", "tree": {"sha": "53ef05ded9ec757a4aa1f567e0b6f2af016a5e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53ef05ded9ec757a4aa1f567e0b6f2af016a5e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25f65739afe7b89cf9fdfdda52adef256bb0159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25f65739afe7b89cf9fdfdda52adef256bb0159", "html_url": "https://github.com/rust-lang/rust/commit/b25f65739afe7b89cf9fdfdda52adef256bb0159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25f65739afe7b89cf9fdfdda52adef256bb0159/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19efa0b1103287ad521c0036c065ea2ebbe5939d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19efa0b1103287ad521c0036c065ea2ebbe5939d", "html_url": "https://github.com/rust-lang/rust/commit/19efa0b1103287ad521c0036c065ea2ebbe5939d"}, {"sha": "0f8904ec9cc0d26fda0164bc4a61f8e8ceb4d4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8904ec9cc0d26fda0164bc4a61f8e8ceb4d4ee", "html_url": "https://github.com/rust-lang/rust/commit/0f8904ec9cc0d26fda0164bc4a61f8e8ceb4d4ee"}], "stats": {"total": 245, "additions": 188, "deletions": 57}, "files": [{"sha": "73c3a48b4c5a3fd5fe017031a7e15ba0177b5ad1", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -28,6 +28,13 @@ pub enum InvocationStrategy {\n     PerWorkspace,\n }\n \n+#[derive(Clone, Debug, Default, PartialEq, Eq)]\n+pub enum InvocationLocation {\n+    Root(AbsPathBuf),\n+    #[default]\n+    Workspace,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum FlycheckConfig {\n     CargoCommand {\n@@ -39,13 +46,13 @@ pub enum FlycheckConfig {\n         features: Vec<String>,\n         extra_args: Vec<String>,\n         extra_env: FxHashMap<String, String>,\n-        invocation_strategy: InvocationStrategy,\n     },\n     CustomCommand {\n         command: String,\n         args: Vec<String>,\n         extra_env: FxHashMap<String, String>,\n         invocation_strategy: InvocationStrategy,\n+        invocation_location: InvocationLocation,\n     },\n }\n \n@@ -275,7 +282,7 @@ impl FlycheckActor {\n     }\n \n     fn check_command(&self) -> Command {\n-        let (mut cmd, args, invocation_strategy) = match &self.config {\n+        let (mut cmd, args) = match &self.config {\n             FlycheckConfig::CargoCommand {\n                 command,\n                 target_triple,\n@@ -285,7 +292,6 @@ impl FlycheckActor {\n                 extra_args,\n                 features,\n                 extra_env,\n-                invocation_strategy,\n             } => {\n                 let mut cmd = Command::new(toolchain::cargo());\n                 cmd.arg(command);\n@@ -309,18 +315,40 @@ impl FlycheckActor {\n                     }\n                 }\n                 cmd.envs(extra_env);\n-                (cmd, extra_args, invocation_strategy)\n+                (cmd, extra_args)\n             }\n-            FlycheckConfig::CustomCommand { command, args, extra_env, invocation_strategy } => {\n+            FlycheckConfig::CustomCommand {\n+                command,\n+                args,\n+                extra_env,\n+                invocation_strategy,\n+                invocation_location,\n+            } => {\n                 let mut cmd = Command::new(command);\n                 cmd.envs(extra_env);\n-                (cmd, args, invocation_strategy)\n+\n+                match invocation_location {\n+                    InvocationLocation::Workspace => {\n+                        match invocation_strategy {\n+                            InvocationStrategy::Once => {\n+                                cmd.current_dir(&self.root);\n+                            }\n+                            InvocationStrategy::PerWorkspace => {\n+                                // FIXME: cmd.current_dir(&affected_workspace);\n+                                cmd.current_dir(&self.root);\n+                            }\n+                        }\n+                    }\n+                    InvocationLocation::Root(root) => {\n+                        cmd.current_dir(root);\n+                    }\n+                }\n+\n+                (cmd, args)\n             }\n         };\n-        match invocation_strategy {\n-            InvocationStrategy::PerWorkspace => cmd.current_dir(&self.root),\n-            InvocationStrategy::Once => cmd.args(args),\n-        };\n+\n+        cmd.args(args);\n         cmd\n     }\n "}, {"sha": "b5f837d3c6b5f4bd0da5aae814626b37c1aa2431", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -21,7 +21,8 @@ use semver::Version;\n use serde::Deserialize;\n \n use crate::{\n-    cfg_flag::CfgFlag, CargoConfig, CargoFeatures, CargoWorkspace, InvocationStrategy, Package,\n+    cfg_flag::CfgFlag, CargoConfig, CargoFeatures, CargoWorkspace, InvocationLocation,\n+    InvocationStrategy, Package,\n };\n \n #[derive(Debug, Default, Clone, PartialEq, Eq)]\n@@ -55,10 +56,7 @@ impl BuildScriptOutput {\n }\n \n impl WorkspaceBuildScripts {\n-    fn build_command(\n-        config: &CargoConfig,\n-        workspace_root: Option<&path::Path>,\n-    ) -> io::Result<Command> {\n+    fn build_command(config: &CargoConfig, current_dir: &path::Path) -> io::Result<Command> {\n         let mut cmd = match config.run_build_script_command.as_deref() {\n             Some([program, args @ ..]) => {\n                 let mut cmd = Command::new(program);\n@@ -94,14 +92,11 @@ impl WorkspaceBuildScripts {\n                     }\n                 }\n \n-                if let Some(workspace_root) = workspace_root {\n-                    cmd.current_dir(workspace_root);\n-                }\n-\n                 cmd\n             }\n         };\n \n+        cmd.current_dir(current_dir);\n         cmd.envs(&config.extra_env);\n         if config.wrap_rustc_in_build_scripts {\n             // Setup RUSTC_WRAPPER to point to `rust-analyzer` binary itself. We use\n@@ -124,19 +119,21 @@ impl WorkspaceBuildScripts {\n     ) -> io::Result<WorkspaceBuildScripts> {\n         const RUST_1_62: Version = Version::new(1, 62, 0);\n \n-        let workspace_root: &path::Path = &workspace.workspace_root().as_ref();\n+        let current_dir = match &config.invocation_location {\n+            InvocationLocation::Root(root) if config.run_build_script_command.is_some() => {\n+                root.as_path()\n+            }\n+            _ => &workspace.workspace_root(),\n+        }\n+        .as_ref();\n \n-        match Self::run_per_ws(\n-            Self::build_command(config, Some(workspace_root))?,\n-            workspace,\n-            progress,\n-        ) {\n+        match Self::run_per_ws(Self::build_command(config, current_dir)?, workspace, progress) {\n             Ok(WorkspaceBuildScripts { error: Some(error), .. })\n                 if toolchain.as_ref().map_or(false, |it| *it >= RUST_1_62) =>\n             {\n                 // building build scripts failed, attempt to build with --keep-going so\n                 // that we potentially get more build data\n-                let mut cmd = Self::build_command(config, Some(workspace_root))?;\n+                let mut cmd = Self::build_command(config, current_dir)?;\n                 cmd.args(&[\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n                 let mut res = Self::run_per_ws(cmd, workspace, progress)?;\n                 res.error = Some(error);\n@@ -154,7 +151,17 @@ impl WorkspaceBuildScripts {\n         progress: &dyn Fn(String),\n     ) -> io::Result<Vec<WorkspaceBuildScripts>> {\n         assert_eq!(config.invocation_strategy, InvocationStrategy::Once);\n-        let cmd = Self::build_command(config, None)?;\n+\n+        let current_dir = match &config.invocation_location {\n+            InvocationLocation::Root(root) => root,\n+            InvocationLocation::Workspace => {\n+                return Err(io::Error::new(\n+                    io::ErrorKind::Other,\n+                    \"Cannot run build scripts from workspace with invocation strategy `once`\",\n+                ))\n+            }\n+        };\n+        let cmd = Self::build_command(config, current_dir.as_path().as_ref())?;\n         // NB: Cargo.toml could have been modified between `cargo metadata` and\n         // `cargo check`. We shouldn't assume that package ids we see here are\n         // exactly those from `config`."}, {"sha": "b4c2ba436772f3d237e3d831ba4352aef3f26a99", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -14,7 +14,7 @@ use rustc_hash::FxHashMap;\n use serde::Deserialize;\n use serde_json::from_value;\n \n-use crate::{utf8_stdout, ManifestPath};\n+use crate::{utf8_stdout, InvocationLocation, ManifestPath};\n use crate::{CfgOverrides, InvocationStrategy};\n \n /// [`CargoWorkspace`] represents the logical structure of, well, a Cargo\n@@ -107,6 +107,7 @@ pub struct CargoConfig {\n     /// Extra env vars to set when invoking the cargo command\n     pub extra_env: FxHashMap<String, String>,\n     pub invocation_strategy: InvocationStrategy,\n+    pub invocation_location: InvocationLocation,\n }\n \n impl CargoConfig {"}, {"sha": "575581fa543a309495a5c3806d26703d03bf1298", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -164,3 +164,10 @@ pub enum InvocationStrategy {\n     #[default]\n     PerWorkspace,\n }\n+\n+#[derive(Clone, Debug, Default, PartialEq, Eq)]\n+pub enum InvocationLocation {\n+    Root(AbsPathBuf),\n+    #[default]\n+    Workspace,\n+}"}, {"sha": "0ec5320997ca595093f2973a65f0c35dba6e5ca6", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -332,7 +332,9 @@ impl ProjectWorkspace {\n         config: &CargoConfig,\n         progress: &dyn Fn(String),\n     ) -> Vec<Result<WorkspaceBuildScripts>> {\n-        if let InvocationStrategy::PerWorkspace = config.invocation_strategy {\n+        if matches!(config.invocation_strategy, InvocationStrategy::PerWorkspace)\n+            || config.run_build_script_command.is_some()\n+        {\n             return workspaces.iter().map(|it| it.run_build_scripts(config, progress)).collect();\n         }\n "}, {"sha": "85322f12a834cce2ea6507e7020e07f8fbe610ac", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -69,10 +69,16 @@ config_data! {\n         cargo_autoreload: bool           = \"true\",\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n         cargo_buildScripts_enable: bool  = \"true\",\n+        /// Specifies the working directory for running build scripts.\n+        /// - \"workspace\": run build scripts for a workspace in the workspace's root directory.\n+        ///   This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\n+        /// - \"root\": run build scripts in the project's root directory.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n+        cargo_buildScripts_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n         /// Specifies the invocation strategy to use when running the build scripts command.\n-        /// If `per_workspace` is set, the command will be executed for each workspace from the\n-        /// corresponding workspace root.\n-        /// If `once` is set, the command will be executed once in the project root.\n+        /// If `per_workspace` is set, the command will be executed for each workspace.\n+        /// If `once` is set, the command will be executed once.\n         /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n         /// is set.\n         cargo_buildScripts_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n@@ -129,10 +135,17 @@ config_data! {\n         ///\n         /// Set to `\"all\"` to pass `--all-features` to Cargo.\n         checkOnSave_features: Option<CargoFeaturesDef>      = \"null\",\n+        /// Specifies the working directory for running checks.\n+        /// - \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n+        // FIXME: Ideally we would support this in some way\n+        ///   This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n+        /// - \"root\": run checks in the project's root directory.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n+        checkOnSave_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n         /// Specifies the invocation strategy to use when running the checkOnSave command.\n-        /// If `per_workspace` is set, the command will be executed for each workspace from the\n-        /// corresponding workspace root.\n-        /// If `once` is set, the command will be executed once in the project root.\n+        /// If `per_workspace` is set, the command will be executed for each workspace.\n+        /// If `once` is set, the command will be executed once.\n         /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n         /// is set.\n         checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n@@ -1074,6 +1087,12 @@ impl Config {\n                 InvocationStrategy::Once => project_model::InvocationStrategy::Once,\n                 InvocationStrategy::PerWorkspace => project_model::InvocationStrategy::PerWorkspace,\n             },\n+            invocation_location: match self.data.cargo_buildScripts_invocationLocation {\n+                InvocationLocation::Root => {\n+                    project_model::InvocationLocation::Root(self.root_path.clone())\n+                }\n+                InvocationLocation::Workspace => project_model::InvocationLocation::Workspace,\n+            },\n             run_build_script_command: self.data.cargo_buildScripts_overrideCommand.clone(),\n             extra_env: self.data.cargo_extraEnv.clone(),\n         }\n@@ -1097,10 +1116,6 @@ impl Config {\n         if !self.data.checkOnSave_enable {\n             return None;\n         }\n-        let invocation_strategy = match self.data.checkOnSave_invocationStrategy {\n-            InvocationStrategy::Once => flycheck::InvocationStrategy::Once,\n-            InvocationStrategy::PerWorkspace => flycheck::InvocationStrategy::PerWorkspace,\n-        };\n         let flycheck_config = match &self.data.checkOnSave_overrideCommand {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n@@ -1109,7 +1124,18 @@ impl Config {\n                     command,\n                     args,\n                     extra_env: self.check_on_save_extra_env(),\n-                    invocation_strategy,\n+                    invocation_strategy: match self.data.checkOnSave_invocationStrategy {\n+                        InvocationStrategy::Once => flycheck::InvocationStrategy::Once,\n+                        InvocationStrategy::PerWorkspace => {\n+                            flycheck::InvocationStrategy::PerWorkspace\n+                        }\n+                    },\n+                    invocation_location: match self.data.checkOnSave_invocationLocation {\n+                        InvocationLocation::Root => {\n+                            flycheck::InvocationLocation::Root(self.root_path.clone())\n+                        }\n+                        InvocationLocation::Workspace => flycheck::InvocationLocation::Workspace,\n+                    },\n                 }\n             }\n             Some(_) | None => FlycheckConfig::CargoCommand {\n@@ -1139,7 +1165,6 @@ impl Config {\n                 },\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n-                invocation_strategy,\n             },\n         };\n         Some(flycheck_config)\n@@ -1618,6 +1643,13 @@ enum InvocationStrategy {\n     PerWorkspace,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum InvocationLocation {\n+    Root,\n+    Workspace,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(untagged)]\n enum LifetimeElisionDef {\n@@ -2036,8 +2068,16 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": \"string\",\n             \"enum\": [\"per_workspace\", \"once\"],\n             \"enumDescriptions\": [\n-                \"The command will be executed for each workspace from the corresponding workspace root.\",\n-                \"The command will be executed once in the project root.\"\n+                \"The command will be executed for each workspace.\",\n+                \"The command will be executed once.\"\n+            ],\n+        },\n+        \"InvocationLocation\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"workspace\", \"root\"],\n+            \"enumDescriptions\": [\n+                \"The command will be executed in the corresponding workspace root.\",\n+                \"The command will be executed in the project root.\"\n             ],\n         },\n         _ => panic!(\"missing entry for {}: {}\", ty, default),"}, {"sha": "e1f651786dee411fc43456fdf30d797cda70f735", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -473,8 +473,10 @@ impl GlobalState {\n         };\n \n         let sender = self.flycheck_sender.clone();\n-        let (FlycheckConfig::CargoCommand { invocation_strategy, .. }\n-        | FlycheckConfig::CustomCommand { invocation_strategy, .. }) = config;\n+        let invocation_strategy = match config {\n+            FlycheckConfig::CargoCommand { .. } => flycheck::InvocationStrategy::PerWorkspace,\n+            FlycheckConfig::CustomCommand { invocation_strategy, .. } => invocation_strategy,\n+        };\n \n         self.flycheck = match invocation_strategy {\n             flycheck::InvocationStrategy::Once => vec![FlycheckHandle::spawn("}, {"sha": "502833de72c161716d30f0456e4f2e3e6563d3ae", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -24,13 +24,22 @@ Automatically refresh project info via `cargo metadata` on\n --\n Run build scripts (`build.rs`) for more precise code analysis.\n --\n+[[rust-analyzer.cargo.buildScripts.invocationLocation]]rust-analyzer.cargo.buildScripts.invocationLocation (default: `\"workspace\"`)::\n++\n+--\n+Specifies the working directory for running build scripts.\n+- \"workspace\": run build scripts for a workspace in the workspace's root directory.\n+  This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\n+- \"root\": run build scripts in the project's root directory.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n+--\n [[rust-analyzer.cargo.buildScripts.invocationStrategy]]rust-analyzer.cargo.buildScripts.invocationStrategy (default: `\"per_workspace\"`)::\n +\n --\n Specifies the invocation strategy to use when running the build scripts command.\n-If `per_workspace` is set, the command will be executed for each workspace from the\n-corresponding workspace root.\n-If `once` is set, the command will be executed once in the project root.\n+If `per_workspace` is set, the command will be executed for each workspace.\n+If `once` is set, the command will be executed once.\n This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n is set.\n --\n@@ -128,13 +137,22 @@ List of features to activate. Defaults to\n \n Set to `\"all\"` to pass `--all-features` to Cargo.\n --\n+[[rust-analyzer.checkOnSave.invocationLocation]]rust-analyzer.checkOnSave.invocationLocation (default: `\"workspace\"`)::\n++\n+--\n+Specifies the working directory for running checks.\n+- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n+  This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n+- \"root\": run checks in the project's root directory.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n+--\n [[rust-analyzer.checkOnSave.invocationStrategy]]rust-analyzer.checkOnSave.invocationStrategy (default: `\"per_workspace\"`)::\n +\n --\n Specifies the invocation strategy to use when running the checkOnSave command.\n-If `per_workspace` is set, the command will be executed for each workspace from the\n-corresponding workspace root.\n-If `once` is set, the command will be executed once in the project root.\n+If `per_workspace` is set, the command will be executed for each workspace.\n+If `once` is set, the command will be executed once.\n This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n is set.\n --"}, {"sha": "6771cad28a792650729ef68041ab0c22a001b370", "filename": "editors/code/package.json", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b25f65739afe7b89cf9fdfdda52adef256bb0159/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b25f65739afe7b89cf9fdfdda52adef256bb0159/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b25f65739afe7b89cf9fdfdda52adef256bb0159", "patch": "@@ -432,17 +432,30 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.cargo.buildScripts.invocationLocation\": {\n+                    \"markdownDescription\": \"Specifies the working directory for running build scripts.\\n- \\\"workspace\\\": run build scripts for a workspace in the workspace's root directory.\\n    This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\\n- \\\"root\\\": run build scripts in the project's root directory.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"default\": \"workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"workspace\",\n+                        \"root\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"The command will be executed in the corresponding workspace root.\",\n+                        \"The command will be executed in the project root.\"\n+                    ]\n+                },\n                 \"rust-analyzer.cargo.buildScripts.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the build scripts command.\\nIf `per_workspace` is set, the command will be executed for each workspace from the\\ncorresponding workspace root.\\nIf `once` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the build scripts command.\\nIf `per_workspace` is set, the command will be executed for each workspace.\\nIf `once` is set, the command will be executed once.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"per_workspace\",\n                     \"type\": \"string\",\n                     \"enum\": [\n                         \"per_workspace\",\n                         \"once\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace from the corresponding workspace root.\",\n-                        \"The command will be executed once in the project root.\"\n+                        \"The command will be executed for each workspace.\",\n+                        \"The command will be executed once.\"\n                     ]\n                 },\n                 \"rust-analyzer.cargo.buildScripts.overrideCommand\": {\n@@ -570,17 +583,30 @@\n                         }\n                     ]\n                 },\n+                \"rust-analyzer.checkOnSave.invocationLocation\": {\n+                    \"markdownDescription\": \"Specifies the working directory for running checks.\\n- \\\"workspace\\\": run checks for workspaces in the corresponding workspaces' root directories.\\n    This falls back to \\\"root\\\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\\n- \\\"root\\\": run checks in the project's root directory.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"default\": \"workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"workspace\",\n+                        \"root\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"The command will be executed in the corresponding workspace root.\",\n+                        \"The command will be executed in the project root.\"\n+                    ]\n+                },\n                 \"rust-analyzer.checkOnSave.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace from the\\ncorresponding workspace root.\\nIf `once` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace.\\nIf `once` is set, the command will be executed once.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"per_workspace\",\n                     \"type\": \"string\",\n                     \"enum\": [\n                         \"per_workspace\",\n                         \"once\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace from the corresponding workspace root.\",\n-                        \"The command will be executed once in the project root.\"\n+                        \"The command will be executed for each workspace.\",\n+                        \"The command will be executed once.\"\n                     ]\n                 },\n                 \"rust-analyzer.checkOnSave.noDefaultFeatures\": {"}]}