{"sha": "bf816e0349ca9ede06b3e9a99b521a6d0b74e855", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODE2ZTAzNDljYTllZGUwNmIzZTlhOTliNTIxYTZkMGI3NGU4NTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T09:01:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T09:01:03Z"}, "message": "Rollup merge of #71940 - SimonSapin:nonnull-slice, r=kennytm\n\nAdd `len` and `slice_from_raw_parts` to `NonNull<[T]>`\n\nThis follows the precedent of the recently-added `<*const [T]>::len` (adding to its tracking issue https://github.com/rust-lang/rust/issues/71146) and `ptr::slice_from_raw_parts`.", "tree": {"sha": "15210a069cb51e5307f1817089e72778de242ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15210a069cb51e5307f1817089e72778de242ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf816e0349ca9ede06b3e9a99b521a6d0b74e855", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJey4lPCRBK7hj4Ov3rIwAAdHIIABjD4yja0Ls93mfoQoSFnQ1a\nxMi62zKhSbqp1l6c3gV5ITIkG17zjypwH5hhufwZqs31xHIrWgyI3v8YALhWmf14\n7fbQRf3A4aD0GJAFG2J+kaPbfc9VJ/0rUQPJky7+V2/go41mGJnwJ+Dgnyuve40B\njkFYKAwVzFzg/B4u2mpE+8zJKNRAoVuVTcjUdzAoq6D9wMApmAqbKPWVaTO/fLkY\nX4zbA/J4pmvIsQ2fTi8++1Q9no7lxANzsLEgeRaJI+ZfE8i0eQBG4nsepPWRD2N0\n9G5daswOORUOxHDhtwOM+7tfvYbe+if09RvsWPeFylypFUJc+e56B7zj5LWTK+c=\n=I6fZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 15210a069cb51e5307f1817089e72778de242ee5\nparent 2679c38fc33b5f69ce3c502c81315aa889035191\nparent 861dfaa855ba61bdc8eaccc0652e6fdb8eadf4c3\nauthor Ralf Jung <post@ralfj.de> 1590397263 +0200\ncommitter GitHub <noreply@github.com> 1590397263 +0200\n\nRollup merge of #71940 - SimonSapin:nonnull-slice, r=kennytm\n\nAdd `len` and `slice_from_raw_parts` to `NonNull<[T]>`\n\nThis follows the precedent of the recently-added `<*const [T]>::len` (adding to its tracking issue https://github.com/rust-lang/rust/issues/71146) and `ptr::slice_from_raw_parts`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf816e0349ca9ede06b3e9a99b521a6d0b74e855", "html_url": "https://github.com/rust-lang/rust/commit/bf816e0349ca9ede06b3e9a99b521a6d0b74e855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf816e0349ca9ede06b3e9a99b521a6d0b74e855/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2679c38fc33b5f69ce3c502c81315aa889035191", "url": "https://api.github.com/repos/rust-lang/rust/commits/2679c38fc33b5f69ce3c502c81315aa889035191", "html_url": "https://github.com/rust-lang/rust/commit/2679c38fc33b5f69ce3c502c81315aa889035191"}, {"sha": "861dfaa855ba61bdc8eaccc0652e6fdb8eadf4c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/861dfaa855ba61bdc8eaccc0652e6fdb8eadf4c3", "html_url": "https://github.com/rust-lang/rust/commit/861dfaa855ba61bdc8eaccc0652e6fdb8eadf4c3"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "ca13433caec8d518e187b97acad1b5d3479ae0b0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf816e0349ca9ede06b3e9a99b521a6d0b74e855/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf816e0349ca9ede06b3e9a99b521a6d0b74e855/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=bf816e0349ca9ede06b3e9a99b521a6d0b74e855", "patch": "@@ -87,6 +87,8 @@\n #![feature(const_generics)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_result)]\n+#![feature(const_slice_from_raw_parts)]\n+#![feature(const_slice_ptr_len)]\n #![feature(const_type_name)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]"}, {"sha": "870364a61dd47c9bfbe072c4bf383e52c3826be0", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bf816e0349ca9ede06b3e9a99b521a6d0b74e855/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf816e0349ca9ede06b3e9a99b521a6d0b74e855/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=bf816e0349ca9ede06b3e9a99b521a6d0b74e855", "patch": "@@ -142,6 +142,65 @@ impl<T: ?Sized> NonNull<T> {\n     }\n }\n \n+impl<T> NonNull<[T]> {\n+    /// Creates a non-null raw slice from a thin pointer and a length.\n+    ///\n+    /// The `len` argument is the number of **elements**, not the number of bytes.\n+    ///\n+    /// This function is safe, but dereferencing the return value is unsafe.\n+    /// See the documentation of [`slice::from_raw_parts`] for slice safety requirements.\n+    ///\n+    /// [`slice::from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(nonnull_slice_from_raw_parts)]\n+    ///\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// // create a slice pointer when starting out with a pointer to the first element\n+    /// let mut x = [5, 6, 7];\n+    /// let nonnull_pointer = NonNull::new(x.as_mut_ptr()).unwrap();\n+    /// let slice = NonNull::slice_from_raw_parts(nonnull_pointer, 3);\n+    /// assert_eq!(unsafe { slice.as_ref()[2] }, 7);\n+    /// ```\n+    ///\n+    /// (Note that this example artifically demonstrates a use of this method,\n+    /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)\n+    #[unstable(feature = \"nonnull_slice_from_raw_parts\", issue = \"71941\")]\n+    #[rustc_const_unstable(feature = \"const_nonnull_slice_from_raw_parts\", issue = \"71941\")]\n+    #[inline]\n+    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {\n+        // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null\n+        unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }\n+    }\n+\n+    /// Returns the length of a non-null raw slice.\n+    ///\n+    /// The returned value is the number of **elements**, not the number of bytes.\n+    ///\n+    /// This function is safe, even when the non-null raw slice cannot be dereferenced to a slice\n+    /// because the pointer does not have a valid address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_len, nonnull_slice_from_raw_parts)]\n+    ///\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\n+    /// assert_eq!(slice.len(), 3);\n+    /// ```\n+    #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    #[inline]\n+    pub const fn len(self) -> usize {\n+        self.as_ptr().len()\n+    }\n+}\n+\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Clone for NonNull<T> {\n     #[inline]"}]}