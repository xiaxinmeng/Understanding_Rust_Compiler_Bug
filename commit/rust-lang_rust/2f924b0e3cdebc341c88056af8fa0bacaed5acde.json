{"sha": "2f924b0e3cdebc341c88056af8fa0bacaed5acde", "node_id": "C_kwDOAAsO6NoAKDJmOTI0YjBlM2NkZWJjMzQxYzg4MDU2YWY4ZmEwYmFjYWVkNWFjZGU", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-01-24T23:29:02Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-01-24T23:29:02Z"}, "message": "sorry erica", "tree": {"sha": "d10585f8a08f4ad7633487366b975aa58929eadf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d10585f8a08f4ad7633487366b975aa58929eadf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f924b0e3cdebc341c88056af8fa0bacaed5acde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f924b0e3cdebc341c88056af8fa0bacaed5acde", "html_url": "https://github.com/rust-lang/rust/commit/2f924b0e3cdebc341c88056af8fa0bacaed5acde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f924b0e3cdebc341c88056af8fa0bacaed5acde/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "430dab0b424abdf68d9071232a654874771570bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/430dab0b424abdf68d9071232a654874771570bc", "html_url": "https://github.com/rust-lang/rust/commit/430dab0b424abdf68d9071232a654874771570bc"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "d33dfba6247d819b8b71c72e96741c1157d6f55c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f924b0e3cdebc341c88056af8fa0bacaed5acde/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f924b0e3cdebc341c88056af8fa0bacaed5acde/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=2f924b0e3cdebc341c88056af8fa0bacaed5acde", "patch": "@@ -428,7 +428,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 }\n \n                 ty::Infer(ty::TyVar(..)) | ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n-                    // FIXME(erica_solver, ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n+                    // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n                     let sized_predicate = ty::Binder::dummy(tcx.at(DUMMY_SP).mk_trait_ref(\n                         LangItem::Sized,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],"}]}