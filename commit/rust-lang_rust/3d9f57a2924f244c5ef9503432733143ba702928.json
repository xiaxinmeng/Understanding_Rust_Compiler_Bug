{"sha": "3d9f57a2924f244c5ef9503432733143ba702928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOWY1N2EyOTI0ZjI0NGM1ZWY5NTAzNDMyNzMzMTQzYmE3MDI5Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-20T13:28:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-20T13:28:18Z"}, "message": "Auto merge of #43978 - GuillaumeGomez:missing-links, r=frewsxcv\n\nMissing links\n\nr? @rust-lang/docs", "tree": {"sha": "08a235ebaf0f240aff03f8a44c9627ac5b5cede6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08a235ebaf0f240aff03f8a44c9627ac5b5cede6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9f57a2924f244c5ef9503432733143ba702928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9f57a2924f244c5ef9503432733143ba702928", "html_url": "https://github.com/rust-lang/rust/commit/3d9f57a2924f244c5ef9503432733143ba702928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9f57a2924f244c5ef9503432733143ba702928/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe895bfb90bd6185cb43ee16b5b22149f8e13990", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe895bfb90bd6185cb43ee16b5b22149f8e13990", "html_url": "https://github.com/rust-lang/rust/commit/fe895bfb90bd6185cb43ee16b5b22149f8e13990"}, {"sha": "b88773f58822c592155c531200ed0b20ef11e9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88773f58822c592155c531200ed0b20ef11e9f1", "html_url": "https://github.com/rust-lang/rust/commit/b88773f58822c592155c531200ed0b20ef11e9f1"}], "stats": {"total": 175, "additions": 115, "deletions": 60}, "files": [{"sha": "578d90c5ba9bbb413d982bc5e5ce3204d376998c", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9f57a2924f244c5ef9503432733143ba702928/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9f57a2924f244c5ef9503432733143ba702928/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=3d9f57a2924f244c5ef9503432733143ba702928", "patch": "@@ -211,7 +211,7 @@\n //!\n //! - [`fmt::Display`][`Display`] implementations assert that the type can be faithfully\n //!   represented as a UTF-8 string at all times. It is **not** expected that\n-//!   all types implement the `Display` trait.\n+//!   all types implement the [`Display`] trait.\n //! - [`fmt::Debug`][`Debug`] implementations should be implemented for **all** public types.\n //!   Output will typically represent the internal state as faithfully as possible.\n //!   The purpose of the [`Debug`] trait is to facilitate debugging Rust code. In"}, {"sha": "96bd6273c9484b15a20b3b2a2b354e3806eff6b5", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3d9f57a2924f244c5ef9503432733143ba702928/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9f57a2924f244c5ef9503432733143ba702928/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=3d9f57a2924f244c5ef9503432733143ba702928", "patch": "@@ -38,7 +38,7 @@\n //! let message = s + \" world!\";\n //! ```\n //!\n-//! If you have a vector of valid UTF-8 bytes, you can make a `String` out of\n+//! If you have a vector of valid UTF-8 bytes, you can make a [`String`] out of\n //! it. You can do the reverse too.\n //!\n //! ```\n@@ -155,17 +155,14 @@ use boxed::Box;\n /// takes_str(&s);\n /// ```\n ///\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`Deref`]: ../../std/ops/trait.Deref.html\n-///\n /// This will create a [`&str`] from the `String` and pass it in. This\n /// conversion is very inexpensive, and so generally, functions will accept\n /// [`&str`]s as arguments unless they need a `String` for some specific\n /// reason.\n ///\n /// In certain cases Rust doesn't have enough information to make this\n-/// conversion, known as `Deref` coercion. In the following example a string\n-/// slice `&'a str` implements the trait `TraitExample`, and the function\n+/// conversion, known as [`Deref`] coercion. In the following example a string\n+/// slice [`&'a str`][`&str`] implements the trait `TraitExample`, and the function\n /// `example_func` takes anything that implements the trait. In this case Rust\n /// would need to make two implicit conversions, which Rust doesn't have the\n /// means to do. For that reason, the following example will not compile.\n@@ -185,13 +182,13 @@ use boxed::Box;\n ///\n /// There are two options that would work instead. The first would be to\n /// change the line `example_func(&example_string);` to\n-/// `example_func(example_string.as_str());`, using the method `as_str()`\n+/// `example_func(example_string.as_str());`, using the method [`as_str()`]\n /// to explicitly extract the string slice containing the string. The second\n /// way changes `example_func(&example_string);` to\n /// `example_func(&*example_string);`. In this case we are dereferencing a\n-/// `String` to a `str`, then referencing the `str` back to `&str`. The\n-/// second way is more idiomatic, however both work to do the conversion\n-/// explicitly rather than relying on the implicit conversion.\n+/// `String` to a [`str`][`&str`], then referencing the [`str`][`&str`] back to\n+/// [`&str`]. The second way is more idiomatic, however both work to do the\n+/// conversion explicitly rather than relying on the implicit conversion.\n ///\n /// # Representation\n ///\n@@ -287,6 +284,10 @@ use boxed::Box;\n /// ```\n ///\n /// Here, there's no need to allocate more memory inside the loop.\n+///\n+/// [`&str`]: ../../std/primitive.str.html\n+/// [`Deref`]: ../../std/ops/trait.Deref.html\n+/// [`as_str()`]: struct.String.html#method.as_str\n #[derive(PartialOrd, Eq, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct String {\n@@ -443,32 +444,22 @@ impl String {\n     /// requires that it is valid UTF-8. `from_utf8()` checks to ensure that\n     /// the bytes are valid UTF-8, and then does the conversion.\n     ///\n-    /// [`&str`]: ../../std/primitive.str.html\n-    /// [`u8`]: ../../std/primitive.u8.html\n-    /// [`Vec<u8>`]: ../../std/vec/struct.Vec.html\n-    ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the validity check, there is an unsafe version\n     /// of this function, [`from_utf8_unchecked`], which has the same behavior\n     /// but skips the check.\n     ///\n-    /// [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked\n-    ///\n     /// This method will take care to not copy the vector, for efficiency's\n     /// sake.\n     ///\n-    /// If you need a `&str` instead of a `String`, consider\n+    /// If you need a [`&str`] instead of a `String`, consider\n     /// [`str::from_utf8`].\n     ///\n-    /// [`str::from_utf8`]: ../../std/str/fn.from_utf8.html\n-    ///\n     /// The inverse of this method is [`as_bytes`].\n     ///\n-    /// [`as_bytes`]: #method.as_bytes\n-    ///\n     /// # Errors\n     ///\n-    /// Returns `Err` if the slice is not UTF-8 with a description as to why the\n+    /// Returns [`Err`] if the slice is not UTF-8 with a description as to why the\n     /// provided bytes are not UTF-8. The vector you moved in is also included.\n     ///\n     /// # Examples\n@@ -497,7 +488,14 @@ impl String {\n     /// See the docs for [`FromUtf8Error`] for more details on what you can do\n     /// with this error.\n     ///\n+    /// [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked\n+    /// [`&str`]: ../../std/primitive.str.html\n+    /// [`u8`]: ../../std/primitive.u8.html\n+    /// [`Vec<u8>`]: ../../std/vec/struct.Vec.html\n+    /// [`str::from_utf8`]: ../../std/str/fn.from_utf8.html\n+    /// [`as_bytes`]: struct.String.html#method.as_bytes\n     /// [`FromUtf8Error`]: struct.FromUtf8Error.html\n+    /// [`Err`]: ../../stdresult/enum.Result.html#variant.Err\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {\n@@ -594,9 +592,11 @@ impl String {\n         Cow::Owned(res)\n     }\n \n-    /// Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\n+    /// Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]\n     /// if `v` contains any invalid data.\n     ///\n+    /// [`Err`]: ../../std/result/enum.Result.htlm#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -618,7 +618,7 @@ impl String {\n         decode_utf16(v.iter().cloned()).collect::<Result<_, _>>().map_err(|_| FromUtf16Error(()))\n     }\n \n-    /// Decode a UTF-16 encoded vector `v` into a string, replacing\n+    /// Decode a UTF-16 encoded slice `v` into a `String`, replacing\n     /// invalid data with the replacement character (U+FFFD).\n     ///\n     /// # Examples\n@@ -800,11 +800,12 @@ impl String {\n     /// If you do not want this \"at least\" behavior, see the [`reserve_exact`]\n     /// method.\n     ///\n-    /// [`reserve_exact`]: #method.reserve_exact\n-    ///\n     /// # Panics\n     ///\n-    /// Panics if the new capacity overflows `usize`.\n+    /// Panics if the new capacity overflows [`usize`].\n+    ///\n+    /// [`reserve_exact`]: struct.String.html#method.reserve_exact\n+    /// [`usize`]: ../../std/primitive.usize.html\n     ///\n     /// # Examples\n     ///\n@@ -909,7 +910,9 @@ impl String {\n         self.vec.shrink_to_fit()\n     }\n \n-    /// Appends the given `char` to the end of this `String`.\n+    /// Appends the given [`char`] to the end of this `String`.\n+    ///\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -990,7 +993,9 @@ impl String {\n \n     /// Removes the last character from the string buffer and returns it.\n     ///\n-    /// Returns `None` if this `String` is empty.\n+    /// Returns [`None`] if this `String` is empty.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -1019,7 +1024,7 @@ impl String {\n         Some(ch)\n     }\n \n-    /// Removes a `char` from this `String` at a byte position and returns it.\n+    /// Removes a [`char`] from this `String` at a byte position and returns it.\n     ///\n     /// This is an `O(n)` operation, as it requires copying every element in the\n     /// buffer.\n@@ -1389,7 +1394,7 @@ impl String {\n     /// replaces with the given string, and yields the removed chars.\n     /// The given string doesn\u2019t need to be the same length as the range.\n     ///\n-    /// Note: The element range is removed when the `Splice` is dropped,\n+    /// Note: The element range is removed when the [`Splice`] is dropped,\n     /// even if the iterator is not consumed until the end.\n     ///\n     /// # Panics\n@@ -1398,6 +1403,7 @@ impl String {\n     /// boundary, or if they're out of bounds.\n     ///\n     /// [`char`]: ../../std/primitive.char.html\n+    /// [`Splice`]: ../../std/string/struct.Splice.html\n     ///\n     /// # Examples\n     ///\n@@ -1450,10 +1456,13 @@ impl String {\n         }\n     }\n \n-    /// Converts this `String` into a `Box<str>`.\n+    /// Converts this `String` into a [`Box`]`<`[`str`]`>`.\n     ///\n     /// This will drop any excess capacity.\n     ///\n+    /// [`Box`]: ../../std/boxed/struct.Box.html\n+    /// [`str`]: ../../std/primitive.str.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "ea064ca5c39fe0539804ab0536e519e538000cc3", "filename": "src/libcore/result.rs", "status": "modified", "additions": 73, "deletions": 27, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/3d9f57a2924f244c5ef9503432733143ba702928/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9f57a2924f244c5ef9503432733143ba702928/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=3d9f57a2924f244c5ef9503432733143ba702928", "patch": "@@ -244,9 +244,12 @@ use fmt;\n use iter::{FromIterator, FusedIterator, TrustedLen};\n use ops;\n \n-/// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n+/// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n+///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n+/// [`Err`]: enum.Result.html#variant.Err\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -269,7 +272,9 @@ impl<T, E> Result<T, E> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `true` if the result is `Ok`.\n+    /// Returns `true` if the result is [`Ok`].\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n     ///\n     /// # Examples\n     ///\n@@ -291,7 +296,9 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns `true` if the result is `Err`.\n+    /// Returns `true` if the result is [`Err`].\n+    ///\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -433,10 +440,13 @@ impl<T, E> Result<T, E> {\n     /////////////////////////////////////////////////////////////////////////\n \n     /// Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\n-    /// contained `Ok` value, leaving an `Err` value untouched.\n+    /// contained [`Ok`] value, leaving an [`Err`] value untouched.\n     ///\n     /// This function can be used to compose the results of two functions.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Print the numbers on each line of a string multiplied by two.\n@@ -461,11 +471,14 @@ impl<T, E> Result<T, E> {\n     }\n \n     /// Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\n-    /// contained `Err` value, leaving an `Ok` value untouched.\n+    /// contained [`Err`] value, leaving an [`Ok`] value untouched.\n     ///\n     /// This function can be used to pass through a successful result while handling\n     /// an error.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -546,7 +559,10 @@ impl<T, E> Result<T, E> {\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.\n+    /// Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -578,7 +594,10 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.\n+    /// Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// This function can be used for control flow based on `Result` values.\n     ///\n@@ -604,7 +623,10 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.\n+    /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -636,10 +658,13 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.\n+    /// Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n     ///\n     /// This function can be used for control flow based on result values.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -662,9 +687,12 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n     /// Else, it returns `optb`.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -686,8 +714,11 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n-    /// If the value is an `Err` then it calls `op` with its value.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n+    /// If the value is an [`Err`] then it calls `op` with its value.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -710,12 +741,15 @@ impl<T, E> Result<T, E> {\n }\n \n impl<T, E: fmt::Debug> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Err`, with a panic message provided by the\n-    /// `Err`'s value.\n+    /// Panics if the value is an [`Err`], with a panic message provided by the\n+    /// [`Err`]'s value.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -739,12 +773,15 @@ impl<T, E: fmt::Debug> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Err`, with a panic message including the\n-    /// passed message, and the content of the `Err`.\n+    /// Panics if the value is an [`Err`], with a panic message including the\n+    /// passed message, and the content of the [`Err`].\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -765,12 +802,16 @@ impl<T, E: fmt::Debug> Result<T, E> {\n }\n \n impl<T: fmt::Debug, E> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an `Err`.\n+    /// Unwraps a result, yielding the content of an [`Err`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Ok`, with a custom panic message provided\n-    /// by the `Ok`'s value.\n+    /// Panics if the value is an [`Ok`], with a custom panic message provided\n+    /// by the [`Ok`]'s value.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     ///\n     /// # Examples\n     ///\n@@ -792,12 +833,15 @@ impl<T: fmt::Debug, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Err`.\n+    /// Unwraps a result, yielding the content of an [`Err`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Ok`, with a panic message including the\n-    /// passed message, and the content of the `Ok`.\n+    /// Panics if the value is an [`Ok`], with a panic message including the\n+    /// passed message, and the content of the [`Ok`].\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -820,16 +864,16 @@ impl<T: fmt::Debug, E> Result<T, E> {\n impl<T: Default, E> Result<T, E> {\n     /// Returns the contained value or a default\n     ///\n-    /// Consumes the `self` argument then, if `Ok`, returns the contained\n-    /// value, otherwise if `Err`, returns the default value for that\n+    /// Consumes the `self` argument then, if [`Ok`], returns the contained\n+    /// value, otherwise if [`Err`], returns the default value for that\n     /// type.\n     ///\n     /// # Examples\n     ///\n     /// Convert a string to an integer, turning poorly-formed strings\n     /// into 0 (the default value for integers). [`parse`] converts\n     /// a string to any other type that implements [`FromStr`], returning an\n-    /// `Err` on error.\n+    /// [`Err`] on error.\n     ///\n     /// ```\n     /// let good_year_from_input = \"1909\";\n@@ -843,6 +887,8 @@ impl<T: Default, E> Result<T, E> {\n     ///\n     /// [`parse`]: ../../std/primitive.str.html#method.parse\n     /// [`FromStr`]: ../../std/str/trait.FromStr.html\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     #[inline]\n     #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n     pub fn unwrap_or_default(self) -> T {"}]}