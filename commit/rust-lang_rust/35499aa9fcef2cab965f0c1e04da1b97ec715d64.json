{"sha": "35499aa9fcef2cab965f0c1e04da1b97ec715d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDk5YWE5ZmNlZjJjYWI5NjVmMGMxZTA0ZGExYjk3ZWM3MTVkNjQ=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-20T15:33:44Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:15Z"}, "message": "Expand comments, address nits.", "tree": {"sha": "3032a3e410900eadf594db625e1b2f9c1f36ad56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3032a3e410900eadf594db625e1b2f9c1f36ad56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35499aa9fcef2cab965f0c1e04da1b97ec715d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35499aa9fcef2cab965f0c1e04da1b97ec715d64", "html_url": "https://github.com/rust-lang/rust/commit/35499aa9fcef2cab965f0c1e04da1b97ec715d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35499aa9fcef2cab965f0c1e04da1b97ec715d64/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1b6848db84636845ddce2413a57fa2f8d3ff63", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1b6848db84636845ddce2413a57fa2f8d3ff63", "html_url": "https://github.com/rust-lang/rust/commit/7c1b6848db84636845ddce2413a57fa2f8d3ff63"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "91c5b8703c28d236e877ea042ce12a24941ae86d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/35499aa9fcef2cab965f0c1e04da1b97ec715d64/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35499aa9fcef2cab965f0c1e04da1b97ec715d64/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=35499aa9fcef2cab965f0c1e04da1b97ec715d64", "patch": "@@ -381,22 +381,30 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         let defaulted_params = generics.types.iter()\n                                              .filter(|def| def.has_default &&\n                                                      def.index >= generics.parent_count() as u32);\n+        // WF checks for type parameter defaults. See test `type-check-defaults.rs` for examples.\n         for param_def in defaulted_params {\n-            // Defaults must be well-formed.\n+            // This parameter has a default value. Check that this default value is well-formed.\n+            // For example this forbids the declaration:\n+            // struct Foo<T = Vec<[u32]>> { .. }\n+            // Here `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n             let d = param_def.def_id;\n             fcx.register_wf_obligation(fcx.tcx.type_of(d), fcx.tcx.def_span(d), self.code.clone());\n+\n             // Check the clauses are well-formed when the param is substituted by it's default.\n-            // In trait definitions, the predicate `Self: Trait` is problematic.\n+            // For example this forbids the following declaration because `String` is not `Copy`:\n+            // struct Foo<T: Copy = String> { .. }\n+            //\n+            // In `trait Trait: Super`, checking `Self: Trait` or `Self: Super` is problematic.\n             // Therefore we skip such predicates. This means we check less than we could.\n             for pred in predicates.predicates.iter().filter(|p| !(is_trait && p.has_self_ty())) {\n                 let mut skip = true;\n                 let substs = ty::subst::Substs::for_item(fcx.tcx, def_id, |def, _| {\n                     // All regions are identity.\n                     fcx.tcx.mk_region(ty::ReEarlyBound(def.to_early_bound_region_data()))\n                 }, |def, _| {\n-                    let identity_substs = fcx.tcx.mk_param_from_def(def);\n+                    let identity_ty = fcx.tcx.mk_param_from_def(def);\n                     if def.index != param_def.index {\n-                        identity_substs\n+                        identity_ty\n                     } else {\n                         let sized = fcx.tcx.lang_items().sized_trait();\n                         let pred_is_sized = match pred {\n@@ -410,7 +418,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                         };\n                         // In trait defs, skip `Self: Sized` when `Self` is the default.\n                         if is_trait && pred_is_sized && default_is_self {\n-                            identity_substs\n+                            identity_ty\n                         } else {\n                             skip = false;\n                             default_ty\n@@ -420,6 +428,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 if skip { continue; }\n                 substituted_predicates.push(match pred {\n                     // In trait predicates, substitute defaults only for the LHS.\n+                    // See test `defaults-well-formedness.rs` for why substituting the RHS is bad.\n                     ty::Predicate::Trait(t_pred) => {\n                         let trait_ref = t_pred.map_bound(|t_pred| {\n                             let mut trait_subs = t_pred.trait_ref.substs.to_vec();"}, {"sha": "8f0714ebc3b13bdf2f6772164dd081821d232d1e", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35499aa9fcef2cab965f0c1e04da1b97ec715d64/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35499aa9fcef2cab965f0c1e04da1b97ec715d64/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=35499aa9fcef2cab965f0c1e04da1b97ec715d64", "patch": "@@ -44,4 +44,8 @@ struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n //~^ error: the trait bound `TwoParams<i32, U>: Trait` is not satisfied [E0277]\n //~^^ error: the trait bound `TwoParams<T, i32>: Trait` is not satisfied [E0277]\n \n+trait Super<T: Copy> { }\n+trait Base<T = String>: Super<T> { }\n+//~^ error: the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n+\n fn main() { }"}, {"sha": "8be46a53370e869038729902b7bdadde1f5e8ed6", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/35499aa9fcef2cab965f0c1e04da1b97ec715d64/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35499aa9fcef2cab965f0c1e04da1b97ec715d64/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=35499aa9fcef2cab965f0c1e04da1b97ec715d64", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfi\n    |                   ^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n-   = note: required by `Foo`\n+note: required by `Foo`\n+  --> $DIR/type-check-defaults.rs:15:1\n+   |\n+15 | struct Foo<T, U: FromIterator<T>>(T, U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied\n   --> $DIR/type-check-defaults.rs:18:27\n@@ -14,7 +18,11 @@ error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfi\n    |                           ^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n-   = note: required by `Foo`\n+note: required by `Foo`\n+  --> $DIR/type-check-defaults.rs:15:1\n+   |\n+15 | struct Foo<T, U: FromIterator<T>>(T, U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `A: std::iter::Iterator` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:1\n@@ -74,7 +82,11 @@ error[E0277]: the trait bound `TwoParams<i32, U>: Trait` is not satisfied\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `TwoParams<i32, U>`\n    |\n    = help: consider adding a `where TwoParams<i32, U>: Trait` bound\n-   = note: required by `Trait`\n+note: required by `Trait`\n+  --> $DIR/type-check-defaults.rs:39:1\n+   |\n+39 | trait Trait {}\n+   | ^^^^^^^^^^^\n \n error[E0277]: the trait bound `TwoParams<T, i32>: Trait` is not satisfied\n   --> $DIR/type-check-defaults.rs:43:1\n@@ -83,7 +95,24 @@ error[E0277]: the trait bound `TwoParams<T, i32>: Trait` is not satisfied\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `TwoParams<T, i32>`\n    |\n    = help: consider adding a `where TwoParams<T, i32>: Trait` bound\n-   = note: required by `Trait`\n+note: required by `Trait`\n+  --> $DIR/type-check-defaults.rs:39:1\n+   |\n+39 | trait Trait {}\n+   | ^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/type-check-defaults.rs:48:1\n+   |\n+48 | trait Base<T = String>: Super<T> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+note: required by `Super`\n+  --> $DIR/type-check-defaults.rs:47:1\n+   |\n+47 | trait Super<T: Copy> { }\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}]}