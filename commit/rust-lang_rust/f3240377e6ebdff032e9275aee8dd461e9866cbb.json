{"sha": "f3240377e6ebdff032e9275aee8dd461e9866cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMjQwMzc3ZTZlYmRmZjAzMmU5Mjc1YWVlOGRkNDYxZTk4NjZjYmI=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-11-18T05:50:59Z"}, "committer": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-11-18T05:50:59Z"}, "message": "rustbuild: update the llvm link logic further\n\nThere are now four static/shared scenarios that can happen for the\nsupported LLVM versions:\n\n- 3.9+: By default use `llvm-config --link-static`\n- 3.9+ and `--enable-llvm-link-shared`: Use `--link-shared` instead.\n- 3.8: Use `llvm-config --shared-mode` and go with its answer.\n- 3.7: Just assume static, maintaining the status quo.", "tree": {"sha": "1a51ce3c7b855c15abe6510605b849d91cb0771e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a51ce3c7b855c15abe6510605b849d91cb0771e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3240377e6ebdff032e9275aee8dd461e9866cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3240377e6ebdff032e9275aee8dd461e9866cbb", "html_url": "https://github.com/rust-lang/rust/commit/f3240377e6ebdff032e9275aee8dd461e9866cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3240377e6ebdff032e9275aee8dd461e9866cbb/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13391a60386fc022761c2aa03f13958d757f2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13391a60386fc022761c2aa03f13958d757f2ce", "html_url": "https://github.com/rust-lang/rust/commit/f13391a60386fc022761c2aa03f13958d757f2ce"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "6be3d1172dc2380e4cce02dcedb4a9d886818b70", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f3240377e6ebdff032e9275aee8dd461e9866cbb/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3240377e6ebdff032e9275aee8dd461e9866cbb/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=f3240377e6ebdff032e9275aee8dd461e9866cbb", "patch": "@@ -17,6 +17,35 @@ use std::path::{PathBuf, Path};\n \n use build_helper::output;\n \n+fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>) {\n+    let mut version_cmd = Command::new(llvm_config);\n+    version_cmd.arg(\"--version\");\n+    let version_output = output(&mut version_cmd);\n+    let mut parts = version_output.split('.').take(2)\n+        .filter_map(|s| s.parse::<u32>().ok());\n+    if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n+        if major > 3 || (major == 3 && minor >= 9) {\n+            // Force the link mode we want, preferring static by default, but\n+            // possibly overridden by `configure --enable-llvm-link-shared`.\n+            if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n+                return (\"dylib\", Some(\"--link-shared\"));\n+            } else {\n+                return (\"static\", Some(\"--link-static\"));\n+            }\n+        } else if major == 3 && minor == 8 {\n+            // Find out LLVM's default linking mode.\n+            let mut mode_cmd = Command::new(llvm_config);\n+            mode_cmd.arg(\"--shared-mode\");\n+            if output(&mut mode_cmd).trim() == \"shared\" {\n+                return (\"dylib\", None);\n+            } else {\n+                return (\"static\", None);\n+            }\n+        }\n+    }\n+    (\"static\", None)\n+}\n+\n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n \n@@ -123,39 +152,16 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"librustllvm.a\");\n \n-    // Find out LLVM's default linking mode.\n-    let mut cmd = Command::new(&llvm_config);\n-    cmd.arg(\"--shared-mode\");\n-    let mut llvm_kind = if output(&mut cmd).trim() == \"shared\" {\n-        \"dylib\"\n-    } else {\n-        \"static\"\n-    };\n+    let (llvm_kind, llvm_link_arg) = detect_llvm_link(&llvm_config);\n \n     // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host\n     // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);\n     cmd.arg(\"--libs\");\n \n-    // Force static linking with \"--link-static\" if available, or\n-    // force \"--link-shared\" if the configuration requested it.\n-    let llvm_link_shared = env::var_os(\"LLVM_LINK_SHARED\").is_some();\n-    let mut version_cmd = Command::new(&llvm_config);\n-    version_cmd.arg(\"--version\");\n-    let version_output = output(&mut version_cmd);\n-    let mut parts = version_output.split('.');\n-    if let (Some(major), Some(minor)) = (parts.next().and_then(|s| s.parse::<u32>().ok()),\n-                                         parts.next().and_then(|s| s.parse::<u32>().ok())) {\n-        if major > 3 || (major == 3 && minor >= 9) {\n-            if llvm_link_shared {\n-                cmd.arg(\"--link-shared\");\n-                llvm_kind = \"dylib\";\n-            } else {\n-                cmd.arg(\"--link-static\");\n-                llvm_kind = \"static\";\n-            }\n-        }\n+    if let Some(link_arg) = llvm_link_arg {\n+        cmd.arg(link_arg);\n     }\n \n     if !is_crossed {"}]}