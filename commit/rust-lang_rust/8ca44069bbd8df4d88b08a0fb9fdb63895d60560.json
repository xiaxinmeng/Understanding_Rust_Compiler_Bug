{"sha": "8ca44069bbd8df4d88b08a0fb9fdb63895d60560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYTQ0MDY5YmJkOGRmNGQ4OGIwOGEwZmI5ZmRiNjM4OTVkNjA1NjA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-14T15:47:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-14T15:47:37Z"}, "message": "Add updated NLL tests", "tree": {"sha": "200894fec2ec2097e78bfc95fc56145b8ce70a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/200894fec2ec2097e78bfc95fc56145b8ce70a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ca44069bbd8df4d88b08a0fb9fdb63895d60560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca44069bbd8df4d88b08a0fb9fdb63895d60560", "html_url": "https://github.com/rust-lang/rust/commit/8ca44069bbd8df4d88b08a0fb9fdb63895d60560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ca44069bbd8df4d88b08a0fb9fdb63895d60560/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519783adb3e7f1d32c2758ca4c111a58892b78cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/519783adb3e7f1d32c2758ca4c111a58892b78cc", "html_url": "https://github.com/rust-lang/rust/commit/519783adb3e7f1d32c2758ca4c111a58892b78cc"}], "stats": {"total": 145, "additions": 108, "deletions": 37}, "files": [{"sha": "feb4960e0c7463f2d618483aaead279a98806c87", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 100, "deletions": 34, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8ca44069bbd8df4d88b08a0fb9fdb63895d60560/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ca44069bbd8df4d88b08a0fb9fdb63895d60560/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=8ca44069bbd8df4d88b08a0fb9fdb63895d60560", "patch": "@@ -4,197 +4,257 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:39:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:44:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:46:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:51:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:53:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:58:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:76:16\n    |\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:78:18\n    |\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:80:33\n    |\n LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:82:35\n    |\n LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int and `bool` operations are stable in const fn\n+error[E0723]: only int and `bool` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:84:35\n    |\n LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:86:43\n    |\n LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: cannot access `static` items in const fn\n+error[E0723]: cannot access `static` items in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:90:27\n    |\n LL | const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n    |                           ^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: cannot access `static` items in const fn\n+error[E0723]: cannot access `static` items in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:91:36\n    |\n LL | const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n    |                                    ^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:100:38\n    |\n LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:102:29\n    |\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:104:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:106:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:108:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:113:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:118:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:123:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `impl Trait` in const fn is unstable\n+error[E0723]: `impl Trait` in const fn is unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:129:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:131:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:133:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `impl Trait` in const fn is unstable\n+error[E0723]: `impl Trait` in const fn is unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:134:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n    |                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:135:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                       ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:136:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n warning[E0515]: cannot return reference to temporary value\n   --> $DIR/min_const_fn.rs:136:63\n@@ -208,25 +268,31 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:141:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:144:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:146:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 36 previous errors\n \n-Some errors occurred: E0493, E0515.\n+Some errors occurred: E0493, E0515, E0723.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "2800d622f5353c0947ac80779ca5f5058fc3cc17", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ca44069bbd8df4d88b08a0fb9fdb63895d60560/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ca44069bbd8df4d88b08a0fb9fdb63895d60560/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=8ca44069bbd8df4d88b08a0fb9fdb63895d60560", "patch": "@@ -1,14 +1,18 @@\n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn_dyn.rs:9:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn_dyn.rs:12:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n warning[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:12:67\n@@ -24,4 +28,5 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+Some errors occurred: E0716, E0723.\n+For more information about an error, try `rustc --explain E0716`."}]}