{"sha": "18644720eb808f39545ab208370d5f705bfc54d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjQ0NzIwZWI4MDhmMzk1NDVhYjIwODM3MGQ1ZjcwNWJmYzU0ZDM=", "commit": {"author": {"name": "Alexander Gonzalez", "email": "alexfertel97@gmail.com", "date": "2021-07-25T21:26:54Z"}, "committer": {"name": "Alexander Gonzalez", "email": "alexfertel97@gmail.com", "date": "2021-07-27T22:29:22Z"}, "message": "feat: Completed the client side implementation of rust-analyzer/hoverRange", "tree": {"sha": "098f2cdc708858b2d8cf4efd70a6273516042075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098f2cdc708858b2d8cf4efd70a6273516042075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18644720eb808f39545ab208370d5f705bfc54d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18644720eb808f39545ab208370d5f705bfc54d3", "html_url": "https://github.com/rust-lang/rust/commit/18644720eb808f39545ab208370d5f705bfc54d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18644720eb808f39545ab208370d5f705bfc54d3/comments", "author": {"login": "alexfertel", "id": 22298999, "node_id": "MDQ6VXNlcjIyMjk4OTk5", "avatar_url": "https://avatars.githubusercontent.com/u/22298999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexfertel", "html_url": "https://github.com/alexfertel", "followers_url": "https://api.github.com/users/alexfertel/followers", "following_url": "https://api.github.com/users/alexfertel/following{/other_user}", "gists_url": "https://api.github.com/users/alexfertel/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexfertel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexfertel/subscriptions", "organizations_url": "https://api.github.com/users/alexfertel/orgs", "repos_url": "https://api.github.com/users/alexfertel/repos", "events_url": "https://api.github.com/users/alexfertel/events{/privacy}", "received_events_url": "https://api.github.com/users/alexfertel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexfertel", "id": 22298999, "node_id": "MDQ6VXNlcjIyMjk4OTk5", "avatar_url": "https://avatars.githubusercontent.com/u/22298999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexfertel", "html_url": "https://github.com/alexfertel", "followers_url": "https://api.github.com/users/alexfertel/followers", "following_url": "https://api.github.com/users/alexfertel/following{/other_user}", "gists_url": "https://api.github.com/users/alexfertel/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexfertel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexfertel/subscriptions", "organizations_url": "https://api.github.com/users/alexfertel/orgs", "repos_url": "https://api.github.com/users/alexfertel/repos", "events_url": "https://api.github.com/users/alexfertel/events{/privacy}", "received_events_url": "https://api.github.com/users/alexfertel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca3bb8fcd3c3ac8eb232086f6286eb96f4bac79", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca3bb8fcd3c3ac8eb232086f6286eb96f4bac79", "html_url": "https://github.com/rust-lang/rust/commit/8ca3bb8fcd3c3ac8eb232086f6286eb96f4bac79"}], "stats": {"total": 159, "additions": 129, "deletions": 30}, "files": [{"sha": "a84d8dfd82be2bd106facd2e4e9099c98e34e243", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/18644720eb808f39545ab208370d5f705bfc54d3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18644720eb808f39545ab208370d5f705bfc54d3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=18644720eb808f39545ab208370d5f705bfc54d3", "patch": "@@ -867,28 +867,40 @@ pub(crate) fn handle_signature_help(\n \n pub(crate) fn handle_hover(\n     snap: GlobalStateSnapshot,\n-    params: lsp_ext::HoverParams,\n+    params: lsp_types::HoverParams,\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile::span(\"handle_hover\");\n+    let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n+    let info = match snap.analysis.hover(&snap.config.hover(), position)? {\n+        None => return Ok(None),\n+        Some(info) => info,\n+    };\n+\n+    let line_index = snap.file_line_index(position.file_id)?;\n+    let range = to_proto::range(&line_index, info.range);\n+    let hover = lsp_ext::Hover {\n+        hover: lsp_types::Hover {\n+            contents: HoverContents::Markup(to_proto::markup_content(info.info.markup)),\n+            range: Some(range),\n+        },\n+        actions: prepare_hover_actions(&snap, &info.info.actions),\n+    };\n+\n+    Ok(Some(hover))\n+}\n+\n+pub(crate) fn handle_hover_range(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_ext::HoverRangeParams,\n+) -> Result<Option<lsp_ext::Hover>> {\n+    let _p = profile::span(\"handle_hover_range\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let range = from_proto::file_range(&snap, params.text_document, params.range)?;\n \n-    let info = if range.range.is_empty() {\n-        // It's a hover over a position\n-        match snap\n-            .analysis\n-            .hover(&snap.config.hover(), FilePosition { file_id, offset: range.range.start() })?\n-        {\n-            None => return Ok(None),\n-            Some(info) => info,\n-        }\n-    } else {\n-        // It's a hover over a range\n-        log::info!(\"Triggered range hover\");\n-        match snap.analysis.hover_range(&snap.config.hover(), range)? {\n-            None => return Ok(None),\n-            Some(info) => info,\n-        }\n+    log::info!(\"Triggered range hover\");\n+    let info = match snap.analysis.hover_range(&snap.config.hover(), range)? {\n+        None => return Ok(None),\n+        Some(info) => info,\n     };\n \n     let line_index = snap.file_line_index(range.file_id)?;"}, {"sha": "7aed93f992abd462c3a2e7fd7d9b64dc26952047", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18644720eb808f39545ab208370d5f705bfc54d3/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18644720eb808f39545ab208370d5f705bfc54d3/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=18644720eb808f39545ab208370d5f705bfc54d3", "patch": "@@ -376,14 +376,22 @@ pub struct SnippetTextEdit {\n pub enum HoverRequest {}\n \n impl Request for HoverRequest {\n-    type Params = HoverParams;\n+    type Params = lsp_types::HoverParams;\n     type Result = Option<Hover>;\n     const METHOD: &'static str = \"textDocument/hover\";\n }\n \n+pub enum HoverRangeRequest {}\n+\n+impl Request for HoverRangeRequest {\n+    type Params = HoverRangeParams;\n+    type Result = Option<Hover>;\n+    const METHOD: &'static str = \"rust-analyzer/hoverRange\";\n+}\n+\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n-pub struct HoverParams {\n+pub struct HoverRangeParams {\n     pub text_document: TextDocumentIdentifier,\n     pub range: Range,\n }"}, {"sha": "af3cb0c8792bff761fa79e9032d8ccab1cb17eaa", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18644720eb808f39545ab208370d5f705bfc54d3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18644720eb808f39545ab208370d5f705bfc54d3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=18644720eb808f39545ab208370d5f705bfc54d3", "patch": "@@ -542,6 +542,7 @@ impl GlobalState {\n             .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)\n             .on::<lsp_ext::CodeActionResolveRequest>(handlers::handle_code_action_resolve)\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)\n+            .on::<lsp_ext::HoverRangeRequest>(handlers::handle_hover_range)\n             .on::<lsp_ext::ExternalDocs>(handlers::handle_open_docs)\n             .on::<lsp_ext::OpenCargoToml>(handlers::handle_open_cargo_toml)\n             .on::<lsp_ext::MoveItem>(handlers::handle_move_item)"}, {"sha": "f0c10698a0c8a73339a3890b2e782f1040757d57", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=18644720eb808f39545ab208370d5f705bfc54d3", "patch": "@@ -56,21 +56,67 @@ export function createClient(serverPath: string, workspace: Workspace, extraEnv:\n         traceOutputChannel,\n         middleware: {\n             async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n-                return client.sendRequest(lc.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(\n-                    (result) => {\n-                        const hover = client.protocol2CodeConverter.asHover(result);\n-                        if (hover) {\n+                const editor = vscode.window.activeTextEditor;\n+                const selection = editor?.selection;\n+                return selection?.contains(position)\n+                  ? client\n+                      .sendRequest(\n+                        ra.hoverRange,\n+                        {\n+                          textDocument:\n+                            client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                              document\n+                            ),\n+                          range: client.code2ProtocolConverter.asRange(\n+                            editor?.selection\n+                          ),\n+                        },\n+                        token\n+                      )\n+                      .then(\n+                        (result) =>\n+                          client.protocol2CodeConverter.asHover(result),\n+                        (error) => {\n+                          client.handleFailedRequest(\n+                            lc.HoverRequest.type,\n+                            undefined,\n+                            error,\n+                            null\n+                          );\n+                          return Promise.resolve(null);\n+                        }\n+                      )\n+                  : client\n+                      .sendRequest(\n+                        lc.HoverRequest.type,\n+                        client.code2ProtocolConverter.asTextDocumentPositionParams(\n+                          document,\n+                          position\n+                        ),\n+                        token\n+                      )\n+                      .then(\n+                        (result) => {\n+                          const hover =\n+                            client.protocol2CodeConverter.asHover(result);\n+                          if (hover) {\n                             const actions = (<any>result).actions;\n                             if (actions) {\n-                                hover.contents.push(renderHoverActions(actions));\n+                              hover.contents.push(renderHoverActions(actions));\n                             }\n+                          }\n+                          return hover;\n+                        },\n+                        (error) => {\n+                          client.handleFailedRequest(\n+                            lc.HoverRequest.type,\n+                            token,\n+                            error,\n+                            null\n+                          );\n+                          return Promise.resolve(null);\n                         }\n-                        return hover;\n-                    },\n-                    (error) => {\n-                        client.handleFailedRequest(lc.HoverRequest.type, token, error, null);\n-                        return Promise.resolve(null);\n-                    });\n+                      );\n             },\n             // Using custom handling of CodeActions to support action groups and snippet edits.\n             // Note that this means we have to re-implement lazy edit resolving ourselves as well."}, {"sha": "7f5cdd4876eab4f46ef1125a3fcadfcbcb74e464", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=18644720eb808f39545ab208370d5f705bfc54d3", "patch": "@@ -116,6 +116,30 @@ export function matchingBrace(ctx: Ctx): Cmd {\n     };\n }\n \n+export function hoverRange(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        client\n+        .sendRequest(ra.hoverRange, {\n+            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                editor.document\n+            ),\n+            range: client.code2ProtocolConverter.asRange(editor.selection),\n+        })\n+        .then(\n+            (result) => client.protocol2CodeConverter.asHover(result),\n+            (error) => {\n+                client.handleFailedRequest(lc.HoverRequest.type, undefined, error, null);\n+                return Promise.resolve(null);\n+            }\n+        );\n+    };\n+}\n+\n+\n export function joinLines(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;"}, {"sha": "2570a2d1f5d59bfdf8a1ba86b876d9573f4bab5d", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=18644720eb808f39545ab208370d5f705bfc54d3", "patch": "@@ -19,6 +19,13 @@ export const serverStatus = new lc.NotificationType<ServerStatusParams>(\"experim\n \n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n \n+export const hoverRange = new lc.RequestType<HoverRangeParams, lc.Hover | null, void>(\"rust-analyzer/hoverRange\");\n+\n+export interface HoverRangeParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n+}\n+\n export interface SyntaxTreeParams {\n     textDocument: lc.TextDocumentIdentifier;\n     range: lc.Range | null;"}, {"sha": "659d91e5ff43bac013953006a36e43c1872db457", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/18644720eb808f39545ab208370d5f705bfc54d3/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=18644720eb808f39545ab208370d5f705bfc54d3", "patch": "@@ -118,6 +118,7 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     ctx.registerCommand('reloadWorkspace', commands.reloadWorkspace);\n     ctx.registerCommand('matchingBrace', commands.matchingBrace);\n     ctx.registerCommand('joinLines', commands.joinLines);\n+    ctx.registerCommand('hoverRange', commands.hoverRange);\n     ctx.registerCommand('parentModule', commands.parentModule);\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('viewHir', commands.viewHir);"}]}