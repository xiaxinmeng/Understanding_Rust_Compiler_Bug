{"sha": "9306540f611c322178695efa7b1be8d14e6372dd", "node_id": "C_kwDOAAsO6NoAKDkzMDY1NDBmNjExYzMyMjE3ODY5NWVmYTdiMWJlOGQxNGU2MzcyZGQ", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-23T14:04:50Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-23T14:06:59Z"}, "message": "Remove overlap between rustc and clippy `let_underscore_lock` lint", "tree": {"sha": "f394701bffcdc21c4f856e96ccb56e81895f5230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f394701bffcdc21c4f856e96ccb56e81895f5230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9306540f611c322178695efa7b1be8d14e6372dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9306540f611c322178695efa7b1be8d14e6372dd", "html_url": "https://github.com/rust-lang/rust/commit/9306540f611c322178695efa7b1be8d14e6372dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9306540f611c322178695efa7b1be8d14e6372dd/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff893366c1ac355822aa644c0ed43930eb605fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff893366c1ac355822aa644c0ed43930eb605fb4", "html_url": "https://github.com/rust-lang/rust/commit/ff893366c1ac355822aa644c0ed43930eb605fb4"}], "stats": {"total": 112, "additions": 30, "deletions": 82}, "files": [{"sha": "cfc1a21ea87feaf20effb9ec1a52902ed3d0895b", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9306540f611c322178695efa7b1be8d14e6372dd/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9306540f611c322178695efa7b1be8d14e6372dd/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=9306540f611c322178695efa7b1be8d14e6372dd", "patch": "@@ -1,12 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::{is_must_use_ty, is_type_diagnostic_item, match_type};\n+use clippy_utils::ty::{is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{sym, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -34,8 +33,9 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `let _ = sync_lock`.\n-    /// This supports `mutex` and `rwlock` in `std::sync` and `parking_lot`.\n+    /// Checks for `let _ = sync_lock`. This supports `mutex` and `rwlock` in\n+    /// `parking_lot`. For `std` locks see the `rustc` lint\n+    /// [`let_underscore_lock`](https://doc.rust-lang.org/nightly/rustc/lints/listing/deny-by-default.html#let-underscore-lock)\n     ///\n     /// ### Why is this bad?\n     /// This statement immediately drops the lock instead of\n@@ -61,8 +61,6 @@ declare_clippy_lint! {\n \n declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n \n-const SYNC_GUARD_SYMS: [Symbol; 3] = [sym::MutexGuard, sym::RwLockReadGuard, sym::RwLockWriteGuard];\n-\n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::PARKING_LOT_MUTEX_GUARD,\n     &paths::PARKING_LOT_RWLOCK_READ_GUARD,\n@@ -77,13 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n         {\n             let init_ty = cx.typeck_results().expr_ty(init);\n             let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n-                GenericArgKind::Type(inner_ty) => {\n-                    SYNC_GUARD_SYMS\n-                        .iter()\n-                        .any(|&sym| is_type_diagnostic_item(cx, inner_ty, sym))\n-                        || SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n-                },\n-\n+                GenericArgKind::Type(inner_ty) => SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path)),\n                 GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n             });\n             if contains_sync_guard {"}, {"sha": "88394a0a267a1f36d8a524c7bb28510582df9f8b", "filename": "src/docs/let_underscore_lock.txt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9306540f611c322178695efa7b1be8d14e6372dd/src%2Fdocs%2Flet_underscore_lock.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9306540f611c322178695efa7b1be8d14e6372dd/src%2Fdocs%2Flet_underscore_lock.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Flet_underscore_lock.txt?ref=9306540f611c322178695efa7b1be8d14e6372dd", "patch": "@@ -1,6 +1,7 @@\n ### What it does\n-Checks for `let _ = sync_lock`.\n-This supports `mutex` and `rwlock` in `std::sync` and `parking_lot`.\n+Checks for `let _ = sync_lock`. This supports `mutex` and `rwlock` in\n+`parking_lot`. For `std` locks see the `rustc` lint\n+[`let_underscore_lock`](https://doc.rust-lang.org/nightly/rustc/lints/listing/deny-by-default.html#let-underscore-lock)\n \n ### Why is this bad?\n This statement immediately drops the lock instead of"}, {"sha": "4dff4d766bcc382ada595d3b5ade11afc3d420dc", "filename": "tests/ui/let_underscore_lock.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9306540f611c322178695efa7b1be8d14e6372dd/tests%2Fui%2Flet_underscore_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9306540f611c322178695efa7b1be8d14e6372dd/tests%2Fui%2Flet_underscore_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.rs?ref=9306540f611c322178695efa7b1be8d14e6372dd", "patch": "@@ -3,20 +3,6 @@\n extern crate parking_lot;\n \n fn main() {\n-    let m = std::sync::Mutex::new(());\n-    let rw = std::sync::RwLock::new(());\n-\n-    let _ = m.lock();\n-    let _ = rw.read();\n-    let _ = rw.write();\n-    let _ = m.try_lock();\n-    let _ = rw.try_read();\n-    let _ = rw.try_write();\n-\n-    // These shouldn't throw an error.\n-    let _ = m;\n-    let _ = rw;\n-\n     use parking_lot::{lock_api::RawMutex, Mutex, RwLock};\n \n     let p_m: Mutex<()> = Mutex::const_new(RawMutex::INIT, ());\n@@ -34,3 +20,20 @@ fn main() {\n     let _ = p_m1;\n     let _ = p_rw;\n }\n+\n+fn uplifted() {\n+    // shouldn't lint std locks as they were uplifted as rustc's `let_underscore_lock`\n+\n+    let m = std::sync::Mutex::new(());\n+    let rw = std::sync::RwLock::new(());\n+\n+    let _ = m.lock();\n+    let _ = rw.read();\n+    let _ = rw.write();\n+    let _ = m.try_lock();\n+    let _ = rw.try_read();\n+    let _ = rw.try_write();\n+\n+    let _ = m;\n+    let _ = rw;\n+}"}, {"sha": "89350b92e82980e7f86800401f8a778c570c9661", "filename": "tests/ui/let_underscore_lock.stderr", "status": "modified", "additions": 5, "deletions": 53, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9306540f611c322178695efa7b1be8d14e6372dd/tests%2Fui%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9306540f611c322178695efa7b1be8d14e6372dd/tests%2Fui%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.stderr?ref=9306540f611c322178695efa7b1be8d14e6372dd", "patch": "@@ -1,83 +1,35 @@\n error: non-binding let on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:9:5\n    |\n-LL |     let _ = m.lock();\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-   = note: `-D clippy::let-underscore-lock` implied by `-D warnings`\n-\n-error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:10:5\n-   |\n-LL |     let _ = rw.read();\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:11:5\n-   |\n-LL |     let _ = rw.write();\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:12:5\n-   |\n-LL |     let _ = m.try_lock();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:13:5\n-   |\n-LL |     let _ = rw.try_read();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:14:5\n-   |\n-LL |     let _ = rw.try_write();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:23:5\n-   |\n LL |     let _ = p_m.lock();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+   = note: `-D clippy::let-underscore-lock` implied by `-D warnings`\n \n error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:26:5\n+  --> $DIR/let_underscore_lock.rs:12:5\n    |\n LL |     let _ = p_m1.lock();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:29:5\n+  --> $DIR/let_underscore_lock.rs:15:5\n    |\n LL |     let _ = p_rw.read();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:30:5\n+  --> $DIR/let_underscore_lock.rs:16:5\n    |\n LL |     let _ = p_rw.write();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 4 previous errors\n "}]}