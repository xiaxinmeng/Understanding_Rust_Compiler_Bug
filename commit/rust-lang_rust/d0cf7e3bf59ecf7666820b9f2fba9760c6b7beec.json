{"sha": "d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "node_id": "C_kwDOAAsO6NoAKGQwY2Y3ZTNiZjU5ZWNmNzY2NjgyMGI5ZjJmYmE5NzYwYzZiN2JlZWM", "commit": {"author": {"name": "wcampbell", "email": "wcampbell1995@gmail.com", "date": "2023-01-07T00:34:45Z"}, "committer": {"name": "wcampbell", "email": "wcampbell1995@gmail.com", "date": "2023-01-07T00:34:45Z"}, "message": "Use fmt named parameters in rustc_borrowck", "tree": {"sha": "0ae7c5776820ea2097ab99d36e8e110042f13376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae7c5776820ea2097ab99d36e8e110042f13376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "html_url": "https://github.com/rust-lang/rust/commit/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/comments", "author": {"login": "wcampbell0x2a", "id": 15236002, "node_id": "MDQ6VXNlcjE1MjM2MDAy", "avatar_url": "https://avatars.githubusercontent.com/u/15236002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcampbell0x2a", "html_url": "https://github.com/wcampbell0x2a", "followers_url": "https://api.github.com/users/wcampbell0x2a/followers", "following_url": "https://api.github.com/users/wcampbell0x2a/following{/other_user}", "gists_url": "https://api.github.com/users/wcampbell0x2a/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcampbell0x2a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcampbell0x2a/subscriptions", "organizations_url": "https://api.github.com/users/wcampbell0x2a/orgs", "repos_url": "https://api.github.com/users/wcampbell0x2a/repos", "events_url": "https://api.github.com/users/wcampbell0x2a/events{/privacy}", "received_events_url": "https://api.github.com/users/wcampbell0x2a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wcampbell0x2a", "id": 15236002, "node_id": "MDQ6VXNlcjE1MjM2MDAy", "avatar_url": "https://avatars.githubusercontent.com/u/15236002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcampbell0x2a", "html_url": "https://github.com/wcampbell0x2a", "followers_url": "https://api.github.com/users/wcampbell0x2a/followers", "following_url": "https://api.github.com/users/wcampbell0x2a/following{/other_user}", "gists_url": "https://api.github.com/users/wcampbell0x2a/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcampbell0x2a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcampbell0x2a/subscriptions", "organizations_url": "https://api.github.com/users/wcampbell0x2a/orgs", "repos_url": "https://api.github.com/users/wcampbell0x2a/repos", "events_url": "https://api.github.com/users/wcampbell0x2a/events{/privacy}", "received_events_url": "https://api.github.com/users/wcampbell0x2a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb8b72ce49997d60a631e921d2cf5be9ca229e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb8b72ce49997d60a631e921d2cf5be9ca229e6", "html_url": "https://github.com/rust-lang/rust/commit/0fb8b72ce49997d60a631e921d2cf5be9ca229e6"}], "stats": {"total": 155, "additions": 63, "deletions": 92}, "files": [{"sha": "84d2967b5f97cbef346c4976ab9d37bdaaff4b6b", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -156,7 +156,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 err.span_note(\n                     MultiSpan::from_spans(reinit_spans),\n                     &if reinits <= 3 {\n-                        format!(\"these {} reinitializations might get skipped\", reinits)\n+                        format!(\"these {reinits} reinitializations might get skipped\")\n                     } else {\n                         format!(\n                             \"these 3 reinitializations and {} other{} might get skipped\",\n@@ -225,9 +225,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 err.span_label(\n                     span,\n                     format!(\n-                        \"value {} here after {}move\",\n+                        \"value {} here after {partial_str}move\",\n                         desired_action.as_verb_in_past_tense(),\n-                        partial_str\n                     ),\n                 );\n             }\n@@ -257,7 +256,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         &format!(\n                             \"consider creating a fresh reborrow of {} here\",\n                             self.describe_place(moved_place)\n-                                .map(|n| format!(\"`{}`\", n))\n+                                .map(|n| format!(\"`{n}`\"))\n                                 .unwrap_or_else(|| \"the mutable reference\".to_string()),\n                         ),\n                         \"&mut *\",\n@@ -271,7 +270,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 DescribePlaceOpt { including_downcast: true, including_tuple_field: true },\n             );\n             let note_msg = match opt_name {\n-                Some(name) => format!(\"`{}`\", name),\n+                Some(name) => format!(\"`{name}`\"),\n                 None => \"value\".to_owned(),\n             };\n             if self.suggest_borrow_fn_like(&mut err, ty, &move_site_vec, &note_msg) {\n@@ -297,9 +296,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             } = use_spans\n             {\n                 err.note(&format!(\n-                    \"{} occurs due to deref coercion to `{}`\",\n+                    \"{} occurs due to deref coercion to `{deref_target_ty}`\",\n                     desired_action.as_noun(),\n-                    deref_target_ty\n                 ));\n \n                 // Check first whether the source is accessible (issue #87060)"}, {"sha": "120693b1d0cc992a5c05fcc8f823b910a96f4c8c", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                     if borrow_span.map(|sp| !sp.overlaps(var_or_use_span)).unwrap_or(true) {\n                         err.span_label(\n                             var_or_use_span,\n-                            format!(\"{}borrow later {}\", borrow_desc, message),\n+                            format!(\"{borrow_desc}borrow later {message}\"),\n                         );\n                     }\n                 } else {\n@@ -90,7 +90,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                         let capture_kind_label = message;\n                         err.span_label(\n                             var_or_use_span,\n-                            format!(\"{}borrow later {}\", borrow_desc, capture_kind_label),\n+                            format!(\"{borrow_desc}borrow later {capture_kind_label}\"),\n                         );\n                         err.span_label(path_span, path_label);\n                     }\n@@ -110,7 +110,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                 };\n                 // We can use `var_or_use_span` if either `path_span` is not present, or both spans are the same\n                 if path_span.map(|path_span| path_span == var_or_use_span).unwrap_or(true) {\n-                    err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n+                    err.span_label(var_or_use_span, format!(\"{borrow_desc}{message}\"));\n                 } else {\n                     // path_span must be `Some` as otherwise the if condition is true\n                     let path_span = path_span.unwrap();\n@@ -121,7 +121,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                         let capture_kind_label = message;\n                         err.span_label(\n                             var_or_use_span,\n-                            format!(\"{}borrow later {}\", borrow_desc, capture_kind_label),\n+                            format!(\"{borrow_desc}borrow later {capture_kind_label}\"),\n                         );\n                         err.span_label(path_span, path_label);\n                     }\n@@ -160,12 +160,8 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                 match local_names[dropped_local] {\n                     Some(local_name) if !local_decl.from_compiler_desugaring() => {\n                         let message = format!(\n-                            \"{B}borrow might be used here, when `{LOC}` is dropped \\\n-                             and runs the {DTOR} for {TYPE}\",\n-                            B = borrow_desc,\n-                            LOC = local_name,\n-                            TYPE = type_desc,\n-                            DTOR = dtor_desc\n+                            \"{borrow_desc}borrow might be used here, when `{local_name}` is dropped \\\n+                             and runs the {dtor_desc} for {type_desc}\",\n                         );\n                         err.span_label(body.source_info(drop_loc).span, message);\n \n@@ -180,18 +176,14 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                         err.span_label(\n                             local_decl.source_info.span,\n                             format!(\n-                                \"a temporary with access to the {B}borrow \\\n+                                \"a temporary with access to the {borrow_desc}borrow \\\n                                  is created here ...\",\n-                                B = borrow_desc\n                             ),\n                         );\n                         let message = format!(\n-                            \"... and the {B}borrow might be used here, \\\n+                            \"... and the {borrow_desc}borrow might be used here, \\\n                              when that temporary is dropped \\\n-                             and runs the {DTOR} for {TYPE}\",\n-                            B = borrow_desc,\n-                            TYPE = type_desc,\n-                            DTOR = dtor_desc\n+                             and runs the {dtor_desc} for {type_desc}\",\n                         );\n                         err.span_label(body.source_info(drop_loc).span, message);\n \n@@ -249,20 +241,16 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                     err.span_label(\n                         span,\n                         format!(\n-                            \"{}requires that `{}` is borrowed for `{}`\",\n+                            \"{}requires that `{desc}` is borrowed for `{region_name}`\",\n                             category.description(),\n-                            desc,\n-                            region_name,\n                         ),\n                     );\n                 } else {\n                     err.span_label(\n                         span,\n                         format!(\n-                            \"{}requires that {}borrow lasts for `{}`\",\n+                            \"{}requires that {borrow_desc}borrow lasts for `{region_name}`\",\n                             category.description(),\n-                            borrow_desc,\n-                            region_name,\n                         ),\n                     );\n                 };\n@@ -296,15 +284,14 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                 if region_name.was_named() { region_name.name } else { kw::UnderscoreLifetime };\n \n             let msg = format!(\n-                \"you can add a bound to the {}to make it last less than `'static` and match `{}`\",\n+                \"you can add a bound to the {}to make it last less than `'static` and match `{region_name}`\",\n                 category.description(),\n-                region_name,\n             );\n \n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),\n                 &msg,\n-                format!(\" + {}\", suggestable_name),\n+                format!(\" + {suggestable_name}\"),\n                 Applicability::Unspecified,\n             );\n         }"}, {"sha": "1b40b7143cbb6b671ba2faec06326c362a669de8", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -403,8 +403,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         move_prefix: &str,\n     ) {\n         let message = format!(\n-            \"{}move occurs because {} has type `{}`, which does not implement the `Copy` trait\",\n-            move_prefix, place_desc, ty,\n+            \"{move_prefix}move occurs because {place_desc} has type `{ty}`, which does not implement the `Copy` trait\",\n         );\n         if let Some(span) = span {\n             err.span_label(span, message);\n@@ -739,11 +738,11 @@ impl<'tcx> BorrowedContentSource<'tcx> {\n             BorrowedContentSource::OverloadedDeref(ty) => ty\n                 .ty_adt_def()\n                 .and_then(|adt| match tcx.get_diagnostic_name(adt.did())? {\n-                    name @ (sym::Rc | sym::Arc) => Some(format!(\"an `{}`\", name)),\n+                    name @ (sym::Rc | sym::Arc) => Some(format!(\"an `{name}`\")),\n                     _ => None,\n                 })\n-                .unwrap_or_else(|| format!(\"dereference of `{}`\", ty)),\n-            BorrowedContentSource::OverloadedIndex(ty) => format!(\"index of `{}`\", ty),\n+                .unwrap_or_else(|| format!(\"dereference of `{ty}`\")),\n+            BorrowedContentSource::OverloadedIndex(ty) => format!(\"index of `{ty}`\"),\n         }\n     }\n \n@@ -769,11 +768,11 @@ impl<'tcx> BorrowedContentSource<'tcx> {\n             BorrowedContentSource::OverloadedDeref(ty) => ty\n                 .ty_adt_def()\n                 .and_then(|adt| match tcx.get_diagnostic_name(adt.did())? {\n-                    name @ (sym::Rc | sym::Arc) => Some(format!(\"an `{}`\", name)),\n+                    name @ (sym::Rc | sym::Arc) => Some(format!(\"an `{name}`\")),\n                     _ => None,\n                 })\n-                .unwrap_or_else(|| format!(\"dereference of `{}`\", ty)),\n-            BorrowedContentSource::OverloadedIndex(ty) => format!(\"an index of `{}`\", ty),\n+                .unwrap_or_else(|| format!(\"dereference of `{ty}`\")),\n+            BorrowedContentSource::OverloadedIndex(ty) => format!(\"an index of `{ty}`\"),\n         }\n     }\n \n@@ -1033,7 +1032,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } = move_spans {\n             let place_name = self\n                 .describe_place(moved_place.as_ref())\n-                .map(|n| format!(\"`{}`\", n))\n+                .map(|n| format!(\"`{n}`\"))\n                 .unwrap_or_else(|| \"value\".to_owned());\n             match kind {\n                 CallKind::FnCall { fn_trait_id, .. }\n@@ -1042,8 +1041,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     err.span_label(\n                         fn_call_span,\n                         &format!(\n-                            \"{} {}moved due to this call{}\",\n-                            place_name, partially_str, loop_message\n+                            \"{place_name} {partially_str}moved due to this call{loop_message}\",\n                         ),\n                     );\n                     err.span_note(\n@@ -1056,8 +1054,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     err.span_label(\n                         fn_call_span,\n                         &format!(\n-                            \"{} {}moved due to usage in operator{}\",\n-                            place_name, partially_str, loop_message\n+                            \"{place_name} {partially_str}moved due to usage in operator{loop_message}\",\n                         ),\n                     );\n                     if self.fn_self_span_reported.insert(fn_span) {\n@@ -1089,9 +1086,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             err.span_suggestion_verbose(\n                                 move_span.shrink_to_lo(),\n                                 &format!(\n-                                    \"consider iterating over a slice of the `{}`'s content to \\\n+                                    \"consider iterating over a slice of the `{ty}`'s content to \\\n                                      avoid moving into the `for` loop\",\n-                                    ty,\n                                 ),\n                                 \"&\",\n                                 Applicability::MaybeIncorrect,\n@@ -1101,8 +1097,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         err.span_label(\n                             fn_call_span,\n                             &format!(\n-                                \"{} {}moved due to this implicit call to `.into_iter()`{}\",\n-                                place_name, partially_str, loop_message\n+                                \"{place_name} {partially_str}moved due to this implicit call to `.into_iter()`{loop_message}\",\n                             ),\n                         );\n                         // If the moved place was a `&mut` ref, then we can\n@@ -1118,7 +1113,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                     &format!(\n                                         \"consider creating a fresh reborrow of {} here\",\n                                         self.describe_place(moved_place.as_ref())\n-                                            .map(|n| format!(\"`{}`\", n))\n+                                            .map(|n| format!(\"`{n}`\"))\n                                             .unwrap_or_else(|| \"the mutable reference\".to_string()),\n                                     ),\n                                     \"&mut *\",\n@@ -1130,8 +1125,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         err.span_label(\n                             fn_call_span,\n                             &format!(\n-                                \"{} {}moved due to this method call{}\",\n-                                place_name, partially_str, loop_message\n+                                \"{place_name} {partially_str}moved due to this method call{loop_message}\",\n                             ),\n                         );\n                         let infcx = tcx.infer_ctxt().build();\n@@ -1206,15 +1200,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             if move_span != span || !loop_message.is_empty() {\n                 err.span_label(\n                     move_span,\n-                    format!(\"value {}moved{} here{}\", partially_str, move_msg, loop_message),\n+                    format!(\"value {partially_str}moved{move_msg} here{loop_message}\"),\n                 );\n             }\n             // If the move error occurs due to a loop, don't show\n             // another message for the same span\n             if loop_message.is_empty() {\n                 move_spans.var_span_label(\n                     err,\n-                    format!(\"variable {}moved due to use{}\", partially_str, move_spans.describe()),\n+                    format!(\"variable {partially_str}moved due to use{}\", move_spans.describe()),\n                     \"moved\",\n                 );\n             }"}, {"sha": "5f11da3a98da4b4e9a3b106e0e24b02d458f5fd2", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         ProjectionElem::Deref,\n                     ],\n             } => {\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n \n                 if let Some(span) = get_mut_span_in_struct_field(\n                     self.infcx.tcx,\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     .unwrap_or(false) =>\n             {\n                 let decl = &self.body.local_decls[local];\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n                 if let Some(mir::Statement {\n                     source_info,\n                     kind:\n@@ -634,7 +634,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n \n             PlaceRef { local: _, projection: [.., ProjectionElem::Deref] } => {\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n \n                 match opt_source {\n                     Some(BorrowedContentSource::OverloadedDeref(ty)) => {\n@@ -1207,7 +1207,7 @@ fn suggest_ampmut<'tcx>(\n     {\n         let lt_name = &src[1..ws_pos];\n         let ty = &src[ws_pos..];\n-        return (true, highlight_span, format!(\"&{} mut{}\", lt_name, ty));\n+        return (true, highlight_span, format!(\"&{lt_name} mut{ty}\"));\n     }\n \n     let ty_mut = local_decl.ty.builtin_deref(true).unwrap();"}, {"sha": "1eaf0a2f15ce8ffe2468e25a387ec111cd2fe84a", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -209,14 +209,14 @@ impl OutlivesSuggestionBuilder {\n         let mut diag = if suggested.len() == 1 {\n             mbcx.infcx.tcx.sess.diagnostic().struct_help(&match suggested.last().unwrap() {\n                 SuggestedConstraint::Outlives(a, bs) => {\n-                    let bs: SmallVec<[String; 2]> = bs.iter().map(|r| format!(\"{}\", r)).collect();\n-                    format!(\"add bound `{}: {}`\", a, bs.join(\" + \"))\n+                    let bs: SmallVec<[String; 2]> = bs.iter().map(|r| r.to_string()).collect();\n+                    format!(\"add bound `{a}: {}`\", bs.join(\" + \"))\n                 }\n \n                 SuggestedConstraint::Equal(a, b) => {\n-                    format!(\"`{}` and `{}` must be the same: replace one with the other\", a, b)\n+                    format!(\"`{a}` and `{b}` must be the same: replace one with the other\")\n                 }\n-                SuggestedConstraint::Static(a) => format!(\"replace `{}` with `'static`\", a),\n+                SuggestedConstraint::Static(a) => format!(\"replace `{a}` with `'static`\"),\n             })\n         } else {\n             // Create a new diagnostic.\n@@ -231,18 +231,16 @@ impl OutlivesSuggestionBuilder {\n             for constraint in suggested {\n                 match constraint {\n                     SuggestedConstraint::Outlives(a, bs) => {\n-                        let bs: SmallVec<[String; 2]> =\n-                            bs.iter().map(|r| format!(\"{}\", r)).collect();\n-                        diag.help(&format!(\"add bound `{}: {}`\", a, bs.join(\" + \")));\n+                        let bs: SmallVec<[String; 2]> = bs.iter().map(|r| r.to_string()).collect();\n+                        diag.help(&format!(\"add bound `{a}: {}`\", bs.join(\" + \")));\n                     }\n                     SuggestedConstraint::Equal(a, b) => {\n                         diag.help(&format!(\n-                            \"`{}` and `{}` must be the same: replace one with the other\",\n-                            a, b\n+                            \"`{a}` and `{b}` must be the same: replace one with the other\",\n                         ));\n                     }\n                     SuggestedConstraint::Static(a) => {\n-                        diag.help(&format!(\"replace `{}` with `'static`\", a));\n+                        diag.help(&format!(\"replace `{a}` with `'static`\"));\n                     }\n                 }\n             }"}, {"sha": "e8a4d1c37c1877296151a84dd9e3cd5513716b2b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -422,7 +422,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         );\n                         (desc, note)\n                     }\n-                    _ => panic!(\"Unexpected type {:?}\", ty),\n+                    _ => panic!(\"Unexpected type {ty:?}\"),\n                 };\n                 diag.note(&format!(\"requirement occurs because of {desc}\",));\n                 diag.note(&note);\n@@ -725,10 +725,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             let lifetime = if f.has_name() { fr_name.name } else { kw::UnderscoreLifetime };\n \n             let arg = match param.param.pat.simple_ident() {\n-                Some(simple_ident) => format!(\"argument `{}`\", simple_ident),\n+                Some(simple_ident) => format!(\"argument `{simple_ident}`\"),\n                 None => \"the argument\".to_string(),\n             };\n-            let captures = format!(\"captures data from {}\", arg);\n+            let captures = format!(\"captures data from {arg}\");\n \n             return nice_region_error::suggest_new_region_bound(\n                 self.infcx.tcx,"}, {"sha": "c41db0e1fc357e317fa048695faffb5a33acfb5e", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -202,7 +202,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// This is _not_ idempotent. Call `give_region_a_name` when possible.\n     fn synthesize_region_name(&self) -> Symbol {\n         let c = self.next_region_name.replace_with(|counter| *counter + 1);\n-        Symbol::intern(&format!(\"'{:?}\", c))\n+        Symbol::intern(&format!(\"'{c:?}\"))\n     }\n \n     /// Maps from an internal MIR region vid to something that we can\n@@ -619,7 +619,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     // programs, so we need to use delay_span_bug here. See #82126.\n                     self.infcx.tcx.sess.delay_span_bug(\n                         hir_arg.span(),\n-                        &format!(\"unmatched subst and hir arg: found {:?} vs {:?}\", kind, hir_arg),\n+                        &format!(\"unmatched subst and hir arg: found {kind:?} vs {hir_arg:?}\"),\n                     );\n                 }\n             }\n@@ -783,8 +783,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         } else {\n             span_bug!(\n                 hir_ty.span,\n-                \"bounds from lowered return type of async fn did not match expected format: {:?}\",\n-                opaque_ty\n+                \"bounds from lowered return type of async fn did not match expected format: {opaque_ty:?}\",\n             );\n         }\n     }"}, {"sha": "ada3310d8071b776215d5ce4c5c5d037d353df93", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -18,7 +18,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         upvars: &[Upvar<'tcx>],\n         fr: RegionVid,\n     ) -> Option<(Option<Symbol>, Span)> {\n-        debug!(\"get_var_name_and_span_for_region(fr={:?})\", fr);\n+        debug!(\"get_var_name_and_span_for_region(fr={fr:?})\");\n         assert!(self.universal_regions().is_universal_region(fr));\n \n         debug!(\"get_var_name_and_span_for_region: attempting upvar\");\n@@ -44,19 +44,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> Option<usize> {\n         let upvar_index =\n             self.universal_regions().defining_ty.upvar_tys().position(|upvar_ty| {\n-                debug!(\"get_upvar_index_for_region: upvar_ty={:?}\", upvar_ty);\n+                debug!(\"get_upvar_index_for_region: upvar_ty={upvar_ty:?}\");\n                 tcx.any_free_region_meets(&upvar_ty, |r| {\n                     let r = r.to_region_vid();\n-                    debug!(\"get_upvar_index_for_region: r={:?} fr={:?}\", r, fr);\n+                    debug!(\"get_upvar_index_for_region: r={r:?} fr={fr:?}\");\n                     r == fr\n                 })\n             })?;\n \n         let upvar_ty = self.universal_regions().defining_ty.upvar_tys().nth(upvar_index);\n \n         debug!(\n-            \"get_upvar_index_for_region: found {:?} in upvar {} which has type {:?}\",\n-            fr, upvar_index, upvar_ty,\n+            \"get_upvar_index_for_region: found {fr:?} in upvar {upvar_index} which has type {upvar_ty:?}\",\n         );\n \n         Some(upvar_index)\n@@ -71,13 +70,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         upvar_index: usize,\n     ) -> (Symbol, Span) {\n         let upvar_hir_id = upvars[upvar_index].place.get_root_variable();\n-        debug!(\"get_upvar_name_and_span_for_region: upvar_hir_id={:?}\", upvar_hir_id);\n+        debug!(\"get_upvar_name_and_span_for_region: upvar_hir_id={upvar_hir_id:?}\");\n \n         let upvar_name = tcx.hir().name(upvar_hir_id);\n         let upvar_span = tcx.hir().span(upvar_hir_id);\n         debug!(\n-            \"get_upvar_name_and_span_for_region: upvar_name={:?} upvar_span={:?}\",\n-            upvar_name, upvar_span\n+            \"get_upvar_name_and_span_for_region: upvar_name={upvar_name:?} upvar_span={upvar_span:?}\",\n         );\n \n         (upvar_name, upvar_span)\n@@ -97,15 +95,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let argument_index =\n             self.universal_regions().unnormalized_input_tys.iter().skip(implicit_inputs).position(\n                 |arg_ty| {\n-                    debug!(\"get_argument_index_for_region: arg_ty = {:?}\", arg_ty);\n+                    debug!(\"get_argument_index_for_region: arg_ty = {arg_ty:?}\");\n                     tcx.any_free_region_meets(arg_ty, |r| r.to_region_vid() == fr)\n                 },\n             )?;\n \n         debug!(\n-            \"get_argument_index_for_region: found {:?} in argument {} which has type {:?}\",\n-            fr,\n-            argument_index,\n+            \"get_argument_index_for_region: found {fr:?} in argument {argument_index} which has type {:?}\",\n             self.universal_regions().unnormalized_input_tys[argument_index],\n         );\n \n@@ -122,13 +118,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> (Option<Symbol>, Span) {\n         let implicit_inputs = self.universal_regions().defining_ty.implicit_inputs();\n         let argument_local = Local::new(implicit_inputs + argument_index + 1);\n-        debug!(\"get_argument_name_and_span_for_region: argument_local={:?}\", argument_local);\n+        debug!(\"get_argument_name_and_span_for_region: argument_local={argument_local:?}\");\n \n         let argument_name = local_names[argument_local];\n         let argument_span = body.local_decls[argument_local].source_info.span;\n         debug!(\n-            \"get_argument_name_and_span_for_region: argument_name={:?} argument_span={:?}\",\n-            argument_name, argument_span\n+            \"get_argument_name_and_span_for_region: argument_name={argument_name:?} argument_span={argument_span:?}\",\n         );\n \n         (argument_name, argument_span)"}, {"sha": "02ffb51fbb7e3a3fb440a497e558702fefc5ba41", "filename": "compiler/rustc_borrowck/src/facts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs?ref=d0cf7e3bf59ecf7666820b9f2fba9760c6b7beec", "patch": "@@ -192,7 +192,7 @@ fn write_row(\n ) -> Result<(), Box<dyn Error>> {\n     for (index, c) in columns.iter().enumerate() {\n         let tail = if index == columns.len() - 1 { \"\\n\" } else { \"\\t\" };\n-        write!(out, \"{:?}{}\", c.to_string(location_table), tail)?;\n+        write!(out, \"{:?}{tail}\", c.to_string(location_table))?;\n     }\n     Ok(())\n }"}]}