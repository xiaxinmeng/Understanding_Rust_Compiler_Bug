{"sha": "d443fc6d90577003724ce128d2c07b7ad6b347c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDNmYzZkOTA1NzcwMDM3MjRjZTEyOGQyYzA3YjdhZDZiMzQ3Yzk=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-05-31T19:56:05Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-06-02T15:22:43Z"}, "message": "Add a get_mut method to accompany the get method.", "tree": {"sha": "bffadaae8f6387119b82050bc14ec493df27c169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bffadaae8f6387119b82050bc14ec493df27c169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d443fc6d90577003724ce128d2c07b7ad6b347c9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d443fc6d90577003724ce128d2c07b7ad6b347c9", "html_url": "https://github.com/rust-lang/rust/commit/d443fc6d90577003724ce128d2c07b7ad6b347c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d443fc6d90577003724ce128d2c07b7ad6b347c9/comments", "author": null, "committer": null, "parents": [{"sha": "c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "html_url": "https://github.com/rust-lang/rust/commit/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "b1400d1bc76f4c2b5870effb2788ed049c2656b6", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d443fc6d90577003724ce128d2c07b7ad6b347c9/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d443fc6d90577003724ce128d2c07b7ad6b347c9/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=d443fc6d90577003724ce128d2c07b7ad6b347c9", "patch": "@@ -501,6 +501,15 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n         }\n     }\n \n+    /// Retrieves a (mutable) value for the given key, failing if the key\n+    /// is not present.\n+    pub fn get_mut<'a>(&'a mut self, k: &K) -> &'a mut V {\n+        match self.find_mut(k) {\n+            Some(v) => v,\n+            None => fail!(\"No entry found for key: %?\", k),\n+        }\n+    }\n+\n     /// Return true if the map contains a value for the specified key,\n     /// using equivalence\n     pub fn contains_key_equiv<Q:Hash + Equiv<K>>(&self, key: &Q) -> bool {"}]}