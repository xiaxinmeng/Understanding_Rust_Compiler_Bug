{"sha": "c021e5303f7db901a962b7c650ad5b2206801d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjFlNTMwM2Y3ZGI5MDFhOTYyYjdjNjUwYWQ1YjIyMDY4MDFkOWM=", "commit": {"author": {"name": "toidiu", "email": "toidiu@protonmail.com", "date": "2017-09-28T01:20:44Z"}, "committer": {"name": "toidiu", "email": "toidiu@protonmail.com", "date": "2017-10-16T18:26:17Z"}, "message": "add a test case\n\ndont duplicate error codes\n\nchoose unlikely error code\n\nspecify error pattern in test", "tree": {"sha": "62969f7fc4431a48e02809cd3e7adbdb1c96326d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62969f7fc4431a48e02809cd3e7adbdb1c96326d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c021e5303f7db901a962b7c650ad5b2206801d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c021e5303f7db901a962b7c650ad5b2206801d9c", "html_url": "https://github.com/rust-lang/rust/commit/c021e5303f7db901a962b7c650ad5b2206801d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c021e5303f7db901a962b7c650ad5b2206801d9c/comments", "author": null, "committer": null, "parents": [{"sha": "ba1efa3b61759384fc39ad262cffb0a007b87f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1efa3b61759384fc39ad262cffb0a007b87f95", "html_url": "https://github.com/rust-lang/rust/commit/ba1efa3b61759384fc39ad262cffb0a007b87f95"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "8f91d07b53fb26fc39b5c5d69f86bfbbc55f929d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=c021e5303f7db901a962b7c650ad5b2206801d9c", "patch": "@@ -4676,8 +4676,8 @@ register_diagnostics! {\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n //  E0613, // Removed (merged with E0609)\n+    E0640, // infer outlives\n     E0627, // yield statement outside of generator literal\n     E0632, // cannot provide explicit type parameters when `impl Trait` is used in\n            // argument position.\n-    E0628, // infer outlives\n }"}, {"sha": "49ba0499f7868bcf7268a57b343ee8f9b964de26", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c021e5303f7db901a962b7c650ad5b2206801d9c", "patch": "@@ -305,6 +305,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n \n     })?;\n \n+    tcx.sess.track_errors(|| {\n+        time(time_passes, \"outlives testing\", ||\n+            outlives::test::test_inferred_outlives(tcx));\n+    })?;\n+\n     tcx.sess.track_errors(|| {\n         time(time_passes, \"impl wf inference\", ||\n              impl_wf_check::impl_wf_check(tcx));\n@@ -320,11 +325,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n              variance::test::test_variance(tcx));\n     })?;\n \n-    tcx.sess.track_errors(|| {\n-        time(time_passes, \"outlives testing\", ||\n-            outlives::test::test_inferred_outlives(tcx));\n-    })?;\n-\n     time(time_passes, \"wf checking\", || check::check_wf_new(tcx))?;\n \n     time(time_passes, \"item-types checking\", || check::check_item_types(tcx))?;"}, {"sha": "196e66054946389f672dbffeb4d60b30d3ec82aa", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=c021e5303f7db901a962b7c650ad5b2206801d9c", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'a, 'tcx> {\n             let inferred_outlives_of = self.tcx.inferred_outlives_of(item_def_id);\n             span_err!(self.tcx.sess,\n                       item.span,\n-                      E0628,\n+                      E0640,\n                       \"{:?}\",\n                       inferred_outlives_of);\n         }"}, {"sha": "f742ca81bcc89e4a58b79187c49ac018148209bb", "filename": "src/test/compile-fail/outlives-associated-types.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Ftest%2Fcompile-fail%2Foutlives-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021e5303f7db901a962b7c650ad5b2206801d9c/src%2Ftest%2Fcompile-fail%2Foutlives-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foutlives-associated-types.rs?ref=c021e5303f7db901a962b7c650ad5b2206801d9c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the outlives computation runs for now...\n+\n+#![feature(rustc_attrs)]\n+\n+//todo add all the test cases\n+// https://github.com/rust-lang/rfcs/blob/master/text/2093-infer-outlives.md#example-1-a-reference\n+\n+#[rustc_outlives]\n+struct Direct<'a, T> {\n+    // inferred: `T: 'a`\n+    field: &'a T //~ ERROR generic reference may outlive the data it points to\n+}\n+\n+fn main() { }"}]}