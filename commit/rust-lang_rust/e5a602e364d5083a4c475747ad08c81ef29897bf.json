{"sha": "e5a602e364d5083a4c475747ad08c81ef29897bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YTYwMmUzNjRkNTA4M2E0YzQ3NTc0N2FkMDhjODFlZjI5ODk3YmY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T07:43:19Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:39:33Z"}, "message": "Add OneThread which only allows its inner value to be used in one thread", "tree": {"sha": "d134fde8d1760faea24523e217afe4e5f9ef9a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d134fde8d1760faea24523e217afe4e5f9ef9a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5a602e364d5083a4c475747ad08c81ef29897bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a602e364d5083a4c475747ad08c81ef29897bf", "html_url": "https://github.com/rust-lang/rust/commit/e5a602e364d5083a4c475747ad08c81ef29897bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5a602e364d5083a4c475747ad08c81ef29897bf/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67712d79451b042b6fca2167c1a57d91d86f663b", "url": "https://api.github.com/repos/rust-lang/rust/commits/67712d79451b042b6fca2167c1a57d91d86f663b", "html_url": "https://github.com/rust-lang/rust/commit/67712d79451b042b6fca2167c1a57d91d86f663b"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "ad524916f0cbf1f4fa18fd1a9fd3265fff98e828", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e5a602e364d5083a4c475747ad08c81ef29897bf/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a602e364d5083a4c475747ad08c81ef29897bf/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=e5a602e364d5083a4c475747ad08c81ef29897bf", "patch": "@@ -33,6 +33,8 @@ use std::cmp::Ordering;\n use std::fmt::Debug;\n use std::fmt::Formatter;\n use std::fmt;\n+use std;\n+use std::ops::{Deref, DerefMut};\n use owning_ref::{Erased, OwningRef};\n \n cfg_if! {\n@@ -161,6 +163,8 @@ cfg_if! {\n         use parking_lot::Mutex as InnerLock;\n         use parking_lot::RwLock as InnerRwLock;\n \n+        use std::thread;\n+\n         pub type MetadataRef = OwningRef<Box<Erased + Send + Sync>, [u8]>;\n \n         /// This makes locks panic if they are already held.\n@@ -439,3 +443,54 @@ impl<T: Clone> Clone for RwLock<T> {\n         RwLock::new(self.borrow().clone())\n     }\n }\n+\n+/// A type which only allows its inner value to be used in one thread.\n+/// It will panic if it is used on multiple threads.\n+#[derive(Copy, Clone, Hash, Debug, Eq, PartialEq)]\n+pub struct OneThread<T> {\n+    #[cfg(parallel_queries)]\n+    thread: thread::ThreadId,\n+    inner: T,\n+}\n+\n+unsafe impl<T> std::marker::Sync for OneThread<T> {}\n+unsafe impl<T> std::marker::Send for OneThread<T> {}\n+\n+impl<T> OneThread<T> {\n+    #[inline(always)]\n+    fn check(&self) {\n+        #[cfg(parallel_queries)]\n+        assert_eq!(thread::current().id(), self.thread);\n+    }\n+\n+    #[inline(always)]\n+    pub fn new(inner: T) -> Self {\n+        OneThread {\n+            #[cfg(parallel_queries)]\n+            thread: thread::current().id(),\n+            inner,\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn into_inner(value: Self) -> T {\n+        value.check();\n+        value.inner\n+    }\n+}\n+\n+impl<T> Deref for OneThread<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        self.check();\n+        &self.inner\n+    }\n+}\n+\n+impl<T> DerefMut for OneThread<T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        self.check();\n+        &mut self.inner\n+    }\n+}"}]}