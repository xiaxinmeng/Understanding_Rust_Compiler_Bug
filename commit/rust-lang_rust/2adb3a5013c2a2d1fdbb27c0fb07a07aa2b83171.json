{"sha": "2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZGIzYTUwMTNjMmEyZDFmZGJiMjdjMGZiMDdhMDdhYTJiODMxNzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T15:01:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:37:18Z"}, "message": "add pure annotations in ast_util", "tree": {"sha": "b6e255fd4ec389918caabb2af6cf09a9c45dea36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e255fd4ec389918caabb2af6cf09a9c45dea36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171", "html_url": "https://github.com/rust-lang/rust/commit/2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d20717fab410cf1f90938d90ad4153b77b6f8b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d20717fab410cf1f90938d90ad4153b77b6f8b3", "html_url": "https://github.com/rust-lang/rust/commit/0d20717fab410cf1f90938d90ad4153b77b6f8b3"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "cc4593d4af864528b14a34134a4d5e3113a9b830", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2adb3a5013c2a2d1fdbb27c0fb07a07aa2b83171", "patch": "@@ -21,17 +21,17 @@ pure fn mk_sp(lo: uint, hi: uint) -> span {\n // make this a const, once the compiler supports it\n pure fn dummy_sp() -> span { ret mk_sp(0u, 0u); }\n \n-fn path_name(p: @path) -> str { path_name_i(p.idents) }\n+pure fn path_name(p: @path) -> str { path_name_i(p.idents) }\n \n-fn path_name_i(idents: [ident]) -> str { str::connect(idents, \"::\") }\n+pure fn path_name_i(idents: [ident]) -> str { str::connect(idents, \"::\") }\n \n-fn path_to_ident(p: @path) -> ident { vec::last(p.idents) }\n+pure fn path_to_ident(p: @path) -> ident { vec::last(p.idents) }\n \n-fn local_def(id: node_id) -> def_id { {crate: local_crate, node: id} }\n+pure fn local_def(id: node_id) -> def_id { {crate: local_crate, node: id} }\n \n pure fn is_local(did: ast::def_id) -> bool { did.crate == local_crate }\n \n-fn stmt_id(s: stmt) -> node_id {\n+pure fn stmt_id(s: stmt) -> node_id {\n     alt s.node {\n       stmt_decl(_, id) { id }\n       stmt_expr(_, id) { id }\n@@ -45,7 +45,7 @@ fn variant_def_ids(d: def) -> {enm: def_id, var: def_id} {\n         _ { fail \"non-variant in variant_def_ids\"; } }\n }\n \n-fn def_id_of_def(d: def) -> def_id {\n+pure fn def_id_of_def(d: def) -> def_id {\n     alt d {\n       def_fn(id, _) | def_mod(id) |\n       def_native_mod(id) | def_const(id) |\n@@ -60,7 +60,7 @@ fn def_id_of_def(d: def) -> def_id {\n     }\n }\n \n-fn binop_to_str(op: binop) -> str {\n+pure fn binop_to_str(op: binop) -> str {\n     alt op {\n       add { ret \"+\"; }\n       subtract { ret \"-\"; }\n@@ -95,7 +95,7 @@ pure fn is_shift_binop(b: binop) -> bool {\n     }\n }\n \n-fn unop_to_str(op: unop) -> str {\n+pure fn unop_to_str(op: unop) -> str {\n     alt op {\n       box(mt) { if mt == m_mutbl { ret \"@mut \"; } ret \"@\"; }\n       uniq(mt) { if mt == m_mutbl { ret \"~mut \"; } ret \"~\"; }\n@@ -105,19 +105,19 @@ fn unop_to_str(op: unop) -> str {\n     }\n }\n \n-fn is_path(e: @expr) -> bool {\n+pure fn is_path(e: @expr) -> bool {\n     ret alt e.node { expr_path(_) { true } _ { false } };\n }\n \n-fn int_ty_to_str(t: int_ty) -> str {\n+pure fn int_ty_to_str(t: int_ty) -> str {\n     alt t {\n       ty_char { \"u8\" } // ???\n       ty_i { \"\" } ty_i8 { \"i8\" } ty_i16 { \"i16\" }\n       ty_i32 { \"i32\" } ty_i64 { \"i64\" }\n     }\n }\n \n-fn int_ty_max(t: int_ty) -> u64 {\n+pure fn int_ty_max(t: int_ty) -> u64 {\n     alt t {\n       ty_i8 { 0x80u64 }\n       ty_i16 { 0x8000u64 }\n@@ -126,14 +126,14 @@ fn int_ty_max(t: int_ty) -> u64 {\n     }\n }\n \n-fn uint_ty_to_str(t: uint_ty) -> str {\n+pure fn uint_ty_to_str(t: uint_ty) -> str {\n     alt t {\n       ty_u { \"u\" } ty_u8 { \"u8\" } ty_u16 { \"u16\" }\n       ty_u32 { \"u32\" } ty_u64 { \"u64\" }\n     }\n }\n \n-fn uint_ty_max(t: uint_ty) -> u64 {\n+pure fn uint_ty_max(t: uint_ty) -> u64 {\n     alt t {\n       ty_u8 { 0xffu64 }\n       ty_u16 { 0xffffu64 }\n@@ -142,7 +142,7 @@ fn uint_ty_max(t: uint_ty) -> u64 {\n     }\n }\n \n-fn float_ty_to_str(t: float_ty) -> str {\n+pure fn float_ty_to_str(t: float_ty) -> str {\n     alt t { ty_f { \"\" } ty_f32 { \"f32\" } ty_f64 { \"f64\" } }\n }\n "}]}