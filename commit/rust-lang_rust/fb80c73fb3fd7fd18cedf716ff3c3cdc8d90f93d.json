{"sha": "fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d", "node_id": "C_kwDOAAsO6NoAKGZiODBjNzNmYjNmZDdmZDE4Y2VkZjcxNmZmM2MzY2RjOGQ5MGY5M2Q", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-15T06:15:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-15T07:33:43Z"}, "message": "Remove `DropArena`.\n\nMost arena-allocate types that impl `Drop` get their own `TypedArena`, but a\nfew infrequently used ones share a `DropArena`. This sharing adds complexity\nbut doesn't help performance or memory usage. Perhaps it was more effective in\nthe past prior to some other improvements to arenas.\n\nThis commit removes `DropArena` and the sharing of arenas via the `few`\nattribute of the `arena_types` macro. This change removes over 100 lines of\ncode and nine uses of `unsafe` (one of which affects the parallel compiler) and\nmakes the remaining code easier to read.", "tree": {"sha": "9f0d64450b594f4463138abc948e688d67e6d3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f0d64450b594f4463138abc948e688d67e6d3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d", "html_url": "https://github.com/rust-lang/rust/commit/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad442399756573dccacb314b6bf8079964bcc72a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad442399756573dccacb314b6bf8079964bcc72a", "html_url": "https://github.com/rust-lang/rust/commit/ad442399756573dccacb314b6bf8079964bcc72a"}], "stats": {"total": 171, "additions": 17, "deletions": 154}, "files": [{"sha": "e54fcaf6fc1b7dce988fda82a63f630d0f00f649", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 7, "deletions": 134, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d", "patch": "@@ -19,7 +19,6 @@\n #![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n \n-use rustc_data_structures::sync;\n use smallvec::SmallVec;\n \n use std::alloc::Layout;\n@@ -517,130 +516,12 @@ impl DroplessArena {\n     }\n }\n \n-/// Calls the destructor for an object when dropped.\n-struct DropType {\n-    drop_fn: unsafe fn(*mut u8),\n-    obj: *mut u8,\n-}\n-\n-// SAFETY: we require `T: Send` before type-erasing into `DropType`.\n-#[cfg(parallel_compiler)]\n-unsafe impl sync::Send for DropType {}\n-\n-impl DropType {\n-    #[inline]\n-    unsafe fn new<T: sync::Send>(obj: *mut T) -> Self {\n-        unsafe fn drop_for_type<T>(to_drop: *mut u8) {\n-            std::ptr::drop_in_place(to_drop as *mut T)\n-        }\n-\n-        DropType { drop_fn: drop_for_type::<T>, obj: obj as *mut u8 }\n-    }\n-}\n-\n-impl Drop for DropType {\n-    fn drop(&mut self) {\n-        unsafe { (self.drop_fn)(self.obj) }\n-    }\n-}\n-\n-/// An arena which can be used to allocate any type.\n-///\n-/// # Safety\n-///\n-/// Allocating in this arena is unsafe since the type system\n-/// doesn't know which types it contains. In order to\n-/// allocate safely, you must store a `PhantomData<T>`\n-/// alongside this arena for each type `T` you allocate.\n-#[derive(Default)]\n-pub struct DropArena {\n-    /// A list of destructors to run when the arena drops.\n-    /// Ordered so `destructors` gets dropped before the arena\n-    /// since its destructor can reference memory in the arena.\n-    destructors: RefCell<Vec<DropType>>,\n-    arena: DroplessArena,\n-}\n-\n-impl DropArena {\n-    #[inline]\n-    pub unsafe fn alloc<T>(&self, object: T) -> &mut T\n-    where\n-        T: sync::Send,\n-    {\n-        let mem = self.arena.alloc_raw(Layout::new::<T>()) as *mut T;\n-        // Write into uninitialized memory.\n-        ptr::write(mem, object);\n-        let result = &mut *mem;\n-        // Record the destructor after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before.\n-        self.destructors.borrow_mut().push(DropType::new(result));\n-        result\n-    }\n-\n-    #[inline]\n-    pub unsafe fn alloc_from_iter<T, I>(&self, iter: I) -> &mut [T]\n-    where\n-        T: sync::Send,\n-        I: IntoIterator<Item = T>,\n-    {\n-        let mut vec: SmallVec<[_; 8]> = iter.into_iter().collect();\n-        if vec.is_empty() {\n-            return &mut [];\n-        }\n-        let len = vec.len();\n-\n-        let start_ptr = self.arena.alloc_raw(Layout::array::<T>(len).unwrap()) as *mut T;\n-\n-        let mut destructors = self.destructors.borrow_mut();\n-        // Reserve space for the destructors so we can't panic while adding them.\n-        destructors.reserve(len);\n-\n-        // Move the content to the arena by copying it and then forgetting\n-        // the content of the SmallVec.\n-        vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n-        mem::forget(vec.drain(..));\n-\n-        // Record the destructors after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before.\n-        for i in 0..len {\n-            destructors.push(DropType::new(start_ptr.add(i)));\n-        }\n-\n-        slice::from_raw_parts_mut(start_ptr, len)\n-    }\n-}\n-\n-pub macro arena_for_type {\n-    ([][$ty:ty]) => {\n-        $crate::TypedArena<$ty>\n-    },\n-    ([few $(, $attrs:ident)*][$ty:ty]) => {\n-        ::std::marker::PhantomData<$ty>\n-    },\n-    ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n-        $crate::arena_for_type!([$($attrs),*]$args)\n-    },\n-}\n-\n-pub macro which_arena_for_type {\n-    ([][$arena:expr]) => {\n-        ::std::option::Option::Some($arena)\n-    },\n-    ([few$(, $attrs:ident)*][$arena:expr]) => {\n-        ::std::option::Option::None\n-    },\n-    ([$ignore:ident$(, $attrs:ident)*]$args:tt) => {\n-        $crate::which_arena_for_type!([$($attrs),*]$args)\n-    },\n-}\n-\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n     #[derive(Default)]\n     pub struct Arena<$tcx> {\n         pub dropless: $crate::DroplessArena,\n-        drop: $crate::DropArena,\n-        $($name: $crate::arena_for_type!($a[$ty]),)*\n+        $($name: $crate::TypedArena<$ty>,)*\n     }\n \n     pub trait ArenaAllocatable<'tcx, T = Self>: Sized {\n@@ -670,13 +551,9 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n             #[inline]\n             fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n                 if !::std::mem::needs_drop::<Self>() {\n-                    return arena.dropless.alloc(self);\n-                }\n-                match $crate::which_arena_for_type!($a[&arena.$name]) {\n-                    ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n-                        ty_arena.alloc(self)\n-                    }\n-                    ::std::option::Option::None => unsafe { arena.drop.alloc(self) },\n+                    arena.dropless.alloc(self)\n+                } else {\n+                    arena.$name.alloc(self)\n                 }\n             }\n \n@@ -686,13 +563,9 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n                 iter: impl ::std::iter::IntoIterator<Item = Self>,\n             ) -> &'a mut [Self] {\n                 if !::std::mem::needs_drop::<Self>() {\n-                    return arena.dropless.alloc_from_iter(iter);\n-                }\n-                match $crate::which_arena_for_type!($a[&arena.$name]) {\n-                    ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n-                        ty_arena.alloc_from_iter(iter)\n-                    }\n-                    ::std::option::Option::None => unsafe { arena.drop.alloc_from_iter(iter) },\n+                    arena.dropless.alloc_from_iter(iter)\n+                } else {\n+                    arena.$name.alloc_from_iter(iter)\n                 }\n             }\n         }"}, {"sha": "5091a7bccc55b0d036c1ae4405e378f78685628b", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d", "patch": "@@ -1,18 +1,13 @@\n /// This declares a list of types which can be allocated by `Arena`.\n ///\n-/// The `few` modifier will cause allocation to use the shared arena and recording the destructor.\n-/// This is faster and more memory efficient if there's only a few allocations of the type.\n-/// Leaving `few` out will cause the type to get its own dedicated `TypedArena` which is\n-/// faster and more memory efficient if there is lots of allocations.\n-///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]`,\n /// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n     ($macro:path, $tcx:lifetime) => (\n         $macro!([\n             // HIR types\n-            [few] hir_krate: rustc_hir::Crate<$tcx>,\n+            [] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n             [] asm_operand: (rustc_hir::InlineAsmOperand<$tcx>, Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n@@ -29,14 +24,14 @@ macro_rules! arena_types {\n             [] pat_field: rustc_hir::PatField<$tcx>,\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n-            [few] foreign_item_ref: rustc_hir::ForeignItemRef,\n+            [] foreign_item_ref: rustc_hir::ForeignItemRef,\n             [] impl_item: rustc_hir::ImplItem<$tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef,\n             [] item: rustc_hir::Item<$tcx>,\n-            [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n-            [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n+            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n+            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n             [] local: rustc_hir::Local<$tcx>,\n-            [few] mod_: rustc_hir::Mod<$tcx>,\n+            [] mod_: rustc_hir::Mod<$tcx>,\n             [] owner_info: rustc_hir::OwnerInfo<$tcx>,\n             [] param: rustc_hir::Param<$tcx>,\n             [] pat: rustc_hir::Pat<$tcx>,"}, {"sha": "2bcc2a4f7cff7685329d9ce5dc854053737ec3ef", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=fb80c73fb3fd7fd18cedf716ff3c3cdc8d90f93d", "patch": "@@ -1,10 +1,5 @@\n /// This declares a list of types which can be allocated by `Arena`.\n ///\n-/// The `few` modifier will cause allocation to use the shared arena and recording the destructor.\n-/// This is faster and more memory efficient if there's only a few allocations of the type.\n-/// Leaving `few` out will cause the type to get its own dedicated `TypedArena` which is\n-/// faster and more memory efficient if there is lots of allocations.\n-///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]` where `T` is the type\n /// listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n@@ -37,7 +32,7 @@ macro_rules! arena_types {\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,\n             // Required for the incremental on-disk cache\n-            [few] mir_keys: rustc_hir::def_id::DefIdSet,\n+            [] mir_keys: rustc_hir::def_id::DefIdSet,\n             [] region_scope_tree: rustc_middle::middle::region::ScopeTree,\n             [] dropck_outlives:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n@@ -77,10 +72,10 @@ macro_rules! arena_types {\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::Ty<'tcx>>\n                 >,\n-            [few] all_traits: Vec<rustc_hir::def_id::DefId>,\n-            [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels,\n-            [few] foreign_module: rustc_session::cstore::ForeignModule,\n-            [few] foreign_modules: Vec<rustc_session::cstore::ForeignModule>,\n+            [] all_traits: Vec<rustc_hir::def_id::DefId>,\n+            [] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels,\n+            [] foreign_module: rustc_session::cstore::ForeignModule,\n+            [] foreign_modules: Vec<rustc_session::cstore::ForeignModule>,\n             [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,"}]}