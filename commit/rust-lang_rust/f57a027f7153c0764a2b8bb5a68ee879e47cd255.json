{"sha": "f57a027f7153c0764a2b8bb5a68ee879e47cd255", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1N2EwMjdmNzE1M2MwNzY0YTJiOGJiNWE2OGVlODc5ZTQ3Y2QyNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-20T00:00:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-20T00:00:53Z"}, "message": "Auto merge of #39955 - mp4096:master, r=GuillaumeGomez\n\nDocs: Better explanation of return values for min, max functions for the Iterator trait\n\nAdded an explanation that `None` is returned if an iterator is empty.\n\nAlso added examples for `max` and `min`. I chose not to add examples for other functions like `max_by_key` etc. so that the examples stay concised and focused on the main functionality.", "tree": {"sha": "b215fb39c05179bf9e2bc3630a369256955223c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b215fb39c05179bf9e2bc3630a369256955223c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57a027f7153c0764a2b8bb5a68ee879e47cd255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57a027f7153c0764a2b8bb5a68ee879e47cd255", "html_url": "https://github.com/rust-lang/rust/commit/f57a027f7153c0764a2b8bb5a68ee879e47cd255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57a027f7153c0764a2b8bb5a68ee879e47cd255/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e77277950aafd38ce3e52b7b1cd9bcc6664de3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e77277950aafd38ce3e52b7b1cd9bcc6664de3c", "html_url": "https://github.com/rust-lang/rust/commit/0e77277950aafd38ce3e52b7b1cd9bcc6664de3c"}, {"sha": "eee6752b971d620c2db89a3fa551d5739b29148e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee6752b971d620c2db89a3fa551d5739b29148e", "html_url": "https://github.com/rust-lang/rust/commit/eee6752b971d620c2db89a3fa551d5739b29148e"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "0f47378aebb7ca03d3e41465b05bb525478e588b", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f57a027f7153c0764a2b8bb5a68ee879e47cd255/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57a027f7153c0764a2b8bb5a68ee879e47cd255/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=f57a027f7153c0764a2b8bb5a68ee879e47cd255", "patch": "@@ -1616,16 +1616,20 @@ pub trait Iterator {\n     /// Returns the maximum element of an iterator.\n     ///\n     /// If several elements are equally maximum, the last element is\n-    /// returned.\n+    /// returned. If the iterator is empty, [`None`] is returned.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n     /// Basic usage:\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n+    /// let b: Vec<u32> = Vec::new();\n     ///\n     /// assert_eq!(a.iter().max(), Some(&3));\n+    /// assert_eq!(b.iter().max(), None);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1642,16 +1646,20 @@ pub trait Iterator {\n     /// Returns the minimum element of an iterator.\n     ///\n     /// If several elements are equally minimum, the first element is\n-    /// returned.\n+    /// returned. If the iterator is empty, [`None`] is returned.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n     /// Basic usage:\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n+    /// let b: Vec<u32> = Vec::new();\n     ///\n     /// assert_eq!(a.iter().min(), Some(&1));\n+    /// assert_eq!(b.iter().min(), None);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1669,7 +1677,9 @@ pub trait Iterator {\n     /// specified function.\n     ///\n     /// If several elements are equally maximum, the last element is\n-    /// returned.\n+    /// returned. If the iterator is empty, [`None`] is returned.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -1694,7 +1704,9 @@ pub trait Iterator {\n     /// specified comparison function.\n     ///\n     /// If several elements are equally maximum, the last element is\n-    /// returned.\n+    /// returned. If the iterator is empty, [`None`] is returned.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -1719,7 +1731,9 @@ pub trait Iterator {\n     /// specified function.\n     ///\n     /// If several elements are equally minimum, the first element is\n-    /// returned.\n+    /// returned. If the iterator is empty, [`None`] is returned.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -1743,7 +1757,9 @@ pub trait Iterator {\n     /// specified comparison function.\n     ///\n     /// If several elements are equally minimum, the first element is\n-    /// returned.\n+    /// returned. If the iterator is empty, [`None`] is returned.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///"}]}