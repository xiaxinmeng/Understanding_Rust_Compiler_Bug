{"sha": "ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "node_id": "C_kwDOAAsO6NoAKGFlM2FiMTRmYWE0N2JhNTgxMzk2YjZmYjE0NThiZWMzYzliZDBiZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-26T07:43:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-26T07:43:17Z"}, "message": "Auto merge of #110839 - jyn514:rollup-uikilwm, r=jyn514\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #108416 (black_box doc corrections for clarification - Issue #107957)\n - #109379 (Replace `yes` command by `while-echo` in test `tests/ui/process/process-sigpipe.rs`)\n - #110266 (Update documentation wording on path 'try_exists' functions)\n - #110329 (Improve tests for #110138)\n - #110418 (Spelling rustdoc)\n - #110587 (Fix `std` compilation error for wasi+atomics)\n - #110594 (`rustc --help` add `--cfg` SPEC declaration.)\n - #110792 (Use the standard macOS CI runner)\n - #110817 (Add regression tests for const-generic inherent associated types)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9f836af6b4fc2d62cd76e64b65aa55a8e5e533e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f836af6b4fc2d62cd76e64b65aa55a8e5e533e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "html_url": "https://github.com/rust-lang/rust/commit/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70540d51275086ce1a4cb12e9d96a97134df792e", "url": "https://api.github.com/repos/rust-lang/rust/commits/70540d51275086ce1a4cb12e9d96a97134df792e", "html_url": "https://github.com/rust-lang/rust/commit/70540d51275086ce1a4cb12e9d96a97134df792e"}, {"sha": "8c0dfa31f44636ebd35282bff0d08a922b8a8c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0dfa31f44636ebd35282bff0d08a922b8a8c0f", "html_url": "https://github.com/rust-lang/rust/commit/8c0dfa31f44636ebd35282bff0d08a922b8a8c0f"}], "stats": {"total": 158, "additions": 117, "deletions": 41}, "files": [{"sha": "32c18cab09902245029b78addd4649b80bec2dc1", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -326,7 +326,7 @@ jobs:\n               NO_DEBUG_ASSERTIONS: 1\n               NO_OVERFLOW_CHECKS: 1\n               DIST_REQUIRE_ALL_TOOLS: 1\n-            os: macos-12-xl\n+            os: macos-latest\n           - name: dist-apple-various\n             env:\n               SCRIPT: \"./x.py dist bootstrap --include-default-paths --host='' --target=aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim\"\n@@ -337,7 +337,7 @@ jobs:\n               NO_LLVM_ASSERTIONS: 1\n               NO_DEBUG_ASSERTIONS: 1\n               NO_OVERFLOW_CHECKS: 1\n-            os: macos-12-xl\n+            os: macos-latest\n           - name: dist-x86_64-apple-alt\n             env:\n               SCRIPT: \"./x.py dist bootstrap --include-default-paths\"\n@@ -348,7 +348,7 @@ jobs:\n               NO_LLVM_ASSERTIONS: 1\n               NO_DEBUG_ASSERTIONS: 1\n               NO_OVERFLOW_CHECKS: 1\n-            os: macos-12-xl\n+            os: macos-latest\n           - name: x86_64-apple-1\n             env:\n               SCRIPT: \"./x.py --stage 2 test --exclude tests/ui --exclude tests/rustdoc --exclude tests/run-make-fulldeps\"\n@@ -359,7 +359,7 @@ jobs:\n               NO_LLVM_ASSERTIONS: 1\n               NO_DEBUG_ASSERTIONS: 1\n               NO_OVERFLOW_CHECKS: 1\n-            os: macos-12-xl\n+            os: macos-latest\n           - name: x86_64-apple-2\n             env:\n               SCRIPT: \"./x.py --stage 2 test tests/ui tests/rustdoc tests/run-make-fulldeps\"\n@@ -370,7 +370,7 @@ jobs:\n               NO_LLVM_ASSERTIONS: 1\n               NO_DEBUG_ASSERTIONS: 1\n               NO_OVERFLOW_CHECKS: 1\n-            os: macos-12-xl\n+            os: macos-latest\n           - name: dist-aarch64-apple\n             env:\n               SCRIPT: \"./x.py dist bootstrap --include-default-paths --stage 2\"\n@@ -385,7 +385,7 @@ jobs:\n               NO_OVERFLOW_CHECKS: 1\n               DIST_REQUIRE_ALL_TOOLS: 1\n               JEMALLOC_SYS_WITH_LG_PAGE: 14\n-            os: macos-12-xl\n+            os: macos-latest\n           - name: x86_64-msvc-1\n             env:\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --enable-profiler\""}, {"sha": "51418c01eedb45193ed38a383c97b00b8ed85f57", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -1400,7 +1400,8 @@ The default is {DEFAULT_EDITION} and the latest stable edition is {LATEST_STABLE\n pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n     vec![\n         opt::flag_s(\"h\", \"help\", \"Display this message\"),\n-        opt::multi_s(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n+        opt::multi_s(\"\", \"cfg\", \"Configure the compilation environment.\n+                             SPEC supports the syntax `NAME[=\\\"VALUE\\\"]`.\", \"SPEC\"),\n         opt::multi(\"\", \"check-cfg\", \"Provide list of valid cfg options for checking\", \"SPEC\"),\n         opt::multi_s(\n             \"L\","}, {"sha": "75c104ce2fad08ad247852968bf4f8d87903c4a8", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -217,17 +217,14 @@ pub fn spin_loop() {\n /// Note however, that `black_box` is only (and can only be) provided on a \"best-effort\" basis. The\n /// extent to which it can block optimisations may vary depending upon the platform and code-gen\n /// backend used. Programs cannot rely on `black_box` for *correctness*, beyond it behaving as the\n-/// identity function.\n+/// identity function. As such, it **must not be relied upon to control critical program behavior.**\n+/// This _immediately_ precludes any direct use of this function for cryptographic or security\n+/// purposes.\n ///\n /// [`std::convert::identity`]: crate::convert::identity\n ///\n /// # When is this useful?\n ///\n-/// First and foremost: `black_box` does _not_ guarantee any exact behavior and, in some cases, may\n-/// do nothing at all. As such, it **must not be relied upon to control critical program behavior.**\n-/// This _immediately_ precludes any direct use of this function for cryptographic or security\n-/// purposes.\n-///\n /// While not suitable in those mission-critical cases, `black_box`'s functionality can generally be\n /// relied upon for benchmarking, and should be used there. It will try to ensure that the\n /// compiler doesn't optimize away part of the intended test code based on context. For"}, {"sha": "42a68496fc49197fd48be1469511a1884c822225", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -2515,9 +2515,10 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n /// This function will traverse symbolic links to query information about the\n /// destination file. In case of broken symbolic links this will return `Ok(false)`.\n ///\n-/// As opposed to the [`Path::exists`] method, this one doesn't silently ignore errors\n-/// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n-/// denied on some of the parent directories.)\n+/// As opposed to the [`Path::exists`] method, this will only return `Ok(true)` or `Ok(false)`\n+/// if the path was _verified_ to exist or not exist. If its existence can neither be confirmed\n+/// nor denied, an `Err(_)` will be propagated instead. This can be the case if e.g. listing\n+/// permission is denied on one of the parent directories.\n ///\n /// Note that while this avoids some pitfalls of the `exists()` method, it still can not\n /// prevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios"}, {"sha": "e5abd02a1bc53d066d2e432463c4d5977ed47a95", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -2844,9 +2844,11 @@ impl Path {\n     /// This function will traverse symbolic links to query information about the\n     /// destination file. In case of broken symbolic links this will return `Ok(false)`.\n     ///\n-    /// As opposed to the [`exists()`] method, this one doesn't silently ignore errors\n-    /// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n-    /// denied on some of the parent directories.)\n+    /// [`Path::exists()`] only checks whether or not a path was both found and readable. By\n+    /// contrast, `try_exists` will return `Ok(true)` or `Ok(false)`, respectively, if the path\n+    /// was _verified_ to exist or not exist. If its existence can neither be confirmed nor\n+    /// denied, it will propagate an `Err(_)` instead. This can be the case if e.g. listing\n+    /// permission is denied on one of the parent directories.\n     ///\n     /// Note that while this avoids some pitfalls of the `exists()` method, it still can not\n     /// prevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios"}, {"sha": "c468ae395fc8d1a1b0d9d4924ce87a989c270769", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -32,8 +32,6 @@ pub mod io;\n #[path = \"../unsupported/locks/mod.rs\"]\n pub mod locks;\n pub mod net;\n-#[path = \"../unsupported/once.rs\"]\n-pub mod once;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n pub mod os_str;\n@@ -51,6 +49,13 @@ pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod time;\n \n+cfg_if::cfg_if! {\n+    if #[cfg(not(target_feature = \"atomics\"))] {\n+        #[path = \"../unsupported/once.rs\"]\n+        pub mod once;\n+    }\n+}\n+\n #[path = \"../unsupported/common.rs\"]\n #[deny(unsafe_op_in_unsafe_fn)]\n #[allow(unused)]"}, {"sha": "8409b9ca569939c2a9cee2f1ce3de693f6bf3147", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -82,7 +82,7 @@ x--expand-yaml-anchors--remove:\n     <<: *base-job\n \n   - &job-macos-xl\n-    os: macos-12-xl\n+    os: macos-latest # We use the standard runner for now\n     <<: *base-job\n \n   - &job-windows-8c"}, {"sha": "393192af01e9891d3494d05db6609a0e92100549", "filename": "src/doc/rustdoc/src/how-to-read-rustdoc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -43,7 +43,7 @@ including automatic and blanket implementations that `rustdoc` knows about.\n Subheadings, variants, fields, and many other things in this documentation\n are anchors and can be clicked on and deep-linked to,\n which is a great way to communicate exactly what you're talking about.\n-The typograpical character \"\u00a7\" appears next to lines with anchors on them\n+The typographical character \"\u00a7\" appears next to lines with anchors on them\n when hovered or given keyboard focus.\n \n ## The Navigation Bar"}, {"sha": "2e0cb1c0af4cd67abb9c1cfcc7bae11b8eadd951", "filename": "src/doc/rustdoc/src/references.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -13,15 +13,15 @@ If you know of other great resources, please submit a pull request!\n \n ## Community\n - [API Guidelines]\n-- [Github tagged RFCs]\n-- [Github tagged issues]\n+- [GitHub tagged RFCs]\n+- [GitHub tagged issues]\n - [RFC (stalled) front page styleguide]\n - [Guide on how to write documentation for a Rust crate]\n \n \n [API Guidelines]: https://rust-lang.github.io/api-guidelines/documentation.html\n-[Github tagged RFCs]: https://github.com/rust-lang/rfcs/issues?q=label%3AT-rustdoc\n-[Github tagged issues]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+label%3AT-rustdoc\n+[GitHub tagged RFCs]: https://github.com/rust-lang/rfcs/issues?q=label%3AT-rustdoc\n+[GitHub tagged issues]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+label%3AT-rustdoc\n [Guide on how to write documentation for a Rust crate]: https://blog.guillaume-gomez.fr/articles/2020-03-12+Guide+on+how+to+write+documentation+for+a+Rust+crate\n [Learn Rust]: https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments\n [RFC 1574: More API Documentation Conventions]: https://rust-lang.github.io/rfcs/1574-more-api-documentation-conventions.html"}, {"sha": "4fa26204be917d7d9505b2a5240e4ee254d02cbb", "filename": "tests/rustdoc-json/reexport/auxiliary/enum_with_discriminant.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Frustdoc-json%2Freexport%2Fauxiliary%2Fenum_with_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Frustdoc-json%2Freexport%2Fauxiliary%2Fenum_with_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fauxiliary%2Fenum_with_discriminant.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -0,0 +1,6 @@\n+//! Should not be inlined\n+\n+/// Should not be inlined\n+pub enum O {\n+    L = -1,\n+}"}, {"sha": "40b681d7dbbef8d4333becc97ed643df94b5d953", "filename": "tests/rustdoc-json/reexport/doc_inline_external_crate.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Frustdoc-json%2Freexport%2Fdoc_inline_external_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Frustdoc-json%2Freexport%2Fdoc_inline_external_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fdoc_inline_external_crate.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -0,0 +1,10 @@\n+// Regression Test for https://github.com/rust-lang/rust/issues/110138\n+// aux-build: enum_with_discriminant.rs\n+\n+#[doc(inline)]\n+pub extern crate enum_with_discriminant;\n+\n+// @!has '$.index[*][?(@.docs == \"Should not be inlined\")]'\n+// @is '$.index[*][?(@.name == \"enum_with_discriminant\")].kind' '\"extern_crate\"'\n+// @set enum_with_discriminant = '$.index[*][?(@.name == \"enum_with_discriminant\")].id'\n+// @is '$.index[*][?(@.name == \"doc_inline_external_crate\")].inner.items[*]' $enum_with_discriminant"}, {"sha": "8efb94fd3f17a57e2184d0cf290a52486a89f552", "filename": "tests/rustdoc-json/reexport/extern_crate_glob.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Frustdoc-json%2Freexport%2Fextern_crate_glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Frustdoc-json%2Freexport%2Fextern_crate_glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fextern_crate_glob.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -0,0 +1,10 @@\n+// aux-build: enum_with_discriminant.rs\n+\n+extern crate enum_with_discriminant;\n+\n+#[doc(inline)]\n+pub use enum_with_discriminant::*;\n+\n+// @!has '$.index[*][?(@.docs == \"Should not be inlined\")]'\n+// @set use = '$.index[*][?(@.inner.name == \"enum_with_discriminant\")].id'\n+// @is '$.index[*][?(@.name == \"extern_crate_glob\")].inner.items[*]' $use"}, {"sha": "6c48f5aa01f9860817968a996a199dd2ba10c208", "filename": "tests/rustdoc-ui/intra-doc/auxiliary/inner-crate-enum.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70540d51275086ce1a4cb12e9d96a97134df792e/tests%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Finner-crate-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70540d51275086ce1a4cb12e9d96a97134df792e/tests%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Finner-crate-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Finner-crate-enum.rs?ref=70540d51275086ce1a4cb12e9d96a97134df792e", "patch": "@@ -1,3 +0,0 @@\n-pub enum O {\n-    L = -1,\n-}"}, {"sha": "363dd7f64c22564c3e47e4d8535cba45b2adfb19", "filename": "tests/rustdoc-ui/intra-doc/inline-external-enum.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70540d51275086ce1a4cb12e9d96a97134df792e/tests%2Frustdoc-ui%2Fintra-doc%2Finline-external-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70540d51275086ce1a4cb12e9d96a97134df792e/tests%2Frustdoc-ui%2Fintra-doc%2Finline-external-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Finline-external-enum.rs?ref=70540d51275086ce1a4cb12e9d96a97134df792e", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build: inner-crate-enum.rs\n-// compile-flags:-Z unstable-options --output-format json\n-\n-#[doc(inline)]\n-pub extern crate inner_crate_enum;\n-\n-fn main() {}"}, {"sha": "5b7c00bccba701be97d9e949a062c007160ef7bc", "filename": "tests/ui/associated-inherent-types/const-generics.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Fui%2Fassociated-inherent-types%2Fconst-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Fui%2Fassociated-inherent-types%2Fconst-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fconst-generics.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for issue #109759.\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+struct Bar<const X: usize>([(); X]);\n+\n+impl<const X: usize> Bar<X> {\n+    pub fn new() -> Self {\n+        Self([(); X])\n+    }\n+}\n+\n+impl Foo {\n+    type Bar<const X: usize> = Bar<X>;\n+}\n+\n+fn main() {\n+    let _ = Foo::Bar::<10>::new();\n+}"}, {"sha": "a4ac0ecfa4cf936e4e806122043b85de3fe3bc31", "filename": "tests/ui/associated-inherent-types/generic-const-exprs.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Fui%2Fassociated-inherent-types%2Fgeneric-const-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Fui%2Fassociated-inherent-types%2Fgeneric-const-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fgeneric-const-exprs.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types, generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct Parent<const O: usize>;\n+\n+impl<const O: usize> Parent<O> {\n+    type Mapping<const I: usize> = Store<{ O + I }>\n+    where\n+        [(); O + I]:\n+    ;\n+}\n+\n+struct Store<const N: usize>;\n+\n+impl<const N: usize> Store<N> {\n+    const REIFIED: usize = N;\n+\n+    fn reify() -> usize {\n+        N\n+    }\n+}\n+\n+fn main() {\n+    let _ = Parent::<2>::Mapping::<{ 12 * 2 }>::REIFIED;\n+    let _ = Parent::<1>::Mapping::<{ 2 * 5 }>::reify();\n+}"}, {"sha": "4f4db11911594b6a6baad9992d3cf16359649d6c", "filename": "tests/ui/process/process-sigpipe.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3ab14faa47ba581396b6fb1458bec3c9bd0bed/tests%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprocess%2Fprocess-sigpipe.rs?ref=ae3ab14faa47ba581396b6fb1458bec3c9bd0bed", "patch": "@@ -8,14 +8,14 @@\n // libstd ignores SIGPIPE, and other libraries may set signal masks.\n // Make sure that these behaviors don't get inherited to children\n // spawned via std::process, since they're needed for traditional UNIX\n-// filter behavior. This test checks that `yes | head` terminates\n+// filter behavior.\n+// This test checks that `while echo y ; do : ; done | head` terminates\n // (instead of running forever), and that it does not print an error\n // message about a broken pipe.\n \n // ignore-emscripten no threads support\n // ignore-vxworks no 'sh'\n // ignore-fuchsia no 'sh'\n-// ignore-nto no 'yes'\n \n use std::process;\n use std::thread;\n@@ -27,7 +27,11 @@ fn main() {\n         thread::sleep_ms(5000);\n         process::exit(1);\n     });\n-    let output = process::Command::new(\"sh\").arg(\"-c\").arg(\"yes | head\").output().unwrap();\n+    let output = process::Command::new(\"sh\")\n+        .arg(\"-c\")\n+        .arg(\"while echo y ; do : ; done | head\")\n+        .output()\n+        .unwrap();\n     assert!(output.status.success());\n     assert!(output.stderr.len() == 0);\n }"}]}