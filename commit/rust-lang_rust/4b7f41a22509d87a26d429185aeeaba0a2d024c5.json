{"sha": "4b7f41a22509d87a26d429185aeeaba0a2d024c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiN2Y0MWEyMjUwOWQ4N2EyNmQ0MjkxODVhZWVhYmEwYTJkMDI0YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-08T22:09:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-08T22:09:04Z"}, "message": "Auto merge of #43097 - PlasmaPower:large-align, r=eddyb\n\nRaise alignment limit from 2^15 to 2^31 - 1\n\nFixes #42960", "tree": {"sha": "71de7278e21a82d9eb7e0521b1d7fd00ddc019e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71de7278e21a82d9eb7e0521b1d7fd00ddc019e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b7f41a22509d87a26d429185aeeaba0a2d024c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7f41a22509d87a26d429185aeeaba0a2d024c5", "html_url": "https://github.com/rust-lang/rust/commit/4b7f41a22509d87a26d429185aeeaba0a2d024c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b7f41a22509d87a26d429185aeeaba0a2d024c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "720c596ec62e8fec855c2953f21b0118ae408bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/720c596ec62e8fec855c2953f21b0118ae408bdd", "html_url": "https://github.com/rust-lang/rust/commit/720c596ec62e8fec855c2953f21b0118ae408bdd"}, {"sha": "b4973e961974ac9bdd9076acbe783b0e43242256", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4973e961974ac9bdd9076acbe783b0e43242256", "html_url": "https://github.com/rust-lang/rust/commit/b4973e961974ac9bdd9076acbe783b0e43242256"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "4b8b39c1f590bdaddaf9a63f599bea78452957ca", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4b7f41a22509d87a26d429185aeeaba0a2d024c5", "patch": "@@ -285,11 +285,13 @@ impl Size {\n }\n \n /// Alignment of a type in bytes, both ABI-mandated and preferred.\n-/// Since alignments are always powers of 2, we can pack both in one byte,\n-/// giving each a nibble (4 bits) for a maximum alignment of 2<sup>15</sup> = 32768.\n+/// Each field is a power of two, giving the alignment a maximum\n+/// value of 2^(2^8 - 1), which is limited by LLVM to a i32, with\n+/// a maximum capacity of 2^31 - 1 or 2147483647.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Align {\n-    raw: u8\n+    abi: u8,\n+    pref: u8,\n }\n \n impl Align {\n@@ -298,7 +300,7 @@ impl Align {\n     }\n \n     pub fn from_bytes(abi: u64, pref: u64) -> Result<Align, String> {\n-        let pack = |align: u64| {\n+        let log2 = |align: u64| {\n             // Treat an alignment of 0 bytes like 1-byte alignment.\n             if align == 0 {\n                 return Ok(0);\n@@ -312,39 +314,38 @@ impl Align {\n             }\n             if bytes != 1 {\n                 Err(format!(\"`{}` is not a power of 2\", align))\n-            } else if pow > 0x0f {\n+            } else if pow > 30 {\n                 Err(format!(\"`{}` is too large\", align))\n             } else {\n                 Ok(pow)\n             }\n         };\n \n         Ok(Align {\n-            raw: pack(abi)? | (pack(pref)? << 4)\n+            abi: log2(abi)?,\n+            pref: log2(pref)?,\n         })\n     }\n \n     pub fn abi(self) -> u64 {\n-        1 << (self.raw & 0xf)\n+        1 << self.abi\n     }\n \n     pub fn pref(self) -> u64 {\n-        1 << (self.raw >> 4)\n+        1 << self.pref\n     }\n \n     pub fn min(self, other: Align) -> Align {\n-        let abi = cmp::min(self.raw & 0x0f, other.raw & 0x0f);\n-        let pref = cmp::min(self.raw & 0xf0, other.raw & 0xf0);\n         Align {\n-            raw: abi | pref\n+            abi: cmp::min(self.abi, other.abi),\n+            pref: cmp::min(self.pref, other.pref),\n         }\n     }\n \n     pub fn max(self, other: Align) -> Align {\n-        let abi = cmp::max(self.raw & 0x0f, other.raw & 0x0f);\n-        let pref = cmp::max(self.raw & 0xf0, other.raw & 0xf0);\n         Align {\n-            raw: abi | pref\n+            abi: cmp::max(self.abi, other.abi),\n+            pref: cmp::max(self.pref, other.pref),\n         }\n     }\n }"}, {"sha": "0ce91b33c510dd135ac798bf3a52a3ae1b8b1adb", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4b7f41a22509d87a26d429185aeeaba0a2d024c5", "patch": "@@ -1398,7 +1398,7 @@ impl_stable_hash_for!(struct ReprFlags {\n #[derive(Copy, Clone, Eq, PartialEq, RustcEncodable, RustcDecodable, Default)]\n pub struct ReprOptions {\n     pub int: Option<attr::IntType>,\n-    pub align: u16,\n+    pub align: u32,\n     pub flags: ReprFlags,\n }\n "}, {"sha": "a247fe7f8a56aa3dffd435ab0df1a30340561d4d", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=4b7f41a22509d87a26d429185aeeaba0a2d024c5", "patch": "@@ -974,11 +974,11 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n                         let mut align_error = None;\n                         if let ast::LitKind::Int(align, ast::LitIntType::Unsuffixed) = value.node {\n                             if align.is_power_of_two() {\n-                                // rustc::ty::layout::Align restricts align to <= 32768\n-                                if align <= 32768 {\n-                                    acc.push(ReprAlign(align as u16));\n+                                // rustc::ty::layout::Align restricts align to <= 2147483647\n+                                if align <= 2147483647 {\n+                                    acc.push(ReprAlign(align as u32));\n                                 } else {\n-                                    align_error = Some(\"larger than 32768\");\n+                                    align_error = Some(\"larger than 2147483647\");\n                                 }\n                             } else {\n                                 align_error = Some(\"not a power of two\");\n@@ -1027,7 +1027,7 @@ pub enum ReprAttr {\n     ReprExtern,\n     ReprPacked,\n     ReprSimd,\n-    ReprAlign(u16),\n+    ReprAlign(u32),\n }\n \n #[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]"}, {"sha": "bc9cf065e5a0a27171308012db1de708bbcbf78a", "filename": "src/test/compile-fail/repr-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Ftest%2Fcompile-fail%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Ftest%2Fcompile-fail%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-align.rs?ref=4b7f41a22509d87a26d429185aeeaba0a2d024c5", "patch": "@@ -17,7 +17,7 @@ struct A(i32);\n #[repr(align(15))] //~ ERROR: invalid `repr(align)` attribute: not a power of two\n struct B(i32);\n \n-#[repr(align(65536))] //~ ERROR: invalid `repr(align)` attribute: larger than 32768\n+#[repr(align(4294967296))] //~ ERROR: invalid `repr(align)` attribute: larger than 2147483647\n struct C(i32);\n \n fn main() {}"}, {"sha": "59d053991673042bd3b1d12fee85055b3112efb9", "filename": "src/test/run-pass/align-struct.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Ftest%2Frun-pass%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7f41a22509d87a26d429185aeeaba0a2d024c5/src%2Ftest%2Frun-pass%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falign-struct.rs?ref=4b7f41a22509d87a26d429185aeeaba0a2d024c5", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n #![feature(attr_literals)]\n #![feature(repr_align)]\n+#![feature(box_syntax)]\n \n use std::mem;\n \n@@ -60,6 +61,13 @@ struct AlignContainsPacked {\n     b: Packed,\n }\n \n+// The align limit was originally smaller (2^15).\n+// Check that it works with big numbers.\n+#[repr(align(0x10000))]\n+struct AlignLarge {\n+    stuff: [u8; 0x10000],\n+}\n+\n impl Align16 {\n     // return aligned type\n     pub fn new(i: i32) -> Align16 {\n@@ -193,4 +201,15 @@ pub fn main() {\n     assert_eq!(mem::align_of_val(&a.b), 1);\n     assert_eq!(mem::size_of_val(&a), 16);\n     assert!(is_aligned_to(&a, 16));\n+\n+    let mut large = box AlignLarge {\n+        stuff: [0; 0x10000],\n+    };\n+    large.stuff[0] = 132;\n+    *large.stuff.last_mut().unwrap() = 102;\n+    assert_eq!(large.stuff[0], 132);\n+    assert_eq!(large.stuff.last(), Some(&102));\n+    assert_eq!(mem::align_of::<AlignLarge>(), 0x10000);\n+    assert_eq!(mem::align_of_val(&*large), 0x10000);\n+    assert!(is_aligned_to(&*large, 0x10000));\n }"}]}