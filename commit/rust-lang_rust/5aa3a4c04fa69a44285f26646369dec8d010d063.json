{"sha": "5aa3a4c04fa69a44285f26646369dec8d010d063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYTNhNGMwNGZhNjlhNDQyODVmMjY2NDYzNjlkZWM4ZDAxMGQwNjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-22T13:12:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T13:12:57Z"}, "message": "Merge #4516\n\n4516: LSP: Two stage initialization r=kjeremy a=kjeremy\n\nFills in server information.\r\n\r\nDerives CodeAction capabilities from the client. If code action literals\r\nare unsupported we fall back to the \"simple support\" which just sends back\r\ncommands (this is already supported in our config). The difference being\r\nthat we did not adjust our server capabilities so that if the client was\r\nchecking for `CodeActionProvider: \"true\"` in the response that would have failed.\r\n\r\nPart of #144\r\nFixes #4130 (the specific case called out in that issue)\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "bf6e3487e322704a5c042ace5f184d4a9a9161b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6e3487e322704a5c042ace5f184d4a9a9161b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa3a4c04fa69a44285f26646369dec8d010d063", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex8/ZCRBK7hj4Ov3rIwAAdHIIAGaWOFh5XL3kseFpSfYhdoqu\n1q0vZ208lk0JlJE9r0Ot5nQoAzuJPPsREIZue+f1dHGNCIgalLj2rs9UvCqK13DX\nhFxujsB3zzFRVVLerS+iq+uLWx+46eqQu7lCZdDvDJ9j+yvoXnMcKGxHCCa63YPO\nXYm6PJcOYGEJycz19emT8z8CEY9We2WaA48ldh6d81wAI19TRBP9UXGCRfCKUGDv\nFbgTerKVQQs1cO5rmi5sYaGemGfTASzXLt/fQ4XqG1Ad02K63cfBD2GwQQbQMHue\nFt8U70e0Azo0ZDnzcQm4XAAuSw74LqU4OsUoZm/iWvI/OXCth19Dpi69ablJRJY=\n=WRO1\n-----END PGP SIGNATURE-----\n", "payload": "tree bf6e3487e322704a5c042ace5f184d4a9a9161b1\nparent 90332ca21901e1101154462053b50e5d2743a21c\nparent acc5e8d64b9b3d75798407d4ea4a6ba39d96eb60\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590153177 +0000\ncommitter GitHub <noreply@github.com> 1590153177 +0000\n\nMerge #4516\n\n4516: LSP: Two stage initialization r=kjeremy a=kjeremy\n\nFills in server information.\r\n\r\nDerives CodeAction capabilities from the client. If code action literals\r\nare unsupported we fall back to the \"simple support\" which just sends back\r\ncommands (this is already supported in our config). The difference being\r\nthat we did not adjust our server capabilities so that if the client was\r\nchecking for `CodeActionProvider: \"true\"` in the response that would have failed.\r\n\r\nPart of #144\r\nFixes #4130 (the specific case called out in that issue)\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa3a4c04fa69a44285f26646369dec8d010d063", "html_url": "https://github.com/rust-lang/rust/commit/5aa3a4c04fa69a44285f26646369dec8d010d063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa3a4c04fa69a44285f26646369dec8d010d063/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90332ca21901e1101154462053b50e5d2743a21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/90332ca21901e1101154462053b50e5d2743a21c", "html_url": "https://github.com/rust-lang/rust/commit/90332ca21901e1101154462053b50e5d2743a21c"}, {"sha": "acc5e8d64b9b3d75798407d4ea4a6ba39d96eb60", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc5e8d64b9b3d75798407d4ea4a6ba39d96eb60", "html_url": "https://github.com/rust-lang/rust/commit/acc5e8d64b9b3d75798407d4ea4a6ba39d96eb60"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "5ce35c5b1dc7eabe738cfd3602f34dcd8fe4e744", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3a4c04fa69a44285f26646369dec8d010d063/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3a4c04fa69a44285f26646369dec8d010d063/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5aa3a4c04fa69a44285f26646369dec8d010d063", "patch": "@@ -658,9 +658,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-server\"\n-version = \"0.3.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5383e043329615624bbf45e1ba27bd75c176762b2592855c659bc28ac580a06b\"\n+checksum = \"dccec31bfd027ac0dd288a78e19005fd89624d9099456e284b5241316a6c3072\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"log\","}, {"sha": "e82fd57de84d4721ba63f6e5ed4698d793122f74", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3a4c04fa69a44285f26646369dec8d010d063/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3a4c04fa69a44285f26646369dec8d010d063/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=5aa3a4c04fa69a44285f26646369dec8d010d063", "patch": "@@ -74,12 +74,25 @@ fn run_server() -> Result<()> {\n     log::info!(\"lifecycle: server started\");\n \n     let (connection, io_threads) = Connection::stdio();\n-    let server_capabilities = serde_json::to_value(rust_analyzer::server_capabilities()).unwrap();\n \n-    let initialize_params = connection.initialize(server_capabilities)?;\n+    let (initialize_id, initialize_params) = connection.initialize_start()?;\n     let initialize_params =\n         from_json::<lsp_types::InitializeParams>(\"InitializeParams\", initialize_params)?;\n \n+    let server_capabilities = rust_analyzer::server_capabilities(&initialize_params.capabilities);\n+\n+    let initialize_result = lsp_types::InitializeResult {\n+        capabilities: server_capabilities,\n+        server_info: Some(lsp_types::ServerInfo {\n+            name: String::from(\"rust-analyzer\"),\n+            version: Some(String::from(env!(\"REV\"))),\n+        }),\n+    };\n+\n+    let initialize_result = serde_json::to_value(initialize_result).unwrap();\n+\n+    connection.initialize_finish(initialize_id, initialize_result)?;\n+\n     if let Some(client_info) = initialize_params.client_info {\n         log::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n     }"}, {"sha": "780fc93174faf679106fe099309cf266e7a581f8", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3a4c04fa69a44285f26646369dec8d010d063/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3a4c04fa69a44285f26646369dec8d010d063/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=5aa3a4c04fa69a44285f26646369dec8d010d063", "patch": "@@ -2,19 +2,22 @@\n use std::env;\n \n use lsp_types::{\n-    CallHierarchyServerCapability, CodeActionOptions, CodeActionProviderCapability,\n-    CodeLensOptions, CompletionOptions, DocumentOnTypeFormattingOptions,\n-    FoldingRangeProviderCapability, ImplementationProviderCapability, RenameOptions,\n-    RenameProviderCapability, SaveOptions, SelectionRangeProviderCapability,\n-    SemanticTokensDocumentProvider, SemanticTokensLegend, SemanticTokensOptions,\n-    ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n+    CallHierarchyServerCapability, ClientCapabilities, CodeActionOptions,\n+    CodeActionProviderCapability, CodeLensOptions, CompletionOptions,\n+    DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n+    ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n+    SelectionRangeProviderCapability, SemanticTokensDocumentProvider, SemanticTokensLegend,\n+    SemanticTokensOptions, ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability,\n+    TextDocumentSyncKind, TextDocumentSyncOptions, TypeDefinitionProviderCapability,\n+    WorkDoneProgressOptions,\n };\n use serde_json::json;\n \n use crate::semantic_tokens;\n \n-pub fn server_capabilities() -> ServerCapabilities {\n+pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabilities {\n+    let code_action_provider = code_action_capabilities(client_caps);\n+\n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n@@ -46,20 +49,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         document_highlight_provider: Some(true),\n         document_symbol_provider: Some(true),\n         workspace_symbol_provider: Some(true),\n-        code_action_provider: Some(CodeActionProviderCapability::Options(CodeActionOptions {\n-            // Advertise support for all built-in CodeActionKinds\n-            code_action_kinds: Some(vec![\n-                lsp_types::code_action_kind::EMPTY.to_string(),\n-                lsp_types::code_action_kind::QUICKFIX.to_string(),\n-                lsp_types::code_action_kind::REFACTOR.to_string(),\n-                lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n-                lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n-                lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n-                lsp_types::code_action_kind::SOURCE.to_string(),\n-                lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n-            ]),\n-            work_done_progress_options: Default::default(),\n-        })),\n+        code_action_provider: Some(code_action_provider),\n         code_lens_provider: Some(CodeLensOptions { resolve_provider: Some(true) }),\n         document_formatting_provider: Some(true),\n         document_range_formatting_provider: None,\n@@ -98,3 +88,29 @@ pub fn server_capabilities() -> ServerCapabilities {\n         })),\n     }\n }\n+\n+fn code_action_capabilities(client_caps: &ClientCapabilities) -> CodeActionProviderCapability {\n+    client_caps\n+        .text_document\n+        .as_ref()\n+        .and_then(|it| it.code_action.as_ref())\n+        .and_then(|it| it.code_action_literal_support.as_ref())\n+        .map_or(CodeActionProviderCapability::Simple(true), |_| {\n+            CodeActionProviderCapability::Options(CodeActionOptions {\n+                // Advertise support for all built-in CodeActionKinds.\n+                // Ideally we would base this off of the client capabilities\n+                // but the client is supposed to fall back gracefully for unknown values.\n+                code_action_kinds: Some(vec![\n+                    lsp_types::code_action_kind::EMPTY.to_string(),\n+                    lsp_types::code_action_kind::QUICKFIX.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n+                    lsp_types::code_action_kind::SOURCE.to_string(),\n+                    lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n+                ]),\n+                work_done_progress_options: Default::default(),\n+            })\n+        })\n+}"}]}