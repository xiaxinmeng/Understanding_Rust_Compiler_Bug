{"sha": "bdd264a0bb48488346be4b5b8bb879530fd186a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZDI2NGEwYmI0ODQ4ODM0NmJlNGI1YjhiYjg3OTUzMGZkMTg2YTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-05T11:13:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-05T11:13:20Z"}, "message": "Rollup merge of #32403 - vlastachu:super_in_path, r=jseyfried\n\nFix issue: Global paths in `use` directives can begin with `super` or `self` #32225\n\nThis PR fixes #32225 by warning on `use ::super::...` and `use ::self::...` on `resolve`.\n\nCurrent changes is the most minimal and ad-hoc.", "tree": {"sha": "540dcee34cb57cc400c2ddc2d4fa685d9621d982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/540dcee34cb57cc400c2ddc2d4fa685d9621d982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdd264a0bb48488346be4b5b8bb879530fd186a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd264a0bb48488346be4b5b8bb879530fd186a1", "html_url": "https://github.com/rust-lang/rust/commit/bdd264a0bb48488346be4b5b8bb879530fd186a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdd264a0bb48488346be4b5b8bb879530fd186a1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fd331e16642363c333804fe3322ae6bc0be8fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd331e16642363c333804fe3322ae6bc0be8fbc", "html_url": "https://github.com/rust-lang/rust/commit/7fd331e16642363c333804fe3322ae6bc0be8fbc"}, {"sha": "6c73134fc740a09e22db6a3c2438339c155ef577", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c73134fc740a09e22db6a3c2438339c155ef577", "html_url": "https://github.com/rust-lang/rust/commit/6c73134fc740a09e22db6a3c2438339c155ef577"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "1573d0c4292ac047fc66028c07e8484a5ae1408f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=bdd264a0bb48488346be4b5b8bb879530fd186a1", "patch": "@@ -179,6 +179,12 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n+declare_lint! {\n+    pub SUPER_OR_SELF_IN_GLOBAL_PATH,\n+    Warn,\n+    \"detects super or self keywords at the beginning of global path\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -213,7 +219,8 @@ impl LintPass for HardwiredLints {\n             RAW_POINTER_DERIVE,\n             TRANSMUTE_FROM_FN_ITEM_TYPES,\n             OVERLAPPING_INHERENT_IMPLS,\n-            RENAMED_AND_REMOVED_LINTS\n+            RENAMED_AND_REMOVED_LINTS,\n+            SUPER_OR_SELF_IN_GLOBAL_PATH\n         )\n     }\n }"}, {"sha": "0780e4cd04834ff2f6437808f40b1db2a13fdadf", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=bdd264a0bb48488346be4b5b8bb879530fd186a1", "patch": "@@ -167,6 +167,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n             reference: \"PR 30742 <https://github.com/rust-lang/rust/pull/30724>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(SUPER_OR_SELF_IN_GLOBAL_PATH),\n+            reference: \"PR #32403 <https://github.com/rust-lang/rust/pull/32403>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT),\n             reference: \"RFC 218 <https://github.com/rust-lang/rfcs/blob/\\"}, {"sha": "f36a8269dc002290d83bec2e34d835ef1b64e9c8", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=bdd264a0bb48488346be4b5b8bb879530fd186a1", "patch": "@@ -23,13 +23,14 @@ use Resolver;\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::middle::cstore::{CrateStore, ChildItem, DlDef};\n+use rustc::lint;\n use rustc::middle::def::*;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::ty::VariantKind;\n \n use syntax::ast::Name;\n use syntax::attr::AttrMetaMethods;\n-use syntax::parse::token::special_idents;\n+use syntax::parse::token::{special_idents, SELF_KEYWORD_NAME, SUPER_KEYWORD_NAME};\n use syntax::codemap::{Span, DUMMY_SP};\n \n use rustc_front::hir;\n@@ -116,8 +117,10 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                 // Extract and intern the module part of the path. For\n                 // globs and lists, the path is found directly in the AST;\n                 // for simple paths we have to munge the path a little.\n-                let module_path = match view_path.node {\n+                let is_global;\n+                let module_path: Vec<Name> = match view_path.node {\n                     ViewPathSimple(_, ref full_path) => {\n+                        is_global = full_path.global;\n                         full_path.segments\n                                  .split_last()\n                                  .unwrap()\n@@ -129,13 +132,26 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n \n                     ViewPathGlob(ref module_ident_path) |\n                     ViewPathList(ref module_ident_path, _) => {\n+                        is_global = module_ident_path.global;\n                         module_ident_path.segments\n                                          .iter()\n                                          .map(|seg| seg.identifier.name)\n                                          .collect()\n                     }\n                 };\n \n+                // Checking for special identifiers in path\n+                // prevent `self` or `super` at beginning of global path\n+                if is_global && (module_path.first() == Some(&SELF_KEYWORD_NAME) ||\n+                                 module_path.first() == Some(&SUPER_KEYWORD_NAME)) {\n+                    self.session.add_lint(\n+                        lint::builtin::SUPER_OR_SELF_IN_GLOBAL_PATH,\n+                        item.id,\n+                        item.span,\n+                        format!(\"expected identifier, found keyword `{}`\",\n+                                module_path.first().unwrap().as_str()));\n+                }\n+\n                 // Build up the import directives.\n                 let is_prelude = item.attrs.iter().any(|attr| {\n                     attr.name() == special_idents::prelude_import.name.as_str()"}, {"sha": "75916b87c129d1ba6e9df8faecafa82ab44d7399", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bdd264a0bb48488346be4b5b8bb879530fd186a1", "patch": "@@ -6124,7 +6124,7 @@ impl<'a> Parser<'a> {\n \n         // Allow a leading :: because the paths are absolute either way.\n         // This occurs with \"use $crate::...\" in macros.\n-        self.eat(&token::ModSep);\n+        let is_global = self.eat(&token::ModSep);\n \n         if self.check(&token::OpenDelim(token::Brace)) {\n             // use {foo,bar}\n@@ -6135,7 +6135,7 @@ impl<'a> Parser<'a> {\n                 |p| p.parse_path_list_item())?;\n             let path = ast::Path {\n                 span: mk_sp(lo, self.span.hi),\n-                global: false,\n+                global: is_global,\n                 segments: Vec::new()\n             };\n             return Ok(P(spanned(lo, self.span.hi, ViewPathList(path, idents))));\n@@ -6164,7 +6164,7 @@ impl<'a> Parser<'a> {\n                     )?;\n                     let path = ast::Path {\n                         span: mk_sp(lo, self.span.hi),\n-                        global: false,\n+                        global: is_global,\n                         segments: path.into_iter().map(|identifier| {\n                             ast::PathSegment {\n                                 identifier: identifier,\n@@ -6180,7 +6180,7 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                     let path = ast::Path {\n                         span: mk_sp(lo, self.span.hi),\n-                        global: false,\n+                        global: is_global,\n                         segments: path.into_iter().map(|identifier| {\n                             ast::PathSegment {\n                                 identifier: identifier,\n@@ -6203,7 +6203,7 @@ impl<'a> Parser<'a> {\n         let mut rename_to = path[path.len() - 1];\n         let path = ast::Path {\n             span: mk_sp(lo, self.last_span.hi),\n-            global: false,\n+            global: is_global,\n             segments: path.into_iter().map(|identifier| {\n                 ast::PathSegment {\n                     identifier: identifier,"}, {"sha": "16417ac004461f685f0d5a04756565f73aba8e9f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=bdd264a0bb48488346be4b5b8bb879530fd186a1", "patch": "@@ -514,7 +514,7 @@ macro_rules! declare_special_idents_and_keywords {(\n // If the special idents get renumbered, remember to modify these two as appropriate\n pub const SELF_KEYWORD_NAME: ast::Name = ast::Name(SELF_KEYWORD_NAME_NUM);\n const STATIC_KEYWORD_NAME: ast::Name = ast::Name(STATIC_KEYWORD_NAME_NUM);\n-const SUPER_KEYWORD_NAME: ast::Name = ast::Name(SUPER_KEYWORD_NAME_NUM);\n+pub const SUPER_KEYWORD_NAME: ast::Name = ast::Name(SUPER_KEYWORD_NAME_NUM);\n const SELF_TYPE_KEYWORD_NAME: ast::Name = ast::Name(SELF_TYPE_KEYWORD_NAME_NUM);\n \n pub const SELF_KEYWORD_NAME_NUM: u32 = 1;"}, {"sha": "d721d428f29f597e7957a63fc9938ee1f6b2e6a9", "filename": "src/test/compile-fail/use-super-global-path.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd264a0bb48488346be4b5b8bb879530fd186a1/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs?ref=bdd264a0bb48488346be4b5b8bb879530fd186a1", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+mod foo {\n+    pub fn g() {\n+        use ::super::main; //~ WARN expected identifier, found keyword `super`\n+        //~^ WARN this was previously accepted by the compiler but is being phased out\n+        main();\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { foo::g(); } //~ ERROR compilation successful"}]}