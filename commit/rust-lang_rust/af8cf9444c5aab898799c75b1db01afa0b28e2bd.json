{"sha": "af8cf9444c5aab898799c75b1db01afa0b28e2bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOGNmOTQ0NGM1YWFiODk4Nzk5Yzc1YjFkYjAxYWZhMGIyOGUyYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-07T12:13:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-07T12:13:35Z"}, "message": "Auto merge of #7183 - th1000s:write_nl_hint, r=flip1995\n\nHandle write!(buf, \"\\n\") case better\n\nMake `write!(buf, \"\\n\")` suggest `writeln!(buf)` by removing\nthe trailing comma from `writeln!(buf, )`.\n\nchangelog: [`write_with_newline`] suggestion on only \"\\n\" improved", "tree": {"sha": "d2bb3bccef3aca397756fe65f5f1f180281abf5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2bb3bccef3aca397756fe65f5f1f180281abf5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8cf9444c5aab898799c75b1db01afa0b28e2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8cf9444c5aab898799c75b1db01afa0b28e2bd", "html_url": "https://github.com/rust-lang/rust/commit/af8cf9444c5aab898799c75b1db01afa0b28e2bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8cf9444c5aab898799c75b1db01afa0b28e2bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475666703f813a58c2b9df0b0395cb5439f3fe43", "url": "https://api.github.com/repos/rust-lang/rust/commits/475666703f813a58c2b9df0b0395cb5439f3fe43", "html_url": "https://github.com/rust-lang/rust/commit/475666703f813a58c2b9df0b0395cb5439f3fe43"}, {"sha": "5f3aae61af8ab129b743d13b14ec5519e97cc445", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3aae61af8ab129b743d13b14ec5519e97cc445", "html_url": "https://github.com/rust-lang/rust/commit/5f3aae61af8ab129b743d13b14ec5519e97cc445"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "d0e79efa70df59e4fad331974e3c24416b9395fb", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af8cf9444c5aab898799c75b1db01afa0b28e2bd/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8cf9444c5aab898799c75b1db01afa0b28e2bd/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=af8cf9444c5aab898799c75b1db01afa0b28e2bd", "patch": "@@ -279,8 +279,15 @@ impl EarlyLintPass for Write {\n             span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprintln!`\");\n             self.lint_println_empty_string(cx, mac);\n         } else if mac.path == sym!(write) {\n-            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n+            if let (Some(fmt_str), dest) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n                 if check_newlines(&fmt_str) {\n+                    let (nl_span, only_nl) = newline_span(&fmt_str);\n+                    let nl_span = match (dest, only_nl) {\n+                        // Special case of `write!(buf, \"\\n\")`: Mark everything from the end of\n+                        // `buf` for removal so no trailing comma [`writeln!(buf, )`] remains.\n+                        (Some(dest_expr), true) => Span::new(dest_expr.span.hi(), nl_span.hi(), nl_span.ctxt()),\n+                        _ => nl_span,\n+                    };\n                     span_lint_and_then(\n                         cx,\n                         WRITE_WITH_NEWLINE,\n@@ -289,10 +296,7 @@ impl EarlyLintPass for Write {\n                         |err| {\n                             err.multipart_suggestion(\n                                 \"use `writeln!()` instead\",\n-                                vec![\n-                                    (mac.path.span, String::from(\"writeln\")),\n-                                    (newline_span(&fmt_str), String::new()),\n-                                ],\n+                                vec![(mac.path.span, String::from(\"writeln\")), (nl_span, String::new())],\n                                 Applicability::MachineApplicable,\n                             );\n                         },\n@@ -329,12 +333,13 @@ impl EarlyLintPass for Write {\n \n /// Given a format string that ends in a newline and its span, calculates the span of the\n /// newline, or the format string itself if the format string consists solely of a newline.\n-fn newline_span(fmtstr: &StrLit) -> Span {\n+/// Return this and a boolean indicating whether it only consisted of a newline.\n+fn newline_span(fmtstr: &StrLit) -> (Span, bool) {\n     let sp = fmtstr.span;\n     let contents = &fmtstr.symbol.as_str();\n \n     if *contents == r\"\\n\" {\n-        return sp;\n+        return (sp, true);\n     }\n \n     let newline_sp_hi = sp.hi()\n@@ -351,7 +356,7 @@ fn newline_span(fmtstr: &StrLit) -> Span {\n         panic!(\"expected format string to contain a newline\");\n     };\n \n-    sp.with_lo(newline_sp_hi - newline_sp_len).with_hi(newline_sp_hi)\n+    (sp.with_lo(newline_sp_hi - newline_sp_len).with_hi(newline_sp_hi), false)\n }\n \n /// Stores a list of replacement spans for each argument, but only if all the replacements used an\n@@ -613,7 +618,7 @@ impl Write {\n                     |err| {\n                         err.multipart_suggestion(\n                             &format!(\"use `{}!` instead\", suggested),\n-                            vec![(mac.path.span, suggested), (newline_span(&fmt_str), String::new())],\n+                            vec![(mac.path.span, suggested), (newline_span(&fmt_str).0, String::new())],\n                             Applicability::MachineApplicable,\n                         );\n                     },"}, {"sha": "cecc2ea9406aa77c140875cdff363b0124551010", "filename": "tests/ui/write_with_newline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af8cf9444c5aab898799c75b1db01afa0b28e2bd/tests%2Fui%2Fwrite_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af8cf9444c5aab898799c75b1db01afa0b28e2bd/tests%2Fui%2Fwrite_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.stderr?ref=af8cf9444c5aab898799c75b1db01afa0b28e2bd", "patch": "@@ -51,8 +51,8 @@ LL |     write!(&mut v, \"/n\");\n    |\n help: use `writeln!()` instead\n    |\n-LL |     writeln!(&mut v, );\n-   |     ^^^^^^^         --\n+LL |     writeln!(&mut v);\n+   |     ^^^^^^^       --\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:36:5"}]}