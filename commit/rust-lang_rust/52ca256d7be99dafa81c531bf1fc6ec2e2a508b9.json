{"sha": "52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyY2EyNTZkN2JlOTlkYWZhODFjNTMxYmYxZmM2ZWMyZTJhNTA4Yjk=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-03T01:15:34Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:56Z"}, "message": "Add KillHandle and implement exit code propagation to replace join_latch", "tree": {"sha": "09e7ed0ea7c3b9f6b1d4262b4a0bef26046d41f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e7ed0ea7c3b9f6b1d4262b4a0bef26046d41f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "html_url": "https://github.com/rust-lang/rust/commit/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a99163f5d54ff26921cda0b12a99e5bd768b873", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a99163f5d54ff26921cda0b12a99e5bd768b873", "html_url": "https://github.com/rust-lang/rust/commit/2a99163f5d54ff26921cda0b12a99e5bd768b873"}], "stats": {"total": 137, "additions": 134, "deletions": 3}, "files": [{"sha": "afd2d3b5a1a746d3da3128d9f24226c13dd10d3b", "filename": "src/libstd/rt/kill.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Task death: asynchronous killing, linked failure, exit code propagation.\n+\n+use cell::Cell;\n+use option::{Option, Some, None};\n+use prelude::*;\n+use unstable::sync::{UnsafeAtomicRcBox, LittleLock};\n+use util;\n+\n+// FIXME(#7544)(bblum): think about the cache efficiency of this\n+struct KillHandleInner {\n+    // ((more fields to be added in a future commit))\n+\n+    // Shared state between task and children for exit code propagation. These\n+    // are here so we can re-use the kill handle to implement watched children\n+    // tasks. Using a separate ARClike would introduce extra atomic adds/subs\n+    // into common spawn paths, so this is just for speed.\n+\n+    // Locklessly accessed; protected by the enclosing refcount's barriers.\n+    any_child_failed: bool,\n+    // A lazy list, consuming which may unwrap() many child tombstones.\n+    child_tombstones: Option<~fn() -> bool>,\n+    // Protects multiple children simultaneously creating tombstones.\n+    graveyard_lock: LittleLock,\n+}\n+\n+/// State shared between tasks used for task killing during linked failure.\n+#[deriving(Clone)]\n+pub struct KillHandle(UnsafeAtomicRcBox<KillHandleInner>);\n+\n+impl KillHandle {\n+    pub fn new() -> KillHandle {\n+        KillHandle(UnsafeAtomicRcBox::new(KillHandleInner {\n+            // Linked failure fields\n+            // ((none yet))\n+            // Exit code propagation fields\n+            any_child_failed: false,\n+            child_tombstones: None,\n+            graveyard_lock:   LittleLock(),\n+        }))\n+    }\n+\n+    pub fn notify_immediate_failure(&mut self) {\n+        // A benign data race may happen here if there are failing sibling\n+        // tasks that were also spawned-watched. The refcount's write barriers\n+        // in UnsafeAtomicRcBox ensure that this write will be seen by the\n+        // unwrapper/destructor, whichever task may unwrap it.\n+        unsafe { (*self.get()).any_child_failed = true; }\n+    }\n+\n+    // For use when a task does not need to collect its children's exit\n+    // statuses, but the task has a parent which might want them.\n+    pub fn reparent_children_to(self, parent: &mut KillHandle) {\n+        // Optimistic path: If another child of the parent's already failed,\n+        // we don't need to worry about any of this.\n+        if unsafe { (*parent.get()).any_child_failed } {\n+            return;\n+        }\n+\n+        // Try to see if all our children are gone already.\n+        match unsafe { self.try_unwrap() } {\n+            // Couldn't unwrap; children still alive. Reparent entire handle as\n+            // our own tombstone, to be unwrapped later.\n+            Left(this) => {\n+                let this = Cell::new(this); // :(\n+                do add_lazy_tombstone(parent) |other_tombstones| {\n+                    let this = Cell::new(this.take()); // :(\n+                    let others = Cell::new(other_tombstones); // :(\n+                    || {\n+                        // Prefer to check tombstones that were there first,\n+                        // being \"more fair\" at the expense of tail-recursion.\n+                        others.take().map_consume_default(true, |f| f()) && {\n+                            let mut inner = unsafe { this.take().unwrap() };\n+                            (!inner.any_child_failed) &&\n+                                inner.child_tombstones.take_map_default(true, |f| f())\n+                        }\n+                    }\n+                }\n+            }\n+            // Whether or not all children exited, one or more already failed.\n+            Right(KillHandleInner { any_child_failed: true, _ }) => {\n+                parent.notify_immediate_failure();\n+            }\n+            // All children exited, but some left behind tombstones that we\n+            // don't want to wait on now. Give them to our parent.\n+            Right(KillHandleInner { any_child_failed: false,\n+                                    child_tombstones: Some(f), _ }) => {\n+                let f = Cell::new(f); // :(\n+                do add_lazy_tombstone(parent) |other_tombstones| {\n+                    let f = Cell::new(f.take()); // :(\n+                    let others = Cell::new(other_tombstones); // :(\n+                    || {\n+                        // Prefer fairness to tail-recursion, as in above case.\n+                        others.take().map_consume_default(true, |f| f()) &&\n+                            f.take()()\n+                    }\n+                }\n+            }\n+            // All children exited, none failed. Nothing to do!\n+            Right(KillHandleInner { any_child_failed: false,\n+                                    child_tombstones: None, _ }) => { }\n+        }\n+\n+        // NB: Takes a pthread mutex -- 'blk' not allowed to reschedule.\n+        fn add_lazy_tombstone(parent: &mut KillHandle,\n+                              blk: &fn(Option<~fn() -> bool>) -> ~fn() -> bool) {\n+\n+            let inner: &mut KillHandleInner = unsafe { &mut *parent.get() };\n+            unsafe {\n+                do inner.graveyard_lock.lock {\n+                    // Update the current \"head node\" of the lazy list.\n+                    inner.child_tombstones =\n+                        Some(blk(util::replace(&mut inner.child_tombstones, None)));\n+                }\n+            }\n+        }\n+    }\n+}\n+"}, {"sha": "1c3411b62478880a25e3fc2fd2cd6aa85d7f61e1", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "patch": "@@ -83,6 +83,9 @@ pub mod global_heap;\n /// Implementations of language-critical runtime features like @.\n pub mod task;\n \n+/// Facilities related to task failure, killing, and death.\n+mod kill;\n+\n /// The coroutine task scheduler, built on the `io` event loop.\n mod sched;\n "}, {"sha": "b208ffd8f910860aee5f6fdd9e189345666a349b", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "patch": "@@ -225,9 +225,9 @@ impl<T> Drop for UnsafeAtomicRcBox<T>{\n /****************************************************************************/\n \n #[allow(non_camel_case_types)] // runtime type\n-pub type rust_little_lock = *libc::c_void;\n+type rust_little_lock = *libc::c_void;\n \n-struct LittleLock {\n+pub struct LittleLock {\n     l: rust_little_lock,\n }\n \n@@ -239,7 +239,7 @@ impl Drop for LittleLock {\n     }\n }\n \n-fn LittleLock() -> LittleLock {\n+pub fn LittleLock() -> LittleLock {\n     unsafe {\n         LittleLock {\n             l: rust_create_little_lock()"}]}