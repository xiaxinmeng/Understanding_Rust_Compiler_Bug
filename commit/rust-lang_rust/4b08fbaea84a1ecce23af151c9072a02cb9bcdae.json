{"sha": "4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "node_id": "C_kwDOAAsO6NoAKDRiMDhmYmFlYTg0YTFlY2NlMjNhZjE1MWM5MDcyYTAyY2I5YmNkYWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-07T13:34:05Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-09T14:50:09Z"}, "message": "ResolverTree does not require access to the crate loader, only the store", "tree": {"sha": "4617035e3864da10c5a2d29f96480512b35b01f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4617035e3864da10c5a2d29f96480512b35b01f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "html_url": "https://github.com/rust-lang/rust/commit/4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b08fbaea84a1ecce23af151c9072a02cb9bcdae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ca83a04b00433a8caf3b805d5ea08cb2691e1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ca83a04b00433a8caf3b805d5ea08cb2691e1b", "html_url": "https://github.com/rust-lang/rust/commit/14ca83a04b00433a8caf3b805d5ea08cb2691e1b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "3a7d463a62583b4ec05e70f3a78f36c669ecc237", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b08fbaea84a1ecce23af151c9072a02cb9bcdae/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b08fbaea84a1ecce23af151c9072a02cb9bcdae/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "patch": "@@ -107,7 +107,7 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n                 r.effective_visibilities.update_eff_vis(\n                     r.local_def_id(node_id),\n                     eff_vis,\n-                    ResolverTree(&r.definitions, &r.crate_loader),\n+                    ResolverTree(&r.definitions, r.crate_loader.cstore()),\n                 )\n             }\n         }"}, {"sha": "816dc4cb4dcc4b094ac5d3c03322af4a6b4a2d72", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b08fbaea84a1ecce23af151c9072a02cb9bcdae/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b08fbaea84a1ecce23af151c9072a02cb9bcdae/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "patch": "@@ -1112,15 +1112,15 @@ impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {\n /// A minimal subset of resolver that can implemenent `DefIdTree`, sometimes\n /// required to satisfy borrow checker by avoiding borrowing the whole resolver.\n #[derive(Clone, Copy)]\n-struct ResolverTree<'a, 'b>(&'a Definitions, &'a CrateLoader<'b>);\n+struct ResolverTree<'a>(&'a Definitions, &'a CStore);\n \n-impl DefIdTree for ResolverTree<'_, '_> {\n+impl DefIdTree for ResolverTree<'_> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        let ResolverTree(definitions, crate_loader) = self;\n+        let ResolverTree(definitions, cstore) = self;\n         match id.as_local() {\n             Some(id) => definitions.def_key(id).parent,\n-            None => crate_loader.cstore().def_key(id).parent,\n+            None => cstore.def_key(id).parent,\n         }\n         .map(|index| DefId { index, ..id })\n     }\n@@ -1129,7 +1129,7 @@ impl DefIdTree for ResolverTree<'_, '_> {\n impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        ResolverTree(&self.definitions, &self.crate_loader).opt_parent(id)\n+        ResolverTree(&self.definitions, self.cstore()).opt_parent(id)\n     }\n }\n "}]}