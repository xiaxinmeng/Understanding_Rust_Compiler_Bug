{"sha": "644a75ecd109bd832aa589f7498fe84f60397274", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NGE3NWVjZDEwOWJkODMyYWE1ODlmNzQ5OGZlODRmNjAzOTcyNzQ=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-04-09T16:51:19Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-04-09T16:51:19Z"}, "message": "Fix `borrow` docs", "tree": {"sha": "699c3091c6abca6a719da886b7dbe8091305c36b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/699c3091c6abca6a719da886b7dbe8091305c36b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644a75ecd109bd832aa589f7498fe84f60397274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644a75ecd109bd832aa589f7498fe84f60397274", "html_url": "https://github.com/rust-lang/rust/commit/644a75ecd109bd832aa589f7498fe84f60397274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644a75ecd109bd832aa589f7498fe84f60397274/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e326aa197b1ee35b41c992eec171589197a7459d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e326aa197b1ee35b41c992eec171589197a7459d", "html_url": "https://github.com/rust-lang/rust/commit/e326aa197b1ee35b41c992eec171589197a7459d"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7332bf4670ae58efd9ce4c42a7143b2e6fc6d31c", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/644a75ecd109bd832aa589f7498fe84f60397274/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644a75ecd109bd832aa589f7498fe84f60397274/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=644a75ecd109bd832aa589f7498fe84f60397274", "patch": "@@ -39,7 +39,7 @@ use self::Cow::*;\n /// Borrow<Vec<T>>` and `Vec<T>: Borrow<[T]>`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Borrow<Borrowed: ?Sized> {\n-    /// Immutably borrow from an owned value.\n+    /// Immutably borrows from an owned value.\n     ///\n     /// # Examples\n     ///\n@@ -67,7 +67,7 @@ pub trait Borrow<Borrowed: ?Sized> {\n /// Similar to `Borrow`, but for mutable borrows.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BorrowMut<Borrowed: ?Sized> : Borrow<Borrowed> {\n-    /// Mutably borrow from an owned value.\n+    /// Mutably borrows from an owned value.\n     ///\n     /// # Examples\n     ///\n@@ -126,7 +126,7 @@ impl<'a, B: ?Sized> Borrow<B> for Cow<'a, B> where B: ToOwned, <B as ToOwned>::O\n     }\n }\n \n-/// A generalization of Clone to borrowed data.\n+/// A generalization of `Clone` to borrowed data.\n ///\n /// Some types make it possible to go from borrowed to owned, usually by\n /// implementing the `Clone` trait. But `Clone` works only for going from `&T`\n@@ -137,7 +137,7 @@ pub trait ToOwned {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Owned: Borrow<Self>;\n \n-    /// Create owned data from borrowed data, usually by copying.\n+    /// Creates owned data from borrowed data, usually by cloning.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_owned(&self) -> Self::Owned;\n }\n@@ -155,9 +155,9 @@ impl<T> ToOwned for T where T: Clone {\n /// data lazily when mutation or ownership is required. The type is designed to\n /// work with general borrowed data via the `Borrow` trait.\n ///\n-/// `Cow` implements both `Deref`, which means that you can call\n+/// `Cow` implements `Deref`, which means that you can call\n /// non-mutating methods directly on the data it encloses. If mutation\n-/// is desired, `to_mut` will obtain a mutable references to an owned\n+/// is desired, `to_mut` will obtain a mutable reference to an owned\n /// value, cloning if necessary.\n ///\n /// # Examples\n@@ -200,7 +200,7 @@ impl<'a, B: ?Sized> Clone for Cow<'a, B> where B: ToOwned {\n }\n \n impl<'a, B: ?Sized> Cow<'a, B> where B: ToOwned {\n-    /// Acquire a mutable reference to the owned form of the data.\n+    /// Acquires a mutable reference to the owned form of the data.\n     ///\n     /// Copies the data if it is not already owned.\n     ///\n@@ -226,7 +226,7 @@ impl<'a, B: ?Sized> Cow<'a, B> where B: ToOwned {\n         }\n     }\n \n-    /// Extract the owned data.\n+    /// Extracts the owned data.\n     ///\n     /// Copies the data if it is not already owned.\n     ///\n@@ -327,7 +327,7 @@ impl<'a, B: ?Sized> Hash for Cow<'a, B> where B: Hash + ToOwned\n     }\n }\n \n-/// Trait for moving into a `Cow`\n+/// Trait for moving into a `Cow`.\n #[unstable(feature = \"into_cow\", reason = \"may be replaced by `convert::Into`\")]\n pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n     /// Moves `self` into `Cow`"}]}