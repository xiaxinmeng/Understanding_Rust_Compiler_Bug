{"sha": "25211894386a34db1639fbd69680e8f7b35ee1a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MjExODk0Mzg2YTM0ZGIxNjM5ZmJkNjk2ODBlOGY3YjM1ZWUxYTQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-08-30T07:27:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-18T20:56:52Z"}, "message": "Add a comment to `Compiler::compile()`.\n\n`Compiler::compile()` is different to all the other `Compiler` methods\nbecause it lacks a `Queries` entry. It only has one call site, which is\nin a test that doesn't need its specific characteristics.\n\nThis patch replaces that call with a call to `Compile::link()`, which is\nsimilar enough for the test's purposes. It also notes that the method is\nan illustrative example of how `Compiler` can be used.", "tree": {"sha": "b07397349a894fa699c22e70f520a9026363f4d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b07397349a894fa699c22e70f520a9026363f4d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25211894386a34db1639fbd69680e8f7b35ee1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25211894386a34db1639fbd69680e8f7b35ee1a4", "html_url": "https://github.com/rust-lang/rust/commit/25211894386a34db1639fbd69680e8f7b35ee1a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25211894386a34db1639fbd69680e8f7b35ee1a4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d264a56068d7fd881b2e082c4d80d81d22c4ce79", "url": "https://api.github.com/repos/rust-lang/rust/commits/d264a56068d7fd881b2e082c4d80d81d22c4ce79", "html_url": "https://github.com/rust-lang/rust/commit/d264a56068d7fd881b2e082c4d80d81d22c4ce79"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "ff5cd8b8c695d2fbc2dac7efa04fc271fc6c0cce", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25211894386a34db1639fbd69680e8f7b35ee1a4/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25211894386a34db1639fbd69680e8f7b35ee1a4/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=25211894386a34db1639fbd69680e8f7b35ee1a4", "patch": "@@ -275,6 +275,11 @@ impl Compiler {\n         })\n     }\n \n+    // This method is different to all the other methods in `Compiler` because\n+    // it lacks a `Queries` entry. It's also not currently used. It does serve\n+    // as an example of how `Compiler` can be used, with additional steps added\n+    // between some passes. And see `rustc_driver::run_compiler` for a more\n+    // complex example.\n     pub fn compile(&self) -> Result<()> {\n         self.prepare_outputs()?;\n \n@@ -286,12 +291,12 @@ impl Compiler {\n \n         self.global_ctxt()?;\n \n-        // Drop AST after creating GlobalCtxt to free memory\n+        // Drop AST after creating GlobalCtxt to free memory.\n         mem::drop(self.expansion()?.take());\n \n         self.ongoing_codegen()?;\n \n-        // Drop GlobalCtxt after starting codegen to free memory\n+        // Drop GlobalCtxt after starting codegen to free memory.\n         mem::drop(self.global_ctxt()?.take());\n \n         self.link().map(|_| ())"}, {"sha": "e290f7fa6b13a97d0fbb1e08fe2d43c55448f683", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25211894386a34db1639fbd69680e8f7b35ee1a4/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25211894386a34db1639fbd69680e8f7b35ee1a4/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=25211894386a34db1639fbd69680e8f7b35ee1a4", "patch": "@@ -62,6 +62,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     };\n \n     interface::run_compiler(config, |compiler| {\n-        compiler.compile().ok();\n+        // This runs all the passes prior to linking, too.\n+        compiler.link().ok();\n     });\n }"}]}