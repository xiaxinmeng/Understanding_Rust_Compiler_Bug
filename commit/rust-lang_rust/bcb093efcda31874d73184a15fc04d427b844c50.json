{"sha": "bcb093efcda31874d73184a15fc04d427b844c50", "node_id": "C_kwDOAAsO6NoAKGJjYjA5M2VmY2RhMzE4NzRkNzMxODRhMTVmYzA0ZDQyN2I4NDRjNTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-19T18:19:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-19T18:19:48Z"}, "message": "Rollup merge of #92800 - ehuss:docs-fallback, r=Mark-Simulacrum\n\nAdd manifest docs fallback.\n\nThis adds a fallback so that the rustup manifest will contain the rust-docs component for all hosts. There is a mapping so that the docs that get downloaded are roughly close to the actual host. There inevitably will be things that don't match. Ideally the standard library docs would be the same for every platform (`cfg(doc)` goes a long way towards this), but there are still lots of minor differences.\n\nCloses #69525", "tree": {"sha": "da3337b827bdfe67d9c3fd8c48d1c3dd6a414bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3337b827bdfe67d9c3fd8c48d1c3dd6a414bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb093efcda31874d73184a15fc04d427b844c50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6FZFCRBK7hj4Ov3rIwAAdwMIADIJ1KqUnqoBjLRYU+ZZDX8M\nca9XTOb3Kx/R39hPn30B69hC46JvDMvObvQqlmIRCEpTN4Zvxirb8tnefF+SBwwW\nGsp47pracUvRjSaLtQqixJq/Us/FuYvM9Rn3qm0pbOPHAGBvzCcEmYIs9w9srnB/\nzQJKCkAVyxOsa4xAS1P0v9MUaM88qm7LqRfrvR+xyY93errxItdii0N/o8YC5CKy\nzNJzkg/3m6vX7bRZRuH0iE4j0BiVd591vgcbYMoR+eb/k5FhQsdOTWuphJsUcWfr\nGSC03aGYHjkYm3ANfIMns9ITMBIt3ge5ArVJPTqg8ybPG6q7xcoI6IynNYkgIiU=\n=ovjw\n-----END PGP SIGNATURE-----\n", "payload": "tree da3337b827bdfe67d9c3fd8c48d1c3dd6a414bb7\nparent dfbb6b246da3758911d5625a3b6ec4ecec9a01ab\nparent c8e6889e08fd3a707134a3089840a01e615c1551\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642616388 +0100\ncommitter GitHub <noreply@github.com> 1642616388 +0100\n\nRollup merge of #92800 - ehuss:docs-fallback, r=Mark-Simulacrum\n\nAdd manifest docs fallback.\n\nThis adds a fallback so that the rustup manifest will contain the rust-docs component for all hosts. There is a mapping so that the docs that get downloaded are roughly close to the actual host. There inevitably will be things that don't match. Ideally the standard library docs would be the same for every platform (`cfg(doc)` goes a long way towards this), but there are still lots of minor differences.\n\nCloses #69525\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb093efcda31874d73184a15fc04d427b844c50", "html_url": "https://github.com/rust-lang/rust/commit/bcb093efcda31874d73184a15fc04d427b844c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb093efcda31874d73184a15fc04d427b844c50/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "html_url": "https://github.com/rust-lang/rust/commit/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab"}, {"sha": "c8e6889e08fd3a707134a3089840a01e615c1551", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e6889e08fd3a707134a3089840a01e615c1551", "html_url": "https://github.com/rust-lang/rust/commit/c8e6889e08fd3a707134a3089840a01e615c1551"}], "stats": {"total": 115, "additions": 69, "deletions": 46}, "files": [{"sha": "fe5dedb6ba4b73be4d4c8c3de58cf85d683e6c12", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb093efcda31874d73184a15fc04d427b844c50/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bcb093efcda31874d73184a15fc04d427b844c50/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=bcb093efcda31874d73184a15fc04d427b844c50", "patch": "@@ -320,7 +320,7 @@ jobs:\n           - name: dist-aarch64-apple\n             env:\n               SCRIPT: \"./x.py dist --stage 2\"\n-              RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-full-tools --enable-sanitizers --enable-profiler --disable-docs --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               USE_XCODE_CLANG: 1\n               MACOSX_DEPLOYMENT_TARGET: 11.0"}, {"sha": "a46a4e63714c2fe8be4a4a726a08eed119de76ca", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb093efcda31874d73184a15fc04d427b844c50/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb093efcda31874d73184a15fc04d427b844c50/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=bcb093efcda31874d73184a15fc04d427b844c50", "patch": "@@ -1483,11 +1483,10 @@ impl Step for Extended {\n             };\n             prepare(\"rustc\");\n             prepare(\"cargo\");\n-            prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n             prepare(\"clippy\");\n-            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n+            for tool in &[\"rust-docs\", \"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }"}, {"sha": "a70cdc4b519e664e9a50fbca8fc3b6cc8649931d", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb093efcda31874d73184a15fc04d427b844c50/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bcb093efcda31874d73184a15fc04d427b844c50/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=bcb093efcda31874d73184a15fc04d427b844c50", "patch": "@@ -496,6 +496,7 @@ jobs:\n                 --enable-full-tools\n                 --enable-sanitizers\n                 --enable-profiler\n+                --disable-docs\n                 --set rust.jemalloc\n                 --set llvm.ninja=false\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1"}, {"sha": "44c96f31d0ba8ca5d71a8aee1e49da371f5cbf28", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb093efcda31874d73184a15fc04d427b844c50/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bcb093efcda31874d73184a15fc04d427b844c50/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=bcb093efcda31874d73184a15fc04d427b844c50", "patch": "@@ -20,8 +20,7 @@ Then, you can generate the manifest and all the packages from `path/to/dist` to\n `path/to/output` with:\n \n ```\n-$ cargo +nightly run path/to/dist path/to/output 1970-01-01 http://example.com \\\n-    CHANNEL VERSION\n+$ cargo +nightly run path/to/dist path/to/output 1970-01-01 http://example.com CHANNEL\n ```\n \n Remember to replace `CHANNEL` with the channel you produced dist artifacts of"}, {"sha": "6b56d6bc4adf068391105254d9e00539619fb004", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 63, "deletions": 35, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bcb093efcda31874d73184a15fc04d427b844c50/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb093efcda31874d73184a15fc04d427b844c50/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=bcb093efcda31874d73184a15fc04d427b844c50", "patch": "@@ -155,17 +155,19 @@ static TARGETS: &[&str] = &[\n     \"x86_64-unknown-hermit\",\n ];\n \n-static DOCS_TARGETS: &[&str] = &[\n-    \"aarch64-unknown-linux-gnu\",\n-    \"i686-apple-darwin\",\n-    \"i686-pc-windows-gnu\",\n-    \"i686-pc-windows-msvc\",\n-    \"i686-unknown-linux-gnu\",\n-    \"x86_64-apple-darwin\",\n-    \"x86_64-pc-windows-gnu\",\n-    \"x86_64-pc-windows-msvc\",\n-    \"x86_64-unknown-linux-gnu\",\n-    \"x86_64-unknown-linux-musl\",\n+/// This allows the manifest to contain rust-docs for hosts that don't build\n+/// docs.\n+///\n+/// Tuples of `(host_partial, host_instead)`. If the host does not have the\n+/// rust-docs component available, then if the host name contains\n+/// `host_partial`, it will use the docs from `host_instead` instead.\n+///\n+/// The order here matters, more specific entries should be first.\n+static DOCS_FALLBACK: &[(&str, &str)] = &[\n+    (\"-apple-\", \"x86_64-apple-darwin\"),\n+    (\"aarch64\", \"aarch64-unknown-linux-gnu\"),\n+    (\"arm-\", \"aarch64-unknown-linux-gnu\"),\n+    (\"\", \"x86_64-unknown-linux-gnu\"),\n ];\n \n static MSI_INSTALLERS: &[&str] = &[\n@@ -301,23 +303,27 @@ impl Builder {\n     }\n \n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n-        let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n-        package(\"rustc\", HOSTS);\n-        package(\"rustc-dev\", HOSTS);\n-        package(\"reproducible-artifacts\", HOSTS);\n-        package(\"rustc-docs\", HOSTS);\n-        package(\"cargo\", HOSTS);\n-        package(\"rust-mingw\", MINGW);\n-        package(\"rust-std\", TARGETS);\n-        package(\"rust-docs\", DOCS_TARGETS);\n-        package(\"rust-src\", &[\"*\"]);\n-        package(\"rls-preview\", HOSTS);\n-        package(\"rust-analyzer-preview\", HOSTS);\n-        package(\"clippy-preview\", HOSTS);\n-        package(\"miri-preview\", HOSTS);\n-        package(\"rustfmt-preview\", HOSTS);\n-        package(\"rust-analysis\", TARGETS);\n-        package(\"llvm-tools-preview\", TARGETS);\n+        macro_rules! package {\n+            ($name:expr, $targets:expr) => {\n+                self.package($name, &mut manifest.pkg, $targets, &[])\n+            };\n+        }\n+        package!(\"rustc\", HOSTS);\n+        package!(\"rustc-dev\", HOSTS);\n+        package!(\"reproducible-artifacts\", HOSTS);\n+        package!(\"rustc-docs\", HOSTS);\n+        package!(\"cargo\", HOSTS);\n+        package!(\"rust-mingw\", MINGW);\n+        package!(\"rust-std\", TARGETS);\n+        self.package(\"rust-docs\", &mut manifest.pkg, HOSTS, DOCS_FALLBACK);\n+        package!(\"rust-src\", &[\"*\"]);\n+        package!(\"rls-preview\", HOSTS);\n+        package!(\"rust-analyzer-preview\", HOSTS);\n+        package!(\"clippy-preview\", HOSTS);\n+        package!(\"miri-preview\", HOSTS);\n+        package!(\"rustfmt-preview\", HOSTS);\n+        package!(\"rust-analysis\", TARGETS);\n+        package!(\"llvm-tools-preview\", TARGETS);\n     }\n \n     fn add_artifacts_to(&mut self, manifest: &mut Manifest) {\n@@ -500,7 +506,13 @@ impl Builder {\n             .extend(pkgs.iter().map(|s| (*s).to_owned()));\n     }\n \n-    fn package(&mut self, pkgname: &str, dst: &mut BTreeMap<String, Package>, targets: &[&str]) {\n+    fn package(\n+        &mut self,\n+        pkgname: &str,\n+        dst: &mut BTreeMap<String, Package>,\n+        targets: &[&str],\n+        fallback: &[(&str, &str)],\n+    ) {\n         let version_info = self\n             .versions\n             .version(&PkgType::from_component(pkgname))\n@@ -512,16 +524,32 @@ impl Builder {\n             is_present = false; // Pretend the component is entirely missing.\n         }\n \n+        macro_rules! tarball_name {\n+            ($target_name:expr) => {\n+                self.versions.tarball_name(&PkgType::from_component(pkgname), $target_name).unwrap()\n+            };\n+        }\n+        let mut target_from_compressed_tar = |target_name| {\n+            let target = Target::from_compressed_tar(self, &tarball_name!(target_name));\n+            if target.available {\n+                return target;\n+            }\n+            for (substr, fallback_target) in fallback {\n+                if target_name.contains(substr) {\n+                    let t = Target::from_compressed_tar(self, &tarball_name!(fallback_target));\n+                    // Fallbacks must always be available.\n+                    assert!(t.available);\n+                    return t;\n+                }\n+            }\n+            Target::unavailable()\n+        };\n+\n         let targets = targets\n             .iter()\n             .map(|name| {\n                 let target = if is_present {\n-                    let filename = self\n-                        .versions\n-                        .tarball_name(&PkgType::from_component(pkgname), name)\n-                        .unwrap();\n-\n-                    Target::from_compressed_tar(self, &filename)\n+                    target_from_compressed_tar(name)\n                 } else {\n                     // If the component is not present for this build add it anyway but mark it as\n                     // unavailable -- this way rustup won't allow upgrades without --force"}, {"sha": "95c2297de264b7d76cb868b88f631b99fe4823a4", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcb093efcda31874d73184a15fc04d427b844c50/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb093efcda31874d73184a15fc04d427b844c50/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=bcb093efcda31874d73184a15fc04d427b844c50", "patch": "@@ -169,7 +169,7 @@ impl Versions {\n     }\n \n     pub(crate) fn archive_name(\n-        &mut self,\n+        &self,\n         package: &PkgType,\n         target: &str,\n         extension: &str,\n@@ -189,11 +189,7 @@ impl Versions {\n         }\n     }\n \n-    pub(crate) fn tarball_name(\n-        &mut self,\n-        package: &PkgType,\n-        target: &str,\n-    ) -> Result<String, Error> {\n+    pub(crate) fn tarball_name(&self, package: &PkgType, target: &str) -> Result<String, Error> {\n         self.archive_name(package, target, \"tar.gz\")\n     }\n "}]}