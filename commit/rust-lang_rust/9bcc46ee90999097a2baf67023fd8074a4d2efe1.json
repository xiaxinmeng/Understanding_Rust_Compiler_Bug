{"sha": "9bcc46ee90999097a2baf67023fd8074a4d2efe1", "node_id": "C_kwDOAAsO6NoAKDliY2M0NmVlOTA5OTkwOTdhMmJhZjY3MDIzZmQ4MDc0YTRkMmVmZTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-17T04:25:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T04:25:23Z"}, "message": "Rollup merge of #106949 - compiler-errors:is-poly, r=BoxyUwU\n\nConstBlocks are poly if their substs are poly\n\nr? `@BoxyUwU`\n\nfixes #106926", "tree": {"sha": "c992d33b59ead0c7e858f6dd8d86289269ce2222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c992d33b59ead0c7e858f6dd8d86289269ce2222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bcc46ee90999097a2baf67023fd8074a4d2efe1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxiMzCRBK7hj4Ov3rIwAAZdwIAIwKcor6cHrWTG2Hfp6esq8Z\nW5af8vij2IR3DIanmtdV9cHXcuV9ns9dZPXs9lMXMBH3Fw34eLlTpZpz1hj3tMsK\nIKq3ObuImXDqh2lW1oT1znTvQtOJsKXi5UrV/3UHz03B5qcYZgA145UA0xwDj9zd\nC9Jw5JfyW792DKyayG7uFTzMaIDJepU6qeHdwDZB95FTNKaH2iinUmeXNhoeiGK3\ntMabpkQf05sDDrjua/Zwtfh1qoP98jItB3uE3KyeY3gi76wnq+7RcWyTH2aMq+9w\npM49igQsD7MErbzCcIsuM4w+JOT4OYhWNrq+zsHWHBzX+QoN398M8etQBdSMAcU=\n=ocWq\n-----END PGP SIGNATURE-----\n", "payload": "tree c992d33b59ead0c7e858f6dd8d86289269ce2222\nparent b90f62988d06421a4e5fdd63ca625d47aac130a0\nparent 9f6fef96571f52b3e4320cfcb906dfdc66eac1c3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673929523 +0100\ncommitter GitHub <noreply@github.com> 1673929523 +0100\n\nRollup merge of #106949 - compiler-errors:is-poly, r=BoxyUwU\n\nConstBlocks are poly if their substs are poly\n\nr? `@BoxyUwU`\n\nfixes #106926\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bcc46ee90999097a2baf67023fd8074a4d2efe1", "html_url": "https://github.com/rust-lang/rust/commit/9bcc46ee90999097a2baf67023fd8074a4d2efe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bcc46ee90999097a2baf67023fd8074a4d2efe1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90f62988d06421a4e5fdd63ca625d47aac130a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90f62988d06421a4e5fdd63ca625d47aac130a0", "html_url": "https://github.com/rust-lang/rust/commit/b90f62988d06421a4e5fdd63ca625d47aac130a0"}, {"sha": "9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "html_url": "https://github.com/rust-lang/rust/commit/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3"}], "stats": {"total": 107, "additions": 89, "deletions": 18}, "files": [{"sha": "abe65a0e3fef06415599478dad5d702316a7a6df", "filename": "compiler/rustc_error_messages/locales/en-US/ty_utils.ftl", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -10,17 +10,17 @@ ty_utils_address_and_deref_not_supported = dereferencing or taking the address i\n \n ty_utils_array_not_supported = array construction is not supported in generic constants\n \n-ty_utils_block_not_supported = blocks are not supported in generic constant\n+ty_utils_block_not_supported = blocks are not supported in generic constants\n \n-ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constant\n+ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constants\n \n ty_utils_tuple_not_supported = tuple construction is not supported in generic constants\n \n-ty_utils_index_not_supported = indexing is not supported in generic constant\n+ty_utils_index_not_supported = indexing is not supported in generic constants\n \n-ty_utils_field_not_supported = field access is not supported in generic constant\n+ty_utils_field_not_supported = field access is not supported in generic constants\n \n-ty_utils_const_block_not_supported = const blocks are not supported in generic constant\n+ty_utils_const_block_not_supported = const blocks are not supported in generic constants\n \n ty_utils_adt_not_supported = struct/enum construction is not supported in generic constants\n \n@@ -44,4 +44,4 @@ ty_utils_control_flow_not_supported = control flow is not supported in generic c\n \n ty_utils_inline_asm_not_supported = assembly is not supported in generic constants\n \n-ty_utils_operation_not_supported = unsupported operation in generic constant\n+ty_utils_operation_not_supported = unsupported operation in generic constants"}, {"sha": "a9fbad55dac5540b6230dd669fdee5926cd06302", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -302,13 +302,53 @@ impl<'a, 'tcx> IsThirPolymorphic<'a, 'tcx> {\n         }\n \n         match expr.kind {\n-            thir::ExprKind::NamedConst { substs, .. } => substs.has_non_region_param(),\n+            thir::ExprKind::NamedConst { substs, .. }\n+            | thir::ExprKind::ConstBlock { substs, .. } => substs.has_non_region_param(),\n             thir::ExprKind::ConstParam { .. } => true,\n             thir::ExprKind::Repeat { value, count } => {\n                 self.visit_expr(&self.thir()[value]);\n                 count.has_non_region_param()\n             }\n-            _ => false,\n+            thir::ExprKind::Scope { .. }\n+            | thir::ExprKind::Box { .. }\n+            | thir::ExprKind::If { .. }\n+            | thir::ExprKind::Call { .. }\n+            | thir::ExprKind::Deref { .. }\n+            | thir::ExprKind::Binary { .. }\n+            | thir::ExprKind::LogicalOp { .. }\n+            | thir::ExprKind::Unary { .. }\n+            | thir::ExprKind::Cast { .. }\n+            | thir::ExprKind::Use { .. }\n+            | thir::ExprKind::NeverToAny { .. }\n+            | thir::ExprKind::Pointer { .. }\n+            | thir::ExprKind::Loop { .. }\n+            | thir::ExprKind::Let { .. }\n+            | thir::ExprKind::Match { .. }\n+            | thir::ExprKind::Block { .. }\n+            | thir::ExprKind::Assign { .. }\n+            | thir::ExprKind::AssignOp { .. }\n+            | thir::ExprKind::Field { .. }\n+            | thir::ExprKind::Index { .. }\n+            | thir::ExprKind::VarRef { .. }\n+            | thir::ExprKind::UpvarRef { .. }\n+            | thir::ExprKind::Borrow { .. }\n+            | thir::ExprKind::AddressOf { .. }\n+            | thir::ExprKind::Break { .. }\n+            | thir::ExprKind::Continue { .. }\n+            | thir::ExprKind::Return { .. }\n+            | thir::ExprKind::Array { .. }\n+            | thir::ExprKind::Tuple { .. }\n+            | thir::ExprKind::Adt(_)\n+            | thir::ExprKind::PlaceTypeAscription { .. }\n+            | thir::ExprKind::ValueTypeAscription { .. }\n+            | thir::ExprKind::Closure(_)\n+            | thir::ExprKind::Literal { .. }\n+            | thir::ExprKind::NonHirLiteral { .. }\n+            | thir::ExprKind::ZstLiteral { .. }\n+            | thir::ExprKind::StaticRef { .. }\n+            | thir::ExprKind::InlineAsm(_)\n+            | thir::ExprKind::ThreadLocalRef(_)\n+            | thir::ExprKind::Yield { .. } => false,\n         }\n     }\n     fn pat_is_poly(&mut self, pat: &thir::Pat<'tcx>) -> bool {"}, {"sha": "1d10dfdf10c6ee1575d212655a3709dc0844a149", "filename": "tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -10,7 +10,7 @@ error: overly complex generic constant\n   --> $DIR/array-size-in-generic-struct-param.rs:19:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n-   |               ^^^^^^^^^^^^ field access is not supported in generic constant\n+   |               ^^^^^^^^^^^^ field access is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "7332a8f03c05ff31670e21e8eaf6a7f409884d2c", "filename": "tests/ui/const-generics/generic_const_exprs/const-block-is-poly.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -0,0 +1,11 @@\n+#![feature(inline_const, generic_const_exprs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+fn foo<T>() {\n+    let _ = [0u8; const { std::mem::size_of::<T>() }];\n+    //~^ ERROR: overly complex generic constant\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+}"}, {"sha": "f2625990840152b4ee5e2d394ac32b60e9fb6a1c", "filename": "tests/ui/const-generics/generic_const_exprs/const-block-is-poly.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-block-is-poly.rs:1:26\n+   |\n+LL | #![feature(inline_const, generic_const_exprs)]\n+   |                          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: overly complex generic constant\n+  --> $DIR/const-block-is-poly.rs:5:19\n+   |\n+LL |     let _ = [0u8; const { std::mem::size_of::<T>() }];\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ const blocks are not supported in generic constants\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "823a4f8a185bb8cc7020063d2568921bbdb4dd17", "filename": "tests/ui/const-generics/generic_const_exprs/let-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:68\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                                                    ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -11,7 +11,7 @@ error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:35\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                   ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "265a3b9d233414912aabdca5085cd03487b76f78", "filename": "tests/ui/const-generics/generic_const_exprs/unused_expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:4:34\n    |\n LL | fn add<const N: usize>() -> [u8; { N + 1; 5 }] {\n-   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -11,7 +11,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:9:34\n    |\n LL | fn div<const N: usize>() -> [u8; { N / 1; 5 }] {\n-   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -20,7 +20,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:16:38\n    |\n LL | fn fn_call<const N: usize>() -> [u8; { foo(N); 5 }] {\n-   |                                      ^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                      ^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "47429b7612f94095ec5ab8726964b3a76d34c6de", "filename": "tests/ui/const-generics/issues/issue-67945-2.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -8,7 +8,7 @@ LL | |         let x: Option<Box<Self>> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "98f9f83976aa79b63f76e9f798ea2cec18bfaeba", "filename": "tests/ui/const-generics/issues/issue-67945-3.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -7,7 +7,7 @@ LL | |         let x: Option<S> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "c03d40a7bb832d80ee7bb2dbdaeeb2745f41150d", "filename": "tests/ui/const-generics/issues/issue-67945-4.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -7,7 +7,7 @@ LL | |         let x: Option<Box<S>> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "68b35a38b0f8ada52a5a18342d537854369fe012", "filename": "tests/ui/const-generics/issues/issue-77357.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc46ee90999097a2baf67023fd8074a4d2efe1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr?ref=9bcc46ee90999097a2baf67023fd8074a4d2efe1", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/issue-77357.rs:6:46\n    |\n LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}]}