{"sha": "32dc5a0783560c97f3c42dafad25dcee9cf6d723", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZGM1YTA3ODM1NjBjOTdmM2M0MmRhZmFkMjVkY2VlOWNmNmQ3MjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T09:47:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T09:47:05Z"}, "message": "Auto merge of #54157 - euclio:structured-suggestion, r=estebank\n\nuse structured suggestion for \"missing mut\" label\n\nFixes #54133 for both NLL and non-NLL.\n\nr? @estebank\n\nI'm not super happy with the existing wording here, since it's now a suggestion. I wonder if the message would work better as something like \"help: make binding mutable: `mut foo`\"?\n\nAlso, are the `HELP` and `SUGGESTION` comments necessary?", "tree": {"sha": "d3c69ef050e1e29d2dc1994e98ace37e2057de51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c69ef050e1e29d2dc1994e98ace37e2057de51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32dc5a0783560c97f3c42dafad25dcee9cf6d723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32dc5a0783560c97f3c42dafad25dcee9cf6d723", "html_url": "https://github.com/rust-lang/rust/commit/32dc5a0783560c97f3c42dafad25dcee9cf6d723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32dc5a0783560c97f3c42dafad25dcee9cf6d723/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4819878cd4e397cc3fff9679e3255af1adb2430", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4819878cd4e397cc3fff9679e3255af1adb2430", "html_url": "https://github.com/rust-lang/rust/commit/f4819878cd4e397cc3fff9679e3255af1adb2430"}, {"sha": "d871b8ad4ab15b7003cd6aad4b5f361ef6d35fd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d871b8ad4ab15b7003cd6aad4b5f361ef6d35fd8", "html_url": "https://github.com/rust-lang/rust/commit/d871b8ad4ab15b7003cd6aad4b5f361ef6d35fd8"}], "stats": {"total": 343, "additions": 179, "deletions": 164}, "files": [{"sha": "828364734f4a901b2c5de604da3c17fe58c71615", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -45,7 +45,7 @@ use rustc_data_structures::sync::Lrc;\n use std::hash::{Hash, Hasher};\n use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n-use errors::{DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n@@ -1299,9 +1299,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         snippet\n                     );\n                 } else {\n-                    db.span_label(\n+                    db.span_suggestion_with_applicability(\n                         let_span,\n-                        format!(\"consider changing this to `mut {}`\", snippet),\n+                        \"make this binding mutable\",\n+                        format!(\"mut {}\", snippet),\n+                        Applicability::MachineApplicable,\n                     );\n                 }\n             }"}, {"sha": "4671332f2824c57e113fa00ea4c33cdf6b9b8f96", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n use super::borrow_set::BorrowData;\n@@ -702,9 +702,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if let Some(decl) = local_decl {\n             if let Some(name) = decl.name {\n                 if decl.can_be_made_mutable() {\n-                    err.span_label(\n+                    err.span_suggestion_with_applicability(\n                         decl.source_info.span,\n-                        format!(\"consider changing this to `mut {}`\", name),\n+                        \"make this binding mutable\",\n+                        format!(\"mut {}\", name),\n+                        Applicability::MachineApplicable,\n                     );\n                 }\n             }"}, {"sha": "6aec37d4972f351c328252a89c0b82449c044412", "filename": "src/test/ui/E0596.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2FE0596.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2FE0596.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/E0596.rs:16:18\n    |\n LL |     let x = 1;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     let y = &mut x; //[ast]~ ERROR [E0596]\n    |                  ^ cannot borrow mutably\n "}, {"sha": "7fefb6672c76bce79aad3017232d7173c49f639a", "filename": "src/test/ui/asm/asm-out-assign-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/asm-out-assign-imm.rs:34:9\n    |\n LL |     let x: isize;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ..."}, {"sha": "8a50ec8f52c5844a34b1f3669114d0d5b5af5d4a", "filename": "src/test/ui/assign-imm-local-twice.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,9 +1,9 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/assign-imm-local-twice.rs:20:5\n+  --> $DIR/assign-imm-local-twice.rs:21:5\n    |\n LL |     let v: isize;\n-   |         - consider changing this to `mut v`\n-LL |     //[mir]~^ NOTE consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n+...\n LL |     v = 1; //[ast]~ NOTE first assignment\n    |     ----- first assignment to `v`\n ..."}, {"sha": "a34ac54ae3bfad821742195c71c0535c1f812a2f", "filename": "src/test/ui/assign-imm-local-twice.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/assign-imm-local-twice.rs:20:5\n+  --> $DIR/assign-imm-local-twice.rs:21:5\n    |\n LL |     v = 1; //[ast]~ NOTE first assignment\n    |     ----- first assignment to `v`"}, {"sha": "8a50ec8f52c5844a34b1f3669114d0d5b5af5d4a", "filename": "src/test/ui/assign-imm-local-twice.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,9 +1,9 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/assign-imm-local-twice.rs:20:5\n+  --> $DIR/assign-imm-local-twice.rs:21:5\n    |\n LL |     let v: isize;\n-   |         - consider changing this to `mut v`\n-LL |     //[mir]~^ NOTE consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n+...\n LL |     v = 1; //[ast]~ NOTE first assignment\n    |     ----- first assignment to `v`\n ..."}, {"sha": "137414ccc6de01a87081e80bd5ea373c3eecfe0d", "filename": "src/test/ui/assign-imm-local-twice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -13,7 +13,8 @@\n \n fn test() {\n     let v: isize;\n-    //[mir]~^ NOTE consider changing this to `mut v`\n+    //[mir]~^ HELP make this binding mutable\n+    //[mir]~| SUGGESTION mut v\n     v = 1; //[ast]~ NOTE first assignment\n            //[mir]~^ NOTE first assignment\n     println!(\"v={}\", v);"}, {"sha": "64ac6883087dd9b00f5cd472bce8ba12439b53da", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -15,11 +15,11 @@ LL | |     x;  //~ value moved here\n    |       borrow later used here\n \n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/augmented-assignments.rs:30:5\n+  --> $DIR/augmented-assignments.rs:31:5\n    |\n LL |     let y = Int(2);\n    |         - help: consider changing this to be mutable: `mut y`\n-LL |     //~^ consider changing this to `mut y`\n+...\n LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n    |     ^ cannot borrow as mutable\n "}, {"sha": "2857ff2554a0c1f4e0c29ae8d7f37075896300c7", "filename": "src/test/ui/augmented-assignments.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -26,7 +26,8 @@ fn main() {\n     x;  //~ value moved here\n \n     let y = Int(2);\n-    //~^ consider changing this to `mut y`\n+    //~^ HELP make this binding mutable\n+    //~| SUGGESTION mut y\n     y   //~ error: cannot borrow immutable local variable `y` as mutable\n         //~| cannot borrow\n     +="}, {"sha": "a7f3328071e26b370c93c6c778cbc64ab2cf7a34", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,9 +1,9 @@\n error[E0596]: cannot borrow immutable local variable `y` as mutable\n-  --> $DIR/augmented-assignments.rs:30:5\n+  --> $DIR/augmented-assignments.rs:31:5\n    |\n LL |     let y = Int(2);\n-   |         - consider changing this to `mut y`\n-LL |     //~^ consider changing this to `mut y`\n+   |         - help: make this binding mutable: `mut y`\n+...\n LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n    |     ^ cannot borrow mutably\n "}, {"sha": "c2ecdb33ba90715a21d2265d0f466b23037c4664", "filename": "src/test/ui/borrowck/borrowck-access-permissions.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/borrowck-access-permissions.rs:22:24\n    |\n LL |     let x = 1;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |         let _y1 = &mut x; //[ast]~ ERROR [E0596]\n    |                        ^ cannot borrow mutably\n@@ -17,7 +17,7 @@ error[E0596]: cannot borrow immutable `Box` content `*box_x` as mutable\n   --> $DIR/borrowck-access-permissions.rs:37:24\n    |\n LL |         let box_x = Box::new(1);\n-   |             ----- consider changing this to `mut box_x`\n+   |             ----- help: make this binding mutable: `mut box_x`\n ...\n LL |         let _y1 = &mut *box_x; //[ast]~ ERROR [E0596]\n    |                        ^^^^^^ cannot borrow as mutable"}, {"sha": "7b8849ec764dd478972cf2d317cbbec190e8130b", "filename": "src/test/ui/borrowck/borrowck-argument.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,23 +2,23 @@ error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:20:5\n    |\n LL | fn func(arg: S) {\n-   |         --- consider changing this to `mut arg`\n+   |         --- help: make this binding mutable: `mut arg`\n LL |     arg.mutate(); //~ ERROR: cannot borrow immutable argument\n    |     ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:25:9\n    |\n LL |     fn method(&self, arg: S) {\n-   |                      --- consider changing this to `mut arg`\n+   |                      --- help: make this binding mutable: `mut arg`\n LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n    |         ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:31:9\n    |\n LL |     fn default(&self, arg: S) {\n-   |                       --- consider changing this to `mut arg`\n+   |                       --- help: make this binding mutable: `mut arg`\n LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n    |         ^^^ cannot borrow mutably\n \n@@ -28,7 +28,7 @@ error[E0596]: cannot borrow immutable argument `arg` as mutable\n LL |     (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n    |       ---       ^^^ cannot borrow mutably\n    |       |\n-   |       consider changing this to `mut arg`\n+   |       help: make this binding mutable: `mut arg`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b0f0535b9f6c7aefe768775756dc4bffe85f6d19", "filename": "src/test/ui/borrowck/borrowck-asm.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -28,7 +28,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             consider changing this to `mut x`\n+   |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n    |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n@@ -40,7 +40,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             consider changing this to `mut x`\n+   |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n    |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable"}, {"sha": "b0f0535b9f6c7aefe768775756dc4bffe85f6d19", "filename": "src/test/ui/borrowck/borrowck-asm.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -28,7 +28,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             consider changing this to `mut x`\n+   |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n    |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n@@ -40,7 +40,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             consider changing this to `mut x`\n+   |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n    |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable"}, {"sha": "a6338a22389a001cd28793b7cdd44d400f0ae154", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/borrowck-auto-mut-ref-to-immut-var.rs:25:5\n    |\n LL |     let x = Foo { x: 3 };\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.printme();    //~ ERROR cannot borrow\n    |     ^ cannot borrow mutably\n "}, {"sha": "19a96d568575277b2a8ccaf1500e5ad5dc905442", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -147,7 +147,7 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:132:21\n    |\n LL |     let foo = make_foo();\n-   |         --- consider changing this to `mut foo`\n+   |         --- help: make this binding mutable: `mut foo`\n LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n "}, {"sha": "75f12c377edd440c481c46682c5d3c6d8561ea8e", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -114,7 +114,7 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:130:21\n    |\n LL |     let foo = make_foo();\n-   |         --- consider changing this to `mut foo`\n+   |         --- help: make this binding mutable: `mut foo`\n LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n "}, {"sha": "9f079b8cf98a9077da179b77a2f107f4cb6c7a7a", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable `Box` content `*a` as mutable\n   --> $DIR/borrowck-borrow-immut-deref-of-box-as-mut.rs:22:5\n    |\n LL |     let a: Box<_> = box A;\n-   |         - consider changing this to `mut a`\n+   |         - help: make this binding mutable: `mut a`\n LL |     a.foo();\n    |     ^ cannot borrow as mutable\n "}, {"sha": "2eeb4e433adf19ebc7428f43ac38ba4b6ee54a88", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.ast.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -5,7 +5,7 @@ LL |         x => {\n    |         -\n    |         |\n    |         first assignment to `x`\n-   |         consider changing this to `mut x`\n+   |         help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -16,7 +16,7 @@ LL |         E::Foo(x) => {\n    |                -\n    |                |\n    |                first assignment to `x`\n-   |                consider changing this to `mut x`\n+   |                help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -27,7 +27,7 @@ LL |         S { bar: x } => {\n    |                  -\n    |                  |\n    |                  first assignment to `x`\n-   |                  consider changing this to `mut x`\n+   |                  help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -38,7 +38,7 @@ LL |         (x,) => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          consider changing this to `mut x`\n+   |          help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -49,7 +49,7 @@ LL |         [x,_,_] => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          consider changing this to `mut x`\n+   |          help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "2eeb4e433adf19ebc7428f43ac38ba4b6ee54a88", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.mir.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -5,7 +5,7 @@ LL |         x => {\n    |         -\n    |         |\n    |         first assignment to `x`\n-   |         consider changing this to `mut x`\n+   |         help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -16,7 +16,7 @@ LL |         E::Foo(x) => {\n    |                -\n    |                |\n    |                first assignment to `x`\n-   |                consider changing this to `mut x`\n+   |                help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -27,7 +27,7 @@ LL |         S { bar: x } => {\n    |                  -\n    |                  |\n    |                  first assignment to `x`\n-   |                  consider changing this to `mut x`\n+   |                  help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -38,7 +38,7 @@ LL |         (x,) => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          consider changing this to `mut x`\n+   |          help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -49,7 +49,7 @@ LL |         [x,_,_] => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          consider changing this to `mut x`\n+   |          help: make this binding mutable: `mut x`\n LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n    |             ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "c073db2917a80a22bd759c3aefd0fc2a50c0953f", "filename": "src/test/ui/borrowck/borrowck-mut-addr-of-imm-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/borrowck-mut-addr-of-imm-var.rs:13:30\n    |\n LL |     let x: isize = 3;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     let y: &mut isize = &mut x; //~ ERROR cannot borrow\n    |                              ^ cannot borrow mutably\n "}, {"sha": "51b8ae83c6147e317ec6e97719dddfd9773d09ed", "filename": "src/test/ui/borrowck/borrowck-mut-slice-of-imm-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `v` as mutable\n   --> $DIR/borrowck-mut-slice-of-imm-vec.rs:17:16\n    |\n LL |     let v = vec![1, 2, 3];\n-   |         - consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n LL |     write(&mut v); //~ ERROR cannot borrow\n    |                ^ cannot borrow mutably\n "}, {"sha": "fa2473adc2ffd14a5a5617b9b8772953bbae8140", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -12,7 +12,7 @@ error[E0596]: cannot borrow immutable local variable `s` as mutable\n   --> $DIR/borrowck-overloaded-call.rs:77:5\n    |\n LL |     let s = SFnMut {\n-   |         - consider changing this to `mut s`\n+   |         - help: make this binding mutable: `mut s`\n ...\n LL |     s(3);   //~ ERROR cannot borrow immutable local variable `s` as mutable\n    |     ^ cannot borrow mutably"}, {"sha": "520992096b5bc50e167a2da5c9fb624318d9d12d", "filename": "src/test/ui/borrowck/borrowck-ref-mut-of-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow field `(x as std::prelude::v1::Some).0` of immutable\n   --> $DIR/borrowck-ref-mut-of-imm.rs:14:12\n    |\n LL | fn destructure(x: Option<isize>) -> isize {\n-   |                - consider changing this to `mut x`\n+   |                - help: make this binding mutable: `mut x`\n ...\n LL |       Some(ref mut v) => *v //~ ERROR cannot borrow\n    |            ^^^^^^^^^ cannot mutably borrow field of immutable binding"}, {"sha": "0c067c47004cfbe03b19236b070605bf20b7a75e", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -12,7 +12,7 @@ error[E0596]: cannot borrow immutable argument `f` as mutable\n   --> $DIR/borrowck-unboxed-closures.rs:17:5\n    |\n LL | fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n-   |                                      - consider changing this to `mut f`\n+   |                                      - help: make this binding mutable: `mut f`\n LL |     f(1, 2);    //~ ERROR cannot borrow immutable argument\n    |     ^ cannot borrow mutably\n "}, {"sha": "06ae5cdbcc63bac03f2e400fb818206c92d54b85", "filename": "src/test/ui/borrowck/immutable-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -10,7 +10,7 @@ error[E0384]: cannot assign to immutable argument `_x` (Mir)\n   --> $DIR/immutable-arg.rs:14:5\n    |\n LL | fn foo(_x: u32) {\n-   |        -- consider changing this to `mut _x`\n+   |        -- help: make this binding mutable: `mut _x`\n LL |     _x = 4;\n    |     ^^^^^^ cannot assign to immutable argument\n "}, {"sha": "5013f877e7ecb19ea72d9eb1b329d8e05b613f4d", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -230,15 +230,15 @@ error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/mutability-errors.rs:64:10\n    |\n LL | fn imm_local(x: (i32,)) {\n-   |              - consider changing this to `mut x`\n+   |              - help: make this binding mutable: `mut x`\n LL |     &mut x; //~ ERROR\n    |          ^ cannot borrow mutably\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:65:10\n    |\n LL | fn imm_local(x: (i32,)) {\n-   |              - consider changing this to `mut x`\n+   |              - help: make this binding mutable: `mut x`\n LL |     &mut x; //~ ERROR\n LL |     &mut x.0; //~ ERROR\n    |          ^^^ cannot mutably borrow field of immutable binding\n@@ -247,7 +247,7 @@ error[E0595]: closure cannot assign to immutable argument `x`\n   --> $DIR/mutability-errors.rs:69:5\n    |\n LL | fn imm_capture(x: (i32,)) {\n-   |                - consider changing this to `mut x`\n+   |                - help: make this binding mutable: `mut x`\n LL |     || { //~ ERROR\n    |     ^^ cannot borrow mutably\n "}, {"sha": "d16c0a5e37b8f9eba933bbb2e9ee6e2b33d02f52", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,15 +2,15 @@ error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields.rs:17:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.1` of immutable binding\n   --> $DIR/reassignment_immutable_fields.rs:18:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n LL |     x.1 = 22; //~ ERROR\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n@@ -31,15 +31,15 @@ error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields.rs:25:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.1` of immutable binding\n   --> $DIR/reassignment_immutable_fields.rs:26:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n LL |     x.1 = 22; //~ ERROR\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding"}, {"sha": "b0b351889b79abd1b02059e35433d07525e092a7", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,15 +2,15 @@ error[E0594]: cannot assign to field `x.a` of immutable binding\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:22:5\n    |\n LL |     let x: Foo;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.a = 1;  //~ ERROR\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.b` of immutable binding\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:23:5\n    |\n LL |     let x: Foo;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.a = 1;  //~ ERROR\n LL |     x.b = 22; //~ ERROR\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding"}, {"sha": "65dff51059cefed5fb1e1ad7cd904b46e3849409", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields_twice.rs:17:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x = (22, 44);\n LL |     x.0 = 1; //~ ERROR\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n@@ -11,15 +11,15 @@ error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields_twice.rs:22:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields_twice.rs:23:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n LL |     x.0 = 22; //~ ERROR\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n@@ -28,7 +28,7 @@ error[E0594]: cannot assign to field `x.1` of immutable binding\n   --> $DIR/reassignment_immutable_fields_twice.rs:24:5\n    |\n LL |     let x: (u32, u32);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |     x.1 = 44; //~ ERROR\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding"}, {"sha": "42eb1e9cb2193a2f46b4ccc44df4a240753cf07e", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/huge_multispan_highlight.rs:100:18\n    |\n LL |     let x = \"foo\";\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |     let y = &mut x; //~ ERROR cannot borrow\n    |                  ^ cannot borrow mutably"}, {"sha": "6273ba33e167b3ed7a2405e7587631814cc3da5b", "filename": "src/test/ui/command-line-diagnostics.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -5,7 +5,7 @@ LL |     let x = 42;\n    |         -\n    |         |\n    |         first assignment to `x`\n-   |         consider changing this to `mut x`\n+   |         help: make this binding mutable: `mut x`\n LL |     x = 43;\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "591c3a0df0366792ccbd075ac7e926697dc99f67", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,23 +2,23 @@ error[E0596]: cannot borrow field `f.v` of immutable binding as mutable\n   --> $DIR/issue-35937.rs:17:5\n    |\n LL |     let f = Foo { v: Vec::new() };\n-   |         - consider changing this to `mut f`\n+   |         - help: make this binding mutable: `mut f`\n LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `s.x` of immutable binding\n   --> $DIR/issue-35937.rs:26:5\n    |\n LL |     let s = S { x: 42 };\n-   |         - consider changing this to `mut s`\n+   |         - help: make this binding mutable: `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `s.x` of immutable binding\n   --> $DIR/issue-35937.rs:30:5\n    |\n LL | fn bar(s: S) {\n-   |        - consider changing this to `mut s`\n+   |        - help: make this binding mutable: `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n "}, {"sha": "7cf2ca720ef11bfb15dda7c50ead123b7e5f0d22", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow field `z.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:21:18\n    |\n LL |     let z = Z { x: X::Y };\n-   |         - consider changing this to `mut z`\n+   |         - help: make this binding mutable: `mut z`\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow field of immutable binding\n \n@@ -77,7 +77,7 @@ error[E0596]: cannot borrow field `z.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:51:18\n    |\n LL | pub fn with_arg(z: Z, w: &Z) {\n-   |                 - consider changing this to `mut z`\n+   |                 - help: make this binding mutable: `mut z`\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow field of immutable binding\n "}, {"sha": "7b2061950f3dea16a9212eb3a338c04feb7e5b6b", "filename": "src/test/ui/immut-function-arguments.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to immutable `Box` content `*y`\n   --> $DIR/immut-function-arguments.rs:15:5\n    |\n LL | fn f(y: Box<isize>) {\n-   |      - consider changing this to `mut y`\n+   |      - help: make this binding mutable: `mut y`\n LL |     *y = 5; //[ast]~ ERROR cannot assign\n    |     ^^^^^^ cannot borrow as mutable\n \n@@ -12,7 +12,7 @@ error[E0594]: cannot assign to immutable `Box` content `*q`\n LL |     let _frob = |q: Box<isize>| { *q = 2; }; //[ast]~ ERROR cannot assign\n    |                  -                ^^^^^^ cannot borrow as mutable\n    |                  |\n-   |                  consider changing this to `mut q`\n+   |                  help: make this binding mutable: `mut q`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b0aadf3a51467c5bbd03dcc5a07e81741afcb16b", "filename": "src/test/ui/issues/issue-36400.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-36400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-36400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36400.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable `Box` content `*x` as mutable\n   --> $DIR/issue-36400.rs:15:12\n    |\n LL |     let x = Box::new(3);\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n LL |     f(&mut *x); //~ ERROR cannot borrow immutable\n    |            ^^ cannot borrow as mutable\n "}, {"sha": "3c7e92e2bc9ca6acbb7448a07debdef3d8a62043", "filename": "src/test/ui/issues/issue-45199.ast.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,33 +1,33 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:19:5\n+  --> $DIR/issue-45199.rs:20:5\n    |\n LL |     let b: Box<isize>;\n-   |         - consider changing this to `mut b`\n-LL |     //[mir]~^ NOTE consider changing this to `mut b`\n+   |         - help: make this binding mutable: `mut b`\n+...\n LL |     b = Box::new(1);    //[ast]~ NOTE first assignment\n    |     - first assignment to `b`\n LL |                         //[mir]~^ NOTE first assignment\n LL |     b = Box::new(2);    //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:29:5\n+  --> $DIR/issue-45199.rs:31:5\n    |\n LL |     let b = Box::new(1);    //[ast]~ NOTE first assignment\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         consider changing this to `mut b`\n+   |         help: make this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2);        //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign to immutable argument `b`\n-  --> $DIR/issue-45199.rs:37:5\n+  --> $DIR/issue-45199.rs:40:5\n    |\n LL | fn test_args(b: Box<i32>) {  //[ast]~ NOTE first assignment\n-   |              - consider changing this to `mut b`\n-LL |                                 //[mir]~^ NOTE consider changing this to `mut b`\n+   |              - help: make this binding mutable: `mut b`\n+...\n LL |     b = Box::new(2);            //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign to immutable argument\n "}, {"sha": "cf8ceacca57ae54febb587f9a9a02194621fc26a", "filename": "src/test/ui/issues/issue-45199.ast.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:19:5\n+  --> $DIR/issue-45199.rs:20:5\n    |\n LL |     b = Box::new(1);    //[ast]~ NOTE first assignment\n    |     --------------- first assignment to `b`\n@@ -8,7 +8,7 @@ LL |     b = Box::new(2);    //[ast]~ ERROR cannot assign twice to immutable var\n    |     ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:29:5\n+  --> $DIR/issue-45199.rs:31:5\n    |\n LL |     let b = Box::new(1);    //[ast]~ NOTE first assignment\n    |         - first assignment to `b`\n@@ -17,11 +17,11 @@ LL |     b = Box::new(2);        //[ast]~ ERROR cannot assign twice to immutable\n    |     ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:37:5\n+  --> $DIR/issue-45199.rs:40:5\n    |\n LL | fn test_args(b: Box<i32>) {  //[ast]~ NOTE first assignment\n    |              - first assignment to `b`\n-LL |                                 //[mir]~^ NOTE consider changing this to `mut b`\n+...\n LL |     b = Box::new(2);            //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "3c7e92e2bc9ca6acbb7448a07debdef3d8a62043", "filename": "src/test/ui/issues/issue-45199.mir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45199.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,33 +1,33 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:19:5\n+  --> $DIR/issue-45199.rs:20:5\n    |\n LL |     let b: Box<isize>;\n-   |         - consider changing this to `mut b`\n-LL |     //[mir]~^ NOTE consider changing this to `mut b`\n+   |         - help: make this binding mutable: `mut b`\n+...\n LL |     b = Box::new(1);    //[ast]~ NOTE first assignment\n    |     - first assignment to `b`\n LL |                         //[mir]~^ NOTE first assignment\n LL |     b = Box::new(2);    //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:29:5\n+  --> $DIR/issue-45199.rs:31:5\n    |\n LL |     let b = Box::new(1);    //[ast]~ NOTE first assignment\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         consider changing this to `mut b`\n+   |         help: make this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2);        //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign to immutable argument `b`\n-  --> $DIR/issue-45199.rs:37:5\n+  --> $DIR/issue-45199.rs:40:5\n    |\n LL | fn test_args(b: Box<i32>) {  //[ast]~ NOTE first assignment\n-   |              - consider changing this to `mut b`\n-LL |                                 //[mir]~^ NOTE consider changing this to `mut b`\n+   |              - help: make this binding mutable: `mut b`\n+...\n LL |     b = Box::new(2);            //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign to immutable argument\n "}, {"sha": "90a4960cb63f71635334a26ceaac877f4b55cbc2", "filename": "src/test/ui/issues/issue-45199.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-45199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45199.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -13,7 +13,8 @@\n \n fn test_drop_replace() {\n     let b: Box<isize>;\n-    //[mir]~^ NOTE consider changing this to `mut b`\n+    //[mir]~^ HELP make this binding mutable\n+    //[mir]~| SUGGESTION mut b\n     b = Box::new(1);    //[ast]~ NOTE first assignment\n                         //[mir]~^ NOTE first assignment\n     b = Box::new(2);    //[ast]~ ERROR cannot assign twice to immutable variable\n@@ -25,15 +26,17 @@ fn test_drop_replace() {\n fn test_call() {\n     let b = Box::new(1);    //[ast]~ NOTE first assignment\n                             //[mir]~^ NOTE first assignment\n-                            //[mir]~| NOTE consider changing this to `mut b`\n+                            //[mir]~| HELP make this binding mutable\n+                            //[mir]~| SUGGESTION mut b\n     b = Box::new(2);        //[ast]~ ERROR cannot assign twice to immutable variable\n                             //[mir]~^ ERROR cannot assign twice to immutable variable `b`\n                             //[ast]~| NOTE cannot assign twice to immutable\n                             //[mir]~| NOTE cannot assign twice to immutable\n }\n \n fn test_args(b: Box<i32>) {  //[ast]~ NOTE first assignment\n-                                //[mir]~^ NOTE consider changing this to `mut b`\n+                                //[mir]~^ HELP make this binding mutable\n+                                //[mir]~| SUGGESTION mut b\n     b = Box::new(2);            //[ast]~ ERROR cannot assign twice to immutable variable\n                                 //[mir]~^ ERROR cannot assign to immutable argument `b`\n                                 //[ast]~| NOTE cannot assign twice to immutable"}, {"sha": "5ea18af7c68001cb39c15ff7874b4ce8eb02c510", "filename": "src/test/ui/issues/issue-5500-1.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to field `_iter.node` of immutable binding\n   --> $DIR/issue-5500-1.rs:22:5\n    |\n LL |       let _iter = TrieMapIterator{node: &a};\n-   |           ----- consider changing this to `mut _iter`\n+   |           ----- help: make this binding mutable: `mut _iter`\n LL | /     _iter.node = & //[ast]~ ERROR cannot assign to field `_iter.node` of immutable binding\n LL | |                    //[mir]~^ ERROR cannot assign to field `_iter.node` of immutable binding (Ast)\n LL | |                    // MIR doesn't generate an error because the code isn't reachable. This is OK"}, {"sha": "5cb72794961d1ae24e6b28cde055eb2bdc8b9a70", "filename": "src/test/ui/issues/issue-5500-1.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to field `_iter.node` of immutable binding (Ast)\n   --> $DIR/issue-5500-1.rs:22:5\n    |\n LL |       let _iter = TrieMapIterator{node: &a};\n-   |           ----- consider changing this to `mut _iter`\n+   |           ----- help: make this binding mutable: `mut _iter`\n LL | /     _iter.node = & //[ast]~ ERROR cannot assign to field `_iter.node` of immutable binding\n LL | |                    //[mir]~^ ERROR cannot assign to field `_iter.node` of immutable binding (Ast)\n LL | |                    // MIR doesn't generate an error because the code isn't reachable. This is OK"}, {"sha": "1a5f788e1436816a5113c878771e50d5a0373eeb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -12,7 +12,7 @@ error[E0384]: cannot assign to immutable argument `y`\n   --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n-   |                    - consider changing this to `mut y`\n+   |                    - help: make this binding mutable: `mut y`\n LL |     y = x.b; //~ ERROR lifetime mismatch\n    |     ^^^^^^^ cannot assign to immutable argument\n "}, {"sha": "fd3ae53d6eda5a9fd28296827ffcdf2b2e8732a2", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -33,7 +33,7 @@ error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n   --> $DIR/liveness-assign-imm-local-notes.rs:23:9\n    |\n LL |     let x;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |         x = 2;\n    |         ----- first assignment to `x`\n@@ -44,7 +44,7 @@ error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n   --> $DIR/liveness-assign-imm-local-notes.rs:35:13\n    |\n LL |         let x;\n-   |             - consider changing this to `mut x`\n+   |             - help: make this binding mutable: `mut x`\n ...\n LL |             x = 2;\n    |             ----- first assignment to `x`\n@@ -55,7 +55,7 @@ error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n   --> $DIR/liveness-assign-imm-local-notes.rs:45:13\n    |\n LL |     let x;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;      //~ ERROR (Ast) [E0384]\n    |             ^^^^^ cannot assign twice to immutable variable\n@@ -64,7 +64,7 @@ error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n   --> $DIR/liveness-assign-imm-local-notes.rs:48:13\n    |\n LL |     let x;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;      //~ ERROR (Ast) [E0384]\n    |             ----- first assignment to `x`"}, {"sha": "b23225adbb4a0de61882189d14cdf2efcb80f19b", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,8 +1,8 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-in-loop.rs:18:9\n+  --> $DIR/liveness-assign-imm-local-in-loop.rs:19:9\n    |\n LL |     let v: isize;\n-   |         - consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n ...\n LL |         v = 1; //[ast]~ ERROR cannot assign twice to immutable variable\n    |         ^^^^^ cannot assign twice to immutable variable"}, {"sha": "54135ca78eaa8b3f4f52f7d09a4b71225bdf901e", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-in-loop.rs:18:9\n+  --> $DIR/liveness-assign-imm-local-in-loop.rs:19:9\n    |\n LL |         v = 1; //[ast]~ ERROR cannot assign twice to immutable variable\n    |         ^^^^^ cannot assign twice to immutable variable"}, {"sha": "b23225adbb4a0de61882189d14cdf2efcb80f19b", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,8 +1,8 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-in-loop.rs:18:9\n+  --> $DIR/liveness-assign-imm-local-in-loop.rs:19:9\n    |\n LL |     let v: isize;\n-   |         - consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n ...\n LL |         v = 1; //[ast]~ ERROR cannot assign twice to immutable variable\n    |         ^^^^^ cannot assign twice to immutable variable"}, {"sha": "6f44d67e823dde94587447b0a802b31af7c8a238", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -13,7 +13,8 @@\n \n fn test() {\n     let v: isize;\n-    //[mir]~^ NOTE consider changing this to `mut v`\n+    //[mir]~^ HELP make this binding mutable\n+    //[mir]~| SUGGESTION mut v\n     loop {\n         v = 1; //[ast]~ ERROR cannot assign twice to immutable variable\n                //[mir]~^ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "3dabbcb816b01408d59101a494198aedf6ef7db3", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,9 +1,9 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-in-op-eq.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-in-op-eq.rs:20:5\n    |\n LL |     let v: isize;\n-   |         - consider changing this to `mut v`\n-LL |     //[mir]~^ NOTE consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n+...\n LL |     v = 2;  //[ast]~ NOTE first assignment\n    |     ----- first assignment to `v`\n LL |             //[mir]~^ NOTE first assignment"}, {"sha": "266fb63c7c775741e85dc008fe79693f103284db", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-in-op-eq.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-in-op-eq.rs:20:5\n    |\n LL |     v = 2;  //[ast]~ NOTE first assignment\n    |     ----- first assignment to `v`"}, {"sha": "3dabbcb816b01408d59101a494198aedf6ef7db3", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,9 +1,9 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-in-op-eq.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-in-op-eq.rs:20:5\n    |\n LL |     let v: isize;\n-   |         - consider changing this to `mut v`\n-LL |     //[mir]~^ NOTE consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n+...\n LL |     v = 2;  //[ast]~ NOTE first assignment\n    |     ----- first assignment to `v`\n LL |             //[mir]~^ NOTE first assignment"}, {"sha": "f585da8a3a5eaa54dd6530d7ac658b04b8c9580d", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -13,7 +13,8 @@\n \n fn test() {\n     let v: isize;\n-    //[mir]~^ NOTE consider changing this to `mut v`\n+    //[mir]~^ HELP make this binding mutable\n+    //[mir]~| SUGGESTION mut v\n     v = 2;  //[ast]~ NOTE first assignment\n             //[mir]~^ NOTE first assignment\n     v += 1; //[ast]~ ERROR cannot assign twice to immutable variable"}, {"sha": "4a2b3b5d5fe47a350d1be72a8445528d73040637", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,11 +1,11 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/liveness-assign-imm-local-with-drop.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-with-drop.rs:20:5\n    |\n LL |     let b = Box::new(1); //[ast]~ NOTE first assignment\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         consider changing this to `mut b`\n+   |         help: make this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2); //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign twice to immutable variable"}, {"sha": "94799d919ae8c67e06d893f423de69ce52e9b6eb", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/liveness-assign-imm-local-with-drop.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-with-drop.rs:20:5\n    |\n LL |     let b = Box::new(1); //[ast]~ NOTE first assignment\n    |         - first assignment to `b`"}, {"sha": "4a2b3b5d5fe47a350d1be72a8445528d73040637", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,11 +1,11 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/liveness-assign-imm-local-with-drop.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-with-drop.rs:20:5\n    |\n LL |     let b = Box::new(1); //[ast]~ NOTE first assignment\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         consider changing this to `mut b`\n+   |         help: make this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2); //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^ cannot assign twice to immutable variable"}, {"sha": "c32d2c4bb0f757084beb41c4442b1fe3b3d0a129", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -14,7 +14,8 @@\n fn test() {\n     let b = Box::new(1); //[ast]~ NOTE first assignment\n                          //[mir]~^ NOTE first assignment\n-                         //[mir]~| NOTE consider changing this to `mut b`\n+                         //[mir]~| HELP make this binding mutable\n+                         //[mir]~| SUGGESTION mut b\n     drop(b);\n     b = Box::new(2); //[ast]~ ERROR cannot assign twice to immutable variable\n                      //[mir]~^ ERROR cannot assign twice to immutable variable `b`"}, {"sha": "6137c9f5882d5b5fc2b962935fcdd465cae5bfdb", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,11 +1,11 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-with-init.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-with-init.rs:20:5\n    |\n LL |     let v: isize = 1; //[ast]~ NOTE first assignment\n    |         -\n    |         |\n    |         first assignment to `v`\n-   |         consider changing this to `mut v`\n+   |         help: make this binding mutable: `mut v`\n ...\n LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^^^^^ cannot assign twice to immutable variable"}, {"sha": "d48608684a25be1b9ff73f135100f0ab936c9e2e", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-with-init.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-with-init.rs:20:5\n    |\n LL |     let v: isize = 1; //[ast]~ NOTE first assignment\n    |         - first assignment to `v`"}, {"sha": "6137c9f5882d5b5fc2b962935fcdd465cae5bfdb", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,11 +1,11 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/liveness-assign-imm-local-with-init.rs:19:5\n+  --> $DIR/liveness-assign-imm-local-with-init.rs:20:5\n    |\n LL |     let v: isize = 1; //[ast]~ NOTE first assignment\n    |         -\n    |         |\n    |         first assignment to `v`\n-   |         consider changing this to `mut v`\n+   |         help: make this binding mutable: `mut v`\n ...\n LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^^^^^ cannot assign twice to immutable variable"}, {"sha": "158eb7d428cbc8b9ad4d13b801f1532311f2f9fb", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -14,7 +14,8 @@\n fn test() {\n     let v: isize = 1; //[ast]~ NOTE first assignment\n                       //[mir]~^ NOTE first assignment\n-                      //[mir]~| NOTE consider changing this to `mut v`\n+                      //[mir]~| HELP make this binding mutable\n+                      //[mir]~| SUGGESTION mut v\n     v.clone();\n     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n            //[mir]~^ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "d3ba6fc005ecc38ef331db7700510c3e501fbf71", "filename": "src/test/ui/macros/span-covering-argument-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `foo` as mutable\n   --> $DIR/span-covering-argument-1.rs:15:19\n    |\n LL |             let $s = 0;\n-   |                 -- consider changing this to `mut $s`\n+   |                 -- help: make this binding mutable: `mut $s`\n LL |             *&mut $s = 0;\n    |                   ^^ cannot borrow mutably\n ..."}, {"sha": "8b8414b8f1b740617ef03d85f41aad9ae2084277", "filename": "src/test/ui/mut/mut-pattern-internal-mutability.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -5,7 +5,7 @@ LL |     let &mut x = foo;\n    |              -\n    |              |\n    |              first assignment to `x`\n-   |              consider changing this to `mut x`\n+   |              help: make this binding mutable: `mut x`\n LL |     x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "8b8414b8f1b740617ef03d85f41aad9ae2084277", "filename": "src/test/ui/mut/mut-pattern-internal-mutability.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.mir.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -5,7 +5,7 @@ LL |     let &mut x = foo;\n    |              -\n    |              |\n    |              first assignment to `x`\n-   |              consider changing this to `mut x`\n+   |              help: make this binding mutable: `mut x`\n LL |     x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "9501294a5ab0defe8a06bf92131e320925863f09", "filename": "src/test/ui/mut/mut-suggestion.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.nll.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,18 +1,18 @@\n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-suggestion.rs:21:5\n+  --> $DIR/mut-suggestion.rs:22:5\n    |\n LL | fn func(arg: S) {\n    |         --- help: consider changing this to be mutable: `mut arg`\n-LL |     //~^ consider changing this to `mut arg`\n+...\n LL |     arg.mutate();\n    |     ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `local` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-suggestion.rs:29:5\n+  --> $DIR/mut-suggestion.rs:31:5\n    |\n LL |     let local = S;\n    |         ----- help: consider changing this to be mutable: `mut local`\n-LL |     //~^ consider changing this to `mut local`\n+...\n LL |     local.mutate();\n    |     ^^^^^ cannot borrow as mutable\n "}, {"sha": "af04927c713e9b974fb52d0fc97eaa43caa73f5c", "filename": "src/test/ui/mut/mut-suggestion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.rs?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -17,15 +17,17 @@ impl S {\n }\n \n fn func(arg: S) {\n-    //~^ consider changing this to `mut arg`\n+    //~^ HELP make this binding mutable\n+    //~| SUGGESTION mut arg\n     arg.mutate();\n     //~^ ERROR cannot borrow immutable argument\n     //~| cannot borrow mutably\n }\n \n fn main() {\n     let local = S;\n-    //~^ consider changing this to `mut local`\n+    //~^ HELP make this binding mutable\n+    //~| SUGGESTION mut local\n     local.mutate();\n     //~^ ERROR cannot borrow immutable local variable\n     //~| cannot borrow mutably"}, {"sha": "b4917887630e6f5d7b66a6b9d762ce0b01ffa4e4", "filename": "src/test/ui/mut/mut-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -1,18 +1,18 @@\n error[E0596]: cannot borrow immutable argument `arg` as mutable\n-  --> $DIR/mut-suggestion.rs:21:5\n+  --> $DIR/mut-suggestion.rs:22:5\n    |\n LL | fn func(arg: S) {\n-   |         --- consider changing this to `mut arg`\n-LL |     //~^ consider changing this to `mut arg`\n+   |         --- help: make this binding mutable: `mut arg`\n+...\n LL |     arg.mutate();\n    |     ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable local variable `local` as mutable\n-  --> $DIR/mut-suggestion.rs:29:5\n+  --> $DIR/mut-suggestion.rs:31:5\n    |\n LL |     let local = S;\n-   |         ----- consider changing this to `mut local`\n-LL |     //~^ consider changing this to `mut local`\n+   |         ----- help: make this binding mutable: `mut local`\n+...\n LL |     local.mutate();\n    |     ^^^^^ cannot borrow mutably\n "}, {"sha": "fc12e22815eff449a0a603f1abcd40f1428b3a3d", "filename": "src/test/ui/mut/mutable-class-fields.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to field `nyan.how_hungry` of immutable binding\n   --> $DIR/mutable-class-fields.rs:28:3\n    |\n LL |   let nyan : cat = cat(52, 99);\n-   |       ---- consider changing this to `mut nyan`\n+   |       ---- help: make this binding mutable: `mut nyan`\n LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n    |   ^^^^^^^^^^^^^^^^^^^ cannot mutably borrow field of immutable binding\n "}, {"sha": "d91ff6964237b2c65e5c116ec9b02b5463707b12", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:63:24\n    |\n LL | fn deref_mut_field1(x: Own<Point>) {\n-   |                     - consider changing this to `mut x`\n+   |                     - help: make this binding mutable: `mut x`\n LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n    |                        ^ cannot borrow mutably\n \n@@ -28,7 +28,7 @@ error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n    |\n LL | fn assign_field1<'a>(x: Own<Point>) {\n-   |                      - consider changing this to `mut x`\n+   |                      - help: make this binding mutable: `mut x`\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ cannot borrow mutably\n \n@@ -54,7 +54,7 @@ error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n    |\n LL | fn deref_mut_method1(x: Own<Point>) {\n-   |                      - consider changing this to `mut x`\n+   |                      - help: make this binding mutable: `mut x`\n LL |     x.set(0, 0); //~ ERROR cannot borrow\n    |     ^ cannot borrow mutably\n \n@@ -70,7 +70,7 @@ error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:139:6\n    |\n LL | fn assign_method1<'a>(x: Own<Point>) {\n-   |                       - consider changing this to `mut x`\n+   |                       - help: make this binding mutable: `mut x`\n LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow mutably\n "}, {"sha": "62be8e0f73e30a842d5a86ba9b967614708ccd72", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:39:25\n    |\n LL | fn deref_mut1(x: Own<isize>) {\n-   |               - consider changing this to `mut x`\n+   |               - help: make this binding mutable: `mut x`\n LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n    |                         ^ cannot borrow mutably\n \n@@ -18,7 +18,7 @@ error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:59:6\n    |\n LL | fn assign1<'a>(x: Own<isize>) {\n-   |                - consider changing this to `mut x`\n+   |                - help: make this binding mutable: `mut x`\n LL |     *x = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow mutably\n "}, {"sha": "67ee911b381781a959777f2642ebc961a0a6b98f", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -11,7 +11,7 @@ error[E0596]: cannot borrow immutable `Box` content `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:29:5\n    |\n LL | fn owned_receiver(x: Box<Foo>) {\n-   |                   - consider changing this to `mut x`\n+   |                   - help: make this binding mutable: `mut x`\n LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable"}, {"sha": "0ba48545c600be108de0cb626b10bfbfa0f63e0b", "filename": "src/test/ui/unboxed-closures/unboxed-closure-immutable-capture.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0595]: closure cannot assign to immutable local variable `x`\n   --> $DIR/unboxed-closure-immutable-capture.rs:23:5\n    |\n LL |     let x = 0;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |     ^^ cannot borrow mutably\n@@ -11,7 +11,7 @@ error[E0595]: closure cannot assign to immutable local variable `x`\n   --> $DIR/unboxed-closure-immutable-capture.rs:25:5\n    |\n LL |     let x = 0;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |     ^^ cannot borrow mutably\n@@ -20,7 +20,7 @@ error[E0595]: closure cannot assign to immutable local variable `x`\n   --> $DIR/unboxed-closure-immutable-capture.rs:26:5\n    |\n LL |     let x = 0;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |     ^^ cannot borrow mutably\n@@ -29,7 +29,7 @@ error[E0595]: closure cannot assign to immutable local variable `x`\n   --> $DIR/unboxed-closure-immutable-capture.rs:28:5\n    |\n LL |     let x = 0;\n-   |         - consider changing this to `mut x`\n+   |         - help: make this binding mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |     ^^ cannot borrow mutably"}, {"sha": "4303b4c2f21b729cd7bfa5434d0d99ef61adcae7", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0595]: closure cannot assign to immutable local variable `tick1`\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:26:17\n    |\n LL |     let tick1 = || {\n-   |         ----- consider changing this to `mut tick1`\n+   |         ----- help: make this binding mutable: `mut tick1`\n ...\n LL |     let tick2 = || { //~ ERROR closure cannot assign to immutable local variable `tick1`\n    |                 ^^ cannot borrow mutably\n@@ -11,7 +11,7 @@ error[E0596]: cannot borrow immutable local variable `tick2` as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:30:5\n    |\n LL |     let tick2 = || { //~ ERROR closure cannot assign to immutable local variable `tick1`\n-   |         ----- consider changing this to `mut tick2`\n+   |         ----- help: make this binding mutable: `mut tick2`\n ...\n LL |     tick2(); //~ ERROR cannot borrow\n    |     ^^^^^ cannot borrow mutably"}, {"sha": "1930a929da1a0c3818d75c97f1d473d0663be6ff", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-missing-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `tick` as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-missing-mut.rs:17:5\n    |\n LL |     let tick = || counter += 1;\n-   |         ---- consider changing this to `mut tick`\n+   |         ---- help: make this binding mutable: `mut tick`\n LL |     tick(); //~ ERROR cannot borrow immutable local variable `tick` as mutable\n    |     ^^^^ cannot borrow mutably\n "}, {"sha": "9515fe502417a15eaf4f68621b8b067c9b69e333", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-move-missing-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `tick` as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-move-missing-mut.rs:17:5\n    |\n LL |     let tick = move || counter += 1;\n-   |         ---- consider changing this to `mut tick`\n+   |         ---- help: make this binding mutable: `mut tick`\n LL |     tick(); //~ ERROR cannot borrow immutable local variable `tick` as mutable\n    |     ^^^^ cannot borrow mutably\n "}, {"sha": "c0a7f3f0709bd37c2ceebcd0eae1caadd9ec6d32", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0595]: closure cannot assign to immutable local variable `n`\n   --> $DIR/unboxed-closures-mutate-upvar.rs:24:27\n    |\n LL |     let n = 0;\n-   |         - consider changing this to `mut n`\n+   |         - help: make this binding mutable: `mut n`\n LL |     let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign\n    |                           ^^ cannot borrow mutably\n "}, {"sha": "d1e09521dd8ac21cb465ec70d206b2ef469a46fc", "filename": "src/test/ui/writing-to-immutable-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dc5a0783560c97f3c42dafad25dcee9cf6d723/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.stderr?ref=32dc5a0783560c97f3c42dafad25dcee9cf6d723", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable local variable `v` as mutable\n   --> $DIR/writing-to-immutable-vec.rs:14:5\n    |\n LL |     let v: Vec<isize> = vec![1, 2, 3];\n-   |         - consider changing this to `mut v`\n+   |         - help: make this binding mutable: `mut v`\n LL |     v[1] = 4; //~ ERROR cannot borrow immutable local variable `v` as mutable\n    |     ^ cannot borrow mutably\n "}]}