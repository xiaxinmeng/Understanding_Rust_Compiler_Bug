{"sha": "b2625e24b95b5077a1ec59ad6ac667939eb6521f", "node_id": "C_kwDOAAsO6NoAKGIyNjI1ZTI0Yjk1YjUwNzdhMWVjNTlhZDZhYzY2NzkzOWViNjUyMWY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-21T02:36:11Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-21T02:36:11Z"}, "message": "fix nitpicks from review", "tree": {"sha": "f7c1bc6297c7cd912f6dd0fba4e0bee6e6841236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c1bc6297c7cd912f6dd0fba4e0bee6e6841236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2625e24b95b5077a1ec59ad6ac667939eb6521f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2625e24b95b5077a1ec59ad6ac667939eb6521f", "html_url": "https://github.com/rust-lang/rust/commit/b2625e24b95b5077a1ec59ad6ac667939eb6521f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2625e24b95b5077a1ec59ad6ac667939eb6521f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba393465f262c68e7a2972ea18bc5547cf61340", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba393465f262c68e7a2972ea18bc5547cf61340", "html_url": "https://github.com/rust-lang/rust/commit/3ba393465f262c68e7a2972ea18bc5547cf61340"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "3d7b875eac15d1f6756e240f07a7cb484cfc8da7", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2625e24b95b5077a1ec59ad6ac667939eb6521f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2625e24b95b5077a1ec59ad6ac667939eb6521f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=b2625e24b95b5077a1ec59ad6ac667939eb6521f", "patch": "@@ -2209,7 +2209,7 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n ///     dst.reserve(src_len);\n ///\n ///     unsafe {\n-///         // The call to offset is always safe because `Vec` will never\n+///         // The call to add is always safe because `Vec` will never\n ///         // allocate more than `isize::MAX` bytes.\n ///         let dst_ptr = dst.as_mut_ptr().add(dst_len);\n ///         let src_ptr = src.as_ptr();"}, {"sha": "3c96290fc537e19bbe1e2b400a5eabf13ece5a0c", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2625e24b95b5077a1ec59ad6ac667939eb6521f/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2625e24b95b5077a1ec59ad6ac667939eb6521f/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=b2625e24b95b5077a1ec59ad6ac667939eb6521f", "patch": "@@ -1554,7 +1554,7 @@ impl<T> AtomicPtr<T> {\n     /// Offsets the pointer's address by adding `val` *bytes*, returning the\n     /// previous pointer.\n     ///\n-    /// This is equivalent to using [`wrapping_add`] and [`cast`] to atomically\n+    /// This is equivalent to using [`wrapping_byte_add`] to atomically\n     /// perform `ptr = ptr.wrapping_byte_add(val)`.\n     ///\n     /// `fetch_byte_add` takes an [`Ordering`] argument which describes the\n@@ -1565,8 +1565,7 @@ impl<T> AtomicPtr<T> {\n     /// **Note**: This method is only available on platforms that support atomic\n     /// operations on [`AtomicPtr`].\n     ///\n-    /// [`wrapping_add`]: pointer::wrapping_add\n-    /// [`cast`]: pointer::cast\n+    /// [`wrapping_byte_add`]: pointer::wrapping_byte_add\n     ///\n     /// # Examples\n     ///\n@@ -1591,7 +1590,7 @@ impl<T> AtomicPtr<T> {\n     /// Offsets the pointer's address by subtracting `val` *bytes*, returning the\n     /// previous pointer.\n     ///\n-    /// This is equivalent to using [`wrapping_sub`] and [`cast`] to atomically\n+    /// This is equivalent to using [`wrapping_byte_sub`] to atomically\n     /// perform `ptr = ptr.wrapping_byte_sub(val)`.\n     ///\n     /// `fetch_byte_sub` takes an [`Ordering`] argument which describes the\n@@ -1602,8 +1601,7 @@ impl<T> AtomicPtr<T> {\n     /// **Note**: This method is only available on platforms that support atomic\n     /// operations on [`AtomicPtr`].\n     ///\n-    /// [`wrapping_sub`]: pointer::wrapping_sub\n-    /// [`cast`]: pointer::cast\n+    /// [`wrapping_byte_sub`]: pointer::wrapping_byte_sub\n     ///\n     /// # Examples\n     ///"}]}