{"sha": "64b76241417536eed000a5b3b2f95ec096f9574a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Yjc2MjQxNDE3NTM2ZWVkMDAwYTViM2IyZjk1ZWMwOTZmOTU3NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-09T19:51:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-09T19:51:13Z"}, "message": "Auto merge of #5292 - jpospychala:map-placeholder, r=flip1995\n\nImprove placeholder in map_unit_fn\n\nInstead of using `_` as a default placeholder use `a`.\n\nfixes #5180\nchangelog: Improve default placeholder in map_unit_fn", "tree": {"sha": "00595ea2c6f7d7d9a10cacaf8eb306f0c9bb6cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00595ea2c6f7d7d9a10cacaf8eb306f0c9bb6cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64b76241417536eed000a5b3b2f95ec096f9574a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64b76241417536eed000a5b3b2f95ec096f9574a", "html_url": "https://github.com/rust-lang/rust/commit/64b76241417536eed000a5b3b2f95ec096f9574a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64b76241417536eed000a5b3b2f95ec096f9574a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8f64b6eba7fa402a8c5623cdb915a6bd6b3489e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f64b6eba7fa402a8c5623cdb915a6bd6b3489e", "html_url": "https://github.com/rust-lang/rust/commit/d8f64b6eba7fa402a8c5623cdb915a6bd6b3489e"}, {"sha": "697e3c89a7a78d1615e714c3a83073c362e9aa3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/697e3c89a7a78d1615e714c3a83073c362e9aa3c", "html_url": "https://github.com/rust-lang/rust/commit/697e3c89a7a78d1615e714c3a83073c362e9aa3c"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "d7ea022d88867b66da6edfc8f6cba972c80a89d9", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b76241417536eed000a5b3b2f95ec096f9574a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b76241417536eed000a5b3b2f95ec096f9574a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=64b76241417536eed000a5b3b2f95ec096f9574a", "patch": "@@ -186,12 +186,12 @@ fn unit_closure<'a, 'tcx>(\n /// `x.field` => `x_field`\n /// `y` => `_y`\n ///\n-/// Anything else will return `_`.\n+/// Anything else will return `a`.\n fn let_binding_name(cx: &LateContext<'_, '_>, var_arg: &hir::Expr<'_>) -> String {\n     match &var_arg.kind {\n         hir::ExprKind::Field(_, _) => snippet(cx, var_arg.span, \"_\").replace(\".\", \"_\"),\n         hir::ExprKind::Path(_) => format!(\"_{}\", snippet(cx, var_arg.span, \"\")),\n-        _ => \"_\".to_string(),\n+        _ => \"a\".to_string(),\n     }\n }\n "}, {"sha": "9a0da404cb6dbbbb65aa13f54fbd14587ccf149d", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b76241417536eed000a5b3b2f95ec096f9574a/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/64b76241417536eed000a5b3b2f95ec096f9574a/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=64b76241417536eed000a5b3b2f95ec096f9574a", "patch": "@@ -13,6 +13,10 @@ fn plus_one(value: usize) -> usize {\n     value + 1\n }\n \n+fn option() -> Option<usize> {\n+    Some(10)\n+}\n+\n struct HasOption {\n     field: Option<usize>,\n }\n@@ -73,6 +77,8 @@ fn option_map_unit_fn() {\n     if let Some(value) = x.field { plus_one(value + captured); }\n \n \n-    if let Some(ref value) = x.field { do_nothing(value + captured) }}\n+    if let Some(ref value) = x.field { do_nothing(value + captured) }\n+\n+    if let Some(a) = option() { do_nothing(a) }}\n \n fn main() {}"}, {"sha": "58041b62df35a6b564e1850be6782d8d50ce2808", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b76241417536eed000a5b3b2f95ec096f9574a/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b76241417536eed000a5b3b2f95ec096f9574a/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=64b76241417536eed000a5b3b2f95ec096f9574a", "patch": "@@ -13,6 +13,10 @@ fn plus_one(value: usize) -> usize {\n     value + 1\n }\n \n+fn option() -> Option<usize> {\n+    Some(10)\n+}\n+\n struct HasOption {\n     field: Option<usize>,\n }\n@@ -73,6 +77,8 @@ fn option_map_unit_fn() {\n     x.field.map(|value| { { plus_one(value + captured); } });\n \n \n-    x.field.map(|ref value| { do_nothing(value + captured) });}\n+    x.field.map(|ref value| { do_nothing(value + captured) });\n+\n+    option().map(do_nothing);}\n \n fn main() {}"}, {"sha": "1312c70b6d5929be6678ec97af153c78f7da93e1", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/64b76241417536eed000a5b3b2f95ec096f9574a/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64b76241417536eed000a5b3b2f95ec096f9574a/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=64b76241417536eed000a5b3b2f95ec096f9574a", "patch": "@@ -1,5 +1,5 @@\n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:34:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -9,132 +9,140 @@ LL |     x.field.map(do_nothing);\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:36:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:40:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:38:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:42:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:44:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:48:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:46:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:49:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:51:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:57:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:55:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:58:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:60:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:66:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:64:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:68:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:69:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:71:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:75:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:73:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n-  --> $DIR/option_map_unit_fn_fixable.rs:76:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:80:5\n    |\n-LL |     x.field.map(|ref value| { do_nothing(value + captured) });}\n+LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: aborting due to 17 previous errors\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+  --> $DIR/option_map_unit_fn_fixable.rs:82:5\n+   |\n+LL |     option().map(do_nothing);}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(a) = option() { do_nothing(a) }`\n+\n+error: aborting due to 18 previous errors\n "}]}