{"sha": "9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NjlhY2MzYTM2Y2YzMmJhYzVhZWE5MmM4OGYwZDZhMDEyMTJmMWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-07T09:27:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-07T09:27:49Z"}, "message": "Merge remote-tracking branch 'origin/master' into the_outer_limits", "tree": {"sha": "ce2dde46112ca0ff63bf0d9d78beb3073a8ff6e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2dde46112ca0ff63bf0d9d78beb3073a8ff6e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXfiCYAAoJEFbW7qD8Z6xGAbsQAJ4d1sMzi0CvppDmqBpQyfF4\ndiZq/6DHCLkWJ+iEqRY0g0CEfIsYfQEtr3/xT6R9H3rf/yjKDfIktVmWLBGB3cPs\nHsqyoJ1K5OiPWivYBMtIs1w6qj9Sg34IdFfLVKDGAq6dzPSoJWjybukIov/cb768\n9qkm1D7W94IaHnWE15PppwgmKTOH+YJxkP/jsnGqgfU3QxUzsv5Bhr8mfgDZZMvW\nVShHkdddt/D1HoDyJ9Ej9YpB8jcKJNiqRQp3qrTZbUNXNC8+pwl4AD83b2vbC8Ek\nuSV0i5eRlCyKY0dFJc+ZnsrekVkxxG7oy+q1Qbha3pZjTYSpEAAT1srDULZuVLBS\n53EyLZovi0Z6RFcUKj3V9lWwN1Xc0VsmM+hebbKSB1o/OXoKIB+KZ3N0AAVtoV7J\n4+IdZtlE5+7w58RGx+rRXfegMj6biV57l0vEeYj9hoK5Ogdy5rLHZ/nXKgR3bo2O\n6DfSGOdbaJ2RWZTI3b5YpOsTdk2MuakWjifoCKyK4W5J/LpLOn9jgElcGcJZrnvJ\nlA5AplpHu2RjQBl9RBW/G3hEyygVt4g2vceCNJA6opuq3Bh00l3dyAmAHfuTCdmo\nLipcHZc6pDCGbdBA9glJdaMc3YZPbaBXjVSe9VKVp1cuCSDZDTVZcB2CRfsXf19E\nFZyI58nb+l/DWxAUR5Dt\n=15es\n-----END PGP SIGNATURE-----", "payload": "tree ce2dde46112ca0ff63bf0d9d78beb3073a8ff6e1\nparent 5381981446320107536a6058e20f2e52283dd8c5\nparent f4afb59e8afa2134cd7ad7bb62fd77a13af68897\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467883669 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467883669 +0200\n\nMerge remote-tracking branch 'origin/master' into the_outer_limits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "html_url": "https://github.com/rust-lang/rust/commit/9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5381981446320107536a6058e20f2e52283dd8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5381981446320107536a6058e20f2e52283dd8c5", "html_url": "https://github.com/rust-lang/rust/commit/5381981446320107536a6058e20f2e52283dd8c5"}, {"sha": "f4afb59e8afa2134cd7ad7bb62fd77a13af68897", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4afb59e8afa2134cd7ad7bb62fd77a13af68897", "html_url": "https://github.com/rust-lang/rust/commit/f4afb59e8afa2134cd7ad7bb62fd77a13af68897"}], "stats": {"total": 117, "additions": 114, "deletions": 3}, "files": [{"sha": "7bef32b1d561829b30696fed8f2d82c3d8c41c84", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "patch": "@@ -173,7 +173,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     // TODO(solson): Try making const_to_primval instead.\n     fn const_to_ptr(&mut self, const_val: &const_val::ConstVal) -> EvalResult<'tcx, Pointer> {\n         use rustc::middle::const_val::ConstVal::*;\n-        use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n+        use rustc_const_math::{ConstInt, ConstIsize, ConstUsize, ConstFloat};\n         macro_rules! i2p {\n             ($i:ident, $n:expr) => {{\n                 let ptr = self.memory.allocate($n)?;\n@@ -182,7 +182,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }}\n         }\n         match *const_val {\n-            Float(_f) => unimplemented!(),\n+            Float(ConstFloat::F32(f)) => {\n+                let ptr = self.memory.allocate(4);\n+                self.memory.write_f32(ptr, f)?;\n+                Ok(ptr)\n+            },\n+            Float(ConstFloat::F64(f)) => {\n+                let ptr = self.memory.allocate(8);\n+                self.memory.write_f64(ptr, f)?;\n+                Ok(ptr)\n+            },\n+            Float(ConstFloat::FInfer{..}) => unreachable!(),\n             Integral(ConstInt::Infer(_)) => unreachable!(),\n             Integral(ConstInt::InferSigned(_)) => unreachable!(),\n             Integral(ConstInt::I8(i)) => i2p!(i, 1),\n@@ -838,7 +848,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub fn read_primval(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n-        use syntax::ast::{IntTy, UintTy};\n+        use syntax::ast::{IntTy, UintTy, FloatTy};\n         let val = match (self.memory.pointer_size(), &ty.sty) {\n             (_, &ty::TyBool)              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n             (_, &ty::TyChar)              => {\n@@ -863,6 +873,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             (8, &ty::TyUint(UintTy::Us)) |\n             (_, &ty::TyUint(UintTy::U64)) => PrimVal::U64(self.memory.read_uint(ptr, 8)? as u64),\n \n+            (_, &ty::TyFloat(FloatTy::F32)) => PrimVal::F32(self.memory.read_f32(ptr)?),\n+            (_, &ty::TyFloat(FloatTy::F64)) => PrimVal::F64(self.memory.read_f64(ptr)?),\n+\n             (_, &ty::TyFnDef(def_id, substs, fn_ty)) => {\n                 PrimVal::FnPtr(self.memory.create_fn_ptr(def_id, substs, fn_ty))\n             },"}, {"sha": "90725fdbba5764ce21ef36b1dbff492771637088", "filename": "src/memory.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "patch": "@@ -426,6 +426,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n             PrimVal::Char(c) => self.write_uint(ptr, c as u64, 4),\n             PrimVal::IntegerPtr(n) => self.write_uint(ptr, n as u64, pointer_size),\n+            PrimVal::F32(f) => self.write_f32(ptr, f),\n+            PrimVal::F64(f) => self.write_f64(ptr, f),\n             PrimVal::FnPtr(_p) |\n             PrimVal::AbstractPtr(_p) => unimplemented!(),\n         }\n@@ -483,6 +485,28 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let size = self.pointer_size();\n         self.write_uint(ptr, n, size)\n     }\n+\n+    pub fn write_f32(&mut self, ptr: Pointer, f: f32) -> EvalResult<'tcx, ()> {\n+        let endianess = self.endianess();\n+        let b = self.get_bytes_mut(ptr, 4)?;\n+        write_target_f32(endianess, b, f).unwrap();\n+        Ok(())\n+    }\n+\n+    pub fn write_f64(&mut self, ptr: Pointer, f: f64) -> EvalResult<'tcx, ()> {\n+        let endianess = self.endianess();\n+        let b = self.get_bytes_mut(ptr, 8)?;\n+        write_target_f64(endianess, b, f).unwrap();\n+        Ok(())\n+    }\n+\n+    pub fn read_f32(&self, ptr: Pointer) -> EvalResult<'tcx, f32> {\n+        self.get_bytes(ptr, 4).map(|b| read_target_f32(self.endianess(), b).unwrap())\n+    }\n+\n+    pub fn read_f64(&self, ptr: Pointer) -> EvalResult<'tcx, f64> {\n+        self.get_bytes(ptr, 8).map(|b| read_target_f64(self.endianess(), b).unwrap())\n+    }\n }\n \n /// Relocations\n@@ -605,6 +629,36 @@ fn read_target_int(endianess: layout::Endian, mut source: &[u8]) -> Result<i64,\n     }\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Methods to access floats in the target endianess\n+////////////////////////////////////////////////////////////////////////////////\n+\n+fn write_target_f32(endianess: layout::Endian, mut target: &mut [u8], data: f32) -> Result<(), byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => target.write_f32::<LittleEndian>(data),\n+        layout::Endian::Big => target.write_f32::<BigEndian>(data),\n+    }\n+}\n+fn write_target_f64(endianess: layout::Endian, mut target: &mut [u8], data: f64) -> Result<(), byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => target.write_f64::<LittleEndian>(data),\n+        layout::Endian::Big => target.write_f64::<BigEndian>(data),\n+    }\n+}\n+\n+fn read_target_f32(endianess: layout::Endian, mut source: &[u8]) -> Result<f32, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_f32::<LittleEndian>(),\n+        layout::Endian::Big => source.read_f32::<BigEndian>(),\n+    }\n+}\n+fn read_target_f64(endianess: layout::Endian, mut source: &[u8]) -> Result<f64, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_f64::<LittleEndian>(),\n+        layout::Endian::Big => source.read_f64::<BigEndian>(),\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Undefined byte tracking\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "966196d8d1a5f65a3aa1e9d3a9fe6154bf57ef7a", "filename": "src/primval.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "patch": "@@ -13,6 +13,8 @@ pub enum PrimVal {\n     FnPtr(Pointer),\n     IntegerPtr(u64),\n     Char(char),\n+\n+    F32(f32), F64(f64),\n }\n \n /// returns the result of the operation and whether the operation overflowed\n@@ -57,6 +59,32 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         })\n     }\n \n+    macro_rules! float_binops {\n+        ($v:ident, $l:ident, $r:ident) => ({\n+            match bin_op {\n+                Add    => $v($l + $r),\n+                Sub    => $v($l - $r),\n+                Mul    => $v($l * $r),\n+                Div    => $v($l / $r),\n+                Rem    => $v($l % $r),\n+\n+                // invalid float ops\n+                BitXor => unreachable!(),\n+                BitAnd => unreachable!(),\n+                BitOr  => unreachable!(),\n+                Shl => unreachable!(),\n+                Shr => unreachable!(),\n+\n+                Eq => Bool($l == $r),\n+                Ne => Bool($l != $r),\n+                Lt => Bool($l < $r),\n+                Le => Bool($l <= $r),\n+                Gt => Bool($l > $r),\n+                Ge => Bool($l >= $r),\n+            }\n+        })\n+    }\n+\n     fn unrelated_ptr_ops<'tcx>(bin_op: mir::BinOp) -> EvalResult<'tcx, PrimVal> {\n         use rustc::mir::repr::BinOp::*;\n         match bin_op {\n@@ -128,6 +156,8 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         (U16(l), U16(r)) => int_binops!(U16, l, r),\n         (U32(l), U32(r)) => int_binops!(U32, l, r),\n         (U64(l), U64(r)) => int_binops!(U64, l, r),\n+        (F32(l), F32(r)) => float_binops!(F32, l, r),\n+        (F64(l), F64(r)) => float_binops!(F64, l, r),\n         (Char(l), Char(r)) => match bin_op {\n             Eq => Bool(l == r),\n             Ne => Bool(l != r),\n@@ -211,6 +241,9 @@ pub fn unary_op<'tcx>(un_op: mir::UnOp, val: PrimVal) -> EvalResult<'tcx, PrimVa\n         (Not, U16(n)) => Ok(U16(!n)),\n         (Not, U32(n)) => Ok(U32(!n)),\n         (Not, U64(n)) => Ok(U64(!n)),\n+\n+        (Neg, F64(n)) => Ok(F64(-n)),\n+        (Neg, F32(n)) => Ok(F32(-n)),\n         _ => Err(EvalError::Unimplemented(format!(\"unimplemented unary op: {:?}, {:?}\", un_op, val))),\n     }\n }"}, {"sha": "9c4d0594d1c9916dac909bcdd5087008a2b79e6c", "filename": "tests/run-pass/floats.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/tests%2Frun-pass%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9669acc3a36cf32bac5aea92c88f0d6a01212f1b/tests%2Frun-pass%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloats.rs?ref=9669acc3a36cf32bac5aea92c88f0d6a01212f1b", "patch": "@@ -0,0 +1,11 @@\n+\n+fn main() {\n+    assert_eq!(6.0_f32*6.0_f32, 36.0_f32);\n+    assert_eq!(6.0_f64*6.0_f64, 36.0_f64);\n+    assert_eq!(-{5.0_f32}, -5.0_f32);\n+    assert!((5.0_f32/0.0).is_infinite());\n+    assert!((-5.0_f32).sqrt().is_nan());\n+    let x: u64 = unsafe { std::mem::transmute(42.0_f64) };\n+    let y: f64 = unsafe { std::mem::transmute(x) };\n+    assert_eq!(y, 42.0_f64);\n+}"}]}