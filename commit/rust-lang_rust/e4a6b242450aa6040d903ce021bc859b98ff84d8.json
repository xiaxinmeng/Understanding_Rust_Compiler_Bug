{"sha": "e4a6b242450aa6040d903ce021bc859b98ff84d8", "node_id": "C_kwDOAAsO6NoAKGU0YTZiMjQyNDUwYWE2MDQwZDkwM2NlMDIxYmM4NTliOThmZjg0ZDg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T23:02:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-02T23:02:06Z"}, "message": "Rollup merge of #112183 - compiler-errors:new-solver-anon-ct, r=BoxyUwU\n\nNormalize anon consts in new solver\n\nWe don't do any of that `expand_abstract_consts` stuff so this isn't sufficient to make GCE work, but it does allow, e.g. `[(); 1]: Default`, to solve.\n\nr? `@BoxyUwU`", "tree": {"sha": "215c0212879894ccf863fcd683003eb396d72c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215c0212879894ccf863fcd683003eb396d72c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a6b242450aa6040d903ce021bc859b98ff84d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkenTuCRBK7hj4Ov3rIwAADKAIAFHaqcnnmlnTJMtsPvyyCzvW\n+2DfU5Yl9Cqb2Z4X3UiYvBNLZYpMDaUqUafFPTXSlwXhy+kD6TwyNCe1ECv3QD6F\ntUH4qVOH0R1FfAoUiWq09OhD9mTBS7BtQ4LGCj9Wni56rPp6F4U/k9+CBxYkRhb7\nbZRjBIZWohc6yoohD3KjvjO6by0/n3yxL2BrNj5Ykd6CsHnmBBPbGhlY3c+Of80D\nwsu+fiweKIQurD5+bu9jSY41WyppLFsJIuoDw4X+n2BrK5kE22tePyS7DIc2ksdW\nX1CVXSyTNsBvqoptRrmpaT1zEx+uwuSIZi8DOJOgiJewpJRXnPQkGPNK30GeFAE=\n=v1AU\n-----END PGP SIGNATURE-----\n", "payload": "tree 215c0212879894ccf863fcd683003eb396d72c01\nparent 5460f92a0f97238e87fef281134b08deb2f587ee\nparent 84196f33710e2797a576ddc5241e418b7a4f1f2c\nauthor Michael Goulet <michael@errs.io> 1685746926 -0700\ncommitter GitHub <noreply@github.com> 1685746926 -0700\n\nRollup merge of #112183 - compiler-errors:new-solver-anon-ct, r=BoxyUwU\n\nNormalize anon consts in new solver\n\nWe don't do any of that `expand_abstract_consts` stuff so this isn't sufficient to make GCE work, but it does allow, e.g. `[(); 1]: Default`, to solve.\n\nr? `@BoxyUwU`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a6b242450aa6040d903ce021bc859b98ff84d8", "html_url": "https://github.com/rust-lang/rust/commit/e4a6b242450aa6040d903ce021bc859b98ff84d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a6b242450aa6040d903ce021bc859b98ff84d8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5460f92a0f97238e87fef281134b08deb2f587ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5460f92a0f97238e87fef281134b08deb2f587ee", "html_url": "https://github.com/rust-lang/rust/commit/5460f92a0f97238e87fef281134b08deb2f587ee"}, {"sha": "84196f33710e2797a576ddc5241e418b7a4f1f2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84196f33710e2797a576ddc5241e418b7a4f1f2c", "html_url": "https://github.com/rust-lang/rust/commit/84196f33710e2797a576ddc5241e418b7a4f1f2c"}], "stats": {"total": 204, "additions": 134, "deletions": 70}, "files": [{"sha": "e92a0dcc1fb1f98b72e681495b2faf0ce1af896e", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -50,7 +50,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 // We do not allow generic parameters in anon consts if we are inside\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n-            } else if tcx.lazy_normalization() {\n+            } else if tcx.features().generic_const_exprs {\n                 let parent_node = tcx.hir().get_parent(hir_id);\n                 if let Node::Variant(Variant { disr_expr: Some(constant), .. }) = parent_node\n                     && constant.hir_id == hir_id"}, {"sha": "dcb57902928793e7561dd04c9ed78b7d6a656f1b", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -463,7 +463,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             }\n         }\n     } else {\n-        if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n+        if matches!(def_kind, DefKind::AnonConst) && tcx.features().generic_const_exprs {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n             let parent_def_id = tcx.hir().get_parent_item(hir_id);\n "}, {"sha": "fdbb890ce3d47289bde90c61607e768ca01d396f", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -20,7 +20,8 @@ pub fn provide(providers: &mut Providers) {\n fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[(ty::Clause<'_>, Span)] {\n     let id = tcx.hir().local_def_id_to_hir_id(item_def_id);\n \n-    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n+    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst)\n+        && tcx.features().generic_const_exprs\n     {\n         if tcx.hir().opt_const_param_default_param_def_id(id).is_some() {\n             // In `generics_of` we set the generics' parent to be our parent's parent which means that"}, {"sha": "ed532aa2e8ba8ef2c587146f90c93114bfce1eae", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -227,7 +227,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 return self.unify_const_variable(vid, a, relation.param_env());\n             }\n             (ty::ConstKind::Unevaluated(..), _) | (_, ty::ConstKind::Unevaluated(..))\n-                if self.tcx.lazy_normalization() =>\n+                if self.tcx.features().generic_const_exprs || self.tcx.trait_solver_next() =>\n             {\n                 relation.register_const_equate_obligation(a, b);\n                 return Ok(b);"}, {"sha": "bf6f21968d71b7f04ce733b50882d4498a495af0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -1015,15 +1015,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.query_system.on_disk_cache.as_ref().map_or(Ok(0), |c| c.serialize(self, encoder))\n     }\n \n-    /// If `true`, we should use lazy normalization for constants, otherwise\n-    /// we still evaluate them eagerly.\n-    #[inline]\n-    pub fn lazy_normalization(self) -> bool {\n-        let features = self.features();\n-        // Note: We only use lazy normalization for generic const expressions.\n-        features.generic_const_exprs\n-    }\n-\n     #[inline]\n     pub fn local_crate_exports_generics(self) -> bool {\n         debug_assert!(self.sess.opts.share_generics());"}, {"sha": "bc93b9e99ad44f8056c08409b7ca0de045ecab01", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -322,10 +322,13 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::Ambiguous => {\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n                 }\n-                // FIXME: implement these predicates :)\n-                ty::PredicateKind::ConstEvaluatable(_) | ty::PredicateKind::ConstEquate(_, _) => {\n+                // FIXME: implement this predicate :)\n+                ty::PredicateKind::ConstEvaluatable(_) => {\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n+                ty::PredicateKind::ConstEquate(_, _) => {\n+                    bug!(\"ConstEquate should not be emitted when `-Ztrait-solver=next` is active\")\n+                }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n@@ -772,4 +775,21 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n         values\n     }\n+\n+    // Try to evaluate a const, or return `None` if the const is too generic.\n+    // This doesn't mean the const isn't evaluatable, though, and should be treated\n+    // as an ambiguity rather than no-solution.\n+    pub(super) fn try_const_eval_resolve(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        unevaluated: ty::UnevaluatedConst<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> Option<ty::Const<'tcx>> {\n+        use rustc_middle::mir::interpret::ErrorHandled;\n+        match self.infcx.try_const_eval_resolve(param_env, unevaluated, ty, None) {\n+            Ok(ct) => Some(ct),\n+            Err(ErrorHandled::Reported(e)) => Some(self.tcx().const_error(ty, e.into())),\n+            Err(ErrorHandled::TooGeneric) => None,\n+        }\n+    }\n }"}, {"sha": "212327448c874d97c0070df51ed576b92cebbac8", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -118,16 +118,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                         TypeError::Sorts(expected_found),\n                                     )\n                                 }\n-                                ty::PredicateKind::ConstEquate(a, b) => {\n-                                    let (a, b) = infcx.instantiate_binder_with_placeholders(\n-                                        goal.predicate.kind().rebind((a, b)),\n-                                    );\n-                                    let expected_found = ExpectedFound::new(true, a, b);\n-                                    FulfillmentErrorCode::CodeConstEquateError(\n-                                        expected_found,\n-                                        TypeError::ConstMismatch(expected_found),\n-                                    )\n-                                }\n                                 ty::PredicateKind::Clause(_)\n                                 | ty::PredicateKind::WellFormed(_)\n                                 | ty::PredicateKind::ObjectSafe(_)\n@@ -138,7 +128,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                         SelectionError::Unimplemented,\n                                     )\n                                 }\n-                                ty::PredicateKind::TypeWellFormedFromEnv(_) => {\n+                                ty::PredicateKind::ConstEquate(..)\n+                                | ty::PredicateKind::TypeWellFormedFromEnv(_) => {\n                                     bug!(\"unexpected goal: {goal:?}\")\n                                 }\n                             },"}, {"sha": "23601f668ff057990414dc0de5234e15a0745d78", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -22,25 +22,65 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, ProjectionPredicate<'tcx>>,\n     ) -> QueryResult<'tcx> {\n-        match goal.predicate.projection_ty.kind(self.tcx()) {\n-            ty::AliasKind::Projection => {\n+        let def_id = goal.predicate.def_id();\n+        match self.tcx().def_kind(def_id) {\n+            DefKind::AssocTy | DefKind::AssocConst => {\n                 // To only compute normalization once for each projection we only\n-                // normalize if the expected term is an unconstrained inference variable.\n+                // assemble normalization candidates if the expected term is an\n+                // unconstrained inference variable.\n+                //\n+                // Why: For better cache hits, since if we have an unconstrained RHS then\n+                // there are only as many cache keys as there are (canonicalized) alias\n+                // types in each normalizes-to goal. This also weakens inference in a\n+                // forwards-compatible way so we don't use the value of the RHS term to\n+                // affect candidate assembly for projections.\n                 //\n                 // E.g. for `<T as Trait>::Assoc == u32` we recursively compute the goal\n                 // `exists<U> <T as Trait>::Assoc == U` and then take the resulting type for\n                 // `U` and equate it with `u32`. This means that we don't need a separate\n-                // projection cache in the solver.\n+                // projection cache in the solver, since we're piggybacking off of regular\n+                // goal caching.\n                 if self.term_is_fully_unconstrained(goal) {\n-                    let candidates = self.assemble_and_evaluate_candidates(goal);\n-                    self.merge_candidates(candidates)\n+                    match self.tcx().associated_item(def_id).container {\n+                        ty::AssocItemContainer::TraitContainer => {\n+                            let candidates = self.assemble_and_evaluate_candidates(goal);\n+                            self.merge_candidates(candidates)\n+                        }\n+                        ty::AssocItemContainer::ImplContainer => {\n+                            bug!(\"IATs not supported here yet\")\n+                        }\n+                    }\n                 } else {\n                     self.set_normalizes_to_hack_goal(goal);\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n             }\n-            ty::AliasKind::Opaque => self.normalize_opaque_type(goal),\n-            ty::AliasKind::Inherent => bug!(\"IATs not supported here yet\"),\n+            DefKind::AnonConst => self.normalize_anon_const(goal),\n+            DefKind::OpaqueTy => self.normalize_opaque_type(goal),\n+            kind => bug!(\"unknown DefKind {} in projection goal: {goal:#?}\", kind.descr(def_id)),\n+        }\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn normalize_anon_const(\n+        &mut self,\n+        goal: Goal<'tcx, ty::ProjectionPredicate<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        if let Some(normalized_const) = self.try_const_eval_resolve(\n+            goal.param_env,\n+            ty::UnevaluatedConst::new(\n+                goal.predicate.projection_ty.def_id,\n+                goal.predicate.projection_ty.substs,\n+            ),\n+            self.tcx()\n+                .type_of(goal.predicate.projection_ty.def_id)\n+                .no_bound_vars()\n+                .expect(\"const ty should not rely on other generics\"),\n+        ) {\n+            self.eq(goal.param_env, normalized_const, goal.predicate.term.ct().unwrap())?;\n+            self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+        } else {\n+            self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n         }\n     }\n }\n@@ -173,17 +213,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             );\n \n             // Finally we construct the actual value of the associated type.\n-            let is_const = matches!(tcx.def_kind(assoc_def.item.def_id), DefKind::AssocConst);\n-            let ty = tcx.type_of(assoc_def.item.def_id);\n-            let term: ty::EarlyBinder<ty::Term<'tcx>> = if is_const {\n-                let identity_substs =\n-                    ty::InternalSubsts::identity_for_item(tcx, assoc_def.item.def_id);\n-                let did = assoc_def.item.def_id;\n-                let kind =\n-                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst::new(did, identity_substs));\n-                ty.map_bound(|ty| tcx.mk_const(kind, ty).into())\n-            } else {\n-                ty.map_bound(|ty| ty.into())\n+            let term = match assoc_def.item.kind {\n+                ty::AssocKind::Type => tcx.type_of(assoc_def.item.def_id).map_bound(|ty| ty.into()),\n+                ty::AssocKind::Const => bug!(\"associated const projection is not supported yet\"),\n+                ty::AssocKind::Fn => unreachable!(\"we should never project to a fn\"),\n             };\n \n             ecx.eq(goal.param_env, goal.predicate.term, term.subst(tcx, substs))"}, {"sha": "563cc257e034981c82dcfa3ca92926f3979e3172", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -672,7 +672,9 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         let tcx = self.selcx.tcx();\n-        if tcx.lazy_normalization() || !needs_normalization(&constant, self.param_env.reveal()) {\n+        if tcx.features().generic_const_exprs\n+            || !needs_normalization(&constant, self.param_env.reveal())\n+        {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);"}, {"sha": "5077137b09b4b1f3951c8088d0d2117b0350f200", "filename": "tests/ui/traits/new-solver/array-default.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn has_default<const N: usize>() where [(); N]: Default {}\n+\n+fn main() {\n+    has_default::<1>();\n+}"}, {"sha": "01899c9ad645f2994c08090a7fad4f19c40068ab", "filename": "tests/ui/traits/new-solver/structural-resolve-field.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -1,35 +1,13 @@\n // compile-flags: -Ztrait-solver=next\n // check-pass\n \n+#[derive(Default)]\n struct Foo {\n     x: i32,\n }\n \n-impl MyDefault for Foo {\n-    fn my_default() -> Self {\n-        Self {\n-            x: 0,\n-        }\n-    }\n-}\n-\n-trait MyDefault {\n-    fn my_default() -> Self;\n-}\n-\n-impl MyDefault for [Foo; 0]  {\n-    fn my_default() -> Self {\n-        []\n-    }\n-}\n-impl MyDefault for [Foo; 1] {\n-    fn my_default() -> Self {\n-        [Foo::my_default(); 1]\n-    }\n-}\n-\n fn main() {\n-    let mut xs = <[Foo; 1]>::my_default();\n+    let mut xs = <[Foo; 1]>::default();\n     xs[0].x = 1;\n     (&mut xs[0]).x = 2;\n }"}, {"sha": "072ac32a5de9764cf1daf8bf767d64390e3f09b3", "filename": "tests/ui/traits/new-solver/unevaluated-const-impl-trait-ref.fails.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `(): Trait<1>` is not satisfied\n+  --> $DIR/unevaluated-const-impl-trait-ref.rs:20:13\n+   |\n+LL |     needs::<1>();\n+   |             ^ the trait `Trait<1>` is not implemented for `()`\n+   |\n+   = help: the following other types implement trait `Trait<N>`:\n+             <() as Trait<0>>\n+             <() as Trait<2>>\n+note: required by a bound in `needs`\n+  --> $DIR/unevaluated-const-impl-trait-ref.rs:10:38\n+   |\n+LL | fn needs<const N: usize>() where (): Trait<N> {}\n+   |                                      ^^^^^^^^ required by this bound in `needs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "26c595bc974286b45d7a9b916c850721f6a0713f", "filename": "tests/ui/traits/new-solver/unevaluated-const-impl-trait-ref.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a6b242450aa6040d903ce021bc859b98ff84d8/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs?ref=e4a6b242450aa6040d903ce021bc859b98ff84d8", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Ztrait-solver=next\n+// revisions: works fails\n+//[works] check-pass\n+\n+trait Trait<const N: usize> {}\n+\n+impl Trait<{ 1 - 1 }> for () {}\n+impl Trait<{ 1 + 1 }> for () {}\n+\n+fn needs<const N: usize>() where (): Trait<N> {}\n+\n+#[cfg(works)]\n+fn main() {\n+    needs::<0>();\n+    needs::<2>();\n+}\n+\n+#[cfg(fails)]\n+fn main() {\n+    needs::<1>();\n+    //[fails]~^ ERROR the trait bound `(): Trait<1>` is not satisfied\n+}"}]}