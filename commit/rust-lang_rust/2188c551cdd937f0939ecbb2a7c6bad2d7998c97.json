{"sha": "2188c551cdd937f0939ecbb2a7c6bad2d7998c97", "node_id": "C_kwDOAAsO6NoAKDIxODhjNTUxY2RkOTM3ZjA5MzllY2JiMmE3YzZiYWQyZDc5OThjOTc", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-01-28T09:36:04Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-01-28T09:51:46Z"}, "message": "Move unstable is_{arch}_feature_detected! macros to std::arch", "tree": {"sha": "424d39b96aa8850621129603f8fcea79b34932bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424d39b96aa8850621129603f8fcea79b34932bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2188c551cdd937f0939ecbb2a7c6bad2d7998c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2188c551cdd937f0939ecbb2a7c6bad2d7998c97", "html_url": "https://github.com/rust-lang/rust/commit/2188c551cdd937f0939ecbb2a7c6bad2d7998c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2188c551cdd937f0939ecbb2a7c6bad2d7998c97/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab502c6d308b0ccac8127c0464e432334755a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab502c6d308b0ccac8127c0464e432334755a60", "html_url": "https://github.com/rust-lang/rust/commit/5ab502c6d308b0ccac8127c0464e432334755a60"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "7c8cb5378a2ab2c6b429d7f9e2d620f1f6c5319e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2188c551cdd937f0939ecbb2a7c6bad2d7998c97/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2188c551cdd937f0939ecbb2a7c6bad2d7998c97/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=2188c551cdd937f0939ecbb2a7c6bad2d7998c97", "patch": "@@ -403,13 +403,6 @@ pub use alloc_crate::string;\n pub use alloc_crate::vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n-#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-// The `no_inline`-attribute is required to make the documentation of all\n-// targets available.\n-// See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for\n-// more information.\n-#[doc(no_inline)] // Note (#82861): required for correct documentation\n-pub use core::arch;\n #[stable(feature = \"core_array\", since = \"1.36.0\")]\n pub use core::array;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -527,6 +520,31 @@ pub mod task {\n     pub use alloc::task::*;\n }\n \n+#[doc = include_str!(\"../../stdarch/crates/core_arch/src/core_arch_docs.md\")]\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+pub mod arch {\n+    #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+    // The `no_inline`-attribute is required to make the documentation of all\n+    // targets available.\n+    // See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for\n+    // more information.\n+    #[doc(no_inline)] // Note (#82861): required for correct documentation\n+    pub use core::arch::*;\n+\n+    #[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n+    pub use std_detect::is_x86_feature_detected;\n+    #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+    pub use std_detect::{\n+        is_aarch64_feature_detected, is_arm_feature_detected, is_mips64_feature_detected,\n+        is_mips_feature_detected, is_powerpc64_feature_detected, is_powerpc_feature_detected,\n+        is_riscv_feature_detected,\n+    };\n+}\n+\n+// This was stabilized in the crate root so we have to keep it there.\n+#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n+pub use std_detect::is_x86_feature_detected;\n+\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n #[macro_use]\n@@ -545,18 +563,6 @@ mod panicking;\n #[allow(dead_code, unused_attributes)]\n mod backtrace_rs;\n \n-#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n-pub use std_detect::is_x86_feature_detected;\n-#[doc(hidden)]\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-pub use std_detect::*;\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-pub use std_detect::{\n-    is_aarch64_feature_detected, is_arm_feature_detected, is_mips64_feature_detected,\n-    is_mips_feature_detected, is_powerpc64_feature_detected, is_powerpc_feature_detected,\n-    is_riscv_feature_detected,\n-};\n-\n // Re-export macros defined in libcore.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]"}, {"sha": "14a9e3acca499e89ceaa3ca54e25702e855b0388", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2188c551cdd937f0939ecbb2a7c6bad2d7998c97/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2188c551cdd937f0939ecbb2a7c6bad2d7998c97/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=2188c551cdd937f0939ecbb2a7c6bad2d7998c97", "patch": "@@ -14,6 +14,7 @@\n #[test]\n #[cfg(all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")))]\n fn arm_linux() {\n+    use std::arch::is_arm_feature_detected;\n     println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n     println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n     println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n@@ -25,6 +26,7 @@ fn arm_linux() {\n #[test]\n #[cfg(all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")))]\n fn aarch64_linux() {\n+    use std::arch::is_aarch64_feature_detected;\n     println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n     println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n@@ -71,6 +73,7 @@ fn aarch64_linux() {\n #[test]\n #[cfg(all(target_arch = \"powerpc\", target_os = \"linux\"))]\n fn powerpc_linux() {\n+    use std::arch::is_powerpc_feature_detected;\n     println!(\"altivec: {}\", is_powerpc_feature_detected!(\"altivec\"));\n     println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc_feature_detected!(\"power8\"));\n@@ -79,6 +82,7 @@ fn powerpc_linux() {\n #[test]\n #[cfg(all(target_arch = \"powerpc64\", target_os = \"linux\"))]\n fn powerpc64_linux() {\n+    use std::arch::is_powerpc64_feature_detected;\n     println!(\"altivec: {}\", is_powerpc64_feature_detected!(\"altivec\"));\n     println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc64_feature_detected!(\"power8\"));\n@@ -87,6 +91,8 @@ fn powerpc64_linux() {\n #[test]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn x86_all() {\n+    use std::arch::is_x86_feature_detected;\n+\n     // the below is the set of features we can test at runtime, but don't actually\n     // use to gate anything and are thus not part of the X86_ALLOWED_FEATURES list\n "}]}