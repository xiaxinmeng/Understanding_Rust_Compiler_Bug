{"sha": "912e4bdc905e03f110f02d851a7932b4c7d60f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMmU0YmRjOTA1ZTAzZjExMGYwMmQ4NTFhNzkzMmI0YzdkNjBmMWU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-18T23:38:50Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-18T23:43:00Z"}, "message": "Fix breaking changes from rustc-ap-syntax\n\ncc https://github.com/rust-lang/rust/pull/50045.", "tree": {"sha": "17d895bc4f7ccc70b02791743b2d00c9c57d0d8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17d895bc4f7ccc70b02791743b2d00c9c57d0d8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/912e4bdc905e03f110f02d851a7932b4c7d60f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/912e4bdc905e03f110f02d851a7932b4c7d60f1e", "html_url": "https://github.com/rust-lang/rust/commit/912e4bdc905e03f110f02d851a7932b4c7d60f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/912e4bdc905e03f110f02d851a7932b4c7d60f1e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e81d7ed1e4255be000946d6e554e65e1dd13d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e81d7ed1e4255be000946d6e554e65e1dd13d8", "html_url": "https://github.com/rust-lang/rust/commit/82e81d7ed1e4255be000946d6e554e65e1dd13d8"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "dc811ea95adcd42e6b42c663de014c112b028a62", "filename": "src/closures.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/912e4bdc905e03f110f02d851a7932b4c7d60f1e/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912e4bdc905e03f110f02d851a7932b4c7d60f1e/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=912e4bdc905e03f110f02d851a7932b4c7d60f1e", "patch": "@@ -47,7 +47,7 @@ pub fn rewrite_closure(\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n \n-    if let ast::ExprKind::Block(ref block) = body.node {\n+    if let ast::ExprKind::Block(ref block, _) = body.node {\n         // The body of the closure is an empty block.\n         if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) {\n             return body\n@@ -96,7 +96,7 @@ fn get_inner_expr<'a>(\n     prefix: &str,\n     context: &RewriteContext,\n ) -> &'a ast::Expr {\n-    if let ast::ExprKind::Block(ref block) = expr.node {\n+    if let ast::ExprKind::Block(ref block, _) = expr.node {\n         if !needs_block(block, prefix, context) {\n             // block.stmts.len() == 1\n             if let Some(expr) = stmt_expr(&block.stmts[0]) {\n@@ -289,7 +289,7 @@ pub fn rewrite_last_closure(\n ) -> Option<String> {\n     if let ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) = expr.node {\n         let body = match body.node {\n-            ast::ExprKind::Block(ref block)\n+            ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)\n                     && is_simple_block(block, Some(&body.attrs), context.codemap) =>\n             {"}, {"sha": "8961cec4240f21929e3d3c976b4c8a04cb50980c", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/912e4bdc905e03f110f02d851a7932b4c7d60f1e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912e4bdc905e03f110f02d851a7932b4c7d60f1e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=912e4bdc905e03f110f02d851a7932b4c7d60f1e", "patch": "@@ -118,7 +118,8 @@ pub fn format_expr(\n         | ast::ExprKind::While(..)\n         | ast::ExprKind::WhileLet(..) => to_control_flow(expr, expr_type)\n             .and_then(|control_flow| control_flow.rewrite(context, shape)),\n-        ast::ExprKind::Block(ref block) => {\n+        // FIXME(topecongiro): Handle label on a block (#2722).\n+        ast::ExprKind::Block(ref block, _) => {\n             match expr_type {\n                 ExprType::Statement => {\n                     if is_unsafe_block(block) {\n@@ -880,7 +881,7 @@ impl<'a> ControlFlow<'a> {\n         let else_block = self.else_block?;\n         let fixed_cost = self.keyword.len() + \"  {  } else {  }\".len();\n \n-        if let ast::ExprKind::Block(ref else_node) = else_block.node {\n+        if let ast::ExprKind::Block(ref else_node, _) = else_block.node {\n             if !is_simple_block(self.block, None, context.codemap)\n                 || !is_simple_block(else_node, None, context.codemap)\n                 || pat_expr_str.contains('\\n')"}, {"sha": "9551dc360026cad84ed60c7630f69bc659a716e5", "filename": "src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/912e4bdc905e03f110f02d851a7932b4c7d60f1e/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912e4bdc905e03f110f02d851a7932b4c7d60f1e/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=912e4bdc905e03f110f02d851a7932b4c7d60f1e", "patch": "@@ -155,7 +155,7 @@ fn arm_comma(config: &Config, body: &ast::Expr, is_last: bool) -> &'static str {\n         \"\"\n     } else if config.match_block_trailing_comma() {\n         \",\"\n-    } else if let ast::ExprKind::Block(ref block) = body.node {\n+    } else if let ast::ExprKind::Block(ref block, _) = body.node {\n         if let ast::BlockCheckMode::Default = block.rules {\n             \"\"\n         } else {\n@@ -308,7 +308,7 @@ fn rewrite_match_pattern(\n // @body: flattened body, if the body is block with a single expression\n fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bool, &'a ast::Expr) {\n     match body.node {\n-        ast::ExprKind::Block(ref block)\n+        ast::ExprKind::Block(ref block, _)\n             if !is_unsafe_block(block)\n                 && is_simple_block(block, Some(&body.attrs), context.codemap) =>\n         {\n@@ -337,7 +337,7 @@ fn rewrite_match_body(\n     is_last: bool,\n ) -> Option<String> {\n     let (extend, body) = flatten_arm_body(context, body);\n-    let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block) = body.node {\n+    let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block, _) = body.node {\n         (\n             true,\n             is_empty_block(block, Some(&body.attrs), context.codemap),"}]}