{"sha": "c67660fc22e32ca8b9165e6efe34382747e044b0", "node_id": "C_kwDOAAsO6NoAKGM2NzY2MGZjMjJlMzJjYThiOTE2NWU2ZWZlMzQzODI3NDdlMDQ0YjA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-21T09:31:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T09:31:38Z"}, "message": "Merge #11375\n\n11375: feat: Support if- and while- let chains r=Veykril a=ChayimFriedman2\n\nCloses #11320.\n\nCo-authored-by: Chayim Refael Friedman <chayimfr@gmail.com>", "tree": {"sha": "1b3923668031d49b81ce57e4fcab11b613bd68d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3923668031d49b81ce57e4fcab11b613bd68d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c67660fc22e32ca8b9165e6efe34382747e044b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE1v6CRBK7hj4Ov3rIwAAWmwIAIM/xfW/h4djKnVih6n0Dnqn\nwaYFCMHgAF80PUrS3Ji1zabq8cxwRa6B1TR9RSYvCNYReXFAiRmSqMjzdl3oLtdk\nbOIYPPCr9RHLchgA2RhPdNGzVV/fru1kFnCkfX/IiAE14HG0+6plZnS4/i33B2Vx\n8MxVHiL5ebYIvGNd1qpIvsyfDD/HnC1OUwvCOHuRJypMMWGiDerJyU6n5jyz/7bg\n/CHucELdd215VAOoBVG+juvfcCcv6etB3Y4/xnascoifmP4xhB4y1IJCgcFpAp99\njOlu4CjG4buqUfcSdtvYGAR/8gmSdpezTLIUKIf4i0e/QqjfttCiJa80QtFxPJM=\n=2g8+\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b3923668031d49b81ce57e4fcab11b613bd68d2\nparent c149c3682e6fec3b432dc567bbf844b5ef04be30\nparent f70512cc1710656628b4173557795c1e60f0317d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645435898 +0000\ncommitter GitHub <noreply@github.com> 1645435898 +0000\n\nMerge #11375\n\n11375: feat: Support if- and while- let chains r=Veykril a=ChayimFriedman2\n\nCloses #11320.\n\nCo-authored-by: Chayim Refael Friedman <chayimfr@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c67660fc22e32ca8b9165e6efe34382747e044b0", "html_url": "https://github.com/rust-lang/rust/commit/c67660fc22e32ca8b9165e6efe34382747e044b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c67660fc22e32ca8b9165e6efe34382747e044b0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c149c3682e6fec3b432dc567bbf844b5ef04be30", "url": "https://api.github.com/repos/rust-lang/rust/commits/c149c3682e6fec3b432dc567bbf844b5ef04be30", "html_url": "https://github.com/rust-lang/rust/commit/c149c3682e6fec3b432dc567bbf844b5ef04be30"}, {"sha": "f70512cc1710656628b4173557795c1e60f0317d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f70512cc1710656628b4173557795c1e60f0317d", "html_url": "https://github.com/rust-lang/rust/commit/f70512cc1710656628b4173557795c1e60f0317d"}], "stats": {"total": 2271, "additions": 1177, "deletions": 1094}, "files": [{"sha": "64654c9961d2b24b6d3ffacf17b123c8e8237aa0", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1832,9 +1832,9 @@ checksum = \"0685c84d5d54d1c26f7d3eb96cd41550adb97baed141a761cf335d3d33bcd0ae\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.14.9\"\n+version = \"1.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"66be59c2fd880e3d76d1a6cf6d34114008f1d8af2748d4ad9d39ea712f14fda9\"\n+checksum = \"ed01567101450f7d600508e7680df6005ae4fe97119d79b0364cc5910ff39732\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "06ad7ce4cd0887ebf7ba1570ee69b9614c90423b", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 11, "deletions": 62, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -28,7 +28,7 @@ use crate::{\n     db::DefDatabase,\n     expr::{\n         dummy_expr_id, Array, BindingAnnotation, Expr, ExprId, Label, LabelId, Literal, MatchArm,\n-        MatchGuard, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n+        Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     intern::Interned,\n     item_scope::BuiltinShadowMode,\n@@ -155,9 +155,6 @@ impl ExprCollector<'_> {\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n         self.make_expr(expr, Err(SyntheticSyntax))\n     }\n-    fn unit(&mut self) -> ExprId {\n-        self.alloc_expr_desugared(Expr::Tuple { exprs: Box::default() })\n-    }\n     fn missing_expr(&mut self) -> ExprId {\n         self.alloc_expr_desugared(Expr::Missing)\n     }\n@@ -215,33 +212,15 @@ impl ExprCollector<'_> {\n                     }\n                 });\n \n-                let condition = match e.condition() {\n-                    None => self.missing_expr(),\n-                    Some(condition) => match condition.pat() {\n-                        None => self.collect_expr_opt(condition.expr()),\n-                        // if let -- desugar to match\n-                        Some(pat) => {\n-                            let pat = self.collect_pat(pat);\n-                            let match_expr = self.collect_expr_opt(condition.expr());\n-                            let placeholder_pat = self.missing_pat();\n-                            let arms = vec![\n-                                MatchArm { pat, expr: then_branch, guard: None },\n-                                MatchArm {\n-                                    pat: placeholder_pat,\n-                                    expr: else_branch.unwrap_or_else(|| self.unit()),\n-                                    guard: None,\n-                                },\n-                            ]\n-                            .into();\n-                            return Some(\n-                                self.alloc_expr(Expr::Match { expr: match_expr, arms }, syntax_ptr),\n-                            );\n-                        }\n-                    },\n-                };\n+                let condition = self.collect_expr_opt(e.condition());\n \n                 self.alloc_expr(Expr::If { condition, then_branch, else_branch }, syntax_ptr)\n             }\n+            ast::Expr::LetExpr(e) => {\n+                let pat = self.collect_pat_opt(e.pat());\n+                let expr = self.collect_expr_opt(e.expr());\n+                self.alloc_expr(Expr::Let { pat, expr }, syntax_ptr)\n+            }\n             ast::Expr::BlockExpr(e) => match e.modifier() {\n                 Some(ast::BlockModifier::Try(_)) => {\n                     let body = self.collect_block(e);\n@@ -282,31 +261,7 @@ impl ExprCollector<'_> {\n                 let label = e.label().map(|label| self.collect_label(label));\n                 let body = self.collect_block_opt(e.loop_body());\n \n-                let condition = match e.condition() {\n-                    None => self.missing_expr(),\n-                    Some(condition) => match condition.pat() {\n-                        None => self.collect_expr_opt(condition.expr()),\n-                        // if let -- desugar to match\n-                        Some(pat) => {\n-                            cov_mark::hit!(infer_resolve_while_let);\n-                            let pat = self.collect_pat(pat);\n-                            let match_expr = self.collect_expr_opt(condition.expr());\n-                            let placeholder_pat = self.missing_pat();\n-                            let break_ =\n-                                self.alloc_expr_desugared(Expr::Break { expr: None, label: None });\n-                            let arms = vec![\n-                                MatchArm { pat, expr: body, guard: None },\n-                                MatchArm { pat: placeholder_pat, expr: break_, guard: None },\n-                            ]\n-                            .into();\n-                            let match_expr =\n-                                self.alloc_expr_desugared(Expr::Match { expr: match_expr, arms });\n-                            return Some(\n-                                self.alloc_expr(Expr::Loop { body: match_expr, label }, syntax_ptr),\n-                            );\n-                        }\n-                    },\n-                };\n+                let condition = self.collect_expr_opt(e.condition());\n \n                 self.alloc_expr(Expr::While { condition, body, label }, syntax_ptr)\n             }\n@@ -352,15 +307,9 @@ impl ExprCollector<'_> {\n                             self.check_cfg(&arm).map(|()| MatchArm {\n                                 pat: self.collect_pat_opt(arm.pat()),\n                                 expr: self.collect_expr_opt(arm.expr()),\n-                                guard: arm.guard().map(|guard| match guard.pat() {\n-                                    Some(pat) => MatchGuard::IfLet {\n-                                        pat: self.collect_pat(pat),\n-                                        expr: self.collect_expr_opt(guard.expr()),\n-                                    },\n-                                    None => {\n-                                        MatchGuard::If { expr: self.collect_expr_opt(guard.expr()) }\n-                                    }\n-                                }),\n+                                guard: arm\n+                                    .guard()\n+                                    .map(|guard| self.collect_expr_opt(guard.condition())),\n                             })\n                         })\n                         .collect()"}, {"sha": "fc36f1ae526cf2e1b9788358646ea96150ce4bab", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 87, "deletions": 37, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     body::Body,\n     db::DefDatabase,\n-    expr::{Expr, ExprId, LabelId, MatchGuard, Pat, PatId, Statement},\n+    expr::{Expr, ExprId, LabelId, Pat, PatId, Statement},\n     BlockId, DefWithBodyId,\n };\n \n@@ -53,9 +53,9 @@ impl ExprScopes {\n     fn new(body: &Body) -> ExprScopes {\n         let mut scopes =\n             ExprScopes { scopes: Arena::default(), scope_by_expr: FxHashMap::default() };\n-        let root = scopes.root_scope();\n+        let mut root = scopes.root_scope();\n         scopes.add_params_bindings(body, root, &body.params);\n-        compute_expr_scopes(body.body_expr, body, &mut scopes, root);\n+        compute_expr_scopes(body.body_expr, body, &mut scopes, &mut root);\n         scopes\n     }\n \n@@ -151,79 +151,82 @@ fn compute_block_scopes(\n         match stmt {\n             Statement::Let { pat, initializer, else_branch, .. } => {\n                 if let Some(expr) = initializer {\n-                    compute_expr_scopes(*expr, body, scopes, scope);\n+                    compute_expr_scopes(*expr, body, scopes, &mut scope);\n                 }\n                 if let Some(expr) = else_branch {\n-                    compute_expr_scopes(*expr, body, scopes, scope);\n+                    compute_expr_scopes(*expr, body, scopes, &mut scope);\n                 }\n                 scope = scopes.new_scope(scope);\n                 scopes.add_bindings(body, scope, *pat);\n             }\n             Statement::Expr { expr, .. } => {\n-                compute_expr_scopes(*expr, body, scopes, scope);\n+                compute_expr_scopes(*expr, body, scopes, &mut scope);\n             }\n         }\n     }\n     if let Some(expr) = tail {\n-        compute_expr_scopes(expr, body, scopes, scope);\n+        compute_expr_scopes(expr, body, scopes, &mut scope);\n     }\n }\n \n-fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope: ScopeId) {\n+fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope: &mut ScopeId) {\n     let make_label =\n         |label: &Option<LabelId>| label.map(|label| (label, body.labels[label].name.clone()));\n \n-    scopes.set_scope(expr, scope);\n+    scopes.set_scope(expr, *scope);\n     match &body[expr] {\n         Expr::Block { statements, tail, id, label } => {\n-            let scope = scopes.new_block_scope(scope, *id, make_label(label));\n+            let scope = scopes.new_block_scope(*scope, *id, make_label(label));\n             // Overwrite the old scope for the block expr, so that every block scope can be found\n             // via the block itself (important for blocks that only contain items, no expressions).\n             scopes.set_scope(expr, scope);\n             compute_block_scopes(statements, *tail, body, scopes, scope);\n         }\n         Expr::For { iterable, pat, body: body_expr, label } => {\n             compute_expr_scopes(*iterable, body, scopes, scope);\n-            let scope = scopes.new_labeled_scope(scope, make_label(label));\n+            let mut scope = scopes.new_labeled_scope(*scope, make_label(label));\n             scopes.add_bindings(body, scope, *pat);\n-            compute_expr_scopes(*body_expr, body, scopes, scope);\n+            compute_expr_scopes(*body_expr, body, scopes, &mut scope);\n         }\n         Expr::While { condition, body: body_expr, label } => {\n-            let scope = scopes.new_labeled_scope(scope, make_label(label));\n-            compute_expr_scopes(*condition, body, scopes, scope);\n-            compute_expr_scopes(*body_expr, body, scopes, scope);\n+            let mut scope = scopes.new_labeled_scope(*scope, make_label(label));\n+            compute_expr_scopes(*condition, body, scopes, &mut scope);\n+            compute_expr_scopes(*body_expr, body, scopes, &mut scope);\n         }\n         Expr::Loop { body: body_expr, label } => {\n-            let scope = scopes.new_labeled_scope(scope, make_label(label));\n-            compute_expr_scopes(*body_expr, body, scopes, scope);\n+            let mut scope = scopes.new_labeled_scope(*scope, make_label(label));\n+            compute_expr_scopes(*body_expr, body, scopes, &mut scope);\n         }\n         Expr::Lambda { args, body: body_expr, .. } => {\n-            let scope = scopes.new_scope(scope);\n+            let mut scope = scopes.new_scope(*scope);\n             scopes.add_params_bindings(body, scope, args);\n-            compute_expr_scopes(*body_expr, body, scopes, scope);\n+            compute_expr_scopes(*body_expr, body, scopes, &mut scope);\n         }\n         Expr::Match { expr, arms } => {\n             compute_expr_scopes(*expr, body, scopes, scope);\n             for arm in arms.iter() {\n-                let mut scope = scopes.new_scope(scope);\n+                let mut scope = scopes.new_scope(*scope);\n                 scopes.add_bindings(body, scope, arm.pat);\n-                match arm.guard {\n-                    Some(MatchGuard::If { expr: guard }) => {\n-                        scopes.set_scope(guard, scope);\n-                        compute_expr_scopes(guard, body, scopes, scope);\n-                    }\n-                    Some(MatchGuard::IfLet { pat, expr: guard }) => {\n-                        scopes.set_scope(guard, scope);\n-                        compute_expr_scopes(guard, body, scopes, scope);\n-                        scope = scopes.new_scope(scope);\n-                        scopes.add_bindings(body, scope, pat);\n-                    }\n-                    _ => {}\n-                };\n-                scopes.set_scope(arm.expr, scope);\n-                compute_expr_scopes(arm.expr, body, scopes, scope);\n+                if let Some(guard) = arm.guard {\n+                    scope = scopes.new_scope(scope);\n+                    compute_expr_scopes(guard, body, scopes, &mut scope);\n+                }\n+                compute_expr_scopes(arm.expr, body, scopes, &mut scope);\n+            }\n+        }\n+        &Expr::If { condition, then_branch, else_branch } => {\n+            let mut then_branch_scope = scopes.new_scope(*scope);\n+            compute_expr_scopes(condition, body, scopes, &mut then_branch_scope);\n+            compute_expr_scopes(then_branch, body, scopes, &mut then_branch_scope);\n+            if let Some(else_branch) = else_branch {\n+                compute_expr_scopes(else_branch, body, scopes, scope);\n             }\n         }\n+        &Expr::Let { pat, expr } => {\n+            compute_expr_scopes(expr, body, scopes, scope);\n+            *scope = scopes.new_scope(*scope);\n+            scopes.add_bindings(body, *scope, pat);\n+        }\n         e => e.walk_child_exprs(|e| compute_expr_scopes(e, body, scopes, scope)),\n     };\n }\n@@ -500,8 +503,7 @@ fn foo() {\n     }\n \n     #[test]\n-    fn while_let_desugaring() {\n-        cov_mark::check!(infer_resolve_while_let);\n+    fn while_let_adds_binding() {\n         do_check_local_name(\n             r#\"\n fn test() {\n@@ -513,5 +515,53 @@ fn test() {\n \"#,\n             75,\n         );\n+        do_check_local_name(\n+            r#\"\n+fn test() {\n+    let foo: Option<f32> = None;\n+    while (((let Option::Some(_) = foo))) && let Option::Some(spam) = foo {\n+        spam$0\n+    }\n+}\n+\"#,\n+            107,\n+        );\n+    }\n+\n+    #[test]\n+    fn match_guard_if_let() {\n+        do_check_local_name(\n+            r#\"\n+fn test() {\n+    let foo: Option<f32> = None;\n+    match foo {\n+        _ if let Option::Some(spam) = foo => spam$0,\n+    }\n+}\n+\"#,\n+            93,\n+        );\n+    }\n+\n+    #[test]\n+    fn let_chains_can_reference_previous_lets() {\n+        do_check_local_name(\n+            r#\"\n+fn test() {\n+    let foo: Option<i32> = None;\n+    if let Some(spam) = foo && spa$0m > 1 && let Some(spam) = foo && spam > 1 {}\n+}\n+\"#,\n+            61,\n+        );\n+        do_check_local_name(\n+            r#\"\n+fn test() {\n+    let foo: Option<i32> = None;\n+    if let Some(spam) = foo && spam > 1 && let Some(spam) = foo && sp$0am > 1 {}\n+}\n+\"#,\n+            100,\n+        );\n     }\n }"}, {"sha": "4dca8238880d9376833bf406c65369e8550737fe", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -59,6 +59,10 @@ pub enum Expr {\n         then_branch: ExprId,\n         else_branch: Option<ExprId>,\n     },\n+    Let {\n+        pat: PatId,\n+        expr: ExprId,\n+    },\n     Block {\n         id: BlockId,\n         statements: Box<[Statement]>,\n@@ -189,17 +193,10 @@ pub enum Array {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MatchArm {\n     pub pat: PatId,\n-    pub guard: Option<MatchGuard>,\n+    pub guard: Option<ExprId>,\n     pub expr: ExprId,\n }\n \n-#[derive(Debug, Clone, Eq, PartialEq)]\n-pub enum MatchGuard {\n-    If { expr: ExprId },\n-\n-    IfLet { pat: PatId, expr: ExprId },\n-}\n-\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct RecordLitField {\n     pub name: Name,\n@@ -232,6 +229,9 @@ impl Expr {\n                     f(else_branch);\n                 }\n             }\n+            Expr::Let { expr, .. } => {\n+                f(*expr);\n+            }\n             Expr::Block { statements, tail, .. } => {\n                 for stmt in statements.iter() {\n                     match stmt {"}, {"sha": "84cc3f3872f2a1a5f3247ed6b5f7c7bfc27098a1", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -108,18 +108,18 @@ fn expansion_does_not_parse_as_expression() {\n     check(\n         r#\"\n macro_rules! stmts {\n-    () => { let _ = 0; }\n+    () => { fn foo() {} }\n }\n \n fn f() { let _ = stmts!/*+errors*/(); }\n \"#,\n         expect![[r#\"\n macro_rules! stmts {\n-    () => { let _ = 0; }\n+    () => { fn foo() {} }\n }\n \n fn f() { let _ = /* parse error: expected expression */\n-let _ = 0;; }\n+fn foo() {}; }\n \"#]],\n     )\n }"}, {"sha": "e33c2565c31e9de443e621387a5958aa97a1107b", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -811,10 +811,10 @@ impl ExpandTo {\n             MACRO_TYPE => ExpandTo::Type,\n \n             ARG_LIST | TRY_EXPR | TUPLE_EXPR | PAREN_EXPR | ARRAY_EXPR | FOR_EXPR | PATH_EXPR\n-            | CLOSURE_EXPR | CONDITION | BREAK_EXPR | RETURN_EXPR | MATCH_EXPR | MATCH_ARM\n-            | MATCH_GUARD | RECORD_EXPR_FIELD | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR\n-            | FIELD_EXPR | AWAIT_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR\n-            | BIN_EXPR => ExpandTo::Expr,\n+            | CLOSURE_EXPR | BREAK_EXPR | RETURN_EXPR | MATCH_EXPR | MATCH_ARM | MATCH_GUARD\n+            | RECORD_EXPR_FIELD | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR | FIELD_EXPR\n+            | AWAIT_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR\n+            | LET_EXPR => ExpandTo::Expr,\n             LET_STMT => {\n                 // FIXME: Handle LHS Pattern\n                 ExpandTo::Expr"}, {"sha": "13f64d682521e8733ec67b6fd2edb44990f02736", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -8,10 +8,7 @@ use std::{\n \n use chalk_ir::{cast::Cast, fold::Shift, Mutability, TyVariableKind};\n use hir_def::{\n-    expr::{\n-        ArithOp, Array, BinaryOp, CmpOp, Expr, ExprId, Literal, MatchGuard, Ordering, Statement,\n-        UnaryOp,\n-    },\n+    expr::{ArithOp, Array, BinaryOp, CmpOp, Expr, ExprId, Literal, Ordering, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n     FieldId, FunctionId, ItemContainerId, Lookup,\n@@ -158,6 +155,11 @@ impl<'a> InferenceContext<'a> {\n \n                 coerce.complete()\n             }\n+            &Expr::Let { pat, expr } => {\n+                let input_ty = self.infer_expr(expr, &Expectation::none());\n+                self.infer_pat(pat, &input_ty, BindingMode::default());\n+                TyKind::Scalar(Scalar::Bool).intern(Interner)\n+            }\n             Expr::Block { statements, tail, label, id: _ } => {\n                 let old_resolver = mem::replace(\n                     &mut self.resolver,\n@@ -378,20 +380,11 @@ impl<'a> InferenceContext<'a> {\n                 for arm in arms.iter() {\n                     self.diverges = Diverges::Maybe;\n                     let _pat_ty = self.infer_pat(arm.pat, &input_ty, BindingMode::default());\n-                    match arm.guard {\n-                        Some(MatchGuard::If { expr: guard_expr }) => {\n-                            self.infer_expr(\n-                                guard_expr,\n-                                &Expectation::has_type(\n-                                    TyKind::Scalar(Scalar::Bool).intern(Interner),\n-                                ),\n-                            );\n-                        }\n-                        Some(MatchGuard::IfLet { expr, pat }) => {\n-                            let input_ty = self.infer_expr(expr, &Expectation::none());\n-                            let _pat_ty = self.infer_pat(pat, &input_ty, BindingMode::default());\n-                        }\n-                        _ => {}\n+                    if let Some(guard_expr) = arm.guard {\n+                        self.infer_expr(\n+                            guard_expr,\n+                            &Expectation::has_type(TyKind::Scalar(Scalar::Bool).intern(Interner)),\n+                        );\n                     }\n \n                     let arm_ty = self.infer_expr_inner(arm.expr, &expected);"}, {"sha": "344e7293c59343fc9faee4ee7b24ebf304da6756", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -190,14 +190,14 @@ fn expr_macro_def_expanded_in_various_places() {\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n-            !0..6 '1isize': isize\n             39..442 '{     ...!(); }': ()\n             73..94 'spam!(...am!())': {unknown}\n             100..119 'for _ ...!() {}': ()\n             104..105 '_': {unknown}\n             117..119 '{}': ()\n             124..134 '|| spam!()': || -> isize\n             140..156 'while ...!() {}': ()\n+            146..153 'spam!()': bool\n             154..156 '{}': ()\n             161..174 'break spam!()': !\n             180..194 'return spam!()': !\n@@ -271,14 +271,14 @@ fn expr_macro_rules_expanded_in_various_places() {\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n-            !0..6 '1isize': isize\n             53..456 '{     ...!(); }': ()\n             87..108 'spam!(...am!())': {unknown}\n             114..133 'for _ ...!() {}': ()\n             118..119 '_': {unknown}\n             131..133 '{}': ()\n             138..148 '|| spam!()': || -> isize\n             154..170 'while ...!() {}': ()\n+            160..167 'spam!()': bool\n             168..170 '{}': ()\n             175..188 'break spam!()': !\n             194..208 'return spam!()': !"}, {"sha": "acdd8f50efb8e513eb494cedba666c27a4613e1e", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -55,13 +55,15 @@ fn infer_pattern() {\n             139..140 'g': {unknown}\n             143..144 'e': {unknown}\n             157..204 'if let...     }': ()\n+            160..175 'let [val] = opt': bool\n             164..169 '[val]': [{unknown}]\n             165..168 'val': {unknown}\n             172..175 'opt': [{unknown}]\n             176..204 '{     ...     }': ()\n             190..191 'h': {unknown}\n             194..197 'val': {unknown}\n             210..236 'if let...rue {}': ()\n+            213..233 'let x ... &true': bool\n             217..225 'x @ true': &bool\n             221..225 'true': bool\n             221..225 'true': bool\n@@ -111,36 +113,42 @@ fn infer_literal_pattern() {\n             37..38 'x': &i32\n             46..208 '{     ...) {} }': ()\n             52..75 'if let...y() {}': ()\n+            55..72 'let \"f... any()': bool\n             59..64 '\"foo\"': &str\n             59..64 '\"foo\"': &str\n             67..70 'any': fn any<&str>() -> &str\n             67..72 'any()': &str\n             73..75 '{}': ()\n             80..99 'if let...y() {}': ()\n+            83..96 'let 1 = any()': bool\n             87..88 '1': i32\n             87..88 '1': i32\n             91..94 'any': fn any<i32>() -> i32\n             91..96 'any()': i32\n             97..99 '{}': ()\n             104..126 'if let...y() {}': ()\n+            107..123 'let 1u... any()': bool\n             111..115 '1u32': u32\n             111..115 '1u32': u32\n             118..121 'any': fn any<u32>() -> u32\n             118..123 'any()': u32\n             124..126 '{}': ()\n             131..153 'if let...y() {}': ()\n+            134..150 'let 1f... any()': bool\n             138..142 '1f32': f32\n             138..142 '1f32': f32\n             145..148 'any': fn any<f32>() -> f32\n             145..150 'any()': f32\n             151..153 '{}': ()\n             158..179 'if let...y() {}': ()\n+            161..176 'let 1.0 = any()': bool\n             165..168 '1.0': f64\n             165..168 '1.0': f64\n             171..174 'any': fn any<f64>() -> f64\n             171..176 'any()': f64\n             177..179 '{}': ()\n             184..206 'if let...y() {}': ()\n+            187..203 'let tr... any()': bool\n             191..195 'true': bool\n             191..195 'true': bool\n             198..201 'any': fn any<bool>() -> bool\n@@ -163,10 +171,12 @@ fn infer_range_pattern() {\n             8..9 'x': &i32\n             17..75 '{     ...2 {} }': ()\n             23..45 'if let...u32 {}': ()\n+            26..42 'let 1....= 2u32': bool\n             30..35 '1..76': u32\n             38..42 '2u32': u32\n             43..45 '{}': ()\n             50..73 'if let...u32 {}': ()\n+            53..70 'let 1....= 2u32': bool\n             57..63 '1..=76': u32\n             66..70 '2u32': u32\n             71..73 '{}': ()"}, {"sha": "c11a70fa663b8d1b935b35c775544baf90975dfb", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -2248,6 +2248,7 @@ fn generic_default_in_struct_literal() {\n             176..193 'Thing ...1i32 }': Thing<i32>\n             187..191 '1i32': i32\n             199..240 'if let...     }': ()\n+            202..221 'let Th... } = z': bool\n             206..217 'Thing { t }': Thing<i32>\n             214..215 't': i32\n             220..221 'z': Thing<i32>"}, {"sha": "ce9055c0909fa02d5f1471f76a8a3db684c58aae", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -18,7 +18,7 @@ use syntax::{\n     algo, ast,\n     display::{fn_as_proc_macro_label, macro_label},\n     match_ast, AstNode, Direction,\n-    SyntaxKind::{CONDITION, LET_STMT},\n+    SyntaxKind::{LET_EXPR, LET_STMT},\n     SyntaxToken, T,\n };\n \n@@ -484,7 +484,7 @@ fn local(db: &RootDatabase, it: hir::Local) -> Option<Markup> {\n             let let_kw = if ident\n                 .syntax()\n                 .parent()\n-                .map_or(false, |p| p.kind() == LET_STMT || p.kind() == CONDITION)\n+                .map_or(false, |p| p.kind() == LET_STMT || p.kind() == LET_EXPR)\n             {\n                 \"let \"\n             } else {"}, {"sha": "2ca756cbe04460390398d6176555ded76da1939d", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -243,7 +243,7 @@ fn is_named_constructor(\n     let expr = match_ast! {\n         match let_node {\n             ast::LetStmt(it) => it.initializer(),\n-            ast::Condition(it) => it.expr(),\n+            ast::LetExpr(it) => it.expr(),\n             _ => None,\n         }\n     }?;\n@@ -372,15 +372,10 @@ fn should_not_display_type_hint(\n             match node {\n                 ast::LetStmt(it) => return it.ty().is_some(),\n                 ast::Param(it) => return it.ty().is_some(),\n-                ast::MatchArm(_it) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n-                ast::IfExpr(it) => {\n-                    return it.condition().and_then(|condition| condition.pat()).is_some()\n-                        && pat_is_enum_variant(db, bind_pat, pat_ty);\n-                },\n-                ast::WhileExpr(it) => {\n-                    return it.condition().and_then(|condition| condition.pat()).is_some()\n-                        && pat_is_enum_variant(db, bind_pat, pat_ty);\n-                },\n+                ast::MatchArm(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n+                ast::LetExpr(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n+                ast::IfExpr(_) => return false,\n+                ast::WhileExpr(_) => return false,\n                 ast::ForExpr(it) => {\n                     // We *should* display hint only if user provided \"in {expr}\" and we know the type of expr (and it's not unit).\n                     // Type of expr should be iterable."}, {"sha": "274718e6ea90e900466640d40db4d8cdc2415af7", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -2,7 +2,7 @@ use hir::{known, AsAssocItem, Semantics};\n use ide_db::{\n     helpers::{\n         for_each_tail_expr,\n-        node_ext::{block_as_lone_tail, preorder_expr},\n+        node_ext::{block_as_lone_tail, is_pattern_cond, preorder_expr},\n         FamousDefs,\n     },\n     RootDatabase,\n@@ -45,8 +45,7 @@ pub(crate) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext) ->\n         return None;\n     }\n \n-    let cond = expr.condition().filter(|cond| !cond.is_pattern_cond())?;\n-    let cond = cond.expr()?;\n+    let cond = expr.condition().filter(|cond| !is_pattern_cond(cond.clone()))?;\n     let then = expr.then_branch()?;\n     let else_ = match expr.else_branch()? {\n         ast::ElseBranch::Block(b) => b,\n@@ -209,7 +208,7 @@ pub(crate) fn convert_bool_then_to_if(acc: &mut Assists, ctx: &AssistContext) ->\n                 _ => receiver,\n             };\n             let if_expr = make::expr_if(\n-                make::condition(cond, None),\n+                cond,\n                 closure_body.reset_indent(),\n                 Some(ast::ElseBranch::Block(make::block_expr(None, Some(none_path)))),\n             )"}, {"sha": "193d1cdfb2439cc4ce3a31491a27a328b562cb34", "filename": "crates/ide_assists/src/handlers/convert_to_guarded_return.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1,5 +1,6 @@\n use std::iter::once;\n \n+use ide_db::helpers::node_ext::{is_pattern_cond, single_let};\n use syntax::{\n     ast::{\n         self,\n@@ -48,25 +49,28 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     let cond = if_expr.condition()?;\n \n     // Check if there is an IfLet that we can handle.\n-    let if_let_pat = match cond.pat() {\n-        None => None, // No IfLet, supported.\n-        Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n-            let path = pat.path()?;\n-            if path.qualifier().is_some() {\n-                return None;\n-            }\n+    let (if_let_pat, cond_expr) = if is_pattern_cond(cond.clone()) {\n+        let let_ = single_let(cond)?;\n+        match let_.pat() {\n+            Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n+                let path = pat.path()?;\n+                if path.qualifier().is_some() {\n+                    return None;\n+                }\n \n-            let bound_ident = pat.fields().next().unwrap();\n-            if !ast::IdentPat::can_cast(bound_ident.syntax().kind()) {\n-                return None;\n-            }\n+                let bound_ident = pat.fields().next().unwrap();\n+                if !ast::IdentPat::can_cast(bound_ident.syntax().kind()) {\n+                    return None;\n+                }\n \n-            Some((path, bound_ident))\n+                (Some((path, bound_ident)), let_.expr()?)\n+            }\n+            _ => return None, // Unsupported IfLet.\n         }\n-        Some(_) => return None, // Unsupported IfLet.\n+    } else {\n+        (None, cond)\n     };\n \n-    let cond_expr = cond.expr()?;\n     let then_block = if_expr.then_branch()?;\n     let then_block = then_block.stmt_list()?;\n \n@@ -119,8 +123,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         let then_branch =\n                             make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n                         let cond = invert_boolean_expression(cond_expr);\n-                        make::expr_if(make::condition(cond, None), then_branch, None)\n-                            .indent(if_indent_level)\n+                        make::expr_if(cond, then_branch, None).indent(if_indent_level)\n                     };\n                     new_expr.syntax().clone_for_update()\n                 }"}, {"sha": "0fa2dcfbde1f7bea4a6f898631697e47b548316a", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1,5 +1,6 @@\n use std::iter::once;\n \n+use ide_db::helpers::node_ext::is_pattern_cond;\n use syntax::{\n     ast::{\n         self,\n@@ -42,7 +43,6 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n     let while_expr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n     let while_body = while_expr.loop_body()?;\n     let while_cond = while_expr.condition()?;\n-    let while_cond_expr = while_cond.expr()?;\n \n     let target = while_expr.syntax().text_range();\n     acc.add(\n@@ -55,19 +55,15 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n             let break_block =\n                 make::block_expr(once(make::expr_stmt(make::expr_break(None)).into()), None)\n                     .indent(while_indent_level);\n-            let block_expr = match while_cond.pat() {\n-                Some(_) => {\n-                    let if_expr = make::expr_if(while_cond, while_body, Some(break_block.into()));\n-                    let stmts = once(make::expr_stmt(if_expr).into());\n-                    make::block_expr(stmts, None)\n-                }\n-                None => {\n-                    let if_cond = make::condition(invert_boolean_expression(while_cond_expr), None);\n-                    let if_expr = make::expr_if(if_cond, break_block, None);\n-                    let stmts =\n-                        once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n-                    make::block_expr(stmts, while_body.tail_expr())\n-                }\n+            let block_expr = if is_pattern_cond(while_cond.clone()) {\n+                let if_expr = make::expr_if(while_cond, while_body, Some(break_block.into()));\n+                let stmts = once(make::expr_stmt(if_expr).into());\n+                make::block_expr(stmts, None)\n+            } else {\n+                let if_cond = invert_boolean_expression(while_cond);\n+                let if_expr = make::expr_if(if_cond, break_block, None);\n+                let stmts = once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n+                make::block_expr(stmts, while_body.tail_expr())\n             };\n \n             let replacement = make::expr_loop(block_expr.indent(while_indent_level));"}, {"sha": "21cfc76ac9bf6036d100c489218ca0deb6c171ca", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1219,28 +1219,26 @@ impl FlowHandler {\n                 let stmt = make::expr_stmt(action);\n                 let block = make::block_expr(iter::once(stmt.into()), None);\n                 let controlflow_break_path = make::path_from_text(\"ControlFlow::Break\");\n-                let condition = make::condition(\n+                let condition = make::expr_let(\n+                    make::tuple_struct_pat(\n+                        controlflow_break_path,\n+                        iter::once(make::wildcard_pat().into()),\n+                    )\n+                    .into(),\n                     call_expr,\n-                    Some(\n-                        make::tuple_struct_pat(\n-                            controlflow_break_path,\n-                            iter::once(make::wildcard_pat().into()),\n-                        )\n-                        .into(),\n-                    ),\n                 );\n-                make::expr_if(condition, block, None)\n+                make::expr_if(condition.into(), block, None)\n             }\n             FlowHandler::IfOption { action } => {\n                 let path = make::ext::ident_path(\"Some\");\n                 let value_pat = make::ext::simple_ident_pat(make::name(\"value\"));\n                 let pattern = make::tuple_struct_pat(path, iter::once(value_pat.into()));\n-                let cond = make::condition(call_expr, Some(pattern.into()));\n+                let cond = make::expr_let(pattern.into(), call_expr);\n                 let value = make::expr_path(make::ext::ident_path(\"value\"));\n                 let action_expr = action.make_result_handler(Some(value));\n                 let action_stmt = make::expr_stmt(action_expr);\n                 let then = make::block_expr(iter::once(action_stmt.into()), None);\n-                make::expr_if(cond, then, None)\n+                make::expr_if(cond.into(), then, None)\n             }\n             FlowHandler::MatchOption { none } => {\n                 let some_name = \"value\";"}, {"sha": "46f11f4af3248b849cba98974e9a35ce0519a644", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1,3 +1,4 @@\n+use ide_db::helpers::node_ext::is_pattern_cond;\n use syntax::{\n     ast::{self, AstNode},\n     T,\n@@ -34,12 +35,12 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n+    let cond = expr.condition()?;\n     // This assist should not apply for if-let.\n-    if expr.condition()?.is_pattern_cond() {\n+    if is_pattern_cond(cond.clone()) {\n         return None;\n     }\n \n-    let cond = expr.condition()?.expr()?;\n     let then_node = expr.then_branch()?.syntax().clone();\n     let else_block = match expr.else_branch()? {\n         ast::ElseBranch::Block(it) => it,"}, {"sha": "5c05cb921d9dcd66eae026c061f2e18ad686b89b", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 59, "deletions": 28, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1,8 +1,5 @@\n use syntax::{\n-    ast::{\n-        edit::AstNodeEdit, make, AstNode, BlockExpr, Condition, ElseBranch, Expr, IfExpr, MatchArm,\n-        Pat,\n-    },\n+    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, ElseBranch, Expr, IfExpr, MatchArm, Pat},\n     SyntaxKind::WHITESPACE,\n };\n \n@@ -44,18 +41,11 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n     }\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n \n-    // FIXME: support `if let` guards too\n-    if guard.let_token().is_some() {\n-        return None;\n-    }\n-    let guard_condition = guard.expr()?;\n+    let guard_condition = guard.condition()?;\n     let arm_expr = match_arm.expr()?;\n-    let if_expr = make::expr_if(\n-        make::condition(guard_condition, None),\n-        make::block_expr(None, Some(arm_expr.clone())),\n-        None,\n-    )\n-    .indent(arm_expr.indent_level());\n+    let if_expr =\n+        make::expr_if(guard_condition, make::block_expr(None, Some(arm_expr.clone())), None)\n+            .indent(arm_expr.indent_level());\n \n     let target = guard.syntax().text_range();\n     acc.add(\n@@ -193,17 +183,13 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n     )\n }\n \n-// Parses an if-else-if chain to get the conditons and the then branches until we encounter an else\n+// Parses an if-else-if chain to get the conditions and the then branches until we encounter an else\n // branch or the end.\n-fn parse_if_chain(if_expr: IfExpr) -> Option<(Vec<(Condition, BlockExpr)>, Option<BlockExpr>)> {\n+fn parse_if_chain(if_expr: IfExpr) -> Option<(Vec<(Expr, BlockExpr)>, Option<BlockExpr>)> {\n     let mut conds_blocks = Vec::new();\n     let mut curr_if = if_expr;\n     let tail = loop {\n         let cond = curr_if.condition()?;\n-        // Not support moving if let to arm guard\n-        if cond.is_pattern_cond() {\n-            return None;\n-        }\n         conds_blocks.push((cond, curr_if.then_branch()?));\n         match curr_if.else_branch() {\n             Some(ElseBranch::IfExpr(e)) => {\n@@ -280,6 +266,31 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn move_let_guard_to_arm_body_works() {\n+        check_assist(\n+            move_guard_to_arm_body,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x $0if (let 1 = x) => false,\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if (let 1 = x) {\n+            false\n+        },\n+        _ => true\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn move_guard_to_arm_body_works_complex_match() {\n         check_assist(\n@@ -440,13 +451,21 @@ fn main() {\n     }\n \n     #[test]\n-    fn move_arm_cond_to_match_guard_if_let_not_works() {\n-        check_assist_not_applicable(\n+    fn move_arm_cond_to_match_guard_if_let_works() {\n+        check_assist(\n             move_arm_cond_to_match_guard,\n             r#\"\n fn main() {\n     match 92 {\n-        x => if let 62 = x { $0false },\n+        x => if let 62 = x && true { $0false },\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if let 62 = x && true => false,\n         _ => true\n     }\n }\n@@ -898,7 +917,7 @@ fn main() {\n \n     #[test]\n     fn move_arm_cond_to_match_guard_elseif_iflet() {\n-        check_assist_not_applicable(\n+        check_assist(\n             move_arm_cond_to_match_guard,\n             r#\"\n fn main() {\n@@ -915,9 +934,21 @@ fn main() {\n             4\n         },\n     }\n-}\n-\"#,\n-        )\n+}\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => 0,\n+        x if x > 10 => 1,\n+        x if x > 5 => 2,\n+        x if let 4 = 4 => {\n+            42;\n+            3\n+        }\n+        x => 4,\n+    }\n+}\"#,\n+        );\n     }\n \n     #[test]"}, {"sha": "b594c64c412dac5eb2a794768645257e6414887f", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1,7 +1,12 @@\n use std::iter::{self, successors};\n \n use either::Either;\n-use ide_db::{defs::NameClass, ty_filter::TryEnum, RootDatabase};\n+use ide_db::{\n+    defs::NameClass,\n+    helpers::node_ext::{is_pattern_cond, single_let},\n+    ty_filter::TryEnum,\n+    RootDatabase,\n+};\n use syntax::{\n     ast::{\n         self,\n@@ -60,23 +65,32 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n             None\n         }\n     });\n-    let scrutinee_to_be_expr = if_expr.condition()?.expr()?;\n+    let scrutinee_to_be_expr = if_expr.condition()?;\n+    let scrutinee_to_be_expr = match single_let(scrutinee_to_be_expr.clone()) {\n+        Some(cond) => cond.expr()?,\n+        None => scrutinee_to_be_expr,\n+    };\n \n     let mut pat_seen = false;\n     let mut cond_bodies = Vec::new();\n     for if_expr in if_exprs {\n         let cond = if_expr.condition()?;\n-        let expr = cond.expr()?;\n-        let cond = match cond.pat() {\n-            Some(pat) => {\n+        let cond = match single_let(cond.clone()) {\n+            Some(let_) => {\n+                let pat = let_.pat()?;\n+                let expr = let_.expr()?;\n+                // FIXME: If one `let` is wrapped in parentheses and the second is not,\n+                // we'll exit here.\n                 if scrutinee_to_be_expr.syntax().text() != expr.syntax().text() {\n                     // Only if all condition expressions are equal we can merge them into a match\n                     return None;\n                 }\n                 pat_seen = true;\n                 Either::Left(pat)\n             }\n-            None => Either::Right(expr),\n+            // Multiple `let`, unsupported.\n+            None if is_pattern_cond(cond.clone()) => return None,\n+            None => Either::Right(cond),\n         };\n         let body = if_expr.then_branch()?;\n         cond_bodies.push((cond, body));\n@@ -217,11 +231,11 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext)\n                 }\n             }\n \n-            let condition = make::condition(scrutinee, Some(if_let_pat));\n+            let condition = make::expr_let(if_let_pat, scrutinee);\n             let then_block = make_block_expr(then_expr.reset_indent());\n             let else_expr = if is_empty_expr(&else_expr) { None } else { Some(else_expr) };\n             let if_let_expr = make::expr_if(\n-                condition,\n+                condition.into(),\n                 then_block,\n                 else_expr.map(make_block_expr).map(ast::ElseBranch::Block),\n             )\n@@ -372,6 +386,18 @@ impl VariantData {\n         )\n     }\n \n+    #[test]\n+    fn test_if_let_with_match_let_chain() {\n+        check_assist_not_applicable(\n+            replace_if_let_with_match,\n+            r#\"\n+fn main() {\n+    if $0let true = true && let Some(1) = None {}\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_if_let_with_match_basic() {\n         check_assist("}, {"sha": "a5fa8a110d31eed11ca4b4f0b9cad6b0a46fc8bc", "filename": "crates/ide_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n \n             let block =\n                 make::ext::empty_block_expr().indent(IndentLevel::from_node(let_stmt.syntax()));\n-            let if_ = make::expr_if(make::condition(init, Some(pat)), block, None);\n+            let if_ = make::expr_if(make::expr_let(pat, init).into(), block, None);\n             let stmt = make::expr_stmt(if_);\n \n             edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));"}, {"sha": "e986c28b1466e55785b7f8d9287ed150de301243", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -575,6 +575,14 @@ impl<'a> CompletionContext<'a> {\n \n                         (ty, name)\n                     },\n+                    ast::LetExpr(it) => {\n+                        cov_mark::hit!(expected_type_if_let_without_leading_char);\n+                        let ty = it.pat()\n+                            .and_then(|pat| self.sema.type_of_pat(&pat))\n+                            .or_else(|| it.expr().and_then(|it| self.sema.type_of_expr(&it)))\n+                            .map(TypeInfo::original);\n+                        (ty, None)\n+                    },\n                     ast::ArgList(_) => {\n                         cov_mark::hit!(expected_type_fn_param);\n                         ActiveParameter::at_token(\n@@ -641,9 +649,7 @@ impl<'a> CompletionContext<'a> {\n                         (ty, None)\n                     },\n                     ast::IfExpr(it) => {\n-                        cov_mark::hit!(expected_type_if_let_without_leading_char);\n                         let ty = it.condition()\n-                            .and_then(|cond| cond.expr())\n                             .and_then(|e| self.sema.type_of_expr(&e))\n                             .map(TypeInfo::original);\n                         (ty, None)\n@@ -939,7 +945,7 @@ fn pattern_context_for(original_file: &SyntaxNode, pat: ast::Pat) -> PatternCont\n                         return (PatternRefutability::Irrefutable, has_type_ascription)\n                     },\n                     ast::MatchArm(_) => PatternRefutability::Refutable,\n-                    ast::Condition(_) => PatternRefutability::Refutable,\n+                    ast::LetExpr(_) => PatternRefutability::Refutable,\n                     ast::ForExpr(_) => PatternRefutability::Irrefutable,\n                     _ => PatternRefutability::Irrefutable,\n                 }"}, {"sha": "9c6d3775c7f2b9ce30b70601e969bc1b8f313ce5", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -226,6 +226,7 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n         | ast::Expr::TryExpr(_)\n         | ast::Expr::TupleExpr(_)\n         | ast::Expr::WhileExpr(_)\n+        | ast::Expr::LetExpr(_)\n         | ast::Expr::YieldExpr(_) => cb(expr),\n     }\n }"}, {"sha": "5df3ed1366f15d5d5d1787e1a4bd663fa45f1773", "filename": "crates/ide_db/src/helpers/node_ext.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_db%2Fsrc%2Fhelpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fide_db%2Fsrc%2Fhelpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fnode_ext.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -216,3 +216,29 @@ pub fn vis_eq(this: &ast::Visibility, other: &ast::Visibility) -> bool {\n         _ => false,\n     }\n }\n+\n+/// Returns the `let` only if there is exactly one (that is, `let pat = expr`\n+/// or `((let pat = expr))`, but not `let pat = expr && expr` or `non_let_expr`).\n+pub fn single_let(expr: ast::Expr) -> Option<ast::LetExpr> {\n+    match expr {\n+        ast::Expr::ParenExpr(expr) => expr.expr().and_then(single_let),\n+        ast::Expr::LetExpr(expr) => Some(expr),\n+        _ => None,\n+    }\n+}\n+\n+pub fn is_pattern_cond(expr: ast::Expr) -> bool {\n+    match expr {\n+        ast::Expr::BinExpr(expr)\n+            if expr.op_kind() == Some(ast::BinaryOp::LogicOp(ast::LogicOp::And)) =>\n+        {\n+            expr.lhs()\n+                .map(is_pattern_cond)\n+                .or_else(|| expr.rhs().map(is_pattern_cond))\n+                .unwrap_or(false)\n+        }\n+        ast::Expr::ParenExpr(expr) => expr.expr().map_or(false, is_pattern_cond),\n+        ast::Expr::LetExpr(_) => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "a40db15049de2bb1a9cd0a77ecc1a1e7d8e78eae", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -29,6 +29,15 @@ fn expr_no_struct(p: &mut Parser) {\n     expr_bp(p, None, r, 1);\n }\n \n+/// Parses the expression in `let pattern = expression`.\n+/// It needs to be parsed with lower precedence than `&&`, so that\n+/// `if let true = true && false` is parsed as `if (let true = true) && (true)`\n+/// and not `if let true = (true && true)`.\n+fn expr_let(p: &mut Parser) {\n+    let r = Restrictions { forbid_structs: true, prefer_stmt: false };\n+    expr_bp(p, None, r, 5);\n+}\n+\n pub(super) fn stmt(p: &mut Parser, semicolon: Semicolon) {\n     if p.eat(T![;]) {\n         return;\n@@ -185,6 +194,7 @@ fn current_op(p: &Parser) -> (u8, SyntaxKind) {\n         T![%] if p.at(T![%=])  => (1,  T![%=]),\n         T![%]                  => (11, T![%]),\n         T![&] if p.at(T![&=])  => (1,  T![&=]),\n+        // If you update this, remember to update `expr_let()` too.\n         T![&] if p.at(T![&&])  => (4,  T![&&]),\n         T![&]                  => (8,  T![&]),\n         T![/] if p.at(T![/=])  => (1,  T![/=]),"}, {"sha": "e2c1b1fec579ce7358aef88a16b30f1d9d0f43d5", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -79,6 +79,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             closure_expr(p)\n         }\n         T![if] => if_expr(p),\n+        T![let] => let_expr(p),\n \n         T![loop] => loop_expr(p, None),\n         T![box] => box_expr(p, None),\n@@ -286,7 +287,7 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![if]));\n     let m = p.start();\n     p.bump(T![if]);\n-    condition(p);\n+    expr_no_struct(p);\n     block_expr(p);\n     if p.at(T![else]) {\n         p.bump(T![else]);\n@@ -335,7 +336,7 @@ fn while_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![while]));\n     let m = m.unwrap_or_else(|| p.start());\n     p.bump(T![while]);\n-    condition(p);\n+    expr_no_struct(p);\n     block_expr(p);\n     m.complete(p, WHILE_EXPR)\n }\n@@ -355,22 +356,18 @@ fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     m.complete(p, FOR_EXPR)\n }\n \n-// test cond\n-// fn foo() { if let Some(_) = None {} }\n-// fn bar() {\n-//     if let Some(_) | Some(_) = None {}\n-//     if let | Some(_) = None {}\n-//     while let Some(_) | Some(_) = None {}\n-//     while let | Some(_) = None {}\n+// test let_expr\n+// fn foo() {\n+//     if let Some(_) = None && true {}\n+//     while 1 == 5 && (let None = None) {}\n // }\n-fn condition(p: &mut Parser) {\n+fn let_expr(p: &mut Parser) -> CompletedMarker {\n     let m = p.start();\n-    if p.eat(T![let]) {\n-        patterns::pattern_top(p);\n-        p.expect(T![=]);\n-    }\n-    expr_no_struct(p);\n-    m.complete(p, CONDITION);\n+    p.bump(T![let]);\n+    patterns::pattern_top(p);\n+    p.expect(T![=]);\n+    expr_let(p);\n+    m.complete(p, LET_EXPR)\n }\n \n // test match_expr\n@@ -482,10 +479,6 @@ fn match_guard(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![if]));\n     let m = p.start();\n     p.bump(T![if]);\n-    if p.eat(T![let]) {\n-        patterns::pattern_top(p);\n-        p.expect(T![=]);\n-    }\n     expr(p);\n     m.complete(p, MATCH_GUARD)\n }"}, {"sha": "d04b5dbf0087b08fc6efc8c754d5f005af6a8345", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -178,7 +178,6 @@ pub enum SyntaxKind {\n     CLOSURE_EXPR,\n     IF_EXPR,\n     WHILE_EXPR,\n-    CONDITION,\n     LOOP_EXPR,\n     FOR_EXPR,\n     CONTINUE_EXPR,\n@@ -188,6 +187,7 @@ pub enum SyntaxKind {\n     STMT_LIST,\n     RETURN_EXPR,\n     YIELD_EXPR,\n+    LET_EXPR,\n     MATCH_EXPR,\n     MATCH_ARM_LIST,\n     MATCH_ARM,"}, {"sha": "eb640dc7fc74b0e89b015e66c7ba4b0527af6606", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -289,17 +289,19 @@ fn expr() {\n         TopEntryPoint::Expr,\n         \"let _ = 0;\",\n         expect![[r#\"\n-        ERROR\n-          LET_KW \"let\"\n-          WHITESPACE \" \"\n-          UNDERSCORE \"_\"\n-          WHITESPACE \" \"\n-          EQ \"=\"\n-          WHITESPACE \" \"\n-          INT_NUMBER \"0\"\n-          SEMICOLON \";\"\n-        error 0: expected expression\n-    \"#]],\n+            ERROR\n+              LET_EXPR\n+                LET_KW \"let\"\n+                WHITESPACE \" \"\n+                WILDCARD_PAT\n+                  UNDERSCORE \"_\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                LITERAL\n+                  INT_NUMBER \"0\"\n+              SEMICOLON \";\"\n+        \"#]],\n     );\n }\n "}, {"sha": "60b2fe98755e0de4a478ed5c33256fdf9d9ce346", "filename": "crates/parser/test_data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -29,9 +29,8 @@ SOURCE_FILE\n     IF_EXPR\n       IF_KW \"if\"\n       WHITESPACE \" \"\n-      CONDITION\n-        LITERAL\n-          TRUE_KW \"true\"\n+      LITERAL\n+        TRUE_KW \"true\"\n       WHITESPACE \" \"\n       BLOCK_EXPR\n         STMT_LIST"}, {"sha": "5108d5a49be3284ce27c6f5ec502d8764fb82a8b", "filename": "crates/parser/test_data/parser/err/0019_let_recover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -1,5 +1,5 @@\n fn foo() {\n-    let foo =\n+    let foo = 11\n     let bar = 1;\n     let\n     let baz = 92;"}, {"sha": "7d62e0cc14f5044767aa0f340412c58a0459ae43", "filename": "crates/parser/test_data/parser/err/0019_let_recover.txt", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -20,6 +20,9 @@ SOURCE_FILE\n               IDENT \"foo\"\n           WHITESPACE \" \"\n           EQ \"=\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            INT_NUMBER \"11\"\n         WHITESPACE \"\\n    \"\n         LET_STMT\n           LET_KW \"let\"\n@@ -57,9 +60,8 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -73,9 +75,8 @@ SOURCE_FILE\n           WHILE_EXPR\n             WHILE_KW \"while\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -95,13 +96,12 @@ SOURCE_FILE\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n-error 24: expected expression\n-error 24: expected SEMICOLON\n-error 49: expected pattern\n-error 49: expected SEMICOLON\n-error 75: expected pattern\n-error 75: expected SEMICOLON\n-error 98: expected pattern\n-error 98: expected SEMICOLON\n-error 124: expected pattern\n-error 124: expected SEMICOLON\n+error 27: expected SEMICOLON\n+error 52: expected pattern\n+error 52: expected SEMICOLON\n+error 78: expected pattern\n+error 78: expected SEMICOLON\n+error 101: expected pattern\n+error 101: expected SEMICOLON\n+error 127: expected pattern\n+error 127: expected SEMICOLON"}, {"sha": "82e6a11249b23628180af8113767e8b2d578424a", "filename": "crates/parser/test_data/parser/err/0024_many_type_parens.txt", "status": "modified", "additions": 112, "deletions": 102, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -180,116 +180,118 @@ SOURCE_FILE\n         ERROR\n           PLUS \"+\"\n         WHITESPACE \" \"\n-        EXPR_STMT\n-          TUPLE_EXPR\n-            L_PAREN \"(\"\n-            FOR_EXPR\n-              FOR_KW \"for\"\n-              PATH_PAT\n-                PATH\n-                  PATH_SEGMENT\n-                    L_ANGLE \"<\"\n-                    ERROR\n-                      LIFETIME_IDENT \"'a\"\n-                    R_ANGLE \">\"\n-              WHITESPACE \" \"\n+        TUPLE_EXPR\n+          L_PAREN \"(\"\n+          FOR_EXPR\n+            FOR_KW \"for\"\n+            PATH_PAT\n+              PATH\n+                PATH_SEGMENT\n+                  L_ANGLE \"<\"\n+                  ERROR\n+                    LIFETIME_IDENT \"'a\"\n+                  R_ANGLE \">\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n               BIN_EXPR\n                 BIN_EXPR\n                   BIN_EXPR\n-                    BIN_EXPR\n-                      PATH_EXPR\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"Trait\"\n-                      L_ANGLE \"<\"\n-                      ERROR\n-                        LIFETIME_IDENT \"'a\"\n-                    R_ANGLE \">\"\n-                    ERROR\n-                      R_PAREN \")\"\n-                  WHITESPACE \" \"\n-                  PLUS \"+\"\n-                  WHITESPACE \" \"\n-                  PAREN_EXPR\n-                    L_PAREN \"(\"\n                     PATH_EXPR\n                       PATH\n                         PATH_SEGMENT\n                           NAME_REF\n-                            IDENT \"Copy\"\n+                            IDENT \"Trait\"\n+                    L_ANGLE \"<\"\n+                    ERROR\n+                      LIFETIME_IDENT \"'a\"\n+                  R_ANGLE \">\"\n+                  ERROR\n                     R_PAREN \")\"\n-                R_ANGLE \">\"\n-                ERROR\n-                  SEMICOLON \";\"\n-        WHITESPACE \"\\n    \"\n-        LET_STMT\n-          LET_KW \"let\"\n-          WHITESPACE \" \"\n-          WILDCARD_PAT\n-            UNDERSCORE \"_\"\n-          COLON \":\"\n+                WHITESPACE \" \"\n+                PLUS \"+\"\n+                WHITESPACE \" \"\n+                PAREN_EXPR\n+                  L_PAREN \"(\"\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"Copy\"\n+                  R_PAREN \")\"\n+              R_ANGLE \">\"\n+              ERROR\n+                SEMICOLON \";\"\n+          WHITESPACE \"\\n    \"\n+          LET_EXPR\n+            LET_KW \"let\"\n+            WHITESPACE \" \"\n+            WILDCARD_PAT\n+              UNDERSCORE \"_\"\n+            ERROR\n+              COLON \":\"\n           WHITESPACE \" \"\n-          DYN_TRAIT_TYPE\n-            TYPE_BOUND_LIST\n-              TYPE_BOUND\n-                PATH_TYPE\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Box\"\n-                      GENERIC_ARG_LIST\n-                        L_ANGLE \"<\"\n-                        TYPE_ARG\n-                          PAREN_TYPE\n-                            L_PAREN \"(\"\n-                            FOR_TYPE\n-                              FOR_KW \"for\"\n-                              GENERIC_PARAM_LIST\n-                                L_ANGLE \"<\"\n-                                LIFETIME_PARAM\n-                                  LIFETIME\n-                                    LIFETIME_IDENT \"'a\"\n-                                R_ANGLE \">\"\n-                              WHITESPACE \" \"\n-                              PATH_TYPE\n-                                PATH\n-                                  PATH_SEGMENT\n-                                    NAME_REF\n-                                      IDENT \"Trait\"\n-                                    GENERIC_ARG_LIST\n-                                      L_ANGLE \"<\"\n-                                      LIFETIME_ARG\n-                                        LIFETIME\n-                                          LIFETIME_IDENT \"'a\"\n-                                      R_ANGLE \">\"\n-                            R_PAREN \")\"\n-              WHITESPACE \" \"\n-              PLUS \"+\"\n-              WHITESPACE \" \"\n-              TYPE_BOUND\n-                L_PAREN \"(\"\n-                PATH_TYPE\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Copy\"\n-                R_PAREN \")\"\n-              WHITESPACE \" \"\n-              PLUS \"+\"\n-              WHITESPACE \" \"\n-              TYPE_BOUND\n+          BIN_EXPR\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Box\"\n+              L_ANGLE \"<\"\n+              TUPLE_EXPR\n                 L_PAREN \"(\"\n-                QUESTION \"?\"\n-                PATH_TYPE\n+                FOR_EXPR\n+                  FOR_KW \"for\"\n+                  PATH_PAT\n+                    PATH\n+                      PATH_SEGMENT\n+                        L_ANGLE \"<\"\n+                        ERROR\n+                          LIFETIME_IDENT \"'a\"\n+                        R_ANGLE \">\"\n+                  WHITESPACE \" \"\n+                  BIN_EXPR\n+                    BIN_EXPR\n+                      BIN_EXPR\n+                        BIN_EXPR\n+                          PATH_EXPR\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"Trait\"\n+                          L_ANGLE \"<\"\n+                          ERROR\n+                            LIFETIME_IDENT \"'a\"\n+                        R_ANGLE \">\"\n+                        ERROR\n+                          R_PAREN \")\"\n+                      WHITESPACE \" \"\n+                      PLUS \"+\"\n+                      WHITESPACE \" \"\n+                      PAREN_EXPR\n+                        L_PAREN \"(\"\n+                        PATH_EXPR\n+                          PATH\n+                            PATH_SEGMENT\n+                              NAME_REF\n+                                IDENT \"Copy\"\n+                        R_PAREN \")\"\n+                    WHITESPACE \" \"\n+                    PLUS \"+\"\n+                    WHITESPACE \" \"\n+                    PAREN_EXPR\n+                      L_PAREN \"(\"\n+                      ERROR\n+                        QUESTION \"?\"\n+                PATH_EXPR\n                   PATH\n                     PATH_SEGMENT\n                       NAME_REF\n                         IDENT \"Sized\"\n                 R_PAREN \")\"\n-        ERROR\n-          R_ANGLE \">\"\n-        SEMICOLON \";\"\n+            R_ANGLE \">\"\n+            ERROR\n+              SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n@@ -312,10 +314,18 @@ error 168: expected expression\n error 179: expected expression\n error 180: expected a block\n error 180: expected COMMA\n-error 180: expected expression\n-error 180: expected R_PAREN\n-error 180: expected SEMICOLON\n-error 215: expected COMMA\n-error 215: expected R_ANGLE\n-error 235: expected SEMICOLON\n-error 235: expected expression\n+error 190: expected EQ\n+error 190: expected expression\n+error 191: expected COMMA\n+error 201: expected type\n+error 204: expected IN_KW\n+error 211: expected expression\n+error 214: expected expression\n+error 228: expected expression\n+error 229: expected R_PAREN\n+error 229: expected a block\n+error 229: expected COMMA\n+error 236: expected expression\n+error 237: expected COMMA\n+error 237: expected expression\n+error 237: expected R_PAREN"}, {"sha": "3aa330f55d151a5d1525baa98bc0ca15c60939b1", "filename": "crates/parser/test_data/parser/inline/ok/0030_cond.rast", "status": "removed", "additions": 0, "deletions": 209, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/c149c3682e6fec3b432dc567bbf844b5ef04be30/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c149c3682e6fec3b432dc567bbf844b5ef04be30/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast?ref=c149c3682e6fec3b432dc567bbf844b5ef04be30", "patch": "@@ -1,209 +0,0 @@\n-SOURCE_FILE@0..197\n-  FN@0..37\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..37\n-      STMT_LIST@9..37\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \" \"\n-        IF_EXPR@11..35\n-          IF_KW@11..13 \"if\"\n-          WHITESPACE@13..14 \" \"\n-          CONDITION@14..32\n-            LET_KW@14..17 \"let\"\n-            WHITESPACE@17..18 \" \"\n-            TUPLE_STRUCT_PAT@18..25\n-              PATH@18..22\n-                PATH_SEGMENT@18..22\n-                  NAME_REF@18..22\n-                    IDENT@18..22 \"Some\"\n-              L_PAREN@22..23 \"(\"\n-              WILDCARD_PAT@23..24\n-                UNDERSCORE@23..24 \"_\"\n-              R_PAREN@24..25 \")\"\n-            WHITESPACE@25..26 \" \"\n-            EQ@26..27 \"=\"\n-            WHITESPACE@27..28 \" \"\n-            PATH_EXPR@28..32\n-              PATH@28..32\n-                PATH_SEGMENT@28..32\n-                  NAME_REF@28..32\n-                    IDENT@28..32 \"None\"\n-          WHITESPACE@32..33 \" \"\n-          BLOCK_EXPR@33..35\n-            STMT_LIST@33..35\n-              L_CURLY@33..34 \"{\"\n-              R_CURLY@34..35 \"}\"\n-        WHITESPACE@35..36 \" \"\n-        R_CURLY@36..37 \"}\"\n-  WHITESPACE@37..38 \"\\n\"\n-  FN@38..196\n-    FN_KW@38..40 \"fn\"\n-    WHITESPACE@40..41 \" \"\n-    NAME@41..44\n-      IDENT@41..44 \"bar\"\n-    PARAM_LIST@44..46\n-      L_PAREN@44..45 \"(\"\n-      R_PAREN@45..46 \")\"\n-    WHITESPACE@46..47 \" \"\n-    BLOCK_EXPR@47..196\n-      STMT_LIST@47..196\n-        L_CURLY@47..48 \"{\"\n-        WHITESPACE@48..53 \"\\n    \"\n-        EXPR_STMT@53..87\n-          IF_EXPR@53..87\n-            IF_KW@53..55 \"if\"\n-            WHITESPACE@55..56 \" \"\n-            CONDITION@56..84\n-              LET_KW@56..59 \"let\"\n-              WHITESPACE@59..60 \" \"\n-              OR_PAT@60..77\n-                TUPLE_STRUCT_PAT@60..67\n-                  PATH@60..64\n-                    PATH_SEGMENT@60..64\n-                      NAME_REF@60..64\n-                        IDENT@60..64 \"Some\"\n-                  L_PAREN@64..65 \"(\"\n-                  WILDCARD_PAT@65..66\n-                    UNDERSCORE@65..66 \"_\"\n-                  R_PAREN@66..67 \")\"\n-                WHITESPACE@67..68 \" \"\n-                PIPE@68..69 \"|\"\n-                WHITESPACE@69..70 \" \"\n-                TUPLE_STRUCT_PAT@70..77\n-                  PATH@70..74\n-                    PATH_SEGMENT@70..74\n-                      NAME_REF@70..74\n-                        IDENT@70..74 \"Some\"\n-                  L_PAREN@74..75 \"(\"\n-                  WILDCARD_PAT@75..76\n-                    UNDERSCORE@75..76 \"_\"\n-                  R_PAREN@76..77 \")\"\n-              WHITESPACE@77..78 \" \"\n-              EQ@78..79 \"=\"\n-              WHITESPACE@79..80 \" \"\n-              PATH_EXPR@80..84\n-                PATH@80..84\n-                  PATH_SEGMENT@80..84\n-                    NAME_REF@80..84\n-                      IDENT@80..84 \"None\"\n-            WHITESPACE@84..85 \" \"\n-            BLOCK_EXPR@85..87\n-              STMT_LIST@85..87\n-                L_CURLY@85..86 \"{\"\n-                R_CURLY@86..87 \"}\"\n-        WHITESPACE@87..92 \"\\n    \"\n-        EXPR_STMT@92..118\n-          IF_EXPR@92..118\n-            IF_KW@92..94 \"if\"\n-            WHITESPACE@94..95 \" \"\n-            CONDITION@95..115\n-              LET_KW@95..98 \"let\"\n-              WHITESPACE@98..99 \" \"\n-              PIPE@99..100 \"|\"\n-              WHITESPACE@100..101 \" \"\n-              TUPLE_STRUCT_PAT@101..108\n-                PATH@101..105\n-                  PATH_SEGMENT@101..105\n-                    NAME_REF@101..105\n-                      IDENT@101..105 \"Some\"\n-                L_PAREN@105..106 \"(\"\n-                WILDCARD_PAT@106..107\n-                  UNDERSCORE@106..107 \"_\"\n-                R_PAREN@107..108 \")\"\n-              WHITESPACE@108..109 \" \"\n-              EQ@109..110 \"=\"\n-              WHITESPACE@110..111 \" \"\n-              PATH_EXPR@111..115\n-                PATH@111..115\n-                  PATH_SEGMENT@111..115\n-                    NAME_REF@111..115\n-                      IDENT@111..115 \"None\"\n-            WHITESPACE@115..116 \" \"\n-            BLOCK_EXPR@116..118\n-              STMT_LIST@116..118\n-                L_CURLY@116..117 \"{\"\n-                R_CURLY@117..118 \"}\"\n-        WHITESPACE@118..123 \"\\n    \"\n-        EXPR_STMT@123..160\n-          WHILE_EXPR@123..160\n-            WHILE_KW@123..128 \"while\"\n-            WHITESPACE@128..129 \" \"\n-            CONDITION@129..157\n-              LET_KW@129..132 \"let\"\n-              WHITESPACE@132..133 \" \"\n-              OR_PAT@133..150\n-                TUPLE_STRUCT_PAT@133..140\n-                  PATH@133..137\n-                    PATH_SEGMENT@133..137\n-                      NAME_REF@133..137\n-                        IDENT@133..137 \"Some\"\n-                  L_PAREN@137..138 \"(\"\n-                  WILDCARD_PAT@138..139\n-                    UNDERSCORE@138..139 \"_\"\n-                  R_PAREN@139..140 \")\"\n-                WHITESPACE@140..141 \" \"\n-                PIPE@141..142 \"|\"\n-                WHITESPACE@142..143 \" \"\n-                TUPLE_STRUCT_PAT@143..150\n-                  PATH@143..147\n-                    PATH_SEGMENT@143..147\n-                      NAME_REF@143..147\n-                        IDENT@143..147 \"Some\"\n-                  L_PAREN@147..148 \"(\"\n-                  WILDCARD_PAT@148..149\n-                    UNDERSCORE@148..149 \"_\"\n-                  R_PAREN@149..150 \")\"\n-              WHITESPACE@150..151 \" \"\n-              EQ@151..152 \"=\"\n-              WHITESPACE@152..153 \" \"\n-              PATH_EXPR@153..157\n-                PATH@153..157\n-                  PATH_SEGMENT@153..157\n-                    NAME_REF@153..157\n-                      IDENT@153..157 \"None\"\n-            WHITESPACE@157..158 \" \"\n-            BLOCK_EXPR@158..160\n-              STMT_LIST@158..160\n-                L_CURLY@158..159 \"{\"\n-                R_CURLY@159..160 \"}\"\n-        WHITESPACE@160..165 \"\\n    \"\n-        WHILE_EXPR@165..194\n-          WHILE_KW@165..170 \"while\"\n-          WHITESPACE@170..171 \" \"\n-          CONDITION@171..191\n-            LET_KW@171..174 \"let\"\n-            WHITESPACE@174..175 \" \"\n-            PIPE@175..176 \"|\"\n-            WHITESPACE@176..177 \" \"\n-            TUPLE_STRUCT_PAT@177..184\n-              PATH@177..181\n-                PATH_SEGMENT@177..181\n-                  NAME_REF@177..181\n-                    IDENT@177..181 \"Some\"\n-              L_PAREN@181..182 \"(\"\n-              WILDCARD_PAT@182..183\n-                UNDERSCORE@182..183 \"_\"\n-              R_PAREN@183..184 \")\"\n-            WHITESPACE@184..185 \" \"\n-            EQ@185..186 \"=\"\n-            WHITESPACE@186..187 \" \"\n-            PATH_EXPR@187..191\n-              PATH@187..191\n-                PATH_SEGMENT@187..191\n-                  NAME_REF@187..191\n-                    IDENT@187..191 \"None\"\n-          WHITESPACE@191..192 \" \"\n-          BLOCK_EXPR@192..194\n-            STMT_LIST@192..194\n-              L_CURLY@192..193 \"{\"\n-              R_CURLY@193..194 \"}\"\n-        WHITESPACE@194..195 \"\\n\"\n-        R_CURLY@195..196 \"}\"\n-  WHITESPACE@196..197 \"\\n\""}, {"sha": "2552a2621f9e4fb3dd4179f21f533d104a589834", "filename": "crates/parser/test_data/parser/inline/ok/0030_cond.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c149c3682e6fec3b432dc567bbf844b5ef04be30/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c149c3682e6fec3b432dc567bbf844b5ef04be30/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rs?ref=c149c3682e6fec3b432dc567bbf844b5ef04be30", "patch": "@@ -1,7 +0,0 @@\n-fn foo() { if let Some(_) = None {} }\n-fn bar() {\n-    if let Some(_) | Some(_) = None {}\n-    if let | Some(_) = None {}\n-    while let Some(_) | Some(_) = None {}\n-    while let | Some(_) = None {}\n-}"}, {"sha": "5b8993701398842eb6f050cdf199f2ed13fb3178", "filename": "crates/parser/test_data/parser/inline/ok/0030_cond.txt", "status": "removed", "additions": 0, "deletions": 209, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/c149c3682e6fec3b432dc567bbf844b5ef04be30/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c149c3682e6fec3b432dc567bbf844b5ef04be30/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.txt?ref=c149c3682e6fec3b432dc567bbf844b5ef04be30", "patch": "@@ -1,209 +0,0 @@\n-SOURCE_FILE\n-  FN\n-    FN_KW \"fn\"\n-    WHITESPACE \" \"\n-    NAME\n-      IDENT \"foo\"\n-    PARAM_LIST\n-      L_PAREN \"(\"\n-      R_PAREN \")\"\n-    WHITESPACE \" \"\n-    BLOCK_EXPR\n-      STMT_LIST\n-        L_CURLY \"{\"\n-        WHITESPACE \" \"\n-        IF_EXPR\n-          IF_KW \"if\"\n-          WHITESPACE \" \"\n-          CONDITION\n-            LET_KW \"let\"\n-            WHITESPACE \" \"\n-            TUPLE_STRUCT_PAT\n-              PATH\n-                PATH_SEGMENT\n-                  NAME_REF\n-                    IDENT \"Some\"\n-              L_PAREN \"(\"\n-              WILDCARD_PAT\n-                UNDERSCORE \"_\"\n-              R_PAREN \")\"\n-            WHITESPACE \" \"\n-            EQ \"=\"\n-            WHITESPACE \" \"\n-            PATH_EXPR\n-              PATH\n-                PATH_SEGMENT\n-                  NAME_REF\n-                    IDENT \"None\"\n-          WHITESPACE \" \"\n-          BLOCK_EXPR\n-            STMT_LIST\n-              L_CURLY \"{\"\n-              R_CURLY \"}\"\n-        WHITESPACE \" \"\n-        R_CURLY \"}\"\n-  WHITESPACE \"\\n\"\n-  FN\n-    FN_KW \"fn\"\n-    WHITESPACE \" \"\n-    NAME\n-      IDENT \"bar\"\n-    PARAM_LIST\n-      L_PAREN \"(\"\n-      R_PAREN \")\"\n-    WHITESPACE \" \"\n-    BLOCK_EXPR\n-      STMT_LIST\n-        L_CURLY \"{\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          IF_EXPR\n-            IF_KW \"if\"\n-            WHITESPACE \" \"\n-            CONDITION\n-              LET_KW \"let\"\n-              WHITESPACE \" \"\n-              OR_PAT\n-                TUPLE_STRUCT_PAT\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Some\"\n-                  L_PAREN \"(\"\n-                  WILDCARD_PAT\n-                    UNDERSCORE \"_\"\n-                  R_PAREN \")\"\n-                WHITESPACE \" \"\n-                PIPE \"|\"\n-                WHITESPACE \" \"\n-                TUPLE_STRUCT_PAT\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Some\"\n-                  L_PAREN \"(\"\n-                  WILDCARD_PAT\n-                    UNDERSCORE \"_\"\n-                  R_PAREN \")\"\n-              WHITESPACE \" \"\n-              EQ \"=\"\n-              WHITESPACE \" \"\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"None\"\n-            WHITESPACE \" \"\n-            BLOCK_EXPR\n-              STMT_LIST\n-                L_CURLY \"{\"\n-                R_CURLY \"}\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          IF_EXPR\n-            IF_KW \"if\"\n-            WHITESPACE \" \"\n-            CONDITION\n-              LET_KW \"let\"\n-              WHITESPACE \" \"\n-              PIPE \"|\"\n-              WHITESPACE \" \"\n-              TUPLE_STRUCT_PAT\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"Some\"\n-                L_PAREN \"(\"\n-                WILDCARD_PAT\n-                  UNDERSCORE \"_\"\n-                R_PAREN \")\"\n-              WHITESPACE \" \"\n-              EQ \"=\"\n-              WHITESPACE \" \"\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"None\"\n-            WHITESPACE \" \"\n-            BLOCK_EXPR\n-              STMT_LIST\n-                L_CURLY \"{\"\n-                R_CURLY \"}\"\n-        WHITESPACE \"\\n    \"\n-        EXPR_STMT\n-          WHILE_EXPR\n-            WHILE_KW \"while\"\n-            WHITESPACE \" \"\n-            CONDITION\n-              LET_KW \"let\"\n-              WHITESPACE \" \"\n-              OR_PAT\n-                TUPLE_STRUCT_PAT\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Some\"\n-                  L_PAREN \"(\"\n-                  WILDCARD_PAT\n-                    UNDERSCORE \"_\"\n-                  R_PAREN \")\"\n-                WHITESPACE \" \"\n-                PIPE \"|\"\n-                WHITESPACE \" \"\n-                TUPLE_STRUCT_PAT\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Some\"\n-                  L_PAREN \"(\"\n-                  WILDCARD_PAT\n-                    UNDERSCORE \"_\"\n-                  R_PAREN \")\"\n-              WHITESPACE \" \"\n-              EQ \"=\"\n-              WHITESPACE \" \"\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"None\"\n-            WHITESPACE \" \"\n-            BLOCK_EXPR\n-              STMT_LIST\n-                L_CURLY \"{\"\n-                R_CURLY \"}\"\n-        WHITESPACE \"\\n    \"\n-        WHILE_EXPR\n-          WHILE_KW \"while\"\n-          WHITESPACE \" \"\n-          CONDITION\n-            LET_KW \"let\"\n-            WHITESPACE \" \"\n-            PIPE \"|\"\n-            WHITESPACE \" \"\n-            TUPLE_STRUCT_PAT\n-              PATH\n-                PATH_SEGMENT\n-                  NAME_REF\n-                    IDENT \"Some\"\n-              L_PAREN \"(\"\n-              WILDCARD_PAT\n-                UNDERSCORE \"_\"\n-              R_PAREN \")\"\n-            WHITESPACE \" \"\n-            EQ \"=\"\n-            WHITESPACE \" \"\n-            PATH_EXPR\n-              PATH\n-                PATH_SEGMENT\n-                  NAME_REF\n-                    IDENT \"None\"\n-          WHITESPACE \" \"\n-          BLOCK_EXPR\n-            STMT_LIST\n-              L_CURLY \"{\"\n-              R_CURLY \"}\"\n-        WHITESPACE \"\\n\"\n-        R_CURLY \"}\"\n-  WHITESPACE \"\\n\""}, {"sha": "dcffcb1ce2f6a49d0aa8a249ab07a31ab9d42b78", "filename": "crates/parser/test_data/parser/inline/ok/0030_let_expr.rast", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.rast?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -0,0 +1,90 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          IF_EXPR\n+            IF_KW \"if\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              LET_EXPR\n+                LET_KW \"let\"\n+                WHITESPACE \" \"\n+                TUPLE_STRUCT_PAT\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Some\"\n+                  L_PAREN \"(\"\n+                  WILDCARD_PAT\n+                    UNDERSCORE \"_\"\n+                  R_PAREN \")\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"None\"\n+              WHITESPACE \" \"\n+              AMP2 \"&&\"\n+              WHITESPACE \" \"\n+              LITERAL\n+                TRUE_KW \"true\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+        WHITESPACE \"\\n    \"\n+        WHILE_EXPR\n+          WHILE_KW \"while\"\n+          WHITESPACE \" \"\n+          BIN_EXPR\n+            BIN_EXPR\n+              LITERAL\n+                INT_NUMBER \"1\"\n+              WHITESPACE \" \"\n+              EQ2 \"==\"\n+              WHITESPACE \" \"\n+              LITERAL\n+                INT_NUMBER \"5\"\n+            WHITESPACE \" \"\n+            AMP2 \"&&\"\n+            WHITESPACE \" \"\n+            PAREN_EXPR\n+              L_PAREN \"(\"\n+              LET_EXPR\n+                LET_KW \"let\"\n+                WHITESPACE \" \"\n+                IDENT_PAT\n+                  NAME\n+                    IDENT \"None\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"None\"\n+              R_PAREN \")\"\n+          WHITESPACE \" \"\n+          BLOCK_EXPR\n+            STMT_LIST\n+              L_CURLY \"{\"\n+              R_CURLY \"}\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "0131d5e3382905f0e1709ee33a89044b0fd1e365", "filename": "crates/parser/test_data/parser/inline/ok/0030_let_expr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    if let Some(_) = None && true {}\n+    while 1 == 5 && (let None = None) {}\n+}"}, {"sha": "dcffcb1ce2f6a49d0aa8a249ab07a31ab9d42b78", "filename": "crates/parser/test_data/parser/inline/ok/0030_let_expr.txt", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_let_expr.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -0,0 +1,90 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          IF_EXPR\n+            IF_KW \"if\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              LET_EXPR\n+                LET_KW \"let\"\n+                WHITESPACE \" \"\n+                TUPLE_STRUCT_PAT\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Some\"\n+                  L_PAREN \"(\"\n+                  WILDCARD_PAT\n+                    UNDERSCORE \"_\"\n+                  R_PAREN \")\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"None\"\n+              WHITESPACE \" \"\n+              AMP2 \"&&\"\n+              WHITESPACE \" \"\n+              LITERAL\n+                TRUE_KW \"true\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+        WHITESPACE \"\\n    \"\n+        WHILE_EXPR\n+          WHILE_KW \"while\"\n+          WHITESPACE \" \"\n+          BIN_EXPR\n+            BIN_EXPR\n+              LITERAL\n+                INT_NUMBER \"1\"\n+              WHITESPACE \" \"\n+              EQ2 \"==\"\n+              WHITESPACE \" \"\n+              LITERAL\n+                INT_NUMBER \"5\"\n+            WHITESPACE \" \"\n+            AMP2 \"&&\"\n+            WHITESPACE \" \"\n+            PAREN_EXPR\n+              L_PAREN \"(\"\n+              LET_EXPR\n+                LET_KW \"let\"\n+                WHITESPACE \" \"\n+                IDENT_PAT\n+                  NAME\n+                    IDENT \"None\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"None\"\n+              R_PAREN \")\"\n+          WHITESPACE \" \"\n+          BLOCK_EXPR\n+            STMT_LIST\n+              L_CURLY \"{\"\n+              R_CURLY \"}\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "16c522414af49dc1d4a8cc8ce373f85e18fc86c4", "filename": "crates/parser/test_data/parser/inline/ok/0031_while_expr.txt", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -16,9 +16,8 @@ SOURCE_FILE\n           WHILE_EXPR\n             WHILE_KW \"while\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -30,7 +29,7 @@ SOURCE_FILE\n           WHILE_EXPR\n             WHILE_KW \"while\"\n             WHITESPACE \" \"\n-            CONDITION\n+            LET_EXPR\n               LET_KW \"let\"\n               WHITESPACE \" \"\n               TUPLE_STRUCT_PAT\n@@ -69,15 +68,14 @@ SOURCE_FILE\n           WHILE_EXPR\n             WHILE_KW \"while\"\n             WHITESPACE \" \"\n-            CONDITION\n-              BLOCK_EXPR\n-                STMT_LIST\n-                  L_CURLY \"{\"\n-                  WHITESPACE \" \"\n-                  LITERAL\n-                    TRUE_KW \"true\"\n-                  WHITESPACE \" \"\n-                  R_CURLY \"}\"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \" \"\n+                LITERAL\n+                  TRUE_KW \"true\"\n+                WHITESPACE \" \"\n+                R_CURLY \"}\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST"}, {"sha": "e2e964e44d125cd8d4339493f4d846c979664e4b", "filename": "crates/parser/test_data/parser/inline/ok/0064_if_expr.txt", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -16,9 +16,8 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -30,9 +29,8 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -51,9 +49,8 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -65,9 +62,8 @@ SOURCE_FILE\n             IF_EXPR\n               IF_KW \"if\"\n               WHITESPACE \" \"\n-              CONDITION\n-                LITERAL\n-                  FALSE_KW \"false\"\n+              LITERAL\n+                FALSE_KW \"false\"\n               WHITESPACE \" \"\n               BLOCK_EXPR\n                 STMT_LIST\n@@ -86,12 +82,11 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"S\"\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"S\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -103,15 +98,14 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              BLOCK_EXPR\n-                STMT_LIST\n-                  L_CURLY \"{\"\n-                  WHITESPACE \" \"\n-                  LITERAL\n-                    TRUE_KW \"true\"\n-                  WHITESPACE \" \"\n-                  R_CURLY \"}\"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \" \"\n+                LITERAL\n+                  TRUE_KW \"true\"\n+                WHITESPACE \" \"\n+                R_CURLY \"}\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST"}, {"sha": "cbf5e84e8cdc7ab8a9f7656d77896fca1da25a52", "filename": "crates/parser/test_data/parser/inline/ok/0088_break_ambiguity.txt", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0088_break_ambiguity.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0088_break_ambiguity.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0088_break_ambiguity.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -15,9 +15,8 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              BREAK_EXPR\n-                BREAK_KW \"break\"\n+            BREAK_EXPR\n+              BREAK_KW \"break\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -28,9 +27,8 @@ SOURCE_FILE\n           WHILE_EXPR\n             WHILE_KW \"while\"\n             WHITESPACE \" \"\n-            CONDITION\n-              BREAK_EXPR\n-                BREAK_KW \"break\"\n+            BREAK_EXPR\n+              BREAK_KW \"break\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST"}, {"sha": "e4e215593ee93aaaabe91bbb5eb59425af343a2c", "filename": "crates/parser/test_data/parser/inline/ok/0096_no_semi_after_block.txt", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -16,9 +16,8 @@ SOURCE_FILE\n           IF_EXPR\n             IF_KW \"if\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST\n@@ -50,9 +49,8 @@ SOURCE_FILE\n           WHILE_EXPR\n             WHILE_KW \"while\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST"}, {"sha": "48d0bde845a597a41cd82b86719376145f6dfcb7", "filename": "crates/parser/test_data/parser/inline/ok/0109_label.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -35,9 +35,8 @@ SOURCE_FILE\n             WHITESPACE \" \"\n             WHILE_KW \"while\"\n             WHITESPACE \" \"\n-            CONDITION\n-              LITERAL\n-                TRUE_KW \"true\"\n+            LITERAL\n+              TRUE_KW \"true\"\n             WHITESPACE \" \"\n             BLOCK_EXPR\n               STMT_LIST"}, {"sha": "96318b52195ec5a9922ac8c3f1687494a3f9d0ab", "filename": "crates/parser/test_data/parser/inline/ok/0118_match_guard.txt", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -49,19 +49,20 @@ SOURCE_FILE\n               MATCH_GUARD\n                 IF_KW \"if\"\n                 WHITESPACE \" \"\n-                LET_KW \"let\"\n-                WHITESPACE \" \"\n-                IDENT_PAT\n-                  NAME\n-                    IDENT \"foo\"\n-                WHITESPACE \" \"\n-                EQ \"=\"\n-                WHITESPACE \" \"\n-                PATH_EXPR\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"bar\"\n+                LET_EXPR\n+                  LET_KW \"let\"\n+                  WHITESPACE \" \"\n+                  IDENT_PAT\n+                    NAME\n+                      IDENT \"foo\"\n+                  WHITESPACE \" \"\n+                  EQ \"=\"\n+                  WHITESPACE \" \"\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"bar\"\n               WHITESPACE \" \"\n               FAT_ARROW \"=>\"\n               WHITESPACE \" \""}, {"sha": "df1acd6b83b93d6c0e6162244575dbcffd519c98", "filename": "crates/parser/test_data/parser/ok/0033_label_break.txt", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0033_label_break.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0033_label_break.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0033_label_break.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -51,16 +51,15 @@ SOURCE_FILE\n                 IF_EXPR\n                   IF_KW \"if\"\n                   WHITESPACE \" \"\n-                  CONDITION\n-                    CALL_EXPR\n-                      PATH_EXPR\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"condition_not_met\"\n-                      ARG_LIST\n-                        L_PAREN \"(\"\n-                        R_PAREN \")\"\n+                  CALL_EXPR\n+                    PATH_EXPR\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"condition_not_met\"\n+                    ARG_LIST\n+                      L_PAREN \"(\"\n+                      R_PAREN \")\"\n                   WHITESPACE \" \"\n                   BLOCK_EXPR\n                     STMT_LIST\n@@ -92,16 +91,15 @@ SOURCE_FILE\n                 IF_EXPR\n                   IF_KW \"if\"\n                   WHITESPACE \" \"\n-                  CONDITION\n-                    CALL_EXPR\n-                      PATH_EXPR\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"condition_not_met\"\n-                      ARG_LIST\n-                        L_PAREN \"(\"\n-                        R_PAREN \")\"\n+                  CALL_EXPR\n+                    PATH_EXPR\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"condition_not_met\"\n+                    ARG_LIST\n+                      L_PAREN \"(\"\n+                      R_PAREN \")\"\n                   WHITESPACE \" \"\n                   BLOCK_EXPR\n                     STMT_LIST\n@@ -153,16 +151,15 @@ SOURCE_FILE\n                 IF_EXPR\n                   IF_KW \"if\"\n                   WHITESPACE \" \"\n-                  CONDITION\n-                    CALL_EXPR\n-                      PATH_EXPR\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"foo\"\n-                      ARG_LIST\n-                        L_PAREN \"(\"\n-                        R_PAREN \")\"\n+                  CALL_EXPR\n+                    PATH_EXPR\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"foo\"\n+                    ARG_LIST\n+                      L_PAREN \"(\"\n+                      R_PAREN \")\"\n                   WHITESPACE \" \"\n                   BLOCK_EXPR\n                     STMT_LIST\n@@ -187,16 +184,15 @@ SOURCE_FILE\n                 IF_EXPR\n                   IF_KW \"if\"\n                   WHITESPACE \" \"\n-                  CONDITION\n-                    CALL_EXPR\n-                      PATH_EXPR\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"bar\"\n-                      ARG_LIST\n-                        L_PAREN \"(\"\n-                        R_PAREN \")\"\n+                  CALL_EXPR\n+                    PATH_EXPR\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"bar\"\n+                    ARG_LIST\n+                      L_PAREN \"(\"\n+                      R_PAREN \")\"\n                   WHITESPACE \" \"\n                   BLOCK_EXPR\n                     STMT_LIST"}, {"sha": "4ec703e517c2f01bacafedb57b37e119879d246d", "filename": "crates/parser/test_data/parser/ok/0035_weird_exprs.txt", "status": "modified", "additions": 63, "deletions": 72, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -280,21 +280,20 @@ SOURCE_FILE\n                   WHILE_EXPR\n                     WHILE_KW \"while\"\n                     WHITESPACE \" \"\n-                    CONDITION\n-                      PREFIX_EXPR\n-                        BANG \"!\"\n-                        METHOD_CALL_EXPR\n-                          PATH_EXPR\n-                            PATH\n-                              PATH_SEGMENT\n-                                NAME_REF\n-                                  IDENT \"x\"\n-                          DOT \".\"\n-                          NAME_REF\n-                            IDENT \"get\"\n-                          ARG_LIST\n-                            L_PAREN \"(\"\n-                            R_PAREN \")\"\n+                    PREFIX_EXPR\n+                      BANG \"!\"\n+                      METHOD_CALL_EXPR\n+                        PATH_EXPR\n+                          PATH\n+                            PATH_SEGMENT\n+                              NAME_REF\n+                                IDENT \"x\"\n+                        DOT \".\"\n+                        NAME_REF\n+                          IDENT \"get\"\n+                        ARG_LIST\n+                          L_PAREN \"(\"\n+                          R_PAREN \")\"\n                     WHITESPACE \" \"\n                     BLOCK_EXPR\n                       STMT_LIST\n@@ -443,12 +442,11 @@ SOURCE_FILE\n                 WHILE_EXPR\n                   WHILE_KW \"while\"\n                   WHITESPACE \" \"\n-                  CONDITION\n-                    PAREN_EXPR\n-                      L_PAREN \"(\"\n-                      RETURN_EXPR\n-                        RETURN_KW \"return\"\n-                      R_PAREN \")\"\n+                  PAREN_EXPR\n+                    L_PAREN \"(\"\n+                    RETURN_EXPR\n+                      RETURN_KW \"return\"\n+                    R_PAREN \")\"\n                   WHITESPACE \" \"\n                   BLOCK_EXPR\n                     STMT_LIST\n@@ -457,12 +455,11 @@ SOURCE_FILE\n                       IF_EXPR\n                         IF_KW \"if\"\n                         WHITESPACE \" \"\n-                        CONDITION\n-                          PAREN_EXPR\n-                            L_PAREN \"(\"\n-                            RETURN_EXPR\n-                              RETURN_KW \"return\"\n-                            R_PAREN \")\"\n+                        PAREN_EXPR\n+                          L_PAREN \"(\"\n+                          RETURN_EXPR\n+                            RETURN_KW \"return\"\n+                          R_PAREN \")\"\n                         WHITESPACE \" \"\n                         BLOCK_EXPR\n                           STMT_LIST\n@@ -495,12 +492,11 @@ SOURCE_FILE\n                                         IF_EXPR\n                                           IF_KW \"if\"\n                                           WHITESPACE \" \"\n-                                          CONDITION\n-                                            PAREN_EXPR\n-                                              L_PAREN \"(\"\n-                                              RETURN_EXPR\n-                                                RETURN_KW \"return\"\n-                                              R_PAREN \")\"\n+                                          PAREN_EXPR\n+                                            L_PAREN \"(\"\n+                                            RETURN_EXPR\n+                                              RETURN_KW \"return\"\n+                                            R_PAREN \")\"\n                                           WHITESPACE \" \"\n                                           BLOCK_EXPR\n                                             STMT_LIST\n@@ -549,12 +545,11 @@ SOURCE_FILE\n                         IF_EXPR\n                           IF_KW \"if\"\n                           WHITESPACE \" \"\n-                          CONDITION\n-                            PAREN_EXPR\n-                              L_PAREN \"(\"\n-                              RETURN_EXPR\n-                                RETURN_KW \"return\"\n-                              R_PAREN \")\"\n+                          PAREN_EXPR\n+                            L_PAREN \"(\"\n+                            RETURN_EXPR\n+                              RETURN_KW \"return\"\n+                            R_PAREN \")\"\n                           WHITESPACE \" \"\n                           BLOCK_EXPR\n                             STMT_LIST\n@@ -572,12 +567,11 @@ SOURCE_FILE\n               IF_EXPR\n                 IF_KW \"if\"\n                 WHITESPACE \" \"\n-                CONDITION\n-                  PAREN_EXPR\n-                    L_PAREN \"(\"\n-                    RETURN_EXPR\n-                      RETURN_KW \"return\"\n-                    R_PAREN \")\"\n+                PAREN_EXPR\n+                  L_PAREN \"(\"\n+                  RETURN_EXPR\n+                    RETURN_KW \"return\"\n+                  R_PAREN \")\"\n                 WHITESPACE \" \"\n                 BLOCK_EXPR\n                   STMT_LIST\n@@ -1037,9 +1031,8 @@ SOURCE_FILE\n                 IF_EXPR\n                   IF_KW \"if\"\n                   WHITESPACE \" \"\n-                  CONDITION\n-                    BREAK_EXPR\n-                      BREAK_KW \"break\"\n+                  BREAK_EXPR\n+                    BREAK_KW \"break\"\n                   WHITESPACE \" \"\n                   BLOCK_EXPR\n                     STMT_LIST\n@@ -1089,18 +1082,17 @@ SOURCE_FILE\n                 IF_EXPR\n                   IF_KW \"if\"\n                   WHITESPACE \" \"\n-                  CONDITION\n-                    BIN_EXPR\n-                      PATH_EXPR\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"i\"\n-                      WHITESPACE \" \"\n-                      EQ2 \"==\"\n-                      WHITESPACE \" \"\n-                      LITERAL\n-                        INT_NUMBER \"1\"\n+                  BIN_EXPR\n+                    PATH_EXPR\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"i\"\n+                    WHITESPACE \" \"\n+                    EQ2 \"==\"\n+                    WHITESPACE \" \"\n+                    LITERAL\n+                      INT_NUMBER \"1\"\n                   WHITESPACE \" \"\n                   BLOCK_EXPR\n                     STMT_LIST\n@@ -1344,18 +1336,17 @@ SOURCE_FILE\n         IF_EXPR\n           IF_KW \"if\"\n           WHITESPACE \" \"\n-          CONDITION\n-            BIN_EXPR\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"u8\"\n-              WHITESPACE \" \"\n-              NEQ \"!=\"\n-              WHITESPACE \" \"\n-              LITERAL\n-                INT_NUMBER \"0u8\"\n+          BIN_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"u8\"\n+            WHITESPACE \" \"\n+            NEQ \"!=\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"0u8\"\n           WHITESPACE \" \"\n           BLOCK_EXPR\n             STMT_LIST"}, {"sha": "aecc71d4829bd8938311e020ff2eca93bc191c0c", "filename": "crates/parser/test_data/parser/ok/0047_minus_in_inner_pattern.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -219,7 +219,7 @@ SOURCE_FILE\n         IF_EXPR\n           IF_KW \"if\"\n           WHITESPACE \" \"\n-          CONDITION\n+          LET_EXPR\n             LET_KW \"let\"\n             WHITESPACE \" \"\n             TUPLE_STRUCT_PAT"}, {"sha": "55ce31275fba65be0aa97f6f4d2f9d5a407cf852", "filename": "crates/parser/test_data/parser/ok/0056_neq_in_type.txt", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -15,47 +15,46 @@ SOURCE_FILE\n         IF_EXPR\n           IF_KW \"if\"\n           WHITESPACE \" \"\n-          CONDITION\n-            BIN_EXPR\n-              CAST_EXPR\n-                METHOD_CALL_EXPR\n-                  LITERAL\n-                    FLOAT_NUMBER \"1.0f32\"\n-                  DOT \".\"\n-                  NAME_REF\n-                    IDENT \"floor\"\n-                  ARG_LIST\n-                    L_PAREN \"(\"\n-                    R_PAREN \")\"\n-                WHITESPACE \" \"\n-                AS_KW \"as\"\n-                WHITESPACE \" \"\n-                PATH_TYPE\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"i64\"\n+          BIN_EXPR\n+            CAST_EXPR\n+              METHOD_CALL_EXPR\n+                LITERAL\n+                  FLOAT_NUMBER \"1.0f32\"\n+                DOT \".\"\n+                NAME_REF\n+                  IDENT \"floor\"\n+                ARG_LIST\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n               WHITESPACE \" \"\n-              NEQ \"!=\"\n+              AS_KW \"as\"\n               WHITESPACE \" \"\n-              CAST_EXPR\n-                METHOD_CALL_EXPR\n-                  LITERAL\n-                    FLOAT_NUMBER \"1.0f32\"\n-                  DOT \".\"\n-                  NAME_REF\n-                    IDENT \"floor\"\n-                  ARG_LIST\n-                    L_PAREN \"(\"\n-                    R_PAREN \")\"\n-                WHITESPACE \" \"\n-                AS_KW \"as\"\n-                WHITESPACE \" \"\n-                PATH_TYPE\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"i64\"\n+              PATH_TYPE\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"i64\"\n+            WHITESPACE \" \"\n+            NEQ \"!=\"\n+            WHITESPACE \" \"\n+            CAST_EXPR\n+              METHOD_CALL_EXPR\n+                LITERAL\n+                  FLOAT_NUMBER \"1.0f32\"\n+                DOT \".\"\n+                NAME_REF\n+                  IDENT \"floor\"\n+                ARG_LIST\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+              WHITESPACE \" \"\n+              AS_KW \"as\"\n+              WHITESPACE \" \"\n+              PATH_TYPE\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"i64\"\n           WHITESPACE \" \"\n           BLOCK_EXPR\n             STMT_LIST"}, {"sha": "79bc7f971d187187e567f883d2178bc4ec49f1ce", "filename": "crates/parser/test_data/parser/ok/0059_loops_in_parens.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.txt?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -86,9 +86,8 @@ SOURCE_FILE\n               WHILE_EXPR\n                 WHILE_KW \"while\"\n                 WHITESPACE \" \"\n-                CONDITION\n-                  LITERAL\n-                    TRUE_KW \"true\"\n+                LITERAL\n+                  TRUE_KW \"true\"\n                 WHITESPACE \" \"\n                 BLOCK_EXPR\n                   STMT_LIST"}, {"sha": "f59cd4f257c57d5761c0137c7fc4721de70f15fe", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -30,7 +30,7 @@ rayon = \"1\"\n expect-test = \"1.2.0-pre.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"=1.14.9\"\n+ungrammar = \"=1.15.0\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "6c4729ef3656ce0cbb159dd9b5e043115d17fe98", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -884,7 +884,7 @@ pub struct IfExpr {\n impl ast::HasAttrs for IfExpr {}\n impl IfExpr {\n     pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n-    pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n+    pub fn condition(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn else_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![else]) }\n }\n \n@@ -1038,7 +1038,7 @@ impl ast::HasAttrs for WhileExpr {}\n impl ast::HasLoopBody for WhileExpr {}\n impl WhileExpr {\n     pub fn while_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![while]) }\n-    pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n+    pub fn condition(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1051,6 +1051,18 @@ impl YieldExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct LetExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasAttrs for LetExpr {}\n+impl LetExpr {\n+    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n+    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StmtList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1106,17 +1118,6 @@ impl ArgList {\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Condition {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl Condition {\n-    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n-    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchArmList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1147,10 +1148,7 @@ pub struct MatchGuard {\n }\n impl MatchGuard {\n     pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n-    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n-    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn condition(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1524,6 +1522,7 @@ pub enum Expr {\n     TupleExpr(TupleExpr),\n     WhileExpr(WhileExpr),\n     YieldExpr(YieldExpr),\n+    LetExpr(LetExpr),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2664,6 +2663,17 @@ impl AstNode for YieldExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for LetExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for StmtList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == STMT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2719,17 +2729,6 @@ impl AstNode for ArgList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Condition {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONDITION }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for MatchArmList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_ARM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3336,6 +3335,9 @@ impl From<WhileExpr> for Expr {\n impl From<YieldExpr> for Expr {\n     fn from(node: YieldExpr) -> Expr { Expr::YieldExpr(node) }\n }\n+impl From<LetExpr> for Expr {\n+    fn from(node: LetExpr) -> Expr { Expr::LetExpr(node) }\n+}\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3344,7 +3346,7 @@ impl AstNode for Expr {\n             | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MACRO_STMTS | MATCH_EXPR\n             | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n             | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR\n-            | YIELD_EXPR => true,\n+            | YIELD_EXPR | LET_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3381,6 +3383,7 @@ impl AstNode for Expr {\n             TUPLE_EXPR => Expr::TupleExpr(TupleExpr { syntax }),\n             WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n             YIELD_EXPR => Expr::YieldExpr(YieldExpr { syntax }),\n+            LET_EXPR => Expr::LetExpr(LetExpr { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3418,6 +3421,7 @@ impl AstNode for Expr {\n             Expr::TupleExpr(it) => &it.syntax,\n             Expr::WhileExpr(it) => &it.syntax,\n             Expr::YieldExpr(it) => &it.syntax,\n+            Expr::LetExpr(it) => &it.syntax,\n         }\n     }\n }\n@@ -3883,6 +3887,7 @@ impl AstNode for AnyHasAttrs {\n             | TUPLE_EXPR\n             | WHILE_EXPR\n             | YIELD_EXPR\n+            | LET_EXPR\n             | STMT_LIST\n             | RECORD_EXPR_FIELD_LIST\n             | RECORD_EXPR_FIELD\n@@ -4537,6 +4542,11 @@ impl std::fmt::Display for YieldExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for LetExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for StmtList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4562,11 +4572,6 @@ impl std::fmt::Display for ArgList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Condition {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for MatchArmList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "1a754ef46097dc719062b4b0aec80498b22c4bee", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -397,7 +397,7 @@ pub fn expr_match(expr: ast::Expr, match_arm_list: ast::MatchArmList) -> ast::Ex\n     expr_from_text(&format!(\"match {} {}\", expr, match_arm_list))\n }\n pub fn expr_if(\n-    condition: ast::Condition,\n+    condition: ast::Expr,\n     then_branch: ast::BlockExpr,\n     else_branch: Option<ast::ElseBranch>,\n ) -> ast::Expr {\n@@ -456,14 +456,8 @@ pub fn expr_assignment(lhs: ast::Expr, rhs: ast::Expr) -> ast::Expr {\n fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n }\n-\n-pub fn condition(expr: ast::Expr, pattern: Option<ast::Pat>) -> ast::Condition {\n-    match pattern {\n-        None => ast_from_text(&format!(\"const _: () = while {} {{}};\", expr)),\n-        Some(pattern) => {\n-            ast_from_text(&format!(\"const _: () = while let {} = {} {{}};\", pattern, expr))\n-        }\n-    }\n+pub fn expr_let(pattern: ast::Pat, expr: ast::Expr) -> ast::LetExpr {\n+    ast_from_text(&format!(\"const _: () = while let {} = {} {{}};\", pattern, expr))\n }\n \n pub fn arg_list(args: impl IntoIterator<Item = ast::Expr>) -> ast::ArgList {"}, {"sha": "5ff6519c9ccf93c1c218458da9b960ae1b723282", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -528,12 +528,6 @@ impl ast::Item {\n     }\n }\n \n-impl ast::Condition {\n-    pub fn is_pattern_cond(&self) -> bool {\n-        self.let_token().is_some()\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum FieldKind {\n     Name(ast::NameRef),"}, {"sha": "aeff851ce4d21200140bc704be67c0c989042dbb", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -133,7 +133,6 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"CLOSURE_EXPR\",\n         \"IF_EXPR\",\n         \"WHILE_EXPR\",\n-        \"CONDITION\",\n         \"LOOP_EXPR\",\n         \"FOR_EXPR\",\n         \"CONTINUE_EXPR\",\n@@ -143,6 +142,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"STMT_LIST\",\n         \"RETURN_EXPR\",\n         \"YIELD_EXPR\",\n+        \"LET_EXPR\",\n         \"MATCH_EXPR\",\n         \"MATCH_ARM_LIST\",\n         \"MATCH_ARM\","}, {"sha": "3ea5844c9515be3a7053f1f2734fa65e77d1c872", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -38,6 +38,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::PtrType(it) => validate_trait_object_ptr_ty(it, &mut errors),\n                 ast::FnPtrType(it) => validate_trait_object_fn_ptr_ret_ty(it, &mut errors),\n                 ast::MacroRules(it) => validate_macro_rules(it, &mut errors),\n+                ast::LetExpr(it) => validate_let_expr(it, &mut errors),\n                 _ => (),\n             }\n         }\n@@ -343,3 +344,33 @@ fn validate_const(const_: ast::Const, errors: &mut Vec<SyntaxError>) {\n         errors.push(SyntaxError::new(\"const globals cannot be mutable\", mut_token.text_range()));\n     }\n }\n+\n+fn validate_let_expr(let_: ast::LetExpr, errors: &mut Vec<SyntaxError>) {\n+    let mut token = let_.syntax().clone();\n+    loop {\n+        token = match token.parent() {\n+            Some(it) => it,\n+            None => break,\n+        };\n+\n+        if ast::ParenExpr::can_cast(token.kind()) {\n+            continue;\n+        } else if let Some(it) = ast::BinExpr::cast(token.clone()) {\n+            if it.op_kind() == Some(ast::BinaryOp::LogicOp(ast::LogicOp::And)) {\n+                continue;\n+            }\n+        } else if ast::IfExpr::can_cast(token.kind())\n+            || ast::WhileExpr::can_cast(token.kind())\n+            || ast::MatchGuard::can_cast(token.kind())\n+        {\n+            // It must be part of the condition since the expressions are inside a block.\n+            return;\n+        }\n+\n+        break;\n+    }\n+    errors.push(SyntaxError::new(\n+        \"`let` expressions are not supported here\",\n+        let_.syntax().text_range(),\n+    ));\n+}"}, {"sha": "50057a02d8091a66d00e10c9842b5818bf9a6046", "filename": "crates/syntax/test_data/parser/validation/0031_block_inner_attrs.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2F0031_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2F0031_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2F0031_block_inner_attrs.rast?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -49,9 +49,8 @@ SOURCE_FILE@0..350\n           IF_EXPR@134..257\n             IF_KW@134..136 \"if\"\n             WHITESPACE@136..137 \" \"\n-            CONDITION@137..141\n-              LITERAL@137..141\n-                TRUE_KW@137..141 \"true\"\n+            LITERAL@137..141\n+              TRUE_KW@137..141 \"true\"\n             WHITESPACE@141..142 \" \"\n             BLOCK_EXPR@142..257\n               STMT_LIST@142..257\n@@ -94,9 +93,8 @@ SOURCE_FILE@0..350\n         WHILE_EXPR@262..347\n           WHILE_KW@262..267 \"while\"\n           WHITESPACE@267..268 \" \"\n-          CONDITION@268..272\n-            LITERAL@268..272\n-              TRUE_KW@268..272 \"true\"\n+          LITERAL@268..272\n+            TRUE_KW@268..272 \"true\"\n           WHITESPACE@272..273 \" \"\n           BLOCK_EXPR@273..347\n             STMT_LIST@273..347"}, {"sha": "5b37b597832049c6f1658c0634761acd7ae9b2dd", "filename": "crates/syntax/test_data/parser/validation/invalid_let_expr.rast", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2Finvalid_let_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2Finvalid_let_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2Finvalid_let_expr.rast?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -0,0 +1,216 @@\n+SOURCE_FILE@0..282\r\n+  FN@0..281\r\n+    FN_KW@0..2 \"fn\"\r\n+    WHITESPACE@2..3 \" \"\r\n+    NAME@3..6\r\n+      IDENT@3..6 \"foo\"\r\n+    PARAM_LIST@6..8\r\n+      L_PAREN@6..7 \"(\"\r\n+      R_PAREN@7..8 \")\"\r\n+    WHITESPACE@8..9 \" \"\r\n+    BLOCK_EXPR@9..281\r\n+      STMT_LIST@9..281\r\n+        L_CURLY@9..10 \"{\"\r\n+        WHITESPACE@10..15 \"\\n    \"\r\n+        CONST@15..42\r\n+          CONST_KW@15..20 \"const\"\r\n+          WHITESPACE@20..21 \" \"\r\n+          UNDERSCORE@21..22 \"_\"\r\n+          COLON@22..23 \":\"\r\n+          WHITESPACE@23..24 \" \"\r\n+          TUPLE_TYPE@24..26\r\n+            L_PAREN@24..25 \"(\"\r\n+            R_PAREN@25..26 \")\"\r\n+          WHITESPACE@26..27 \" \"\r\n+          EQ@27..28 \"=\"\r\n+          WHITESPACE@28..29 \" \"\r\n+          LET_EXPR@29..41\r\n+            LET_KW@29..32 \"let\"\r\n+            WHITESPACE@32..33 \" \"\r\n+            WILDCARD_PAT@33..34\r\n+              UNDERSCORE@33..34 \"_\"\r\n+            WHITESPACE@34..35 \" \"\r\n+            EQ@35..36 \"=\"\r\n+            WHITESPACE@36..37 \" \"\r\n+            PATH_EXPR@37..41\r\n+              PATH@37..41\r\n+                PATH_SEGMENT@37..41\r\n+                  NAME_REF@37..41\r\n+                    IDENT@37..41 \"None\"\r\n+          SEMICOLON@41..42 \";\"\r\n+        WHITESPACE@42..48 \"\\n\\n    \"\r\n+        LET_STMT@48..83\r\n+          LET_KW@48..51 \"let\"\r\n+          WHITESPACE@51..52 \" \"\r\n+          WILDCARD_PAT@52..53\r\n+            UNDERSCORE@52..53 \"_\"\r\n+          WHITESPACE@53..54 \" \"\r\n+          EQ@54..55 \"=\"\r\n+          WHITESPACE@55..56 \" \"\r\n+          IF_EXPR@56..82\r\n+            IF_KW@56..58 \"if\"\r\n+            WHITESPACE@58..59 \" \"\r\n+            LITERAL@59..63\r\n+              TRUE_KW@59..63 \"true\"\r\n+            WHITESPACE@63..64 \" \"\r\n+            BLOCK_EXPR@64..82\r\n+              STMT_LIST@64..82\r\n+                L_CURLY@64..65 \"{\"\r\n+                WHITESPACE@65..66 \" \"\r\n+                PAREN_EXPR@66..80\r\n+                  L_PAREN@66..67 \"(\"\r\n+                  LET_EXPR@67..79\r\n+                    LET_KW@67..70 \"let\"\r\n+                    WHITESPACE@70..71 \" \"\r\n+                    WILDCARD_PAT@71..72\r\n+                      UNDERSCORE@71..72 \"_\"\r\n+                    WHITESPACE@72..73 \" \"\r\n+                    EQ@73..74 \"=\"\r\n+                    WHITESPACE@74..75 \" \"\r\n+                    PATH_EXPR@75..79\r\n+                      PATH@75..79\r\n+                        PATH_SEGMENT@75..79\r\n+                          NAME_REF@75..79\r\n+                            IDENT@75..79 \"None\"\r\n+                  R_PAREN@79..80 \")\"\r\n+                WHITESPACE@80..81 \" \"\r\n+                R_CURLY@81..82 \"}\"\r\n+          SEMICOLON@82..83 \";\"\r\n+        WHITESPACE@83..89 \"\\n\\n    \"\r\n+        IF_EXPR@89..279\r\n+          IF_KW@89..91 \"if\"\r\n+          WHITESPACE@91..92 \" \"\r\n+          BIN_EXPR@92..114\r\n+            LITERAL@92..96\r\n+              TRUE_KW@92..96 \"true\"\r\n+            WHITESPACE@96..97 \" \"\r\n+            AMP2@97..99 \"&&\"\r\n+            WHITESPACE@99..100 \" \"\r\n+            PAREN_EXPR@100..114\r\n+              L_PAREN@100..101 \"(\"\r\n+              LET_EXPR@101..113\r\n+                LET_KW@101..104 \"let\"\r\n+                WHITESPACE@104..105 \" \"\r\n+                WILDCARD_PAT@105..106\r\n+                  UNDERSCORE@105..106 \"_\"\r\n+                WHITESPACE@106..107 \" \"\r\n+                EQ@107..108 \"=\"\r\n+                WHITESPACE@108..109 \" \"\r\n+                PATH_EXPR@109..113\r\n+                  PATH@109..113\r\n+                    PATH_SEGMENT@109..113\r\n+                      NAME_REF@109..113\r\n+                        IDENT@109..113 \"None\"\r\n+              R_PAREN@113..114 \")\"\r\n+          WHITESPACE@114..115 \" \"\r\n+          BLOCK_EXPR@115..279\r\n+            STMT_LIST@115..279\r\n+              L_CURLY@115..116 \"{\"\r\n+              WHITESPACE@116..125 \"\\n        \"\r\n+              EXPR_STMT@125..140\r\n+                PAREN_EXPR@125..139\r\n+                  L_PAREN@125..126 \"(\"\r\n+                  LET_EXPR@126..138\r\n+                    LET_KW@126..129 \"let\"\r\n+                    WHITESPACE@129..130 \" \"\r\n+                    WILDCARD_PAT@130..131\r\n+                      UNDERSCORE@130..131 \"_\"\r\n+                    WHITESPACE@131..132 \" \"\r\n+                    EQ@132..133 \"=\"\r\n+                    WHITESPACE@133..134 \" \"\r\n+                    PATH_EXPR@134..138\r\n+                      PATH@134..138\r\n+                        PATH_SEGMENT@134..138\r\n+                          NAME_REF@134..138\r\n+                            IDENT@134..138 \"None\"\r\n+                  R_PAREN@138..139 \")\"\r\n+                SEMICOLON@139..140 \";\"\r\n+              WHITESPACE@140..149 \"\\n        \"\r\n+              WHILE_EXPR@149..273\r\n+                WHILE_KW@149..154 \"while\"\r\n+                WHITESPACE@154..155 \" \"\r\n+                LET_EXPR@155..167\r\n+                  LET_KW@155..158 \"let\"\r\n+                  WHITESPACE@158..159 \" \"\r\n+                  WILDCARD_PAT@159..160\r\n+                    UNDERSCORE@159..160 \"_\"\r\n+                  WHITESPACE@160..161 \" \"\r\n+                  EQ@161..162 \"=\"\r\n+                  WHITESPACE@162..163 \" \"\r\n+                  PATH_EXPR@163..167\r\n+                    PATH@163..167\r\n+                      PATH_SEGMENT@163..167\r\n+                        NAME_REF@163..167\r\n+                          IDENT@163..167 \"None\"\r\n+                WHITESPACE@167..168 \" \"\r\n+                BLOCK_EXPR@168..273\r\n+                  STMT_LIST@168..273\r\n+                    L_CURLY@168..169 \"{\"\r\n+                    WHITESPACE@169..182 \"\\n            \"\r\n+                    MATCH_EXPR@182..263\r\n+                      MATCH_KW@182..187 \"match\"\r\n+                      WHITESPACE@187..188 \" \"\r\n+                      PATH_EXPR@188..192\r\n+                        PATH@188..192\r\n+                          PATH_SEGMENT@188..192\r\n+                            NAME_REF@188..192\r\n+                              IDENT@188..192 \"None\"\r\n+                      WHITESPACE@192..193 \" \"\r\n+                      MATCH_ARM_LIST@193..263\r\n+                        L_CURLY@193..194 \"{\"\r\n+                        WHITESPACE@194..211 \"\\n                \"\r\n+                        MATCH_ARM@211..249\r\n+                          WILDCARD_PAT@211..212\r\n+                            UNDERSCORE@211..212 \"_\"\r\n+                          WHITESPACE@212..213 \" \"\r\n+                          MATCH_GUARD@213..228\r\n+                            IF_KW@213..215 \"if\"\r\n+                            WHITESPACE@215..216 \" \"\r\n+                            LET_EXPR@216..228\r\n+                              LET_KW@216..219 \"let\"\r\n+                              WHITESPACE@219..220 \" \"\r\n+                              WILDCARD_PAT@220..221\r\n+                                UNDERSCORE@220..221 \"_\"\r\n+                              WHITESPACE@221..222 \" \"\r\n+                              EQ@222..223 \"=\"\r\n+                              WHITESPACE@223..224 \" \"\r\n+                              PATH_EXPR@224..228\r\n+                                PATH@224..228\r\n+                                  PATH_SEGMENT@224..228\r\n+                                    NAME_REF@224..228\r\n+                                      IDENT@224..228 \"None\"\r\n+                          WHITESPACE@228..229 \" \"\r\n+                          FAT_ARROW@229..231 \"=>\"\r\n+                          WHITESPACE@231..232 \" \"\r\n+                          BLOCK_EXPR@232..249\r\n+                            STMT_LIST@232..249\r\n+                              L_CURLY@232..233 \"{\"\r\n+                              WHITESPACE@233..234 \" \"\r\n+                              LET_STMT@234..247\r\n+                                LET_KW@234..237 \"let\"\r\n+                                WHITESPACE@237..238 \" \"\r\n+                                WILDCARD_PAT@238..239\r\n+                                  UNDERSCORE@238..239 \"_\"\r\n+                                WHITESPACE@239..240 \" \"\r\n+                                EQ@240..241 \"=\"\r\n+                                WHITESPACE@241..242 \" \"\r\n+                                PATH_EXPR@242..246\r\n+                                  PATH@242..246\r\n+                                    PATH_SEGMENT@242..246\r\n+                                      NAME_REF@242..246\r\n+                                        IDENT@242..246 \"None\"\r\n+                                SEMICOLON@246..247 \";\"\r\n+                              WHITESPACE@247..248 \" \"\r\n+                              R_CURLY@248..249 \"}\"\r\n+                        WHITESPACE@249..262 \"\\n            \"\r\n+                        R_CURLY@262..263 \"}\"\r\n+                    WHITESPACE@263..272 \"\\n        \"\r\n+                    R_CURLY@272..273 \"}\"\r\n+              WHITESPACE@273..278 \"\\n    \"\r\n+              R_CURLY@278..279 \"}\"\r\n+        WHITESPACE@279..280 \"\\n\"\r\n+        R_CURLY@280..281 \"}\"\r\n+  WHITESPACE@281..282 \"\\n\"\r\n+error 29..41: `let` expressions are not supported here\r\n+error 67..79: `let` expressions are not supported here\r\n+error 126..138: `let` expressions are not supported here\r"}, {"sha": "1515ae5334d25625e17b3c119f744466fbe58392", "filename": "crates/syntax/test_data/parser/validation/invalid_let_expr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2Finvalid_let_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67660fc22e32ca8b9165e6efe34382747e044b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2Finvalid_let_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fvalidation%2Finvalid_let_expr.rs?ref=c67660fc22e32ca8b9165e6efe34382747e044b0", "patch": "@@ -0,0 +1,14 @@\n+fn foo() {\n+    const _: () = let _ = None;\n+\n+    let _ = if true { (let _ = None) };\n+\n+    if true && (let _ = None) {\n+        (let _ = None);\n+        while let _ = None {\n+            match None {\n+                _ if let _ = None => { let _ = None; }\n+            }\n+        }\n+    }\n+}"}]}