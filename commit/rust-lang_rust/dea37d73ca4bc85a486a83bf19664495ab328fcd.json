{"sha": "dea37d73ca4bc85a486a83bf19664495ab328fcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYTM3ZDczY2E0YmM4NWE0ODZhODNiZjE5NjY0NDk1YWIzMjhmY2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-27T16:07:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-27T19:53:02Z"}, "message": "rollup merge of #18266 : nick29581/vtable2.rs", "tree": {"sha": "d2bcf4f0b723a44f98ad51ba382c938db9b45aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2bcf4f0b723a44f98ad51ba382c938db9b45aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea37d73ca4bc85a486a83bf19664495ab328fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea37d73ca4bc85a486a83bf19664495ab328fcd", "html_url": "https://github.com/rust-lang/rust/commit/dea37d73ca4bc85a486a83bf19664495ab328fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea37d73ca4bc85a486a83bf19664495ab328fcd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc5a18c6e0f5568a93a15e99ac3857c3f5970af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5a18c6e0f5568a93a15e99ac3857c3f5970af7", "html_url": "https://github.com/rust-lang/rust/commit/dc5a18c6e0f5568a93a15e99ac3857c3f5970af7"}, {"sha": "e4b913f60f109e0646f532a9b74e9dbd8ac06b1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b913f60f109e0646f532a9b74e9dbd8ac06b1b", "html_url": "https://github.com/rust-lang/rust/commit/e4b913f60f109e0646f532a9b74e9dbd8ac06b1b"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b1684cae95d404d5a6dcb940fe2ee0a307c6baeb", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=dea37d73ca4bc85a486a83bf19664495ab328fcd", "patch": "@@ -88,7 +88,7 @@ use middle::ty;\n use middle::typeck::astconv::AstConv;\n use middle::typeck::check::{FnCtxt, NoPreference, PreferMutLvalue};\n use middle::typeck::check::{impl_self_ty};\n-use middle::typeck::check::vtable2::select_fcx_obligations_where_possible;\n+use middle::typeck::check::vtable::select_fcx_obligations_where_possible;\n use middle::typeck::check;\n use middle::typeck::infer;\n use middle::typeck::{MethodCall, MethodCallee};"}, {"sha": "3d1385bac3bf52f369b315d9b036dec8c2b70a03", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=dea37d73ca4bc85a486a83bf19664495ab328fcd", "patch": "@@ -139,7 +139,7 @@ use syntax::visit::Visitor;\n use syntax;\n \n pub mod _match;\n-pub mod vtable2; // New trait code\n+pub mod vtable;\n pub mod writeback;\n pub mod regionmanip;\n pub mod regionck;\n@@ -409,7 +409,7 @@ fn check_bare_fn(ccx: &CrateCtxt,\n             let fcx = check_fn(ccx, fn_ty.fn_style, id, &fn_ty.sig,\n                                decl, id, body, &inh);\n \n-            vtable2::select_all_fcx_obligations_or_error(&fcx);\n+            vtable::select_all_fcx_obligations_or_error(&fcx);\n             regionck::regionck_fn(&fcx, id, body);\n             writeback::resolve_type_vars_in_fn(&fcx, decl, body);\n         }\n@@ -1372,7 +1372,7 @@ fn check_cast(fcx: &FnCtxt,\n \n     if ty::type_is_trait(t_1) {\n         // This will be looked up later on.\n-        vtable2::check_object_cast(fcx, cast_expr, e, t_1);\n+        vtable::check_object_cast(fcx, cast_expr, e, t_1);\n         fcx.write_ty(id, t_1);\n         return\n     }\n@@ -1677,7 +1677,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::UnsizeVtable(ref ty_trait, self_ty) => {\n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` implements `Foo`:\n-                vtable2::register_object_cast_obligations(self,\n+                vtable::register_object_cast_obligations(self,\n                                                           span,\n                                                           ty_trait,\n                                                           self_ty);\n@@ -2564,7 +2564,7 @@ fn check_argument_types<'a>(fcx: &FnCtxt,\n         // an \"opportunistic\" vtable resolution of any trait\n         // bounds on the call.\n         if check_blocks {\n-            vtable2::select_fcx_obligations_where_possible(fcx);\n+            vtable::select_fcx_obligations_where_possible(fcx);\n         }\n \n         // For variadic functions, we don't have a declared type for all of\n@@ -4036,7 +4036,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n       ast::ExprForLoop(ref pat, ref head, ref block, _) => {\n         check_expr(fcx, &**head);\n         let typ = lookup_method_for_for_loop(fcx, &**head, expr.id);\n-        vtable2::select_fcx_obligations_where_possible(fcx);\n+        vtable::select_fcx_obligations_where_possible(fcx);\n \n         let pcx = pat_ctxt {\n             fcx: fcx,\n@@ -4743,7 +4743,7 @@ pub fn check_const_with_ty(fcx: &FnCtxt,\n \n     check_expr_with_hint(fcx, e, declty);\n     demand::coerce(fcx, e.span, declty, e);\n-    vtable2::select_all_fcx_obligations_or_error(fcx);\n+    vtable::select_all_fcx_obligations_or_error(fcx);\n     regionck::regionck_expr(fcx, e);\n     writeback::resolve_type_vars_in_expr(fcx, e);\n }"}, {"sha": "029e66eab0f984d038f9c1f0d8e6776bd99a2264", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=dea37d73ca4bc85a486a83bf19664495ab328fcd", "patch": "@@ -126,7 +126,7 @@ use middle::ty;\n use middle::typeck::astconv::AstConv;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::check::regionmanip;\n-use middle::typeck::check::vtable2;\n+use middle::typeck::check::vtable;\n use middle::typeck::infer::resolve_and_force_all_but_regions;\n use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n@@ -172,7 +172,7 @@ pub fn regionck_fn(fcx: &FnCtxt, id: ast::NodeId, blk: &ast::Block) {\n \n     // Region checking a fn can introduce new trait obligations,\n     // particularly around closure bounds.\n-    vtable2::select_all_fcx_obligations_or_error(fcx);\n+    vtable::select_all_fcx_obligations_or_error(fcx);\n \n     fcx.infcx().resolve_regions_and_report_errors();\n }"}, {"sha": "d557a2b713be7127a3169de9ba05facef2fe4ce4", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=dea37d73ca4bc85a486a83bf19664495ab328fcd", "previous_filename": "src/librustc/middle/typeck/check/vtable2.rs"}, {"sha": "3c594fbf2d3661ea4277cdfe79dd34d41092b48e", "filename": "src/librustc/middle/typeck/check/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea37d73ca4bc85a486a83bf19664495ab328fcd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs?ref=dea37d73ca4bc85a486a83bf19664495ab328fcd", "patch": "@@ -14,7 +14,7 @@ use middle::traits;\n use middle::ty;\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::{FnCtxt, Inherited, blank_fn_ctxt, vtable2, regionck};\n+use middle::typeck::check::{FnCtxt, Inherited, blank_fn_ctxt, vtable, regionck};\n use middle::typeck::check::regionmanip::replace_late_bound_regions;\n use middle::typeck::CrateCtxt;\n use util::ppaux::Repr;\n@@ -100,7 +100,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         let inh = Inherited::new(ccx.tcx, param_env);\n         let fcx = blank_fn_ctxt(ccx, &inh, polytype.ty, item.id);\n         f(self, &fcx);\n-        vtable2::select_all_fcx_obligations_or_error(&fcx);\n+        vtable::select_all_fcx_obligations_or_error(&fcx);\n         regionck::regionck_item(&fcx, item);\n     }\n "}]}