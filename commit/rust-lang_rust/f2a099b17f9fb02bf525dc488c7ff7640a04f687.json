{"sha": "f2a099b17f9fb02bf525dc488c7ff7640a04f687", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYTA5OWIxN2Y5ZmIwMmJmNTI1ZGM0ODhjN2ZmNzY0MGEwNGY2ODc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-06-26T09:35:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-26T09:35:44Z"}, "message": "Rollup merge of #51789 - estebank:issue-50577, r=oli-obk\n\nDon't ICE when performing `lower_pattern_unadjusted` on a `TyError`\n\nFix #50577. CC #51696.\n\nr? @oli-obk", "tree": {"sha": "6078ed404d92f03c89fbae3fcc212a945069679e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6078ed404d92f03c89fbae3fcc212a945069679e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2a099b17f9fb02bf525dc488c7ff7640a04f687", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbMgjwCRBK7hj4Ov3rIwAAdHIIAF7cV3oquc2otSGkNx4V6RMb\nF3a4ouxMhjUai/9YuPYd2xHmks5GCQNyoW0g2LnpamSEj2To5t9/D3keP5AH7wOm\nzVoWsKIBgnoIL3EhXahI2uLCXEMaRv6S35i187aKY1CBFg8leExk5jiXskA9L7Z3\nmfpSSLsBUlNz8P9vocEQ6v2s4zvIXzWO58LcfD6tCj3pZQ/UtnSVAmHRz86LailQ\nxU2gIabJVxOOpiVp0bWcZB2WTUSxRYfziafB4nmUOgTj4Nn1ASfSYxX97yiJVlvv\n/XQpneTujKLfWQeEgccS2m4tHW0dkNczLU9yjHOj/0K5i1hUv9jGjpcPN3PNrGI=\n=4tj8\n-----END PGP SIGNATURE-----\n", "payload": "tree 6078ed404d92f03c89fbae3fcc212a945069679e\nparent 8014713805860359b8b04ea03fb1c89e197f6ee6\nparent 7aab3bf863383aa77fd293cf7d26a1b28597d49e\nauthor Pietro Albini <pietro@pietroalbini.org> 1530005744 +0200\ncommitter GitHub <noreply@github.com> 1530005744 +0200\n\nRollup merge of #51789 - estebank:issue-50577, r=oli-obk\n\nDon't ICE when performing `lower_pattern_unadjusted` on a `TyError`\n\nFix #50577. CC #51696.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a099b17f9fb02bf525dc488c7ff7640a04f687", "html_url": "https://github.com/rust-lang/rust/commit/f2a099b17f9fb02bf525dc488c7ff7640a04f687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2a099b17f9fb02bf525dc488c7ff7640a04f687/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8014713805860359b8b04ea03fb1c89e197f6ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8014713805860359b8b04ea03fb1c89e197f6ee6", "html_url": "https://github.com/rust-lang/rust/commit/8014713805860359b8b04ea03fb1c89e197f6ee6"}, {"sha": "7aab3bf863383aa77fd293cf7d26a1b28597d49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aab3bf863383aa77fd293cf7d26a1b28597d49e", "html_url": "https://github.com/rust-lang/rust/commit/7aab3bf863383aa77fd293cf7d26a1b28597d49e"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "9b92a8b5e7861edff98293cf2e23de07beee3eb3", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f2a099b17f9fb02bf525dc488c7ff7640a04f687/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a099b17f9fb02bf525dc488c7ff7640a04f687/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f2a099b17f9fb02bf525dc488c7ff7640a04f687", "patch": "@@ -416,7 +416,6 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n \n             PatKind::Slice(ref prefix, ref slice, ref suffix) => {\n-                let ty = self.tables.node_id_to_type(pat.hir_id);\n                 match ty.sty {\n                     ty::TyRef(_, ty, _) =>\n                         PatternKind::Deref {\n@@ -427,11 +426,12 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                     pat.span, ty, prefix, slice, suffix))\n                             },\n                         },\n-\n                     ty::TySlice(..) |\n                     ty::TyArray(..) =>\n                         self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix),\n-\n+                    ty::TyError => { // Avoid ICE\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n+                    }\n                     ref sty =>\n                         span_bug!(\n                             pat.span,\n@@ -441,7 +441,6 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n \n             PatKind::Tuple(ref subpatterns, ddpos) => {\n-                let ty = self.tables.node_id_to_type(pat.hir_id);\n                 match ty.sty {\n                     ty::TyTuple(ref tys) => {\n                         let subpatterns =\n@@ -455,7 +454,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                         PatternKind::Leaf { subpatterns: subpatterns }\n                     }\n-\n+                    ty::TyError => { // Avoid ICE (#50577)\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n+                    }\n                     ref sty => span_bug!(pat.span, \"unexpected type for tuple pattern: {:?}\", sty),\n                 }\n             }\n@@ -464,6 +465,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 let var_ty = self.tables.node_id_to_type(pat.hir_id);\n                 let region = match var_ty.sty {\n                     ty::TyRef(r, _, _) => Some(r),\n+                    ty::TyError => { // Avoid ICE\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n+                    }\n                     _ => None,\n                 };\n                 let bm = *self.tables.pat_binding_modes().get(pat.hir_id)\n@@ -505,12 +509,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 let def = self.tables.qpath_def(qpath, pat.hir_id);\n                 let adt_def = match ty.sty {\n                     ty::TyAdt(adt_def, _) => adt_def,\n-                    ty::TyError => {  // Avoid ICE (#50585)\n-                        return Pattern {\n-                            span: pat.span,\n-                            ty,\n-                            kind: Box::new(PatternKind::Wild),\n-                        };\n+                    ty::TyError => { // Avoid ICE (#50585)\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n                     }\n                     _ => span_bug!(pat.span,\n                                    \"tuple struct pattern not applied to an ADT {:?}\","}, {"sha": "a3bb6872424fc93024feedd0bed3f3ce785c7979", "filename": "src/test/ui/issue-50577.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f2a099b17f9fb02bf525dc488c7ff7640a04f687/src%2Ftest%2Fui%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a099b17f9fb02bf525dc488c7ff7640a04f687/src%2Ftest%2Fui%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50577.rs?ref=f2a099b17f9fb02bf525dc488c7ff7640a04f687", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    enum Foo {\n+        Drop = assert_eq!(1, 1)\n+    }\n+}"}, {"sha": "8751303a0db9b71400edc2242746a07db05a7af9", "filename": "src/test/ui/issue-50577.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2a099b17f9fb02bf525dc488c7ff7640a04f687/src%2Ftest%2Fui%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2a099b17f9fb02bf525dc488c7ff7640a04f687/src%2Ftest%2Fui%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50577.stderr?ref=f2a099b17f9fb02bf525dc488c7ff7640a04f687", "patch": "@@ -0,0 +1,13 @@\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/issue-50577.rs:13:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^ expected (), found isize\n+   |\n+   = note: expected type `()`\n+              found type `isize`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0317`."}]}