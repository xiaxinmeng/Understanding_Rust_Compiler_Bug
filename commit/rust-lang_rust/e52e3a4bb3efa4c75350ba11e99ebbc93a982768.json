{"sha": "e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "node_id": "C_kwDOAAsO6NoAKGU1MmUzYTRiYjNlZmE0Yzc1MzUwYmExMWU5OWViYmM5M2E5ODI3Njg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-23T18:28:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-23T18:28:11Z"}, "message": "Rollup merge of #91148 - jhpratt:use-default-enum, r=petrochenkov\n\nUse `derive_default_enum` in the compiler\n\nLet's get this feature some real-world love.\n\n``@rustbot`` label: +C-cleanup +S-waiting-on-review", "tree": {"sha": "bd96dcd84fe25954d6b20754ad86d9c4a37753ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd96dcd84fe25954d6b20754ad86d9c4a37753ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnTK8CRBK7hj4Ov3rIwAAa8sIAHpLXqw6eKZXxZxW5mmisGDM\nQ++4Z9fUvs5DN4EtBvzlE3dh2RW1/U3rfboL3Ga71ROg5FjUIGRCeOPYACOC6MMa\nIcbrDg7uVwUp4vvvDkSl5+T6ucroj+cr0wC58/gdx3YkKu9I8Hh1SwU4zeEl/Myt\npSG+a7yZIQALB4UVw0Sxpt7XOYTaJMh3pGf+50kxEnNvVgZqpBpfiIoeN6MxQUYr\nT/egpdrDMRA5v3FKhMRJY+uxRoeoaT9lxfwhVMhCG5eeQXuzc59zYcze81hpIEe0\nf7maHmrj7Ekannczyno0g4X9yKFqCFWQ22kw24E0Xmnus15forjZPscbhVXi2rk=\n=cSeW\n-----END PGP SIGNATURE-----\n", "payload": "tree bd96dcd84fe25954d6b20754ad86d9c4a37753ba\nparent a26c2c7495b6a6d4df49d6dabe3453057804e98e\nparent 7b103e7dd2df75e4e8dbb333bc79ffc7e9304f65\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637692091 +0100\ncommitter GitHub <noreply@github.com> 1637692091 +0100\n\nRollup merge of #91148 - jhpratt:use-default-enum, r=petrochenkov\n\nUse `derive_default_enum` in the compiler\n\nLet's get this feature some real-world love.\n\n``@rustbot`` label: +C-cleanup +S-waiting-on-review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "html_url": "https://github.com/rust-lang/rust/commit/e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a26c2c7495b6a6d4df49d6dabe3453057804e98e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a26c2c7495b6a6d4df49d6dabe3453057804e98e", "html_url": "https://github.com/rust-lang/rust/commit/a26c2c7495b6a6d4df49d6dabe3453057804e98e"}, {"sha": "7b103e7dd2df75e4e8dbb333bc79ffc7e9304f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b103e7dd2df75e4e8dbb333bc79ffc7e9304f65", "html_url": "https://github.com/rust-lang/rust/commit/7b103e7dd2df75e4e8dbb333bc79ffc7e9304f65"}], "stats": {"total": 48, "additions": 17, "deletions": 31}, "files": [{"sha": "2fd01c2d595fabe187d8019f1ad04f757b093976", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -95,9 +95,10 @@ pub(crate) type UnificationTable<'a, 'tcx, T> = ut::UnificationTable<\n /// This is used so that the region values inferred by HIR region solving are\n /// not exposed, and so that we can avoid doing work in HIR typeck that MIR\n /// typeck will also do.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Default)]\n pub enum RegionckMode {\n     /// The default mode: report region errors, don't erase regions.\n+    #[default]\n     Solve,\n     /// Erase the results of region after solving.\n     Erase {\n@@ -108,12 +109,6 @@ pub enum RegionckMode {\n     },\n }\n \n-impl Default for RegionckMode {\n-    fn default() -> Self {\n-        RegionckMode::Solve\n-    }\n-}\n-\n impl RegionckMode {\n     /// Indicates that the MIR borrowck will repeat these region\n     /// checks, so we should ignore errors if NLL is (unconditionally)"}, {"sha": "e4b407e7c112d838057df364b0d4de3c1f13e5d3", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -15,6 +15,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n+#![feature(derive_default_enum)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "9ce9f65a49066bb88064a3e6786a551a8a52de8a", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -30,6 +30,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(core_intrinsics)]\n+#![feature(derive_default_enum)]\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(if_let_guard)]"}, {"sha": "7e054d1e17fcdadc00a82218659acdcdcb6504f1", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -2263,10 +2263,11 @@ impl<'tcx> TyS<'tcx> {\n /// a miscompilation or unsoundness.\n ///\n /// When in doubt, use `VarianceDiagInfo::default()`\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]\n pub enum VarianceDiagInfo<'tcx> {\n     /// No additional information - this is the default.\n     /// We will not add any additional information to error messages.\n+    #[default]\n     None,\n     /// We switched our variance because a type occurs inside\n     /// the generic argument of a mutable reference or pointer\n@@ -2301,9 +2302,3 @@ impl<'tcx> VarianceDiagInfo<'tcx> {\n         }\n     }\n }\n-\n-impl<'tcx> Default for VarianceDiagInfo<'tcx> {\n-    fn default() -> Self {\n-        Self::None\n-    }\n-}"}, {"sha": "ab3c122053c5ebd777d5c65d17fbdb48dcc59118", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -335,22 +335,17 @@ impl Default for ErrorOutputType {\n }\n \n /// Parameter to control path trimming.\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, Hash)]\n pub enum TrimmedDefPaths {\n     /// `try_print_trimmed_def_path` never prints a trimmed path and never calls the expensive query\n+    #[default]\n     Never,\n     /// `try_print_trimmed_def_path` calls the expensive query, the query doesn't call `delay_good_path_bug`\n     Always,\n     /// `try_print_trimmed_def_path` calls the expensive query, the query calls `delay_good_path_bug`\n     GoodPath,\n }\n \n-impl Default for TrimmedDefPaths {\n-    fn default() -> Self {\n-        Self::Never\n-    }\n-}\n-\n /// Use tree-based collections to cheaply get a deterministic `Hash` implementation.\n /// *Do not* switch `BTreeMap` out for an unsorted container type! That would break\n /// dependency tracking for command-line arguments. Also only hash keys, since tracking"}, {"sha": "399b616915ee10b419cd0c5e878fee1b75466e10", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -1,4 +1,5 @@\n #![feature(crate_visibility_modifier)]\n+#![feature(derive_default_enum)]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "1820e33b19bf4fc0ae332bc78aeb3ab8e6359d23", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -14,6 +14,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(derive_default_enum)]\n #![feature(hash_drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "4bc22d5d73543f9b30a32c9130dffdba5a348d85", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -82,9 +82,14 @@ pub use self::chalk_fulfill::FulfillmentContext as ChalkFulfillmentContext;\n pub use rustc_infer::traits::*;\n \n /// Whether to skip the leak check, as part of a future compatibility warning step.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+///\n+/// The \"default\" for skip-leak-check corresponds to the current\n+/// behavior (do not skip the leak check) -- not the behavior we are\n+/// transitioning into.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Default)]\n pub enum SkipLeakCheck {\n     Yes,\n+    #[default]\n     No,\n }\n \n@@ -94,15 +99,6 @@ impl SkipLeakCheck {\n     }\n }\n \n-/// The \"default\" for skip-leak-check corresponds to the current\n-/// behavior (do not skip the leak check) -- not the behavior we are\n-/// transitioning into.\n-impl Default for SkipLeakCheck {\n-    fn default() -> Self {\n-        SkipLeakCheck::No\n-    }\n-}\n-\n /// The mode that trait queries run in.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum TraitQueryMode {"}, {"sha": "2486999ffb5c1188ca50dd64c3f4c2a0bf1cb09a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e3a4bb3efa4c75350ba11e99ebbc93a982768/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "patch": "@@ -163,6 +163,7 @@\n #![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n+#![feature(derive_default_enum)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(doc_primitive)]"}]}