{"sha": "c24753ae5d06edcb798d17ed8713ef02a3c3b164", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNDc1M2FlNWQwNmVkY2I3OThkMTdlZDg3MTNlZjAyYTNjM2IxNjQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-02T00:09:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-02T14:40:31Z"}, "message": "Don't allocate in `associated_type_shorthand_candidates`", "tree": {"sha": "b644e1556eb480de912981acbfcaa4a9709c8675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b644e1556eb480de912981acbfcaa4a9709c8675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c24753ae5d06edcb798d17ed8713ef02a3c3b164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c24753ae5d06edcb798d17ed8713ef02a3c3b164", "html_url": "https://github.com/rust-lang/rust/commit/c24753ae5d06edcb798d17ed8713ef02a3c3b164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c24753ae5d06edcb798d17ed8713ef02a3c3b164/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "html_url": "https://github.com/rust-lang/rust/commit/5ef0c7a21387c219478754393bf9ac1b1cebf0d4"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "018621131f128570bb8e5a8c543e9d04234fa4b8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c24753ae5d06edcb798d17ed8713ef02a3c3b164/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24753ae5d06edcb798d17ed8713ef02a3c3b164/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=c24753ae5d06edcb798d17ed8713ef02a3c3b164", "patch": "@@ -821,24 +821,38 @@ pub fn associated_type_shorthand_candidates<R>(\n     res: TypeNs,\n     mut cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,\n ) -> Option<R> {\n-    let traits_from_env: Vec<_> = match res {\n-        TypeNs::SelfType(impl_id) => match db.impl_trait(impl_id) {\n-            None => vec![],\n-            // FIXME: how to correctly handle higher-ranked bounds here?\n-            Some(trait_ref) => vec![trait_ref.value.shift_bound_vars_out(DebruijnIndex::ONE)],\n-        },\n+    let mut search = |t| {\n+        for t in all_super_trait_refs(db, t) {\n+            let data = db.trait_data(t.hir_trait_id());\n+\n+            for (name, assoc_id) in &data.items {\n+                if let AssocItemId::TypeAliasId(alias) = assoc_id {\n+                    if let Some(result) = cb(name, &t, *alias) {\n+                        return Some(result);\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    };\n+\n+    match res {\n+        // FIXME: how to correctly handle higher-ranked bounds here?\n+        TypeNs::SelfType(impl_id) => {\n+            search(db.impl_trait(impl_id)?.value.shift_bound_vars_out(DebruijnIndex::ONE))\n+        }\n         TypeNs::GenericParam(param_id) => {\n             let predicates = db.generic_predicates_for_param(param_id);\n-            let mut traits_: Vec<_> = predicates\n-                .iter()\n-                .filter_map(|pred| match &pred.value.value {\n-                    // FIXME: how to correctly handle higher-ranked bounds here?\n-                    WhereClause::Implemented(tr) => {\n-                        Some(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n-                    }\n-                    _ => None,\n-                })\n-                .collect();\n+            let res = predicates.iter().find_map(|pred| match &pred.value.value {\n+                // FIXME: how to correctly handle higher-ranked bounds here?\n+                WhereClause::Implemented(tr) => {\n+                    search(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n+                }\n+                _ => None,\n+            });\n+            if let res @ Some(_) = res {\n+                return res;\n+            }\n             // Handle `Self::Type` referring to own associated type in trait definitions\n             if let GenericDefId::TraitId(trait_id) = param_id.parent {\n                 let generics = generics(db.upcast(), trait_id.into());\n@@ -849,30 +863,13 @@ pub fn associated_type_shorthand_candidates<R>(\n                         trait_id: to_chalk_trait_id(trait_id),\n                         substitution: Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST),\n                     };\n-                    traits_.push(trait_ref);\n+                    return search(trait_ref);\n                 }\n             }\n-            traits_\n-        }\n-        _ => vec![],\n-    };\n-\n-    for t in traits_from_env.into_iter().flat_map(move |t| all_super_trait_refs(db, t)) {\n-        let data = db.trait_data(t.hir_trait_id());\n-\n-        for (name, assoc_id) in &data.items {\n-            match assoc_id {\n-                AssocItemId::TypeAliasId(alias) => {\n-                    if let Some(result) = cb(name, &t, *alias) {\n-                        return Some(result);\n-                    }\n-                }\n-                AssocItemId::FunctionId(_) | AssocItemId::ConstId(_) => {}\n-            }\n+            None\n         }\n+        _ => None,\n     }\n-\n-    None\n }\n \n /// Build the type of all specific fields of a struct or enum variant."}]}