{"sha": "5d0eae81aecb71d70d620525459972bf36771921", "node_id": "C_kwDOAAsO6NoAKDVkMGVhZTgxYWVjYjcxZDcwZDYyMDUyNTQ1OTk3MmJmMzY3NzE5MjE", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-19T13:43:37Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-06-15T15:54:06Z"}, "message": "Add `BorrowedFd::try_clone_to_owned`.\n\nAnd `BorrowedHandle::try_clone_to_owned` and\n`BorrowedSocket::try_clone_to_owned` on Windows.", "tree": {"sha": "94710759ef5ef64d32b4392c81a2a1c0503ba36a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94710759ef5ef64d32b4392c81a2a1c0503ba36a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d0eae81aecb71d70d620525459972bf36771921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d0eae81aecb71d70d620525459972bf36771921", "html_url": "https://github.com/rust-lang/rust/commit/5d0eae81aecb71d70d620525459972bf36771921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d0eae81aecb71d70d620525459972bf36771921/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb37bbcebc3f6d0981eef892817f3a4570e35907", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb37bbcebc3f6d0981eef892817f3a4570e35907", "html_url": "https://github.com/rust-lang/rust/commit/eb37bbcebc3f6d0981eef892817f3a4570e35907"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "7d688940d45ff32d6396aa5730f2dd4dc139b153", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d0eae81aecb71d70d620525459972bf36771921/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0eae81aecb71d70d620525459972bf36771921/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=5d0eae81aecb71d70d620525459972bf36771921", "patch": "@@ -79,9 +79,18 @@ impl BorrowedFd<'_> {\n impl OwnedFd {\n     /// Creates a new `OwnedFd` instance that shares the same underlying file handle\n     /// as the existing `OwnedFd` instance.\n-    #[cfg(not(target_arch = \"wasm32\"))]\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n+        self.as_fd().try_clone_to_owned()\n+    }\n+}\n+\n+impl BorrowedFd<'_> {\n+    /// Creates a new `OwnedFd` instance that shares the same underlying file\n+    /// description as the existing `BorrowedFd` instance.\n+    #[cfg(not(target_arch = \"wasm32\"))]\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+    pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedFd> {\n         // We want to atomically duplicate this file descriptor and set the\n         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This\n         // is a POSIX flag that was added to Linux in 2.6.24.\n@@ -96,12 +105,12 @@ impl OwnedFd {\n         let cmd = libc::F_DUPFD;\n \n         let fd = cvt(unsafe { libc::fcntl(self.as_raw_fd(), cmd, 0) })?;\n-        Ok(unsafe { Self::from_raw_fd(fd) })\n+        Ok(unsafe { OwnedFd::from_raw_fd(fd) })\n     }\n \n     #[cfg(target_arch = \"wasm32\")]\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-    pub fn try_clone(&self) -> crate::io::Result<Self> {\n+    pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedFd> {\n         Err(crate::io::const_io_error!(\n             crate::io::ErrorKind::Unsupported,\n             \"operation not supported on WASI yet\","}, {"sha": "c9d8624e838cce922e8d6c7bc466ec20e8b32ad0", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d0eae81aecb71d70d620525459972bf36771921/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0eae81aecb71d70d620525459972bf36771921/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=5d0eae81aecb71d70d620525459972bf36771921", "patch": "@@ -181,6 +181,14 @@ impl OwnedHandle {\n     /// as the existing `OwnedHandle` instance.\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n+        self.as_handle().try_clone_to_owned()\n+    }\n+}\n+\n+impl BorrowedHandle<'_> {\n+    /// Creates a new `OwnedHandle` instance that shares the same underlying\n+    /// object as the existing `BorrowedHandle` instance.\n+    pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedHandle> {\n         self.duplicate(0, false, c::DUPLICATE_SAME_ACCESS)\n     }\n "}, {"sha": "b8cacf0b6c5602b7a864f6efedc780dd42a199dd", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5d0eae81aecb71d70d620525459972bf36771921/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0eae81aecb71d70d620525459972bf36771921/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=5d0eae81aecb71d70d620525459972bf36771921", "patch": "@@ -86,6 +86,28 @@ impl OwnedSocket {\n     /// as the existing `OwnedSocket` instance.\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone(&self) -> io::Result<Self> {\n+        self.as_socket().try_clone_to_owned()\n+    }\n+\n+    // FIXME(strict_provenance_magic): we defined RawSocket to be a u64 ;-;\n+    #[cfg(not(target_vendor = \"uwp\"))]\n+    pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n+        cvt(unsafe {\n+            c::SetHandleInformation(self.as_raw_socket() as c::HANDLE, c::HANDLE_FLAG_INHERIT, 0)\n+        })\n+        .map(drop)\n+    }\n+\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n+        Err(io::const_io_error!(io::ErrorKind::Unsupported, \"Unavailable on UWP\"))\n+    }\n+}\n+\n+impl BorrowedSocket<'_> {\n+    /// Creates a new `OwnedSocket` instance that shares the same underlying\n+    /// object as the existing `BorrowedSocket` instance.\n+    pub fn try_clone_to_owned(&self) -> io::Result<OwnedSocket> {\n         let mut info = unsafe { mem::zeroed::<c::WSAPROTOCOL_INFO>() };\n         let result = unsafe {\n             c::WSADuplicateSocketW(self.as_raw_socket(), c::GetCurrentProcessId(), &mut info)\n@@ -133,20 +155,6 @@ impl OwnedSocket {\n             }\n         }\n     }\n-\n-    // FIXME(strict_provenance_magic): we defined RawSocket to be a u64 ;-;\n-    #[cfg(not(target_vendor = \"uwp\"))]\n-    pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n-        cvt(unsafe {\n-            c::SetHandleInformation(self.as_raw_socket() as c::HANDLE, c::HANDLE_FLAG_INHERIT, 0)\n-        })\n-        .map(drop)\n-    }\n-\n-    #[cfg(target_vendor = \"uwp\")]\n-    pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n-        Err(io::const_io_error!(io::ErrorKind::Unsupported, \"Unavailable on UWP\"))\n-    }\n }\n \n /// Returns the last error from the Windows socket interface."}]}