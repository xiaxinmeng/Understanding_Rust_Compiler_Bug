{"sha": "e5330a4f52fcf9de8112f3dd0abb094640b668e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzMwYTRmNTJmY2Y5ZGU4MTEyZjNkZDBhYmIwOTQ2NDBiNjY4ZTM=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-03T13:20:51Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-03T13:32:56Z"}, "message": "Apply suggestions from code review\n\ncomment nits\n\nCo-authored-by: Ralf Jung <post@ralfj.de>", "tree": {"sha": "b8782ecf217f473e4c25f2bb436fa5c320946a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8782ecf217f473e4c25f2bb436fa5c320946a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5330a4f52fcf9de8112f3dd0abb094640b668e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5330a4f52fcf9de8112f3dd0abb094640b668e3", "html_url": "https://github.com/rust-lang/rust/commit/e5330a4f52fcf9de8112f3dd0abb094640b668e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5330a4f52fcf9de8112f3dd0abb094640b668e3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3a876592c41e210f41101ffaade7e21b39fc2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3a876592c41e210f41101ffaade7e21b39fc2c", "html_url": "https://github.com/rust-lang/rust/commit/ba3a876592c41e210f41101ffaade7e21b39fc2c"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "a85303d4cd32449f6106e0ce989d0f26844c226c", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5330a4f52fcf9de8112f3dd0abb094640b668e3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5330a4f52fcf9de8112f3dd0abb094640b668e3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=e5330a4f52fcf9de8112f3dd0abb094640b668e3", "patch": "@@ -232,7 +232,7 @@ impl NonConstOp for TransientCellBorrow {\n }\n \n #[derive(Debug)]\n-/// A borrow of a type that contains an `UnsafeCell` somewhere. The borrow escapes to\n+/// A borrow of a type that contains an `UnsafeCell` somewhere. The borrow might escape to\n /// the final value of the constant, and thus we cannot allow this (for now). We may allow\n /// it in the future for static items.\n pub struct CellBorrow;"}, {"sha": "8c2525879b3631edf773b5a73cdf4cb20c16efee", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5330a4f52fcf9de8112f3dd0abb094640b668e3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5330a4f52fcf9de8112f3dd0abb094640b668e3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=e5330a4f52fcf9de8112f3dd0abb094640b668e3", "patch": "@@ -584,14 +584,19 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 if borrowed_place_has_mut_interior {\n                     match self.const_kind() {\n                         // In a const fn all borrows are transient or point to the places given via\n-                        // references in the arguments. The borrow checker guarantees that.\n+                        // references in the arguments (so we already checked them with\n+                        // TransientCellBorrow/CellBorrow as appropriate).\n+                        // The borrow checker guarantees that no new non-transient borrows are created.\n                         // NOTE: Once we have heap allocations during CTFE we need to figure out\n                         // how to prevent `const fn` to create long-lived allocations that point\n                         // to (interior) mutable memory.\n                         hir::ConstContext::ConstFn => self.check_op(ops::TransientCellBorrow),\n                         _ => {\n-                            // Locals without StorageDead follow the \"enclosing scope\" rule, meaning\n-                            // they are essentially anonymous static items themselves.\n+                            // Locals StorageDead are known to not leak to the final constant, and\n+                            // it is thus inherently safe to permit such locals to have their\n+                            // address taken as we can't end up with a reference to them in the\n+                            // final value without creating a dangling pointer, which will cause\n+                            // errors during validation.\n                             // Note: This is only sound if every local that has a `StorageDead` has a\n                             // `StorageDead` in every control flow path leading to a `return` terminator.\n                             if self.local_has_storage_dead(place.local) {"}]}