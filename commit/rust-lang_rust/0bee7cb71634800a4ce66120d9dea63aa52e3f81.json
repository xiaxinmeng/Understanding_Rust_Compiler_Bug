{"sha": "0bee7cb71634800a4ce66120d9dea63aa52e3f81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZWU3Y2I3MTYzNDgwMGE0Y2U2NjEyMGQ5ZGVhNjNhYTUyZTNmODE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-22T10:33:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-22T10:33:05Z"}, "message": "Merge #9453\n\n9453: Add first-class limits. r=matklad,lnicola a=rbartlensky\n\nPartially fixes #9286.\r\n\r\nThis introduces a new `Limits` structure which is passed as an input\r\nto `SourceDatabase`. This makes limits accessible almost everywhere in\r\nthe code, since most places have a database in scope.\r\n\r\nOne downside of this approach is that whenever you query limits, you\r\nessentially do an `Arc::clone` which is less than ideal.\r\n\r\nLet me know if I missed anything, or would like me to take a different approach!\n\nCo-authored-by: Robert Bartlensky <bartlensky.robert@gmail.com>", "tree": {"sha": "2950d3b3358a516093277c5e8482995bef506dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2950d3b3358a516093277c5e8482995bef506dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bee7cb71634800a4ce66120d9dea63aa52e3f81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+UlhCRBK7hj4Ov3rIwAAW2YIAKImrL3O/0SneF+NT3pV0cRR\nc0+4BcXWvU5gCgxSZrGkFMA1BYLRbzJDZ6EISZCZ4YirS0GHbMwIY/c14MWLVH5M\nw3VaOx862Kly9K5BeDI7v8GeVLu8j56x/Jbuh4BmLR+YeiOACOndGigLvBGp+sWC\n5qcKnQJhCkZgqcyG0tFWBSj5q9g5BXjwwzEvV8gmmI0svOJhO2NFm9md8BYLvjlA\nQWleX1gg1q9bgtW1vcMMr99BE3pdqnwg/GEHCaSK3ZMl4oF+VE3Ldn6Pr6K7MtHw\njtFoDqfPwTz+QMo8snWCUwfws33/JSvu7rYSXV7dAE9YTte9mkWHMOFTDNgxFtc=\n=oUYX\n-----END PGP SIGNATURE-----\n", "payload": "tree 2950d3b3358a516093277c5e8482995bef506dae\nparent 33748a6fce52a769ef1f6906f0d523023c358314\nparent 0b3d0cde8b502802d4d53924975fa82072b60f8d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626949985 +0000\ncommitter GitHub <noreply@github.com> 1626949985 +0000\n\nMerge #9453\n\n9453: Add first-class limits. r=matklad,lnicola a=rbartlensky\n\nPartially fixes #9286.\r\n\r\nThis introduces a new `Limits` structure which is passed as an input\r\nto `SourceDatabase`. This makes limits accessible almost everywhere in\r\nthe code, since most places have a database in scope.\r\n\r\nOne downside of this approach is that whenever you query limits, you\r\nessentially do an `Arc::clone` which is less than ideal.\r\n\r\nLet me know if I missed anything, or would like me to take a different approach!\n\nCo-authored-by: Robert Bartlensky <bartlensky.robert@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bee7cb71634800a4ce66120d9dea63aa52e3f81", "html_url": "https://github.com/rust-lang/rust/commit/0bee7cb71634800a4ce66120d9dea63aa52e3f81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bee7cb71634800a4ce66120d9dea63aa52e3f81/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33748a6fce52a769ef1f6906f0d523023c358314", "url": "https://api.github.com/repos/rust-lang/rust/commits/33748a6fce52a769ef1f6906f0d523023c358314", "html_url": "https://github.com/rust-lang/rust/commit/33748a6fce52a769ef1f6906f0d523023c358314"}, {"sha": "0b3d0cde8b502802d4d53924975fa82072b60f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3d0cde8b502802d4d53924975fa82072b60f8d", "html_url": "https://github.com/rust-lang/rust/commit/0b3d0cde8b502802d4d53924975fa82072b60f8d"}], "stats": {"total": 108, "additions": 84, "deletions": 24}, "files": [{"sha": "6f1271d9e0015cf0d9e4b9cfb33e0de30c4074ed", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -488,6 +488,7 @@ dependencies = [\n  \"indexmap\",\n  \"itertools\",\n  \"la-arena\",\n+ \"limit\",\n  \"log\",\n  \"mbe\",\n  \"once_cell\",\n@@ -509,6 +510,7 @@ dependencies = [\n  \"either\",\n  \"expect-test\",\n  \"la-arena\",\n+ \"limit\",\n  \"log\",\n  \"mbe\",\n  \"parser\",\n@@ -535,6 +537,7 @@ dependencies = [\n  \"hir_expand\",\n  \"itertools\",\n  \"la-arena\",\n+ \"limit\",\n  \"log\",\n  \"once_cell\",\n  \"profile\",\n@@ -641,6 +644,7 @@ dependencies = [\n  \"fst\",\n  \"hir\",\n  \"itertools\",\n+ \"limit\",\n  \"log\",\n  \"once_cell\",\n  \"profile\",\n@@ -793,6 +797,10 @@ dependencies = [\n  \"cc\",\n ]\n \n+[[package]]\n+name = \"limit\"\n+version = \"0.0.0\"\n+\n [[package]]\n name = \"lock_api\"\n version = \"0.4.4\""}, {"sha": "09a9fb27ba7d6c82a5ed513bb9cc80064b02698c", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -31,6 +31,7 @@ hir_expand = { path = \"../hir_expand\", version = \"0.0.0\" }\n mbe = { path = \"../mbe\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n tt = { path = \"../tt\", version = \"0.0.0\" }\n+limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "81956f35d62daf4af0786f046a1705704a295881", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -15,6 +15,7 @@ use hir_expand::{\n     ast_id_map::AstIdMap, hygiene::Hygiene, AstId, ExpandResult, HirFileId, InFile, MacroDefId,\n };\n use la_arena::{Arena, ArenaMap};\n+use limit::Limit;\n use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n@@ -53,10 +54,10 @@ pub struct Expander {\n }\n \n #[cfg(test)]\n-const EXPANSION_RECURSION_LIMIT: usize = 32;\n+const EXPANSION_RECURSION_LIMIT: Limit = Limit::new(32);\n \n #[cfg(not(test))]\n-const EXPANSION_RECURSION_LIMIT: usize = 128;\n+const EXPANSION_RECURSION_LIMIT: Limit = Limit::new(128);\n \n impl CfgExpander {\n     pub(crate) fn new(\n@@ -99,7 +100,7 @@ impl Expander {\n         db: &dyn DefDatabase,\n         macro_call: ast::MacroCall,\n     ) -> Result<ExpandResult<Option<(Mark, T)>>, UnresolvedMacro> {\n-        if self.recursion_limit + 1 > EXPANSION_RECURSION_LIMIT {\n+        if EXPANSION_RECURSION_LIMIT.check(self.recursion_limit + 1).is_err() {\n             cov_mark::hit!(your_stack_belongs_to_me);\n             return Ok(ExpandResult::str_err(\n                 \"reached recursion limit during macro expansion\".into(),"}, {"sha": "b9e35fea7ca37fe45fe3865a70f5d2d093e0c5e6", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -19,6 +19,7 @@ use hir_expand::{\n use hir_expand::{InFile, MacroCallLoc};\n use itertools::Itertools;\n use la_arena::Idx;\n+use limit::Limit;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::ast;\n \n@@ -49,9 +50,9 @@ use crate::{\n     UnresolvedMacro,\n };\n \n-const GLOB_RECURSION_LIMIT: usize = 100;\n-const EXPANSION_DEPTH_LIMIT: usize = 128;\n-const FIXED_POINT_LIMIT: usize = 8192;\n+const GLOB_RECURSION_LIMIT: Limit = Limit::new(100);\n+const EXPANSION_DEPTH_LIMIT: Limit = Limit::new(128);\n+const FIXED_POINT_LIMIT: Limit = Limit::new(8192);\n \n pub(super) fn collect_defs(\n     db: &dyn DefDatabase,\n@@ -356,7 +357,7 @@ impl DefCollector<'_> {\n                 }\n \n                 i += 1;\n-                if i == FIXED_POINT_LIMIT {\n+                if FIXED_POINT_LIMIT.check(i).is_err() {\n                     log::error!(\"name resolution is stuck\");\n                     break 'outer;\n                 }\n@@ -925,7 +926,7 @@ impl DefCollector<'_> {\n         import_type: ImportType,\n         depth: usize,\n     ) {\n-        if depth > GLOB_RECURSION_LIMIT {\n+        if GLOB_RECURSION_LIMIT.check(depth).is_err() {\n             // prevent stack overflows (but this shouldn't be possible)\n             panic!(\"infinite recursion in glob imports!\");\n         }\n@@ -1158,7 +1159,7 @@ impl DefCollector<'_> {\n         macro_call_id: MacroCallId,\n         depth: usize,\n     ) {\n-        if depth > EXPANSION_DEPTH_LIMIT {\n+        if EXPANSION_DEPTH_LIMIT.check(depth).is_err() {\n             cov_mark::hit!(macro_expansion_overflow);\n             log::warn!(\"macro expansion is too deep\");\n             return;"}, {"sha": "04427ffc801d00a089884e2b2bdf9d578f2db8bb", "filename": "crates/hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -1,11 +1,12 @@\n //! This module resolves `mod foo;` declaration to file.\n use base_db::{AnchoredPath, FileId};\n use hir_expand::name::Name;\n+use limit::Limit;\n use syntax::SmolStr;\n \n use crate::{db::DefDatabase, HirFileId};\n \n-const MOD_DEPTH_LIMIT: u32 = 32;\n+const MOD_DEPTH_LIMIT: Limit = Limit::new(32);\n \n #[derive(Clone, Debug)]\n pub(super) struct ModDir {\n@@ -25,7 +26,7 @@ impl ModDir {\n     }\n     fn child(&self, dir_path: DirPath, root_non_dir_owner: bool) -> Option<ModDir> {\n         let depth = self.depth + 1;\n-        if depth > MOD_DEPTH_LIMIT {\n+        if MOD_DEPTH_LIMIT.check(depth as usize).is_err() {\n             log::error!(\"MOD_DEPTH_LIMIT exceeded\");\n             cov_mark::hit!(circular_mods);\n             return None;"}, {"sha": "92d6c3e96a1066b311091cf8a49d4f1bf2544902", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -21,6 +21,7 @@ parser = { path = \"../parser\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n tt = { path = \"../tt\", version = \"0.0.0\" }\n mbe = { path = \"../mbe\", version = \"0.0.0\" }\n+limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "7c83fcd639cb2b53b8d3e872569ceeb4f7be10b5", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -3,6 +3,7 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n+use limit::Limit;\n use mbe::{ExpandError, ExpandResult};\n use parser::FragmentKind;\n use syntax::{\n@@ -21,7 +22,7 @@ use crate::{\n ///\n /// If an invocation produces more tokens than this limit, it will not be stored in the database and\n /// an error will be emitted.\n-const TOKEN_LIMIT: usize = 524288;\n+const TOKEN_LIMIT: Limit = Limit::new(524288);\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {\n@@ -356,10 +357,12 @@ fn macro_expand_with_arg(\n     let ExpandResult { value: tt, err } = macro_rules.expand(db, id, &macro_arg.0);\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n-    if count > TOKEN_LIMIT {\n+    // XXX: Make ExpandResult a real error and use .map_err instead?\n+    if TOKEN_LIMIT.check(count).is_err() {\n         return ExpandResult::str_err(format!(\n             \"macro invocation exceeds token limit: produced {} tokens, limit is {}\",\n-            count, TOKEN_LIMIT,\n+            count,\n+            TOKEN_LIMIT.inner(),\n         ));\n     }\n "}, {"sha": "134a7892d619a5355bb969397a2ace6335f0dd73", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -29,6 +29,7 @@ hir_expand = { path = \"../hir_expand\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "267d08d69a6a6e8ed4f1a41e69d491b9a3cc32e4", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -9,6 +9,7 @@ use base_db::CrateId;\n use chalk_ir::{cast::Cast, fold::Fold, interner::HasInterner, VariableKind};\n use hir_def::lang_item::LangItemTarget;\n use hir_expand::name::name;\n+use limit::Limit;\n use log::{info, warn};\n \n use crate::{\n@@ -17,6 +18,8 @@ use crate::{\n     Ty, TyBuilder, TyKind,\n };\n \n+const AUTODEREF_RECURSION_LIMIT: Limit = Limit::new(10);\n+\n pub(crate) enum AutoderefKind {\n     Builtin,\n     Overloaded,\n@@ -63,7 +66,7 @@ impl Iterator for Autoderef<'_> {\n             return Some((self.ty.clone(), 0));\n         }\n \n-        if self.steps.len() >= AUTODEREF_RECURSION_LIMIT {\n+        if AUTODEREF_RECURSION_LIMIT.check(self.steps.len() + 1).is_err() {\n             return None;\n         }\n \n@@ -87,8 +90,6 @@ impl Iterator for Autoderef<'_> {\n     }\n }\n \n-const AUTODEREF_RECURSION_LIMIT: usize = 10;\n-\n // FIXME: replace uses of this with Autoderef above\n pub fn autoderef<'a>(\n     db: &'a dyn HirDatabase,\n@@ -99,7 +100,7 @@ pub fn autoderef<'a>(\n     successors(Some(ty), move |ty| {\n         deref(db, krate?, InEnvironment { goal: ty, environment: environment.clone() })\n     })\n-    .take(AUTODEREF_RECURSION_LIMIT)\n+    .take(AUTODEREF_RECURSION_LIMIT.inner())\n }\n \n pub(crate) fn deref("}, {"sha": "73b623d12221f19209f08eb550e4102052d5a946", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn replace_derive_with_manual_impl(\n         current_crate,\n         NameToImport::Exact(trait_name.to_string()),\n         items_locator::AssocItemSearch::Exclude,\n-        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n+        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n     )\n     .filter_map(|item| match ModuleDef::from(item.as_module_def_id()?) {\n         ModuleDef::Trait(trait_) => Some(trait_),"}, {"sha": "386b6bf0e7626981e1088560b53828810bcdbadb", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -187,7 +187,7 @@ pub fn resolve_completion_edits(\n         current_crate,\n         NameToImport::Exact(imported_name),\n         items_locator::AssocItemSearch::Include,\n-        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n+        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n     )\n     .filter_map(|candidate| {\n         current_module"}, {"sha": "f8a2cbef8dfc45123acacc7e047df82ff805a4b6", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -26,6 +26,7 @@ profile = { path = \"../profile\", version = \"0.0.0\" }\n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n hir = { path = \"../hir\", version = \"0.0.0\" }\n+limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "5017c7f5225e151d318c8eb0fa06202435a288a5", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -282,7 +282,7 @@ fn path_applicable_imports(\n                 //\n                 // see also an ignored test under FIXME comment in the qualify_path.rs module\n                 AssocItemSearch::Exclude,\n-                Some(DEFAULT_QUERY_SEARCH_LIMIT),\n+                Some(DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n             )\n             .filter_map(|item| {\n                 let mod_path = mod_path(item)?;\n@@ -299,7 +299,7 @@ fn path_applicable_imports(\n                 current_crate,\n                 path_candidate.name.clone(),\n                 AssocItemSearch::Include,\n-                Some(DEFAULT_QUERY_SEARCH_LIMIT),\n+                Some(DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n             )\n             .filter_map(|item| {\n                 import_for_item(\n@@ -445,7 +445,7 @@ fn trait_applicable_items(\n         current_crate,\n         trait_candidate.assoc_item_name.clone(),\n         AssocItemSearch::AssocItemsOnly,\n-        Some(DEFAULT_QUERY_SEARCH_LIMIT),\n+        Some(DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n     )\n     .filter_map(|input| item_as_assoc(db, input))\n     .filter_map(|assoc| {"}, {"sha": "1ececb6c8579027e235ad46ea4481974647a688b", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -7,6 +7,7 @@ use hir::{\n     import_map::{self, ImportKind},\n     AsAssocItem, Crate, ItemInNs, ModuleDef, Semantics,\n };\n+use limit::Limit;\n use syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n@@ -17,7 +18,7 @@ use crate::{\n };\n \n /// A value to use, when uncertain which limit to pick.\n-pub const DEFAULT_QUERY_SEARCH_LIMIT: usize = 40;\n+pub const DEFAULT_QUERY_SEARCH_LIMIT: Limit = Limit::new(40);\n \n /// Three possible ways to search for the name in associated and/or other items.\n #[derive(Debug, Clone, Copy)]"}, {"sha": "7676f3644b3ee24be8cd7f8e9231b0367bd745e8", "filename": "crates/limit/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Flimit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Flimit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flimit%2FCargo.toml?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"limit\"\n+version = \"0.0.0\"\n+description = \"TBD\"\n+license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n+\n+[dependencies]"}, {"sha": "8c96c748dbf1fa76d99822907a54ec5622b6a3cc", "filename": "crates/limit/src/lib.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Flimit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee7cb71634800a4ce66120d9dea63aa52e3f81/crates%2Flimit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flimit%2Fsrc%2Flib.rs?ref=0bee7cb71634800a4ce66120d9dea63aa52e3f81", "patch": "@@ -0,0 +1,31 @@\n+//! limit defines a struct to enforce limits.\n+\n+/// Represents a struct used to enforce a numerical limit.\n+pub struct Limit {\n+    upper_bound: usize,\n+}\n+\n+impl Limit {\n+    /// Creates a new limit.\n+    #[inline]\n+    pub const fn new(upper_bound: usize) -> Self {\n+        Self { upper_bound }\n+    }\n+\n+    /// Gets the underlying numeric limit.\n+    #[inline]\n+    pub const fn inner(&self) -> usize {\n+        self.upper_bound\n+    }\n+\n+    /// Checks whether the given value is below the limit.\n+    /// Returns `Ok` when `other` is below `self`, and `Err` otherwise.\n+    #[inline]\n+    pub const fn check(&self, other: usize) -> Result<(), ()> {\n+        if other > self.upper_bound {\n+            Err(())\n+        } else {\n+            Ok(())\n+        }\n+    }\n+}"}]}