{"sha": "482a9924397ff078ba5d78dc975345594ddf9417", "node_id": "C_kwDOAAsO6NoAKDQ4MmE5OTI0Mzk3ZmYwNzhiYTVkNzhkYzk3NTM0NTU5NGRkZjk0MTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T12:59:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T12:59:20Z"}, "message": "Auto merge of #13228 - Veykril:ref-import-filtering, r=Veykril\n\nMove reference imports filtering into to_proto layer\n\nFollow up to https://github.com/rust-lang/rust-analyzer/pull/13186", "tree": {"sha": "4424bf5477c6c752019aafe71abe5654e5ccf9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4424bf5477c6c752019aafe71abe5654e5ccf9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/482a9924397ff078ba5d78dc975345594ddf9417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/482a9924397ff078ba5d78dc975345594ddf9417", "html_url": "https://github.com/rust-lang/rust/commit/482a9924397ff078ba5d78dc975345594ddf9417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/482a9924397ff078ba5d78dc975345594ddf9417/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64c95600c0887dbb48a429a00700df47af75eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64c95600c0887dbb48a429a00700df47af75eaa", "html_url": "https://github.com/rust-lang/rust/commit/f64c95600c0887dbb48a429a00700df47af75eaa"}, {"sha": "cadb01c3155fe1df4ab3d59659ae22fc477c6734", "url": "https://api.github.com/repos/rust-lang/rust/commits/cadb01c3155fe1df4ab3d59659ae22fc477c6734", "html_url": "https://github.com/rust-lang/rust/commit/cadb01c3155fe1df4ab3d59659ae22fc477c6734"}], "stats": {"total": 95, "additions": 45, "deletions": 50}, "files": [{"sha": "6f885fba783ad068ba586da29619604849455b9e", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=482a9924397ff078ba5d78dc975345594ddf9417", "patch": "@@ -9,6 +9,7 @@ use std::{mem, sync::Arc};\n use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n use hir::{DefWithBody, HasAttrs, HasSource, InFile, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n+use parser::SyntaxKind;\n use stdx::hash::NoHashHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n \n@@ -67,6 +68,7 @@ pub enum ReferenceCategory {\n     // Create\n     Write,\n     Read,\n+    Import,\n     // FIXME: Some day should be able to search in doc comments. Would probably\n     // need to switch from enum to bitflags then?\n     // DocComment\n@@ -577,7 +579,7 @@ impl<'a> FindUsages<'a> {\n                 let reference = FileReference {\n                     range,\n                     name: ast::NameLike::NameRef(name_ref.clone()),\n-                    category: None,\n+                    category: is_name_ref_in_import(name_ref).then(|| ReferenceCategory::Import),\n                 };\n                 sink(file_id, reference)\n             }\n@@ -756,7 +758,7 @@ impl ReferenceCategory {\n     fn new(def: &Definition, r: &ast::NameRef) -> Option<ReferenceCategory> {\n         // Only Locals and Fields have accesses for now.\n         if !matches!(def, Definition::Local(_) | Definition::Field(_)) {\n-            return None;\n+            return is_name_ref_in_import(r).then(|| ReferenceCategory::Import);\n         }\n \n         let mode = r.syntax().ancestors().find_map(|node| {\n@@ -783,3 +785,12 @@ impl ReferenceCategory {\n         mode.or(Some(ReferenceCategory::Read))\n     }\n }\n+\n+fn is_name_ref_in_import(name_ref: &ast::NameRef) -> bool {\n+    name_ref\n+        .syntax()\n+        .parent()\n+        .and_then(ast::PathSegment::cast)\n+        .and_then(|it| it.parent_path().top_path().syntax().parent())\n+        .map_or(false, |it| it.kind() == SyntaxKind::USE_TREE)\n+}"}, {"sha": "210c5c7facd2de1a42ad6ccbffadb6181e15abd2", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=482a9924397ff078ba5d78dc975345594ddf9417", "patch": "@@ -158,7 +158,6 @@ pub(crate) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation)\n                 &Semantics::new(db),\n                 FilePosition { file_id, offset: annotation.range.start() },\n                 None,\n-                false,\n             )\n             .map(|result| {\n                 result"}, {"sha": "1bdd626f1e834cbec0c8437639d46b130988c55d", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=482a9924397ff078ba5d78dc975345594ddf9417", "patch": "@@ -377,6 +377,7 @@ mod tests {\n                         match it {\n                             ReferenceCategory::Read => \"read\",\n                             ReferenceCategory::Write => \"write\",\n+                            ReferenceCategory::Import => \"import\",\n                         }\n                         .to_string()\n                     }),\n@@ -423,20 +424,20 @@ struct Foo;\n         check(\n             r#\"\n use crate$0;\n-  //^^^^^\n+  //^^^^^ import\n use self;\n-  //^^^^\n+  //^^^^ import\n mod __ {\n     use super;\n-      //^^^^^\n+      //^^^^^ import\n }\n \"#,\n         );\n         check(\n             r#\"\n //- /main.rs crate:main deps:lib\n use lib$0;\n-  //^^^\n+  //^^^ import\n //- /lib.rs crate:lib\n \"#,\n         );\n@@ -450,7 +451,7 @@ use lib$0;\n mod foo;\n //- /foo.rs\n use self$0;\n- // ^^^^\n+ // ^^^^ import\n \"#,\n         );\n     }"}, {"sha": "0552330814aa4b1bd85762119136531489c20086", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=482a9924397ff078ba5d78dc975345594ddf9417", "patch": "@@ -425,11 +425,8 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         search_scope: Option<SearchScope>,\n-        exclude_imports: bool,\n     ) -> Cancellable<Option<Vec<ReferenceSearchResult>>> {\n-        self.with_db(|db| {\n-            references::find_all_refs(&Semantics::new(db), position, search_scope, exclude_imports)\n-        })\n+        self.with_db(|db| references::find_all_refs(&Semantics::new(db), position, search_scope))\n     }\n \n     /// Finds all methods and free functions for the file. Does not return tests!"}, {"sha": "e942413c11057ed40810a518b85eb0dcf641ea7c", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=482a9924397ff078ba5d78dc975345594ddf9417", "patch": "@@ -54,7 +54,6 @@ pub(crate) fn find_all_refs(\n     sema: &Semantics<'_, RootDatabase>,\n     position: FilePosition,\n     search_scope: Option<SearchScope>,\n-    exclude_imports: bool,\n ) -> Option<Vec<ReferenceSearchResult>> {\n     let _p = profile::span(\"find_all_refs\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n@@ -80,10 +79,6 @@ pub(crate) fn find_all_refs(\n                 retain_adt_literal_usages(&mut usages, def, sema);\n             }\n \n-            if exclude_imports {\n-                filter_import_references(&mut usages);\n-            }\n-\n             let references = usages\n                 .into_iter()\n                 .map(|(file_id, refs)| {\n@@ -117,17 +112,6 @@ pub(crate) fn find_all_refs(\n     }\n }\n \n-fn filter_import_references(usages: &mut UsageSearchResult) {\n-    for (_file_id, refs) in &mut usages.references {\n-        refs.retain(|it| match it.name.as_name_ref() {\n-            Some(name_ref) => {\n-                !name_ref.syntax().ancestors().any(|it_ref| matches!(it_ref.kind(), USE))\n-            }\n-            None => true,\n-        });\n-    }\n-}\n-\n pub(crate) fn find_defs<'a>(\n     sema: &'a Semantics<'_, RootDatabase>,\n     syntax: &SyntaxNode,\n@@ -758,7 +742,7 @@ pub struct Foo {\n             expect![[r#\"\n                 foo Module FileId(0) 0..8 4..7\n \n-                FileId(0) 14..17\n+                FileId(0) 14..17 Import\n             \"#]],\n         );\n     }\n@@ -776,7 +760,7 @@ use self$0;\n             expect![[r#\"\n                 foo Module FileId(0) 0..8 4..7\n \n-                FileId(1) 4..8\n+                FileId(1) 4..8 Import\n             \"#]],\n         );\n     }\n@@ -791,7 +775,7 @@ use self$0;\n             expect![[r#\"\n                 Module FileId(0) 0..10\n \n-                FileId(0) 4..8\n+                FileId(0) 4..8 Import\n             \"#]],\n         );\n     }\n@@ -819,7 +803,7 @@ pub(super) struct Foo$0 {\n             expect![[r#\"\n                 Foo Struct FileId(2) 0..41 18..21\n \n-                FileId(1) 20..23\n+                FileId(1) 20..23 Import\n                 FileId(1) 47..50\n             \"#]],\n         );\n@@ -982,7 +966,7 @@ fn g() { f(); }\n             expect![[r#\"\n                 f Function FileId(0) 22..31 25..26\n \n-                FileId(1) 11..12\n+                FileId(1) 11..12 Import\n                 FileId(1) 24..25\n             \"#]],\n         );\n@@ -1110,7 +1094,7 @@ impl Foo {\n \n     fn check_with_scope(ra_fixture: &str, search_scope: Option<SearchScope>, expect: Expect) {\n         let (analysis, pos) = fixture::position(ra_fixture);\n-        let refs = analysis.find_all_refs(pos, search_scope, false).unwrap().unwrap();\n+        let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n \n         let mut actual = String::new();\n         for refs in refs {\n@@ -1440,9 +1424,9 @@ pub use level1::Foo;\n             expect![[r#\"\n                 Foo Struct FileId(0) 0..15 11..14\n \n-                FileId(1) 16..19\n-                FileId(2) 16..19\n-                FileId(3) 16..19\n+                FileId(1) 16..19 Import\n+                FileId(2) 16..19 Import\n+                FileId(3) 16..19 Import\n             \"#]],\n         );\n     }\n@@ -1470,7 +1454,7 @@ lib::foo!();\n             expect![[r#\"\n                 foo Macro FileId(1) 0..61 29..32\n \n-                FileId(0) 46..49\n+                FileId(0) 46..49 Import\n                 FileId(2) 0..3\n                 FileId(3) 5..8\n             \"#]],\n@@ -1633,7 +1617,7 @@ struct Foo;\n             expect![[r#\"\n                 derive_identity Derive FileId(2) 1..107 45..60\n \n-                FileId(0) 17..31\n+                FileId(0) 17..31 Import\n                 FileId(0) 56..70\n             \"#]],\n         );"}, {"sha": "baf6dd7488bcf6dbdbf2c5856590a636350ddeb7", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=482a9924397ff078ba5d78dc975345594ddf9417", "patch": "@@ -10,8 +10,8 @@ use std::{\n use anyhow::Context;\n use ide::{\n     AnnotationConfig, AssistKind, AssistResolveStrategy, FileId, FilePosition, FileRange,\n-    HoverAction, HoverGotoTypeData, Query, RangeInfo, Runnable, RunnableKind, SingleResolve,\n-    SourceChange, TextEdit,\n+    HoverAction, HoverGotoTypeData, Query, RangeInfo, ReferenceCategory, Runnable, RunnableKind,\n+    SingleResolve, SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use lsp_server::ErrorCode;\n@@ -1014,7 +1014,7 @@ pub(crate) fn handle_references(\n \n     let exclude_imports = snap.config.find_all_refs_exclude_imports();\n \n-    let refs = match snap.analysis.find_all_refs(position, None, exclude_imports)? {\n+    let refs = match snap.analysis.find_all_refs(position, None)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };\n@@ -1034,7 +1034,11 @@ pub(crate) fn handle_references(\n             refs.references\n                 .into_iter()\n                 .flat_map(|(file_id, refs)| {\n-                    refs.into_iter().map(move |(range, _)| FileRange { file_id, range })\n+                    refs.into_iter()\n+                        .filter(|&(_, category)| {\n+                            !exclude_imports || category != Some(ReferenceCategory::Import)\n+                        })\n+                        .map(move |(range, _)| FileRange { file_id, range })\n                 })\n                 .chain(decl)\n         })\n@@ -1285,7 +1289,7 @@ pub(crate) fn handle_document_highlight(\n         .into_iter()\n         .map(|ide::HighlightedRange { range, category }| lsp_types::DocumentHighlight {\n             range: to_proto::range(&line_index, range),\n-            kind: category.map(to_proto::document_highlight_kind),\n+            kind: category.and_then(to_proto::document_highlight_kind),\n         })\n         .collect();\n     Ok(Some(res))\n@@ -1654,9 +1658,7 @@ fn show_ref_command_link(\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover_actions().references && snap.config.client_commands().show_reference {\n-        if let Some(ref_search_res) =\n-            snap.analysis.find_all_refs(*position, None, false).unwrap_or(None)\n-        {\n+        if let Some(ref_search_res) = snap.analysis.find_all_refs(*position, None).unwrap_or(None) {\n             let uri = to_proto::url(snap, position.file_id);\n             let line_index = snap.file_line_index(position.file_id).ok()?;\n             let position = to_proto::position(&line_index, position.offset);"}, {"sha": "1de801e23e5c861c6e80e9dab1231332e4244e72", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a9924397ff078ba5d78dc975345594ddf9417/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=482a9924397ff078ba5d78dc975345594ddf9417", "patch": "@@ -83,10 +83,11 @@ pub(crate) fn structure_node_kind(kind: StructureNodeKind) -> lsp_types::SymbolK\n \n pub(crate) fn document_highlight_kind(\n     category: ReferenceCategory,\n-) -> lsp_types::DocumentHighlightKind {\n+) -> Option<lsp_types::DocumentHighlightKind> {\n     match category {\n-        ReferenceCategory::Read => lsp_types::DocumentHighlightKind::READ,\n-        ReferenceCategory::Write => lsp_types::DocumentHighlightKind::WRITE,\n+        ReferenceCategory::Read => Some(lsp_types::DocumentHighlightKind::READ),\n+        ReferenceCategory::Write => Some(lsp_types::DocumentHighlightKind::WRITE),\n+        ReferenceCategory::Import => None,\n     }\n }\n "}]}