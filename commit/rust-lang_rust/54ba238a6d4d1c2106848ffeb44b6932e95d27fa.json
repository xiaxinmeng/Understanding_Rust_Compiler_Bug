{"sha": "54ba238a6d4d1c2106848ffeb44b6932e95d27fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YmEyMzhhNmQ0ZDFjMjEwNjg0OGZmZWI0NGI2OTMyZTk1ZDI3ZmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-18T10:12:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-18T10:12:52Z"}, "message": "Remove implementation of intrinsics that are now lowered\n\nSee rust-lang/rust#80040", "tree": {"sha": "861aa70dfb4db299dc87a9a266ad0114adda73a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861aa70dfb4db299dc87a9a266ad0114adda73a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ba238a6d4d1c2106848ffeb44b6932e95d27fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ba238a6d4d1c2106848ffeb44b6932e95d27fa", "html_url": "https://github.com/rust-lang/rust/commit/54ba238a6d4d1c2106848ffeb44b6932e95d27fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ba238a6d4d1c2106848ffeb44b6932e95d27fa/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f92aa34f87afa705c553d2455345a6107c3309", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f92aa34f87afa705c553d2455345a6107c3309", "html_url": "https://github.com/rust-lang/rust/commit/32f92aa34f87afa705c553d2455345a6107c3309"}], "stats": {"total": 27, "additions": 1, "deletions": 26}, "files": [{"sha": "be5b247bb9f0bf7e1a4db31c2ed9c3593a78b92e", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/54ba238a6d4d1c2106848ffeb44b6932e95d27fa/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ba238a6d4d1c2106848ffeb44b6932e95d27fa/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=54ba238a6d4d1c2106848ffeb44b6932e95d27fa", "patch": "@@ -444,9 +444,6 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 \"abort\" => {\n                     trap_abort(fx, \"Called intrinsic::abort.\");\n                 }\n-                \"unreachable\" => {\n-                    trap_unreachable(fx, \"[corruption] Called intrinsic::unreachable.\");\n-                }\n                 \"transmute\" => {\n                     crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", span);\n                 }\n@@ -559,12 +556,6 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 fx.bcx.call_memmove(fx.cx.module.target_config(), dst, src, byte_amount);\n             }\n         };\n-        discriminant_value, (c ptr) {\n-            let pointee_layout = fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n-            let val = CValue::by_ref(Pointer::new(ptr.load_scalar(fx)), pointee_layout);\n-            let discr = crate::discriminant::codegen_get_discriminant(fx, val, ret.layout());\n-            ret.write_cvalue(fx, discr);\n-        };\n         size_of_val, <T> (c ptr) {\n             let layout = fx.layout_of(T);\n             let size = if layout.is_unsized() {\n@@ -625,22 +616,6 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             );\n             ret.write_cvalue(fx, res);\n         };\n-        _ if intrinsic.starts_with(\"wrapping_\"), (c x, c y) {\n-            assert_eq!(x.layout().ty, y.layout().ty);\n-            let bin_op = match intrinsic {\n-                \"wrapping_add\" => BinOp::Add,\n-                \"wrapping_sub\" => BinOp::Sub,\n-                \"wrapping_mul\" => BinOp::Mul,\n-                _ => unreachable!(\"intrinsic {}\", intrinsic),\n-            };\n-            let res = crate::num::codegen_int_binop(\n-                fx,\n-                bin_op,\n-                x,\n-                y,\n-            );\n-            ret.write_cvalue(fx, res);\n-        };\n         _ if intrinsic.starts_with(\"saturating_\"), <T> (c lhs, c rhs) {\n             assert_eq!(lhs.layout().ty, rhs.layout().ty);\n             let bin_op = match intrinsic {\n@@ -900,7 +875,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             dest.write_cvalue(fx, val);\n         };\n \n-        size_of | pref_align_of | min_align_of | needs_drop | type_id | type_name | variant_count, () {\n+        pref_align_of | min_align_of | needs_drop | type_id | type_name | variant_count, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n             let val = crate::constant::codegen_const_value("}]}