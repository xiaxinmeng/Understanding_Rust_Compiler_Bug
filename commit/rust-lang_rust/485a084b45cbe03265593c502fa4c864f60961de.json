{"sha": "485a084b45cbe03265593c502fa4c864f60961de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NWEwODRiNDVjYmUwMzI2NTU5M2M1MDJmYTRjODY0ZjYwOTYxZGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-05T18:26:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-05T18:26:51Z"}, "message": "Rollup merge of #61545 - flip1995:internal_lints, r=oli-obk\n\nImplement another internal lints\n\ncc #49509\n\nThis adds ~~two~~ one internal lint~~s~~:\n1. LINT_PASS_IMPL_WITHOUT_MACRO: Make sure, that the `{declare,impl}_lint_pass` macro is used to implement lint passes. cc #59669\n2. ~~USAGE_OF_TYCTXT_AND_SPAN_ARGS: item 2 on the list in #49509~~\n\n~~With 2. I wasn't sure, if this lint should be applied everywhere. That means a careful review of 0955835 would be great. Also 73fb9b4 allows this lint on some functions. Should I also apply this lint there?~~\n\nTODO (not directly relevant for review):\n- [ ] https://github.com/rust-lang/rust/pull/59316#discussion_r280186517 (not sure yet, if this works or how to query for `rustc_private`, since it's not in [`Features`](https://doc.rust-lang.org/nightly/nightly-rustc/syntax/feature_gate/struct.Features.html) :thinking: cc @eddyb)\n- [x] https://github.com/rust-lang/rust/pull/61735#discussion_r292389870\n- [x] Check explicitly for the `{declare,impl}_lint_pass!` macros\n\nr? @oli-obk", "tree": {"sha": "8413f5802665354d9de4dd25a9d4471de448de50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8413f5802665354d9de4dd25a9d4471de448de50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/485a084b45cbe03265593c502fa4c864f60961de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdH5ZrCRBK7hj4Ov3rIwAAdHIIADX0cMY6LThF8A9GJuajX2Ae\n4CJ1RGni3HBFTxQRA6K8h9WBqwCz1m1mIgZea2jnqEUmQB2ximdQQfVPw5sX7lXV\n/gCCP2PqNabWM16En5ZBuuYV0o6fqh3zpoefdRLLx6l0V3vQsGedv/fdAM5xFFKD\n4f5wgeKqkYQnVci5iitQa8UIxKGlN19jT2O9xMKfB1I448Uzu5FGAQu1yag9PRSb\n0ci2zJwmXqbyyp9MuYQJzZXw8QeLg88ki9sEJ79DZNCt5r9jSClsEAqLfrbI5efy\nUulscft/rwgkLOr1gXF/yjcCJg18AA11s/4L+/LgcdknBZA7Cja8kt/C+vljjSg=\n=Suzz\n-----END PGP SIGNATURE-----\n", "payload": "tree 8413f5802665354d9de4dd25a9d4471de448de50\nparent 853f30052d019a8ebe197a5adff3a29d6716a955\nparent d0625a380b03e83fcfc2f0230986186992d13c71\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562351211 +0200\ncommitter GitHub <noreply@github.com> 1562351211 +0200\n\nRollup merge of #61545 - flip1995:internal_lints, r=oli-obk\n\nImplement another internal lints\n\ncc #49509\n\nThis adds ~~two~~ one internal lint~~s~~:\n1. LINT_PASS_IMPL_WITHOUT_MACRO: Make sure, that the `{declare,impl}_lint_pass` macro is used to implement lint passes. cc #59669\n2. ~~USAGE_OF_TYCTXT_AND_SPAN_ARGS: item 2 on the list in #49509~~\n\n~~With 2. I wasn't sure, if this lint should be applied everywhere. That means a careful review of 0955835 would be great. Also 73fb9b4 allows this lint on some functions. Should I also apply this lint there?~~\n\nTODO (not directly relevant for review):\n- [ ] https://github.com/rust-lang/rust/pull/59316#discussion_r280186517 (not sure yet, if this works or how to query for `rustc_private`, since it's not in [`Features`](https://doc.rust-lang.org/nightly/nightly-rustc/syntax/feature_gate/struct.Features.html) :thinking: cc @eddyb)\n- [x] https://github.com/rust-lang/rust/pull/61735#discussion_r292389870\n- [x] Check explicitly for the `{declare,impl}_lint_pass!` macros\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/485a084b45cbe03265593c502fa4c864f60961de", "html_url": "https://github.com/rust-lang/rust/commit/485a084b45cbe03265593c502fa4c864f60961de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/485a084b45cbe03265593c502fa4c864f60961de/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "853f30052d019a8ebe197a5adff3a29d6716a955", "url": "https://api.github.com/repos/rust-lang/rust/commits/853f30052d019a8ebe197a5adff3a29d6716a955", "html_url": "https://github.com/rust-lang/rust/commit/853f30052d019a8ebe197a5adff3a29d6716a955"}, {"sha": "d0625a380b03e83fcfc2f0230986186992d13c71", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0625a380b03e83fcfc2f0230986186992d13c71", "html_url": "https://github.com/rust-lang/rust/commit/d0625a380b03e83fcfc2f0230986186992d13c71"}], "stats": {"total": 298, "additions": 209, "deletions": 89}, "files": [{"sha": "242074fec7795efea3d986df5a8d49831b9f31c4", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -306,7 +306,20 @@ fn main() {\n     }\n \n     // This is required for internal lints.\n-    cmd.arg(\"-Zunstable-options\");\n+    if let Some(crate_name) = args.windows(2).find(|a| &*a[0] == \"--crate-name\") {\n+        let crate_name = crate_name[1].to_string_lossy();\n+        if crate_name != \"rustc_version\"\n+            && (crate_name.starts_with(\"rustc\")\n+                || crate_name.starts_with(\"syntax\")\n+                || crate_name == \"arena\"\n+                || crate_name == \"fmt_macros\")\n+        {\n+            cmd.arg(\"-Zunstable-options\");\n+            if stage != \"0\" {\n+                cmd.arg(\"-Wrustc::internal\");\n+            }\n+        }\n+    }\n \n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n     // allow the `rustc_private` feature to link to other unstable crates"}, {"sha": "a4c6e5b85f9a4313ef43cb61d93d9a3e69196ef2", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -12,7 +12,6 @@\n        test(no_crate_inject, attr(deny(warnings))))]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(core_intrinsics)]"}, {"sha": "39f130b82ed83177cc1a2332ec50f0c12f1634a4", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -9,7 +9,6 @@\n        test(attr(deny(warnings))))]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(nll)]"}, {"sha": "b20f7120bbfa2e9ea7ca7189b52c47017019da96", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -29,7 +29,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(arbitrary_self_types)]"}, {"sha": "950f7ad2e089f2484260096c3049da84b8135222", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1341,6 +1341,7 @@ struct LateLintPassObjects<'a> {\n     lints: &'a mut [LateLintPassObject],\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::lint_pass_impl_without_macro))]\n impl LintPass for LateLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()\n@@ -1510,6 +1511,7 @@ struct EarlyLintPassObjects<'a> {\n     lints: &'a mut [EarlyLintPassObject],\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::lint_pass_impl_without_macro))]\n impl LintPass for EarlyLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()"}, {"sha": "34899736949675cd2142cd4967fa30bc37ccacaa", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,11 +7,12 @@ use crate::lint::{\n };\n use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast::Ident;\n+use syntax::ast::{Ident, Item, ItemKind};\n use syntax::symbol::{sym, Symbol};\n+use syntax_pos::ExpnInfo;\n \n-declare_lint! {\n-    pub DEFAULT_HASH_TYPES,\n+declare_tool_lint! {\n+    pub rustc::DEFAULT_HASH_TYPES,\n     Allow,\n     \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n }\n@@ -22,7 +23,7 @@ pub struct DefaultHashTypes {\n \n impl DefaultHashTypes {\n     // we are allowed to use `HashMap` and `HashSet` as identifiers for implementing the lint itself\n-    #[allow(internal)]\n+    #[cfg_attr(not(bootstrap), allow(rustc::default_hash_types))]\n     pub fn new() -> Self {\n         let mut map = FxHashMap::default();\n         map.insert(sym::HashMap, sym::FxHashMap);\n@@ -36,40 +37,34 @@ impl_lint_pass!(DefaultHashTypes => [DEFAULT_HASH_TYPES]);\n impl EarlyLintPass for DefaultHashTypes {\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n         if let Some(replace) = self.map.get(&ident.name) {\n-            let msg = format!(\n-                \"Prefer {} over {}, it has better performance\",\n-                replace, ident\n-            );\n+            let msg = format!(\"Prefer {} over {}, it has better performance\", replace, ident);\n             let mut db = cx.struct_span_lint(DEFAULT_HASH_TYPES, ident.span, &msg);\n             db.span_suggestion(\n                 ident.span,\n                 \"use\",\n                 replace.to_string(),\n                 Applicability::MaybeIncorrect, // FxHashMap, ... needs another import\n             );\n-            db.note(&format!(\n-                \"a `use rustc_data_structures::fx::{}` may be necessary\",\n-                replace\n-            ))\n-            .emit();\n+            db.note(&format!(\"a `use rustc_data_structures::fx::{}` may be necessary\", replace))\n+                .emit();\n         }\n     }\n }\n \n-declare_lint! {\n-    pub USAGE_OF_TY_TYKIND,\n+declare_tool_lint! {\n+    pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,\n     \"usage of `ty::TyKind` outside of the `ty::sty` module\"\n }\n \n-declare_lint! {\n-    pub TY_PASS_BY_REFERENCE,\n+declare_tool_lint! {\n+    pub rustc::TY_PASS_BY_REFERENCE,\n     Allow,\n     \"passing `Ty` or `TyCtxt` by reference\"\n }\n \n-declare_lint! {\n-    pub USAGE_OF_QUALIFIED_TY,\n+declare_tool_lint! {\n+    pub rustc::USAGE_OF_QUALIFIED_TY,\n     Allow,\n     \"using `ty::{Ty,TyCtxt}` instead of importing it\"\n }\n@@ -137,13 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n                     }\n                 }\n             }\n-            TyKind::Rptr(\n-                _,\n-                MutTy {\n-                    ty: inner_ty,\n-                    mutbl: Mutability::MutImmutable,\n-                },\n-            ) => {\n+            TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::MutImmutable }) => {\n                 if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner_def_id()) {\n                     if cx.tcx.impl_trait_ref(impl_did).is_some() {\n                         return;\n@@ -225,3 +214,44 @@ fn gen_args(segment: &PathSegment) -> String {\n \n     String::new()\n }\n+\n+declare_tool_lint! {\n+    pub rustc::LINT_PASS_IMPL_WITHOUT_MACRO,\n+    Allow,\n+    \"`impl LintPass` without the `declare_lint_pass!` or `impl_lint_pass!` macros\"\n+}\n+\n+declare_lint_pass!(LintPassImpl => [LINT_PASS_IMPL_WITHOUT_MACRO]);\n+\n+impl EarlyLintPass for LintPassImpl {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if let ItemKind::Impl(_, _, _, _, Some(lint_pass), _, _) = &item.node {\n+            if let Some(last) = lint_pass.path.segments.last() {\n+                if last.ident.name == sym::LintPass {\n+                    match &lint_pass.path.span.ctxt().outer_expn_info() {\n+                        Some(info) if is_lint_pass_expansion(info) => {}\n+                        _ => {\n+                            cx.struct_span_lint(\n+                                LINT_PASS_IMPL_WITHOUT_MACRO,\n+                                lint_pass.path.span,\n+                                \"implementing `LintPass` by hand\",\n+                            )\n+                            .help(\"try using `declare_lint_pass!` or `impl_lint_pass!` instead\")\n+                            .emit();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn is_lint_pass_expansion(expn_info: &ExpnInfo) -> bool {\n+    if expn_info.format.name() == sym::impl_lint_pass {\n+        true\n+    } else if let Some(info) = expn_info.call_site.ctxt().outer_expn_info() {\n+        info.format.name() == sym::declare_lint_pass\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "26e7cc9004d4ee4d5032a1af0999a42ac51c316a", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -27,6 +27,7 @@ pub trait EncodableWithShorthand: Clone + Eq + Hash {\n     fn variant(&self) -> &Self::Variant;\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n impl<'tcx> EncodableWithShorthand for Ty<'tcx> {\n     type Variant = ty::TyKind<'tcx>;\n     fn variant(&self) -> &Self::Variant {\n@@ -159,6 +160,7 @@ where\n     Ok(decoder.map_encoded_cnum_to_current(cnum))\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n #[inline]\n pub fn decode_ty<D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n where"}, {"sha": "25c2c30fecae27c9bad0dd6200e43867cf0a97f0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -130,6 +130,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     /// Intern a type\n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     #[inline(never)]\n     fn intern_ty(&self,\n         st: TyKind<'tcx>\n@@ -2107,6 +2108,7 @@ impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {\n     }\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n         &self.0.sty\n@@ -2321,6 +2323,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_fn_ptr(converted_sig)\n     }\n \n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     #[inline]\n     pub fn mk_ty(&self, st: TyKind<'tcx>) -> Ty<'tcx> {\n         self.interners.intern_ty(st)"}, {"sha": "411b18e043a203a36dd5e3a575e3c9564b86c235", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -18,6 +18,7 @@ impl FlagComputation {\n         }\n     }\n \n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     pub fn for_sty(st: &ty::TyKind<'_>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_sty(st);\n@@ -61,6 +62,7 @@ impl FlagComputation {\n         } // otherwise, this binder captures nothing\n     }\n \n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     fn add_sty(&mut self, st: &ty::TyKind<'_>) {\n         match st {\n             &ty::Bool |"}, {"sha": "90c18a7e364ead7d4e2410c74963fa9a4afd55ef", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,7 +1,5 @@\n // ignore-tidy-filelength\n \n-#![allow(usage_of_ty_tykind)]\n-\n pub use self::Variance::*;\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n@@ -484,6 +482,7 @@ bitflags! {\n     }\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n pub struct TyS<'tcx> {\n     pub sty: TyKind<'tcx>,\n     pub flags: TypeFlags,\n@@ -541,29 +540,29 @@ impl<'tcx> Hash for TyS<'tcx> {\n impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         match self.sty {\n-            TyKind::Bool |\n-            TyKind::Char |\n-            TyKind::Int(_) |\n-            TyKind::Uint(_) |\n-            TyKind::Float(_) |\n-            TyKind::Infer(InferTy::IntVar(_)) |\n-            TyKind::Infer(InferTy::FloatVar(_)) |\n-            TyKind::Infer(InferTy::FreshIntTy(_)) |\n-            TyKind::Infer(InferTy::FreshFloatTy(_)) => true,\n-            TyKind::Ref(_, x, _) => x.is_primitive_ty(),\n+            Bool |\n+            Char |\n+            Int(_) |\n+            Uint(_) |\n+            Float(_) |\n+            Infer(InferTy::IntVar(_)) |\n+            Infer(InferTy::FloatVar(_)) |\n+            Infer(InferTy::FreshIntTy(_)) |\n+            Infer(InferTy::FreshFloatTy(_)) => true,\n+            Ref(_, x, _) => x.is_primitive_ty(),\n             _ => false,\n         }\n     }\n \n     pub fn is_suggestable(&self) -> bool {\n         match self.sty {\n-            TyKind::Opaque(..) |\n-            TyKind::FnDef(..) |\n-            TyKind::FnPtr(..) |\n-            TyKind::Dynamic(..) |\n-            TyKind::Closure(..) |\n-            TyKind::Infer(..) |\n-            TyKind::Projection(..) => false,\n+            Opaque(..) |\n+            FnDef(..) |\n+            FnPtr(..) |\n+            Dynamic(..) |\n+            Closure(..) |\n+            Infer(..) |\n+            Projection(..) => false,\n             _ => true,\n         }\n     }"}, {"sha": "5d17080a9b2bce0c30de8ca16264a3668c105f3e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,5 +1,7 @@\n //! This module contains `TyKind` and its major components.\n \n+#![cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::infer::canonical::Canonical;"}, {"sha": "8d380c47bc4a371360b12198f7901b82dd9cd860", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -2,7 +2,6 @@\n #![feature(rustc_private)]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n pub mod expand;"}, {"sha": "b857c625ec2e76c8b0d4cca48928f53b07453985", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(non_camel_case_types)]\n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(in_band_lifetimes)]"}, {"sha": "dbcb20315520bb24fbc1e72d402c5e96fbde963b", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -23,7 +23,6 @@\n #![feature(trusted_len)]\n #![feature(mem_take)]\n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n use back::write::{create_target_machine, create_informational_target_machine};"}, {"sha": "d0f4b0a870b5ab0a6cfca6202be00ff41c183380", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -14,7 +14,6 @@\n #![allow(unused_attributes)]\n #![allow(dead_code)]\n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "f38b672afd939ac61c57719185e5c0003ecdf162", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -17,7 +17,6 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[macro_use]"}, {"sha": "38dfb675237b5d256c378b1da81fe1f5cf3a44db", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -27,6 +27,7 @@\n #![cfg_attr(test, feature(test))]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(bootstrap), allow(rustc::default_hash_types))]\n \n #[macro_use]\n extern crate log;"}, {"sha": "1cbc542b9abccdc7bef777a6f23828eaf2f145ca", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -17,7 +17,6 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n pub extern crate getopts;"}, {"sha": "3269b85d0dd13243c39a69b3e314e26e89fe9d5f", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -10,7 +10,6 @@\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[allow(unused_extern_crates)]"}, {"sha": "569aa78c9d4b3f0df6d0da39cd4a4791692f9de1", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -9,7 +9,6 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate rustc;"}, {"sha": "4bc50c24e817c216889e7ce06b4d63625f312b87", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,7 +7,6 @@\n #![cfg_attr(unix, feature(libc))]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![allow(unused_imports)]"}, {"sha": "fb02782e6d3200fca67125d7dc978ca5bd3aa765", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -20,7 +20,6 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[macro_use]\n@@ -487,15 +486,17 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_early_pass(sess, false, false, box DefaultHashTypes::new());\n+    store.register_early_pass(sess, false, false, box LintPassImpl);\n     store.register_late_pass(sess, false, false, false, box TyTyKind);\n     store.register_group(\n         sess,\n         false,\n-        \"internal\",\n+        \"rustc::internal\",\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n             LintId::of(USAGE_OF_TY_TYKIND),\n+            LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n             LintId::of(TY_PASS_BY_REFERENCE),\n             LintId::of(USAGE_OF_QUALIFIED_TY),\n         ],"}, {"sha": "53bbecd0e6a1d242ac127d544253f06b1d1c1ddc", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,5 +1,6 @@\n #![feature(proc_macro_hygiene)]\n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(bootstrap), allow(rustc::default_hash_types))]\n \n #![recursion_limit=\"128\"]\n "}, {"sha": "826349362db2500556cbfee242377c088aaecf3d", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -15,7 +15,6 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n extern crate libc;"}, {"sha": "4a80534503a5d017bb00b435f0b8b82f2035114e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -29,7 +29,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate log;"}, {"sha": "0a96ad3e3445e7bc59becea63d2779586bd39e3f", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -14,7 +14,6 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[macro_use]"}, {"sha": "20f35c267f28ca8690237aa2b7489e1403f3c9ab", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(in_band_lifetimes)]"}, {"sha": "13b9855dbd71a77b18d24c38291ec68fda3ef1a2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -11,7 +11,6 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n pub use rustc::hir::def::{Namespace, PerNS};"}, {"sha": "61ce9ed1222cb7bfe67a10f61ab023dfe8ea8f98", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n #![allow(unused_attributes)]\n "}, {"sha": "b65813fd8e38d6adb73bb68c38340918fd352c31", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -16,7 +16,6 @@\n #![feature(step_trait)]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate log;"}, {"sha": "12b19a2648d7f6d8577d66efbdd6f80fce80c992", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -2,7 +2,6 @@\n //! the guts are broken up into modules; see the comments in those modules.\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(crate_visibility_modifier)]"}, {"sha": "9c9e776bfada067ae198c050c8dac3e7cfce353e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -74,7 +74,6 @@ This API is completely unstable and subject to change.\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate log;"}, {"sha": "58777130b7f29339b530468d6da409c92e8bf073", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,5 +1,4 @@\n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "a0c298010b6b693726ae10f688b73e66aa4b9e50", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -60,7 +60,7 @@ pub fn is_known(attr: &Attribute) -> bool {\n }\n \n pub fn is_known_lint_tool(m_item: Ident) -> bool {\n-    [\"clippy\"].contains(&m_item.as_str().as_ref())\n+    [sym::clippy, sym::rustc].contains(&m_item.name)\n }\n \n impl NestedMetaItem {"}, {"sha": "a7c5ed158e0287158e3118869365ed8d6c0e360f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -8,7 +8,6 @@\n        test(attr(deny(warnings))))]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(bind_by_move_pattern_guards)]"}, {"sha": "77b69ddd303b49278e03717304ca3fece656bb59", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -3,7 +3,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(in_band_lifetimes)]"}, {"sha": "07b9f60932024db20a488398270f7a42e4afdc03", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n-#![deny(internal)]\n #![deny(unused_lifetimes)]\n \n #![feature(const_fn)]"}, {"sha": "6a97e5f212732a4d91446a99bb48516c725de4fa", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -175,6 +175,7 @@ symbols! {\n         cfg_target_thread_local,\n         cfg_target_vendor,\n         char,\n+        clippy,\n         clone,\n         Clone,\n         clone_closures,\n@@ -216,6 +217,7 @@ symbols! {\n         custom_inner_attributes,\n         custom_test_frameworks,\n         c_variadic,\n+        declare_lint_pass,\n         decl_macro,\n         Default,\n         default_lib_allocator,\n@@ -326,6 +328,7 @@ symbols! {\n         if_while_or_patterns,\n         ignore,\n         impl_header_lifetime_elision,\n+        impl_lint_pass,\n         impl_trait_in_bindings,\n         import_shadowing,\n         index,\n@@ -367,6 +370,7 @@ symbols! {\n         link_llvm_intrinsics,\n         link_name,\n         link_section,\n+        LintPass,\n         lint_reasons,\n         literal,\n         local_inner_macros,"}, {"sha": "2a57876f464c0b391600265ff4577788514116af", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -8,8 +8,7 @@ extern crate syntax;\n extern crate rustc;\n extern crate rustc_plugin;\n \n-use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n-                  LintArray};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use rustc_plugin::Registry;\n use syntax::ast;\n declare_tool_lint!(pub clippy::TEST_LINT, Warn, \"Warn about stuff\");\n@@ -19,7 +18,14 @@ declare_tool_lint!(\n     Warn, \"Warn about other stuff\"\n );\n \n-declare_lint_pass!(Pass => [TEST_LINT, TEST_GROUP]);\n+declare_tool_lint!(\n+    /// Some docs\n+    pub rustc::TEST_RUSTC_TOOL_LINT,\n+    Deny,\n+    \"Deny internal stuff\"\n+);\n+\n+declare_lint_pass!(Pass => [TEST_LINT, TEST_GROUP, TEST_RUSTC_TOOL_LINT]);\n \n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {"}, {"sha": "3786c6de7e78c400a827cf3f4e339e47d232e6c1", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,7 +7,7 @@ extern crate rustc_data_structures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::collections::{HashMap, HashSet};\n \n-#[deny(default_hash_types)]\n+#[deny(rustc::default_hash_types)]\n fn main() {\n     let _map: HashMap<String, String> = HashMap::default();\n     //~^ ERROR Prefer FxHashMap over HashMap, it has better performance"}, {"sha": "c1762d31323cf8b2a1a83ac008ab9659083fa964", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,8 +7,8 @@ LL |     let _map: HashMap<String, String> = HashMap::default();\n note: lint level defined here\n   --> $DIR/default_hash_types.rs:10:8\n    |\n-LL | #[deny(default_hash_types)]\n-   |        ^^^^^^^^^^^^^^^^^^\n+LL | #[deny(rustc::default_hash_types)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n error: Prefer FxHashMap over HashMap, it has better performance"}, {"sha": "48dd5b122b5acd023f074022a8474b1481b208ab", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -0,0 +1,53 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![deny(rustc::lint_pass_impl_without_macro)]\n+\n+extern crate rustc;\n+\n+use rustc::lint::{LintArray, LintPass};\n+use rustc::{declare_lint, declare_lint_pass, impl_lint_pass, lint_array};\n+\n+declare_lint! {\n+    pub TEST_LINT,\n+    Allow,\n+    \"test\"\n+}\n+\n+struct Foo;\n+\n+impl LintPass for Foo { //~ERROR implementing `LintPass` by hand\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"Foo\"\n+    }\n+}\n+\n+macro_rules! custom_lint_pass_macro {\n+    () => {\n+        struct Custom;\n+\n+        impl LintPass for Custom { //~ERROR implementing `LintPass` by hand\n+            fn get_lints(&self) -> LintArray {\n+                lint_array!(TEST_LINT)\n+            }\n+\n+            fn name(&self) -> &'static str {\n+                \"Custom\"\n+            }\n+        }\n+    };\n+}\n+\n+custom_lint_pass_macro!();\n+\n+struct Bar;\n+\n+impl_lint_pass!(Bar => [TEST_LINT]);\n+\n+declare_lint_pass!(Baz => [TEST_LINT]);\n+\n+fn main() {}"}, {"sha": "b439ae2cd148d5dbe97cbd4de7b3ebddc031db25", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -0,0 +1,26 @@\n+error: implementing `LintPass` by hand\n+  --> $DIR/lint_pass_impl_without_macro.rs:19:6\n+   |\n+LL | impl LintPass for Foo {\n+   |      ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint_pass_impl_without_macro.rs:4:9\n+   |\n+LL | #![deny(rustc::lint_pass_impl_without_macro)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n+\n+error: implementing `LintPass` by hand\n+  --> $DIR/lint_pass_impl_without_macro.rs:33:14\n+   |\n+LL |         impl LintPass for Custom {\n+   |              ^^^^^^^^\n+...\n+LL | custom_lint_pass_macro!();\n+   | -------------------------- in this macro invocation\n+   |\n+   = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7564c0245802ddcde7d526be33212f8a2daa41ee", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Z unstable-options\n \n #![feature(rustc_private)]\n-#![deny(ty_pass_by_reference)]\n+#![deny(rustc::ty_pass_by_reference)]\n #![allow(unused)]\n \n extern crate rustc;"}, {"sha": "d2ed6b6a19c31eb722b665c1e9d76b7b33c316bc", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,8 +7,8 @@ LL |     ty_ref: &Ty<'_>,\n note: lint level defined here\n   --> $DIR/pass_ty_by_ref.rs:4:9\n    |\n-LL | #![deny(ty_pass_by_reference)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustc::ty_pass_by_reference)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: passing `TyCtxt<'_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:15:18"}, {"sha": "0040230ec7d7c6e4871c9f7f7dff7adcccaf78e8", "filename": "src/test/ui-fulldeps/internal-lints/qualified_ty_ty_ctxt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Z unstable-options\n \n #![feature(rustc_private)]\n-#![deny(usage_of_qualified_ty)]\n+#![deny(rustc::usage_of_qualified_ty)]\n #![allow(unused)]\n \n extern crate rustc;"}, {"sha": "72c23f8cd3cac0fc36ed3e96d1167c582ff33957", "filename": "src/test/ui-fulldeps/internal-lints/qualified_ty_ty_ctxt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,8 +7,8 @@ LL |     ty_q: ty::Ty<'_>,\n note: lint level defined here\n   --> $DIR/qualified_ty_ty_ctxt.rs:4:9\n    |\n-LL | #![deny(usage_of_qualified_ty)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustc::usage_of_qualified_ty)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of qualified `ty::TyCtxt<'_>`\n   --> $DIR/qualified_ty_ty_ctxt.rs:27:16"}, {"sha": "c6bd122f4e5489dd8f8f61733bbeed25977fb545", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -6,7 +6,7 @@ extern crate rustc;\n \n use rustc::ty::{self, Ty, TyKind};\n \n-#[deny(usage_of_ty_tykind)]\n+#[deny(rustc::usage_of_ty_tykind)]\n fn main() {\n     let sty = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n "}, {"sha": "8add4252c4103a36e0b5c46161546eef87bab52c", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485a084b45cbe03265593c502fa4c864f60961de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=485a084b45cbe03265593c502fa4c864f60961de", "patch": "@@ -7,8 +7,8 @@ LL |     let sty = TyKind::Bool;\n note: lint level defined here\n   --> $DIR/ty_tykind_usage.rs:9:8\n    |\n-LL | #[deny(usage_of_ty_tykind)]\n-   |        ^^^^^^^^^^^^^^^^^^\n+LL | #[deny(rustc::usage_of_ty_tykind)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:14:9"}]}