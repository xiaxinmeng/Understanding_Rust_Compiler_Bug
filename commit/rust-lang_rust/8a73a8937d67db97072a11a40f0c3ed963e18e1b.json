{"sha": "8a73a8937d67db97072a11a40f0c3ed963e18e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNzNhODkzN2Q2N2RiOTcwNzJhMTFhNDBmMGMzZWQ5NjNlMThlMWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-25T08:09:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-25T08:09:26Z"}, "message": "Merge #3707\n\n3707: Add ItemScope::visibility_of r=matklad a=edwin0cheng\n\n~This PR implements `HasVisibility` for various constructs and change `Definition::search_scope` to use `Visibility` directly instead of depends on ad-hoc string parsing.~\r\n\r\nThis PR added `visibility_of`  in `ItemScope` and `Module` and use it directly directly instead of depends on ad-hoc string parsing.\r\n\r\nAnd also add a FIXME to indicate that there is a bug which do not search child-submodules in other files recursively in `Definition::search_scope`.\r\n\r\nI will submit another PR to fix that bug after this is merged.\r\n\r\ncc @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "7bfffa2750b044f47b67d7b9e89c14c1a1089505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfffa2750b044f47b67d7b9e89c14c1a1089505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a73a8937d67db97072a11a40f0c3ed963e18e1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeexG2CRBK7hj4Ov3rIwAAdHIIAISQTdpxAnTMqqK0EX/7JACd\n7OMhfj8uR4XfhwMs24IiP4LrmO/esKlx6P8xZDHoIJIcmlscAXQmW0bw2DmYQCqR\nuOWl850XY55jqOO60ynW9Iu7hzZ/IycD49g0MdFcJSJHYdSvO/vl9K0KmVJci2H2\nRxmesc9grTUzgE73G0Ieo9TgU6g+5uptaWFSnS9wehDXKmS5F1HirezghVdr9c98\nj8bQLbjzebYA0LPOuh1lQRlwUgBOM0hUWQPvDgNmqSi78ZSeptXI5aLW2U5c3L5T\nz/JZwbg00pX0z2qDZ2LrMv9vNu2hUvqfu5m/aYF5r0rHkNALz2jESyQhiEFrRw0=\n=Aj33\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bfffa2750b044f47b67d7b9e89c14c1a1089505\nparent 6ad1a0711631d8017791a6dfe85bbe205d6c7414\nparent d606521723d2635a21e6dd821b314f8e3127cbf9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585123766 +0000\ncommitter GitHub <noreply@github.com> 1585123766 +0000\n\nMerge #3707\n\n3707: Add ItemScope::visibility_of r=matklad a=edwin0cheng\n\n~This PR implements `HasVisibility` for various constructs and change `Definition::search_scope` to use `Visibility` directly instead of depends on ad-hoc string parsing.~\r\n\r\nThis PR added `visibility_of`  in `ItemScope` and `Module` and use it directly directly instead of depends on ad-hoc string parsing.\r\n\r\nAnd also add a FIXME to indicate that there is a bug which do not search child-submodules in other files recursively in `Definition::search_scope`.\r\n\r\nI will submit another PR to fix that bug after this is merged.\r\n\r\ncc @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a73a8937d67db97072a11a40f0c3ed963e18e1b", "html_url": "https://github.com/rust-lang/rust/commit/8a73a8937d67db97072a11a40f0c3ed963e18e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a73a8937d67db97072a11a40f0c3ed963e18e1b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad1a0711631d8017791a6dfe85bbe205d6c7414", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad1a0711631d8017791a6dfe85bbe205d6c7414", "html_url": "https://github.com/rust-lang/rust/commit/6ad1a0711631d8017791a6dfe85bbe205d6c7414"}, {"sha": "d606521723d2635a21e6dd821b314f8e3127cbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d606521723d2635a21e6dd821b314f8e3127cbf9", "html_url": "https://github.com/rust-lang/rust/commit/d606521723d2635a21e6dd821b314f8e3127cbf9"}], "stats": {"total": 109, "additions": 50, "deletions": 59}, "files": [{"sha": "3f0ebca0dfa2231ae8df9c47ae04d5cb8c9e1b06", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=8a73a8937d67db97072a11a40f0c3ed963e18e1b", "patch": "@@ -234,6 +234,10 @@ impl Module {\n             .collect()\n     }\n \n+    pub fn visibility_of(self, db: &dyn HirDatabase, def: &ModuleDef) -> Option<Visibility> {\n+        db.crate_def_map(self.id.krate)[self.id.local_id].scope.visbility_of(def.clone().into())\n+    }\n+\n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n         let _p = profile(\"Module::diagnostics\");\n         let crate_def_map = db.crate_def_map(self.id.krate);"}, {"sha": "5af7e5d6d70cf8dd1beeb40438403d27f36f9832", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=8a73a8937d67db97072a11a40f0c3ed963e18e1b", "patch": "@@ -54,7 +54,7 @@ pub use crate::{\n         Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate, CrateDependency,\n         DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, HasAttrs,\n         HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n-        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n+        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},"}, {"sha": "ef1aaba6f75b7ba8f27b0e12908e8eadc324801b", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=8a73a8937d67db97072a11a40f0c3ed963e18e1b", "patch": "@@ -68,6 +68,12 @@ impl ItemScope {\n         self.impls.iter().copied()\n     }\n \n+    pub fn visbility_of(&self, def: ModuleDefId) -> Option<Visibility> {\n+        self.name_of(ItemInNs::Types(def))\n+            .or_else(|| self.name_of(ItemInNs::Values(def)))\n+            .map(|(_, v)| v)\n+    }\n+\n     /// Iterate over all module scoped macros\n     pub(crate) fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.visible.iter().filter_map(|(name, def)| def.take_macros().map(|macro_| (name, macro_)))"}, {"sha": "e9934844e3a049b5c54ba45153d9c751f87b7e92", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=8a73a8937d67db97072a11a40f0c3ed963e18e1b", "patch": "@@ -6,12 +6,12 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Adt, FieldSource, HasSource, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n-    Semantics, StructField, TypeParam,\n+    HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution, Semantics,\n+    StructField, TypeParam, Visibility,\n };\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, AstNode, VisibilityOwner},\n+    ast::{self, AstNode},\n     match_ast,\n };\n use test_utils::tested_by;\n@@ -41,28 +41,13 @@ impl Definition {\n         }\n     }\n \n-    pub fn visibility(&self, db: &RootDatabase) -> Option<ast::Visibility> {\n+    pub fn visibility(&self, db: &RootDatabase) -> Option<Visibility> {\n+        let module = self.module(db);\n+\n         match self {\n             Definition::Macro(_) => None,\n-            Definition::StructField(sf) => match sf.source(db).value {\n-                FieldSource::Named(it) => it.visibility(),\n-                FieldSource::Pos(it) => it.visibility(),\n-            },\n-            Definition::ModuleDef(def) => match def {\n-                ModuleDef::Module(it) => it.declaration_source(db)?.value.visibility(),\n-                ModuleDef::Function(it) => it.source(db).value.visibility(),\n-                ModuleDef::Adt(adt) => match adt {\n-                    Adt::Struct(it) => it.source(db).value.visibility(),\n-                    Adt::Union(it) => it.source(db).value.visibility(),\n-                    Adt::Enum(it) => it.source(db).value.visibility(),\n-                },\n-                ModuleDef::Const(it) => it.source(db).value.visibility(),\n-                ModuleDef::Static(it) => it.source(db).value.visibility(),\n-                ModuleDef::Trait(it) => it.source(db).value.visibility(),\n-                ModuleDef::TypeAlias(it) => it.source(db).value.visibility(),\n-                ModuleDef::EnumVariant(_) => None,\n-                ModuleDef::BuiltinType(_) => None,\n-            },\n+            Definition::StructField(sf) => Some(sf.visibility(db)),\n+            Definition::ModuleDef(def) => module?.visibility_of(db, def),\n             Definition::SelfType(_) => None,\n             Definition::Local(_) => None,\n             Definition::TypeParam(_) => None,"}, {"sha": "05a0eed30a8b516e39ce981073ff8c3619a82a43", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a73a8937d67db97072a11a40f0c3ed963e18e1b/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=8a73a8937d67db97072a11a40f0c3ed963e18e1b", "patch": "@@ -6,7 +6,7 @@\n \n use std::mem;\n \n-use hir::{DefWithBody, HasSource, ModuleSource, Semantics};\n+use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use ra_db::{FileId, FileRange, SourceDatabaseExt};\n use ra_prof::profile;\n@@ -123,51 +123,47 @@ impl Definition {\n             return SearchScope::new(res);\n         }\n \n-        let vis = self.visibility(db).as_ref().map(|v| v.syntax().to_string()).unwrap_or_default();\n+        let vis = self.visibility(db);\n \n-        if vis.as_str() == \"pub(super)\" {\n-            if let Some(parent_module) = module.parent(db) {\n-                let mut res = FxHashMap::default();\n-                let parent_src = parent_module.definition_source(db);\n-                let file_id = parent_src.file_id.original_file(db);\n+        // FIXME:\n+        // The following logic are wrong that it does not search\n+        // for submodules within other files recursively.\n \n-                match parent_src.value {\n-                    ModuleSource::Module(m) => {\n-                        let range = Some(m.syntax().text_range());\n-                        res.insert(file_id, range);\n-                    }\n-                    ModuleSource::SourceFile(_) => {\n-                        res.insert(file_id, None);\n-                        res.extend(parent_module.children(db).map(|m| {\n-                            let src = m.definition_source(db);\n-                            (src.file_id.original_file(db), None)\n-                        }));\n-                    }\n+        if let Some(Visibility::Module(module)) = vis.and_then(|it| it.into()) {\n+            let module: Module = module.into();\n+            let mut res = FxHashMap::default();\n+            let src = module.definition_source(db);\n+            let file_id = src.file_id.original_file(db);\n+\n+            match src.value {\n+                ModuleSource::Module(m) => {\n+                    let range = Some(m.syntax().text_range());\n+                    res.insert(file_id, range);\n+                }\n+                ModuleSource::SourceFile(_) => {\n+                    res.insert(file_id, None);\n+                    res.extend(module.children(db).map(|m| {\n+                        let src = m.definition_source(db);\n+                        (src.file_id.original_file(db), None)\n+                    }));\n                 }\n-                return SearchScope::new(res);\n             }\n+            return SearchScope::new(res);\n         }\n \n-        if vis.as_str() != \"\" {\n+        if let Some(Visibility::Public) = vis {\n             let source_root_id = db.file_source_root(file_id);\n             let source_root = db.source_root(source_root_id);\n             let mut res = source_root.walk().map(|id| (id, None)).collect::<FxHashMap<_, _>>();\n \n-            // FIXME: add \"pub(in path)\"\n-\n-            if vis.as_str() == \"pub(crate)\" {\n-                return SearchScope::new(res);\n-            }\n-            if vis.as_str() == \"pub\" {\n-                let krate = module.krate();\n-                for rev_dep in krate.reverse_dependencies(db) {\n-                    let root_file = rev_dep.root_file(db);\n-                    let source_root_id = db.file_source_root(root_file);\n-                    let source_root = db.source_root(source_root_id);\n-                    res.extend(source_root.walk().map(|id| (id, None)));\n-                }\n-                return SearchScope::new(res);\n+            let krate = module.krate();\n+            for rev_dep in krate.reverse_dependencies(db) {\n+                let root_file = rev_dep.root_file(db);\n+                let source_root_id = db.file_source_root(root_file);\n+                let source_root = db.source_root(source_root_id);\n+                res.extend(source_root.walk().map(|id| (id, None)));\n             }\n+            return SearchScope::new(res);\n         }\n \n         let mut res = FxHashMap::default();"}]}