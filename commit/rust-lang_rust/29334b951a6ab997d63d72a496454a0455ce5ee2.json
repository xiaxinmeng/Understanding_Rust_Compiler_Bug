{"sha": "29334b951a6ab997d63d72a496454a0455ce5ee2", "node_id": "C_kwDOAAsO6NoAKDI5MzM0Yjk1MWE2YWI5OTdkNjNkNzJhNDk2NDU0YTA0NTVjZTVlZTI", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-20T19:09:54Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-26T13:04:09Z"}, "message": "rustfmt diagnostic derive tests", "tree": {"sha": "d9f7598c1fe78eaa0982535c06801912de4396e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9f7598c1fe78eaa0982535c06801912de4396e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29334b951a6ab997d63d72a496454a0455ce5ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29334b951a6ab997d63d72a496454a0455ce5ee2", "html_url": "https://github.com/rust-lang/rust/commit/29334b951a6ab997d63d72a496454a0455ce5ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29334b951a6ab997d63d72a496454a0455ce5ee2/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "368c4a35b9acd7c66400855b9d2d4dfff016220b", "url": "https://api.github.com/repos/rust-lang/rust/commits/368c4a35b9acd7c66400855b9d2d4dfff016220b", "html_url": "https://github.com/rust-lang/rust/commit/368c4a35b9acd7c66400855b9d2d4dfff016220b"}], "stats": {"total": 165, "additions": 80, "deletions": 85}, "files": [{"sha": "b998f71e3aa5e09ff4e3969297cc8bb353c65188", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=29334b951a6ab997d63d72a496454a0455ce5ee2", "patch": "@@ -40,9 +40,9 @@ struct HelloWarn {}\n //~^ ERROR unsupported type attribute for diagnostic derive enum\n enum DiagnosticOnEnum {\n     Foo,\n-//~^ ERROR diagnostic slug not specified\n+    //~^ ERROR diagnostic slug not specified\n     Bar,\n-//~^ ERROR diagnostic slug not specified\n+    //~^ ERROR diagnostic slug not specified\n }\n \n #[derive(Diagnostic)]\n@@ -536,8 +536,7 @@ struct LabelWithTrailingList {\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n-struct LintsGood {\n-}\n+struct LintsGood {}\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n@@ -683,39 +682,39 @@ struct RawIdentDiagnosticArg {\n #[diag(compiletest_example)]\n struct SubdiagnosticBad {\n     #[subdiagnostic(bad)]\n-//~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadStr {\n     #[subdiagnostic = \"bad\"]\n-//~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadTwice {\n     #[subdiagnostic(bad, bad)]\n-//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadLitStr {\n     #[subdiagnostic(\"bad\")]\n-//~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticEagerLint {\n     #[subdiagnostic(eager)]\n-//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n@@ -731,11 +730,7 @@ struct SubdiagnosticEagerCorrect {\n // after the `span_suggestion` call - which breaks eager translation.\n \n #[derive(Subdiagnostic)]\n-#[suggestion_short(\n-    use_instead,\n-    applicability = \"machine-applicable\",\n-    code = \"{correct}\"\n-)]\n+#[suggestion_short(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n pub(crate) struct SubdiagnosticWithSuggestion {\n     #[primary_span]\n     span: Span,"}, {"sha": "5943ffa6bc2bf9bc9b75fae088840102f05216b7", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=29334b951a6ab997d63d72a496454a0455ce5ee2", "patch": "@@ -373,21 +373,21 @@ LL |     #[label(label, foo(\"...\"))]\n    |                    ^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:545:5\n+  --> $DIR/diagnostic-derive.rs:544:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: the `primary_span` field attribute is not valid for lint diagnostics\n \n error: `#[error(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:565:1\n+  --> $DIR/diagnostic-derive.rs:564:1\n    |\n LL | #[error(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:565:1\n+  --> $DIR/diagnostic-derive.rs:564:1\n    |\n LL | / #[error(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -399,13 +399,13 @@ LL | | struct ErrorAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[warn_(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:572:1\n+  --> $DIR/diagnostic-derive.rs:571:1\n    |\n LL | #[warn_(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:572:1\n+  --> $DIR/diagnostic-derive.rs:571:1\n    |\n LL | / #[warn_(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -417,13 +417,13 @@ LL | | struct WarnAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:579:1\n+  --> $DIR/diagnostic-derive.rs:578:1\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:579:1\n+  --> $DIR/diagnostic-derive.rs:578:1\n    |\n LL | / #[lint(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -435,19 +435,19 @@ LL | | struct LintAttributeOnSessionDiag {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:586:1\n+  --> $DIR/diagnostic-derive.rs:585:1\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:586:1\n+  --> $DIR/diagnostic-derive.rs:585:1\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:586:1\n+  --> $DIR/diagnostic-derive.rs:585:1\n    |\n LL | / #[lint(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -460,133 +460,133 @@ LL | | struct LintAttributeOnLintDiag {}\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest_example)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:596:44\n+  --> $DIR/diagnostic-derive.rs:595:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n    |                                            ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:596:30\n+  --> $DIR/diagnostic-derive.rs:595:30\n    |\n LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n    |                              ^^^^^^^^^^^^\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:605:24\n+  --> $DIR/diagnostic-derive.rs:604:24\n    |\n LL |     suggestion: (Span, usize),\n    |                        ^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:613:17\n+  --> $DIR/diagnostic-derive.rs:612:17\n    |\n LL |     suggestion: (Span,),\n    |                 ^^^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:620:5\n+  --> $DIR/diagnostic-derive.rs:619:5\n    |\n LL |     #[suggestion(suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:627:1\n+  --> $DIR/diagnostic-derive.rs:626:1\n    |\n LL | #[multipart_suggestion(suggestion)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:630:1\n+  --> $DIR/diagnostic-derive.rs:629:1\n    |\n LL | #[multipart_suggestion()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:634:5\n+  --> $DIR/diagnostic-derive.rs:633:5\n    |\n LL |     #[multipart_suggestion(suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:642:1\n+  --> $DIR/diagnostic-derive.rs:641:1\n    |\n LL | #[suggestion(suggestion, code = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[label]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:651:1\n+  --> $DIR/diagnostic-derive.rs:650:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[subdiagnostic(bad)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:685:21\n+  --> $DIR/diagnostic-derive.rs:684:21\n    |\n LL |     #[subdiagnostic(bad)]\n    |                     ^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:693:5\n+  --> $DIR/diagnostic-derive.rs:692:5\n    |\n LL |     #[subdiagnostic = \"bad\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:701:5\n+  --> $DIR/diagnostic-derive.rs:700:5\n    |\n LL |     #[subdiagnostic(bad, bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(\"...\")]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:709:21\n+  --> $DIR/diagnostic-derive.rs:708:21\n    |\n LL |     #[subdiagnostic(\"bad\")]\n    |                     ^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:717:5\n+  --> $DIR/diagnostic-derive.rs:716:5\n    |\n LL |     #[subdiagnostic(eager)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:779:18\n+  --> $DIR/diagnostic-derive.rs:774:18\n    |\n LL |     #[suggestion(code())]\n    |                  ^^^^^^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:787:23\n+  --> $DIR/diagnostic-derive.rs:782:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:795:18\n+  --> $DIR/diagnostic-derive.rs:790:18\n    |\n LL |     #[suggestion(code = 3)]\n    |                  ^^^^^^^^\n@@ -604,43 +604,43 @@ LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error: cannot find attribute `error` in this scope\n-  --> $DIR/diagnostic-derive.rs:565:3\n+  --> $DIR/diagnostic-derive.rs:564:3\n    |\n LL | #[error(compiletest_example, code = \"E0123\")]\n    |   ^^^^^\n \n error: cannot find attribute `warn_` in this scope\n-  --> $DIR/diagnostic-derive.rs:572:3\n+  --> $DIR/diagnostic-derive.rs:571:3\n    |\n LL | #[warn_(compiletest_example, code = \"E0123\")]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:579:3\n+  --> $DIR/diagnostic-derive.rs:578:3\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:586:3\n+  --> $DIR/diagnostic-derive.rs:585:3\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:627:3\n+  --> $DIR/diagnostic-derive.rs:626:3\n    |\n LL | #[multipart_suggestion(suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:630:3\n+  --> $DIR/diagnostic-derive.rs:629:3\n    |\n LL | #[multipart_suggestion()]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:634:7\n+  --> $DIR/diagnostic-derive.rs:633:7\n    |\n LL |     #[multipart_suggestion(suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "50a6c816578b03d030d16509b75ca45d8eb40738", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=29334b951a6ab997d63d72a496454a0455ce5ee2", "patch": "@@ -11,13 +11,13 @@\n #![crate_type = \"lib\"]\n \n extern crate rustc_errors;\n+extern crate rustc_macros;\n extern crate rustc_session;\n extern crate rustc_span;\n-extern crate rustc_macros;\n \n use rustc_errors::Applicability;\n-use rustc_span::Span;\n use rustc_macros::Subdiagnostic;\n+use rustc_span::Span;\n \n #[derive(Subdiagnostic)]\n #[label(parser_add_paren)]\n@@ -40,7 +40,7 @@ enum B {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -165,7 +165,7 @@ enum P {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -177,7 +177,7 @@ enum Q {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -189,7 +189,7 @@ enum R {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -201,7 +201,7 @@ enum S {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -213,7 +213,7 @@ enum T {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -225,7 +225,7 @@ enum U {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -240,7 +240,7 @@ enum V {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -301,14 +301,14 @@ struct AB {\n     #[primary_span]\n     span: Span,\n     #[skip_arg]\n-    z: Z\n+    z: Z,\n }\n \n #[derive(Subdiagnostic)]\n union AC {\n-//~^ ERROR unexpected unsupported untagged union\n+    //~^ ERROR unexpected unsupported untagged union\n     span: u32,\n-    b: u64\n+    b: u64,\n }\n \n #[derive(Subdiagnostic)]\n@@ -372,7 +372,7 @@ enum AI {\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -427,7 +427,7 @@ struct AN {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n+#[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n@@ -437,7 +437,7 @@ struct AO {\n #[derive(Subdiagnostic)]\n #[help(parser_add_paren)]\n struct AP {\n-    var: String\n+    var: String,\n }\n \n #[derive(Subdiagnostic)]\n@@ -452,7 +452,7 @@ struct AR {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"...\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n@@ -467,19 +467,19 @@ enum AT {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n@@ -488,22 +488,22 @@ struct AV {\n \n #[derive(Subdiagnostic)]\n enum AW {\n-    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n enum AX {\n-    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-//~^ ERROR `var` doesn't refer to a field on this type\n+    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+    //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]\n         span: Span,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -659,7 +659,7 @@ enum BL {\n         /// ..and the field\n         #[primary_span]\n         span: Span,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]"}, {"sha": "4ae7ed34230dfa74cedf5cb63a250ab8ac0b14ad", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29334b951a6ab997d63d72a496454a0455ce5ee2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=29334b951a6ab997d63d72a496454a0455ce5ee2", "patch": "@@ -186,7 +186,7 @@ error: unexpected unsupported untagged union\n LL | / union AC {\n LL | |\n LL | |     span: u32,\n-LL | |     b: u64\n+LL | |     b: u64,\n LL | | }\n    | |_^\n \n@@ -253,10 +253,10 @@ LL | #[suggestion(parser_add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:430:45\n+  --> $DIR/subdiagnostic-derive.rs:430:46\n    |\n-LL | #[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:448:1\n@@ -275,16 +275,16 @@ LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:482:38\n+  --> $DIR/subdiagnostic-derive.rs:482:39\n    |\n-LL | #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                      ^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:501:42\n+  --> $DIR/subdiagnostic-derive.rs:501:43\n    |\n-LL |     #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                          ^^^^^^^\n+LL |     #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:524:5"}]}