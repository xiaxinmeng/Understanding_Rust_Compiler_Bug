{"sha": "62b522ec3a8967501466bfe8889fe54667c4e4d1", "node_id": "C_kwDOAAsO6NoAKDYyYjUyMmVjM2E4OTY3NTAxNDY2YmZlODg4OWZlNTQ2NjdjNGU0ZDE", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-02-07T00:10:49Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-03-07T22:06:11Z"}, "message": "Don't depend on python for RUST_BOOTSTRAP_CONFIG", "tree": {"sha": "597559e9caeb56403731bd2ec7465ad2eb1a44e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/597559e9caeb56403731bd2ec7465ad2eb1a44e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b522ec3a8967501466bfe8889fe54667c4e4d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b522ec3a8967501466bfe8889fe54667c4e4d1", "html_url": "https://github.com/rust-lang/rust/commit/62b522ec3a8967501466bfe8889fe54667c4e4d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b522ec3a8967501466bfe8889fe54667c4e4d1/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "240f28832978235d18c0b3ade44814784a20d2fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/240f28832978235d18c0b3ade44814784a20d2fc", "html_url": "https://github.com/rust-lang/rust/commit/240f28832978235d18c0b3ade44814784a20d2fc"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "1777dae594f8e3fa7595e74bbc7f67ca6b018e6e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=62b522ec3a8967501466bfe8889fe54667c4e4d1", "patch": "@@ -1303,8 +1303,6 @@ def bootstrap(help_triggered):\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n-    if toml_path:\n-        env[\"BOOTSTRAP_CONFIG\"] = toml_path\n     if build.rustc_commit is not None:\n         env[\"BOOTSTRAP_DOWNLOAD_RUSTC\"] = '1'\n     run(args, env=env, verbose=build.verbose, is_bootstrap=True)"}, {"sha": "d7f474bfc80246d8b6a86e2851c2d5d4cf2f466b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=62b522ec3a8967501466bfe8889fe54667c4e4d1", "patch": "@@ -657,7 +657,15 @@ impl Config {\n             }\n         };\n \n-        let mut toml = flags.config.as_deref().map(get_toml).unwrap_or_else(TomlConfig::default);\n+        // check --config first, then `$RUST_BOOTSTRAP_CONFIG` first, then `config.toml`\n+        let toml_path = flags\n+            .config\n+            .clone()\n+            .or_else(|| env::var_os(\"RUST_BOOTSTRAP_CONFIG\").map(PathBuf::from))\n+            .unwrap_or_else(|| PathBuf::from(\"config.toml\"));\n+        let mut toml =\n+            if toml_path.exists() { get_toml(&toml_path) } else { TomlConfig::default() };\n+\n         if let Some(include) = &toml.profile {\n             let mut include_path = config.src.clone();\n             include_path.push(\"src\");\n@@ -669,9 +677,7 @@ impl Config {\n         }\n \n         config.changelog_seen = toml.changelog_seen;\n-        if let Some(cfg) = flags.config {\n-            config.config = cfg;\n-        }\n+        config.config = toml_path;\n \n         let build = toml.build.unwrap_or_default();\n "}, {"sha": "1a4e6a9688803b544295aa7d1c7ba0d5d2d9c2d0", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=62b522ec3a8967501466bfe8889fe54667c4e4d1", "patch": "@@ -3,7 +3,6 @@\n //! This module implements the command-line parsing of the build system which\n //! has various flags to configure how it's run.\n \n-use std::env;\n use std::path::PathBuf;\n use std::process;\n \n@@ -541,7 +540,6 @@ Arguments:\n         // Get any optional paths which occur after the subcommand\n         let mut paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n \n-        let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n         let verbose = matches.opt_present(\"verbose\");\n \n         // User passed in -h/--help?\n@@ -671,7 +669,7 @@ Arguments:\n             } else {\n                 None\n             },\n-            config: cfg_file,\n+            config: matches.opt_str(\"config\").map(PathBuf::from),\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().expect(\"`jobs` should be a number\")),\n             cmd,\n             incremental: matches.opt_present(\"incremental\"),"}, {"sha": "c2780a232ede474c4245221a76346f8a33107ad3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=62b522ec3a8967501466bfe8889fe54667c4e4d1", "patch": "@@ -629,7 +629,7 @@ impl Build {\n         }\n \n         if let Subcommand::Setup { profile } = &self.config.cmd {\n-            return setup::setup(&self.config.src, *profile);\n+            return setup::setup(&self.config, *profile);\n         }\n \n         {"}, {"sha": "e1235829b3aeff524b6997bf24ebd5f66312b050", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b522ec3a8967501466bfe8889fe54667c4e4d1/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=62b522ec3a8967501466bfe8889fe54667c4e4d1", "patch": "@@ -1,5 +1,5 @@\n-use crate::TargetSelection;\n use crate::{t, VERSION};\n+use crate::{Config, TargetSelection};\n use std::env::consts::EXE_SUFFIX;\n use std::fmt::Write as _;\n use std::fs::File;\n@@ -81,24 +81,22 @@ impl fmt::Display for Profile {\n     }\n }\n \n-pub fn setup(src_path: &Path, profile: Profile) {\n-    let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n+pub fn setup(config: &Config, profile: Profile) {\n+    let path = &config.config;\n \n-    if cfg_file.as_ref().map_or(false, |f| f.exists()) {\n-        let file = cfg_file.unwrap();\n+    if path.exists() {\n         println!(\n             \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n-            file.display()\n+            path.display()\n         );\n-        println!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, file.display());\n+        println!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n         println!(\n             \"note: this will use the configuration in {}\",\n-            profile.include_path(src_path).display()\n+            profile.include_path(&config.src).display()\n         );\n         std::process::exit(1);\n     }\n \n-    let path = cfg_file.unwrap_or_else(|| \"config.toml\".into());\n     let settings = format!(\n         \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n     profile = \\\"{}\\\"\\n\\\n@@ -107,7 +105,7 @@ pub fn setup(src_path: &Path, profile: Profile) {\n     );\n     t!(fs::write(path, settings));\n \n-    let include_path = profile.include_path(src_path);\n+    let include_path = profile.include_path(&config.src);\n     println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n \n     let build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n@@ -138,7 +136,7 @@ pub fn setup(src_path: &Path, profile: Profile) {\n \n     println!();\n \n-    t!(install_git_hook_maybe(src_path));\n+    t!(install_git_hook_maybe(&config.src));\n \n     println!();\n "}]}