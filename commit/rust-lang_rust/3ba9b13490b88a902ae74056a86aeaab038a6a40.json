{"sha": "3ba9b13490b88a902ae74056a86aeaab038a6a40", "node_id": "C_kwDOAAsO6NoAKDNiYTliMTM0OTBiODhhOTAyYWU3NDA1NmE4NmFlYWFiMDM4YTZhNDA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-27T18:44:19Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-27T18:44:19Z"}, "message": "Don't download abi-cafe and simple-raytracer in ./y.rs prepare\n\nInstead download them on the fly", "tree": {"sha": "623a49af63a557d3aa6f29b0d8df5a4c61058c3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/623a49af63a557d3aa6f29b0d8df5a4c61058c3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba9b13490b88a902ae74056a86aeaab038a6a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba9b13490b88a902ae74056a86aeaab038a6a40", "html_url": "https://github.com/rust-lang/rust/commit/3ba9b13490b88a902ae74056a86aeaab038a6a40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba9b13490b88a902ae74056a86aeaab038a6a40/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24fa2f915f896a68dd08e2c1689da1c27c5834b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24fa2f915f896a68dd08e2c1689da1c27c5834b", "html_url": "https://github.com/rust-lang/rust/commit/e24fa2f915f896a68dd08e2c1689da1c27c5834b"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "0da27f529b3ecd730a2f7a0cdfe16c55b04909b1", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=3ba9b13490b88a902ae74056a86aeaab038a6a40", "patch": "@@ -6,11 +6,10 @@ use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, CargoProject, Compiler};\n use super::SysrootKind;\n \n-pub(crate) static ABI_CAFE_REPO: GitRepo =\n+static ABI_CAFE_REPO: GitRepo =\n     GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n \n-pub(crate) static ABI_CAFE: CargoProject =\n-    CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n+static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n \n pub(crate) fn run(\n     channel: &str,\n@@ -19,6 +18,9 @@ pub(crate) fn run(\n     cg_clif_dylib: &Path,\n     bootstrap_host_compiler: &Compiler,\n ) {\n+    ABI_CAFE_REPO.fetch(dirs);\n+    spawn_and_wait(ABI_CAFE.fetch(\"cargo\", &bootstrap_host_compiler.rustc, dirs));\n+\n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot(\n         dirs,"}, {"sha": "f48f7bece028244d47c1c43098427125805fe2e7", "filename": "build_system/bench.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=3ba9b13490b88a902ae74056a86aeaab038a6a40", "patch": "@@ -7,18 +7,18 @@ use super::prepare::GitRepo;\n use super::rustc_info::get_file_name;\n use super::utils::{hyperfine_command, is_ci, spawn_and_wait, CargoProject, Compiler};\n \n-pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n+static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n     \"simple-raytracer\",\n     \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n     \"<none>\",\n );\n \n // Use a separate target dir for the initial LLVM build to reduce unnecessary recompiles\n-pub(crate) static SIMPLE_RAYTRACER_LLVM: CargoProject =\n+static SIMPLE_RAYTRACER_LLVM: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer_llvm\");\n \n-pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n+static SIMPLE_RAYTRACER: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n \n pub(crate) fn benchmark(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n@@ -32,6 +32,13 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n         std::process::exit(1);\n     }\n \n+    SIMPLE_RAYTRACER_REPO.fetch(dirs);\n+    spawn_and_wait(SIMPLE_RAYTRACER.fetch(\n+        &bootstrap_host_compiler.cargo,\n+        &bootstrap_host_compiler.rustc,\n+        dirs,\n+    ));\n+\n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n     let build_cmd = SIMPLE_RAYTRACER_LLVM.build(bootstrap_host_compiler, dirs);\n     spawn_and_wait(build_cmd);"}, {"sha": "50b1b7836dee1427e0b2476428032e776b65bf00", "filename": "build_system/prepare.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=3ba9b13490b88a902ae74056a86aeaab038a6a40", "patch": "@@ -11,22 +11,18 @@ use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spaw\n pub(crate) fn prepare(dirs: &Dirs) {\n     RelPath::DOWNLOAD.ensure_fresh(dirs);\n \n-    spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", \"rustc\", dirs));\n \n     prepare_sysroot(dirs);\n-    spawn_and_wait(super::build_sysroot::STANDARD_LIBRARY.fetch(\"cargo\", dirs));\n-    spawn_and_wait(super::tests::LIBCORE_TESTS.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::build_sysroot::STANDARD_LIBRARY.fetch(\"cargo\", \"rustc\", dirs));\n+    spawn_and_wait(super::tests::LIBCORE_TESTS.fetch(\"cargo\", \"rustc\", dirs));\n \n-    super::abi_cafe::ABI_CAFE_REPO.fetch(dirs);\n-    spawn_and_wait(super::abi_cafe::ABI_CAFE.fetch(\"cargo\", dirs));\n     super::tests::RAND_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::RAND.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::tests::RAND.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::REGEX_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::REGEX.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::tests::REGEX.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::PORTABLE_SIMD.fetch(\"cargo\", dirs));\n-    super::bench::SIMPLE_RAYTRACER_REPO.fetch(dirs);\n-    spawn_and_wait(super::bench::SIMPLE_RAYTRACER.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::tests::PORTABLE_SIMD.fetch(\"cargo\", \"rustc\", dirs));\n }\n \n fn prepare_sysroot(dirs: &Dirs) {\n@@ -80,7 +76,7 @@ impl GitRepo {\n         }\n     }\n \n-    fn fetch(&self, dirs: &Dirs) {\n+    pub(crate) fn fetch(&self, dirs: &Dirs) {\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n                 clone_repo_shallow_github("}, {"sha": "e9486888f86a4093bd98bd3d71a79b4c45788a9c", "filename": "build_system/tests.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=3ba9b13490b88a902ae74056a86aeaab038a6a40", "patch": "@@ -1,4 +1,3 @@\n-use super::bench::SIMPLE_RAYTRACER;\n use super::build_sysroot::{self, SYSROOT_SRC};\n use super::config;\n use super::path::{Dirs, RelPath};\n@@ -134,10 +133,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::custom(\"test.simple-raytracer\", &|runner| {\n-        SIMPLE_RAYTRACER.clean(&runner.dirs);\n-        spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n-    }),\n     TestCase::custom(\"test.libcore\", &|runner| {\n         LIBCORE_TESTS.clean(&runner.dirs);\n "}, {"sha": "bdff1abeb279aa763ff710a97c77c26dff651fab", "filename": "build_system/utils.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9b13490b88a902ae74056a86aeaab038a6a40/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=3ba9b13490b88a902ae74056a86aeaab038a6a40", "patch": "@@ -121,10 +121,18 @@ impl CargoProject {\n     }\n \n     #[must_use]\n-    pub(crate) fn fetch(&self, cargo: impl AsRef<Path>, dirs: &Dirs) -> Command {\n+    pub(crate) fn fetch(\n+        &self,\n+        cargo: impl AsRef<Path>,\n+        rustc: impl AsRef<Path>,\n+        dirs: &Dirs,\n+    ) -> Command {\n         let mut cmd = Command::new(cargo.as_ref());\n \n-        cmd.arg(\"fetch\").arg(\"--manifest-path\").arg(self.manifest_path(dirs));\n+        cmd.env(\"RUSTC\", rustc.as_ref())\n+            .arg(\"fetch\")\n+            .arg(\"--manifest-path\")\n+            .arg(self.manifest_path(dirs));\n \n         cmd\n     }"}, {"sha": "d6e3924a24d643f7550553874b7eb4d47495f577", "filename": "config.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9b13490b88a902ae74056a86aeaab038a6a40/config.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9b13490b88a902ae74056a86aeaab038a6a40/config.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.txt?ref=3ba9b13490b88a902ae74056a86aeaab038a6a40", "patch": "@@ -44,7 +44,6 @@ aot.issue-72793\n \n testsuite.extended_sysroot\n test.rust-random/rand\n-test.simple-raytracer\n test.libcore\n test.regex-shootout-regex-dna\n test.regex"}]}