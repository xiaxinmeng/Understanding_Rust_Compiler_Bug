{"sha": "a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YTFiYzRiMTViNzVlNTcwMmNiMWNlMWQ0YzVhYjMxNTNkYmUzYzk=", "commit": {"author": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2019-06-26T22:47:36Z"}, "committer": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2019-06-26T22:52:22Z"}, "message": "Extract lint scopes from `cargo watch`\n\nCurrently all of our VS Code diagnostics are given the source of\n`rustc`. However, if you have something like `cargo-watch.command` set\nto `clippy` it will also watch for Clippy lints. The `rustc` source is a\nbit misleading in that case.\n\nFortunately, Rust's tool lints (RFC 2103) line up perfectly with VS\nCode's concept of `source`. This checks for lints scoped to a given tool\nand then splits them in to a `source` and tool-specific `code`.", "tree": {"sha": "d4ecd189aa2dcdccb477e0edcac9b72cb11032a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ecd189aa2dcdccb477e0edcac9b72cb11032a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9", "html_url": "https://github.com/rust-lang/rust/commit/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9/comments", "author": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a211ff6146d167a2bdf7d200df36468137591b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a211ff6146d167a2bdf7d200df36468137591b", "html_url": "https://github.com/rust-lang/rust/commit/04a211ff6146d167a2bdf7d200df36468137591b"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "f27c58fe291b990d813071db878096d6e08c3e1c", "filename": "editors/code/src/test/rust_diagnostics.test.ts", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9/editors%2Fcode%2Fsrc%2Ftest%2Frust_diagnostics.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9/editors%2Fcode%2Fsrc%2Ftest%2Frust_diagnostics.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Frust_diagnostics.test.ts?ref=a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9", "patch": "@@ -37,6 +37,7 @@ describe('mapRustDiagnosticToVsCode', () => {\n             diagnostic.severity,\n             vscode.DiagnosticSeverity.Error\n         );\n+        assert.strictEqual(diagnostic.source, 'rustc');\n         assert.strictEqual(\n             diagnostic.message,\n             [\n@@ -72,6 +73,7 @@ describe('mapRustDiagnosticToVsCode', () => {\n             ].join('\\n')\n         );\n         assert.strictEqual(diagnostic.code, 'unused_variables');\n+        assert.strictEqual(diagnostic.source, 'rustc');\n         assert.deepStrictEqual(diagnostic.tags, [\n             vscode.DiagnosticTag.Unnecessary\n         ]);\n@@ -101,6 +103,7 @@ describe('mapRustDiagnosticToVsCode', () => {\n             'this function takes 2 parameters but 3 parameters were supplied'\n         );\n         assert.strictEqual(diagnostic.code, 'E0061');\n+        assert.strictEqual(diagnostic.source, 'rustc');\n         assert.strictEqual(diagnostic.tags, undefined);\n \n         // One related information for the original definition\n@@ -125,6 +128,7 @@ describe('mapRustDiagnosticToVsCode', () => {\n             diagnostic.severity,\n             vscode.DiagnosticSeverity.Warning\n         );\n+        assert.strictEqual(diagnostic.source, 'clippy');\n         assert.strictEqual(\n             diagnostic.message,\n             [\n@@ -133,10 +137,7 @@ describe('mapRustDiagnosticToVsCode', () => {\n                 'for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref'\n             ].join('\\n')\n         );\n-        assert.strictEqual(\n-            diagnostic.code,\n-            'clippy::trivially_copy_pass_by_ref'\n-        );\n+        assert.strictEqual(diagnostic.code, 'trivially_copy_pass_by_ref');\n         assert.strictEqual(diagnostic.tags, undefined);\n \n         // One related information for the lint definition"}, {"sha": "9c5d812fa3bb99c08b4b9652b405efe7098135ee", "filename": "editors/code/src/test/vscode_diagnostics.test.ts", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9/editors%2Fcode%2Fsrc%2Ftest%2Fvscode_diagnostics.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9/editors%2Fcode%2Fsrc%2Ftest%2Fvscode_diagnostics.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Fvscode_diagnostics.test.ts?ref=a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9", "patch": "@@ -35,6 +35,24 @@ describe('areDiagnosticsEqual', () => {\n         assert(areDiagnosticsEqual(diagnostic1, diagnostic2));\n     });\n \n+    it('should treat diagnostics with different sources as inequal', () => {\n+        const diagnostic1 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+        diagnostic1.source = 'rustc';\n+\n+        const diagnostic2 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+        diagnostic2.source = 'clippy';\n+\n+        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n+    });\n+\n     it('should treat diagnostics with different ranges as inequal', () => {\n         const diagnostic1 = new vscode.Diagnostic(\n             range1,"}, {"sha": "3c524cb378093a95324622496ef92ad8ca8359e4", "filename": "editors/code/src/utils/rust_diagnostics.ts", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9/editors%2Fcode%2Fsrc%2Futils%2Frust_diagnostics.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9/editors%2Fcode%2Fsrc%2Futils%2Frust_diagnostics.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Frust_diagnostics.ts?ref=a8a1bc4b15b75e5702cb1ce1d4c5ab3153dbe3c9", "patch": "@@ -187,8 +187,18 @@ export function mapRustDiagnosticToVsCode(\n \n     const vd = new vscode.Diagnostic(location.range, rd.message, severity);\n \n-    vd.source = 'rustc';\n-    vd.code = rd.code ? rd.code.code : undefined;\n+    let source = 'rustc';\n+    let code = rd.code && rd.code.code;\n+    if (code) {\n+        // See if this is an RFC #2103 scoped lint (e.g. from Clippy)\n+        const scopedCode = code.split('::');\n+        if (scopedCode.length === 2) {\n+            [source, code] = scopedCode;\n+        }\n+    }\n+\n+    vd.source = source;\n+    vd.code = code;\n     vd.relatedInformation = [];\n \n     for (const secondarySpan of secondarySpans) {"}]}