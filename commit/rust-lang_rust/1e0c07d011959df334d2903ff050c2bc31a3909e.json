{"sha": "1e0c07d011959df334d2903ff050c2bc31a3909e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMGMwN2QwMTE5NTlkZjMzNGQyOTAzZmYwNTBjMmJjMzFhMzkwOWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-31T20:28:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "librustc: De-`@str` debuginfo", "tree": {"sha": "7545867a1e39a21a0a0c8541b29bc4523deec38b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7545867a1e39a21a0a0c8541b29bc4523deec38b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e0c07d011959df334d2903ff050c2bc31a3909e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0c07d011959df334d2903ff050c2bc31a3909e", "html_url": "https://github.com/rust-lang/rust/commit/1e0c07d011959df334d2903ff050c2bc31a3909e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e0c07d011959df334d2903ff050c2bc31a3909e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf5e6f6f4b268b70bfd0b03225cae909dcd374c", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf5e6f6f4b268b70bfd0b03225cae909dcd374c", "html_url": "https://github.com/rust-lang/rust/commit/daf5e6f6f4b268b70bfd0b03225cae909dcd374c"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "d619e9ce8761d000dee9537d715e5e4a751ccc72", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1e0c07d011959df334d2903ff050c2bc31a3909e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0c07d011959df334d2903ff050c2bc31a3909e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1e0c07d011959df334d2903ff050c2bc31a3909e", "patch": "@@ -1139,9 +1139,10 @@ impl MemberDescriptionFactory for StructMemberDescriptionFactory {\n                                   -> ~[MemberDescription] {\n         self.fields.map(|field| {\n             let name = if field.ident.name == special_idents::unnamed_field.name {\n-                @\"\"\n+                ~\"\"\n             } else {\n-                token::ident_to_str(&field.ident)\n+                let string = token::get_ident(field.ident.name);\n+                string.get().to_str()\n             };\n \n             MemberDescription {\n@@ -1244,7 +1245,7 @@ impl MemberDescriptionFactory for TupleMemberDescriptionFactory {\n                                   -> ~[MemberDescription] {\n         self.component_types.map(|&component_type| {\n             MemberDescription {\n-                name: @\"\",\n+                name: ~\"\",\n                 llvm_type: type_of::type_of(cx, component_type),\n                 type_metadata: type_metadata(cx, component_type, self.span),\n                 offset: ComputedMemberOffset,\n@@ -1322,7 +1323,7 @@ impl MemberDescriptionFactory for GeneralMemberDescriptionFactory {\n                                               self.file_metadata,\n                                               codemap::DUMMY_SP);\n                 MemberDescription {\n-                    name: @\"\",\n+                    name: ~\"\",\n                     llvm_type: variant_llvm_type,\n                     type_metadata: variant_type_metadata,\n                     offset: FixedMemberOffset { bytes: 0 },\n@@ -1332,17 +1333,17 @@ impl MemberDescriptionFactory for GeneralMemberDescriptionFactory {\n }\n \n struct EnumVariantMemberDescriptionFactory {\n-    args: ~[(@str, ty::t)],\n+    args: ~[(~str, ty::t)],\n     discriminant_type_metadata: Option<DIType>,\n     span: Span,\n }\n \n impl MemberDescriptionFactory for EnumVariantMemberDescriptionFactory {\n     fn create_member_descriptions(&self, cx: &CrateContext)\n                                   -> ~[MemberDescription] {\n-        self.args.iter().enumerate().map(|(i, &(name, ty))| {\n+        self.args.iter().enumerate().map(|(i, &(ref name, ty))| {\n             MemberDescription {\n-                name: name,\n+                name: name.to_str(),\n                 llvm_type: type_of::type_of(cx, ty),\n                 type_metadata: match self.discriminant_type_metadata {\n                     Some(metadata) if i == 0 => metadata,\n@@ -1395,19 +1396,24 @@ fn describe_enum_variant(cx: &CrateContext,\n \n     // Get the argument names from the enum variant info\n     let mut arg_names = match variant_info.arg_names {\n-        Some(ref names) => names.map(|ident| token::ident_to_str(ident)),\n-        None => variant_info.args.map(|_| @\"\")\n+        Some(ref names) => {\n+            names.map(|ident| {\n+                let string = token::get_ident(ident.name);\n+                string.get().to_str()\n+            })\n+        }\n+        None => variant_info.args.map(|_| ~\"\")\n     };\n \n     // If this is not a univariant enum, there is also the (unnamed) discriminant field\n     if discriminant_type_metadata.is_some() {\n-        arg_names.insert(0, @\"\");\n+        arg_names.insert(0, ~\"\");\n     }\n \n     // Build an array of (field name, field type) pairs to be captured in the factory closure.\n-    let args: ~[(@str, ty::t)] = arg_names.iter()\n+    let args: ~[(~str, ty::t)] = arg_names.iter()\n         .zip(struct_def.fields.iter())\n-        .map(|(&s, &t)| (s, t))\n+        .map(|(s, &t)| (s.to_str(), t))\n         .collect();\n \n     let member_description_factory =\n@@ -1580,7 +1586,7 @@ enum MemberOffset {\n }\n \n struct MemberDescription {\n-    name: @str,\n+    name: ~str,\n     llvm_type: Type,\n     type_metadata: DIType,\n     offset: MemberOffset,\n@@ -1737,31 +1743,31 @@ fn boxed_type_metadata(cx: &CrateContext,\n \n     let member_descriptions = [\n         MemberDescription {\n-            name: @\"refcnt\",\n+            name: ~\"refcnt\",\n             llvm_type: member_llvm_types[0],\n             type_metadata: type_metadata(cx, int_type, codemap::DUMMY_SP),\n             offset: ComputedMemberOffset,\n         },\n         MemberDescription {\n-            name: @\"tydesc\",\n+            name: ~\"tydesc\",\n             llvm_type: member_llvm_types[1],\n             type_metadata: nil_pointer_type_metadata,\n             offset: ComputedMemberOffset,\n         },\n         MemberDescription {\n-            name: @\"prev\",\n+            name: ~\"prev\",\n             llvm_type: member_llvm_types[2],\n             type_metadata: nil_pointer_type_metadata,\n             offset: ComputedMemberOffset,\n         },\n         MemberDescription {\n-            name: @\"next\",\n+            name: ~\"next\",\n             llvm_type: member_llvm_types[3],\n             type_metadata: nil_pointer_type_metadata,\n             offset: ComputedMemberOffset,\n         },\n         MemberDescription {\n-            name: @\"val\",\n+            name: ~\"val\",\n             llvm_type: member_llvm_types[4],\n             type_metadata: content_type_metadata,\n             offset: ComputedMemberOffset,\n@@ -1848,19 +1854,19 @@ fn vec_metadata(cx: &CrateContext,\n \n     let member_descriptions = [\n         MemberDescription {\n-            name: @\"fill\",\n+            name: ~\"fill\",\n             llvm_type: member_llvm_types[0],\n             type_metadata: int_type_metadata,\n             offset: ComputedMemberOffset,\n         },\n         MemberDescription {\n-            name: @\"alloc\",\n+            name: ~\"alloc\",\n             llvm_type: member_llvm_types[1],\n             type_metadata: int_type_metadata,\n             offset: ComputedMemberOffset,\n         },\n         MemberDescription {\n-            name: @\"elements\",\n+            name: ~\"elements\",\n             llvm_type: member_llvm_types[2],\n             type_metadata: array_type_metadata,\n             offset: ComputedMemberOffset,\n@@ -1917,13 +1923,13 @@ fn vec_slice_metadata(cx: &CrateContext,\n \n     let member_descriptions = [\n         MemberDescription {\n-            name: @\"data_ptr\",\n+            name: ~\"data_ptr\",\n             llvm_type: member_llvm_types[0],\n             type_metadata: type_metadata(cx, data_ptr_type, span),\n             offset: ComputedMemberOffset,\n         },\n         MemberDescription {\n-            name: @\"length\",\n+            name: ~\"length\",\n             llvm_type: member_llvm_types[1],\n             type_metadata: type_metadata(cx, ty::mk_uint(), span),\n             offset: ComputedMemberOffset,\n@@ -2714,7 +2720,7 @@ fn populate_scope_map(cx: &CrateContext,\n             ast::ExprInlineAsm(ast::InlineAsm { inputs: ref inputs,\n                                                 outputs: ref outputs,\n                                                 .. }) => {\n-                // inputs, outputs: ~[(@str, @expr)]\n+                // inputs, outputs: ~[(~str, @expr)]\n                 for &(_, exp) in inputs.iter() {\n                     walk_expr(cx, exp, scope_stack, scope_map);\n                 }"}]}