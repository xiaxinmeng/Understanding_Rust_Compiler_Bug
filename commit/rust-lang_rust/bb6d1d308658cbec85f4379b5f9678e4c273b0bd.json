{"sha": "bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNmQxZDMwODY1OGNiZWM4NWY0Mzc5YjVmOTY3OGU0YzI3M2IwYmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-28T06:09:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-28T06:09:10Z"}, "message": "Rollup merge of #81284 - jyn514:impl-times, r=wesleywiser\n\nMake `-Z time-passes` less noisy\n\n- Add the module name to `pre_AST_expansion_passes` and don't make it a\n  verbose event (since it normally doesn't take very long, and it's\n  emitted many times)\n- Don't make the following rustdoc events verbose; they're emitted many times.\n  + build_extern_trait_impl\n  + build_local_trait_impl\n  + build_primitive_trait_impl\n  + get_auto_trait_impls\n  + get_blanket_trait_impls\n- Remove the `get_auto_trait_and_blanket_synthetic_impls` rustdoc event; it's wholly\n  covered by get_{auto,blanket}_trait_impls and not very useful.\n\nI found this while working on https://github.com/rust-lang/rust/pull/81275 but it's independent of those changes.", "tree": {"sha": "9113d4b6fec9c911cde75a47b9f2cb68a1932cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9113d4b6fec9c911cde75a47b9f2cb68a1932cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgElUGCRBK7hj4Ov3rIwAAdHIIAHI8rKXJ4E3yfTOddO9igUkP\nitOd+0dVnL1Uq6j/K6teq4J8RAwuzG9umiNaDzEXrDui98ZwTNZCCwb+zjlVLW3w\nKptFyuWgCX08bNP0n/S2qLOwDePieq5JqmOvSTx8nBUEeLCFqSHmGF5wIGtt7A5t\n0vPqZ3FiLcTkZIWr/ucwLiAlkJTuQUuUjJFdUnp76383BE1yB5qJQ4BqtgMcl2zk\nM7wIQx5M/QVXoBDIJJcLR5Rc3auccMfgErh0pWxSOtgnAvTnbnKc5OJ2QN54VMLZ\nEEScj4+QEzis/8Ig5Or0Qk++mJT9Kq9jCD1rccKuS58tt75cW3xPAgf30nn6/90=\n=aDg6\n-----END PGP SIGNATURE-----\n", "payload": "tree 9113d4b6fec9c911cde75a47b9f2cb68a1932cae\nparent 70be5cef699d5dcbe9457f4def66055a9ef6b966\nparent 3b8f1b7883d300bb1a435b994c90433774105cc9\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611814150 +0900\ncommitter GitHub <noreply@github.com> 1611814150 +0900\n\nRollup merge of #81284 - jyn514:impl-times, r=wesleywiser\n\nMake `-Z time-passes` less noisy\n\n- Add the module name to `pre_AST_expansion_passes` and don't make it a\n  verbose event (since it normally doesn't take very long, and it's\n  emitted many times)\n- Don't make the following rustdoc events verbose; they're emitted many times.\n  + build_extern_trait_impl\n  + build_local_trait_impl\n  + build_primitive_trait_impl\n  + get_auto_trait_impls\n  + get_blanket_trait_impls\n- Remove the `get_auto_trait_and_blanket_synthetic_impls` rustdoc event; it's wholly\n  covered by get_{auto,blanket}_trait_impls and not very useful.\n\nI found this while working on https://github.com/rust-lang/rust/pull/81275 but it's independent of those changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "html_url": "https://github.com/rust-lang/rust/commit/bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70be5cef699d5dcbe9457f4def66055a9ef6b966", "url": "https://api.github.com/repos/rust-lang/rust/commits/70be5cef699d5dcbe9457f4def66055a9ef6b966", "html_url": "https://github.com/rust-lang/rust/commit/70be5cef699d5dcbe9457f4def66055a9ef6b966"}, {"sha": "3b8f1b7883d300bb1a435b994c90433774105cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8f1b7883d300bb1a435b994c90433774105cc9", "html_url": "https://github.com/rust-lang/rust/commit/3b8f1b7883d300bb1a435b994c90433774105cc9"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "08543d1622a7d4f6fd9d6b43330bb3b6b720017b", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "patch": "@@ -929,15 +929,17 @@ pub struct ExtCtxt<'a> {\n     pub force_mode: bool,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n     /// Called directly after having parsed an external `mod foo;` in expansion.\n-    pub(super) extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n+    ///\n+    /// `Ident` is the module name.\n+    pub(super) extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate, Ident)>,\n }\n \n impl<'a> ExtCtxt<'a> {\n     pub fn new(\n         sess: &'a Session,\n         ecfg: expand::ExpansionConfig<'a>,\n         resolver: &'a mut dyn ResolverExpand,\n-        extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n+        extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate, Ident)>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {\n             sess,"}, {"sha": "50832d5edbfc59b8fa8c6671ee994ec0c2462d45", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "patch": "@@ -1407,7 +1407,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         proc_macros: vec![],\n                     };\n                     if let Some(extern_mod_loaded) = self.cx.extern_mod_loaded {\n-                        extern_mod_loaded(&krate);\n+                        extern_mod_loaded(&krate, ident);\n                     }\n \n                     *old_mod = krate.module;"}, {"sha": "56aa3939b22dca67059741df734b447d47f3110c", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "patch": "@@ -33,7 +33,7 @@ use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{FileName, RealFileName};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n@@ -211,8 +211,13 @@ pub fn register_plugins<'a>(\n     Ok((krate, lint_store))\n }\n \n-fn pre_expansion_lint(sess: &Session, lint_store: &LintStore, krate: &ast::Crate) {\n-    sess.time(\"pre_AST_expansion_lint_checks\", || {\n+fn pre_expansion_lint(\n+    sess: &Session,\n+    lint_store: &LintStore,\n+    krate: &ast::Crate,\n+    crate_name: &str,\n+) {\n+    sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", crate_name).run(|| {\n         rustc_lint::check_ast_crate(\n             sess,\n             lint_store,\n@@ -233,7 +238,7 @@ fn configure_and_expand_inner<'a>(\n     metadata_loader: &'a MetadataLoaderDyn,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n     tracing::trace!(\"configure_and_expand_inner\");\n-    pre_expansion_lint(sess, lint_store, &krate);\n+    pre_expansion_lint(sess, lint_store, &krate, crate_name);\n \n     let mut resolver = Resolver::new(sess, &krate, crate_name, metadata_loader, &resolver_arenas);\n     rustc_builtin_macros::register_builtin_macros(&mut resolver);\n@@ -295,7 +300,9 @@ fn configure_and_expand_inner<'a>(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n-        let extern_mod_loaded = |k: &ast::Crate| pre_expansion_lint(sess, lint_store, k);\n+        let extern_mod_loaded = |k: &ast::Crate, ident: Ident| {\n+            pre_expansion_lint(sess, lint_store, k, &*ident.name.as_str())\n+        };\n         let mut ecx = ExtCtxt::new(&sess, cfg, &mut resolver, Some(&extern_mod_loaded));\n \n         // Expand macros now!"}, {"sha": "50ec6e69fbd408ca1dea9ed78827d24eba335658", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "patch": "@@ -487,12 +487,16 @@ crate fn get_auto_trait_and_blanket_impls(\n     ty: Ty<'tcx>,\n     param_env_def_id: DefId,\n ) -> impl Iterator<Item = Item> {\n-    let auto_impls = cx.sess().time(\"get_auto_trait_impls\", || {\n-        AutoTraitFinder::new(cx).get_auto_trait_impls(ty, param_env_def_id)\n-    });\n-    let blanket_impls = cx.sess().time(\"get_blanket_impls\", || {\n-        BlanketImplFinder::new(cx).get_blanket_impls(ty, param_env_def_id)\n-    });\n+    let auto_impls = cx\n+        .sess()\n+        .prof\n+        .generic_activity(\"get_auto_trait_impls\")\n+        .run(|| AutoTraitFinder::new(cx).get_auto_trait_impls(ty, param_env_def_id));\n+    let blanket_impls = cx\n+        .sess()\n+        .prof\n+        .generic_activity(\"get_blanket_impls\")\n+        .run(|| BlanketImplFinder::new(cx).get_blanket_impls(ty, param_env_def_id));\n     auto_impls.into_iter().chain(blanket_impls)\n }\n "}, {"sha": "6ec6620681bf5162becea0e2a8fd1d5eddccc9f7", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6d1d308658cbec85f4379b5f9678e4c273b0bd/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=bb6d1d308658cbec85f4379b5f9678e4c273b0bd", "patch": "@@ -30,7 +30,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n \n     for &cnum in cx.tcx.crates().iter() {\n         for &(did, _) in cx.tcx.all_trait_implementations(cnum).iter() {\n-            cx.tcx.sess.time(\"build_extern_trait_impl\", || {\n+            cx.tcx.sess.prof.generic_activity(\"build_extern_trait_impl\").run(|| {\n                 inline::build_impl(cx, None, did, None, &mut new_items);\n             });\n         }\n@@ -39,7 +39,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     // Also try to inline primitive impls from other crates.\n     for &def_id in PrimitiveType::all_impls(cx.tcx).values().flatten() {\n         if !def_id.is_local() {\n-            cx.sess().time(\"build_primitive_trait_impl\", || {\n+            cx.tcx.sess.prof.generic_activity(\"build_primitive_trait_impls\").run(|| {\n                 inline::build_impl(cx, None, def_id, None, &mut new_items);\n \n                 // FIXME(eddyb) is this `doc(hidden)` check needed?\n@@ -59,7 +59,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     for &trait_did in cx.tcx.all_traits(LOCAL_CRATE).iter() {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = cx.tcx.hir().local_def_id(impl_node);\n-            cx.tcx.sess.time(\"build_local_trait_impl\", || {\n+            cx.tcx.sess.prof.generic_activity(\"build_local_trait_impl\").run(|| {\n                 let mut extra_attrs = Vec::new();\n                 let mut parent = cx.tcx.parent(impl_did.to_def_id());\n                 while let Some(did) = parent {\n@@ -177,13 +177,11 @@ impl<'a, 'tcx> DocFolder for SyntheticImplCollector<'a, 'tcx> {\n         if i.is_struct() || i.is_enum() || i.is_union() {\n             // FIXME(eddyb) is this `doc(hidden)` check needed?\n             if !self.cx.tcx.get_attrs(i.def_id).lists(sym::doc).has_word(sym::hidden) {\n-                self.cx.sess().time(\"get_auto_trait_and_blanket_synthetic_impls\", || {\n-                    self.impls.extend(get_auto_trait_and_blanket_impls(\n-                        self.cx,\n-                        self.cx.tcx.type_of(i.def_id),\n-                        i.def_id,\n-                    ));\n-                });\n+                self.impls.extend(get_auto_trait_and_blanket_impls(\n+                    self.cx,\n+                    self.cx.tcx.type_of(i.def_id),\n+                    i.def_id,\n+                ));\n             }\n         }\n "}]}