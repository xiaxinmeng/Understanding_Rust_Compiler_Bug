{"sha": "233fe11ce9711a3652141fbe7e9191314fd701d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzM2ZlMTFjZTk3MTFhMzY1MjE0MWZiZTdlOTE5MTMxNGZkNzAxZDU=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-02-04T18:08:08Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-02-04T18:08:08Z"}, "message": "Set turbofish for every sugg and add more test cases", "tree": {"sha": "574a12b1a6e07d7a4fc59c627abb82ed04f918a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574a12b1a6e07d7a4fc59c627abb82ed04f918a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/233fe11ce9711a3652141fbe7e9191314fd701d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/233fe11ce9711a3652141fbe7e9191314fd701d5", "html_url": "https://github.com/rust-lang/rust/commit/233fe11ce9711a3652141fbe7e9191314fd701d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/233fe11ce9711a3652141fbe7e9191314fd701d5/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7825bf36d8dfee0099a23eb74451783da3ce261f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7825bf36d8dfee0099a23eb74451783da3ce261f", "html_url": "https://github.com/rust-lang/rust/commit/7825bf36d8dfee0099a23eb74451783da3ce261f"}], "stats": {"total": 103, "additions": 86, "deletions": 17}, "files": [{"sha": "3e356afa2a4d9c29b8aa619d99be424f6f8bfb38", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/233fe11ce9711a3652141fbe7e9191314fd701d5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233fe11ce9711a3652141fbe7e9191314fd701d5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=233fe11ce9711a3652141fbe7e9191314fd701d5", "patch": "@@ -4095,11 +4095,7 @@ fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<\n         then {\n             // `expr` implements `FromIterator` trait\n             let iter_expr = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n-            let sugg = if higher::range(&args[0]).is_some() {\n-                format!(\"{}.collect::<{}>()\", iter_expr, ty)\n-            } else {\n-                format!(\"{}.collect()\", iter_expr)\n-            };\n+            let sugg = format!(\"{}.collect::<{}>()\", iter_expr, ty);\n             span_lint_and_sugg(\n                 cx,\n                 FROM_ITER_INSTEAD_OF_COLLECT,"}, {"sha": "96701e86395623ff2b741f7994749e2157e7924b", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/233fe11ce9711a3652141fbe7e9191314fd701d5/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/233fe11ce9711a3652141fbe7e9191314fd701d5/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=233fe11ce9711a3652141fbe7e9191314fd701d5", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+#![warn(clippy::from_iter_instead_of_collect)]\n+#![allow(unused_imports)]\n+\n+use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n+use std::iter::FromIterator;\n+\n+fn main() {\n+    let iter_expr = std::iter::repeat(5).take(5);\n+    let _ = iter_expr.collect::<std::vec::Vec<i32>>();\n+\n+    let _ = vec![5, 5, 5, 5].iter().enumerate().collect::<std::collections::HashMap<usize, &i8>>();\n+\n+    Vec::from_iter(vec![42u32]);\n+\n+    let a = vec![0, 1, 2];\n+    assert_eq!(a, (0..3).collect::<std::vec::Vec<i32>>());\n+\n+    let mut b = (0..3).collect::<std::collections::VecDeque<i32>>();\n+    b.push_back(4);\n+\n+    let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n+    let bm = values.iter().cloned().collect::<std::collections::BTreeMap<i32, char>>();\n+    let mut bar = bm.range(0..2).collect::<std::collections::BTreeMap<&i32, &char>>();\n+    bar.insert(&4, &'e');\n+\n+    let mut bts = (0..3).collect::<std::collections::BTreeSet<i32>>();\n+    bts.insert(2);\n+    {\n+        use std::collections;\n+        let _ = (0..3).collect::<std::collections::BTreeSet<i32>>();\n+    }\n+}"}, {"sha": "211f57bc5374e85e12f392029d3437854c640125", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/233fe11ce9711a3652141fbe7e9191314fd701d5/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233fe11ce9711a3652141fbe7e9191314fd701d5/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=233fe11ce9711a3652141fbe7e9191314fd701d5", "patch": "@@ -1,13 +1,16 @@\n+// run-rustfix\n+\n #![warn(clippy::from_iter_instead_of_collect)]\n+#![allow(unused_imports)]\n \n-use std::collections::{HashMap, VecDeque};\n+use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n use std::iter::FromIterator;\n \n fn main() {\n     let iter_expr = std::iter::repeat(5).take(5);\n-    Vec::from_iter(iter_expr);\n+    let _ = Vec::from_iter(iter_expr);\n \n-    HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+    let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n \n     Vec::from_iter(vec![42u32]);\n \n@@ -16,4 +19,16 @@ fn main() {\n \n     let mut b = VecDeque::from_iter(0..3);\n     b.push_back(4);\n+\n+    let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n+    let bm = BTreeMap::from_iter(values.iter().cloned());\n+    let mut bar = BTreeMap::from_iter(bm.range(0..2));\n+    bar.insert(&4, &'e');\n+\n+    let mut bts = BTreeSet::from_iter(0..3);\n+    bts.insert(2);\n+    {\n+        use std::collections;\n+        let _ = collections::BTreeSet::from_iter(0..3);\n+    }\n }"}, {"sha": "336e25a8adf938c76c34575e59995c68ed751494", "filename": "tests/ui/from_iter_instead_of_collect.stderr", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/233fe11ce9711a3652141fbe7e9191314fd701d5/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/233fe11ce9711a3652141fbe7e9191314fd701d5/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=233fe11ce9711a3652141fbe7e9191314fd701d5", "patch": "@@ -1,28 +1,52 @@\n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:8:5\n+  --> $DIR/from_iter_instead_of_collect.rs:11:13\n    |\n-LL |     Vec::from_iter(iter_expr);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect()`\n+LL |     let _ = Vec::from_iter(iter_expr);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<std::vec::Vec<i32>>()`\n    |\n    = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:10:5\n+  --> $DIR/from_iter_instead_of_collect.rs:13:13\n    |\n-LL |     HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect()`\n+LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<std::collections::HashMap<usize, &i8>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:15:19\n+  --> $DIR/from_iter_instead_of_collect.rs:18:19\n    |\n LL |     assert_eq!(a, Vec::from_iter(0..3));\n    |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::vec::Vec<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:17:17\n+  --> $DIR/from_iter_instead_of_collect.rs:20:17\n    |\n LL |     let mut b = VecDeque::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::collections::VecDeque<i32>>()`\n \n-error: aborting due to 4 previous errors\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:24:14\n+   |\n+LL |     let bm = BTreeMap::from_iter(values.iter().cloned());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<std::collections::BTreeMap<i32, char>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:25:19\n+   |\n+LL |     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<std::collections::BTreeMap<&i32, &char>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:28:19\n+   |\n+LL |     let mut bts = BTreeSet::from_iter(0..3);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::collections::BTreeSet<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:32:17\n+   |\n+LL |         let _ = collections::BTreeSet::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::collections::BTreeSet<i32>>()`\n+\n+error: aborting due to 8 previous errors\n "}]}