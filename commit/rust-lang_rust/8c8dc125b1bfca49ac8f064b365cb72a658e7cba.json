{"sha": "8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "node_id": "C_kwDOAAsO6NoAKDhjOGRjMTI1YjFiZmNhNDlhYzhmMDY0YjM2NWNiNzJhNjU4ZTdjYmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-04T13:16:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-18T22:07:39Z"}, "message": "make many std tests work in Miri", "tree": {"sha": "f3a2f741e3b6573b204fd4074e5fd7f7731c5c5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3a2f741e3b6573b204fd4074e5fd7f7731c5c5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "html_url": "https://github.com/rust-lang/rust/commit/8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b044433367d7305f71bcf67dd9b5be0a0bd65a", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b044433367d7305f71bcf67dd9b5be0a0bd65a", "html_url": "https://github.com/rust-lang/rust/commit/27b044433367d7305f71bcf67dd9b5be0a0bd65a"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "cb3032719fa64287bd56c757513bb8a0b0f64922", "filename": "library/std/src/collections/hash/map/tests.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -268,53 +268,56 @@ fn test_lots_of_insertions() {\n \n     // Try this a few times to make sure we never screw up the hashmap's\n     // internal state.\n-    for _ in 0..10 {\n+    let loops = if cfg!(miri) { 2 } else { 10 };\n+    for _ in 0..loops {\n         assert!(m.is_empty());\n \n-        for i in 1..1001 {\n+        let count = if cfg!(miri) { 101 } else { 1001 };\n+\n+        for i in 1..count {\n             assert!(m.insert(i, i).is_none());\n \n             for j in 1..=i {\n                 let r = m.get(&j);\n                 assert_eq!(r, Some(&j));\n             }\n \n-            for j in i + 1..1001 {\n+            for j in i + 1..count {\n                 let r = m.get(&j);\n                 assert_eq!(r, None);\n             }\n         }\n \n-        for i in 1001..2001 {\n+        for i in count..(2 * count) {\n             assert!(!m.contains_key(&i));\n         }\n \n         // remove forwards\n-        for i in 1..1001 {\n+        for i in 1..count {\n             assert!(m.remove(&i).is_some());\n \n             for j in 1..=i {\n                 assert!(!m.contains_key(&j));\n             }\n \n-            for j in i + 1..1001 {\n+            for j in i + 1..count {\n                 assert!(m.contains_key(&j));\n             }\n         }\n \n-        for i in 1..1001 {\n+        for i in 1..count {\n             assert!(!m.contains_key(&i));\n         }\n \n-        for i in 1..1001 {\n+        for i in 1..count {\n             assert!(m.insert(i, i).is_none());\n         }\n \n         // remove backwards\n-        for i in (1..1001).rev() {\n+        for i in (1..count).rev() {\n             assert!(m.remove(&i).is_some());\n \n-            for j in i..1001 {\n+            for j in i..count {\n                 assert!(!m.contains_key(&j));\n             }\n \n@@ -817,6 +820,7 @@ fn test_retain() {\n }\n \n #[test]\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n #[cfg_attr(target_os = \"android\", ignore)] // Android used in CI has a broken dlmalloc\n fn test_try_reserve() {\n     let mut empty_bytes: HashMap<u8, u8> = HashMap::new();"}, {"sha": "68a19eccc0e7c275073bebce3c84e0549317e7fd", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -94,7 +94,7 @@ fn read_to_end() {\n     assert_eq!(c.read_to_end(&mut v).unwrap(), 1);\n     assert_eq!(v, b\"1\");\n \n-    let cap = 1024 * 1024;\n+    let cap = if cfg!(miri) { 1024 } else { 1024 * 1024 };\n     let data = (0..cap).map(|i| (i / 3) as u8).collect::<Vec<_>>();\n     let mut v = Vec::new();\n     let (a, b) = data.split_at(data.len() / 2);\n@@ -309,6 +309,7 @@ fn chain_zero_length_read_is_not_eof() {\n \n #[bench]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n+#[cfg_attr(miri, ignore)] // Miri isn't fast...\n fn bench_read_to_end(b: &mut test::Bencher) {\n     b.iter(|| {\n         let mut lr = repeat(1).take(10000000);"}, {"sha": "dd307022c6d05ce5c55e81c84c642eb6056c8e54", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -1768,6 +1768,7 @@ fn test_windows_absolute() {\n }\n \n #[bench]\n+#[cfg_attr(miri, ignore)] // Miri isn't fast...\n fn bench_path_cmp_fast_path_buf_sort(b: &mut test::Bencher) {\n     let prefix = \"my/home\";\n     let mut paths: Vec<_> =\n@@ -1781,6 +1782,7 @@ fn bench_path_cmp_fast_path_buf_sort(b: &mut test::Bencher) {\n }\n \n #[bench]\n+#[cfg_attr(miri, ignore)] // Miri isn't fast...\n fn bench_path_cmp_fast_path_long(b: &mut test::Bencher) {\n     let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n     let paths: Vec<_> =\n@@ -1799,6 +1801,7 @@ fn bench_path_cmp_fast_path_long(b: &mut test::Bencher) {\n }\n \n #[bench]\n+#[cfg_attr(miri, ignore)] // Miri isn't fast...\n fn bench_path_cmp_fast_path_short(b: &mut test::Bencher) {\n     let prefix = \"my/home\";\n     let paths: Vec<_> =\n@@ -1817,6 +1820,7 @@ fn bench_path_cmp_fast_path_short(b: &mut test::Bencher) {\n }\n \n #[bench]\n+#[cfg_attr(miri, ignore)] // Miri isn't fast...\n fn bench_path_hashset(b: &mut test::Bencher) {\n     let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n     let paths: Vec<_> =\n@@ -1835,6 +1839,7 @@ fn bench_path_hashset(b: &mut test::Bencher) {\n }\n \n #[bench]\n+#[cfg_attr(miri, ignore)] // Miri isn't fast...\n fn bench_path_hashset_miss(b: &mut test::Bencher) {\n     let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n     let paths: Vec<_> ="}, {"sha": "34b2a9a98ac36fa523fc4435fc12db5a8fe99f23", "filename": "library/std/src/sync/mpsc/mpsc_queue/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -13,7 +13,7 @@ fn test_full() {\n #[test]\n fn test() {\n     let nthreads = 8;\n-    let nmsgs = 1000;\n+    let nmsgs = if cfg!(miri) { 100 } else { 1000 };\n     let q = Queue::new();\n     match q.pop() {\n         Empty => {}"}, {"sha": "eb6d5c2cf66d8fc71a850d05646c1706916dfbbc", "filename": "library/std/src/sync/mpsc/spsc_queue/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -77,12 +77,13 @@ fn stress() {\n     }\n \n     unsafe fn stress_bound(bound: usize) {\n+        let count = if cfg!(miri) { 1000 } else { 100000 };\n         let q = Arc::new(Queue::with_additions(bound, (), ()));\n \n         let (tx, rx) = channel();\n         let q2 = q.clone();\n         let _t = thread::spawn(move || {\n-            for _ in 0..100000 {\n+            for _ in 0..count {\n                 loop {\n                     match q2.pop() {\n                         Some(1) => break,\n@@ -93,7 +94,7 @@ fn stress() {\n             }\n             tx.send(()).unwrap();\n         });\n-        for _ in 0..100000 {\n+        for _ in 0..count {\n             q.push(1);\n         }\n         rx.recv().unwrap();"}, {"sha": "63c79436974d592cf6bb9a6a6f017e6dc5ea0fb5", "filename": "library/std/src/sync/mpsc/sync_tests.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -113,23 +113,25 @@ fn chan_gone_concurrent() {\n \n #[test]\n fn stress() {\n+    let count = if cfg!(miri) { 100 } else { 10000 };\n     let (tx, rx) = sync_channel::<i32>(0);\n     thread::spawn(move || {\n-        for _ in 0..10000 {\n+        for _ in 0..count {\n             tx.send(1).unwrap();\n         }\n     });\n-    for _ in 0..10000 {\n+    for _ in 0..count {\n         assert_eq!(rx.recv().unwrap(), 1);\n     }\n }\n \n #[test]\n fn stress_recv_timeout_two_threads() {\n+    let count = if cfg!(miri) { 100 } else { 10000 };\n     let (tx, rx) = sync_channel::<i32>(0);\n \n     thread::spawn(move || {\n-        for _ in 0..10000 {\n+        for _ in 0..count {\n             tx.send(1).unwrap();\n         }\n     });\n@@ -146,12 +148,12 @@ fn stress_recv_timeout_two_threads() {\n         }\n     }\n \n-    assert_eq!(recv_count, 10000);\n+    assert_eq!(recv_count, count);\n }\n \n #[test]\n fn stress_recv_timeout_shared() {\n-    const AMT: u32 = 1000;\n+    const AMT: u32 = if cfg!(miri) { 100 } else { 1000 };\n     const NTHREADS: u32 = 8;\n     let (tx, rx) = sync_channel::<i32>(0);\n     let (dtx, drx) = sync_channel::<()>(0);\n@@ -191,7 +193,7 @@ fn stress_recv_timeout_shared() {\n \n #[test]\n fn stress_shared() {\n-    const AMT: u32 = 1000;\n+    const AMT: u32 = if cfg!(miri) { 100 } else { 1000 };\n     const NTHREADS: u32 = 8;\n     let (tx, rx) = sync_channel::<i32>(0);\n     let (dtx, drx) = sync_channel::<()>(0);\n@@ -438,12 +440,13 @@ fn stream_send_recv_stress() {\n \n #[test]\n fn recv_a_lot() {\n+    let count = if cfg!(miri) { 1000 } else { 10000 };\n     // Regression test that we don't run out of stack in scheduler context\n-    let (tx, rx) = sync_channel(10000);\n-    for _ in 0..10000 {\n+    let (tx, rx) = sync_channel(count);\n+    for _ in 0..count {\n         tx.send(()).unwrap();\n     }\n-    for _ in 0..10000 {\n+    for _ in 0..count {\n         rx.recv().unwrap();\n     }\n }"}, {"sha": "f6d0796f604fa9c2a4aa3ad65a202fa9d491a932", "filename": "library/std/src/sync/mpsc/tests.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -120,21 +120,22 @@ fn chan_gone_concurrent() {\n \n #[test]\n fn stress() {\n+    let count = if cfg!(miri) { 100 } else { 10000 };\n     let (tx, rx) = channel::<i32>();\n     let t = thread::spawn(move || {\n-        for _ in 0..10000 {\n+        for _ in 0..count {\n             tx.send(1).unwrap();\n         }\n     });\n-    for _ in 0..10000 {\n+    for _ in 0..count {\n         assert_eq!(rx.recv().unwrap(), 1);\n     }\n     t.join().ok().expect(\"thread panicked\");\n }\n \n #[test]\n fn stress_shared() {\n-    const AMT: u32 = 10000;\n+    const AMT: u32 = if cfg!(miri) { 100 } else { 10000 };\n     const NTHREADS: u32 = 8;\n     let (tx, rx) = channel::<i32>();\n \n@@ -504,12 +505,13 @@ fn very_long_recv_timeout_wont_panic() {\n \n #[test]\n fn recv_a_lot() {\n+    let count = if cfg!(miri) { 1000 } else { 10000 };\n     // Regression test that we don't run out of stack in scheduler context\n     let (tx, rx) = channel();\n-    for _ in 0..10000 {\n+    for _ in 0..count {\n         tx.send(()).unwrap();\n     }\n-    for _ in 0..10000 {\n+    for _ in 0..count {\n         rx.recv().unwrap();\n     }\n }"}, {"sha": "b5b3ad9898edbd0e8cbfb43ffb74f8afd92c1be8", "filename": "library/std/src/sync/rwlock/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -19,7 +19,7 @@ fn smoke() {\n #[test]\n fn frob() {\n     const N: u32 = 10;\n-    const M: usize = 1000;\n+    const M: usize = if cfg!(miri) { 100 } else { 1000 };\n \n     let r = Arc::new(RwLock::new(()));\n "}, {"sha": "6229556c85fee926f0535f3d3867c9b99b808bf3", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8dc125b1bfca49ac8f064b365cb72a658e7cba/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=8c8dc125b1bfca49ac8f064b365cb72a658e7cba", "patch": "@@ -31,7 +31,8 @@ fn instant_monotonic_concurrent() -> crate::thread::Result<()> {\n         .map(|_| {\n             crate::thread::spawn(|| {\n                 let mut old = Instant::now();\n-                for _ in 0..5_000_000 {\n+                let count = if cfg!(miri) { 1_000 } else { 5_000_000 };\n+                for _ in 0..count {\n                     let new = Instant::now();\n                     assert!(new >= old);\n                     old = new;"}]}