{"sha": "df7f68236c7f64449e4b236cd95fb30c53f4cbec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmN2Y2ODIzNmM3ZjY0NDQ5ZTRiMjM2Y2Q5NWZiMzBjNTNmNGNiZWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-28T16:51:22Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Remove stack_store without following stack_load", "tree": {"sha": "1e2c967321739fc44be18995ef7a0b17c181f982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e2c967321739fc44be18995ef7a0b17c181f982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7f68236c7f64449e4b236cd95fb30c53f4cbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7f68236c7f64449e4b236cd95fb30c53f4cbec", "html_url": "https://github.com/rust-lang/rust/commit/df7f68236c7f64449e4b236cd95fb30c53f4cbec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7f68236c7f64449e4b236cd95fb30c53f4cbec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6320c65484b69b9141d9e47781a2e1b086be743a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6320c65484b69b9141d9e47781a2e1b086be743a", "html_url": "https://github.com/rust-lang/rust/commit/6320c65484b69b9141d9e47781a2e1b086be743a"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "cbf95eae618650ab4535615f11c6adfb56d9b0a8", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/df7f68236c7f64449e4b236cd95fb30c53f4cbec/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7f68236c7f64449e4b236cd95fb30c53f4cbec/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=df7f68236c7f64449e4b236cd95fb30c53f4cbec", "patch": "@@ -76,11 +76,9 @@ pub(super) fn optimize_function(\n \n     // FIXME Repeat following instructions until fixpoint.\n \n-    println!(\"{}:\\nstack slot usage: {:?}\", name, stack_slot_usage_map);\n-\n     remove_unused_stack_addr_and_stack_load(&mut ctx.func, &mut stack_slot_usage_map);\n \n-    println!(\"stack slot usage (after): {:?}\", stack_slot_usage_map);\n+    println!(\"stack slot usage: {:?}\", stack_slot_usage_map);\n \n     for (stack_slot, users) in stack_slot_usage_map.iter_mut() {\n         if users.stack_addr.is_empty().not() {\n@@ -95,8 +93,6 @@ pub(super) fn optimize_function(\n             let loaded_type = ctx.func.dfg.value_type(loaded_value);\n \n             let potential_stores = users.stack_store.iter().cloned().filter(|&store| {\n-                // Check if the store modified some memory accessed by the load.\n-\n                 match spatial_overlap(&ctx.func, load, store) {\n                     SpatialOverlap::No => false, // Can never be the source of the loaded value.\n                     SpatialOverlap::Partial | SpatialOverlap::Full => true,\n@@ -107,6 +103,7 @@ pub(super) fn optimize_function(\n                     TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n                 }\n             }).collect::<Vec<Inst>>();\n+\n             for &store in &potential_stores {\n                 println!(\n                     \"Potential store -> load forwarding {} -> {} ({:?}, {:?})\",\n@@ -120,6 +117,7 @@ pub(super) fn optimize_function(\n             match *potential_stores {\n                 [] => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n                 [store] if spatial_overlap(&ctx.func, store, load) == SpatialOverlap::Full && temporal_order(&ctx, store, load) == TemporalOrder::DefinitivelyBefore => {\n+                    // Only one store could have been the origin of the value.\n                     let store_ebb = ctx.func.layout.inst_ebb(store).unwrap();\n                     let stored_value = ctx.func.dfg.inst_args(store)[0];\n                     let stored_type = ctx.func.dfg.value_type(stored_value);\n@@ -135,12 +133,35 @@ pub(super) fn optimize_function(\n             }\n         }\n \n-        if users.stack_load.is_empty() {\n-            // Never loaded; can safely remove all stores and the stack slot.\n-            // FIXME also remove stores when there is always a next store before a load.\n-            for user in users.stack_store.drain() {\n-                println!(\"[{}] Remove dead stack store {} of {}\", name, user, stack_slot.0);\n-                ctx.func.dfg.replace(user).nop();\n+        for store in users.stack_store.clone().drain() {\n+            let potential_loads = users.stack_load.iter().cloned().filter(|&load| {\n+                match spatial_overlap(&ctx.func, store, load) {\n+                    SpatialOverlap::No => false, // Can never be the source of the loaded value.\n+                    SpatialOverlap::Partial | SpatialOverlap::Full => true,\n+                }\n+            }).filter(|&load| {\n+                match temporal_order(&*ctx, store, load) {\n+                    TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n+                    TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n+                }\n+            }).collect::<Vec<Inst>>();\n+\n+            for &load in &potential_loads {\n+                println!(\n+                    \"Potential load from store {} <- {} ({:?}, {:?})\",\n+                    ctx.func.dfg.display_inst(load, None),\n+                    ctx.func.dfg.display_inst(store, None),\n+                    spatial_overlap(&ctx.func, store, load),\n+                    temporal_order(&*ctx, store, load),\n+                );\n+            }\n+\n+            if potential_loads.is_empty() {\n+                // Never loaded; can safely remove all stores and the stack slot.\n+                // FIXME also remove stores when there is always a next store before a load.\n+                println!(\"[{}] Remove dead stack store {} of {}\", name, ctx.func.dfg.display_inst(store, None), stack_slot.0);\n+                ctx.func.dfg.replace(store).nop();\n+                users.stack_store.remove(&store);\n             }\n         }\n \n@@ -205,8 +226,6 @@ fn remove_unused_stack_addr_and_stack_load(func: &mut Function, stack_slot_usage\n         }\n     }\n \n-    println!(\"stack_addr/stack_load users: {:?}\", stack_addr_load_insts_users);\n-\n     for inst in stack_addr_load_insts_users.keys() {\n         let mut is_recorded_stack_addr_or_stack_load = false;\n         for stack_slot_users in stack_slot_usage_map.values() {\n@@ -220,7 +239,6 @@ fn remove_unused_stack_addr_and_stack_load(func: &mut Function, stack_slot_usage\n         // FIXME remove clone\n         for &inst in stack_slot_users.stack_addr.clone().iter() {\n             if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                println!(\"Removing unused stack_addr {}\", inst);\n                 func.dfg.detach_results(inst);\n                 func.dfg.replace(inst).nop();\n                 stack_slot_users.stack_addr.remove(&inst);\n@@ -229,7 +247,6 @@ fn remove_unused_stack_addr_and_stack_load(func: &mut Function, stack_slot_usage\n \n         for &inst in stack_slot_users.stack_load.clone().iter() {\n             if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                println!(\"Removing unused stack_addr {}\", inst);\n                 func.dfg.detach_results(inst);\n                 func.dfg.replace(inst).nop();\n                 stack_slot_users.stack_load.remove(&inst);"}]}