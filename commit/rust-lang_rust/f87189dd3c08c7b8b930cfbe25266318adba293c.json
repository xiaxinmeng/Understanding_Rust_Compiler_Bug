{"sha": "f87189dd3c08c7b8b930cfbe25266318adba293c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzE4OWRkM2MwOGM3YjhiOTMwY2ZiZTI1MjY2MzE4YWRiYTI5M2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-24T19:36:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "update tests and add stderr files", "tree": {"sha": "ddd1217256c4089232643f6c3a0d1d456910727c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd1217256c4089232643f6c3a0d1d456910727c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f87189dd3c08c7b8b930cfbe25266318adba293c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f87189dd3c08c7b8b930cfbe25266318adba293c", "html_url": "https://github.com/rust-lang/rust/commit/f87189dd3c08c7b8b930cfbe25266318adba293c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f87189dd3c08c7b8b930cfbe25266318adba293c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "html_url": "https://github.com/rust-lang/rust/commit/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d"}], "stats": {"total": 153, "additions": 72, "deletions": 81}, "files": [{"sha": "2e105ece8b55cf27fa3738e1054bc9e05794814a", "filename": "src/test/ui/nll/ty-outlives/projection-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -1,5 +1,7 @@\n // Test that when we infer the lifetime to a subset of the fn body, it\n // works out.\n+//\n+// compile-pass\n \n trait MyTrait<'a> {\n     type Output;"}, {"sha": "6667457e13b15134be9c783a64ca066c436a3aa0", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -74,18 +74,10 @@ where\n     T: Anything<'b>,\n     T::AssocType: 'a,\n {\n-    // This error is unfortunate. This code ought to type-check: we\n-    // are projecting `<T as Anything<'b>>::AssocType`, and we know\n-    // that this outlives `'a` because of the where-clause. However,\n-    // the way the region checker works, we don't register this\n-    // outlives obligation, and hence we get an error: this is because\n-    // what we see is a projection like `<T as\n-    // Anything<'?0>>::AssocType`, and we don't yet know if `?0` will\n-    // equal `'b` or not, so we ignore the where-clause. Obviously we\n-    // can do better here with a more involved verification step.\n+    // We are projecting `<T as Anything<'b>>::AssocType`, and we know\n+    // that this outlives `'a` because of the where-clause.\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR\n }\n \n #[rustc_regions]"}, {"sha": "455fbba232007482e269fd28cc5ddd66a4fd9f6b", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -106,7 +106,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:87:29\n+  --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +129,7 @@ LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n ...  |\n-LL | |     //~^ ERROR\n+LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n@@ -139,16 +139,8 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#5r>>::AssocType` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:87:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r>>::AssocType: ReEarlyBound(0, 'a)`...\n-\n note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:98:29\n+  --> $DIR/projection-one-region-closure.rs:90:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -165,7 +157,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-one-region-closure.rs:92:1\n+  --> $DIR/projection-one-region-closure.rs:84:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -182,6 +174,6 @@ LL | | }\n                T\n            ]\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0309`."}, {"sha": "a94d8239fbec0471eb5c02bc5a1f1d07ace05be2", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -64,18 +64,10 @@ where\n     T: Anything<'b>,\n     T::AssocType: 'a,\n {\n-    // This error is unfortunate. This code ought to type-check: we\n-    // are projecting `<T as Anything<'b>>::AssocType`, and we know\n-    // that this outlives `'a` because of the where-clause. However,\n-    // the way the region checker works, we don't register this\n-    // outlives obligation, and hence we get an error: this is because\n-    // what we see is a projection like `<T as\n-    // Anything<'?0>>::AssocType`, and we don't yet know if `?0` will\n-    // equal `'b` or not, so we ignore the where-clause. Obviously we\n-    // can do better here with a more involved verification step.\n+    // We are projecting `<T as Anything<'b>>::AssocType`, and we know\n+    // that this outlives `'a` because of the where-clause.\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR\n }\n \n #[rustc_regions]"}, {"sha": "b98aca74058b97d1c915449551e3bafa764eb2dd", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -88,7 +88,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:77:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,7 +111,7 @@ LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n ...  |\n-LL | |     //~^ ERROR\n+LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n@@ -121,16 +121,8 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#5r>>::AssocType` may not live long enough\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:77:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r>>::AssocType: ReEarlyBound(0, 'a)`...\n-\n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:87:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -146,7 +138,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:82:1\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:74:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -164,7 +156,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:99:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:91:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -179,7 +171,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#1r: '_#2r\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:91:1\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:83:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -195,6 +187,5 @@ LL | | }\n                T\n            ]\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "95c344e6dffb2f83bddae5bee03077188c176b34", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -65,18 +65,10 @@ where\n     T: Anything<'b, 'c>,\n     T::AssocType: 'a,\n {\n-    // This error is unfortunate. This code ought to type-check: we\n-    // are projecting `<T as Anything<'b>>::AssocType`, and we know\n-    // that this outlives `'a` because of the where-clause. However,\n-    // the way the region checker works, we don't register this\n-    // outlives obligation, and hence we get an error: this is because\n-    // what we see is a projection like `<T as\n-    // Anything<'?0>>::AssocType`, and we don't yet know if `?0` will\n-    // equal `'b` or not, so we ignore the where-clause. Obviously we\n-    // can do better here with a more involved verification step.\n+    // We are projecting `<T as Anything<'b>>::AssocType`, and we know\n+    // that this outlives `'a` because of the where-clause.\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]"}, {"sha": "f872c87b0bb6986b79109d3b543a241c73af85a6", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -86,7 +86,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:78:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:71:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     T::AssocType: 'a,\n ...  |\n-LL | |     //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n@@ -121,16 +121,8 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:78:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n-\n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:88:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -147,7 +139,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:83:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:75:1\n    |\n LL | / fn elements_outlive1<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -166,7 +158,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:89:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -183,7 +175,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:92:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:84:1\n    |\n LL | / fn elements_outlive2<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -202,7 +194,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:105:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -218,7 +210,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:101:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:93:1\n    |\n LL | / fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -235,7 +227,7 @@ LL | | }\n            ]\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:105:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |\n LL | fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                --  -- lifetime `'b` defined here\n@@ -246,7 +238,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:115:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:107:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -262,7 +254,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:110:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:102:1\n    |\n LL | / fn two_regions_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -280,7 +272,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:127:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:119:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -295,7 +287,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:119:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:111:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -311,6 +303,6 @@ LL | | }\n                T\n            ]\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0309`."}, {"sha": "acb978b5d5a2c955229c0ebf7adb432f70416ab3", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:17:5\n+   |\n+LL |     bar::<T::Output>() //~ ERROR may not live long enough\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "c6d0037138c42f9c19d687d737d78fc62e8b873e", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -0,0 +1,16 @@\n+error[E0309]: the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n+  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:14:5\n+   |\n+LL |     bar::<<T as MyTrait<'a>>::Output>() //~ ERROR the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n+note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n+  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:14:5\n+   |\n+LL |     bar::<<T as MyTrait<'a>>::Output>() //~ ERROR the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "2d171a98789f8f626a37efde0eb8bc0b787ad263", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-none.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f87189dd3c08c7b8b930cfbe25266318adba293c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr?ref=f87189dd3c08c7b8b930cfbe25266318adba293c", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/projection-where-clause-none.rs:16:5\n+   |\n+LL |     bar::<T::Output>() //~ ERROR the parameter type `T` may not live long enough\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}]}