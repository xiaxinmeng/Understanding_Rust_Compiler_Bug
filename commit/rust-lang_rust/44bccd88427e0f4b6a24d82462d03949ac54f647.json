{"sha": "44bccd88427e0f4b6a24d82462d03949ac54f647", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YmNjZDg4NDI3ZTBmNGI2YTI0ZDgyNDYyZDAzOTQ5YWM1NGY2NDc=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-23T18:50:50Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-26T00:29:20Z"}, "message": "Rename AsPredicate to ToPredicate in order to match naming conventions", "tree": {"sha": "2ed049a5a6eccc395dc76b1032142dcbaf0b03fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ed049a5a6eccc395dc76b1032142dcbaf0b03fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44bccd88427e0f4b6a24d82462d03949ac54f647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44bccd88427e0f4b6a24d82462d03949ac54f647", "html_url": "https://github.com/rust-lang/rust/commit/44bccd88427e0f4b6a24d82462d03949ac54f647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44bccd88427e0f4b6a24d82462d03949ac54f647/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912ab64a0de2c121a1c9f10bb1dbe75983b78c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/912ab64a0de2c121a1c9f10bb1dbe75983b78c73", "html_url": "https://github.com/rust-lang/rust/commit/912ab64a0de2c121a1c9f10bb1dbe75983b78c73"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "63afdc8b0fcf16525ae4b72450679a3c419d5533", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -21,7 +21,7 @@ pub use self::DefIdSource::*;\n use middle::region;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{self, AsPredicate, Ty};\n+use middle::ty::{self, ToPredicate, Ty};\n \n use std::str;\n use syntax::abi;\n@@ -775,14 +775,14 @@ fn parse_predicate_<'a,'tcx, F>(st: &mut PState<'a, 'tcx>,\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     match next(st) {\n-        't' => ty::Binder(parse_trait_ref_(st, conv)).as_predicate(),\n+        't' => ty::Binder(parse_trait_ref_(st, conv)).to_predicate(),\n         'e' => ty::Binder(ty::EquatePredicate(parse_ty_(st, conv),\n-                                              parse_ty_(st, conv))).as_predicate(),\n+                                              parse_ty_(st, conv))).to_predicate(),\n         'r' => ty::Binder(ty::OutlivesPredicate(parse_region_(st, conv),\n-                                                parse_region_(st, conv))).as_predicate(),\n+                                                parse_region_(st, conv))).to_predicate(),\n         'o' => ty::Binder(ty::OutlivesPredicate(parse_ty_(st, conv),\n-                                                parse_region_(st, conv))).as_predicate(),\n-        'p' => ty::Binder(parse_projection_predicate_(st, conv)).as_predicate(),\n+                                                parse_region_(st, conv))).to_predicate(),\n+        'p' => ty::Binder(parse_projection_predicate_(st, conv)).to_predicate(),\n         c => panic!(\"Encountered invalid character in metadata: {}\", c)\n     }\n }"}, {"sha": "f87b121eb224d9ed70c79b44c0dc6bae0c52c242", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -13,7 +13,7 @@\n use middle::infer::{InferCtxt, GenericKind};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPolyTraitRef, AsPredicate, Ty};\n+use middle::ty::{self, RegionEscape, ToPolyTraitRef, ToPredicate, Ty};\n use middle::ty_fold::{TypeFoldable, TypeFolder};\n \n use syntax::ast;\n@@ -445,7 +445,7 @@ pub fn object_region_bounds<'tcx>(\n     let trait_refs = vec!(ty::Binder(ty::TraitRef::new(principal.0.def_id, substs)));\n \n     let mut predicates = others.to_predicates(tcx, open_ty);\n-    predicates.extend(trait_refs.iter().map(|t| t.as_predicate()));\n+    predicates.extend(trait_refs.iter().map(|t| t.to_predicate()));\n \n     ty::required_region_bounds(tcx, open_ty, predicates)\n }"}, {"sha": "dc7e4f9c57114702242f9ccc170379fc9f0a0382", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -25,7 +25,7 @@ use super::{\n \n use fmt_macros::{Parser, Piece, Position};\n use middle::infer::InferCtxt;\n-use middle::ty::{self, AsPredicate, ReferencesError, ToPolyTraitRef, TraitRef};\n+use middle::ty::{self, ToPredicate, ReferencesError, ToPolyTraitRef, TraitRef};\n use middle::ty_fold::TypeFoldable;\n use std::collections::HashMap;\n use std::fmt;\n@@ -464,7 +464,7 @@ fn note_obligation_cause_code<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n             span_note!(tcx.sess, cause_span,\n                        \"required because it appears within the type `{}`\",\n                        parent_trait_ref.0.self_ty());\n-            let parent_predicate = parent_trait_ref.as_predicate();\n+            let parent_predicate = parent_trait_ref.to_predicate();\n             note_obligation_cause_code(infcx, &parent_predicate, cause_span, &*data.parent_code);\n         }\n         ObligationCauseCode::ImplDerivedObligation(ref data) => {\n@@ -473,7 +473,7 @@ fn note_obligation_cause_code<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n                        \"required because of the requirements on the impl of `{}` for `{}`\",\n                        parent_trait_ref,\n                        parent_trait_ref.0.self_ty());\n-            let parent_predicate = parent_trait_ref.as_predicate();\n+            let parent_predicate = parent_trait_ref.to_predicate();\n             note_obligation_cause_code(infcx, &parent_predicate, cause_span, &*data.parent_code);\n         }\n         ObligationCauseCode::CompareImplMethodObligation => {"}, {"sha": "cb5440fbf90008e0b1c98d549f64d3ba1f2b6317", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -23,7 +23,7 @@ use super::util;\n \n use middle::infer;\n use middle::subst::Subst;\n-use middle::ty::{self, AsPredicate, ReferencesError, RegionEscape,\n+use middle::ty::{self, ToPredicate, ReferencesError, RegionEscape,\n                  HasProjectionTypes, ToPolyTraitRef, Ty};\n use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n use syntax::parse::token;\n@@ -336,7 +336,7 @@ pub fn normalize_projection_type<'a,'b,'tcx>(\n                 projection_ty: projection_ty,\n                 ty: ty_var\n             });\n-            let obligation = Obligation::with_depth(cause, depth+1, projection.as_predicate());\n+            let obligation = Obligation::with_depth(cause, depth+1, projection.to_predicate());\n             Normalized {\n                 value: ty_var,\n                 obligations: vec!(obligation)\n@@ -432,7 +432,7 @@ fn normalize_to_error<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n     let trait_ref = projection_ty.trait_ref.to_poly_trait_ref();\n     let trait_obligation = Obligation { cause: cause,\n                                         recursion_depth: depth,\n-                                        predicate: trait_ref.as_predicate() };\n+                                        predicate: trait_ref.to_predicate() };\n     Normalized {\n         value: selcx.tcx().types.err,\n         obligations: vec!(trait_obligation)\n@@ -646,7 +646,7 @@ fn assemble_candidates_from_object_type<'cx,'tcx>(\n     };\n     let projection_bounds = data.projection_bounds_with_self_ty(selcx.tcx(), object_ty);\n     let env_predicates = projection_bounds.iter()\n-                                          .map(|p| p.as_predicate())\n+                                          .map(|p| p.to_predicate())\n                                           .collect();\n     let env_predicates = elaborate_predicates(selcx.tcx(), env_predicates);\n     assemble_candidates_from_predicates(selcx, obligation, obligation_trait_ref,"}, {"sha": "4246d5f0e83f87bdbd2d726ea1d4544f9decdb9f", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -38,7 +38,7 @@ use super::util;\n \n use middle::fast_reject;\n use middle::subst::{Subst, Substs, TypeSpace};\n-use middle::ty::{self, AsPredicate, RegionEscape, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPredicate, RegionEscape, ToPolyTraitRef, Ty};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n use middle::ty_fold::TypeFoldable;\n@@ -2465,7 +2465,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                                      data_b.bounds.region_bound);\n                 nested.push(Obligation::with_depth(cause,\n                                                    obligation.recursion_depth + 1,\n-                                                   ty::Binder(outlives).as_predicate()));\n+                                                   ty::Binder(outlives).to_predicate()));\n             }\n \n             // T -> Trait.\n@@ -2485,7 +2485,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 };\n \n                 // Create the obligation for casting from T to Trait.\n-                push(data.principal_trait_ref_with_self_ty(tcx, source).as_predicate());\n+                push(data.principal_trait_ref_with_self_ty(tcx, source).to_predicate());\n \n                 // We can only make objects from sized types.\n                 let mut builtin_bounds = data.bounds.builtin_bounds;\n@@ -2497,22 +2497,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // for the Send check.)\n                 for bound in &builtin_bounds {\n                     if let Ok(tr) = util::trait_ref_for_builtin_bound(tcx, bound, source) {\n-                        push(tr.as_predicate());\n+                        push(tr.to_predicate());\n                     } else {\n                         return Err(Unimplemented);\n                     }\n                 }\n \n                 // Create obligations for the projection predicates.\n                 for bound in data.projection_bounds_with_self_ty(tcx, source) {\n-                    push(bound.as_predicate());\n+                    push(bound.to_predicate());\n                 }\n \n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` outlives `'a`:\n                 let outlives = ty::OutlivesPredicate(source,\n                                                      data.bounds.region_bound);\n-                push(ty::Binder(outlives).as_predicate());\n+                push(ty::Binder(outlives).to_predicate());\n             }\n \n             // [T; n] -> [T]."}, {"sha": "7b4a59b5427c1a91f9f4c156b0caff08e1f28d1a", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -10,7 +10,7 @@\n \n use middle::subst::Substs;\n use middle::infer::InferCtxt;\n-use middle::ty::{self, Ty, AsPredicate, ToPolyTraitRef};\n+use middle::ty::{self, Ty, ToPredicate, ToPolyTraitRef};\n use std::fmt;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -83,7 +83,7 @@ pub fn elaborate_trait_ref<'cx, 'tcx>(\n     trait_ref: ty::PolyTraitRef<'tcx>)\n     -> Elaborator<'cx, 'tcx>\n {\n-    elaborate_predicates(tcx, vec![trait_ref.as_predicate()])\n+    elaborate_predicates(tcx, vec![trait_ref.to_predicate()])\n }\n \n pub fn elaborate_trait_refs<'cx, 'tcx>(\n@@ -92,7 +92,7 @@ pub fn elaborate_trait_refs<'cx, 'tcx>(\n     -> Elaborator<'cx, 'tcx>\n {\n     let predicates = trait_refs.iter()\n-                               .map(|trait_ref| trait_ref.as_predicate())\n+                               .map(|trait_ref| trait_ref.to_predicate())\n                                .collect();\n     elaborate_predicates(tcx, predicates)\n }\n@@ -347,7 +347,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n     Obligation {\n         cause: cause,\n         recursion_depth: recursion_depth,\n-        predicate: trait_ref.as_predicate(),\n+        predicate: trait_ref.to_predicate(),\n     }\n }\n "}, {"sha": "3f84d433e9cb59f088ad2a71d7ed3aa8b4ec5213", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -1873,7 +1873,7 @@ impl BuiltinBounds {\n                                self_ty: Ty<'tcx>) -> Vec<Predicate<'tcx>> {\n         self.iter().filter_map(|builtin_bound|\n             match traits::trait_ref_for_builtin_bound(tcx, builtin_bound, self_ty) {\n-                Ok(trait_ref) => Some(trait_ref.as_predicate()),\n+                Ok(trait_ref) => Some(trait_ref.to_predicate()),\n                 Err(ErrorReported) => { None }\n             }\n         ).collect()\n@@ -2390,12 +2390,12 @@ impl<'tcx> ToPolyTraitRef<'tcx> for PolyProjectionPredicate<'tcx> {\n     }\n }\n \n-pub trait AsPredicate<'tcx> {\n-    fn as_predicate(&self) -> Predicate<'tcx>;\n+pub trait ToPredicate<'tcx> {\n+    fn to_predicate(&self) -> Predicate<'tcx>;\n }\n \n-impl<'tcx> AsPredicate<'tcx> for TraitRef<'tcx> {\n-    fn as_predicate(&self) -> Predicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n         // we're about to add a binder, so let's check that we don't\n         // accidentally capture anything, or else that might be some\n         // weird debruijn accounting.\n@@ -2407,32 +2407,32 @@ impl<'tcx> AsPredicate<'tcx> for TraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> AsPredicate<'tcx> for PolyTraitRef<'tcx> {\n-    fn as_predicate(&self) -> Predicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyTraitRef<'tcx> {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n         ty::Predicate::Trait(self.to_poly_trait_predicate())\n     }\n }\n \n-impl<'tcx> AsPredicate<'tcx> for PolyEquatePredicate<'tcx> {\n-    fn as_predicate(&self) -> Predicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyEquatePredicate<'tcx> {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n         Predicate::Equate(self.clone())\n     }\n }\n \n-impl<'tcx> AsPredicate<'tcx> for PolyRegionOutlivesPredicate {\n-    fn as_predicate(&self) -> Predicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n         Predicate::RegionOutlives(self.clone())\n     }\n }\n \n-impl<'tcx> AsPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n-    fn as_predicate(&self) -> Predicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n         Predicate::TypeOutlives(self.clone())\n     }\n }\n \n-impl<'tcx> AsPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n-    fn as_predicate(&self) -> Predicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n         Predicate::Projection(self.clone())\n     }\n }"}, {"sha": "d4ecdc65eadb0b8260d0760e6152d0c916ba4432", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -56,7 +56,7 @@ use middle::resolve_lifetime as rl;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::traits;\n-use middle::ty::{self, RegionEscape, Ty, AsPredicate};\n+use middle::ty::{self, RegionEscape, Ty, ToPredicate};\n use middle::ty_fold;\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope, ExplicitRscope,\n              ObjectLifetimeDefaultRscope, ShiftedRscope, BindingRscope};\n@@ -2213,7 +2213,7 @@ impl<'tcx> Bounds<'tcx> {\n \n         for builtin_bound in &self.builtin_bounds {\n             match traits::trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty) {\n-                Ok(trait_ref) => { vec.push(trait_ref.as_predicate()); }\n+                Ok(trait_ref) => { vec.push(trait_ref.to_predicate()); }\n                 Err(ErrorReported) => { }\n             }\n         }\n@@ -2222,15 +2222,15 @@ impl<'tcx> Bounds<'tcx> {\n             // account for the binder being introduced below; no need to shift `param_ty`\n             // because, at present at least, it can only refer to early-bound regions\n             let region_bound = ty_fold::shift_region(region_bound, 1);\n-            vec.push(ty::Binder(ty::OutlivesPredicate(param_ty, region_bound)).as_predicate());\n+            vec.push(ty::Binder(ty::OutlivesPredicate(param_ty, region_bound)).to_predicate());\n         }\n \n         for bound_trait_ref in &self.trait_bounds {\n-            vec.push(bound_trait_ref.as_predicate());\n+            vec.push(bound_trait_ref.to_predicate());\n         }\n \n         for projection in &self.projection_bounds {\n-            vec.push(projection.as_predicate());\n+            vec.push(projection.to_predicate());\n         }\n \n         vec"}, {"sha": "30fb830495e77ecb67449a969abfe51e7c0f4c83", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -16,7 +16,7 @@ use middle::def;\n use middle::privacy::{AllPublic, DependsOn, LastPrivate, LastMod};\n use middle::subst;\n use middle::traits;\n-use middle::ty::{self, AsPredicate, ToPolyTraitRef, TraitRef};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef};\n use middle::infer;\n \n use syntax::ast::DefId;\n@@ -192,7 +192,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let poly_trait_ref = trait_ref.to_poly_trait_ref();\n     let obligation = traits::Obligation::misc(span,\n                                               fcx.body_id,\n-                                              poly_trait_ref.as_predicate());\n+                                              poly_trait_ref.to_predicate());\n \n     // Now we want to know if this can be matched\n     let mut selcx = traits::SelectionContext::new(fcx.infcx(), fcx);"}, {"sha": "a1d1ddff45aae0fdab7aeedc8d91b2cde9cae8af", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -15,7 +15,7 @@ use CrateCtxt;\n \n use astconv::AstConv;\n use check::{self, FnCtxt};\n-use middle::ty::{self, Ty, ToPolyTraitRef, AsPredicate};\n+use middle::ty::{self, Ty, ToPolyTraitRef, ToPredicate};\n use middle::def;\n use middle::lang_items::FnOnceTraitLangItem;\n use middle::subst::Substs;\n@@ -101,7 +101,7 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                             let poly_trait_ref = trait_ref.to_poly_trait_ref();\n                             let obligation = Obligation::misc(span,\n                                                               fcx.body_id,\n-                                                              poly_trait_ref.as_predicate());\n+                                                              poly_trait_ref.to_predicate());\n                             let mut selcx = SelectionContext::new(infcx, fcx);\n \n                             if selcx.evaluate_obligation(&obligation) {"}, {"sha": "a873900b5fc60bd19d5f570a7cc9080a27bf041d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bccd88427e0f4b6a24d82462d03949ac54f647/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=44bccd88427e0f4b6a24d82462d03949ac54f647", "patch": "@@ -72,7 +72,7 @@ use middle::free_region::FreeRegionMap;\n use middle::region;\n use middle::resolve_lifetime;\n use middle::subst::{Substs, FnSpace, ParamSpace, SelfSpace, TypeSpace, VecPerParamSpace};\n-use middle::ty::{AsPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n+use middle::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty, TypeScheme};\n use middle::ty_fold::{self, TypeFolder, TypeFoldable};\n use middle::infer;\n@@ -1171,7 +1171,7 @@ fn ensure_super_predicates_step(ccx: &CrateCtxt,\n         let trait_def = trait_def_of_item(ccx, item);\n         let self_predicate = ty::GenericPredicates {\n             predicates: VecPerParamSpace::new(vec![],\n-                                              vec![trait_def.trait_ref.as_predicate()],\n+                                              vec![trait_def.trait_ref.to_predicate()],\n                                               vec![])\n         };\n         let scope = &(generics, &self_predicate);\n@@ -1355,7 +1355,7 @@ fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n \n     // Add in a predicate that `Self:Trait` (where `Trait` is the\n     // current trait).  This is needed for builtin bounds.\n-    let self_predicate = trait_def.trait_ref.to_poly_trait_ref().as_predicate();\n+    let self_predicate = trait_def.trait_ref.to_poly_trait_ref().to_predicate();\n     base_predicates.predicates.push(SelfSpace, self_predicate);\n \n     // add in the explicit where-clauses\n@@ -1767,7 +1767,7 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         for bound in &param.bounds {\n             let bound_region = ast_region_to_region(ccx.tcx, bound);\n             let outlives = ty::Binder(ty::OutlivesPredicate(region, bound_region));\n-            result.predicates.push(space, outlives.as_predicate());\n+            result.predicates.push(space, outlives.to_predicate());\n         }\n     }\n \n@@ -1791,10 +1791,10 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                                     poly_trait_ref,\n                                                     &mut projections);\n \n-                            result.predicates.push(space, trait_ref.as_predicate());\n+                            result.predicates.push(space, trait_ref.to_predicate());\n \n                             for projection in &projections {\n-                                result.predicates.push(space, projection.as_predicate());\n+                                result.predicates.push(space, projection.to_predicate());\n                             }\n                         }\n \n@@ -2028,8 +2028,8 @@ fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx>,\n             let mut projections = Vec::new();\n             let pred = conv_poly_trait_ref(astconv, param_ty, tr, &mut projections);\n             projections.into_iter()\n-                       .map(|p| p.as_predicate())\n-                       .chain(Some(pred.as_predicate()))\n+                       .map(|p| p.to_predicate())\n+                       .chain(Some(pred.to_predicate()))\n                        .collect()\n         }\n         ast::RegionTyParamBound(ref lifetime) => {"}]}