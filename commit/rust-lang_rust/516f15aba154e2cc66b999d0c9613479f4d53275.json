{"sha": "516f15aba154e2cc66b999d0c9613479f4d53275", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNmYxNWFiYTE1NGUyY2M2NmI5OTlkMGM5NjEzNDc5ZjRkNTMyNzU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-12T04:48:12Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-12T04:48:12Z"}, "message": "Cargo clippy", "tree": {"sha": "ee7ba3af6694ce4146dacdd1362e2a696ff46f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7ba3af6694ce4146dacdd1362e2a696ff46f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/516f15aba154e2cc66b999d0c9613479f4d53275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/516f15aba154e2cc66b999d0c9613479f4d53275", "html_url": "https://github.com/rust-lang/rust/commit/516f15aba154e2cc66b999d0c9613479f4d53275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/516f15aba154e2cc66b999d0c9613479f4d53275/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "html_url": "https://github.com/rust-lang/rust/commit/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "3916b52fe5fcdc2c75ad7a07ded7365c92533e10", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -54,7 +54,7 @@ fn execute() -> i32 {\n     // If there is any invalid argument passed to `cargo fmt`, return without formatting.\n     let mut is_package_arg = false;\n     for arg in env::args().skip(2).take_while(|a| a != \"--\") {\n-        if arg.starts_with(\"-\") {\n+        if arg.starts_with('-') {\n             is_package_arg = arg.starts_with(\"--package\");\n         } else if !is_package_arg {\n             print_usage_to_stderr(&opts, &format!(\"Invalid argument: `{}`.\", arg));\n@@ -215,7 +215,7 @@ impl CargoFmtStrategy {\n     }\n }\n \n-/// Based on the specified CargoFmtStrategy, returns a set of main source files.\n+/// Based on the specified `CargoFmtStrategy`, returns a set of main source files.\n fn get_targets(strategy: &CargoFmtStrategy) -> Result<HashSet<Target>, io::Error> {\n     let mut targets = HashSet::new();\n \n@@ -228,7 +228,7 @@ fn get_targets(strategy: &CargoFmtStrategy) -> Result<HashSet<Target>, io::Error\n     if targets.is_empty() {\n         Err(io::Error::new(\n             io::ErrorKind::Other,\n-            format!(\"Failed to find targets\"),\n+            \"Failed to find targets\".to_owned(),\n         ))\n     } else {\n         Ok(targets)\n@@ -310,7 +310,7 @@ fn get_targets_with_hitlist(\n \n fn add_targets(target_paths: &[cargo_metadata::Target], targets: &mut HashSet<Target>) {\n     for target in target_paths {\n-        targets.insert(Target::from_target(&target));\n+        targets.insert(Target::from_target(target));\n     }\n }\n "}, {"sha": "439a7f6a05f32c1cfea3d19c4f117f89fbb8c575", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -930,7 +930,7 @@ pub fn recover_comment_removed(\n     context: &RewriteContext,\n ) -> Option<String> {\n     let snippet = context.snippet(span);\n-    if snippet != new && changed_comment_content(&snippet, &new) {\n+    if snippet != new && changed_comment_content(snippet, &new) {\n         // We missed some comments. Keep the original text.\n         Some(snippet.to_owned())\n     } else {"}, {"sha": "8ef55b1716cd878acd628c41f34732da7d09dd1d", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -304,7 +304,7 @@ pub fn format_expr(\n         })\n }\n \n-#[derive(new)]\n+#[derive(new, Clone, Copy)]\n pub struct PairParts<'a> {\n     prefix: &'a str,\n     infix: &'a str,\n@@ -729,7 +729,7 @@ struct ControlFlow<'a> {\n     span: Span,\n }\n \n-fn to_control_flow<'a>(expr: &'a ast::Expr, expr_type: ExprType) -> Option<ControlFlow<'a>> {\n+fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow> {\n     match expr.node {\n         ast::ExprKind::If(ref cond, ref if_block, ref else_block) => Some(ControlFlow::new_if(\n             cond,\n@@ -2122,16 +2122,12 @@ fn is_every_args_simple<T: ToExpr>(lists: &[&T]) -> bool {\n \n /// In case special-case style is required, returns an offset from which we start horizontal layout.\n fn maybe_get_args_offset<T: ToExpr>(callee_str: &str, args: &[&T]) -> Option<usize> {\n-    if FORMAT_LIKE_WHITELIST\n-        .iter()\n-        .find(|s| **s == callee_str)\n-        .is_some() && args.len() >= 1 && is_every_args_simple(args)\n+    if FORMAT_LIKE_WHITELIST.iter().any(|s| *s == callee_str) && args.len() >= 1\n+        && is_every_args_simple(args)\n     {\n         Some(1)\n-    } else if WRITE_LIKE_WHITELIST\n-        .iter()\n-        .find(|s| **s == callee_str)\n-        .is_some() && args.len() >= 2 && is_every_args_simple(args)\n+    } else if WRITE_LIKE_WHITELIST.iter().any(|s| *s == callee_str) && args.len() >= 2\n+        && is_every_args_simple(args)\n     {\n         Some(2)\n     } else {"}, {"sha": "c7fa5e2f1efddcbbbffa125205cedd11e6b00ab5", "filename": "src/filemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -45,7 +45,7 @@ where\n }\n \n // Prints all newlines either as `\\n` or as `\\r\\n`.\n-pub fn write_system_newlines<T>(writer: T, text: &String, config: &Config) -> Result<(), io::Error>\n+pub fn write_system_newlines<T>(writer: T, text: &str, config: &Config) -> Result<(), io::Error>\n where\n     T: Write,\n {\n@@ -79,7 +79,7 @@ where\n }\n \n pub fn write_file<T>(\n-    text: &String,\n+    text: &str,\n     filename: &str,\n     out: &mut T,\n     config: &Config,\n@@ -88,7 +88,7 @@ where\n     T: Write,\n {\n     fn source_and_formatted_text(\n-        text: &String,\n+        text: &str,\n         filename: &str,\n         config: &Config,\n     ) -> Result<(String, String), io::Error> {\n@@ -103,7 +103,7 @@ where\n \n     fn create_diff(\n         filename: &str,\n-        text: &String,\n+        text: &str,\n         config: &Config,\n     ) -> Result<Vec<Mismatch>, io::Error> {\n         let (ori, fmt) = source_and_formatted_text(text, filename, config)?;"}, {"sha": "53ccd67b79283e84131f5972fccc7a5f2e24f540", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -108,10 +108,10 @@ fn compare_use_trees(a: &ast::UseTree, b: &ast::UseTree, nested: bool) -> Orderi\n fn compare_use_items(context: &RewriteContext, a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n     match (&a.node, &b.node) {\n         (&ast::ItemKind::Use(ref a_tree), &ast::ItemKind::Use(ref b_tree)) => {\n-            Some(compare_use_trees(&a_tree, &b_tree, false))\n+            Some(compare_use_trees(a_tree, b_tree, false))\n         }\n         (&ast::ItemKind::ExternCrate(..), &ast::ItemKind::ExternCrate(..)) => {\n-            Some(context.snippet(a.span).cmp(&context.snippet(b.span)))\n+            Some(context.snippet(a.span).cmp(context.snippet(b.span)))\n         }\n         _ => None,\n     }\n@@ -141,7 +141,7 @@ impl Rewrite for ast::UseTree {\n             ast::UseTreeKind::Glob => {\n                 let prefix_shape = shape.sub_width(3)?;\n \n-                if self.prefix.segments.len() > 0 {\n+                if !self.prefix.segments.is_empty() {\n                     let path_str = rewrite_prefix(&self.prefix, context, prefix_shape)?;\n                     Some(format!(\"{}::*\", path_str))\n                 } else {\n@@ -476,7 +476,7 @@ fn rewrite_nested_use_tree(\n         let mut items = vec![ListItem::from_str(\"\")];\n         let iter = itemize_list(\n             context.codemap,\n-            trees.iter().map(|ref tree| &tree.0),\n+            trees.iter().map(|tree| &tree.0),\n             \"}\",\n             \",\",\n             |tree| tree.span.lo(),"}, {"sha": "7771344f3dbfea382ec6718db566279856d6b132", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -239,8 +239,8 @@ impl<'a> FnSig<'a> {\n }\n \n impl<'a> FmtVisitor<'a> {\n-    fn format_item(&mut self, item: Item) {\n-        self.push_str(&item.abi);\n+    fn format_item(&mut self, item: &Item) {\n+        self.buffer.push_str(&item.abi);\n \n         let snippet = self.snippet(item.span);\n         let brace_pos = snippet.find_uncommented(\"{\").unwrap();\n@@ -279,7 +279,7 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn format_foreign_mod(&mut self, fm: &ast::ForeignMod, span: Span) {\n         let item = Item::from_foreign_mod(fm, span, self.config);\n-        self.format_item(item);\n+        self.format_item(&item);\n     }\n \n     fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n@@ -950,7 +950,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n                 .span_after(item.span, &format!(\"{}\", item.ident));\n             let bound_hi = type_param_bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n-            if contains_comment(&snippet) {\n+            if contains_comment(snippet) {\n                 return None;\n             }\n         }\n@@ -1175,7 +1175,7 @@ pub fn format_struct_struct(\n             result.push('\\n');\n             result.push_str(&offset.to_string(context.config));\n         } else {\n-            result.push_str(&snippet);\n+            result.push_str(snippet);\n         }\n         result.push('}');\n         return Some(result);\n@@ -1307,7 +1307,7 @@ fn format_tuple_struct(\n             result.push('\\n');\n             result.push_str(&offset.to_string(context.config));\n         } else {\n-            result.push_str(&snippet);\n+            result.push_str(snippet);\n         }\n         result.push(')');\n     } else {\n@@ -2718,7 +2718,7 @@ fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> S\n     format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n enum BracePos {\n     None,\n     Auto,"}, {"sha": "9c32e7f62befe3703e9498bbf261f5da808f9ad5", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -144,7 +144,7 @@ pub fn rewrite_macro(\n     };\n \n     let ts: TokenStream = mac.node.stream();\n-    if ts.is_empty() && !contains_comment(&context.snippet(mac.span)) {\n+    if ts.is_empty() && !contains_comment(context.snippet(mac.span)) {\n         return match style {\n             MacroStyle::Parens if position == MacroPosition::Item => {\n                 Some(format!(\"{}();\", macro_name))"}, {"sha": "73ee80dac851370d49c5c69abb92b9b7359be8b0", "filename": "src/summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsummary.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -1,5 +1,5 @@\n #[must_use]\n-#[derive(Debug, Default, Clone)]\n+#[derive(Debug, Default, Clone, Copy)]\n pub struct Summary {\n     // Encountered e.g. an IO error.\n     has_operational_errors: bool,"}, {"sha": "8f6cab0e2dfe9d1ca172566c94abfe450a62dd95", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f15aba154e2cc66b999d0c9613479f4d53275/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=516f15aba154e2cc66b999d0c9613479f4d53275", "patch": "@@ -166,7 +166,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.last_pos,\n                     attr_lo.unwrap_or(first_stmt.span.lo()),\n                 ));\n-                let len = CommentCodeSlices::new(&snippet)\n+                let len = CommentCodeSlices::new(snippet)\n                     .nth(0)\n                     .and_then(|(kind, _, s)| {\n                         if kind == CodeCharKind::Normal {\n@@ -212,7 +212,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     stmt.span.hi(),\n                     source!(self, b.span).hi() - brace_compensation,\n                 ));\n-                let len = CommentCodeSlices::new(&snippet)\n+                let len = CommentCodeSlices::new(snippet)\n                     .last()\n                     .and_then(|(kind, _, s)| {\n                         if kind == CodeCharKind::Normal && s.trim().is_empty() {\n@@ -430,7 +430,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             ast::ItemKind::MacroDef(..) => {\n                 // FIXME(#1539): macros 2.0\n-                let mac_snippet = Some(remove_trailing_white_spaces(&self.snippet(item.span)));\n+                let mac_snippet = Some(remove_trailing_white_spaces(self.snippet(item.span)));\n                 self.push_rewrite(item.span, mac_snippet);\n             }\n         }\n@@ -684,9 +684,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         // Extract leading `use ...;`.\n         let items: Vec<_> = stmts\n             .iter()\n-            .take_while(|stmt| to_stmt_item(stmt).is_some())\n+            .take_while(|stmt| to_stmt_item(stmt).map_or(false, is_use_item))\n             .filter_map(|stmt| to_stmt_item(stmt))\n-            .take_while(|item| is_use_item(item))\n             .collect();\n \n         if items.is_empty() {\n@@ -779,7 +778,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             use_block: false,\n             is_if_else_block: false,\n             force_one_line_chain: false,\n-            snippet_provider: &self.snippet_provider,\n+            snippet_provider: self.snippet_provider,\n         }\n     }\n }\n@@ -888,7 +887,7 @@ where\n             // Extract comments between two attributes.\n             let span_between_attr = mk_sp(attr.span.hi(), next_attr.span.lo());\n             let snippet = context.snippet(span_between_attr);\n-            if count_newlines(&snippet) >= 2 || snippet.contains('/') {\n+            if count_newlines(snippet) >= 2 || snippet.contains('/') {\n                 break;\n             }\n         }\n@@ -974,7 +973,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n             // Preserve an empty line before/after doc comments.\n             if self[0].is_sugared_doc || self[first_group_len].is_sugared_doc {\n                 let snippet = context.snippet(missing_span);\n-                let (mla, mlb) = has_newlines_before_after_comment(&snippet);\n+                let (mla, mlb) = has_newlines_before_after_comment(snippet);\n                 let comment = ::comment::recover_missing_comment_in_span(\n                     missing_span,\n                     shape.with_max_width(context.config),\n@@ -1068,7 +1067,7 @@ fn get_derive_args<'a>(context: &'a RewriteContext, attr: &ast::Attribute) -> Op\n pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Option<String> {\n     assert!(is_extern_crate(item));\n     let new_str = context.snippet(item.span);\n-    Some(if contains_comment(&new_str) {\n+    Some(if contains_comment(new_str) {\n         new_str.to_owned()\n     } else {\n         let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");"}]}