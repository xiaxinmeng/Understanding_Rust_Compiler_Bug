{"sha": "ac4532e16117eff1ecd24597d2dd916196e4efd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDUzMmUxNjExN2VmZjFlY2QyNDU5N2QyZGQ5MTYxOTZlNGVmZDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-02T21:32:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-02T21:32:24Z"}, "message": "use format_input function in tests", "tree": {"sha": "cd3cc851fd825bed2144725f7b1cbe80290f6bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd3cc851fd825bed2144725f7b1cbe80290f6bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac4532e16117eff1ecd24597d2dd916196e4efd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4532e16117eff1ecd24597d2dd916196e4efd9", "html_url": "https://github.com/rust-lang/rust/commit/ac4532e16117eff1ecd24597d2dd916196e4efd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac4532e16117eff1ecd24597d2dd916196e4efd9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "255231d9edf467a6dbcf30f1ce943e750232012e", "url": "https://api.github.com/repos/rust-lang/rust/commits/255231d9edf467a6dbcf30f1ce943e750232012e", "html_url": "https://github.com/rust-lang/rust/commit/255231d9edf467a6dbcf30f1ce943e750232012e"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "396ec030f7cff8b1a515c5816d3e31d2d79f8639", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac4532e16117eff1ecd24597d2dd916196e4efd9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4532e16117eff1ecd24597d2dd916196e4efd9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ac4532e16117eff1ecd24597d2dd916196e4efd9", "patch": "@@ -403,7 +403,7 @@ pub fn format_string(input: String, config: &Config) -> FileMap {\n     file_map\n }\n \n-pub fn format(file: &Path, config: &Config) -> FileMap {\n+fn format(file: &Path, config: &Config) -> FileMap {\n     let codemap = Rc::new(CodeMap::new());\n \n     let tty_handler = Handler::with_tty_emitter(ColorConfig::Auto,\n@@ -428,7 +428,7 @@ pub fn format(file: &Path, config: &Config) -> FileMap {\n     file_map\n }\n \n-fn format_input(input: Input, config: &Config) -> (FileMap, FormatReport) {\n+pub fn format_input(input: Input, config: &Config) -> (FileMap, FormatReport) {\n     let mut file_map = match input {\n         Input::File(ref file) => format(file, config),\n         Input::Text(text) => format_string(text, config),"}, {"sha": "96a9d9b7f924de323c6454023ac45de320f0f18c", "filename": "tests/system.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac4532e16117eff1ecd24597d2dd916196e4efd9/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4532e16117eff1ecd24597d2dd916196e4efd9/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=ac4532e16117eff1ecd24597d2dd916196e4efd9", "patch": "@@ -16,7 +16,7 @@ extern crate term;\n use std::collections::HashMap;\n use std::fs;\n use std::io::{self, Read, BufRead, BufReader};\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n use rustfmt::*;\n use rustfmt::filemap::{write_system_newlines, FileMap};\n@@ -75,7 +75,7 @@ fn checkstyle_test() {\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &str, expected_filename: &str, write_mode: Option<WriteMode>) {\n     let config = read_config(&source, write_mode);\n-    let file_map = run_rustfmt(source.to_string(), &config);\n+    let (file_map, _report) = format_file(source, &config);\n \n     // Populate output by writing to a vec.\n     let mut out = vec![];\n@@ -196,18 +196,17 @@ fn read_config(filename: &str, write_mode: Option<WriteMode>) -> Config {\n     config\n }\n \n-// Simulate run()\n-fn run_rustfmt(filename: String, config: &Config) -> FileMap {\n-    format(Path::new(&filename), &config)\n+fn format_file<P: Into<PathBuf>>(filename: P, config: &Config) -> (FileMap, FormatReport) {\n+    let input = Input::File(filename.into());\n+    format_input(input, &config)\n }\n \n pub fn idempotent_check(filename: String,\n                         write_mode: Option<WriteMode>)\n                         -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n     let config = read_config(&filename, write_mode);\n-    let mut file_map = run_rustfmt(filename, &config);\n-    let format_report = fmt_lines(&mut file_map, &config);\n+    let (file_map, format_report) = format_file(filename, &config);\n \n     let mut write_result = HashMap::new();\n     for (filename, text) in file_map.iter() {"}, {"sha": "12c7dd9fdf1a0e2830645f4e32650d476fc54c1f", "filename": "tests/writemode/checkstyle.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac4532e16117eff1ecd24597d2dd916196e4efd9/tests%2Fwritemode%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/ac4532e16117eff1ecd24597d2dd916196e4efd9/tests%2Fwritemode%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fcheckstyle.xml?ref=ac4532e16117eff1ecd24597d2dd916196e4efd9", "patch": "@@ -1,2 +1,2 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<checkstyle version=\"4.3\"><file name=\"tests/source/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"50\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be ``\" /></file></checkstyle>\n+<checkstyle version=\"4.3\"><file name=\"tests/source/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"50\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /></file></checkstyle>"}]}