{"sha": "15b988aed3d2d4ec761452840ed96b84080c2abc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1Yjk4OGFlZDNkMmQ0ZWM3NjE0NTI4NDBlZDk2Yjg0MDgwYzJhYmM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-26T07:35:34Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-26T07:35:34Z"}, "message": "Allow macro to nested and overflowed like function call", "tree": {"sha": "01b6ad6b88e4bb5ff0162342ebc4c09788626ca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01b6ad6b88e4bb5ff0162342ebc4c09788626ca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b988aed3d2d4ec761452840ed96b84080c2abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b988aed3d2d4ec761452840ed96b84080c2abc", "html_url": "https://github.com/rust-lang/rust/commit/15b988aed3d2d4ec761452840ed96b84080c2abc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b988aed3d2d4ec761452840ed96b84080c2abc/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b748fe8bec300afb4eb6b7923c74152c588a5eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b748fe8bec300afb4eb6b7923c74152c588a5eb8", "html_url": "https://github.com/rust-lang/rust/commit/b748fe8bec300afb4eb6b7923c74152c588a5eb8"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "0abeafaefc21f178a844ad7dad473a1b2541207d", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15b988aed3d2d4ec761452840ed96b84080c2abc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b988aed3d2d4ec761452840ed96b84080c2abc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=15b988aed3d2d4ec761452840ed96b84080c2abc", "patch": "@@ -1772,27 +1772,25 @@ fn rewrite_call_args(context: &RewriteContext,\n         acc + item.item.as_ref().map_or(0, |s| 2 + first_line_width(s))\n     }) <= one_line_budget + 2;\n \n-    match write_list(&item_vec, &fmt) {\n+    let result = write_list(&item_vec, &fmt);\n+    let last_char_is_not_comma = result\n+        .as_ref()\n+        .map_or(false, |r| r.chars().last().unwrap_or(' ') != ',');\n+    match result {\n         // If arguments do not fit in a single line and do not contain newline,\n         // try to put it on the next line. Try this only when we are in block mode\n         // and not rewriting macro.\n         Some(ref s) if context.config.fn_call_style() == IndentStyle::Block &&\n                        !context.inside_macro &&\n-                       ((!can_be_overflowed(context, args) && args.len() == 1 &&\n+                       ((!can_be_overflowed(&context, args) && last_char_is_not_comma &&\n                          s.contains('\\n')) ||\n                         first_line_width(s) > one_line_budget) => {\n             fmt.trailing_separator = SeparatorTactic::Vertical;\n             fmt.tactic = DefinitiveListTactic::Vertical;\n             write_list(&item_vec, &fmt).map(|rw| (false, rw))\n         }\n         rewrite @ _ => {\n-            rewrite.map(|rw| {\n-                            (extendable &&\n-                             rw.chars()\n-                                 .last()\n-                                 .map_or(true, |c| force_trailing_comma || c != ','),\n-                             rw)\n-                        })\n+            rewrite.map(|rw| (extendable && (last_char_is_not_comma || force_trailing_comma), rw))\n         }\n     }\n }\n@@ -1809,6 +1807,7 @@ fn can_be_overflowed(context: &RewriteContext, args: &[ptr::P<ast::Expr>]) -> bo\n             context.config.fn_call_style() == IndentStyle::Visual && args.len() > 1\n         }\n         Some(&ast::ExprKind::Call(..)) |\n+        Some(&ast::ExprKind::Mac(..)) |\n         Some(&ast::ExprKind::Struct(..)) => {\n             context.config.fn_call_style() == IndentStyle::Block && args.len() == 1\n         }\n@@ -1824,6 +1823,7 @@ fn is_extendable(args: &[ptr::P<ast::Expr>]) -> bool {\n             ast::ExprKind::Call(..) |\n             ast::ExprKind::Closure(..) |\n             ast::ExprKind::Match(..) |\n+            ast::ExprKind::Mac(..) |\n             ast::ExprKind::Struct(..) |\n             ast::ExprKind::Tup(..) => true,\n             _ => false,"}]}