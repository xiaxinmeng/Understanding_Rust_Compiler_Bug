{"sha": "a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZmE1NzI5MWIyYTRlOTRkYTAwY2IwNzhmYjdmOWYzMzY2YmM5Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-21T22:57:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-21T22:57:35Z"}, "message": "Auto merge of #37174 - mikhail-m1:dnlle, r=jonathandturner\n\nimprove \"Doesn't live long enough\" error\n\nI've fixed only with same case\n\nissue #36537 part of  #35233\nr? @jonathandturner", "tree": {"sha": "43377501555382813773e5f02efa5d5f16d07c5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43377501555382813773e5f02efa5d5f16d07c5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "html_url": "https://github.com/rust-lang/rust/commit/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5509ae399e4ed6f041b95bf948751f35b7d65517", "url": "https://api.github.com/repos/rust-lang/rust/commits/5509ae399e4ed6f041b95bf948751f35b7d65517", "html_url": "https://github.com/rust-lang/rust/commit/5509ae399e4ed6f041b95bf948751f35b7d65517"}, {"sha": "e85277596e11f3c7d0361f2b66be7eb21ae5fce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e85277596e11f3c7d0361f2b66be7eb21ae5fce3", "html_url": "https://github.com/rust-lang/rust/commit/e85277596e11f3c7d0361f2b66be7eb21ae5fce3"}], "stats": {"total": 809, "additions": 711, "deletions": 98}, "files": [{"sha": "89b12e76c3c182e8b4f0d1d95747d898021effcc", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -1024,13 +1024,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             err_out_of_scope(super_scope, sub_scope, cause) => {\n-                let (value_kind, value_msg) = match err.cmt.cat {\n+                let (value_kind, value_msg, is_temporary) = match err.cmt.cat {\n                     mc::Categorization::Rvalue(_) =>\n-                        (\"temporary value\", \"temporary value created here\"),\n+                        (\"temporary value\", \"temporary value created here\", true),\n                     _ =>\n-                        (\"borrowed value\", \"does not live long enough\")\n+                        (\"borrowed value\", \"does not live long enough\", false)\n                 };\n-                match cause {\n+\n+                let is_closure = match cause {\n                     euv::ClosureCapture(s) => {\n                         // The primary span starts out as the closure creation point.\n                         // Change the primary span here to highlight the use of the variable\n@@ -1041,21 +1042,36 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 db.span = MultiSpan::from_span(s);\n                                 db.span_label(primary, &format!(\"capture occurs here\"));\n                                 db.span_label(s, &value_msg);\n+                                true\n                             }\n-                            None => ()\n+                            None => false\n                         }\n                     }\n                     _ => {\n                         db.span_label(error_span, &value_msg);\n+                        false\n                     }\n-                }\n+                };\n \n                 let sub_span = self.region_end_span(sub_scope);\n                 let super_span = self.region_end_span(super_scope);\n \n                 match (sub_span, super_span) {\n                     (Some(s1), Some(s2)) if s1 == s2 => {\n-                        db.span_label(s1, &format!(\"{} dropped before borrower\", value_kind));\n+                        if !is_temporary && !is_closure {\n+                            db.span = MultiSpan::from_span(s1);\n+                            db.span_label(error_span, &format!(\"borrow occurs here\"));\n+                            let msg = match opt_loan_path(&err.cmt) {\n+                                None => \"borrowed value\".to_string(),\n+                                Some(lp) => {\n+                                    format!(\"`{}`\", self.loan_path_to_string(&lp))\n+                                }\n+                            };\n+                            db.span_label(s1,\n+                                          &format!(\"{} dropped here while still borrowed\", msg));\n+                        } else {\n+                            db.span_label(s1, &format!(\"{} dropped before borrower\", value_kind));\n+                        }\n                         db.note(\"values in a scope are dropped in the opposite order \\\n                                 they are created\");\n                     }"}, {"sha": "bbdc59c84317288c6192bbdb125812b6af3dedef", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -123,5 +123,5 @@ fn f<'a>(arena: &'a TypedArena<C<'a>>) {\n \n fn main() {\n     let arena = TypedArena::new();\n-    f(&arena); //~ ERROR `arena` does not live long enough\n-}\n+    f(&arena);\n+} //~ ERROR `arena` does not live long enough"}, {"sha": "46cb76055745ad97946435443da6d26013bf1a02", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -46,5 +46,6 @@ fn f<'a>(_arena: &'a TypedArena<C<'a>>) {}\n \n fn main() {\n     let arena: TypedArena<C> = TypedArena::new();\n-    f(&arena); //~ ERROR `arena` does not live long enough\n-}\n+    f(&arena);\n+} //~ ERROR `arena` does not live long enough\n+"}, {"sha": "2a4ba22ecc46711cf4cb6f1e06ba5f81eb900c95", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -1,44 +1,44 @@\n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:39:20\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 39 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n-   |                    ^ does not live long enough\n+   |                    - borrow occurs here\n ...\n 55 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:40:20\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 40 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n-   |                    ^ does not live long enough\n+   |                    - borrow occurs here\n ...\n 55 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:47:29\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 47 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n-   |                             ^ does not live long enough\n+   |                             - borrow occurs here\n ...\n 55 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:48:29\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 48 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n-   |                             ^ does not live long enough\n+   |                             - borrow occurs here\n ...\n 55 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "cfcf988f31f7b1295ea73bac6d32b2eb44c554cb", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -1,44 +1,44 @@\n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:57:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 57 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n-   |                    ^ does not live long enough\n+   |                    - borrow occurs here\n ...\n 73 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:58:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 58 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n-   |                    ^ does not live long enough\n+   |                    - borrow occurs here\n ...\n 73 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:65:29\n+  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 65 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n-   |                             ^ does not live long enough\n+   |                             - borrow occurs here\n ...\n 73 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:66:29\n+  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 66 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n-   |                             ^ does not live long enough\n+   |                             - borrow occurs here\n ...\n 73 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "cd420756b444c81f207a8785b121e04637cf9dd1", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -1,44 +1,44 @@\n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:80:20\n+  --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 80 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n-   |                    ^ does not live long enough\n+   |                    - borrow occurs here\n ...\n 96 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:81:20\n+  --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 81 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n-   |                    ^ does not live long enough\n+   |                    - borrow occurs here\n ...\n 96 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:88:29\n+  --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 88 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n-   |                             ^ does not live long enough\n+   |                             - borrow occurs here\n ...\n 96 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:89:29\n+  --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 89 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n-   |                             ^ does not live long enough\n+   |                             - borrow occurs here\n ...\n 96 | }\n-   | - borrowed value dropped before borrower\n+   | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "1206d7166726451ea5725ee4a8777e21e5a62532", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -17,9 +17,7 @@ fn f() {\n     let young = ['y'];       // statement 3\n \n     v2.push(&young[0]);      // statement 4\n-    //~^ ERROR `young[..]` does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE values in a scope are dropped in the opposite order they are created\n+    //~^ NOTE borrow occurs here\n \n     let mut v3 = Vec::new(); // statement 5\n \n@@ -52,7 +50,9 @@ fn f() {\n \n     v1.push(&old[0]);\n }\n-//~^ NOTE borrowed value dropped before borrower\n+//~^ ERROR `young[..]` does not live long enough\n+//~| NOTE `young[..]` dropped here while still borrowed\n+//~| NOTE values in a scope are dropped in the opposite order they are created\n //~| NOTE temporary value needs to live until here\n //~| NOTE temporary value needs to live until here\n ", "previous_filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion-suffixes.rs"}, {"sha": "0bba986e437b397f765d047bb7323c37a82a135a", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,52 @@\n+error: `young[..]` does not live long enough\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:52:1\n+   |\n+19 |     v2.push(&young[0]);      // statement 4\n+   |              -------- borrow occurs here\n+...\n+52 | }\n+   | ^ `young[..]` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:24:14\n+   |\n+24 |     v3.push(&'x');           // statement 6\n+   |              ^^^ - temporary value only lives until here\n+   |              |\n+   |              temporary value created here\n+...\n+52 | }\n+   | - temporary value needs to live until here\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:34:18\n+   |\n+34 |         v4.push(&'y');\n+   |                  ^^^ - temporary value only lives until here\n+   |                  |\n+   |                  temporary value created here\n+...\n+40 |     }                       // (statement 7)\n+   |     - temporary value needs to live until here\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:45:14\n+   |\n+45 |     v5.push(&'z');\n+   |              ^^^ - temporary value only lives until here\n+   |              |\n+   |              temporary value created here\n+...\n+52 | }\n+   | - temporary value needs to live until here\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ce9bc17432ef99006cd4da40bd757f4f3d90831e", "filename": "src/test/ui/span/dropck-object-cycle.rs", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -35,7 +35,7 @@ impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n pub fn main() {\n     let m : Box<Trait+'static> = make_val();\n     assert_eq!(object_invoke1(&*m), (4,5));\n-    //~^ ERROR `*m` does not live long enough\n+    //~^ NOTE borrow occurs here\n \n     // the problem here is that the full type of `m` is\n     //\n@@ -55,3 +55,7 @@ pub fn main() {\n     // the type of `m` *strictly outlives* `'m`. Hence we get an\n     // error.\n }\n+//~^ ERROR `*m` does not live long enough\n+//~| NOTE `*m` dropped here while still borrowed\n+//~| NOTE values in a scope are dropped in the opposite order they are created\n+", "previous_filename": "src/test/compile-fail/dropck-object-cycle.rs"}, {"sha": "e31c36e83dfca125be3a54c98553ddf525b033d7", "filename": "src/test/ui/span/dropck-object-cycle.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,13 @@\n+error: `*m` does not live long enough\n+  --> $DIR/dropck-object-cycle.rs:57:1\n+   |\n+37 |     assert_eq!(object_invoke1(&*m), (4,5));\n+   |                                -- borrow occurs here\n+...\n+57 | }\n+   | ^ `*m` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+"}, {"sha": "8e8b3c24c76b083c62a4c4ffa7ef11730bf222bd", "filename": "src/test/ui/span/dropck_arr_cycle_checked.rs", "status": "renamed", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -100,13 +100,19 @@ fn f() {\n     b1 = B::new();\n     b2 = B::new();\n     b3 = B::new();\n-    b1.a[0].v.set(Some(&b2)); //~ ERROR `b2` does not live long enough\n-    b1.a[1].v.set(Some(&b3)); //~ ERROR `b3` does not live long enough\n-    b2.a[0].v.set(Some(&b2)); //~ ERROR `b2` does not live long enough\n-    b2.a[1].v.set(Some(&b3)); //~ ERROR `b3` does not live long enough\n-    b3.a[0].v.set(Some(&b1)); //~ ERROR `b1` does not live long enough\n-    b3.a[1].v.set(Some(&b2)); //~ ERROR `b2` does not live long enough\n+    b1.a[0].v.set(Some(&b2));\n+    b1.a[1].v.set(Some(&b3));\n+    b2.a[0].v.set(Some(&b2));\n+    b2.a[1].v.set(Some(&b3));\n+    b3.a[0].v.set(Some(&b1));\n+    b3.a[1].v.set(Some(&b2));\n }\n+//~^ ERROR `b2` does not live long enough\n+//~| ERROR `b3` does not live long enough\n+//~| ERROR `b2` does not live long enough\n+//~| ERROR `b3` does not live long enough\n+//~| ERROR `b1` does not live long enough\n+//~| ERROR `b2` does not live long enough\n \n fn main() {\n     f();", "previous_filename": "src/test/compile-fail/dropck_arr_cycle_checked.rs"}, {"sha": "c89da0baef233925862e37f6ca69e28c99a0701e", "filename": "src/test/ui/span/dropck_arr_cycle_checked.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,67 @@\n+error: `b2` does not live long enough\n+   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+    |\n+103 |     b1.a[0].v.set(Some(&b2));\n+    |                         -- borrow occurs here\n+...\n+109 | }\n+    | ^ `b2` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `b3` does not live long enough\n+   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+    |\n+104 |     b1.a[1].v.set(Some(&b3));\n+    |                         -- borrow occurs here\n+...\n+109 | }\n+    | ^ `b3` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `b2` does not live long enough\n+   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+    |\n+105 |     b2.a[0].v.set(Some(&b2));\n+    |                         -- borrow occurs here\n+...\n+109 | }\n+    | ^ `b2` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `b3` does not live long enough\n+   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+    |\n+106 |     b2.a[1].v.set(Some(&b3));\n+    |                         -- borrow occurs here\n+...\n+109 | }\n+    | ^ `b3` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `b1` does not live long enough\n+   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+    |\n+107 |     b3.a[0].v.set(Some(&b1));\n+    |                         -- borrow occurs here\n+108 |     b3.a[1].v.set(Some(&b2));\n+109 | }\n+    | ^ `b1` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `b2` does not live long enough\n+   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+    |\n+108 |     b3.a[1].v.set(Some(&b2));\n+    |                         -- borrow occurs here\n+109 | }\n+    | ^ `b2` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "6d13dfc7a794f794c8386997d9cd88418a197d59", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -43,9 +43,11 @@ impl<'a> Drop for D<'a> {\n \n fn g() {\n     let (d1, d2) = (D::new(format!(\"d1\")), D::new(format!(\"d2\")));\n-    d1.p.set(Some(&d2)); //~ ERROR `d2` does not live long enough\n-    d2.p.set(Some(&d1)); //~ ERROR `d1` does not live long enough\n+    d1.p.set(Some(&d2));\n+    d2.p.set(Some(&d1));\n }\n+//~^ ERROR `d2` does not live long enough\n+//~| ERROR `d1` does not live long enough\n \n fn main() {\n     g();", "previous_filename": "src/test/compile-fail/dropck_direct_cycle_with_drop.rs"}, {"sha": "9eb2a2157717025f3cc7b88f22940b5c4e3b1c91", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,23 @@\n+error: `d2` does not live long enough\n+  --> $DIR/dropck_direct_cycle_with_drop.rs:48:1\n+   |\n+46 |     d1.p.set(Some(&d2));\n+   |                    -- borrow occurs here\n+47 |     d2.p.set(Some(&d1));\n+48 | }\n+   | ^ `d2` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `d1` does not live long enough\n+  --> $DIR/dropck_direct_cycle_with_drop.rs:48:1\n+   |\n+47 |     d2.p.set(Some(&d1));\n+   |                    -- borrow occurs here\n+48 | }\n+   | ^ `d1` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7b94eb10dfc6ee61e996559f4017dd883dd3e31d", "filename": "src/test/ui/span/dropck_misc_variants.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -31,17 +31,17 @@ fn projection() {\n     let (_w, bomb);\n     bomb = vec![\"\"];\n     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n-    //~^ ERROR `bomb` does not live long enough\n }\n+//~^ ERROR `bomb` does not live long enough\n \n fn closure() {\n     let (_w,v);\n     v = vec![\"\"];\n     _w = {\n         let u = NoisyDrop(&v);\n-        //~^ ERROR `v` does not live long enough\n         move || u.0.len()\n     };\n }\n+//~^ ERROR `v` does not live long enough\n \n fn main() { closure(); projection() }", "previous_filename": "src/test/compile-fail/dropck_misc_variants.rs"}, {"sha": "98c1cbbba7b3fa160e5bcf8c0b1f75b9d91551b0", "filename": "src/test/ui/span/dropck_misc_variants.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,23 @@\n+error: `bomb` does not live long enough\n+  --> $DIR/dropck_misc_variants.rs:34:1\n+   |\n+33 |     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n+   |                                     ---- borrow occurs here\n+34 | }\n+   | ^ `bomb` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `v` does not live long enough\n+  --> $DIR/dropck_misc_variants.rs:44:1\n+   |\n+41 |         let u = NoisyDrop(&v);\n+   |                            - borrow occurs here\n+...\n+44 | }\n+   | ^ `v` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "65db2a56b7d819a2d8c0e9312430bea8167d1198", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "renamed", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -107,13 +107,19 @@ fn f() {\n     c3.v.push(CheckId(Cell::new(None)));\n     c3.v.push(CheckId(Cell::new(None)));\n \n-    c1.v[0].v.set(Some(&c2)); //~ ERROR `c2` does not live long enough\n-    c1.v[1].v.set(Some(&c3)); //~ ERROR `c3` does not live long enough\n-    c2.v[0].v.set(Some(&c2)); //~ ERROR `c2` does not live long enough\n-    c2.v[1].v.set(Some(&c3)); //~ ERROR `c3` does not live long enough\n-    c3.v[0].v.set(Some(&c1)); //~ ERROR `c1` does not live long enough\n-    c3.v[1].v.set(Some(&c2)); //~ ERROR `c2` does not live long enough\n+    c1.v[0].v.set(Some(&c2));\n+    c1.v[1].v.set(Some(&c3));\n+    c2.v[0].v.set(Some(&c2));\n+    c2.v[1].v.set(Some(&c3));\n+    c3.v[0].v.set(Some(&c1));\n+    c3.v[1].v.set(Some(&c2));\n }\n+//~^ ERROR `c2` does not live long enough\n+//~| ERROR `c3` does not live long enough\n+//~| ERROR `c2` does not live long enough\n+//~| ERROR `c3` does not live long enough\n+//~| ERROR `c1` does not live long enough\n+//~| ERROR `c2` does not live long enough\n \n fn main() {\n     f();", "previous_filename": "src/test/compile-fail/dropck_vec_cycle_checked.rs"}, {"sha": "961ac81cf8280dea57688362c8c7762d30bea1d2", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,67 @@\n+error: `c2` does not live long enough\n+   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+    |\n+110 |     c1.v[0].v.set(Some(&c2));\n+    |                         -- borrow occurs here\n+...\n+116 | }\n+    | ^ `c2` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `c3` does not live long enough\n+   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+    |\n+111 |     c1.v[1].v.set(Some(&c3));\n+    |                         -- borrow occurs here\n+...\n+116 | }\n+    | ^ `c3` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `c2` does not live long enough\n+   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+    |\n+112 |     c2.v[0].v.set(Some(&c2));\n+    |                         -- borrow occurs here\n+...\n+116 | }\n+    | ^ `c2` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `c3` does not live long enough\n+   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+    |\n+113 |     c2.v[1].v.set(Some(&c3));\n+    |                         -- borrow occurs here\n+...\n+116 | }\n+    | ^ `c3` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `c1` does not live long enough\n+   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+    |\n+114 |     c3.v[0].v.set(Some(&c1));\n+    |                         -- borrow occurs here\n+115 |     c3.v[1].v.set(Some(&c2));\n+116 | }\n+    | ^ `c1` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `c2` does not live long enough\n+   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+    |\n+115 |     c3.v[1].v.set(Some(&c2));\n+    |                         -- borrow occurs here\n+116 | }\n+    | ^ `c2` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "a04edd99b8b6b881bd2707868cd9c65918087f12", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -17,8 +17,9 @@ use std::cell::RefCell;\n \n fn foo(x: RefCell<String>) -> String {\n     let y = x;\n-    y.borrow().clone() //~ ERROR `y` does not live long enough\n+    y.borrow().clone()\n }\n+//~^ ERROR `y` does not live long enough\n \n fn foo2(x: RefCell<String>) -> String {\n     let ret = {", "previous_filename": "src/test/compile-fail/issue-23338-locals-die-before-temps-of-body.rs"}, {"sha": "f10ba0bf2210f2fe1aac312149ce712758f4bb91", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,22 @@\n+error: `y` does not live long enough\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:21:1\n+   |\n+20 |     y.borrow().clone()\n+   |     - borrow occurs here\n+21 | }\n+   | ^ `y` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `y` does not live long enough\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n+   |\n+27 |         y.borrow().clone() //~ ERROR `y` does not live long enough\n+   |         ^ does not live long enough\n+28 |     };\n+   |     -- borrowed value needs to live until here\n+   |     |\n+   |     borrowed value only lives until here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "acd363fc6b05237417a39722481f332d1870bb19", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -35,11 +35,12 @@ fn f_child() {\n \n     d1 = D_Child(1);\n     // ... we store a reference to `d1` within `_d` ...\n-    _d = D_Child(&d1); //~ ERROR `d1` does not live long enough\n+    _d = D_Child(&d1);\n \n     // ... dropck *should* complain, because Drop of _d could (and\n     // does) access the already dropped `d1` via the `foo` method.\n }\n+//~^ ERROR `d1` does not live long enough\n \n fn main() {\n     f_child();", "previous_filename": "src/test/compile-fail/issue-24805-dropck-child-has-items-via-parent.rs"}, {"sha": "a622e7cfb7180972bd31b0688a4d90eba4f3ceef", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,13 @@\n+error: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-child-has-items-via-parent.rs:42:1\n+   |\n+38 |     _d = D_Child(&d1);\n+   |                   -- borrow occurs here\n+...\n+42 | }\n+   | ^ `d1` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+"}, {"sha": "3deb71411e84f810b79db69150bc75d4ce05173a", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -44,18 +44,21 @@ impl_drop!{HasType,              D_HasType}\n fn f_sm() {\n     let (_d, d1);\n     d1 = D_HasSelfMethod(1);\n-    _d = D_HasSelfMethod(&d1); //~ ERROR `d1` does not live long enough\n+    _d = D_HasSelfMethod(&d1);\n }\n+//~^ ERROR `d1` does not live long enough\n fn f_mwsa() {\n     let (_d, d1);\n     d1 = D_HasMethodWithSelfArg(1);\n-    _d = D_HasMethodWithSelfArg(&d1); //~ ERROR `d1` does not live long enough\n+    _d = D_HasMethodWithSelfArg(&d1);\n }\n+//~^ ERROR `d1` does not live long enough\n fn f_t() {\n     let (_d, d1);\n     d1 = D_HasType(1);\n-    _d = D_HasType(&d1); //~ ERROR `d1` does not live long enough\n+    _d = D_HasType(&d1);\n }\n+//~^ ERROR `d1` does not live long enough\n \n fn main() {\n     f_sm();", "previous_filename": "src/test/compile-fail/issue-24805-dropck-trait-has-items.rs"}, {"sha": "d06c8af62ee60938c17c56085acce300e9bc9ece", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,32 @@\n+error: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:48:1\n+   |\n+47 |     _d = D_HasSelfMethod(&d1);\n+   |                           -- borrow occurs here\n+48 | }\n+   | ^ `d1` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:54:1\n+   |\n+53 |     _d = D_HasMethodWithSelfArg(&d1);\n+   |                                  -- borrow occurs here\n+54 | }\n+   | ^ `d1` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:60:1\n+   |\n+59 |     _d = D_HasType(&d1);\n+   |                     -- borrow occurs here\n+60 | }\n+   | ^ `d1` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a4207eb0aa949f433eb1f5b8a7235f2d38c875ba", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -34,5 +34,5 @@ impl<T:Copy> Drop for D<T> {\n fn main() {\n     let (d2, d1);\n     d1 = D(34, \"d1\");\n-    d2 = D(S(&d1, \"inner\"), \"d2\"); //~ ERROR `d1` does not live long enough\n-}\n+    d2 = D(S(&d1, \"inner\"), \"d2\");\n+} //~ ERROR `d1` does not live long enough", "previous_filename": "src/test/compile-fail/issue-24895-copy-clone-dropck.rs"}, {"sha": "160bfb63900454cc091e62e6356edb0ecde5971b", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,12 @@\n+error: `d1` does not live long enough\n+  --> $DIR/issue-24895-copy-clone-dropck.rs:38:1\n+   |\n+37 |     d2 = D(S(&d1, \"inner\"), \"d2\");\n+   |               -- borrow occurs here\n+38 | } //~ ERROR `d1` does not live long enough\n+   | ^ `d1` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+"}, {"sha": "b88c58c29ac3d90fd6dc1af227c274ca28ccdc50", "filename": "src/test/ui/span/issue-25199.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-25199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-25199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -77,7 +77,9 @@ impl<'a> Drop for Test<'a> {\n \n fn main() {\n     let container = Container::new();\n-    let test = Test{test: &container}; //~ ERROR `container` does not live long enough\n+    let test = Test{test: &container};\n     println!(\"container.v[30]: {:?}\", container.v.v[30]);\n-    container.store(test); //~ ERROR `container` does not live long enough\n+    container.store(test);\n }\n+//~^ ERROR `container` does not live long enough\n+//~| ERROR `container` does not live long enough", "previous_filename": "src/test/compile-fail/issue-25199.rs"}, {"sha": "3c8ee07a1fdd88beae1b1a395bc2666bb2e9665b", "filename": "src/test/ui/span/issue-25199.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,23 @@\n+error: `container` does not live long enough\n+  --> $DIR/issue-25199.rs:83:1\n+   |\n+80 |     let test = Test{test: &container};\n+   |                            --------- borrow occurs here\n+...\n+83 | }\n+   | ^ `container` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `container` does not live long enough\n+  --> $DIR/issue-25199.rs:83:1\n+   |\n+82 |     container.store(test);\n+   |     --------- borrow occurs here\n+83 | }\n+   | ^ `container` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "621da477ddcbf78a52757fb50d02300190db90bf", "filename": "src/test/ui/span/issue-26656.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-26656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-26656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -48,5 +48,5 @@ fn main() {\n                   trigger: Box::new(()) };\n     ticking = Bomb { usable: true };\n     zook.button = B::BigRedButton(&ticking);\n-    //~^ ERROR `ticking` does not live long enough\n }\n+//~^ ERROR `ticking` does not live long enough", "previous_filename": "src/test/compile-fail/issue-26656.rs"}, {"sha": "f960844c818ff7a2b08c9de2661bdfc5e3713749", "filename": "src/test/ui/span/issue-26656.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,12 @@\n+error: `ticking` does not live long enough\n+  --> $DIR/issue-26656.rs:51:1\n+   |\n+50 |     zook.button = B::BigRedButton(&ticking);\n+   |                                    ------- borrow occurs here\n+51 | }\n+   | ^ `ticking` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d28c64f264c90cfc38e99f32a5a5716c7429af7", "filename": "src/test/ui/span/issue-29106.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-29106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-29106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -23,12 +23,12 @@ fn main() {\n     {\n         let (y, x);\n         x = \"alive\".to_string();\n-        y = Arc::new(Foo(&x)); //~ ERROR `x` does not live long enough\n-    }\n+        y = Arc::new(Foo(&x));\n+    } //~ ERROR `x` does not live long enough\n \n     {\n         let (y, x);\n         x = \"alive\".to_string();\n-        y = Rc::new(Foo(&x)); //~ ERROR `x` does not live long enough\n-    }\n+        y = Rc::new(Foo(&x));\n+    } //~ ERROR `x` does not live long enough\n }", "previous_filename": "src/test/compile-fail/issue-29106.rs"}, {"sha": "a7d3b84daba469b841d95c1361d678c9866b8a14", "filename": "src/test/ui/span/issue-29106.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,22 @@\n+error: `x` does not live long enough\n+  --> $DIR/issue-29106.rs:27:5\n+   |\n+26 |         y = Arc::new(Foo(&x));\n+   |                           - borrow occurs here\n+27 |     } //~ ERROR `x` does not live long enough\n+   |     ^ `x` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `x` does not live long enough\n+  --> $DIR/issue-29106.rs:33:5\n+   |\n+32 |         y = Rc::new(Foo(&x));\n+   |                          - borrow occurs here\n+33 |     } //~ ERROR `x` does not live long enough\n+   |     ^ `x` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "33182e02fa3c44618099b9b2b4c343677e0d983c", "filename": "src/test/ui/span/issue-36537.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let p;\n+    let a = 42;\n+    p = &a; //~ NOTE borrow occurs here\n+}\n+//~^ ERROR `a` does not live long enough\n+//~| NOTE `a` dropped here while still borrowed\n+//~| NOTE values in a scope are dropped in the opposite order they are created"}, {"sha": "a335194580d4553a9d35256cb41fb99c7e64ad19", "filename": "src/test/ui/span/issue-36537.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,12 @@\n+error: `a` does not live long enough\n+  --> $DIR/issue-36537.rs:15:1\n+   |\n+14 |     p = &a; //~ NOTE borrow occurs here\n+   |          - borrow occurs here\n+15 | }\n+   | ^ `a` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+"}, {"sha": "bed768005bf6991f85980115fad1f9e2cd6298d4", "filename": "src/test/ui/span/issue28498-reject-ex1.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -42,7 +42,7 @@ fn main() {\n     foo.data.push(Concrete(0, Cell::new(None)));\n \n     foo.data[0].1.set(Some(&foo.data[1]));\n-    //~^ ERROR `foo.data` does not live long enough\n     foo.data[1].1.set(Some(&foo.data[0]));\n-    //~^ ERROR `foo.data` does not live long enough\n }\n+//~^ ERROR `foo.data` does not live long enough\n+//~| ERROR `foo.data` does not live long enough", "previous_filename": "src/test/compile-fail/issue28498-reject-ex1.rs"}, {"sha": "b5fbe99ec72e8ac9fd8824e0b8c5dfce6865e75d", "filename": "src/test/ui/span/issue28498-reject-ex1.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,23 @@\n+error: `foo.data` does not live long enough\n+  --> $DIR/issue28498-reject-ex1.rs:46:1\n+   |\n+44 |     foo.data[0].1.set(Some(&foo.data[1]));\n+   |                             -------- borrow occurs here\n+45 |     foo.data[1].1.set(Some(&foo.data[0]));\n+46 | }\n+   | ^ `foo.data` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `foo.data` does not live long enough\n+  --> $DIR/issue28498-reject-ex1.rs:46:1\n+   |\n+45 |     foo.data[1].1.set(Some(&foo.data[0]));\n+   |                             -------- borrow occurs here\n+46 | }\n+   | ^ `foo.data` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7e7893ac3c8641d98a5293c40c7c06103d891388", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -40,9 +40,9 @@ fn main() {\n     last_dropped = ScribbleOnDrop(format!(\"last\"));\n     first_dropped = ScribbleOnDrop(format!(\"first\"));\n     foo0 = Foo(0, &last_dropped);\n-    //~^ ERROR `last_dropped` does not live long enough\n     foo1 = Foo(1, &first_dropped);\n-    //~^ ERROR `first_dropped` does not live long enough\n \n     println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n }\n+//~^ ERROR `last_dropped` does not live long enough\n+//~| ERROR `first_dropped` does not live long enough", "previous_filename": "src/test/compile-fail/issue28498-reject-lifetime-param.rs"}, {"sha": "debb8354568cc453c6d720faa0d65f6e30d6f306", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,24 @@\n+error: `last_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-lifetime-param.rs:46:1\n+   |\n+42 |     foo0 = Foo(0, &last_dropped);\n+   |                    ------------ borrow occurs here\n+...\n+46 | }\n+   | ^ `last_dropped` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `first_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-lifetime-param.rs:46:1\n+   |\n+43 |     foo1 = Foo(1, &first_dropped);\n+   |                    ------------- borrow occurs here\n+...\n+46 | }\n+   | ^ `first_dropped` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "54fc20b62f25af435f401971ee96ff0560f65d82", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -42,9 +42,9 @@ fn main() {\n     last_dropped = ScribbleOnDrop(format!(\"last\"));\n     first_dropped = ScribbleOnDrop(format!(\"first\"));\n     foo0 = Foo(0, &last_dropped, Box::new(callback));\n-    //~^ ERROR `last_dropped` does not live long enough\n     foo1 = Foo(1, &first_dropped, Box::new(callback));\n-    //~^ ERROR `first_dropped` does not live long enough\n \n     println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n }\n+//~^ ERROR `last_dropped` does not live long enough\n+//~| ERROR `first_dropped` does not live long enough", "previous_filename": "src/test/compile-fail/issue28498-reject-passed-to-fn.rs"}, {"sha": "7d3ac3e9d0391ab6d69c82e4e562ba7c3da52bc2", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,24 @@\n+error: `last_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-passed-to-fn.rs:48:1\n+   |\n+44 |     foo0 = Foo(0, &last_dropped, Box::new(callback));\n+   |                    ------------ borrow occurs here\n+...\n+48 | }\n+   | ^ `last_dropped` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `first_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-passed-to-fn.rs:48:1\n+   |\n+45 |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n+   |                    ------------- borrow occurs here\n+...\n+48 | }\n+   | ^ `first_dropped` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6164beaf858dd50d40b882d9c0b7d029b833531f", "filename": "src/test/ui/span/issue28498-reject-trait-bound.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -42,9 +42,9 @@ fn main() {\n     last_dropped = ScribbleOnDrop(format!(\"last\"));\n     first_dropped = ScribbleOnDrop(format!(\"first\"));\n     foo0 = Foo(0, &last_dropped);\n-    //~^ ERROR `last_dropped` does not live long enough\n     foo1 = Foo(1, &first_dropped);\n-    //~^ ERROR `first_dropped` does not live long enough\n \n     println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n }\n+//~^ ERROR `last_dropped` does not live long enough\n+//~| ERROR `first_dropped` does not live long enough", "previous_filename": "src/test/compile-fail/issue28498-reject-trait-bound.rs"}, {"sha": "ae96cace91c476a4345f009462166878c09ea709", "filename": "src/test/ui/span/issue28498-reject-trait-bound.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,24 @@\n+error: `last_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-trait-bound.rs:48:1\n+   |\n+44 |     foo0 = Foo(0, &last_dropped);\n+   |                    ------------ borrow occurs here\n+...\n+48 | }\n+   | ^ `last_dropped` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `first_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-trait-bound.rs:48:1\n+   |\n+45 |     foo1 = Foo(1, &first_dropped);\n+   |                    ------------- borrow occurs here\n+...\n+48 | }\n+   | ^ `first_dropped` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a4b951daab439f5fcdfab891dc414cbc8aa18142", "filename": "src/test/ui/span/loan-extend.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Floan-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Floan-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Floan-extend.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -17,7 +17,8 @@ fn main() {\n     let long;\n     let mut short = 0;\n     long = borrow(&mut short);\n-    //~^ ERROR `short` does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE values in a scope are dropped in the opposite order they are created\n-} //~ borrowed value dropped before borrower\n+    //~^ NOTE borrow occurs here\n+}\n+//~^ ERROR `short` does not live long enough\n+//~| NOTE `short` dropped here while still borrowed\n+//~| NOTE values in a scope are dropped in the opposite order they are created", "previous_filename": "src/test/compile-fail/impl-trait/loan-extend.rs"}, {"sha": "b0f191e29d1be02da29d0039aedac4fa302514ca", "filename": "src/test/ui/span/loan-extend.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,13 @@\n+error: `short` does not live long enough\n+  --> $DIR/loan-extend.rs:21:1\n+   |\n+19 |     long = borrow(&mut short);\n+   |                        ----- borrow occurs here\n+20 |     //~^ NOTE borrow occurs here\n+21 | }\n+   | ^ `short` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+"}, {"sha": "310ab20489a35b84ea2eb6b6f238a4791da77a04", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -124,9 +124,11 @@ fn f() {\n \n     c1.v.push(CheckId(Cell::new(None)));\n     c2.v.push(CheckId(Cell::new(None)));\n-    c1.v[0].v.set(Some(&c2)); //~ ERROR `c2` does not live long enough\n-    c2.v[0].v.set(Some(&c1)); //~ ERROR `c1` does not live long enough\n+    c1.v[0].v.set(Some(&c2));\n+    c2.v[0].v.set(Some(&c1));\n }\n+//~^ ERROR `c2` does not live long enough\n+//~| ERROR `c1` does not live long enough\n \n fn main() {\n     f();", "previous_filename": "src/test/compile-fail/vec-must-not-hide-type-from-dropck.rs"}, {"sha": "11031ee0ab263251655c69c2336430847e7173bf", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,23 @@\n+error: `c2` does not live long enough\n+   --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:1\n+    |\n+127 |     c1.v[0].v.set(Some(&c2));\n+    |                         -- borrow occurs here\n+128 |     c2.v[0].v.set(Some(&c1));\n+129 | }\n+    | ^ `c2` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `c1` does not live long enough\n+   --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:1\n+    |\n+128 |     c2.v[0].v.set(Some(&c1));\n+    |                         -- borrow occurs here\n+129 | }\n+    | ^ `c1` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f40a25920bf3a9ec658861461106ab71280bc454", "filename": "src/test/ui/span/vec_refs_data_with_early_death.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -24,8 +24,10 @@ fn main() {\n     let x: i8 = 3;\n     let y: i8 = 4;\n \n-    v.push(&x); //~ ERROR `x` does not live long enough\n-    v.push(&y); //~ ERROR `y` does not live long enough\n+    v.push(&x);\n+    v.push(&y);\n \n     assert_eq!(v, [&3, &4]);\n }\n+//~^ ERROR `x` does not live long enough\n+//~| ERROR `y` does not live long enough", "previous_filename": "src/test/compile-fail/vec_refs_data_with_early_death.rs"}, {"sha": "8cc12c32b9303f0eee2c17c2e4d19f16fe2e5990", "filename": "src/test/ui/span/vec_refs_data_with_early_death.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr?ref=a6fa57291b2a4e94da00cb078fb7f9f3366bc9cb", "patch": "@@ -0,0 +1,24 @@\n+error: `x` does not live long enough\n+  --> $DIR/vec_refs_data_with_early_death.rs:31:1\n+   |\n+27 |     v.push(&x);\n+   |             - borrow occurs here\n+...\n+31 | }\n+   | ^ `x` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: `y` does not live long enough\n+  --> $DIR/vec_refs_data_with_early_death.rs:31:1\n+   |\n+28 |     v.push(&y);\n+   |             - borrow occurs here\n+...\n+31 | }\n+   | ^ `y` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 2 previous errors\n+"}]}