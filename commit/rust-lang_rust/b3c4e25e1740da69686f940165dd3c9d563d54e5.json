{"sha": "b3c4e25e1740da69686f940165dd3c9d563d54e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYzRlMjVlMTc0MGRhNjk2ODZmOTQwMTY1ZGQzYzlkNTYzZDU0ZTU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-22T14:31:41Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-04T16:30:38Z"}, "message": "Don't require a `DocContext` for `report_diagnostic`\n\nThis is needed for the next commit, which needs access to the `cx` from\nwithin the `decorate` closure.\n\n- Change `as_local_hir_id` to an associated function, since it only\n  needs a `TyCtxt`\n- Change `source_span_for_markdown_range` to only take a `TyCtxt`", "tree": {"sha": "106197b3bd1c72f5389fb408cec3435e03560bf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/106197b3bd1c72f5389fb408cec3435e03560bf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3c4e25e1740da69686f940165dd3c9d563d54e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c4e25e1740da69686f940165dd3c9d563d54e5", "html_url": "https://github.com/rust-lang/rust/commit/b3c4e25e1740da69686f940165dd3c9d563d54e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3c4e25e1740da69686f940165dd3c9d563d54e5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7f258d543e1ac7d0b94435972331e85da8c509", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f258d543e1ac7d0b94435972331e85da8c509", "html_url": "https://github.com/rust-lang/rust/commit/ec7f258d543e1ac7d0b94435972331e85da8c509"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "5ff50e2538050d4a293e539ace76d7eb3b006dc5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b3c4e25e1740da69686f940165dd3c9d563d54e5", "patch": "@@ -169,13 +169,13 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Like `hir().local_def_id_to_hir_id()`, but skips calling it on fake DefIds.\n     /// (This avoids a slice-index-out-of-bounds panic.)\n-    crate fn as_local_hir_id(&self, def_id: DefId) -> Option<HirId> {\n+    crate fn as_local_hir_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<HirId> {\n         if MAX_DEF_IDX.with(|m| {\n             m.borrow().get(&def_id.krate).map(|&idx| idx <= def_id.index).unwrap_or(false)\n         }) {\n             None\n         } else {\n-            def_id.as_local().map(|def_id| self.tcx.hir().local_def_id_to_hir_id(def_id))\n+            def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n         }\n     }\n }\n@@ -479,7 +479,7 @@ crate fn run_global_ctxt(\n                 https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\";\n             tcx.struct_lint_node(\n                 crate::lint::MISSING_CRATE_LEVEL_DOCS,\n-                ctxt.as_local_hir_id(m.def_id).unwrap(),\n+                DocContext::as_local_hir_id(tcx, m.def_id).unwrap(),\n                 |lint| {\n                     let mut diag =\n                         lint.build(\"no documentation found for this crate's top-level module\");"}, {"sha": "98886139f30882bf45efaf803eab359e03d54180", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=b3c4e25e1740da69686f940165dd3c9d563d54e5", "patch": "@@ -48,9 +48,12 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n         let buffer = buffer.borrow();\n \n         if buffer.has_errors || is_empty {\n-            let mut diag = if let Some(sp) =\n-                super::source_span_for_markdown_range(self.cx, &dox, &code_block.range, &item.attrs)\n-            {\n+            let mut diag = if let Some(sp) = super::source_span_for_markdown_range(\n+                self.cx.tcx,\n+                &dox,\n+                &code_block.range,\n+                &item.attrs,\n+            ) {\n                 let (warning_message, suggest_using_text) = if buffer.has_errors {\n                     (\"could not parse code block as Rust code\", true)\n                 } else {"}, {"sha": "93aa069593694bb4025d329506fdfa24ae39c1eb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b3c4e25e1740da69686f940165dd3c9d563d54e5", "patch": "@@ -1146,7 +1146,7 @@ impl LinkCollector<'_, '_> {\n                 suggest_disambiguator(resolved, diag, path_str, dox, sp, &ori_link.range);\n             };\n             report_diagnostic(\n-                self.cx,\n+                self.cx.tcx,\n                 BROKEN_INTRA_DOC_LINKS,\n                 &msg,\n                 &item,\n@@ -1220,7 +1220,7 @@ impl LinkCollector<'_, '_> {\n                         && !self.cx.tcx.features().intra_doc_pointers\n                     {\n                         let span = super::source_span_for_markdown_range(\n-                            self.cx,\n+                            self.cx.tcx,\n                             dox,\n                             &ori_link.range,\n                             &item.attrs,\n@@ -1674,15 +1674,15 @@ impl Suggestion {\n /// parameter of the callback will contain it, and the primary span of the diagnostic will be set\n /// to it.\n fn report_diagnostic(\n-    cx: &DocContext<'_>,\n+    tcx: TyCtxt<'_>,\n     lint: &'static Lint,\n     msg: &str,\n     item: &Item,\n     dox: &str,\n     link_range: &Range<usize>,\n     decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n ) {\n-    let hir_id = match cx.as_local_hir_id(item.def_id) {\n+    let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n         Some(hir_id) => hir_id,\n         None => {\n             // If non-local, no need to check anything.\n@@ -1694,10 +1694,10 @@ fn report_diagnostic(\n     let attrs = &item.attrs;\n     let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n+    tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n-        let span = super::source_span_for_markdown_range(cx, dox, link_range, attrs);\n+        let span = super::source_span_for_markdown_range(tcx, dox, link_range, attrs);\n \n         if let Some(sp) = span {\n             diag.set_span(sp);\n@@ -1742,7 +1742,7 @@ fn resolution_failure(\n ) {\n     let tcx = collector.cx.tcx;\n     report_diagnostic(\n-        collector.cx,\n+        tcx,\n         BROKEN_INTRA_DOC_LINKS,\n         &format!(\"unresolved link to `{}`\", path_str),\n         item,\n@@ -1973,7 +1973,7 @@ fn anchor_failure(\n         ),\n     };\n \n-    report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"contains invalid anchor\");\n         }\n@@ -2013,7 +2013,7 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n@@ -2066,7 +2066,7 @@ fn privacy_error(cx: &DocContext<'_>, item: &Item, path_str: &str, dox: &str, li\n     let msg =\n         format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n \n-    report_diagnostic(cx, PRIVATE_INTRA_DOC_LINKS, &msg, item, dox, &link.range, |diag, sp| {\n+    report_diagnostic(cx.tcx, PRIVATE_INTRA_DOC_LINKS, &msg, item, dox, &link.range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"this item is private\");\n         }"}, {"sha": "ed6d2d59845f2ac1dcc510284004a20721f5ce14", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=b3c4e25e1740da69686f940165dd3c9d563d54e5", "patch": "@@ -73,7 +73,7 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n }\n \n crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n-    let hir_id = match cx.as_local_hir_id(item.def_id) {\n+    let hir_id = match DocContext::as_local_hir_id(cx.tcx, item.def_id) {\n         Some(hir_id) => hir_id,\n         None => {\n             // If non-local, no need to check anything."}, {"sha": "5fff7c8def31c872c085a5ecbee224631a5fa7dd", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=b3c4e25e1740da69686f940165dd3c9d563d54e5", "patch": "@@ -167,7 +167,8 @@ fn extract_tags(\n \n impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n-        let hir_id = match self.cx.as_local_hir_id(item.def_id) {\n+        let tcx = self.cx.tcx;\n+        let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n             Some(hir_id) => hir_id,\n             None => {\n                 // If non-local, no need to check anything.\n@@ -176,13 +177,12 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n         if !dox.is_empty() {\n-            let cx = &self.cx;\n             let report_diag = |msg: &str, range: &Range<usize>| {\n-                let sp = match super::source_span_for_markdown_range(cx, &dox, range, &item.attrs) {\n+                let sp = match super::source_span_for_markdown_range(tcx, &dox, range, &item.attrs) {\n                     Some(sp) => sp,\n                     None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n                 };\n-                cx.tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n                     lint.build(msg).emit()\n                 });\n             };"}, {"sha": "4c639c8496db30108b4e468d0769fafd89deaf08", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=b3c4e25e1740da69686f940165dd3c9d563d54e5", "patch": "@@ -1,6 +1,7 @@\n //! Contains information about \"passes\", used to modify crate information during the documentation\n //! process.\n \n+use rustc_middle::ty::TyCtxt;\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use std::ops::Range;\n \n@@ -167,7 +168,7 @@ crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n /// attributes are not all sugared doc comments. It's difficult to calculate the correct span in\n /// that case due to escaping and other source features.\n crate fn source_span_for_markdown_range(\n-    cx: &DocContext<'_>,\n+    tcx: TyCtxt<'_>,\n     markdown: &str,\n     md_range: &Range<usize>,\n     attrs: &clean::Attributes,\n@@ -179,7 +180,7 @@ crate fn source_span_for_markdown_range(\n         return None;\n     }\n \n-    let snippet = cx.sess().source_map().span_to_snippet(span_of_attrs(attrs)?).ok()?;\n+    let snippet = tcx.sess.source_map().span_to_snippet(span_of_attrs(attrs)?).ok()?;\n \n     let starting_line = markdown[..md_range.start].matches('\\n').count();\n     let ending_line = starting_line + markdown[md_range.start..md_range.end].matches('\\n').count();"}, {"sha": "16ad940c627173d04b7d56142934c81d7e139dc7", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4e25e1740da69686f940165dd3c9d563d54e5/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=b3c4e25e1740da69686f940165dd3c9d563d54e5", "patch": "@@ -60,7 +60,7 @@ crate fn check_non_autolinks(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n-        let hir_id = match self.cx.as_local_hir_id(item.def_id) {\n+        let hir_id = match DocContext::as_local_hir_id(self.cx.tcx, item.def_id) {\n             Some(hir_id) => hir_id,\n             None => {\n                 // If non-local, no need to check anything.\n@@ -70,7 +70,7 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n         if !dox.is_empty() {\n             let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n-                let sp = super::source_span_for_markdown_range(cx, &dox, &range, &item.attrs)\n+                let sp = super::source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n                     .or_else(|| span_of_attrs(&item.attrs))\n                     .unwrap_or(item.source.span());\n                 cx.tcx.struct_span_lint_hir(crate::lint::NON_AUTOLINKS, hir_id, sp, |lint| {"}]}