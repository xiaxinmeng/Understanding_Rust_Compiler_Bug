{"sha": "9293188b65293634c43a37fa046824f7c9d5011a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOTMxODhiNjUyOTM2MzRjNDNhMzdmYTA0NjgyNGY3YzlkNTAxMWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-20T13:24:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-20T13:24:52Z"}, "message": "Merge pull request #2156 from cgm616/master\n\nDeprecate should_assert_eq lint", "tree": {"sha": "f8eb4064f3992b22261d230266bf59ba9b988805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8eb4064f3992b22261d230266bf59ba9b988805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9293188b65293634c43a37fa046824f7c9d5011a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9293188b65293634c43a37fa046824f7c9d5011a", "html_url": "https://github.com/rust-lang/rust/commit/9293188b65293634c43a37fa046824f7c9d5011a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9293188b65293634c43a37fa046824f7c9d5011a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "281bd790de7b992831a1ff8a589c0fc38c842c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/281bd790de7b992831a1ff8a589c0fc38c842c95", "html_url": "https://github.com/rust-lang/rust/commit/281bd790de7b992831a1ff8a589c0fc38c842c95"}, {"sha": "4960d9de86160a85a899d504e3c15b09ba7b6ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4960d9de86160a85a899d504e3c15b09ba7b6ac0", "html_url": "https://github.com/rust-lang/rust/commit/4960d9de86160a85a899d504e3c15b09ba7b6ac0"}], "stats": {"total": 167, "additions": 13, "deletions": 154}, "files": [{"sha": "cd8e8a409e09a95eee1e954788c5c3896564bf84", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9293188b65293634c43a37fa046824f7c9d5011a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9293188b65293634c43a37fa046824f7c9d5011a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9293188b65293634c43a37fa046824f7c9d5011a", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 209 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 208 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n More to come, please [file an issue](https://github.com/rust-lang-nursery/rust-clippy/issues) if you have ideas!\n "}, {"sha": "e51d7cc6d3838f7a9db13945695f62ec47f6eeb4", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9293188b65293634c43a37fa046824f7c9d5011a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9293188b65293634c43a37fa046824f7c9d5011a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=9293188b65293634c43a37fa046824f7c9d5011a", "patch": "@@ -4,6 +4,14 @@ macro_rules! declare_deprecated_lint {\n     }\n }\n \n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend \n+/// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n+declare_deprecated_lint! {\n+    pub SHOULD_ASSERT_EQ,\n+    \"`assert!()` will be more flexible with RFC 2011\"\n+}\n \n /// **What it does:** Nothing. This lint has been deprecated.\n ///"}, {"sha": "198a876c35226769eee398230c20a56781e1fb3f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9293188b65293634c43a37fa046824f7c9d5011a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9293188b65293634c43a37fa046824f7c9d5011a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9293188b65293634c43a37fa046824f7c9d5011a", "patch": "@@ -145,7 +145,6 @@ pub mod regex;\n pub mod returns;\n pub mod serde_api;\n pub mod shadow;\n-pub mod should_assert_eq;\n pub mod strings;\n pub mod swap;\n pub mod temporary_assignment;\n@@ -200,6 +199,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     };\n \n     let mut store = reg.sess.lint_store.borrow_mut();\n+    store.register_removed(\n+        \"should_assert_eq\",\n+        \"`assert!()` will be more flexible with RFC 2011\"\n+    );\n     store.register_removed(\n         \"extend_from_slice\",\n         \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\",\n@@ -327,7 +330,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box double_parens::DoubleParens);\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n-    reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n     reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n     reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n@@ -546,7 +548,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         serde_api::SERDE_API_MISUSE,\n-        should_assert_eq::SHOULD_ASSERT_EQ,\n         strings::STRING_LIT_AS_BYTES,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,"}, {"sha": "47e444c8c8859758582cfe6f517442c3f134e179", "filename": "clippy_lints/src/should_assert_eq.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/281bd790de7b992831a1ff8a589c0fc38c842c95/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281bd790de7b992831a1ff8a589c0fc38c842c95/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshould_assert_eq.rs?ref=281bd790de7b992831a1ff8a589c0fc38c842c95", "patch": "@@ -1,61 +0,0 @@\n-use rustc::lint::*;\n-use rustc::hir::*;\n-use utils::{implements_trait, is_direct_expn_of, is_expn_of, span_lint};\n-\n-/// **What it does:** Checks for `assert!(x == y)` or `assert!(x != y)` which\n-/// can be better written\n-/// using `assert_eq` or `assert_ne` if `x` and `y` implement `Debug` trait.\n-///\n-/// **Why is this bad?** `assert_eq` and `assert_ne` provide better assertion\n-/// failure reporting.\n-///\n-/// **Known problems:** Hopefully none.\n-///\n-/// **Example:**\n-/// ```rust\n-/// let (x, y) = (1, 2);\n-///\n-/// assert!(x == y);  // assertion failed: x == y\n-/// assert_eq!(x, y); // assertion failed: `(left == right)` (left: `1`, right:\n-/// `2`)\n-/// ```\n-declare_lint! {\n-    pub SHOULD_ASSERT_EQ,\n-    Warn,\n-    \"using `assert` macro for asserting equality\"\n-}\n-\n-pub struct ShouldAssertEq;\n-\n-impl LintPass for ShouldAssertEq {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![SHOULD_ASSERT_EQ]\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ShouldAssertEq {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if_let_chain! {[\n-            let ExprIf(ref cond, ..) = e.node,\n-            let ExprUnary(UnOp::UnNot, ref cond) = cond.node,\n-            let ExprBinary(ref binop, ref expr1, ref expr2) = cond.node,\n-            is_direct_expn_of(e.span, \"assert\").is_some(),\n-            let Some(debug_trait) = cx.tcx.lang_items().debug_trait(),\n-        ], {\n-            let debug = is_expn_of(e.span, \"debug_assert\").map_or(\"\", |_| \"debug_\");\n-            let sugg = match binop.node {\n-                BinOp_::BiEq => \"assert_eq\",\n-                BinOp_::BiNe => \"assert_ne\",\n-                _ => return,\n-            };\n-\n-            let ty1 = cx.tables.expr_ty(expr1);\n-            let ty2 = cx.tables.expr_ty(expr2);\n-\n-            if implements_trait(cx, ty1, debug_trait, &[]) &&\n-                implements_trait(cx, ty2, debug_trait, &[]) {\n-                span_lint(cx, SHOULD_ASSERT_EQ, e.span, &format!(\"use `{}{}` for better reporting\", debug, sugg));\n-            }\n-        }}\n-    }\n-}"}, {"sha": "5814e9977530c06b08222bccd1b3d46f3665f07b", "filename": "tests/ui/should_assert_eq.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/281bd790de7b992831a1ff8a589c0fc38c842c95/tests%2Fui%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281bd790de7b992831a1ff8a589c0fc38c842c95/tests%2Fui%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.rs?ref=281bd790de7b992831a1ff8a589c0fc38c842c95", "patch": "@@ -1,32 +0,0 @@\n-\n-\n-\n-#![allow(needless_pass_by_value)]\n-#![warn(should_assert_eq)]\n-\n-#[derive(PartialEq, Eq)]\n-struct NonDebug(i32);\n-\n-#[derive(Debug, PartialEq, Eq)]\n-struct Debug(i32);\n-\n-fn main() {\n-    assert!(1 == 2);\n-    assert!(Debug(1) == Debug(2));\n-    assert!(NonDebug(1) == NonDebug(1)); // ok\n-    assert!(Debug(1) != Debug(2));\n-    assert!(NonDebug(1) != NonDebug(2)); // ok\n-\n-    test_generic(1, 2, 3, 4);\n-\n-    debug_assert!(4 == 5);\n-    debug_assert!(4 != 6);\n-}\n-\n-fn test_generic<T: std::fmt::Debug + Eq, U: Eq>(x: T, y: T, z: U, w: U) {\n-    assert!(x == y);\n-    assert!(z == w); // ok\n-\n-    assert!(x != y);\n-    assert!(z != w); // ok\n-}"}, {"sha": "5b393e1dbe870a00f7475793916f544d7c4ccb4c", "filename": "tests/ui/should_assert_eq.stderr", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/281bd790de7b992831a1ff8a589c0fc38c842c95/tests%2Fui%2Fshould_assert_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/281bd790de7b992831a1ff8a589c0fc38c842c95/tests%2Fui%2Fshould_assert_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.stderr?ref=281bd790de7b992831a1ff8a589c0fc38c842c95", "patch": "@@ -1,57 +0,0 @@\n-error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:14:5\n-   |\n-14 |     assert!(1 == 2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D should-assert-eq` implied by `-D warnings`\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:15:5\n-   |\n-15 |     assert!(Debug(1) == Debug(2));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: use `assert_ne` for better reporting\n-  --> $DIR/should_assert_eq.rs:17:5\n-   |\n-17 |     assert!(Debug(1) != Debug(2));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: use `debug_assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:22:5\n-   |\n-22 |     debug_assert!(4 == 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: use `debug_assert_ne` for better reporting\n-  --> $DIR/should_assert_eq.rs:23:5\n-   |\n-23 |     debug_assert!(4 != 6);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:27:5\n-   |\n-27 |     assert!(x == y);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: use `assert_ne` for better reporting\n-  --> $DIR/should_assert_eq.rs:30:5\n-   |\n-30 |     assert!(x != y);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate\n-"}]}