{"sha": "99529825e8765a1241c569495bca83218fc5e498", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NTI5ODI1ZTg3NjVhMTI0MWM1Njk0OTViY2E4MzIxOGZjNWU0OTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-21T17:05:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-21T17:05:11Z"}, "message": "Add missing examples in some thread functions", "tree": {"sha": "80e5672a8d596d62a063dc31e2f777a28f75d73f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e5672a8d596d62a063dc31e2f777a28f75d73f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99529825e8765a1241c569495bca83218fc5e498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99529825e8765a1241c569495bca83218fc5e498", "html_url": "https://github.com/rust-lang/rust/commit/99529825e8765a1241c569495bca83218fc5e498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99529825e8765a1241c569495bca83218fc5e498/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "html_url": "https://github.com/rust-lang/rust/commit/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "d3949743bcadb8be42f9b48ed114489dfaee585f", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/99529825e8765a1241c569495bca83218fc5e498/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99529825e8765a1241c569495bca83218fc5e498/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=99529825e8765a1241c569495bca83218fc5e498", "patch": "@@ -318,20 +318,38 @@ impl Builder {\n // Free functions\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Spawns a new thread, returning a `JoinHandle` for it.\n+/// Spawns a new thread, returning a [`JoinHandle`] for it.\n ///\n /// The join handle will implicitly *detach* the child thread upon being\n /// dropped. In this case, the child thread may outlive the parent (unless\n /// the parent thread is the main thread; the whole process is terminated when\n-/// the main thread finishes.) Additionally, the join handle provides a `join`\n+/// the main thread finishes). Additionally, the join handle provides a [`join`]\n /// method that can be used to join the child thread. If the child thread\n-/// panics, `join` will return an `Err` containing the argument given to\n-/// `panic`.\n+/// panics, [`join`] will return an [`Err`] containing the argument given to\n+/// [`panic`].\n ///\n /// # Panics\n ///\n-/// Panics if the OS fails to create a thread; use `Builder::spawn`\n+/// Panics if the OS fails to create a thread; use [`Builder::spawn`]\n /// to recover from such errors.\n+///\n+/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n+/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n+/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+/// [`panic!`]: ../../std/macro.panic.html\n+/// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::thread;\n+///\n+/// let handler = thread::spawn(|| {\n+///     // thread code\n+/// });\n+///\n+/// handler.join().unwrap();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n@@ -341,7 +359,7 @@ pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n \n /// Gets a handle to the thread that invokes it.\n ///\n-/// #Examples\n+/// # Examples\n ///\n /// Getting a handle to the current thread with `thread::current()`:\n ///\n@@ -366,6 +384,14 @@ pub fn current() -> Thread {\n }\n \n /// Cooperatively gives up a timeslice to the OS scheduler.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::thread;\n+///\n+/// thread::yield_now();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn yield_now() {\n     imp::Thread::yield_now()\n@@ -375,7 +401,7 @@ pub fn yield_now() {\n ///\n /// # Examples\n ///\n-/// ```rust,should_panic\n+/// ```should_panic\n /// use std::thread;\n ///\n /// struct SomeStruct;\n@@ -413,6 +439,15 @@ pub fn panicking() -> bool {\n /// specifics or platform-dependent functionality. Note that on unix platforms\n /// this function will not return early due to a signal being received or a\n /// spurious wakeup.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::thread;\n+///\n+/// // Let's sleep for 2 seconds:\n+/// thread::sleep_ms(2000);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::sleep`\")]\n pub fn sleep_ms(ms: u32) {\n@@ -433,7 +468,7 @@ pub fn sleep_ms(ms: u32) {\n ///\n /// # Examples\n ///\n-/// ```rust,no_run\n+/// ```no_run\n /// use std::{thread, time};\n ///\n /// let ten_millis = time::Duration::from_millis(10);"}]}