{"sha": "3b68700d0ce297e48c6448f27d156d5f461d64e9", "node_id": "C_kwDOAAsO6NoAKDNiNjg3MDBkMGNlMjk3ZTQ4YzY0NDhmMjdkMTU2ZDVmNDYxZDY0ZTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-23T21:39:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-23T21:39:07Z"}, "message": "Rollup merge of #98269 - compiler-errors:provide-more-segment-res, r=petrochenkov\n\nProvide a `PathSegment.res` in more cases\n\nI find that in many cases, the `res` associated with a `PathSegment` is `Res::Err` even though the path was fully resolved. A few diagnostics use this `res` and their error messages suffer because of the lack of resolved segment.\n\nThis fixes it a bit, but it's obviously not complete and I'm not exactly sure if it's correct.", "tree": {"sha": "3b0ad77acef4869134e68b7e9b28f59aac09944c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b0ad77acef4869134e68b7e9b28f59aac09944c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b68700d0ce297e48c6448f27d156d5f461d64e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitN17CRBK7hj4Ov3rIwAAXkgIAKpWzJZgpSbpmJdYX3N39qDI\nCNHyVuUxnIopd/0Z6Th/DwQrtAuKyg1/P2dQZ32IxGp1VlZq/g9GqyYbjFjlCHWj\nOUrLoSUdIH1BXzEoxaXlzdm9yJoGIrY5joe3O553P9LMWcusg38XHOP49L9d8vye\ngh6HjFxTlRrSqkygZ5a6+XnM4mNlxHR/NN/f9JbOeW4Q119pY0HzodM/d9zuIa6s\nu1dsu+UVuKf/WrsSzPdrmR9wCw3srdAgy6NS8Ngye/pAl1SqCskrAH5OvqxSgkQQ\nS9dKIdtY1G6gFEA1iR6N8RGcsmIcesB6yad78C8osVwKyQOaywY8ZAZv/YbTewk=\n=jjDl\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b0ad77acef4869134e68b7e9b28f59aac09944c\nparent 413e350f87fafeea3da13fc98337c632c4cfcd70\nparent f924e74fb1c238b0e6c06c23b51c087f1e6aa0d5\nauthor Michael Goulet <michael@errs.io> 1656020347 -0700\ncommitter GitHub <noreply@github.com> 1656020347 -0700\n\nRollup merge of #98269 - compiler-errors:provide-more-segment-res, r=petrochenkov\n\nProvide a `PathSegment.res` in more cases\n\nI find that in many cases, the `res` associated with a `PathSegment` is `Res::Err` even though the path was fully resolved. A few diagnostics use this `res` and their error messages suffer because of the lack of resolved segment.\n\nThis fixes it a bit, but it's obviously not complete and I'm not exactly sure if it's correct.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b68700d0ce297e48c6448f27d156d5f461d64e9", "html_url": "https://github.com/rust-lang/rust/commit/3b68700d0ce297e48c6448f27d156d5f461d64e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b68700d0ce297e48c6448f27d156d5f461d64e9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413e350f87fafeea3da13fc98337c632c4cfcd70", "url": "https://api.github.com/repos/rust-lang/rust/commits/413e350f87fafeea3da13fc98337c632c4cfcd70", "html_url": "https://github.com/rust-lang/rust/commit/413e350f87fafeea3da13fc98337c632c4cfcd70"}, {"sha": "f924e74fb1c238b0e6c06c23b51c087f1e6aa0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f924e74fb1c238b0e6c06c23b51c087f1e6aa0d5", "html_url": "https://github.com/rust-lang/rust/commit/f924e74fb1c238b0e6c06c23b51c087f1e6aa0d5"}], "stats": {"total": 231, "additions": 116, "deletions": 115}, "files": [{"sha": "0cc6d05d1d086ac072ea3c175978268e9cd36c51", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1502,6 +1502,7 @@ impl<'a> Resolver<'a> {\n                         return PathResult::NonModule(PartialRes::new(Res::Err));\n                     } else if opt_ns.is_some() && (is_last || maybe_assoc) {\n                         self.lint_if_path_starts_with_module(finalize, path, second_binding);\n+                        record_segment_res(self, res);\n                         return PathResult::NonModule(PartialRes::with_unresolved_segments(\n                             res,\n                             path.len() - i - 1,"}, {"sha": "8f4cb86de99a01a0e8dff24c1e212c655a9c4f5e", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,10 +1,10 @@\n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u32`\n   --> $DIR/E0109.rs:1:14\n    |\n LL | type X = u32<i32>;\n    |          --- ^^^ type argument not allowed\n    |          |\n-   |          not allowed on this type\n+   |          not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |"}, {"sha": "4ce2a0a410ce4ef9d688490bee1158bcb7aeeee6", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,10 +1,10 @@\n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u32`\n   --> $DIR/E0110.rs:1:14\n    |\n LL | type X = u32<'static>;\n    |          --- ^^^^^^^ lifetime argument not allowed\n    |          |\n-   |          not allowed on this type\n+   |          not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |"}, {"sha": "affb481496d02a8af7fc9dac41d91d9d8a9b1de5", "filename": "src/test/ui/inference/cannot-infer-closure-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -4,10 +4,10 @@ fn main() {\n     // error handles this gracefully, and in particular doesn't generate an extra\n     // note about the `?` operator in the closure body, which isn't relevant to\n     // the inference.\n-    let x = |r| {\n+    let x = |r| { //~ ERROR type annotations needed for `Result<(), E>`\n         let v = r?;\n         Ok(v)\n     };\n \n-    let _ = x(x(Ok(())));  //~ ERROR type annotations needed for `Result<(), E>`\n+    let _ = x(x(Ok(())));\n }"}, {"sha": "b706cd2bc36e8a0ba3f53291fcdc7b44e6bd2cf2", "filename": "src/test/ui/inference/cannot-infer-closure-circular.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,13 +1,13 @@\n error[E0282]: type annotations needed for `Result<(), E>`\n-  --> $DIR/cannot-infer-closure-circular.rs:12:9\n+  --> $DIR/cannot-infer-closure-circular.rs:7:14\n    |\n-LL |     let _ = x(x(Ok(())));\n-   |         ^\n+LL |     let x = |r| {\n+   |              ^\n    |\n-help: consider giving this pattern a type, where the type for type parameter `E` is specified\n+help: consider giving this closure parameter an explicit type, where the type for type parameter `E` is specified\n    |\n-LL |     let _: Result<(), E> = x(x(Ok(())));\n-   |          +++++++++++++++\n+LL |     let x = |r: Result<(), E>| {\n+   |               +++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "0031a4665c814478dbaf28ffb2f4b86f90fce216", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -52,7 +52,7 @@ fn main() {\n     // Tuple struct variant\n \n     Enum::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on tuple variant `TSVariant` [E0109]\n \n     Alias::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n@@ -70,7 +70,7 @@ fn main() {\n     // Struct variant\n \n     Enum::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on variant `SVariant` [E0109]\n \n     Alias::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n@@ -88,7 +88,7 @@ fn main() {\n     // Unit variant\n \n     Enum::<()>::UVariant::<()>;\n-    //~^ ERROR type arguments are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on unit variant `UVariant` [E0109]\n \n     Alias::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed on this type [E0109]"}, {"sha": "5467f61bee40f131a58987ba0885d65c822f0002", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -272,13 +272,13 @@ LL |         Self::<()>::UVariant::<()>;\n    |                     |\n    |                     not allowed on this type\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on tuple variant `TSVariant`\n   --> $DIR/enum-variant-generic-args.rs:54:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n    |                 ---------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this type\n+   |                 not allowed on tuple variant `TSVariant`\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:57:24\n@@ -340,13 +340,13 @@ LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                       |\n    |                       not allowed on this type\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on variant `SVariant`\n   --> $DIR/enum-variant-generic-args.rs:72:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this type\n+   |                 not allowed on variant `SVariant`\n    |\n    = note: enum variants can't have type parameters\n \n@@ -438,13 +438,13 @@ LL -     AliasFixed::<()>::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on unit variant `UVariant`\n   --> $DIR/enum-variant-generic-args.rs:90:28\n    |\n LL |     Enum::<()>::UVariant::<()>;\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this type\n+   |                 not allowed on unit variant `UVariant`\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:93:23"}, {"sha": "f1e16bc7bd3c15a74f90074d85ce6d005d9ccc3e", "filename": "src/test/ui/type/issue-91268.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: this file contains an unclosed delimiter\n // error-pattern: cannot find type `\u0163` in this scope\n // error-pattern: parenthesized type parameters may only be used with a `Fn` trait\n-// error-pattern: type arguments are not allowed on this type\n+// error-pattern: type arguments are not allowed on builtin type `u8`\n // error-pattern: mismatched types\n // ignore-tidy-trailing-newlines\n // `\u0163` must be the last character in this file, it cannot be followed by a newline"}, {"sha": "6c9ee9945844d812d20f81b0c97af77438955cd4", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -35,13 +35,13 @@ help: use angle brackets instead\n LL |     0: u8<\u0163>\n    |          ~ +\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u8`\n   --> $DIR/issue-91268.rs:9:11\n    |\n LL |     0: u8(\u0163\n    |        -- ^ type argument not allowed\n    |        |\n-   |        not allowed on this type\n+   |        not allowed on builtin type `u8`\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |"}, {"sha": "e3f99479a38091eac7ad95c178cb4a0f629dd88e", "filename": "src/test/ui/typeck/prim-with-args.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,28 +1,28 @@\n // run-rustfix\n fn main() {\n \n-let _x: isize; //~ ERROR type arguments are not allowed on this type\n-let _x: i8; //~ ERROR type arguments are not allowed on this type\n-let _x: i16; //~ ERROR type arguments are not allowed on this type\n-let _x: i32; //~ ERROR type arguments are not allowed on this type\n-let _x: i64; //~ ERROR type arguments are not allowed on this type\n-let _x: usize; //~ ERROR type arguments are not allowed on this type\n-let _x: u8; //~ ERROR type arguments are not allowed on this type\n-let _x: u16; //~ ERROR type arguments are not allowed on this type\n-let _x: u32; //~ ERROR type arguments are not allowed on this type\n-let _x: u64; //~ ERROR type arguments are not allowed on this type\n-let _x: char; //~ ERROR type arguments are not allowed on this type\n+let _x: isize; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i8; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i16; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i32; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i64; //~ ERROR type arguments are not allowed on builtin type\n+let _x: usize; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u8; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u16; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u32; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u64; //~ ERROR type arguments are not allowed on builtin type\n+let _x: char; //~ ERROR type arguments are not allowed on builtin type\n \n-let _x: isize; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i8; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i16; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i32; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i64; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: usize; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u8; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u16; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u32; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u64; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: char; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: isize; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i8; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i16; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i32; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i64; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: usize; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u8; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u16; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u32; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u64; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: char; //~ ERROR lifetime arguments are not allowed on builtin type\n \n }"}, {"sha": "b10471eccee68b0f20b8486139026e9d72d1206a", "filename": "src/test/ui/typeck/prim-with-args.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,28 +1,28 @@\n // run-rustfix\n fn main() {\n \n-let _x: isize<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i8<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i16<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i32<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i64<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: usize<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u8<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u16<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u32<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u64<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: char<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: isize<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i8<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i16<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i32<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i64<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: usize<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u8<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u16<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u32<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u64<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: char<isize>; //~ ERROR type arguments are not allowed on builtin type\n \n-let _x: isize<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i8<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i16<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i32<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i64<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: usize<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u8<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u16<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u32<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u64<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: char<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: isize<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i8<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i16<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i32<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i64<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: usize<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u8<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u16<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u32<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u64<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: char<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n \n }"}, {"sha": "2ddad5ad71e4619364c10b63a4416d96f2c57661", "filename": "src/test/ui/typeck/prim-with-args.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,304 +1,304 @@\n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `isize`\n   --> $DIR/prim-with-args.rs:4:15\n    |\n LL | let _x: isize<isize>;\n    |         ----- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `isize`\n    |\n help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<isize>;\n LL + let _x: isize;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i8`\n   --> $DIR/prim-with-args.rs:5:12\n    |\n LL | let _x: i8<isize>;\n    |         -- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i8`\n    |\n help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<isize>;\n LL + let _x: i8;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i16`\n   --> $DIR/prim-with-args.rs:6:13\n    |\n LL | let _x: i16<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i16`\n    |\n help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<isize>;\n LL + let _x: i16;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i32`\n   --> $DIR/prim-with-args.rs:7:13\n    |\n LL | let _x: i32<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i32`\n    |\n help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<isize>;\n LL + let _x: i32;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i64`\n   --> $DIR/prim-with-args.rs:8:13\n    |\n LL | let _x: i64<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i64`\n    |\n help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<isize>;\n LL + let _x: i64;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `usize`\n   --> $DIR/prim-with-args.rs:9:15\n    |\n LL | let _x: usize<isize>;\n    |         ----- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `usize`\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<isize>;\n LL + let _x: usize;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u8`\n   --> $DIR/prim-with-args.rs:10:12\n    |\n LL | let _x: u8<isize>;\n    |         -- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u8`\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<isize>;\n LL + let _x: u8;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u16`\n   --> $DIR/prim-with-args.rs:11:13\n    |\n LL | let _x: u16<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u16`\n    |\n help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<isize>;\n LL + let _x: u16;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u32`\n   --> $DIR/prim-with-args.rs:12:13\n    |\n LL | let _x: u32<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<isize>;\n LL + let _x: u32;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u64`\n   --> $DIR/prim-with-args.rs:13:13\n    |\n LL | let _x: u64<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u64`\n    |\n help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<isize>;\n LL + let _x: u64;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `char`\n   --> $DIR/prim-with-args.rs:14:14\n    |\n LL | let _x: char<isize>;\n    |         ---- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `char`\n    |\n help: primitive type `char` doesn't have generic parameters\n    |\n LL - let _x: char<isize>;\n LL + let _x: char;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `isize`\n   --> $DIR/prim-with-args.rs:16:15\n    |\n LL | let _x: isize<'static>;\n    |         ----- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `isize`\n    |\n help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<'static>;\n LL + let _x: isize;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i8`\n   --> $DIR/prim-with-args.rs:17:12\n    |\n LL | let _x: i8<'static>;\n    |         -- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i8`\n    |\n help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<'static>;\n LL + let _x: i8;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i16`\n   --> $DIR/prim-with-args.rs:18:13\n    |\n LL | let _x: i16<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i16`\n    |\n help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<'static>;\n LL + let _x: i16;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i32`\n   --> $DIR/prim-with-args.rs:19:13\n    |\n LL | let _x: i32<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i32`\n    |\n help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<'static>;\n LL + let _x: i32;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i64`\n   --> $DIR/prim-with-args.rs:20:13\n    |\n LL | let _x: i64<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i64`\n    |\n help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<'static>;\n LL + let _x: i64;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `usize`\n   --> $DIR/prim-with-args.rs:21:15\n    |\n LL | let _x: usize<'static>;\n    |         ----- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `usize`\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<'static>;\n LL + let _x: usize;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u8`\n   --> $DIR/prim-with-args.rs:22:12\n    |\n LL | let _x: u8<'static>;\n    |         -- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u8`\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<'static>;\n LL + let _x: u8;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u16`\n   --> $DIR/prim-with-args.rs:23:13\n    |\n LL | let _x: u16<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u16`\n    |\n help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<'static>;\n LL + let _x: u16;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u32`\n   --> $DIR/prim-with-args.rs:24:13\n    |\n LL | let _x: u32<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<'static>;\n LL + let _x: u32;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u64`\n   --> $DIR/prim-with-args.rs:25:13\n    |\n LL | let _x: u64<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u64`\n    |\n help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<'static>;\n LL + let _x: u64;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `char`\n   --> $DIR/prim-with-args.rs:26:14\n    |\n LL | let _x: char<'static>;\n    |         ---- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `char`\n    |\n help: primitive type `char` doesn't have generic parameters\n    |"}, {"sha": "4ab80d944a56fd98fd6ff3e1ab211c175b56c276", "filename": "src/test/ui/usize-generic-argument-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,5 +1,5 @@\n fn foo() {\n-    let x: usize<foo>; //~ ERROR const arguments are not allowed on this type\n+    let x: usize<foo>; //~ ERROR const arguments are not allowed on builtin type `usize`\n }\n \n fn main() {}"}, {"sha": "131c476aa55c0c2ba808c918af3feb00f023c690", "filename": "src/test/ui/usize-generic-argument-parent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b68700d0ce297e48c6448f27d156d5f461d64e9/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr?ref=3b68700d0ce297e48c6448f27d156d5f461d64e9", "patch": "@@ -1,10 +1,10 @@\n-error[E0109]: const arguments are not allowed on this type\n+error[E0109]: const arguments are not allowed on builtin type `usize`\n   --> $DIR/usize-generic-argument-parent.rs:2:18\n    |\n LL |     let x: usize<foo>;\n    |            ----- ^^^ const argument not allowed\n    |            |\n-   |            not allowed on this type\n+   |            not allowed on builtin type `usize`\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |"}]}