{"sha": "f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYTkxMjg3NjFlOGRkNDJmMGRkNDA2MTBhMWQ4NzM0YTUyZjNkOWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-13T09:41:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-13T09:41:39Z"}, "message": "Minor", "tree": {"sha": "147c5fc40413d63e29fe68f6de1c6732ef028e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/147c5fc40413d63e29fe68f6de1c6732ef028e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "html_url": "https://github.com/rust-lang/rust/commit/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f03db51dc84aac56c807ecf4da8151c01e3c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f03db51dc84aac56c807ecf4da8151c01e3c04", "html_url": "https://github.com/rust-lang/rust/commit/b0f03db51dc84aac56c807ecf4da8151c01e3c04"}], "stats": {"total": 90, "additions": 46, "deletions": 44}, "files": [{"sha": "79097621e645f0277db4eabd3bc978167cd88d57", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "patch": "@@ -1,4 +1,3 @@\n-use ra_fmt::unwrap_trivial_block;\n use syntax::{\n     ast::{\n         self,\n@@ -8,7 +7,10 @@ use syntax::{\n     AstNode,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{unwrap_trivial_block, TryEnum},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: replace_if_let_with_match\n //"}, {"sha": "3851aeb3e7459fc0a8c101293588fb24ec1a3006", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "patch": "@@ -1,4 +1,3 @@\n-use ra_fmt::unwrap_trivial_block;\n use syntax::{\n     ast::{\n         self,\n@@ -7,7 +6,7 @@ use syntax::{\n     AstNode, TextRange, T,\n };\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: unwrap_block\n //"}, {"sha": "a20453dd8747b226abe6a59ff382de78e316ea4f", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "patch": "@@ -4,6 +4,7 @@ pub(crate) mod insert_use;\n use std::{iter, ops};\n \n use hir::{Adt, Crate, Enum, ScopeDef, Semantics, Trait, Type};\n+use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use rustc_hash::FxHashSet;\n use syntax::{\n@@ -17,6 +18,43 @@ use crate::assist_config::SnippetCap;\n \n pub(crate) use insert_use::{find_insert_use_container, insert_use_statement};\n \n+pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n+    extract_trivial_expression(&block)\n+        .filter(|expr| !expr.syntax().text().contains_char('\\n'))\n+        .unwrap_or_else(|| block.into())\n+}\n+\n+pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n+    let has_anything_else = |thing: &SyntaxNode| -> bool {\n+        let mut non_trivial_children =\n+            block.syntax().children_with_tokens().filter(|it| match it.kind() {\n+                WHITESPACE | T!['{'] | T!['}'] => false,\n+                _ => it.as_node() != Some(thing),\n+            });\n+        non_trivial_children.next().is_some()\n+    };\n+\n+    if let Some(expr) = block.expr() {\n+        if has_anything_else(expr.syntax()) {\n+            return None;\n+        }\n+        return Some(expr);\n+    }\n+    // Unwrap `{ continue; }`\n+    let (stmt,) = block.statements().next_tuple()?;\n+    if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n+        if has_anything_else(expr_stmt.syntax()) {\n+            return None;\n+        }\n+        let expr = expr_stmt.expr()?;\n+        match expr.syntax().kind() {\n+            CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n+            _ => (),\n+        }\n+    }\n+    None\n+}\n+\n #[derive(Clone, Copy, Debug)]\n pub(crate) enum Cursor<'a> {\n     Replace(&'a SyntaxNode),"}, {"sha": "d0004654b3b6c1b8ca0eb206f9128fdf69660a38", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "patch": "@@ -2,9 +2,8 @@\n \n use std::iter::successors;\n \n-use itertools::Itertools;\n use syntax::{\n-    ast::{self, AstNode, AstToken},\n+    ast::{self, AstToken},\n     SmolStr, SyntaxKind,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, T,\n@@ -30,43 +29,6 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     successors(token.prev_token(), |token| token.prev_token())\n }\n \n-pub fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n-    extract_trivial_expression(&block)\n-        .filter(|expr| !expr.syntax().text().contains_char('\\n'))\n-        .unwrap_or_else(|| block.into())\n-}\n-\n-pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n-    let has_anything_else = |thing: &SyntaxNode| -> bool {\n-        let mut non_trivial_children =\n-            block.syntax().children_with_tokens().filter(|it| match it.kind() {\n-                WHITESPACE | T!['{'] | T!['}'] => false,\n-                _ => it.as_node() != Some(thing),\n-            });\n-        non_trivial_children.next().is_some()\n-    };\n-\n-    if let Some(expr) = block.expr() {\n-        if has_anything_else(expr.syntax()) {\n-            return None;\n-        }\n-        return Some(expr);\n-    }\n-    // Unwrap `{ continue; }`\n-    let (stmt,) = block.statements().next_tuple()?;\n-    if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n-        if has_anything_else(expr_stmt.syntax()) {\n-            return None;\n-        }\n-        let expr = expr_stmt.expr()?;\n-        match expr.syntax().kind() {\n-            CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n-            _ => (),\n-        }\n-    }\n-    None\n-}\n-\n pub fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {\n     match left {\n         T!['('] | T!['['] => return \"\","}, {"sha": "574ce219d9388604e52f780188f2934f2d26801b", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a9128761e8dd42f0dd40610a1d8734a52f3d9c/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=f0a9128761e8dd42f0dd40610a1d8734a52f3d9c", "patch": "@@ -1,5 +1,6 @@\n use itertools::Itertools;\n-use ra_fmt::{compute_ws, extract_trivial_expression};\n+use ra_assists::utils::extract_trivial_expression;\n+use ra_fmt::compute_ws;\n use syntax::{\n     algo::{find_covering_element, non_trivia_sibling},\n     ast::{self, AstNode, AstToken},"}]}