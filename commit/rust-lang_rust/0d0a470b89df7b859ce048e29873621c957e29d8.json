{"sha": "0d0a470b89df7b859ce048e29873621c957e29d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMGE0NzBiODlkZjdiODU5Y2UwNDhlMjk4NzM2MjFjOTU3ZTI5ZDg=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-20T23:53:56Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-20T23:57:19Z"}, "message": "Make signature of Path::strip_prefix un-bizarre\n\nBREAKING CHANGE:\nThis has the potential to cause regressions in type inference.", "tree": {"sha": "afb444777e0d205c2431d67a949fd5d215669a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb444777e0d205c2431d67a949fd5d215669a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d0a470b89df7b859ce048e29873621c957e29d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a470b89df7b859ce048e29873621c957e29d8", "html_url": "https://github.com/rust-lang/rust/commit/0d0a470b89df7b859ce048e29873621c957e29d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a470b89df7b859ce048e29873621c957e29d8/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "527246fe1cdceb7fa8c36b725d294450704bfdff", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d0a470b89df7b859ce048e29873621c957e29d8/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0a470b89df7b859ce048e29873621c957e29d8/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=0d0a470b89df7b859ce048e29873621c957e29d8", "patch": "@@ -297,10 +297,9 @@ pub const MAIN_SEPARATOR: char = ::sys::path::MAIN_SEP;\n // Iterate through `iter` while it matches `prefix`; return `None` if `prefix`\n // is not a prefix of `iter`, otherwise return `Some(iter_after_prefix)` giving\n // `iter` after having exhausted `prefix`.\n-fn iter_after<A, I, J>(mut iter: I, mut prefix: J) -> Option<I>\n-    where I: Iterator<Item = A> + Clone,\n-          J: Iterator<Item = A>,\n-          A: PartialEq\n+fn iter_after<'a, 'b, I, J>(mut iter: I, mut prefix: J) -> Option<I>\n+    where I: Iterator<Item = Component<'a>> + Clone,\n+          J: Iterator<Item = Component<'b>>,\n {\n     loop {\n         let mut iter_next = iter.clone();\n@@ -1865,7 +1864,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::path::Path;\n+    /// use std::path::{Path, PathBuf};\n     ///\n     /// let path = Path::new(\"/test/haha/foo.txt\");\n     ///\n@@ -1876,16 +1875,19 @@ impl Path {\n     /// assert_eq!(path.strip_prefix(\"/test/haha/foo.txt/\"), Ok(Path::new(\"\")));\n     /// assert_eq!(path.strip_prefix(\"test\").is_ok(), false);\n     /// assert_eq!(path.strip_prefix(\"/haha\").is_ok(), false);\n+    ///\n+    /// let prefix = PathBuf::from(\"/test/\");\n+    /// assert_eq!(path.strip_prefix(prefix), Ok(Path::new(\"haha/foo.txt\")));\n     /// ```\n     #[stable(since = \"1.7.0\", feature = \"path_strip_prefix\")]\n-    pub fn strip_prefix<'a, P: ?Sized>(&'a self, base: &'a P)\n-                                       -> Result<&'a Path, StripPrefixError>\n+    pub fn strip_prefix<'a, P>(&'a self, base: P)\n+                               -> Result<&'a Path, StripPrefixError>\n         where P: AsRef<Path>\n     {\n         self._strip_prefix(base.as_ref())\n     }\n \n-    fn _strip_prefix<'a>(&'a self, base: &'a Path)\n+    fn _strip_prefix<'a>(&'a self, base: &Path)\n                          -> Result<&'a Path, StripPrefixError> {\n         iter_after(self.components(), base.components())\n             .map(|c| c.as_path())"}]}