{"sha": "969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OWQwMjdlMzU5N2EwZTRhNmQwNmU0YzI2MzdiODRiOGExNWQwMWM=", "commit": {"author": {"name": "Kai Noda", "email": "nodakai@gmail.com", "date": "2016-02-19T08:54:21Z"}, "committer": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2016-03-06T18:45:10Z"}, "message": "Clarify the semantics of enum discriminants\n\ncf. https://doc.rust-lang.org/error-index.html#E0082", "tree": {"sha": "76fa0f26bfdc7a6bcf37d658f92dc0472937640f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76fa0f26bfdc7a6bcf37d658f92dc0472937640f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJW3HrYAAoJENU+ddTERR/CLr0QAK8qyJuBko/pvdCMrrbaOFp6\nNcSTwbKcG+sZcPnwkCSR1D5qi1pjWPTo0jMhptI3J6PvKR5LLo7OYjnCOZm/LLos\nHXKjim2FbiOb/ZZ+mB90qQN5ka1HBltP6Pt5LpHu/7GslpoleiMYs8R3Wdo1bL+x\n6/ifdFmVGpJYfqe6lzbj5ZJO9kdf/vYaj+dLV0PPyBgWhGEvF+TGIuJP5RwKZXXH\n0AzNFb0ck/jtrJ9xqigVD3VVZ7TWDXc7S8SCvn9HWvq0lt8zgLfYZ4SyVmjNpXfZ\n8HPVtbFy8/QK1lvw8WHuG8U+oHJMo5KOPlNQaf3g3u2ragSY4mxQCyK+CMiZ8YmE\ng2vxCytQ8iC8W8jR7yCnaD689NEiRJI9GhEfV/rsGv3uzzCXjWHhtMyvCNomOXJ0\nO7iU1BRg3csz/LyhSkmHpsqWgEwg+CmaksoC6eGj5mRaK3T7kC320W5YgD6+m8B9\n9Py1XElnfrViwtxTo45S9c3mkmg2IN2UxGYtu5YVR7YpRYI06HmxMxKNhIt9Mzbq\nG2wdOzcKJgEwlEWScugBcKITGqlyZ59KH9WgIwWkPw/vkLl3sm0O2Ra4MlGRltkj\nblTQZWXiGz0YNKk9cLSZ/rvPSfE7jfRhohv71uJR73uWHfTELNhm/WIlpml6d3Ax\nRY8p76oH5gs4rrsR2Obo\n=e63U\n-----END PGP SIGNATURE-----", "payload": "tree 76fa0f26bfdc7a6bcf37d658f92dc0472937640f\nparent 21fb3ce71b39133cc24b40de82e3214dd603cd61\nauthor Kai Noda <nodakai@gmail.com> 1455872061 +0800\ncommitter NODA, Kai <nodakai@gmail.com> 1457289910 +0800\n\nClarify the semantics of enum discriminants\n\ncf. https://doc.rust-lang.org/error-index.html#E0082\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "html_url": "https://github.com/rust-lang/rust/commit/969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/969d027e3597a0e4a6d06e4c2637b84b8a15d01c/comments", "author": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21fb3ce71b39133cc24b40de82e3214dd603cd61", "url": "https://api.github.com/repos/rust-lang/rust/commits/21fb3ce71b39133cc24b40de82e3214dd603cd61", "html_url": "https://github.com/rust-lang/rust/commit/21fb3ce71b39133cc24b40de82e3214dd603cd61"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "5708d8092a2560df5e2d7e119301201cc021da0f", "filename": "src/doc/reference.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/969d027e3597a0e4a6d06e4c2637b84b8a15d01c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/969d027e3597a0e4a6d06e4c2637b84b8a15d01c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "patch": "@@ -1191,18 +1191,24 @@ a = Animal::Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n In this example, `Cat` is a _struct-like enum variant_,\n whereas `Dog` is simply called an enum variant.\n \n-Enums have a discriminant. You can assign them explicitly:\n+Each enum value has a _discriminant_ which is an integer associated to it. You\n+can specify it explicitly:\n \n ```\n enum Foo {\n     Bar = 123,\n }\n ```\n \n-If a discriminant isn't assigned, they start at zero, and add one for each\n+The right hand side of the specification is interpreted as an `isize` value,\n+but the compiler is allowed to use a smaller type in the actual memory layout.\n+The [`repr` attribute](#ffi-attributes) can be added in order to change\n+the type of the right hand side and specify the memory layout.\n+\n+If a discriminant isn't specified, they start at zero, and add one for each\n variant, in order.\n \n-You can cast an enum to get this value:\n+You can cast an enum to get its discriminant:\n \n ```\n # enum Foo { Bar = 123 }"}, {"sha": "cfe76206b02903bf65a8e7974ae539a0fdeaa150", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/969d027e3597a0e4a6d06e4c2637b84b8a15d01c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969d027e3597a0e4a6d06e4c2637b84b8a15d01c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "patch": "@@ -1133,15 +1133,16 @@ enum Bad {\n }\n ```\n \n-Here `X` will have already been assigned the discriminant 0 by the time `Y` is\n+Here `X` will have already been specified the discriminant 0 by the time `Y` is\n encountered, so a conflict occurs.\n \"##,\n \n E0082: r##\"\n-The default type for enum discriminants is `isize`, but it can be adjusted by\n-adding the `repr` attribute to the enum declaration. This error indicates that\n-an integer literal given as a discriminant is not a member of the discriminant\n-type. For example:\n+When you specify enum discriminants with `=`, the compiler expects `isize`\n+values by default. Or you can add the `repr` attibute to the enum declaration\n+for an explicit choice of the discriminant type. In either cases, the\n+discriminant values must fall within a valid range for the expected type;\n+otherwise this error is raised. For example:\n \n ```compile_fail\n #[repr(u8)]\n@@ -1152,11 +1153,19 @@ enum Thing {\n ```\n \n Here, 1024 lies outside the valid range for `u8`, so the discriminant for `A` is\n-invalid. You may want to change representation types to fix this, or else change\n-invalid discriminant values so that they fit within the existing type.\n+invalid. Here is another, more subtle example which depends on target word size:\n \n-Note also that without a representation manually defined, the compiler will\n-optimize by using the smallest integer type possible.\n+```compile_fail\n+enum DependsOnPointerSize {\n+    A = 1 << 32\n+}\n+```\n+\n+Here, `1 << 32` is interpreted as an `isize` value. So it is invalid for 32 bit\n+target (`target_pointer_width = \"32\"`) but valid for 64 bit target.\n+\n+You may want to change representation types to fix this, or else change invalid\n+discriminant values so that they fit within the existing type.\n \"##,\n \n E0084: r##\""}]}