{"sha": "1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDE4MDRkNDNiMWVmM2U5MTlhM2U5Y2I3ZmRiNGUxNjZmOGZkNjQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-21T20:01:30Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-12T13:50:46Z"}, "message": "Use configuration in the `TYPE_COMPLEXITY` lint", "tree": {"sha": "0a3c1906706d93c8ef76ad7ecf5849d5237a1958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a3c1906706d93c8ef76ad7ecf5849d5237a1958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "html_url": "https://github.com/rust-lang/rust/commit/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "html_url": "https://github.com/rust-lang/rust/commit/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847"}], "stats": {"total": 80, "additions": 46, "deletions": 34}, "files": [{"sha": "4c0a069a090577c4ec67f0c1f2dd5f86fba6a0a5", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "patch": "@@ -168,7 +168,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box entry::HashMapLint);\n     reg.register_late_lint_pass(box ranges::StepByZero);\n     reg.register_late_lint_pass(box types::CastPass);\n-    reg.register_late_lint_pass(box types::TypeComplexityPass);\n+    reg.register_late_lint_pass(box types::TypeComplexityPass::new(conf.type_complexity_threshold));\n     reg.register_late_lint_pass(box matches::MatchPass);\n     reg.register_late_lint_pass(box misc::PatternPass);\n     reg.register_late_lint_pass(box minmax::MinMaxPass);"}, {"sha": "1aefe5a4d27320002248d50640471d20531d83f9", "filename": "src/types.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "patch": "@@ -417,7 +417,17 @@ declare_lint! {\n }\n \n #[allow(missing_copy_implementations)]\n-pub struct TypeComplexityPass;\n+pub struct TypeComplexityPass {\n+    threshold: u64,\n+}\n+\n+impl TypeComplexityPass {\n+    pub fn new(threshold: u64) -> Self {\n+        TypeComplexityPass {\n+            threshold: threshold\n+        }\n+    }\n+}\n \n impl LintPass for TypeComplexityPass {\n     fn get_lints(&self) -> LintArray {\n@@ -427,18 +437,18 @@ impl LintPass for TypeComplexityPass {\n \n impl LateLintPass for TypeComplexityPass {\n     fn check_fn(&mut self, cx: &LateContext, _: FnKind, decl: &FnDecl, _: &Block, _: Span, _: NodeId) {\n-        check_fndecl(cx, decl);\n+        self.check_fndecl(cx, decl);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, field: &StructField) {\n         // enum variants are also struct fields now\n-        check_type(cx, &field.ty);\n+        self.check_type(cx, &field.ty);\n     }\n \n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         match item.node {\n             ItemStatic(ref ty, _, _) |\n-            ItemConst(ref ty, _) => check_type(cx, ty),\n+            ItemConst(ref ty, _) => self.check_type(cx, ty),\n             // functions, enums, structs, impls and traits are covered\n             _ => (),\n         }\n@@ -447,8 +457,8 @@ impl LateLintPass for TypeComplexityPass {\n     fn check_trait_item(&mut self, cx: &LateContext, item: &TraitItem) {\n         match item.node {\n             ConstTraitItem(ref ty, _) |\n-            TypeTraitItem(_, Some(ref ty)) => check_type(cx, ty),\n-            MethodTraitItem(MethodSig { ref decl, .. }, None) => check_fndecl(cx, decl),\n+            TypeTraitItem(_, Some(ref ty)) => self.check_type(cx, ty),\n+            MethodTraitItem(MethodSig { ref decl, .. }, None) => self.check_fndecl(cx, decl),\n             // methods with default impl are covered by check_fn\n             _ => (),\n         }\n@@ -457,55 +467,57 @@ impl LateLintPass for TypeComplexityPass {\n     fn check_impl_item(&mut self, cx: &LateContext, item: &ImplItem) {\n         match item.node {\n             ImplItemKind::Const(ref ty, _) |\n-            ImplItemKind::Type(ref ty) => check_type(cx, ty),\n+            ImplItemKind::Type(ref ty) => self.check_type(cx, ty),\n             // methods are covered by check_fn\n             _ => (),\n         }\n     }\n \n     fn check_local(&mut self, cx: &LateContext, local: &Local) {\n         if let Some(ref ty) = local.ty {\n-            check_type(cx, ty);\n+            self.check_type(cx, ty);\n         }\n     }\n }\n \n-fn check_fndecl(cx: &LateContext, decl: &FnDecl) {\n-    for arg in &decl.inputs {\n-        check_type(cx, &arg.ty);\n-    }\n-    if let Return(ref ty) = decl.output {\n-        check_type(cx, ty);\n+impl TypeComplexityPass {\n+    fn check_fndecl(&self, cx: &LateContext, decl: &FnDecl) {\n+        for arg in &decl.inputs {\n+            self.check_type(cx, &arg.ty);\n+        }\n+        if let Return(ref ty) = decl.output {\n+            self.check_type(cx, ty);\n+        }\n     }\n-}\n \n-fn check_type(cx: &LateContext, ty: &Ty) {\n-    if in_macro(cx, ty.span) {\n-        return;\n-    }\n-    let score = {\n-        let mut visitor = TypeComplexityVisitor {\n-            score: 0,\n-            nest: 1,\n+    fn check_type(&self, cx: &LateContext, ty: &Ty) {\n+        if in_macro(cx, ty.span) {\n+            return;\n+        }\n+        let score = {\n+            let mut visitor = TypeComplexityVisitor {\n+                score: 0,\n+                nest: 1,\n+            };\n+            visitor.visit_ty(ty);\n+            visitor.score\n         };\n-        visitor.visit_ty(ty);\n-        visitor.score\n-    };\n \n-    if score > 250 {\n-        span_lint(cx,\n-                  TYPE_COMPLEXITY,\n-                  ty.span,\n-                  \"very complex type used. Consider factoring parts into `type` definitions\");\n+        if score > self.threshold {\n+            span_lint(cx,\n+                      TYPE_COMPLEXITY,\n+                      ty.span,\n+                      \"very complex type used. Consider factoring parts into `type` definitions\");\n+        }\n     }\n }\n \n /// Walks a type and assigns a complexity score to it.\n struct TypeComplexityVisitor {\n     /// total complexity score of the type\n-    score: u32,\n+    score: u64,\n     /// current nesting level\n-    nest: u32,\n+    nest: u64,\n }\n \n impl<'v> Visitor<'v> for TypeComplexityVisitor {"}]}