{"sha": "b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDlmMzFlMDQzZDBiYTI3ODJhNGJiNzQxNmYxOGM0YmExYzkwNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-05T13:26:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-05T13:26:08Z"}, "message": "Auto merge of #78638 - vn-ki:bindigs-after-at-issue-69971, r=oli-obk\n\nreverse binding order in matches to allow the subbinding of copyable fields in bindings after @\n\nFixes #69971\n\n### TODO\n\n- [x] Regression tests\n\nr? `@oli-obk`", "tree": {"sha": "42842aa22ca61789dfcfbdfe5b784994fc2af5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42842aa22ca61789dfcfbdfe5b784994fc2af5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "html_url": "https://github.com/rust-lang/rust/commit/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7801d6c7cc19ab22bdebcc8efa894a564c53469", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7801d6c7cc19ab22bdebcc8efa894a564c53469", "html_url": "https://github.com/rust-lang/rust/commit/f7801d6c7cc19ab22bdebcc8efa894a564c53469"}, {"sha": "5827fbadf6feaa3da42d7223ac9f10148c827a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5827fbadf6feaa3da42d7223ac9f10148c827a89", "html_url": "https://github.com/rust-lang/rust/commit/5827fbadf6feaa3da42d7223ac9f10148c827a89"}], "stats": {"total": 1163, "additions": 568, "deletions": 595}, "files": [{"sha": "705266d4a0bd80f99cb260d5d0b17922913f7ee1", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -43,12 +43,36 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         candidate: &mut Candidate<'pat, 'tcx>,\n     ) -> bool {\n         // repeatedly simplify match pairs until fixed point is reached\n+        debug!(?candidate, \"simplify_candidate\");\n+\n+        // existing_bindings and new_bindings exists to keep the semantics in order.\n+        // Reversing the binding order for bindings after `@` changes the binding order in places\n+        // it shouldn't be changed, for example `let (Some(a), Some(b)) = (x, y)`\n+        //\n+        // To avoid this, the binding occurs in the following manner:\n+        // * the bindings for one iteration of the following loop occurs in order (i.e. left to\n+        // right)\n+        // * the bindings from the previous iteration of the loop is prepended to the bindings from\n+        // the current iteration (in the implementation this is done by mem::swap and extend)\n+        // * after all iterations, these new bindings are then appended to the bindings that were\n+        // prexisting (i.e. `candidate.binding` when the function was called).\n+        //\n+        // example:\n+        // candidate.bindings = [1, 2, 3]\n+        // binding in iter 1: [4, 5]\n+        // binding in iter 2: [6, 7]\n+        //\n+        // final binding: [1, 2, 3, 6, 7, 4, 5]\n+        let mut existing_bindings = mem::take(&mut candidate.bindings);\n+        let mut new_bindings = Vec::new();\n         loop {\n             let match_pairs = mem::take(&mut candidate.match_pairs);\n \n             if let [MatchPair { pattern: Pat { kind: box PatKind::Or { pats }, .. }, place }] =\n                 *match_pairs\n             {\n+                existing_bindings.extend_from_slice(&new_bindings);\n+                mem::swap(&mut candidate.bindings, &mut existing_bindings);\n                 candidate.subcandidates = self.create_or_subcandidates(candidate, place, pats);\n                 return true;\n             }\n@@ -64,13 +88,33 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                 }\n             }\n+            // Avoid issue #69971: the binding order should be right to left if there are more\n+            // bindings after `@` to please the borrow checker\n+            // Ex\n+            // struct NonCopyStruct {\n+            //     copy_field: u32,\n+            // }\n+            //\n+            // fn foo1(x: NonCopyStruct) {\n+            //     let y @ NonCopyStruct { copy_field: z } = x;\n+            //     // the above should turn into\n+            //     let z = x.copy_field;\n+            //     let y = x;\n+            // }\n+            candidate.bindings.extend_from_slice(&new_bindings);\n+            mem::swap(&mut candidate.bindings, &mut new_bindings);\n+            candidate.bindings.clear();\n+\n             if !changed {\n+                existing_bindings.extend_from_slice(&new_bindings);\n+                mem::swap(&mut candidate.bindings, &mut existing_bindings);\n                 // Move or-patterns to the end, because they can result in us\n                 // creating additional candidates, so we want to test them as\n                 // late as possible.\n                 candidate\n                     .match_pairs\n                     .sort_by_key(|pair| matches!(*pair.pattern.kind, PatKind::Or { .. }));\n+                debug!(simplified = ?candidate, \"simplify_candidate\");\n                 return false; // if we were not able to simplify any, done.\n             }\n         }"}, {"sha": "508e486afec7253ce604ac209312a578e663d274", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-copy.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-copy.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -0,0 +1,49 @@\n+// run-pass\n+\n+// Test copy\n+\n+#![feature(bindings_after_at)]\n+\n+struct A { a: i32, b: i32 }\n+struct B { a: i32, b: C }\n+struct D { a: i32, d: C }\n+#[derive(Copy,Clone)]\n+struct C { c: i32 }\n+\n+pub fn main() {\n+    match (A {a: 10, b: 20}) {\n+        x@A {a, b: 20} => { assert!(x.a == 10); assert!(a == 10); }\n+        A {b: _b, ..} => { panic!(); }\n+    }\n+\n+    let mut x@B {b, ..} = B {a: 10, b: C {c: 20}};\n+    assert_eq!(x.a, 10);\n+    x.b.c = 30;\n+    assert_eq!(b.c, 20);\n+    let mut y@D {d, ..} = D {a: 10, d: C {c: 20}};\n+    assert_eq!(y.a, 10);\n+    y.d.c = 30;\n+    assert_eq!(d.c, 20);\n+\n+    let some_b = Some(B { a: 10, b: C { c: 20 } });\n+\n+    // in irrefutable pattern\n+    if let Some(x @ B { b, .. }) = some_b {\n+        assert_eq!(x.b.c, 20);\n+        assert_eq!(b.c, 20);\n+    } else {\n+        unreachable!();\n+    }\n+\n+    let some_b = Some(B { a: 10, b: C { c: 20 } });\n+\n+    if let Some(x @ B { b: mut b @ C { c }, .. }) = some_b {\n+        assert_eq!(x.b.c, 20);\n+        assert_eq!(b.c, 20);\n+        b.c = 30;\n+        assert_eq!(b.c, 30);\n+        assert_eq!(c, 20);\n+    } else {\n+        unreachable!();\n+    }\n+}"}, {"sha": "71503ecf2622bec748e8b838c64fa642aa21ebd4", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -12,28 +12,28 @@ fn main() {\n     let x = Some(X { x: () });\n     match x {\n         Some(ref _y @ _z) => {} //~ ERROR cannot move out of value because it is borrowed\n+        //~| ERROR borrow of moved value\n         None => panic!(),\n     }\n \n     let x = Some(X { x: () });\n     match x {\n         Some(_z @ ref _y) => {}\n         //~^ ERROR borrow of moved value\n-        //~| ERROR borrow of moved value\n         None => panic!(),\n     }\n \n     let mut x = Some(X { x: () });\n     match x {\n         Some(ref mut _y @ _z) => {} //~ ERROR cannot move out of value because it is borrowed\n+        //~| ERROR borrow of moved value\n         None => panic!(),\n     }\n \n     let mut x = Some(X { x: () });\n     match x {\n         Some(_z @ ref mut _y) => {}\n         //~^ ERROR borrow of moved value\n-        //~| ERROR borrow of moved value\n         None => panic!(),\n     }\n }"}, {"sha": "e50ae3e7eebd30ebde48585294e817948f8188db", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -8,7 +8,7 @@ LL |         Some(ref _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:20:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:14\n    |\n LL |         Some(_z @ ref _y) => {}\n    |              --^^^------\n@@ -27,7 +27,7 @@ LL |         Some(ref mut _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:34:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:14\n    |\n LL |         Some(_z @ ref mut _y) => {}\n    |              --^^^----------\n@@ -37,34 +37,34 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:20:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:14:14\n    |\n-LL |         Some(_z @ ref _y) => {}\n-   |              -----^^^^^^\n-   |              |    |\n-   |              |    value borrowed here after move\n-   |              value moved here\n+LL |         Some(ref _y @ _z) => {}\n+   |              ^^^^^^^^^--\n+   |              |        |\n+   |              |        value moved here\n+   |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `x.0`\n    |\n-LL |         Some(ref _z @ ref _y) => {}\n-   |              ^^^\n+LL |         Some(ref _y @ ref _z) => {}\n+   |                       ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:34:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:28:14\n    |\n-LL |         Some(_z @ ref mut _y) => {}\n-   |              -----^^^^^^^^^^\n-   |              |    |\n-   |              |    value borrowed here after move\n-   |              value moved here\n+LL |         Some(ref mut _y @ _z) => {}\n+   |              ^^^^^^^^^^^^^--\n+   |              |            |\n+   |              |            value moved here\n+   |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `x.0`\n    |\n-LL |         Some(ref _z @ ref mut _y) => {}\n-   |              ^^^\n+LL |         Some(ref mut _y @ ref _z) => {}\n+   |                           ^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "08240db4472ed76ced0354b999d0a0ae096b48ad", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -7,7 +7,7 @@ fn main() {}\n struct A(Box<u8>);\n \n fn f(a @ A(u): A) -> Box<u8> {\n-    //~^ ERROR use of moved value\n+    //~^ ERROR use of partially moved value\n     drop(a);\n     u\n }"}, {"sha": "a77b866d8373d4231f640c18daa3c13fc9f4a686", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,12 +1,13 @@\n-error[E0382]: use of moved value\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:12\n+error[E0382]: use of partially moved value\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:6\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n-   |      ------^-\n+   |      ^^^^^^-^\n    |      |     |\n-   |      |     value used here after move\n-   |      value moved here\n-   |      move occurs because value has type `A`, which does not implement the `Copy` trait\n+   |      |     value partially moved here\n+   |      value used here after partial move\n+   |\n+   = note: partial move occurs because value has type `Box<u8>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "bce43f9df85c841d84b27aaabfb02bd9186a03e9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -12,9 +12,9 @@ fn main() {\n \n     let a @ b = U; //~ ERROR use of moved value\n \n-    let a @ (b, c) = (U, U); //~ ERROR use of moved value\n+    let a @ (b, c) = (U, U); //~ ERROR use of partially moved value\n \n-    let a @ (b, c) = (u(), u()); //~ ERROR use of moved value\n+    let a @ (b, c) = (u(), u()); //~ ERROR use of partially moved value\n \n     match Ok(U) {\n         a @ Ok(b) | a @ Err(b) => {} //~ ERROR use of moved value\n@@ -24,10 +24,10 @@ fn main() {\n     fn fun(a @ b: U) {} //~ ERROR use of moved value\n \n     match [u(), u(), u(), u()] {\n-        xs @ [a, .., b] => {} //~ ERROR use of moved value\n+        xs @ [a, .., b] => {} //~ ERROR use of partially moved value\n     }\n \n     match [u(), u(), u(), u()] {\n-        xs @ [_, ys @ .., _] => {} //~ ERROR use of moved value\n+        xs @ [_, ys @ .., _] => {} //~ ERROR use of partially moved value\n     }\n }"}, {"sha": "bfb7b479731a6d91db7491a64a4189abfc858dd4", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,29 +1,33 @@\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:13:13\n+  --> $DIR/borrowck-move-and-move.rs:13:9\n    |\n LL |     let a @ b = U;\n-   |         ----^   - move occurs because value has type `U`, which does not implement the `Copy` trait\n+   |         ^^^^-   - move occurs because value has type `U`, which does not implement the `Copy` trait\n    |         |   |\n-   |         |   value used here after move\n-   |         value moved here\n+   |         |   value moved here\n+   |         value used here after move\n \n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:15:17\n+error[E0382]: use of partially moved value\n+  --> $DIR/borrowck-move-and-move.rs:15:9\n    |\n LL |     let a @ (b, c) = (U, U);\n-   |         --------^-   ------ move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n+   |         ^^^^^^^^-^\n    |         |       |\n-   |         |       value used here after move\n-   |         value moved here\n+   |         |       value partially moved here\n+   |         value used here after partial move\n+   |\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:17:17\n+error[E0382]: use of partially moved value\n+  --> $DIR/borrowck-move-and-move.rs:17:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n-   |         --------^-   ---------- move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n+   |         ^^^^^^^^-^\n    |         |       |\n-   |         |       value used here after move\n-   |         value moved here\n+   |         |       value partially moved here\n+   |         value used here after partial move\n+   |\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:20:16\n@@ -47,36 +51,36 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     |       value used here after move\n    |                     value moved here\n \n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:27:22\n+error[E0382]: use of partially moved value\n+  --> $DIR/borrowck-move-and-move.rs:27:9\n    |\n-LL |     match [u(), u(), u(), u()] {\n-   |           -------------------- move occurs because value has type `[U; 4]`, which does not implement the `Copy` trait\n LL |         xs @ [a, .., b] => {}\n-   |         -------------^-\n+   |         ^^^^^^^^^^^^^-^\n    |         |            |\n-   |         |            value used here after move\n-   |         value moved here\n+   |         |            value partially moved here\n+   |         value used here after partial move\n+   |\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:31:18\n+error[E0382]: use of partially moved value\n+  --> $DIR/borrowck-move-and-move.rs:31:9\n    |\n-LL |     match [u(), u(), u(), u()] {\n-   |           -------------------- move occurs because value has type `[U; 4]`, which does not implement the `Copy` trait\n LL |         xs @ [_, ys @ .., _] => {}\n-   |         ---------^^^^^^^----\n+   |         ^^^^^^^^^-------^^^^\n    |         |        |\n-   |         |        value used here after move\n-   |         value moved here\n+   |         |        value partially moved here\n+   |         value used here after partial move\n+   |\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:24:16\n+  --> $DIR/borrowck-move-and-move.rs:24:12\n    |\n LL |     fn fun(a @ b: U) {}\n-   |            ----^\n+   |            ^^^^-\n    |            |   |\n-   |            |   value used here after move\n-   |            value moved here\n+   |            |   value moved here\n+   |            value used here after move\n    |            move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error: aborting due to 8 previous errors"}, {"sha": "07fac1d363133a809e11b83749745c56c92731a2", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -18,53 +18,51 @@ fn nc() -> NC {\n \n fn main() {\n     let a @ box &b = Box::new(&C);\n-    //~^ ERROR use of moved value\n \n     let a @ box b = Box::new(C);\n-    //~^ ERROR use of moved value\n \n     fn f1(a @ box &b: Box<&C>) {}\n-    //~^ ERROR use of moved value\n \n     fn f2(a @ box b: Box<C>) {}\n-    //~^ ERROR use of moved value\n \n     match Box::new(C) {\n-        a @ box b => {} //~ ERROR use of moved value\n+        a @ box b => {}\n     }\n \n     let ref a @ box b = Box::new(NC); //~ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of moved value\n \n     let ref a @ box ref mut b = Box::new(nc());\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     *b = NC;\n     let ref a @ box ref mut b = Box::new(NC);\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n-    //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     *b = NC;\n     drop(a);\n \n     let ref mut a @ box ref b = Box::new(NC);\n     //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-    //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+    //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     *a = Box::new(NC);\n     drop(b);\n \n     fn f5(ref mut a @ box ref b: Box<NC>) {\n         //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n         *a = Box::new(NC);\n         drop(b);\n     }\n \n     match Box::new(nc()) {\n         ref mut a @ box ref b => {\n             //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-            //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+            //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n             *a = Box::new(NC);\n             drop(b);\n         }"}, {"sha": "83da16a72a7ba5d11b24dc91660015d4fd79d476", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 47, "deletions": 73, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-at-and-box.rs:36:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         -----^^^^^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         value borrowed, by `a`, here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:35:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:40:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:37:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:45:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:51:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:49:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -53,7 +53,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:65:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:63:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n@@ -62,112 +62,86 @@ LL |         ref mut a @ box ref b => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:57:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:55:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n    |           |               |\n    |           |               immutable borrow, by `b`, occurs here\n    |           mutable borrow, by `a`, occurs here\n \n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:20:18\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n    |\n-LL |     let a @ box &b = Box::new(&C);\n-   |         ---------^   ------------ move occurs because value has type `Box<&C>`, which does not implement the `Copy` trait\n-   |         |        |\n-   |         |        value used here after move\n-   |         value moved here\n-\n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:23:17\n+LL |     let ref a @ box b = Box::new(NC);\n+   |         ^^^^^^^^^^^^-\n+   |         |           |\n+   |         |           value moved here\n+   |         value borrowed here after move\n    |\n-LL |     let a @ box b = Box::new(C);\n-   |         --------^   ----------- move occurs because value has type `Box<C>`, which does not implement the `Copy` trait\n-   |         |       |\n-   |         |       value used here after move\n-   |         value moved here\n+   = note: move occurs because value has type `NC`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:33:17\n+error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n    |\n-LL |     match Box::new(C) {\n-   |           ----------- move occurs because value has type `Box<C>`, which does not implement the `Copy` trait\n-LL |         a @ box b => {}\n-   |         --------^\n-   |         |       |\n-   |         |       value used here after move\n-   |         value moved here\n+LL |     let ref a @ box ref mut b = Box::new(NC);\n+   |         ^^^^^^^^^^^^---------\n+   |         |           |\n+   |         |           mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |     *b = NC;\n+   |     ------- mutable borrow later used here\n \n-error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:45:21\n+error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n-   |         ------------^^^^^^^^^\n+   |         ^^^^^^^^^^^^---------\n    |         |           |\n    |         |           mutable borrow occurs here\n    |         immutable borrow occurs here\n ...\n-LL |     drop(a);\n-   |          - immutable borrow later used here\n+LL |     *b = NC;\n+   |     ------- mutable borrow later used here\n \n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:51:25\n+error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:49:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n-   |         ----------------^^^^^\n+   |         ^^^^^^^^^^^^^^^^-----\n    |         |               |\n    |         |               immutable borrow occurs here\n    |         mutable borrow occurs here\n ...\n-LL |     *a = Box::new(NC);\n-   |     -- mutable borrow later used here\n+LL |     drop(b);\n+   |          - immutable borrow later used here\n \n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:65:25\n+error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:63:9\n    |\n LL |         ref mut a @ box ref b => {\n-   |         ----------------^^^^^\n+   |         ^^^^^^^^^^^^^^^^-----\n    |         |               |\n    |         |               immutable borrow occurs here\n    |         mutable borrow occurs here\n ...\n-LL |             *a = Box::new(NC);\n-   |             -- mutable borrow later used here\n+LL |             drop(b);\n+   |                  - immutable borrow later used here\n \n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:26:20\n-   |\n-LL |     fn f1(a @ box &b: Box<&C>) {}\n-   |           ---------^\n-   |           |        |\n-   |           |        value used here after move\n-   |           value moved here\n-   |           move occurs because value has type `Box<&C>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:29:19\n-   |\n-LL |     fn f2(a @ box b: Box<C>) {}\n-   |           --------^\n-   |           |       |\n-   |           |       value used here after move\n-   |           value moved here\n-   |           move occurs because value has type `Box<C>`, which does not implement the `Copy` trait\n-\n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:57:27\n+error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:55:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n-   |           ----------------^^^^^\n+   |           ^^^^^^^^^^^^^^^^-----\n    |           |               |\n    |           |               immutable borrow occurs here\n    |           mutable borrow occurs here\n ...\n-LL |         *a = Box::new(NC);\n-   |         -- mutable borrow later used here\n+LL |         drop(b);\n+   |              - immutable borrow later used here\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0382, E0502.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "8a574f880ed8d0b9c2a6f9f9e667fd4ace4aa53f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -12,44 +12,33 @@ fn main() {\n \n     fn f1(a @ ref b: U) {}\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n \n     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n     //~^ ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n-    //~| ERROR use of moved value\n+    //~| ERROR use of partially moved value\n     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n \n     let a @ ref b = U;\n     //~^ ERROR borrow of moved value\n     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n     //~^ ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n-    //~| ERROR use of moved value\n+    //~| ERROR use of partially moved value\n     let a @ [ref mut b, ref c] = [U, U];\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n     let a @ ref b = u();\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n     //~^ ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n-    //~| ERROR use of moved value\n+    //~| ERROR use of partially moved value\n     let a @ [ref mut b, ref c] = [u(), u()];\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n \n     match Some(U) {\n         a @ Some(ref b) => {}\n@@ -61,8 +50,6 @@ fn main() {\n         //~^ ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n-        //~| ERROR borrow of moved value\n-        //~| ERROR borrow of moved value\n         //~| ERROR use of moved value\n         None => {}\n     }\n@@ -83,8 +70,6 @@ fn main() {\n         //~^ ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n-        //~| ERROR borrow of moved value\n-        //~| ERROR borrow of moved value\n         //~| ERROR use of moved value\n         None => {}\n     }"}, {"sha": "79addf9d574b673f78cb18770d8de5573fc0a9ce", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 48, "deletions": 216, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,5 +1,5 @@\n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:28:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----\n@@ -9,7 +9,7 @@ LL |     let a @ ref b = U;\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -20,7 +20,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              -----^^^---------\n@@ -30,7 +30,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 -^^^-----\n@@ -40,7 +40,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:37:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n    |\n LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         -^^^^---------^^-----^\n@@ -51,7 +51,7 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n    |\n LL |     let a @ ref b = u();\n    |         -^^^-----\n@@ -61,7 +61,7 @@ LL |     let a @ ref b = u();\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -72,7 +72,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              -----^^^---------\n@@ -82,7 +82,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 -^^^-----\n@@ -92,7 +92,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:50:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:9\n    |\n LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         -^^^^---------^^-----^\n@@ -103,7 +103,7 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -113,7 +113,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -124,7 +124,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -134,7 +134,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -144,7 +144,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:70:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:57:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -155,7 +155,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:76:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -165,7 +165,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -176,7 +176,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -186,7 +186,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -196,7 +196,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:92:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -217,7 +217,7 @@ LL |     fn f1(a @ ref b: U) {}\n    |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           -----^^^^^^^^-----^^^^^^^^^^-----^\n@@ -228,7 +228,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:20\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:20\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    -^^^-----\n@@ -238,7 +238,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:31\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:31\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               -----^^^-----\n@@ -248,7 +248,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:21:11\n    |\n LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           -^^^^---------^^-----^\n@@ -258,112 +258,30 @@ LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           value moved into `a` here\n    |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:22\n-   |\n-LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |              --------^^^^^^^^^\n-   |              |       |\n-   |              |       value borrowed here after move\n-   |              value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:33\n+error[E0382]: use of partially moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |         ------------------------^^^^^^^^^-   ------ move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n    |         |                       |\n-   |         |                       value used here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:37\n+   |         |                       value partially moved here\n+   |         value used here after partial move\n    |\n-LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |                                 ----^^^^^\n-   |                                 |   |\n-   |                                 |   value borrowed here after move\n-   |                                 value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:37:25\n-   |\n-LL |     let a @ [ref mut b, ref c] = [U, U];\n-   |         ----------------^^^^^-   ------ move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait\n-   |         |               |\n-   |         |               value borrowed here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:13\n-   |\n-LL |     let a @ ref b = u();\n-   |         ----^^^^^   --- move occurs because value has type `U`, which does not implement the `Copy` trait\n-   |         |   |\n-   |         |   value borrowed here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:22\n+error[E0382]: use of partially moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |              --------^^^^^^^^^\n-   |              |       |\n-   |              |       value borrowed here after move\n-   |              value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:33\n-   |\n-LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |         ------------------------^^^^^^^^^-   ---------- move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n    |         |                       |\n-   |         |                       value used here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:37\n+   |         |                       value partially moved here\n+   |         value used here after partial move\n    |\n-LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |                                 ----^^^^^\n-   |                                 |   |\n-   |                                 |   value borrowed here after move\n-   |                                 value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:50:25\n-   |\n-LL |     let a @ [ref mut b, ref c] = [u(), u()];\n-   |         ----------------^^^^^-   ---------- move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait\n-   |         |               |\n-   |         |               value borrowed here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:27\n-   |\n-LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                   --------^^^^^^^^^\n-   |                   |       |\n-   |                   |       value borrowed here after move\n-   |                   value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n-   |                   ^^^\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:38\n    |\n LL |     match Some((U, U)) {\n    |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -374,22 +292,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:42\n-   |\n-LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                                      ----^^^^^\n-   |                                      |   |\n-   |                                      |   value borrowed here after move\n-   |                                      value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n-   |                                      ^^^\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:70:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:57:30\n    |\n LL |     match Some([U, U]) {\n    |           ------------ move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -400,7 +303,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:76:18\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:18\n    |\n LL |     match Some(u()) {\n    |           --------- move occurs because value has type `Option<U>`, which does not implement the `Copy` trait\n@@ -410,23 +313,8 @@ LL |         a @ Some(ref b) => {}\n    |         |        value borrowed here after move\n    |         value moved here\n \n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:27\n-   |\n-LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                   --------^^^^^^^^^\n-   |                   |       |\n-   |                   |       value borrowed here after move\n-   |                   value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n-   |                   ^^^\n-\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n    |\n LL |     match Some((u(), u())) {\n    |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -437,22 +325,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:42\n-   |\n-LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                                      ----^^^^^\n-   |                                      |   |\n-   |                                      |   value borrowed here after move\n-   |                                      value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n-   |                                      ^^^\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:92:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:30\n    |\n LL |     match Some([u(), u()]) {\n    |           ---------------- move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -462,58 +335,17 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |                    value borrowed here after move\n    |         value moved here\n \n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:13:15\n-   |\n-LL |     fn f1(a @ ref b: U) {}\n-   |           ----^^^^^\n-   |           |   |\n-   |           |   value borrowed here after move\n-   |           value moved here\n-   |           move occurs because value has type `U`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:24\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                    ----^^^^^\n-   |                    |   |\n-   |                    |   value borrowed here after move\n-   |                    value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:31\n+error[E0382]: use of partially moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           --------------------^^^^^^^^^^^^^-\n+   |           ^^^^^^^^^^^^^^^^^^^^-------------^\n    |           |                   |\n-   |           |                   value used here after move\n-   |           value moved here\n-   |           move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:39\n+   |           |                   value partially moved here\n+   |           value used here after partial move\n    |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                               --------^^^^^\n-   |                               |       |\n-   |                               |       value borrowed here after move\n-   |                               value moved here\n-   |\n-   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:27\n-   |\n-LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n-   |           ----------------^^^^^-\n-   |           |               |\n-   |           |               value borrowed here after move\n-   |           value moved here\n-   |           move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 48 previous errors\n+error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "b9235eabd88f43dbd622e683a7b1a6554a269f6e", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -12,12 +12,16 @@ fn main() {\n \n     fn f1(ref a @ b: U) {}\n     //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of moved value\n     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n     //~^ ERROR cannot move out of value because it is borrowed\n     //~| ERROR cannot move out of value because it is borrowed\n     //~| ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n     //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of partially moved value\n \n     let ref a @ b = U;\n     //~^ ERROR cannot move out of value because it is borrowed\n@@ -27,14 +31,19 @@ fn main() {\n     //~| ERROR cannot move out of value because it is borrowed\n     let ref mut a @ [b, mut c] = [U, U];\n     //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of partially moved value\n     let ref a @ b = u();\n     //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of moved value\n     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n     //~^ ERROR cannot move out of value because it is borrowed\n     //~| ERROR cannot move out of value because it is borrowed\n     //~| ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n     let ref mut a @ [b, mut c] = [u(), u()];\n     //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of partially moved value\n \n     match Some(U) {\n         ref a @ Some(b) => {}\n@@ -63,6 +72,8 @@ fn main() {\n         //~^ ERROR cannot move out of value because it is borrowed\n         //~| ERROR cannot move out of value because it is borrowed\n         //~| ERROR cannot move out of value because it is borrowed\n+        //~| ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n         None => {}\n     }\n     match Some([u(), u()]) {"}, {"sha": "50b2f8929f2251794dbee3687f39704bef8cfd05", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 152, "deletions": 25, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:9\n    |\n LL |     let ref a @ b = U;\n    |         -----^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ b = U;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -18,7 +18,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  -----^^^-----\n@@ -27,7 +27,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 -----^^^-\n@@ -36,7 +36,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ---------^^^^-^^-----^\n@@ -46,7 +46,7 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:35:9\n    |\n LL |     let ref a @ b = u();\n    |         -----^^^-\n@@ -55,7 +55,7 @@ LL |     let ref a @ b = u();\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -65,7 +65,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  -----^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 -----^^^-\n@@ -83,7 +83,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:44:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ---------^^^^-^^-----^\n@@ -93,7 +93,7 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:40:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:49:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -102,7 +102,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:45:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -112,7 +112,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:45:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -121,7 +121,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:45:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -130,7 +130,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:61:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -140,7 +140,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:57:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:66:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -149,7 +149,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:62:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -159,7 +159,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:62:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -168,7 +168,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:62:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -177,7 +177,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:80:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -196,7 +196,7 @@ LL |     fn f1(ref a @ b: U) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:15:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:11\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -206,7 +206,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:15:20\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    -----^^^-----\n@@ -215,7 +215,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:15:35\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   -----^^^-\n@@ -224,7 +224,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:19:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ---------^^^^-^^-----^\n@@ -233,5 +233,132 @@ LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           |            value moved into `b` here\n    |           value borrowed, by `a`, here\n \n-error: aborting due to 25 previous errors\n+error[E0382]: borrow of partially moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n+   |\n+LL |     let ref mut a @ [b, mut c] = [U, U];\n+   |         ^^^^^^^^^^^^^^^^-----^\n+   |         |               |\n+   |         |               value partially moved here\n+   |         value borrowed here after partial move\n+   |\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:35:9\n+   |\n+LL |     let ref a @ b = u();\n+   |         ^^^^^^^^-   --- move occurs because value has type `U`, which does not implement the `Copy` trait\n+   |         |       |\n+   |         |       value moved here\n+   |         value borrowed here after move\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:18\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n+   |                  ^^^^^^^^-----\n+   |                  |       |\n+   |                  |       value moved here\n+   |                  value borrowed here after move\n+   |\n+   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:33\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n+   |                                 ^^^^^^^^-\n+   |                                 |       |\n+   |                                 |       value moved here\n+   |                                 value borrowed here after move\n+   |\n+   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of partially moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:44:9\n+   |\n+LL |     let ref mut a @ [b, mut c] = [u(), u()];\n+   |         ^^^^^^^^^^^^^^^^-----^\n+   |         |               |\n+   |         |               value partially moved here\n+   |         value borrowed here after partial move\n+   |\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |                       ^^^^^^^^-----\n+   |                       |       |\n+   |                       |       value moved here\n+   |                       value borrowed here after move\n+   |\n+   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((ref b @ ref mut c, ref d @ e)) => {}\n+   |                               ^^^\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |                                      ^^^^^^^^-\n+   |                                      |       |\n+   |                                      |       value moved here\n+   |                                      value borrowed here after move\n+   |\n+   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n+   |                                              ^^^\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n+   |\n+LL |     fn f1(ref a @ b: U) {}\n+   |           ^^^^^^^^-\n+   |           |       |\n+   |           |       value moved here\n+   |           value borrowed here after move\n+   |           move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                    ^^^^^^^^-----\n+   |                    |       |\n+   |                    |       value moved here\n+   |                    value borrowed here after move\n+   |\n+   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                                   ^^^^^^^^-\n+   |                                   |       |\n+   |                                   |       value moved here\n+   |                                   value borrowed here after move\n+   |\n+   = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of partially moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:11\n+   |\n+LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n+   |           ^^^^^^^^^^^^^^^^-----^\n+   |           |               |\n+   |           |               value partially moved here\n+   |           value borrowed here after partial move\n+   |\n+   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error: aborting due to 36 previous errors\n \n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "2d391cd7d0722ee97fcfc0f9bf31da76da4d57cf", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -30,6 +30,7 @@ fn main() {\n     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     //~| ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of moved value\n \n     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n     //~^ ERROR cannot borrow value as mutable more than once at a time\n@@ -46,12 +47,12 @@ fn main() {\n \n     let ref mut a @ ref b = u();\n     //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-    //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+    //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     *a = u();\n     drop(b);\n     let ref a @ ref mut b = u();\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n-    //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     *b = u();\n     drop(a);\n \n@@ -117,20 +118,20 @@ fn main() {\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     *b = U;\n     *c = U;\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n     //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n-    //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n-    //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     *b = U;\n     drop(a);\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     *b = U; //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n-    *c = U; //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    *c = U;\n     drop(a);\n     let ref mut a @ (ref b, ref c) = (U, U);\n     //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable"}, {"sha": "00136c2576423cf52bbddde3a05f9fcbe299d350", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 72, "deletions": 74, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -8,7 +8,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow, by `z`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n@@ -18,7 +18,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n@@ -27,7 +27,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      immutable borrow, by `b`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:38:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -36,7 +36,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:40:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -45,7 +45,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:42:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -55,7 +55,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:44:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -65,7 +65,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:47:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:52:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -83,7 +83,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:58:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -92,7 +92,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:62:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:63:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -101,7 +101,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -110,7 +110,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -119,7 +119,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -128,7 +128,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -137,7 +137,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:88:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -146,7 +146,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:88:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -155,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:95:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -164,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:95:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -173,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -182,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:118:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:130:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:135:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:136:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -306,32 +306,32 @@ LL |         ref mut z @ &mut Some(ref a) => {\n LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:47:21\n+error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n    |\n LL |     let ref mut a @ ref b = u();\n-   |         ------------^^^^^\n+   |         ^^^^^^^^^^^^-----\n    |         |           |\n    |         |           immutable borrow occurs here\n    |         mutable borrow occurs here\n ...\n-LL |     *a = u();\n-   |     -------- mutable borrow later used here\n+LL |     drop(b);\n+   |          - immutable borrow later used here\n \n-error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:52:17\n+error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n    |\n LL |     let ref a @ ref mut b = u();\n-   |         --------^^^^^^^^^\n+   |         ^^^^^^^^---------\n    |         |       |\n    |         |       mutable borrow occurs here\n    |         immutable borrow occurs here\n ...\n-LL |     drop(a);\n-   |          - immutable borrow later used here\n+LL |     *b = u();\n+   |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -343,7 +343,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -355,102 +355,100 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:88:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:95:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:18\n+error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         ---------^^^^^^^^^------------\n+   |         ^^^^^^^^^---------^^^^^^^^^^^^\n    |         |        |\n    |         |        mutable borrow occurs here\n    |         immutable borrow occurs here\n ...\n-LL |     drop(a);\n-   |          - immutable borrow later used here\n+LL |     *b = U;\n+   |     ------ mutable borrow later used here\n \n-error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:29\n+error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         --------------------^^^^^^^^^-\n-   |         |                   |\n-   |         |                   mutable borrow occurs here\n+   |         ^^^^^^^^^---------^^^^^^^^^^^^\n+   |         |        |\n+   |         |        mutable borrow occurs here\n    |         immutable borrow occurs here\n ...\n-LL |     drop(a);\n-   |          - immutable borrow later used here\n+LL |     *b = U;\n+   |     ------ mutable borrow later used here\n \n-error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:130:18\n+error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         ---------^^^^^^^^^------------\n+   |         ^^^^^^^^^---------^^^^^^^^^^^^\n    |         |        |\n    |         |        mutable borrow occurs here\n    |         immutable borrow occurs here\n-...\n-LL |     drop(a);\n-   |          - immutable borrow later used here\n+LL |\n+LL |     *b = U;\n+   |     ------ mutable borrow later used here\n \n-error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:130:29\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:30\n    |\n-LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         --------------------^^^^^^^^^-\n-   |         |                   |\n-   |         |                   mutable borrow occurs here\n-   |         immutable borrow occurs here\n-...\n-LL |     drop(a);\n-   |          - immutable borrow later used here\n+LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+   |                      --------^^^^^^^^^^^^-\n+   |                      |       |           |\n+   |                      |       |           value moved here\n+   |                      |       value borrowed here after move\n+   |                      move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error: aborting due to 47 previous errors\n \n-Some errors have detailed explanations: E0502, E0507, E0594.\n-For more information about an error, try `rustc --explain E0502`.\n+Some errors have detailed explanations: E0382, E0502, E0507, E0594.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "339814e1e3167278085f400ad4e74bec7897902d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -23,23 +23,24 @@ fn main() {\n     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n     //~^ ERROR cannot borrow value as mutable more than once at a time\n     //~| ERROR cannot move out of value because it is borrowed\n+    //~| ERROR borrow of moved value\n \n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow value as mutable more than once at a time\n-    //~| ERROR cannot borrow value as mutable more than once at a time\n     drop(a);\n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow value as mutable more than once at a time\n+    //~| ERROR cannot borrow value as mutable more than once at a time\n     drop(b);\n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow value as mutable more than once at a time\n \n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow value as mutable more than once at a time\n-    //~| ERROR cannot borrow value as mutable more than once at a time\n     *a = U;\n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow value as mutable more than once at a time\n+    //~| ERROR cannot borrow value as mutable more than once at a time\n     *b = U;\n \n     let ref mut a @ (\n@@ -64,18 +65,14 @@ fn main() {\n \n     let a @ (ref mut b, ref mut c) = (U, U);\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n     let mut val = (U, [U, U]);\n     let a @ (b, [c, d]) = &mut val; // Same as ^--\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n \n     let a @ &mut ref mut b = &mut U;\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n     //~^ ERROR borrow of moved value\n-    //~| ERROR borrow of moved value\n \n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {"}, {"sha": "0370037f24210d9765a25f95462621ef8c5e71b7", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 41, "deletions": 67, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:27:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:34:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:45:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:46:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -66,7 +66,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:55:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:56:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -88,7 +88,7 @@ LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         -^^^^---------^^---------^\n@@ -111,7 +111,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         move occurs because `a` has type `&mut (U, [U; 2])` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         -^^^^^^^^---------\n@@ -121,7 +121,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         move occurs because `a` has type `&mut U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         -^^^^^^^^^---------^^---------^\n@@ -132,7 +132,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         move occurs because `a` has type `&mut (U, U)` which does not implement the `Copy` trait\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:81:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -141,7 +141,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:81:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -150,7 +150,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:87:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -159,7 +159,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:87:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -168,7 +168,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -177,7 +177,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -186,7 +186,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -195,7 +195,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -259,67 +259,31 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  value borrowed, by `b`, here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:27:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ------------^^^^^^^^^\n+   |         ^^^^^^^^^^^^---------\n    |         |           |\n-   |         |           second mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |           first mutable borrow occurs here\n+   |         second mutable borrow occurs here\n ...\n-LL |     drop(a);\n+LL |     drop(b);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ------------^^^^^^^^^\n+   |         ^^^^^^^^^^^^---------\n    |         |           |\n-   |         |           second mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |           first mutable borrow occurs here\n+   |         second mutable borrow occurs here\n ...\n-LL |     *a = U;\n+LL |     *b = U;\n    |     ------ first borrow later used here\n \n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:25\n-   |\n-LL |     let a @ (ref mut b, ref mut c) = (U, U);\n-   |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n-   |         |               |\n-   |         |               value borrowed here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:69:21\n-   |\n-LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n-   |         ------------^--   -------- move occurs because value has type `&mut (U, [U; 2])`, which does not implement the `Copy` trait\n-   |         |           |\n-   |         |           value borrowed here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:18\n-   |\n-LL |     let a @ &mut ref mut b = &mut U;\n-   |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut U`, which does not implement the `Copy` trait\n-   |         |        |\n-   |         |        value borrowed here after move\n-   |         value moved here\n-\n-error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:30\n-   |\n-LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n-   |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (U, U)`, which does not implement the `Copy` trait\n-   |         |                    |\n-   |         |                    value borrowed here after move\n-   |         value moved here\n-\n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -331,7 +295,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -343,7 +307,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -355,7 +319,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -366,7 +330,17 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n LL |             drop(a);\n    |                  - first borrow later used here\n \n-error: aborting due to 34 previous errors\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:34\n+   |\n+LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+   |                      ------------^^^^^^^^^^^^-\n+   |                      |           |           |\n+   |                      |           |           value moved here\n+   |                      |           value borrowed here after move\n+   |                      move occurs because value has type `U`, which does not implement the `Copy` trait\n+\n+error: aborting due to 31 previous errors\n \n Some errors have detailed explanations: E0382, E0499.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "f731aa2e96327415c53d730954aeb738925076e8", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -8,10 +8,9 @@ struct C;\n struct NC<A, B>(A, B);\n \n fn main() {\n+    // this compiles\n     let a @ NC(b, c) = NC(C, C);\n-    //~^ ERROR use of moved value\n \n     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n-    //~^ ERROR use of moved value\n-    //~| ERROR use of moved value\n+    //~^ ERROR use of partially moved value\n }"}, {"sha": "183a37176ec6c070ae994bb5afae8adaa754b851", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,32 +1,14 @@\n-error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:11:19\n-   |\n-LL |     let a @ NC(b, c) = NC(C, C);\n-   |         ----------^-   -------- move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n-   |         |         |\n-   |         |         value used here after move\n-   |         value moved here\n-\n-error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:14:19\n+error[E0382]: use of partially moved value\n+  --> $DIR/copy-and-move-mixed.rs:14:9\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n-   |         ----------^^^^^^^^^^^^-   --------------- move occurs because value has type `NC<C, NC<C, C>>`, which does not implement the `Copy` trait\n+   |         ^^^^^^^^^^------------^\n    |         |         |\n-   |         |         value used here after move\n-   |         value moved here\n-\n-error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:14:29\n-   |\n-LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n-   |                   ----------^-\n-   |                   |         |\n-   |                   |         value used here after move\n-   |                   value moved here\n+   |         |         value partially moved here\n+   |         value used here after partial move\n    |\n-   = note: move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "c15167e717592e82863764101ec4e3960a8928d1", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let _a: &NotCopy = a;\n     let _b: NotCopy = b;\n     let ref mut a @ b = NotCopy; //~ ERROR cannot move out of value because it is borrowed\n-    //~^ ERROR cannot move out of value because it is borrowed\n+    //~^ ERROR borrow of moved value\n     let _a: &NotCopy = a;\n     let _b: NotCopy = b;\n     match Ok(NotCopy) {"}, {"sha": "a41fec7a3f86d89fecb03f4310d21aa436c8f4a5", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -44,18 +44,15 @@ LL |         ref a @ b => {\n    |         |       value moved into `b` here\n    |         value borrowed, by `a`, here\n \n-error[E0505]: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:30:21\n+error[E0382]: borrow of moved value\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:30:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n-   |         ------------^\n+   |         ^^^^^^^^^^^^-   ------- move occurs because value has type `NotCopy`, which does not implement the `Copy` trait\n    |         |           |\n-   |         |           move out of value occurs here\n-   |         borrow of value occurs here\n-LL |\n-LL |     let _a: &NotCopy = a;\n-   |                        - borrow later used here\n+   |         |           value moved here\n+   |         value borrowed here after move\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0505`.\n+For more information about this error, try `rustc --explain E0382`."}]}