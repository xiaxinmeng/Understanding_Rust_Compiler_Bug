{"sha": "fca76de7cac7e116eb1a573888dc510c0820694c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTc2ZGU3Y2FjN2UxMTZlYjFhNTczODg4ZGM1MTBjMDgyMDY5NGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T23:12:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T23:12:16Z"}, "message": "Auto merge of #5651 - ebroto:names_as_early_passes, r=flip1995\n\nRegister redundant_field_names and non_expressive_names as early passes\n\nSimilar names was moved to a pre-expansion pass to solve #2927, so I'm avoiding linting on code from expansion, which makes the dogfood (mostly, see below) pass.\n\nI had to change new_without_default though, and although I understand why it was not triggering before, TBH I don't see why the binding inside the nested `if_chain` is being linted now. Any ideas? (it seems legit though as the code can be changed by the user)\n\nchangelog: Register redundant_field_names and non_expressive_names as early passes\n\nFixes #5356\nFixes #5521", "tree": {"sha": "2fdb717babbfcf972ddc396f4e1cccfac0efafb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fdb717babbfcf972ddc396f4e1cccfac0efafb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca76de7cac7e116eb1a573888dc510c0820694c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca76de7cac7e116eb1a573888dc510c0820694c", "html_url": "https://github.com/rust-lang/rust/commit/fca76de7cac7e116eb1a573888dc510c0820694c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca76de7cac7e116eb1a573888dc510c0820694c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5324257aac954e696158fb3801e67ceebd604eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/5324257aac954e696158fb3801e67ceebd604eda", "html_url": "https://github.com/rust-lang/rust/commit/5324257aac954e696158fb3801e67ceebd604eda"}, {"sha": "416182347589e9503408136747593ff95fb9dd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/416182347589e9503408136747593ff95fb9dd13", "html_url": "https://github.com/rust-lang/rust/commit/416182347589e9503408136747593ff95fb9dd13"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "902f3d56c1e4f6fb9d286acc0d3484120341683b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fca76de7cac7e116eb1a573888dc510c0820694c", "patch": "@@ -346,13 +346,8 @@ mod reexport {\n /// level (i.e `#![cfg_attr(...)]`) will still be expanded even when using a pre-expansion pass.\n ///\n /// Used in `./src/driver.rs`.\n-pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, conf: &Conf) {\n+pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore) {\n     store.register_pre_expansion_pass(|| box write::Write::default());\n-    store.register_pre_expansion_pass(|| box redundant_field_names::RedundantFieldNames);\n-    let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n-    store.register_pre_expansion_pass(move || box non_expressive_names::NonExpressiveNames {\n-        single_char_binding_names_threshold,\n-    });\n     store.register_pre_expansion_pass(|| box attrs::EarlyAttributes);\n     store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n }\n@@ -1066,6 +1061,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n     store.register_early_pass(|| box manual_non_exhaustive::ManualNonExhaustive);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n+    store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n+    let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n+    store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n+        single_char_binding_names_threshold,\n+    });\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),"}, {"sha": "e556e5d59c188d02031ace0d36f258953e7a3ab4", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=fca76de7cac7e116eb1a573888dc510c0820694c", "patch": "@@ -90,8 +90,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             return;\n                         }\n                         if sig.decl.inputs.is_empty() && name == sym!(new) && cx.access_levels.is_reachable(id) {\n-                            let self_did = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n-                            let self_ty = cx.tcx.type_of(self_did);\n+                            let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n+                            let self_ty = cx.tcx.type_of(self_def_id);\n                             if_chain! {\n                                 if same_tys(cx, self_ty, return_ty(cx, id));\n                                 if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n@@ -112,10 +112,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                     // generics\n                                     if_chain! {\n                                         if let Some(ref impling_types) = self.impling_types;\n-                                        if let Some(self_def) = cx.tcx.type_of(self_did).ty_adt_def();\n-                                        if let Some(self_def_id) = self_def.did.as_local();\n+                                        if let Some(self_def) = cx.tcx.type_of(self_def_id).ty_adt_def();\n+                                        if let Some(self_local_did) = self_def.did.as_local();\n                                         then {\n-                                            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_def_id);\n+                                            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n                                             if impling_types.contains(&self_id) {\n                                                 return;\n                                             }"}, {"sha": "5f14fe97afefad36255744823e9fe5799ea680d5", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=fca76de7cac7e116eb1a573888dc510c0820694c", "patch": "@@ -5,6 +5,7 @@ use rustc_ast::ast::{\n use rustc_ast::attr;\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{Ident, SymbolStr};\n@@ -131,7 +132,11 @@ struct SimilarNamesNameVisitor<'a, 'tcx, 'b>(&'b mut SimilarNamesLocalVisitor<'a\n impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n     fn visit_pat(&mut self, pat: &'tcx Pat) {\n         match pat.kind {\n-            PatKind::Ident(_, ident, _) => self.check_ident(ident),\n+            PatKind::Ident(_, ident, _) => {\n+                if !pat.span.from_expansion() {\n+                    self.check_ident(ident);\n+                }\n+            },\n             PatKind::Struct(_, ref fields, _) => {\n                 for field in fields {\n                     if !field.is_shorthand {\n@@ -354,12 +359,20 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n \n impl EarlyLintPass for NonExpressiveNames {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if in_external_macro(cx.sess, item.span) {\n+            return;\n+        }\n+\n         if let ItemKind::Fn(_, ref sig, _, Some(ref blk)) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &EarlyContext<'_>, item: &AssocItem) {\n+        if in_external_macro(cx.sess, item.span) {\n+            return;\n+        }\n+\n         if let AssocItemKind::Fn(_, ref sig, _, Some(ref blk)) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }"}, {"sha": "2a81170e49e75026ce6c328adbb7eaa144ac30e6", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca76de7cac7e116eb1a573888dc510c0820694c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=fca76de7cac7e116eb1a573888dc510c0820694c", "patch": "@@ -2,6 +2,7 @@ use crate::utils::span_lint_and_sugg;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -36,6 +37,9 @@ declare_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if in_external_macro(cx.sess, expr.span) {\n+            return;\n+        }\n         if let ExprKind::Struct(_, ref fields, _) = expr.kind {\n             for field in fields {\n                 if field.is_shorthand {"}, {"sha": "70c47b426825e7f9b4a7cded8f9251ca5673adfc", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fca76de7cac7e116eb1a573888dc510c0820694c/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca76de7cac7e116eb1a573888dc510c0820694c/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=fca76de7cac7e116eb1a573888dc510c0820694c", "patch": "@@ -79,7 +79,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n \n             let conf = clippy_lints::read_conf(&[], &sess);\n             clippy_lints::register_plugins(&mut lint_store, &sess, &conf);\n-            clippy_lints::register_pre_expansion_lints(&mut lint_store, &conf);\n+            clippy_lints::register_pre_expansion_lints(&mut lint_store);\n             clippy_lints::register_renamed(&mut lint_store);\n         }));\n "}]}