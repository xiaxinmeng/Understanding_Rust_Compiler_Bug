{"sha": "943000fdcf9eac6c77b44923f551409aa06a46b5", "node_id": "C_kwDOAAsO6NoAKDk0MzAwMGZkY2Y5ZWFjNmM3N2I0NDkyM2Y1NTE0MDlhYTA2YTQ2YjU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-25T19:11:05Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-25T20:25:42Z"}, "message": "Use `can_eq` to compare types for default assoc type error\n\nThis works correctly with inference variables.", "tree": {"sha": "ba91fa9df8a942a3f8ad8dfcc671e2df4a4aab43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba91fa9df8a942a3f8ad8dfcc671e2df4a4aab43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/943000fdcf9eac6c77b44923f551409aa06a46b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/943000fdcf9eac6c77b44923f551409aa06a46b5", "html_url": "https://github.com/rust-lang/rust/commit/943000fdcf9eac6c77b44923f551409aa06a46b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/943000fdcf9eac6c77b44923f551409aa06a46b5/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b222f2e2660f8d81dc30061c918d774147fcf1a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b222f2e2660f8d81dc30061c918d774147fcf1a6", "html_url": "https://github.com/rust-lang/rust/commit/b222f2e2660f8d81dc30061c918d774147fcf1a6"}], "stats": {"total": 66, "additions": 49, "deletions": 17}, "files": [{"sha": "d19a0007f0880f7ac0f7083ea5cef9bbb23444dc", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=943000fdcf9eac6c77b44923f551409aa06a46b5", "patch": "@@ -1850,7 +1850,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         self.note_and_explain_type_err(diag, terr, cause, span, cause.body_id.to_def_id());\n \n-\n         if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values\n             && let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind()\n             && let Some(def_id) = def_id.as_local()"}, {"sha": "425cde3302db8b64aa8e5d1bc391e06025278dc0", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=943000fdcf9eac6c77b44923f551409aa06a46b5", "patch": "@@ -515,7 +515,11 @@ fn foo(&tcx) -> Self::T { String::new() }\n         // `expected` and point at it.\n         let parent_id = tcx.hir().get_parent_item(hir_id);\n         let item = tcx.hir().find_by_def_id(parent_id.def_id);\n+\n         debug!(\"expected_projection parent item {:?}\", item);\n+\n+        let param_env = tcx.param_env(body_owner_def_id);\n+\n         match item {\n             Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Trait(.., items), .. })) => {\n                 // FIXME: account for `#![feature(specialization)]`\n@@ -527,7 +531,8 @@ fn foo(&tcx) -> Self::T { String::new() }\n                             if let hir::Defaultness::Default { has_value: true } =\n                                 tcx.impl_defaultness(item.id.owner_id)\n                             {\n-                                if tcx.type_of(item.id.owner_id) == found {\n+                                let assoc_ty = tcx.bound_type_of(item.id.owner_id).subst_identity();\n+                                if self.infcx.can_eq(param_env, assoc_ty, found).is_ok() {\n                                     diag.span_label(\n                                         item.span,\n                                         \"associated type defaults can't be assumed inside the \\\n@@ -547,7 +552,9 @@ fn foo(&tcx) -> Self::T { String::new() }\n             })) => {\n                 for item in &items[..] {\n                     if let hir::AssocItemKind::Type = item.kind {\n-                        if tcx.type_of(item.id.owner_id) == found {\n+                        let assoc_ty = tcx.bound_type_of(item.id.owner_id).subst_identity();\n+\n+                        if self.infcx.can_eq(param_env, assoc_ty, found).is_ok() {\n                             diag.span_label(item.span, \"expected this associated type\");\n                             return true;\n                         }"}, {"sha": "28b9bdf566018b06c4dab41fdb7b15d601dcb851", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=943000fdcf9eac6c77b44923f551409aa06a46b5", "patch": "@@ -441,6 +441,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.opt_def_kind(def_id)\n             .unwrap_or_else(|| bug!(\"def_kind: unsupported node: {:?}\", def_id))\n     }\n+\n+    pub fn bound_type_of(self, def_id: impl IntoQueryParam<DefId>) -> ty::EarlyBinder<Ty<'tcx>> {\n+        ty::EarlyBinder(self.type_of(def_id))\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {\n@@ -449,4 +453,8 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         self.opt_def_kind(def_id)\n             .unwrap_or_else(|| bug!(\"def_kind: unsupported node: {:?}\", def_id))\n     }\n+\n+    pub fn bound_type_of(self, def_id: impl IntoQueryParam<DefId>) -> ty::EarlyBinder<Ty<'tcx>> {\n+        ty::EarlyBinder(self.type_of(def_id))\n+    }\n }"}, {"sha": "95abbb50380176be8da44382f48cc725816a1186", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943000fdcf9eac6c77b44923f551409aa06a46b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=943000fdcf9eac6c77b44923f551409aa06a46b5", "patch": "@@ -3,7 +3,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n-use crate::ty::query::TyCtxtAt;\n use crate::ty::{\n     self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n     TypeVisitable,\n@@ -637,10 +636,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n \n-    pub fn bound_type_of(self, def_id: DefId) -> ty::EarlyBinder<Ty<'tcx>> {\n-        ty::EarlyBinder(self.type_of(def_id))\n-    }\n-\n     pub fn bound_return_position_impl_trait_in_trait_tys(\n         self,\n         def_id: DefId,\n@@ -738,12 +733,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-impl<'tcx> TyCtxtAt<'tcx> {\n-    pub fn bound_type_of(self, def_id: DefId) -> ty::EarlyBinder<Ty<'tcx>> {\n-        ty::EarlyBinder(self.type_of(def_id))\n-    }\n-}\n-\n struct OpaqueTypeExpander<'tcx> {\n     // Contains the DefIds of the opaque types that are currently being\n     // expanded. When we expand an opaque type we insert the DefId of"}, {"sha": "f263809552fdf3d88a0af7c0cadc9238a85b2ab8", "filename": "tests/ui/associated-types/defaults-in-other-trait-items.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/943000fdcf9eac6c77b44923f551409aa06a46b5/tests%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943000fdcf9eac6c77b44923f551409aa06a46b5/tests%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=943000fdcf9eac6c77b44923f551409aa06a46b5", "patch": "@@ -44,4 +44,18 @@ impl AssocConst for () {\n     const C: Self::Ty = 0u8;\n }\n \n+pub trait Trait {\n+    type Res = isize; //~ NOTE associated type defaults can't be assumed inside the trait defining them\n+\n+    fn infer_me_correctly() -> Self::Res {\n+        //~^ NOTE expected `<Self as Trait>::Res` because of return type\n+\n+        // {integer} == isize\n+        2\n+        //~^ ERROR mismatched types\n+        //~| NOTE expected associated type, found integer\n+        //~| NOTE expected associated type `<Self as Trait>::Res`\n+    }\n+}\n+\n fn main() {}"}, {"sha": "bdcfadd3955d26d39632304f4e2cd5cd245bb125", "filename": "tests/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/943000fdcf9eac6c77b44923f551409aa06a46b5/tests%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/943000fdcf9eac6c77b44923f551409aa06a46b5/tests%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=943000fdcf9eac6c77b44923f551409aa06a46b5", "patch": "@@ -24,6 +24,21 @@ LL |     const C: Self::Ty = 0u8;\n    = note: expected associated type `<Self as AssocConst>::Ty`\n                          found type `u8`\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-in-other-trait-items.rs:54:9\n+   |\n+LL |     type Res = isize;\n+   |     ----------------- associated type defaults can't be assumed inside the trait defining them\n+LL |\n+LL |     fn infer_me_correctly() -> Self::Res {\n+   |                                --------- expected `<Self as Trait>::Res` because of return type\n+...\n+LL |         2\n+   |         ^ expected associated type, found integer\n+   |\n+   = note: expected associated type `<Self as Trait>::Res`\n+                         found type `{integer}`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "977620d9052f271b37244490edf6d8c311cdaf21", "filename": "tests/ui/associated-types/issue-26681.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/943000fdcf9eac6c77b44923f551409aa06a46b5/tests%2Fui%2Fassociated-types%2Fissue-26681.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/943000fdcf9eac6c77b44923f551409aa06a46b5/tests%2Fui%2Fassociated-types%2Fissue-26681.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-26681.stderr?ref=943000fdcf9eac6c77b44923f551409aa06a46b5", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-26681.rs:17:39\n    |\n+LL |     type Fv: Foo = u8;\n+   |     ------------------ associated type defaults can't be assumed inside the trait defining them\n LL |     const C: <Self::Fv as Foo>::Bar = 6665;\n    |                                       ^^^^ expected associated type, found integer\n    |\n    = note: expected associated type `<<Self as Baz>::Fv as Foo>::Bar`\n                          found type `{integer}`\n-   = help: consider constraining the associated type `<<Self as Baz>::Fv as Foo>::Bar` to `{integer}`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}]}