{"sha": "b19da133eec13ac8943b708d17410e3a8a6b6193", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOWRhMTMzZWVjMTNhYzg5NDNiNzA4ZDE3NDEwZTNhOGE2YjYxOTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-20T10:40:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-20T10:40:15Z"}, "message": "Merge #1850\n\n1850: feat(assists): raw string <-> usual string manipulation r=matklad a=Geobert\n\nFixes #1730\n\nCo-authored-by: Geobert Quach <geobert@protonmail.com>", "tree": {"sha": "2e1b540b6914c4b7e11b7b51d878a4d45aea859f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1b540b6914c4b7e11b7b51d878a4d45aea859f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b19da133eec13ac8943b708d17410e3a8a6b6193", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdhKyPCRBK7hj4Ov3rIwAAdHIIABKF9XInqM7jmE3ZBwZ/CZgW\nl2ZGmv9IOajZ5fGNeR8iz/mRcYr6EmSHDeCGVd1fAZcz08YjB2fXDrfhN4U6KX7Y\n0jcwLCvuMj2ZbL+3kdx2X+y9E6BuwLnHxwN74M9cacvHf4+tE0Yb7YAwMNu3u+sR\nSzbgbHfGB+L+d4b/8BXZmcwFMr/j+J745FS0qOgQXVW2KLIhCP9k8gm7NSCdmVWz\nEXYEOaUot2h4xZSGnBoFl16AUOnPJ9PDFpTdHFIQOa4n3fo2X/NhmslY5r745V9S\nptu8Ngco0QhfBVadjr7DZOTF6SgFlSlwRiBDZ7y5il7D/hM0f0O+ujMK5X9kDHU=\n=A78M\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e1b540b6914c4b7e11b7b51d878a4d45aea859f\nparent 4101c15ddbae860b86cd2ed17b09b7526ef17de8\nparent ce4d84365632ea379caa6c79580b1e458dde39f7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568976015 +0000\ncommitter GitHub <noreply@github.com> 1568976015 +0000\n\nMerge #1850\n\n1850: feat(assists): raw string <-> usual string manipulation r=matklad a=Geobert\n\nFixes #1730\n\nCo-authored-by: Geobert Quach <geobert@protonmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b19da133eec13ac8943b708d17410e3a8a6b6193", "html_url": "https://github.com/rust-lang/rust/commit/b19da133eec13ac8943b708d17410e3a8a6b6193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b19da133eec13ac8943b708d17410e3a8a6b6193/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4101c15ddbae860b86cd2ed17b09b7526ef17de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4101c15ddbae860b86cd2ed17b09b7526ef17de8", "html_url": "https://github.com/rust-lang/rust/commit/4101c15ddbae860b86cd2ed17b09b7526ef17de8"}, {"sha": "ce4d84365632ea379caa6c79580b1e458dde39f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4d84365632ea379caa6c79580b1e458dde39f7", "html_url": "https://github.com/rust-lang/rust/commit/ce4d84365632ea379caa6c79580b1e458dde39f7"}], "stats": {"total": 431, "additions": 431, "deletions": 0}, "files": [{"sha": "756acf4153d79ea6b25f288dbb59df13e2a63909", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b19da133eec13ac8943b708d17410e3a8a6b6193/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19da133eec13ac8943b708d17410e3a8a6b6193/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b19da133eec13ac8943b708d17410e3a8a6b6193", "patch": "@@ -96,6 +96,7 @@ mod fill_match_arms;\n mod merge_match_arms;\n mod introduce_variable;\n mod inline_local_variable;\n+mod raw_string;\n mod replace_if_let_with_match;\n mod split_import;\n mod remove_dbg;\n@@ -125,6 +126,10 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         move_guard::move_guard_to_arm_body,\n         move_guard::move_arm_cond_to_match_guard,\n         move_bounds::move_bounds_to_where_clause,\n+        raw_string::add_hash,\n+        raw_string::make_raw_string,\n+        raw_string::make_usual_string,\n+        raw_string::remove_hash,\n     ]\n }\n "}, {"sha": "e0026706012a9dc0e73d0686b6b73ec98117802f", "filename": "crates/ra_assists/src/raw_string.rs", "status": "added", "additions": 370, "deletions": 0, "changes": 370, "blob_url": "https://github.com/rust-lang/rust/blob/b19da133eec13ac8943b708d17410e3a8a6b6193/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19da133eec13ac8943b708d17410e3a8a6b6193/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fraw_string.rs?ref=b19da133eec13ac8943b708d17410e3a8a6b6193", "patch": "@@ -0,0 +1,370 @@\n+use hir::db::HirDatabase;\r\n+use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\r\n+\r\n+use crate::{Assist, AssistCtx, AssistId};\r\n+\r\n+pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\r\n+        return None;\r\n+    }\r\n+    ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\r\n+        edit.target(literal.syntax().text_range());\r\n+        edit.insert(literal.syntax().text_range().start(), \"r\");\r\n+    });\r\n+    ctx.build()\r\n+}\r\n+\r\n+fn find_usual_string_range(s: &str) -> Option<TextRange> {\r\n+    Some(TextRange::from_to(\r\n+        TextUnit::from(s.find('\"')? as u32),\r\n+        TextUnit::from(s.rfind('\"')? as u32),\r\n+    ))\r\n+}\r\n+\r\n+pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\r\n+        return None;\r\n+    }\r\n+    let token = literal.token();\r\n+    let text = token.text().as_str();\r\n+    let usual_string_range = find_usual_string_range(text)?;\r\n+    ctx.add_action(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\r\n+        edit.target(literal.syntax().text_range());\r\n+        // parse inside string to escape `\"`\r\n+        let start_of_inside = usual_string_range.start().to_usize() + 1;\r\n+        let end_of_inside = usual_string_range.end().to_usize();\r\n+        let inside_str = &text[start_of_inside..end_of_inside];\r\n+        let escaped = inside_str.escape_default().to_string();\r\n+        edit.replace(literal.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\r\n+    });\r\n+    ctx.build()\r\n+}\r\n+\r\n+pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\r\n+        return None;\r\n+    }\r\n+    ctx.add_action(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\r\n+        edit.target(literal.syntax().text_range());\r\n+        edit.insert(literal.syntax().text_range().start() + TextUnit::of_char('r'), \"#\");\r\n+        edit.insert(literal.syntax().text_range().end(), \"#\");\r\n+    });\r\n+    ctx.build()\r\n+}\r\n+\r\n+pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\r\n+        return None;\r\n+    }\r\n+    let token = literal.token();\r\n+    let text = token.text().as_str();\r\n+    if text.starts_with(\"r\\\"\") {\r\n+        // no hash to remove\r\n+        return None;\r\n+    }\r\n+    ctx.add_action(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\r\n+        edit.target(literal.syntax().text_range());\r\n+        let result = &text[2..text.len() - 1];\r\n+        let result = if result.starts_with(\"\\\"\") {\r\n+            // no more hash, escape\r\n+            let internal_str = &result[1..result.len() - 1];\r\n+            format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\r\n+        } else {\r\n+            result.to_owned()\r\n+        };\r\n+        edit.replace(literal.syntax().text_range(), format!(\"r{}\", result));\r\n+    });\r\n+    ctx.build()\r\n+}\r\n+\r\n+#[cfg(test)]\r\n+mod test {\r\n+    use super::*;\r\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\r\n+\r\n+    #[test]\r\n+    fn make_raw_string_target() {\r\n+        check_assist_target(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r#\"\"random string\"\"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_raw_string_works() {\r\n+        check_assist(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_raw_string_with_escaped_works() {\r\n+        check_assist(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random\\nstring\";\r\n+            }\r\n+            \"#,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random\\nstring\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_raw_string_not_works() {\r\n+        check_assist_not_applicable(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_hash_target() {\r\n+        check_assist_target(\r\n+            add_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r#\"r\"random string\"\"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_hash_works() {\r\n+        check_assist(\r\n+            add_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_more_hash_works() {\r\n+        check_assist(\r\n+            add_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random\"string\"#;\r\n+            }\r\n+            \"##,\r\n+            r###\"\r\n+            fn f() {\r\n+                let s = <|>r##\"random\"string\"##;\r\n+            }\r\n+            \"###,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_hash_not_works() {\r\n+        check_assist_not_applicable(\r\n+            add_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_target() {\r\n+        check_assist_target(\r\n+            remove_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r##\"r#\"random string\"#\"##,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_works() {\r\n+        check_assist(\r\n+            remove_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_with_quote_works() {\r\n+        check_assist(\r\n+            remove_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random\"str\"ing\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random\\\"str\\\"ing\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_more_hash_works() {\r\n+        check_assist(\r\n+            remove_hash,\r\n+            r###\"\r\n+            fn f() {\r\n+                let s = <|>r##\"random string\"##;\r\n+            }\r\n+            \"###,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_not_works() {\r\n+        check_assist_not_applicable(\r\n+            remove_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_no_hash_not_works() {\r\n+        check_assist_not_applicable(\r\n+            remove_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_target() {\r\n+        check_assist_target(\r\n+            make_usual_string,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r##\"r#\"random string\"#\"##,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_works() {\r\n+        check_assist(\r\n+            make_usual_string,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_with_quote_works() {\r\n+        check_assist(\r\n+            make_usual_string,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random\"str\"ing\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random\\\"str\\\"ing\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_more_hash_works() {\r\n+        check_assist(\r\n+            make_usual_string,\r\n+            r###\"\r\n+            fn f() {\r\n+                let s = <|>r##\"random string\"##;\r\n+            }\r\n+            \"###,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"##,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_not_works() {\r\n+        check_assist_not_applicable(\r\n+            make_usual_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+}\r"}, {"sha": "93e565315ef8401d74e05b1f8b885c8c1fca755b", "filename": "docs/user/features.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b19da133eec13ac8943b708d17410e3a8a6b6193/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/b19da133eec13ac8943b708d17410e3a8a6b6193/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=b19da133eec13ac8943b708d17410e3a8a6b6193", "patch": "@@ -445,6 +445,62 @@ fn foo<T: u32, F: FnOnce(T) -> T>() {}\n fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n ```\n \n+- Make raw string\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>\"abcd\";\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>r\"abcd\";\n+}\n+```\n+\n+- Make usual string\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>r#\"abcd\"#;\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>\"abcd\";\n+}\n+```\n+\n+- Add hash\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>r\"abcd\";\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>r#\"abcd\"#;\n+}\n+```\n+\n+- Remove hash\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>r#\"abcd\"#;\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>r\"abcd\";\n+}\n+```\n+\n ### Magic Completions\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728"}]}