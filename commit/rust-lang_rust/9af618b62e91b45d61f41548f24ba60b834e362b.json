{"sha": "9af618b62e91b45d61f41548f24ba60b834e362b", "node_id": "C_kwDOAAsO6NoAKDlhZjYxOGI2MmU5MWI0NWQ2MWY0MTU0OGYyNGJhNjBiODM0ZTM2MmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T16:25:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T16:25:32Z"}, "message": "Auto merge of #101239 - oli-obk:tracing_cleanup, r=estebank\n\nTracing cleanup\n\nr? `@ghost`", "tree": {"sha": "8734c2141aa7caa1a5b7628b285f0d80bb40086e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8734c2141aa7caa1a5b7628b285f0d80bb40086e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af618b62e91b45d61f41548f24ba60b834e362b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af618b62e91b45d61f41548f24ba60b834e362b", "html_url": "https://github.com/rust-lang/rust/commit/9af618b62e91b45d61f41548f24ba60b834e362b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af618b62e91b45d61f41548f24ba60b834e362b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb888117da6cb3bdae352bafbdb2dc8e2b78a271", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb888117da6cb3bdae352bafbdb2dc8e2b78a271", "html_url": "https://github.com/rust-lang/rust/commit/fb888117da6cb3bdae352bafbdb2dc8e2b78a271"}, {"sha": "3f1f694ca5845131782d69f0598b0f6e5b3ae3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1f694ca5845131782d69f0598b0f6e5b3ae3d5", "html_url": "https://github.com/rust-lang/rust/commit/3f1f694ca5845131782d69f0598b0f6e5b3ae3d5"}], "stats": {"total": 728, "additions": 276, "deletions": 452}, "files": [{"sha": "e5435e3a3d4fad4037927e7eaae246f1d8652f7e", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -26,6 +26,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub mod util {\n     pub mod classify;\n     pub mod comments;"}, {"sha": "6a1578498e6894468552c4729ecb0cf2c4b9531e", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -9,7 +9,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n use std::ascii;\n-use tracing::debug;\n \n pub enum LitError {\n     NotLiteral,"}, {"sha": "219e1b81d1ea64d3226d9eb93787b1ed2d98fe4d", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -11,8 +11,6 @@ use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, DUMMY_SP};\n \n-use tracing::debug;\n-\n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n     /// Source map\n@@ -31,7 +29,7 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     definitions: &'a definitions::Definitions,\n }\n \n-#[tracing::instrument(level = \"debug\", skip(sess, definitions, bodies))]\n+#[instrument(level = \"debug\", skip(sess, definitions, bodies))]\n pub(super) fn index_hir<'hir>(\n     sess: &Session,\n     definitions: &definitions::Definitions,\n@@ -67,7 +65,7 @@ pub(super) fn index_hir<'hir>(\n }\n \n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn insert(&mut self, span: Span, hir_id: HirId, node: Node<'hir>) {\n         debug_assert_eq!(self.owner, hir_id.owner);\n         debug_assert_ne!(hir_id.local_id.as_u32(), 0);\n@@ -142,7 +140,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_item(&mut self, i: &'hir Item<'hir>) {\n         debug_assert_eq!(i.def_id, self.owner);\n         self.with_parent(i.hir_id(), |this| {\n@@ -156,7 +154,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_foreign_item(&mut self, fi: &'hir ForeignItem<'hir>) {\n         debug_assert_eq!(fi.def_id, self.owner);\n         self.with_parent(fi.hir_id(), |this| {\n@@ -175,15 +173,15 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         debug_assert_eq!(ti.def_id, self.owner);\n         self.with_parent(ti.hir_id(), |this| {\n             intravisit::walk_trait_item(this, ti);\n         });\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n         debug_assert_eq!(ii.def_id, self.owner);\n         self.with_parent(ii.hir_id(), |this| {"}, {"sha": "9a960356a85f4066f628ea59a101e29c4b6dc306", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -220,7 +220,7 @@ impl ResolverAstLoweringExt for ResolverAstLowering {\n     /// Panics if no map has been pushed.\n     /// Remapping is used when creating lowering `-> impl Trait` return\n     /// types to create the resulting opaque type.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn record_def_id_remap(&mut self, from: LocalDefId, to: LocalDefId) {\n         self.generics_def_id_map.last_mut().expect(\"no map pushed\").insert(from, to);\n     }\n@@ -771,7 +771,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     /// Converts a lifetime into a new generic parameter.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lifetime_res_to_generic_param(\n         &mut self,\n         ident: Ident,\n@@ -815,7 +815,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// name resolver owing to lifetime elision; this also populates the resolver's node-id->def-id\n     /// map, so that later calls to `opt_node_id_to_def_id` that refer to these extra lifetime\n     /// parameters will be successful.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     #[inline]\n     fn lower_lifetime_binder(\n         &mut self,\n@@ -1385,7 +1385,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// added explicitly in the HIR). But this includes all the lifetimes, and we only want to\n     /// capture the lifetimes that are referenced in the bounds. Therefore, we add *extra* lifetime parameters\n     /// for the lifetimes that get captured (`'x`, in our example above) and reference those.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_opaque_impl_trait(\n         &mut self,\n         span: Span,\n@@ -1621,7 +1621,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // `make_ret_async`: if `Some`, converts `-> T` into `-> impl Future<Output = T>` in the\n     //      return type. This is used for `async fn` declarations. The `NodeId` is the ID of the\n     //      return type `impl Trait` item.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n@@ -1730,7 +1730,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // `output`: unlowered output type (`T` in `-> T`)\n     // `fn_def_id`: `DefId` of the parent function (used to create child impl trait definition)\n     // `opaque_ty_node_id`: `NodeId` of the opaque `impl Trait` type that should be created\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_async_fn_ret_ty(\n         &mut self,\n         output: &FnRetTy,\n@@ -2013,7 +2013,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.new_named_lifetime(l.id, l.id, span, ident)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn new_named_lifetime_with_res(\n         &mut self,\n         id: NodeId,\n@@ -2044,7 +2044,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::Lifetime { hir_id: self.lower_node_id(id), span: self.lower_span(span), name }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn new_named_lifetime(\n         &mut self,\n         id: NodeId,\n@@ -2132,7 +2132,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::TraitRef { path, hir_ref_id: self.lower_node_id(p.ref_id) }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,"}, {"sha": "897c7215805e0753e784601eb16518b94e9556bc", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -13,7 +13,6 @@ use rustc_span::symbol::{kw, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::smallvec;\n-use tracing::debug;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     #[instrument(level = \"trace\", skip(self))]"}, {"sha": "ca5b7a64155157f80c250cd9e8c8e07b9897ebbe", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -11,8 +11,6 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n-use tracing::debug;\n-\n macro_rules! gate_feature_fn {\n     ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $help: expr) => {{\n         let (visitor, has_feature, span, name, explain, help) ="}, {"sha": "af25982e2887bb33656b99017083f8c460d7a619", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -12,6 +12,9 @@\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub mod ast_validation;\n mod errors;\n pub mod feature_gate;"}, {"sha": "35c3df768995a0d2907db1cb174122666596a9cc", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Diagnostic;\n use rustc_middle::ty::RegionVid;\n use smallvec::SmallVec;\n use std::collections::BTreeMap;\n-use tracing::debug;\n \n use crate::MirBorrowckCtxt;\n "}, {"sha": "75fde53b6cdecd24452e0293db2118ad598f9620", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// *user* has a name for. In that case, we'll be able to map\n     /// `fr` to a `Region<'tcx>`, and that region will be one of\n     /// named variants.\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_from_error_region(&self, fr: RegionVid) -> Option<RegionName> {\n         let error_region = self.to_error_region(fr)?;\n \n@@ -373,7 +373,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///  | fn foo(x: &u32) { .. }\n     ///           ------- fully elaborated type of `x` is `&'1 u32`\n     /// ```\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_arguments(\n         &self,\n         fr: RegionVid,\n@@ -662,7 +662,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///  | let x = Some(&22);\n     ///        - fully elaborated type of `x` is `Option<&'1 u32>`\n     /// ```\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_upvars(&self, fr: RegionVid) -> Option<RegionName> {\n         let upvar_index = self.regioncx.get_upvar_index_for_region(self.infcx.tcx, fr)?;\n         let (upvar_name, upvar_span) = self.regioncx.get_upvar_name_and_span_for_region(\n@@ -682,7 +682,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// must be a closure since, in a free fn, such an argument would\n     /// have to either also appear in an argument (if using elision)\n     /// or be early bound (named, not in argument).\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_output(&self, fr: RegionVid) -> Option<RegionName> {\n         let tcx = self.infcx.tcx;\n         let hir = tcx.hir();\n@@ -814,7 +814,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_yield_ty(\n         &self,\n         fr: RegionVid,"}, {"sha": "8dc9368a0b994d197943ea914fa19b6578b554dc", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -1139,7 +1139,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///   include the CFG anyhow.\n     /// - For each `end('x)` element in `'r`, compute the mutual LUB, yielding\n     ///   a result `'y`.\n-    #[instrument(skip(self), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\", ret)]\n     pub(crate) fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n         debug!(r = %self.region_value_str(r));\n \n@@ -1151,8 +1151,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             lub = self.universal_region_relations.postdom_upper_bound(lub, ur);\n         }\n \n-        debug!(?lub);\n-\n         lub\n     }\n \n@@ -1333,15 +1331,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     // Evaluate whether `sup_region: sub_region`.\n-    #[instrument(skip(self), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\", ret)]\n     fn eval_outlives(&self, sup_region: RegionVid, sub_region: RegionVid) -> bool {\n         debug!(\n-            \"eval_outlives: sup_region's value = {:?} universal={:?}\",\n+            \"sup_region's value = {:?} universal={:?}\",\n             self.region_value_str(sup_region),\n             self.universal_regions.is_universal_region(sup_region),\n         );\n         debug!(\n-            \"eval_outlives: sub_region's value = {:?} universal={:?}\",\n+            \"sub_region's value = {:?} universal={:?}\",\n             self.region_value_str(sub_region),\n             self.universal_regions.is_universal_region(sub_region),\n         );\n@@ -1354,7 +1352,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // true if `'sup` outlives static.\n         if !self.universe_compatible(sub_region_scc, sup_region_scc) {\n             debug!(\n-                \"eval_outlives: sub universe `{sub_region_scc:?}` is not nameable \\\n+                \"sub universe `{sub_region_scc:?}` is not nameable \\\n                 by super `{sup_region_scc:?}`, promoting to static\",\n             );\n \n@@ -1375,9 +1373,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             });\n \n         if !universal_outlives {\n-            debug!(\n-                \"eval_outlives: returning false because sub region contains a universal region not present in super\"\n-            );\n+            debug!(\"sub region contains a universal region not present in super\");\n             return false;\n         }\n \n@@ -1386,15 +1382,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         if self.universal_regions.is_universal_region(sup_region) {\n             // Micro-opt: universal regions contain all points.\n-            debug!(\n-                \"eval_outlives: returning true because super is universal and hence contains all points\"\n-            );\n+            debug!(\"super is universal and hence contains all points\");\n             return true;\n         }\n \n-        let result = self.scc_values.contains_points(sup_region_scc, sub_region_scc);\n-        debug!(\"returning {} because of comparison between points in sup/sub\", result);\n-        result\n+        debug!(\"comparison between points in sup/sub\");\n+\n+        self.scc_values.contains_points(sup_region_scc, sub_region_scc)\n     }\n \n     /// Once regions have been propagated, this method is used to see\n@@ -1971,7 +1965,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Finds some region R such that `fr1: R` and `R` is live at `elem`.\n-    #[instrument(skip(self), level = \"trace\")]\n+    #[instrument(skip(self), level = \"trace\", ret)]\n     pub(crate) fn find_sub_region_live_at(&self, fr1: RegionVid, elem: Location) -> RegionVid {\n         trace!(scc = ?self.constraint_sccs.scc(fr1));\n         trace!(universe = ?self.scc_universes[self.constraint_sccs.scc(fr1)]);"}, {"sha": "0392367288c40544cad175913f68626a3ca9684d", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Calling `universal_upper_bound` for such a region gives `fr_fn_body`,\n     /// which has no `external_name` in which case we use `'empty` as the\n     /// region to pass to `infer_opaque_definition_from_instantiation`.\n-    #[instrument(level = \"debug\", skip(self, infcx))]\n+    #[instrument(level = \"debug\", skip(self, infcx), ret)]\n     pub(crate) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "b9b181681ec4b7495cf63f925799d205cdaff281", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -768,10 +768,9 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         mir_def_id: LocalDefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n-        debug!(\"replace_late_bound_regions_with_nll_infer_vars(mir_def_id={:?})\", mir_def_id);\n         let typeck_root_def_id = self.tcx.typeck_root_def_id(mir_def_id.to_def_id());\n         for_each_late_bound_region_defined_on(self.tcx, typeck_root_def_id, |r| {\n-            debug!(\"replace_late_bound_regions_with_nll_infer_vars: r={:?}\", r);\n+            debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = self.next_nll_region_var(FR);\n                 debug!(?region_vid);"}, {"sha": "280fa70451141f85f821c2f2b02e0f87f82d5a83", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -16,6 +16,9 @@\n \n extern crate proc_macro;\n \n+#[macro_use]\n+extern crate tracing;\n+\n use crate::deriving::*;\n \n use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};"}, {"sha": "7efb6cc61eecbb2325525c4696b5b5b7c9040c8a", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -335,7 +335,7 @@ pub fn expand_test_or_bench(\n     // extern crate test\n     let test_extern = cx.item(sp, test_id, ast::AttrVec::new(), ast::ItemKind::ExternCrate(None));\n \n-    tracing::debug!(\"synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n+    debug!(\"synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n \n     if is_stmt {\n         vec!["}, {"sha": "079c6ff37cfb53222caeaf79014ebda64fa65716", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -15,7 +15,6 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n use smallvec::{smallvec, SmallVec};\n use thin_vec::thin_vec;\n-use tracing::debug;\n \n use std::{iter, mem};\n "}, {"sha": "5202ac697e9496f4551bb265de5732ed542fed72", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -19,7 +19,6 @@ use rustc_target::asm::*;\n \n use libc::{c_char, c_uint};\n use smallvec::SmallVec;\n-use tracing::debug;\n \n impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n     fn codegen_inline_asm("}, {"sha": "38a366095b41da97c9fe8906b8ab626be71935e5", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -190,10 +190,10 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n \n             let output_path_z = rustc_fs_util::path_to_c_string(&output_path);\n \n-            tracing::trace!(\"invoking LLVMRustWriteImportLibrary\");\n-            tracing::trace!(\"  dll_name {:#?}\", dll_name_z);\n-            tracing::trace!(\"  output_path {}\", output_path.display());\n-            tracing::trace!(\n+            trace!(\"invoking LLVMRustWriteImportLibrary\");\n+            trace!(\"  dll_name {:#?}\", dll_name_z);\n+            trace!(\"  output_path {}\", output_path.display());\n+            trace!(\n                 \"  import names: {}\",\n                 dll_imports\n                     .iter()"}, {"sha": "a89df00e248e30e385fe2bc35202e4879d866780", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, CrateType, Lto};\n-use tracing::{debug, info};\n \n use std::ffi::{CStr, CString};\n use std::fs::File;"}, {"sha": "a695df8409bb4621326aa87929be8851337a418a", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -28,7 +28,6 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::InnerSpan;\n use rustc_target::spec::{CodeModel, RelocModel, SanitizerSet, SplitDebuginfo};\n-use tracing::debug;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;"}, {"sha": "63b63c6a1fab5d42d89c48ca7dea9dfc90ddd69e", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -27,7 +27,6 @@ use std::ffi::CStr;\n use std::iter;\n use std::ops::Deref;\n use std::ptr;\n-use tracing::{debug, instrument};\n \n // All Builders must have an llfn associated with them\n #[must_use]"}, {"sha": "b83c1e8f08f3182ee2178faa1a03b98862d3985c", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -11,7 +11,6 @@ use crate::context::CodegenCx;\n use crate::llvm;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n-use tracing::debug;\n \n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n use rustc_middle::ty::{self, Instance, TypeVisitable};"}, {"sha": "13e437cfbf7fb1b52d06589eb20c068ad140a131", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -21,7 +21,6 @@ use rustc_target::spec::Target;\n \n use libc::{c_char, c_uint};\n use std::fmt::Write;\n-use tracing::debug;\n \n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\"."}, {"sha": "a559f7f3d57035a58da56542d948fdad98a9274a", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -23,7 +23,6 @@ use rustc_target::abi::{\n     AddressSpace, Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange,\n };\n use std::ops::Range;\n-use tracing::debug;\n \n pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<'_>) -> &'ll Value {\n     let alloc = alloc.inner();"}, {"sha": "0d1df6fb1acd99e437c9fbcf3d4bc59b984b4578", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -16,8 +16,6 @@ use rustc_middle::ty::TyCtxt;\n \n use std::ffi::CString;\n \n-use tracing::debug;\n-\n /// Generates and exports the Coverage Map.\n ///\n /// Rust Coverage Map generation supports LLVM Coverage Mapping Format versions"}, {"sha": "964a632b6eeddc77a68711eed82bc4eef8c20e73", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -28,7 +28,6 @@ use std::cell::RefCell;\n use std::ffi::CString;\n \n use std::iter;\n-use tracing::debug;\n \n pub mod mapgen;\n "}, {"sha": "163ccd9460c54b58c9f1326fd3d186ae60496d9f", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -42,7 +42,6 @@ use rustc_span::{self, FileNameDisplayPreference, SourceFile};\n use rustc_symbol_mangling::typeid_for_trait_ref;\n use rustc_target::abi::{Align, Size};\n use smallvec::smallvec;\n-use tracing::debug;\n \n use libc::{c_char, c_longlong, c_uint};\n use std::borrow::Cow;\n@@ -51,7 +50,6 @@ use std::hash::{Hash, Hasher};\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::ptr;\n-use tracing::instrument;\n \n impl PartialEq for llvm::Metadata {\n     fn eq(&self, other: &Self) -> bool {"}, {"sha": "b23fe3fc9d5575ae8971c6dbb4b61cd1905512aa", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -39,7 +39,6 @@ use smallvec::SmallVec;\n use std::cell::OnceCell;\n use std::cell::RefCell;\n use std::iter;\n-use tracing::debug;\n \n mod create_scope_map;\n pub mod gdb;"}, {"sha": "a40cfc8b23fb32217f5b6b0897bea0e4f9e27373", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -6,7 +6,7 @@ use super::CodegenUnitDebugContext;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::layout::{HasParamEnv, LayoutOf};\n use rustc_middle::ty::{self, DefIdTree, Ty};\n-use tracing::trace;\n+use trace;\n \n use crate::common::CodegenCx;\n use crate::llvm;"}, {"sha": "0f663a26732bba8abf5094a095a859784f6f9012", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -22,7 +22,6 @@ use rustc_codegen_ssa::traits::TypeMembershipMethods;\n use rustc_middle::ty::Ty;\n use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n use smallvec::SmallVec;\n-use tracing::debug;\n \n /// Declare a function.\n ///"}, {"sha": "334425ae55b43300c1f3f7e06463b235a5ad3a28", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -16,6 +16,8 @@\n \n #[macro_use]\n extern crate rustc_macros;\n+#[macro_use]\n+extern crate tracing;\n \n use back::write::{create_informational_target_machine, create_target_machine};\n "}, {"sha": "1b049dfe9790444e300423cbbef45ccb27370168", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -15,7 +15,6 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use smallvec::{smallvec, SmallVec};\n use std::ffi::{CStr, CString};\n-use tracing::debug;\n \n use std::mem;\n use std::path::Path;"}, {"sha": "1eceb7f5c87beb362760851e5ce31ae40a66c75f", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_session::config::CrateType;\n use rustc_target::spec::RelocModel;\n-use tracing::debug;\n \n impl<'tcx> PreDefineMethods<'tcx> for CodegenCx<'_, 'tcx> {\n     fn predefine_static("}, {"sha": "dc1165835e7ca271b38986619f20801fb8c5a71e", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -11,7 +11,6 @@ use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{PointeeInfo, Scalar, Size, TyAbiInterface, Variants};\n use smallvec::{smallvec, SmallVec};\n-use tracing::debug;\n \n use std::fmt::Write;\n "}, {"sha": "a2f14e753aebe7ca5cb6bf7b049123f7c746ff5d", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -197,7 +197,7 @@ pub(super) fn op_to_const<'tcx>(\n     }\n }\n \n-#[instrument(skip(tcx), level = \"debug\")]\n+#[instrument(skip(tcx), level = \"debug\", ret)]\n pub(crate) fn turn_into_const_value<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     constant: ConstAlloc<'tcx>,\n@@ -224,10 +224,7 @@ pub(crate) fn turn_into_const_value<'tcx>(\n     );\n \n     // Turn this into a proper constant.\n-    let const_val = op_to_const(&ecx, &mplace.into());\n-    debug!(?const_val);\n-\n-    const_val\n+    op_to_const(&ecx, &mplace.into())\n }\n \n #[instrument(skip(tcx), level = \"debug\")]"}, {"sha": "8b7c3cf3377cc9108bc7a9e9f1f7f4763b35cdf8", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -204,7 +204,7 @@ fn get_info_on_unsized_field<'tcx>(\n     (unsized_inner_ty, num_elems)\n }\n \n-#[instrument(skip(ecx), level = \"debug\")]\n+#[instrument(skip(ecx), level = \"debug\", ret)]\n fn create_pointee_place<'tcx>(\n     ecx: &mut CompileTimeEvalContext<'tcx, 'tcx>,\n     ty: Ty<'tcx>,\n@@ -237,14 +237,11 @@ fn create_pointee_place<'tcx>(\n         let ptr = ecx.allocate_ptr(size, align, MemoryKind::Stack).unwrap();\n         debug!(?ptr);\n \n-        let place = MPlaceTy::from_aligned_ptr_with_meta(\n+        MPlaceTy::from_aligned_ptr_with_meta(\n             ptr.into(),\n             layout,\n             MemPlaceMeta::Meta(Scalar::from_machine_usize(num_elems as u64, &tcx)),\n-        );\n-        debug!(?place);\n-\n-        place\n+        )\n     } else {\n         create_mplace_from_layout(ecx, ty)\n     }\n@@ -253,7 +250,7 @@ fn create_pointee_place<'tcx>(\n /// Converts a `ValTree` to a `ConstValue`, which is needed after mir\n /// construction has finished.\n // FIXME Merge `valtree_to_const_value` and `valtree_into_mplace` into one function\n-#[instrument(skip(tcx), level = \"debug\")]\n+#[instrument(skip(tcx), level = \"debug\", ret)]\n pub fn valtree_to_const_value<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env_ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n@@ -294,7 +291,7 @@ pub fn valtree_to_const_value<'tcx>(\n             dump_place(&ecx, place.into());\n             intern_const_alloc_recursive(&mut ecx, InternKind::Constant, &place).unwrap();\n \n-            let const_val = match ty.kind() {\n+            match ty.kind() {\n                 ty::Ref(_, _, _) => {\n                     let ref_place = place.to_ref(&tcx);\n                     let imm =\n@@ -303,10 +300,7 @@ pub fn valtree_to_const_value<'tcx>(\n                     op_to_const(&ecx, &imm.into())\n                 }\n                 _ => op_to_const(&ecx, &place.into()),\n-            };\n-            debug!(?const_val);\n-\n-            const_val\n+            }\n         }\n         ty::Never\n         | ty::Error(_)"}, {"sha": "24dbc769529c3665a6e30da12c750226a21ffd19", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -334,7 +334,7 @@ pub enum InternKind {\n /// tracks where in the value we are and thus can show much better error messages.\n /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n /// are hard errors.\n-#[tracing::instrument(level = \"debug\", skip(ecx))]\n+#[instrument(level = \"debug\", skip(ecx))]\n pub fn intern_const_alloc_recursive<\n     'mir,\n     'tcx: 'mir,"}, {"sha": "d1d02ed73f9595a3847d38d96eb8665fc56badbc", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -7,7 +7,7 @@ edition = \"2021\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-tracing = { version = \"0.1.28\" }\n+tracing = { version = \"0.1.35\" }\n serde_json = \"1.0.59\"\n rustc_log = { path = \"../rustc_log\" }\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "ed5e092814f157ef222eb75753232a5a481e12ae", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -5,6 +5,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n use rustc_data_structures::sync::Lrc;\n@@ -16,7 +19,6 @@ use std::fmt;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n-use tracing::{instrument, trace};\n \n #[cfg(not(parallel_compiler))]\n use std::cell::LazyCell as Lazy;"}, {"sha": "7e29dc207accecca9a86275ec477cb9426c2b087", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -12,7 +12,6 @@ use std::fmt::{self, Debug};\n use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n-use tracing::debug;\n \n /// Used for emitting structured error messages and other diagnostic information.\n ///"}, {"sha": "e79ce11a6fc075a8bdf162f7b63256b066c89a29", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -34,7 +34,6 @@ use std::iter;\n use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n use termcolor::{Buffer, Color, WriteColor};\n-use tracing::*;\n \n /// Default column width, used in tests and when terminal dimensions cannot be determined.\n const DEFAULT_COLUMN_WIDTH: usize = 140;"}, {"sha": "ac0e200b1b73ee783e22affe3e6b48ab2b4a435f", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -15,6 +15,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n extern crate proc_macro as pm;\n \n mod placeholders;"}, {"sha": "7764ffd246e323d205c992bd61627c9652ce3b05", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -32,7 +32,6 @@ use rustc_span::Span;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::{mem, slice};\n-use tracing::debug;\n \n pub(crate) struct ParserAnyMacro<'a> {\n     parser: Parser<'a>,"}, {"sha": "d85ac960f9b2f10b415cb0a43d2eaa7de8bfc102", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -15,7 +15,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use std::fmt::{self, Write};\n use std::hash::Hash;\n-use tracing::debug;\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`"}, {"sha": "1b33cb9c2da9cbcebbe4be41ca0bd6d1d7665e08", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -17,6 +17,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n #[macro_use]\n extern crate rustc_data_structures;\n "}, {"sha": "d4350aa5734dee4aefe5583a5f1e6233d0cf2303", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -391,7 +391,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n     /// Preconditions:\n     ///\n     /// - `for_vid` is a \"root vid\"\n-    #[instrument(skip(self), level = \"trace\")]\n+    #[instrument(skip(self), level = \"trace\", ret)]\n     fn generalize(\n         &self,\n         ty: Ty<'tcx>,\n@@ -435,15 +435,8 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             cache: SsoHashMap::new(),\n         };\n \n-        let ty = match generalize.relate(ty, ty) {\n-            Ok(ty) => ty,\n-            Err(e) => {\n-                debug!(?e, \"failure\");\n-                return Err(e);\n-            }\n-        };\n+        let ty = generalize.relate(ty, ty)?;\n         let needs_wf = generalize.needs_wf;\n-        trace!(?ty, ?needs_wf, \"success\");\n         Ok(Generalization { ty, needs_wf })\n     }\n \n@@ -499,6 +492,7 @@ struct Generalizer<'cx, 'tcx> {\n /// Result from a generalization operation. This includes\n /// not only the generalized type, but also a bool flag\n /// indicating whether further WF checks are needed.\n+#[derive(Debug)]\n struct Generalization<'tcx> {\n     ty: Ty<'tcx>,\n \n@@ -856,10 +850,9 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         debug_assert_eq!(t, _t);\n-        debug!(\"ConstInferUnifier: t={:?}\", t);\n \n         match t.kind() {\n             &ty::Infer(ty::TyVar(vid)) => {\n@@ -883,12 +876,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                             .borrow_mut()\n                             .type_variables()\n                             .new_var(self.for_universe, origin);\n-                        let u = self.tcx().mk_ty_var(new_var_id);\n-                        debug!(\n-                            \"ConstInferUnifier: replacing original vid={:?} with new={:?}\",\n-                            vid, u\n-                        );\n-                        Ok(u)\n+                        Ok(self.tcx().mk_ty_var(new_var_id))\n                     }\n                 }\n             }\n@@ -932,14 +920,13 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn consts(\n         &mut self,\n         c: ty::Const<'tcx>,\n         _c: ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         debug_assert_eq!(c, _c);\n-        debug!(\"ConstInferUnifier: c={:?}\", c);\n \n         match c.kind() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {"}, {"sha": "6dad9873d613404a124bac052236be887ecdb7f0", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -1434,7 +1434,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// the message in `secondary_span` as the primary label, and apply the message that would\n     /// otherwise be used for the primary label on the `secondary_span` `Span`. This applies on\n     /// E0271, like `src/test/ui/issues/issue-39970.stderr`.\n-    #[tracing::instrument(\n+    #[instrument(\n         level = \"debug\",\n         skip(self, diag, secondary_span, swap_secondary_and_primary, prefer_label)\n     )]"}, {"sha": "67426fcf0feda6c5a7664772c7dfffd8cd941ae1", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// For more details visit the relevant sections of the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx> + Copy,\n@@ -104,9 +104,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             },\n         };\n \n-        let result = self.tcx.replace_bound_vars_uncached(binder, delegate);\n-        debug!(?next_universe, ?result);\n-        result\n+        debug!(?next_universe);\n+        self.tcx.replace_bound_vars_uncached(binder, delegate)\n     }\n \n     /// See [RegionConstraintCollector::leak_check][1]."}, {"sha": "13b7e8eb9643611e0a5678f9b936250e347ac216", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -333,9 +333,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     ///\n     /// Neither `a` nor `b` may be an inference variable (hence the\n     /// term \"concrete regions\").\n-    #[instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self), ret)]\n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n-        let r = match (*a, *b) {\n+        match (*a, *b) {\n             (ReLateBound(..), _) | (_, ReLateBound(..)) | (ReErased, _) | (_, ReErased) => {\n                 bug!(\"cannot relate region: LUB({:?}, {:?})\", a, b);\n             }\n@@ -399,11 +399,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     self.tcx().lifetimes.re_static\n                 }\n             }\n-        };\n-\n-        debug!(\"lub_concrete_regions({:?}, {:?}) = {:?}\", a, b, r);\n-\n-        r\n+        }\n     }\n \n     /// After expansion is complete, go and check upper bounds (i.e.,"}, {"sha": "bb6f6ae60e26ac27c05ad3e59c889122e90d6ef3", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -542,7 +542,7 @@ where\n         true\n     }\n \n-    #[instrument(skip(self, info), level = \"trace\")]\n+    #[instrument(skip(self, info), level = \"trace\", ret)]\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,\n@@ -560,8 +560,6 @@ where\n \n         self.ambient_variance = old_ambient_variance;\n \n-        debug!(?r);\n-\n         Ok(r)\n     }\n "}, {"sha": "d45adf43abfcc0040f0feeb235604eff4cc422a9", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    #[instrument(skip(self), level = \"trace\")]\n+    #[instrument(skip(self), level = \"trace\", ret)]\n     pub fn opaque_type_origin(&self, def_id: LocalDefId, span: Span) -> Option<OpaqueTyOrigin> {\n         let opaque_hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let parent_def_id = match self.defining_use_anchor {\n@@ -421,16 +421,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         in_definition_scope.then_some(*origin)\n     }\n \n-    #[instrument(skip(self), level = \"trace\")]\n+    #[instrument(skip(self), level = \"trace\", ret)]\n     fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n-        let origin = match self.tcx.hir().expect_item(def_id).kind {\n+        match self.tcx.hir().expect_item(def_id).kind {\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n             ref itemkind => {\n                 span_bug!(span, \"weird opaque type: {:?}, {:#?}\", def_id, itemkind)\n             }\n-        };\n-        trace!(?origin);\n-        origin\n+        }\n     }\n }\n "}, {"sha": "4d124554afb94d3bb119275e9c415932dbc8131b", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -29,7 +29,7 @@ impl<'tcx> OpaqueTypeStorage<'tcx> {\n         }\n     }\n \n-    #[instrument(level = \"debug\")]\n+    #[instrument(level = \"debug\", ret)]\n     pub fn take_opaque_types(&mut self) -> OpaqueTypeMap<'tcx> {\n         std::mem::take(&mut self.opaque_types)\n     }"}, {"sha": "2d19d1823fdfc2b04816cde419dd59aa3361009b", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -9,7 +9,7 @@ pub mod verify;\n use rustc_middle::traits::query::OutlivesBound;\n use rustc_middle::ty;\n \n-#[instrument(level = \"debug\", skip(param_env))]\n+#[instrument(level = \"debug\", skip(param_env), ret)]\n pub fn explicit_outlives_bounds<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> impl Iterator<Item = OutlivesBound<'tcx>> + 'tcx {"}, {"sha": "74c8bd88d275dbfb79589c41d21eab3bd91d169b", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -313,7 +313,7 @@ where\n         self.delegate.push_verify(origin, generic, region, verify_bound);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn projection_must_outlive(\n         &mut self,\n         origin: infer::SubregionOrigin<'tcx>,"}, {"sha": "a5c21f0fb9b50eadf775aac2a6840500f388a00d", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -34,7 +34,7 @@ use crate::infer::region_constraints::VerifyIfEq;\n /// like are used. This is a particular challenge since this function is invoked\n /// very late in inference and hence cannot make use of the normal inference\n /// machinery.\n-#[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n+#[instrument(level = \"debug\", skip(tcx, param_env))]\n pub fn extract_verify_if_eq<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -71,7 +71,7 @@ pub fn extract_verify_if_eq<'tcx>(\n }\n \n /// True if a (potentially higher-ranked) outlives\n-#[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n+#[instrument(level = \"debug\", skip(tcx, param_env))]\n pub(super) fn can_match_erased_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -110,7 +110,7 @@ impl<'tcx> Match<'tcx> {\n \n     /// Binds the pattern variable `br` to `value`; returns an `Err` if the pattern\n     /// is already bound to a different value.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn bind(\n         &mut self,\n         br: ty::BoundRegion,"}, {"sha": "949bd02ad6839a8f1535e453efc2d08d1a704dcf", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -332,7 +332,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n // JUSTIFICATION: before session exists, only config\n #[allow(rustc::bad_opt_access)]\n pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n-    tracing::trace!(\"run_compiler\");\n+    trace!(\"run_compiler\");\n     util::run_in_thread_pool_with_globals(\n         config.opts.edition,\n         config.opts.unstable_opts.threads,"}, {"sha": "1a8d619fafb6212483b49ab045f40f6e07af901f", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -8,6 +8,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n mod callbacks;\n mod errors;\n pub mod interface;"}, {"sha": "f8b40949e2ed993ab2b2c2917d251bd94c824ba7", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -38,7 +38,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n-use tracing::{info, warn};\n \n use std::any::Any;\n use std::cell::RefCell;\n@@ -165,7 +164,7 @@ pub fn create_resolver(\n     krate: &ast::Crate,\n     crate_name: &str,\n ) -> BoxedResolver {\n-    tracing::trace!(\"create_resolver\");\n+    trace!(\"create_resolver\");\n     BoxedResolver::new(sess, move |sess, resolver_arenas| {\n         Resolver::new(sess, krate, crate_name, metadata_loader, resolver_arenas)\n     })\n@@ -279,7 +278,7 @@ pub fn configure_and_expand(\n     crate_name: &str,\n     resolver: &mut Resolver<'_>,\n ) -> Result<ast::Crate> {\n-    tracing::trace!(\"configure_and_expand\");\n+    trace!(\"configure_and_expand\");\n     pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n "}, {"sha": "6c725a01b53151ccfb9325f876442a22920facbf", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -166,7 +166,7 @@ impl<'tcx> Queries<'tcx> {\n     pub fn expansion(\n         &self,\n     ) -> Result<&Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>> {\n-        tracing::trace!(\"expansion\");\n+        trace!(\"expansion\");\n         self.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let (krate, lint_store) = self.register_plugins()?.take();"}, {"sha": "f7e70d355cf86e6ff3ad519311676536ed3a6e24", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -1,3 +1,4 @@\n+use info;\n use libloading::Library;\n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -31,7 +32,6 @@ use std::path::{Path, PathBuf};\n use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::OnceLock;\n use std::thread;\n-use tracing::info;\n \n /// Function pointer type that constructs a new CodegenBackend.\n pub type MakeBackendFn = fn() -> Box<dyn CodegenBackend>;"}, {"sha": "4a744748b2bc65158a1502d57d90584e1e06b074", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -59,7 +59,6 @@ use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n use std::fmt::Write;\n-use tracing::{debug, trace};\n \n // hardwired lints from librustc_middle\n pub use rustc_session::lint::builtin::*;"}, {"sha": "e3b6c0159870072522a93ce2b2a1477e8dd12198", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -45,7 +45,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n use rustc_target::abi;\n-use tracing::debug;\n \n use std::cell::Cell;\n use std::iter;\n@@ -417,7 +416,7 @@ impl LintStore {\n                     None => {\n                         // 1. The tool is currently running, so this lint really doesn't exist.\n                         // FIXME: should this handle tools that never register a lint, like rustfmt?\n-                        tracing::debug!(\"lints={:?}\", self.by_name.keys().collect::<Vec<_>>());\n+                        debug!(\"lints={:?}\", self.by_name.keys().collect::<Vec<_>>());\n                         let tool_prefix = format!(\"{}::\", tool_name);\n                         return if self.by_name.keys().any(|lint| lint.starts_with(&tool_prefix)) {\n                             self.no_lint_suggestion(&complete_name)\n@@ -510,7 +509,7 @@ impl LintStore {\n                 CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n             }\n             Some(other) => {\n-                tracing::debug!(\"got renamed lint {:?}\", other);\n+                debug!(\"got renamed lint {:?}\", other);\n                 CheckLintNameResult::NoLint(None)\n             }\n         }"}, {"sha": "27d173ebde82a506d7c1f8493352b137b3fee634", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -26,7 +26,6 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use std::slice;\n-use tracing::debug;\n \n macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "16b7d2cbbaea73ac489f4b4730f76c4eca98a96c", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -12,7 +12,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use tracing::debug;\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,"}, {"sha": "8a336844dc2fac73f02f7c0fb003ae23ac77181c", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -29,7 +29,6 @@ use rustc_span::Span;\n use std::any::Any;\n use std::cell::Cell;\n use std::slice;\n-use tracing::debug;\n \n /// Extract the `LintStore` from the query context.\n /// This function exists because we've erased `LintStore` as `dyn Any` in the context."}, {"sha": "f1d8ef2e47d31cb74d2f37a3056d1af66766f1e8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -21,7 +21,6 @@ use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use tracing::debug;\n \n use crate::errors::{\n     MalformedAttribute, MalformedAttributeSub, OverruledAttribute, OverruledAttributeSub,"}, {"sha": "801249badcc80f996b11a6b1c73c5348933bdca4", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -42,6 +42,8 @@\n extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n+#[macro_use]\n+extern crate tracing;\n \n mod array_into_iter;\n pub mod builtin;"}, {"sha": "0316651998129037219b6bc7c9e2ac9d4e6adaf2", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -19,7 +19,6 @@ use rustc_target::spec::abi::Abi as SpecAbi;\n use std::cmp;\n use std::iter;\n use std::ops::ControlFlow;\n-use tracing::debug;\n \n declare_lint! {\n     /// The `unused_comparisons` lint detects comparisons made useless by"}, {"sha": "6a5716600b3b34379b3257fcf93121b347a3ead0", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -29,7 +29,6 @@ use proc_macro::bridge::client::ProcMacro;\n use std::ops::Fn;\n use std::path::Path;\n use std::{cmp, env};\n-use tracing::{debug, info};\n \n #[derive(Clone)]\n pub struct CStore {\n@@ -263,7 +262,7 @@ impl<'a> CrateLoader<'a> {\n     fn existing_match(&self, name: Symbol, hash: Option<Svh>, kind: PathKind) -> Option<CrateNum> {\n         for (cnum, data) in self.cstore.iter_crate_data() {\n             if data.name() != name {\n-                tracing::trace!(\"{} did not match {}\", data.name(), name);\n+                trace!(\"{} did not match {}\", data.name(), name);\n                 continue;\n             }\n "}, {"sha": "1a25e987d3a62c5369e772bf5592938838b137a7", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -158,11 +158,11 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         let name = tcx.crate_name(cnum);\n         let src = tcx.used_crate_source(cnum);\n         if src.dylib.is_some() {\n-            tracing::info!(\"adding dylib: {}\", name);\n+            info!(\"adding dylib: {}\", name);\n             add_library(tcx, cnum, RequireDynamic, &mut formats);\n             let deps = tcx.dylib_dependency_formats(cnum);\n             for &(depnum, style) in deps.iter() {\n-                tracing::info!(\"adding {:?}: {}\", style, tcx.crate_name(depnum));\n+                info!(\"adding {:?}: {}\", style, tcx.crate_name(depnum));\n                 add_library(tcx, depnum, style, &mut formats);\n             }\n         }\n@@ -190,7 +190,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n             && tcx.dep_kind(cnum) == CrateDepKind::Explicit\n         {\n             assert!(src.rlib.is_some() || src.rmeta.is_some());\n-            tracing::info!(\"adding staticlib: {}\", tcx.crate_name(cnum));\n+            info!(\"adding staticlib: {}\", tcx.crate_name(cnum));\n             add_library(tcx, cnum, RequireStatic, &mut formats);\n             ret[cnum.as_usize() - 1] = Linkage::Static;\n         }"}, {"sha": "337d3cca2aed7fb3acab33145400fca40561ba3a", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -26,6 +26,9 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_data_structures;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub use rmeta::{provide, provide_extern};\n \n mod dependency_format;"}, {"sha": "5b7d0c8581ab214217dc49f520d3044fafbfcbfa", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -236,7 +236,6 @@ use std::fmt::Write as _;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt, fs};\n-use tracing::{debug, info};\n \n #[derive(Clone)]\n pub(crate) struct CrateLocator<'a> {"}, {"sha": "b28f54fac1a61a2e82c797a805cc0b2f03d392f0", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -42,7 +42,6 @@ use std::iter::TrustedLen;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::path::Path;\n-use tracing::debug;\n \n pub(super) use cstore_impl::provide;\n pub use cstore_impl::provide_extern;"}, {"sha": "34d8edc30cddad783c6a4d447aa39cb5f908ddfd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -44,7 +44,6 @@ use std::io::{Read, Seek, Write};\n use std::iter;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n-use tracing::{debug, trace};\n \n pub(super) struct EncodeContext<'a, 'tcx> {\n     opaque: opaque::FileEncoder,"}, {"sha": "8085675d75cc549eafb86b03c64b7d6131f0aa53", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -10,7 +10,6 @@ use rustc_span::hygiene::MacroKind;\n use std::convert::TryInto;\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n-use tracing::debug;\n \n /// Helper trait, for encoding to, and decoding from, a fixed number of bytes.\n /// Used mainly for Lazy positions and lengths."}, {"sha": "f3676604bb0e64b34b6d6d6e38eea52be4768683", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -2267,7 +2267,7 @@ impl<'tcx> ConstantKind<'tcx> {\n         Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id), param_env)\n     }\n \n-    #[instrument(skip(tcx), level = \"debug\")]\n+    #[instrument(skip(tcx), level = \"debug\", ret)]\n     pub fn from_inline_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Self {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let body_id = match tcx.hir().get(hir_id) {\n@@ -2305,21 +2305,18 @@ impl<'tcx> ConstantKind<'tcx> {\n         let substs =\n             ty::InlineConstSubsts::new(tcx, ty::InlineConstSubstsParts { parent_substs, ty })\n                 .substs;\n-        let uneval_const = tcx.mk_const(ty::ConstS {\n+        debug_assert!(!substs.has_free_regions());\n+        Self::Ty(tcx.mk_const(ty::ConstS {\n             kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                 def: ty::WithOptConstParam::unknown(def_id).to_global(),\n                 substs,\n                 promoted: None,\n             }),\n             ty,\n-        });\n-        debug!(?uneval_const);\n-        debug_assert!(!uneval_const.has_free_regions());\n-\n-        Self::Ty(uneval_const)\n+        }))\n     }\n \n-    #[instrument(skip(tcx), level = \"debug\")]\n+    #[instrument(skip(tcx), level = \"debug\", ret)]\n     fn from_opt_const_arg_anon_const(\n         tcx: TyCtxt<'tcx>,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -2402,24 +2399,21 @@ impl<'tcx> ConstantKind<'tcx> {\n \n         match tcx.const_eval_resolve(param_env, uneval, Some(span)) {\n             Ok(val) => {\n-                debug!(\"evaluated const value: {:?}\", val);\n+                debug!(\"evaluated const value\");\n                 Self::Val(val, ty)\n             }\n             Err(_) => {\n                 debug!(\"error encountered during evaluation\");\n                 // Error was handled in `const_eval_resolve`. Here we just create a\n                 // new unevaluated const and error hard later in codegen\n-                let ty_const = tcx.mk_const(ty::ConstS {\n+                Self::Ty(tcx.mk_const(ty::ConstS {\n                     kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: def.to_global(),\n                         substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                         promoted: None,\n                     }),\n                     ty,\n-                });\n-                debug!(?ty_const);\n-\n-                Self::Ty(ty_const)\n+                }))\n             }\n         }\n     }"}, {"sha": "2eb5cffa6bc44360a25dc9cb7f578ac7addc31ff", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -65,8 +65,6 @@ impl<'tcx> Const<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         def: ty::WithOptConstParam<LocalDefId>,\n     ) -> Self {\n-        debug!(\"Const::from_anon_const(def={:?})\", def);\n-\n         let body_id = match tcx.hir().get_by_def_id(def.did) {\n             hir::Node::AnonConst(ac) => ac.body,\n             _ => span_bug!("}, {"sha": "cb46a9dba579fd6d40a75e0b835cba021d2a7661", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -353,7 +353,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n         t\n     }\n \n-    #[instrument(skip(self), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\", ret)]\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n             ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {"}, {"sha": "cac8560ce1c320229dfe789a27695b039160ab26", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -188,13 +188,11 @@ struct NormalizeAfterErasingRegionsFolder<'tcx> {\n }\n \n impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n-    #[instrument(skip(self), level = \"debug\")]\n     fn normalize_generic_arg_after_erasing_regions(\n         &self,\n         arg: ty::GenericArg<'tcx>,\n     ) -> ty::GenericArg<'tcx> {\n         let arg = self.param_env.and(arg);\n-        debug!(?arg);\n \n         self.tcx.try_normalize_generic_arg_after_erasing_regions(arg).unwrap_or_else(|_| bug!(\n                 \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\","}, {"sha": "ac79949fca5cc40d7ed5391e8e96557ff459e36d", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -256,7 +256,6 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n }\n \n // Query provider for `incoherent_impls`.\n-#[instrument(level = \"debug\", skip(tcx))]\n pub(super) fn incoherent_impls_provider(tcx: TyCtxt<'_>, simp: SimplifiedType) -> &[DefId] {\n     let mut impls = Vec::new();\n "}, {"sha": "a3837512bce2652c1155ca2672e06bcb1cd07bdb", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -627,7 +627,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Expands the given impl trait type, stopping if the type is recursive.\n-    #[instrument(skip(self), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\", ret)]\n     pub fn try_expand_impl_trait_type(\n         self,\n         def_id: DefId,\n@@ -644,7 +644,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         let expanded_type = visitor.expand_opaque_ty(def_id, substs).unwrap();\n-        trace!(?expanded_type);\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n "}, {"sha": "5e042c3acfce25897621b4b4215df93554a266ed", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -84,7 +84,7 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n         self.has_vars_bound_at_or_above(ty::INNERMOST)\n     }\n \n-    #[instrument(level = \"trace\")]\n+    #[instrument(level = \"trace\", ret)]\n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n         self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)\n     }\n@@ -560,7 +560,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n     #[inline]\n-    #[instrument(skip(self), level = \"trace\")]\n+    #[instrument(skip(self), level = \"trace\", ret)]\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = t.flags();\n         trace!(t.flags=?t.flags());\n@@ -572,7 +572,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     #[inline]\n-    #[instrument(skip(self), level = \"trace\")]\n+    #[instrument(skip(self), level = \"trace\", ret)]\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = r.type_flags();\n         trace!(r.flags=?flags);\n@@ -584,7 +584,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     #[inline]\n-    #[instrument(level = \"trace\")]\n+    #[instrument(level = \"trace\", ret)]\n     fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_const(c);\n         trace!(r.flags=?flags);\n@@ -596,7 +596,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     #[inline]\n-    #[instrument(level = \"trace\")]\n+    #[instrument(level = \"trace\", ret)]\n     fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_unevaluated_const(uv);\n         trace!(r.flags=?flags);\n@@ -608,7 +608,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     #[inline]\n-    #[instrument(level = \"trace\")]\n+    #[instrument(level = \"trace\", ret)]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\","}, {"sha": "0e5cd6199ac9fb69ec7d3ecd7e23c42c3c483669", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///\n     /// * From each pre-binding block to the next pre-binding block.\n     /// * From each otherwise block to the next pre-binding block.\n-    #[tracing::instrument(level = \"debug\", skip(self, arms))]\n+    #[instrument(level = \"debug\", skip(self, arms))]\n     pub(crate) fn match_expr(\n         &mut self,\n         destination: Place<'tcx>,"}, {"sha": "9ed1c064d2b7f3ea651eb303c9e7824dbbdba8ec", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -268,7 +268,7 @@ impl<'tcx> Cx<'tcx> {\n                 // the overall method call for better diagnostics. args[0]\n                 // is guaranteed to exist, since a method call always has a receiver.\n                 let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));\n-                tracing::info!(\"Using method span: {:?}\", expr.span);\n+                info!(\"Using method span: {:?}\", expr.span);\n                 let args = self.mirror_exprs(args);\n                 self.adjustment_span = old_adjustment_span;\n                 ExprKind::Call {"}, {"sha": "b84a84976c7d9371339158086d26d4c3d472a92b", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> Cx<'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Pat<'tcx> {\n         let p = match self.tcx.hir().get(p.hir_id) {\n             Node::Pat(p) => p,"}, {"sha": "210d77c66e7002ff4928a9f26e45af4fee5117c8", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -19,21 +19,18 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     /// Converts an evaluated constant to a pattern (if possible).\n     /// This means aggregate values (like structs and enums) are converted\n     /// to a pattern that matches the value (as if you'd compared via structural equality).\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     pub(super) fn const_to_pat(\n         &self,\n         cv: mir::ConstantKind<'tcx>,\n         id: hir::HirId,\n         span: Span,\n         mir_structural_match_violation: bool,\n     ) -> Pat<'tcx> {\n-        let pat = self.tcx.infer_ctxt().enter(|infcx| {\n+        self.tcx.infer_ctxt().enter(|infcx| {\n             let mut convert = ConstToPat::new(self, id, span, infcx);\n             convert.to_pat(cv, mir_structural_match_violation)\n-        });\n-\n-        debug!(?pat);\n-        pat\n+        })\n     }\n }\n "}, {"sha": "319183eb9b33fc7e0a81f15cedd6f87cd641ad88", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -791,7 +791,7 @@ fn lint_non_exhaustive_omitted_patterns<'p, 'tcx>(\n /// `is_under_guard` is used to inform if the pattern has a guard. If it\n /// has one it must not be inserted into the matrix. This shouldn't be\n /// relied on for soundness.\n-#[instrument(level = \"debug\", skip(cx, matrix, hir_id))]\n+#[instrument(level = \"debug\", skip(cx, matrix, hir_id), ret)]\n fn is_useful<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n     matrix: &Matrix<'p, 'tcx>,\n@@ -917,7 +917,6 @@ fn is_useful<'p, 'tcx>(\n         v.head().set_reachable();\n     }\n \n-    debug!(?ret);\n     ret\n }\n "}, {"sha": "6ec5e9e113d1b4b85f6134c36fc1e4e75c89e529", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -419,7 +419,6 @@ fn collect_items_rec<'tcx>(\n         // We've been here already, no need to search again.\n         return;\n     }\n-    debug!(\"BEGIN collect_items_rec({})\", starting_point.node);\n \n     let mut neighbors = MonoItems { compute_inlining: true, tcx, items: Vec::new() };\n     let recursion_depth_reset;\n@@ -545,8 +544,6 @@ fn collect_items_rec<'tcx>(\n     if let Some((def_id, depth)) = recursion_depth_reset {\n         recursion_depths.insert(def_id, depth);\n     }\n-\n-    debug!(\"END collect_items_rec({})\", starting_point.node);\n }\n \n /// Format instance name that is already known to be too long for rustc.\n@@ -1148,23 +1145,18 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     }\n }\n \n-#[instrument(skip(tcx), level = \"debug\")]\n+#[instrument(skip(tcx), level = \"debug\", ret)]\n fn create_fn_mono_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     source: Span,\n ) -> Spanned<MonoItem<'tcx>> {\n-    debug!(\"create_fn_mono_item(instance={})\", instance);\n-\n     let def_id = instance.def_id();\n     if tcx.sess.opts.unstable_opts.profile_closures && def_id.is_local() && tcx.is_closure(def_id) {\n         crate::util::dump_closure_profile(tcx, instance);\n     }\n \n-    let respanned = respan(source, MonoItem::Fn(instance.polymorphize(tcx)));\n-    debug!(?respanned);\n-\n-    respanned\n+    respan(source, MonoItem::Fn(instance.polymorphize(tcx)))\n }\n \n /// Creates a `MonoItem` for each method that is referenced by the vtable for\n@@ -1309,7 +1301,7 @@ impl<'v> RootCollector<'_, 'v> {\n     #[instrument(skip(self), level = \"debug\")]\n     fn push_if_root(&mut self, def_id: LocalDefId) {\n         if self.is_root(def_id) {\n-            debug!(\"RootCollector::push_if_root: found root def_id={:?}\", def_id);\n+            debug!(\"found root\");\n \n             let instance = Instance::mono(self.tcx, def_id.to_def_id());\n             self.output.push(create_fn_mono_item(self.tcx, instance, DUMMY_SP));"}, {"sha": "af4b35db3bace8bbaefb9b7808e01bd05aaf75ed", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -33,7 +33,6 @@ pub fn provide(providers: &mut Providers) {\n ///\n /// Returns a bitset where bits representing unused parameters are set (`is_empty` indicates all\n /// parameters are used).\n-#[instrument(level = \"debug\", skip(tcx))]\n fn unused_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,"}, {"sha": "63819a2f98df57b17a49a426500e48111befcfa4", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -14,8 +14,6 @@ use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{edition::Edition, BytePos, Pos, Span};\n \n-use tracing::debug;\n-\n mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;"}, {"sha": "77c4fadab45eacc9f61d5fd4cb4d361cedc62666", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -20,13 +20,9 @@ pub(crate) fn emit_unescape_error(\n     range: Range<usize>,\n     error: EscapeError,\n ) {\n-    tracing::debug!(\n+    debug!(\n         \"emit_unescape_error: {:?}, {:?}, {:?}, {:?}, {:?}\",\n-        lit,\n-        span_with_quotes,\n-        mode,\n-        range,\n-        error\n+        lit, span_with_quotes, mode, range, error\n     );\n     let last_char = || {\n         let c = lit[range.clone()].chars().rev().next().unwrap();"}, {"sha": "77a6bde1c164e43ac43c73d6a36e50929da3a671", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -7,8 +7,6 @@ use rustc_errors::{error_code, Diagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n use std::convert::TryInto;\n \n-use tracing::debug;\n-\n // Public for rustfmt usage\n #[derive(Debug)]\n pub enum InnerAttrPolicy<'a> {"}, {"sha": "dd806e2130e9b062f62a58603524534328ab3298", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -29,7 +29,6 @@ use std::ops::{Deref, DerefMut};\n use std::mem::take;\n \n use crate::parser;\n-use tracing::{debug, trace};\n \n const TURBOFISH_SUGGESTION_STR: &str =\n     \"use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\";"}, {"sha": "5b75d1d5f221daa69dbaf0d34fc1a0462ec756ba", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -22,7 +22,6 @@ use rustc_span::DUMMY_SP;\n \n use std::convert::TryFrom;\n use std::mem;\n-use tracing::debug;\n \n impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser."}, {"sha": "5c8f374255c7fc91635b88391161d743150ecced", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -37,7 +37,6 @@ use rustc_errors::{\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use tracing::debug;\n \n use std::ops::Range;\n use std::{cmp, mem, slice};"}, {"sha": "fdc1af27f82e4206e3e7d95eec13f6ffb59a4a92", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -13,7 +13,6 @@ use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n \n use std::mem;\n-use tracing::debug;\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]"}, {"sha": "2a6889af7c2c92aab88860e449ae341e8e07917f", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -1573,7 +1573,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(skip(self), level = \"INFO\")]\n+    #[instrument(skip(self), level = \"INFO\")]\n     fn report_unused(\n         &self,\n         hir_ids_and_spans: Vec<(HirId, Span, Span)>,"}, {"sha": "a9271761358c9c7f1316c10f5553ab703b5f4f03", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -8,6 +8,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n mod errors;\n \n use rustc_ast::MacroDef;\n@@ -1784,7 +1787,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn leaks_private_dep(&self, item_id: DefId) -> bool {\n         let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);\n \n-        tracing::debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n+        debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n         ret\n     }\n }"}, {"sha": "eabb316614747365eb4f1373bd2383aabca814f1", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -555,7 +555,7 @@ macro_rules! define_queries_struct {\n \n             $($(#[$attr])*\n             #[inline(always)]\n-            #[tracing::instrument(level = \"trace\", skip(self, tcx))]\n+            #[tracing::instrument(level = \"trace\", skip(self, tcx), ret)]\n             fn $name(\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,"}, {"sha": "882a92c0ebb62d31257ba7d092d2104081dd22eb", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -39,7 +39,7 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n             visit::walk_crate(&mut visitor, krate);\n         }\n \n-        tracing::info!(\"resolve::access_levels: {:#?}\", r.access_levels);\n+        info!(\"resolve::access_levels: {:#?}\", r.access_levels);\n     }\n \n     fn reset(&mut self) {"}, {"sha": "cd0b2443da58e58c37a40130f8a83601ce330f01", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -36,7 +36,6 @@ use rustc_span::Span;\n \n use std::cell::Cell;\n use std::ptr;\n-use tracing::debug;\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "5955d8df16ee1edfa34f6edf2af8fca6c3cfc69c", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -8,7 +8,6 @@ use rustc_hir::definitions::*;\n use rustc_span::hygiene::LocalExpnId;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use tracing::debug;\n \n pub(crate) fn collect_definitions(\n     resolver: &mut Resolver<'_>,"}, {"sha": "4fd6fe4e36c69093babe14a7b3b2e8c214fa83d4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -25,7 +25,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n-use tracing::debug;\n \n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};"}, {"sha": "b84a610833ddf6a8faa398d6e070d0ef93b25136", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -273,7 +273,7 @@ impl<'a> Resolver<'a> {\n     ///\n     /// Invariant: This must only be called during main resolution, not during\n     /// import resolution.\n-    #[tracing::instrument(level = \"debug\", skip(self, ribs))]\n+    #[instrument(level = \"debug\", skip(self, ribs))]\n     pub(crate) fn resolve_ident_in_lexical_scope(\n         &mut self,\n         mut ident: Ident,\n@@ -367,7 +367,7 @@ impl<'a> Resolver<'a> {\n     /// expansion and import resolution (perhaps they can be merged in the future).\n     /// The function is used for resolving initial segments of macro paths (e.g., `foo` in\n     /// `foo::bar!(); or `foo!();`) and also for import paths on 2018 edition.\n-    #[tracing::instrument(level = \"debug\", skip(self, scope_set))]\n+    #[instrument(level = \"debug\", skip(self, scope_set))]\n     pub(crate) fn early_resolve_ident_in_lexical_scope(\n         &mut self,\n         orig_ident: Ident,\n@@ -708,7 +708,7 @@ impl<'a> Resolver<'a> {\n         Err(Determinacy::determined(determinacy == Determinacy::Determined || force))\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn maybe_resolve_ident_in_module(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -720,7 +720,7 @@ impl<'a> Resolver<'a> {\n             .map_err(|(determinacy, _)| determinacy)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn resolve_ident_in_module(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -734,7 +734,7 @@ impl<'a> Resolver<'a> {\n             .map_err(|(determinacy, _)| determinacy)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_ident_in_module_ext(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -772,7 +772,7 @@ impl<'a> Resolver<'a> {\n         )\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_ident_in_module_unadjusted(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -796,7 +796,7 @@ impl<'a> Resolver<'a> {\n \n     /// Attempts to resolve `ident` in namespaces `ns` of `module`.\n     /// Invariant: if `finalize` is `Some`, expansion and import resolution must be complete.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_ident_in_module_unadjusted_ext(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -1059,7 +1059,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     /// Validate a local resolution (from ribs).\n-    #[tracing::instrument(level = \"debug\", skip(self, all_ribs))]\n+    #[instrument(level = \"debug\", skip(self, all_ribs))]\n     fn validate_res_from_ribs(\n         &mut self,\n         rib_index: usize,\n@@ -1294,7 +1294,7 @@ impl<'a> Resolver<'a> {\n         res\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn maybe_resolve_path(\n         &mut self,\n         path: &[Segment],\n@@ -1304,7 +1304,7 @@ impl<'a> Resolver<'a> {\n         self.resolve_path_with_ribs(path, opt_ns, parent_scope, None, None, None)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn resolve_path(\n         &mut self,\n         path: &[Segment],"}, {"sha": "619ce0462203ad84966576aab2aec8e2fcfb0c24", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -23,8 +23,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n \n-use tracing::*;\n-\n use std::cell::Cell;\n use std::{mem, ptr};\n "}, {"sha": "dbe4d691f04cdf1a465dc3d1598498294f27b784", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -32,7 +32,6 @@ use smallvec::{smallvec, SmallVec};\n use rustc_span::source_map::{respan, Spanned};\n use std::collections::{hash_map::Entry, BTreeSet};\n use std::mem::{replace, take};\n-use tracing::debug;\n \n mod diagnostics;\n pub(crate) mod lifetimes;\n@@ -1390,7 +1389,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, work))]\n+    #[instrument(level = \"debug\", skip(self, work))]\n     fn with_lifetime_rib<T>(\n         &mut self,\n         kind: LifetimeRibKind,\n@@ -1404,7 +1403,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ret\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_lifetime(&mut self, lifetime: &'ast Lifetime, use_ctxt: visit::LifetimeCtxt) {\n         let ident = lifetime.ident;\n \n@@ -1508,7 +1507,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.record_lifetime_res(lifetime.id, LifetimeRes::Error, LifetimeElisionCandidate::Named);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_anonymous_lifetime(&mut self, lifetime: &Lifetime, elided: bool) {\n         debug_assert_eq!(lifetime.ident.name, kw::UnderscoreLifetime);\n \n@@ -1573,7 +1572,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.report_missing_lifetime_specifiers(vec![missing_lifetime], None);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_elided_lifetime(&mut self, anchor_id: NodeId, span: Span) {\n         let id = self.r.next_node_id();\n         let lt = Lifetime { id, ident: Ident::new(kw::UnderscoreLifetime, span) };\n@@ -1586,7 +1585,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.resolve_anonymous_lifetime(&lt, true);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn create_fresh_lifetime(&mut self, id: NodeId, ident: Ident, binder: NodeId) -> LifetimeRes {\n         debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n         debug!(?ident.span);\n@@ -1604,7 +1603,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         res\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_elided_lifetimes_in_path(\n         &mut self,\n         path_id: NodeId,\n@@ -1804,7 +1803,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn record_lifetime_res(\n         &mut self,\n         id: NodeId,\n@@ -1827,7 +1826,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn record_lifetime_param(&mut self, id: NodeId, res: LifetimeRes) {\n         if let Some(prev_res) = self.r.lifetimes_res_map.insert(id, res) {\n             panic!(\n@@ -1838,7 +1837,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n \n     /// Perform resolution of a function signature, accounting for lifetime elision.\n-    #[tracing::instrument(level = \"debug\", skip(self, inputs))]\n+    #[instrument(level = \"debug\", skip(self, inputs))]\n     fn resolve_fn_signature(\n         &mut self,\n         fn_id: NodeId,\n@@ -3268,11 +3267,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         source: PathSource<'ast>,\n         finalize: Finalize,\n     ) -> PartialRes {\n-        tracing::debug!(\n+        debug!(\n             \"smart_resolve_path_fragment(qself={:?}, path={:?}, finalize={:?})\",\n-            qself,\n-            path,\n-            finalize,\n+            qself, path, finalize,\n         );\n         let ns = source.namespace();\n "}, {"sha": "99d13acbae1b9aa5fd9afecc36f18949557bbc8b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -33,8 +33,6 @@ use rustc_span::{BytePos, Span};\n use std::iter;\n use std::ops::Deref;\n \n-use tracing::debug;\n-\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure."}, {"sha": "c16eab222f625d8495bcf99e62d8fed42aef951e", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -278,7 +278,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n /// lifetimes into a single binder.) This requires us to resolve the\n /// *trait definition* of `Sub`; basically just enough lifetime information\n /// to look at the supertraits.\n-#[tracing::instrument(level = \"debug\", skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes_trait_definition(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n@@ -289,7 +289,7 @@ fn resolve_lifetimes_trait_definition(\n /// Computes the `ResolveLifetimes` map that contains data for an entire `Item`.\n /// You should not read the result of this query directly, but rather use\n /// `named_region_map`, `is_late_bound_map`, etc.\n-#[tracing::instrument(level = \"debug\", skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> ResolveLifetimes {\n     convert_named_region_map(do_resolve(tcx, local_def_id, false))\n }\n@@ -647,7 +647,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n         match ty.kind {\n             hir::TyKind::BareFn(ref c) => {\n@@ -930,7 +930,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         match lifetime_ref.name {\n             hir::LifetimeName::Static => self.insert_lifetime(lifetime_ref, Region::Static),\n@@ -1212,7 +1212,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             scope: &wrap_scope,\n             trait_definition_only: self.trait_definition_only,\n         };\n-        let span = tracing::debug_span!(\"scope\", scope = ?TruncatedScopeDebug(&this.scope));\n+        let span = debug_span!(\"scope\", scope = ?TruncatedScopeDebug(&this.scope));\n         {\n             let _enter = span.enter();\n             f(&mut this);\n@@ -1287,7 +1287,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.with(scope, walk);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_lifetime_ref(\n         &mut self,\n         region_def_id: LocalDefId,\n@@ -1409,7 +1409,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         );\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_segment_args(\n         &mut self,\n         res: Res,\n@@ -1659,7 +1659,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_fn_like_elision(\n         &mut self,\n         inputs: &'tcx [hir::Ty<'tcx>],\n@@ -1707,7 +1707,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.insert_lifetime(lifetime_ref, lifetime.shifted(late_depth));\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n         debug!(\n             node = ?self.tcx.hir().node_to_string(lifetime_ref.hir_id),"}, {"sha": "4e8f3a2cae879f11c03a2fd23c8cc7bd44230718", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -58,7 +58,6 @@ use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n use std::{cmp, fmt, ptr};\n-use tracing::debug;\n \n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};"}, {"sha": "ac6c3663b63762d134e8bb21a6567724a08dd022", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -44,8 +44,6 @@ use rls_data::{\n     RefKind, Relation, RelationKind, SpanData,\n };\n \n-use tracing::{debug, error};\n-\n #[rustfmt::skip] // https://github.com/rust-lang/rustfmt/issues/5213\n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {"}, {"sha": "16af53385104646aab85c1876aaf6e4f07b3c1ee", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -7,6 +7,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n mod dump_visitor;\n mod dumper;\n #[macro_use]\n@@ -49,8 +52,6 @@ use rls_data::{\n     RefKind, Relation, RelationKind, SpanData,\n };\n \n-use tracing::{debug, error, info};\n-\n pub struct SaveContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     maybe_typeck_results: Option<&'tcx ty::TypeckResults<'tcx>>,"}, {"sha": "2336d99363fd3d8ed639b61d96d9891dcb293439", "filename": "compiler/rustc_session/src/cgu_reuse_tracker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -10,7 +10,6 @@ use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n use std::fmt::{self};\n use std::sync::{Arc, Mutex};\n-use tracing::debug;\n \n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]\n pub enum CguReuse {"}, {"sha": "7c50fe2d823bd443a8ad5adb9664c94c6ff8f662", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -2530,7 +2530,7 @@ fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Optio\n             ),\n         ),\n     };\n-    tracing::debug!(\"got unpretty option: {first:?}\");\n+    debug!(\"got unpretty option: {first:?}\");\n     Some(first)\n }\n "}, {"sha": "e8edb38f5038ea1f4c55d949a5dc3558050efbbe", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -7,7 +7,6 @@ use std::path::{Path, PathBuf};\n \n use crate::search_paths::{PathKind, SearchPath};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n-use tracing::debug;\n \n #[derive(Copy, Clone)]\n pub enum FileMatch {"}, {"sha": "02d5d33c8d5ba24727b27fec54a3a42bbd511fe4", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -14,6 +14,9 @@\n extern crate rustc_macros;\n pub mod errors;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub mod cgu_reuse_tracker;\n pub mod utils;\n pub use lint::{declare_lint, declare_lint_pass, declare_tool_lint, impl_lint_pass};"}, {"sha": "e8ddb4ed17a3e6da5af4e922736fa11dbe4c029f", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -41,7 +41,6 @@ use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::hash::Hash;\n-use tracing::*;\n \n /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named \"marks\".\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]"}, {"sha": "34e2e92bdfce1efa6fc203f15245ac5d76104a04", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -76,8 +76,6 @@ use md5::Md5;\n use sha1::Sha1;\n use sha2::Sha256;\n \n-use tracing::debug;\n-\n #[cfg(test)]\n mod tests;\n "}, {"sha": "4d94c92d3f2b182ce8521d059210527bf784d62d", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -23,7 +23,6 @@ use std::{convert::TryFrom, unreachable};\n \n use std::fs;\n use std::io;\n-use tracing::debug;\n \n #[cfg(test)]\n mod tests;\n@@ -1060,13 +1059,13 @@ impl FilePathMapping {\n \n         return remap_path_prefix(&self.mapping, path);\n \n-        #[instrument(level = \"debug\", skip(mapping))]\n+        #[instrument(level = \"debug\", skip(mapping), ret)]\n         fn remap_path_prefix(mapping: &[(PathBuf, PathBuf)], path: PathBuf) -> (PathBuf, bool) {\n             // NOTE: We are iterating over the mapping entries from last to first\n             //       because entries specified later on the command line should\n             //       take precedence.\n             for &(ref from, ref to) in mapping.iter().rev() {\n-                debug!(\"Trying to apply {:?} => {:?}\", from, to);\n+                debug!(\"Trying to apply {from:?} => {to:?}\");\n \n                 if let Ok(rest) = path.strip_prefix(from) {\n                     let remapped = if rest.as_os_str().is_empty() {\n@@ -1080,15 +1079,15 @@ impl FilePathMapping {\n                     } else {\n                         to.join(rest)\n                     };\n-                    debug!(\"Match - remapped {:?} => {:?}\", path, remapped);\n+                    debug!(\"Match - remapped\");\n \n                     return (remapped, true);\n                 } else {\n-                    debug!(\"No match - prefix {:?} does not match {:?}\", from, path);\n+                    debug!(\"No match - prefix {from:?} does not match\");\n                 }\n             }\n \n-            debug!(\"Path {:?} was not remapped\", path);\n+            debug!(\"not remapped\");\n             (path, false)\n         }\n     }"}, {"sha": "46c5fe78ffbf65697085e5bcd7874ed70e50595a", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -6,8 +6,6 @@ use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::util::common::record_time;\n \n-use tracing::debug;\n-\n use std::fmt::{self, Write};\n use std::mem::{self, discriminant};\n "}, {"sha": "62f44a48032efd93301b704bf538bdea53813c8f", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -97,6 +97,9 @@\n #[macro_use]\n extern crate rustc_middle;\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n@@ -107,8 +110,6 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::config::SymbolManglingVersion;\n \n-use tracing::debug;\n-\n mod legacy;\n mod v0;\n "}, {"sha": "26f8e7d34c6eac056f1b06a4563b0e7c33497906", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::ty::{self, TyCtxt};\n /// obligations *could be* resolved if we wanted to.\n ///\n /// This also expects that `trait_ref` is fully normalized.\n-#[instrument(level = \"debug\", skip(tcx))]\n pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n@@ -74,7 +73,6 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         // (ouz-a) This is required for `type-alias-impl-trait/assoc-projection-ice.rs` to pass\n         let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n \n-        debug!(\"Cache miss: {trait_ref:?} => {impl_source:?}\");\n         Ok(&*tcx.arena.alloc(impl_source))\n     })\n }"}, {"sha": "99046bd126f937f74d557cb582c8db8d17457305", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -2014,7 +2014,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         let predicate = self.resolve_vars_if_possible(obligation.predicate);\n         let span = obligation.cause.span;\n \n-        debug!(?predicate, obligation.cause.code = tracing::field::debug(&obligation.cause.code()));\n+        debug!(?predicate, obligation.cause.code = ?obligation.cause.code());\n \n         // Ambiguity errors are often caused as fallout from earlier errors.\n         // We ignore them if this `infcx` is tainted in some cases below."}, {"sha": "3763a98c488b766c11fc1e863a17e29f1c5c23d2", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     /// `SomeTrait` or a where-clause that lets us unify `$0` with\n     /// something concrete. If this fails, we'll unify `$0` with\n     /// `projection_ty` again.\n-    #[tracing::instrument(level = \"debug\", skip(self, infcx, param_env, cause))]\n+    #[instrument(level = \"debug\", skip(self, infcx, param_env, cause))]\n     fn normalize_projection_type(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "398635674abcfd19a69c7de02f88af6787e209f9", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -231,7 +231,7 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n /// If successful, this may result in additional obligations.\n ///\n /// See [poly_project_and_unify_type] for an explanation of the return value.\n-#[tracing::instrument(level = \"debug\", skip(selcx))]\n+#[instrument(level = \"debug\", skip(selcx))]\n fn project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionObligation<'tcx>,\n@@ -1206,7 +1206,7 @@ impl<'tcx> Progress<'tcx> {\n ///\n /// IMPORTANT:\n /// - `obligation` must be fully normalized\n-#[tracing::instrument(level = \"info\", skip(selcx))]\n+#[instrument(level = \"info\", skip(selcx))]\n fn project<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n@@ -1368,7 +1368,7 @@ fn assemble_candidates_from_object_ty<'cx, 'tcx>(\n     );\n }\n \n-#[tracing::instrument(\n+#[instrument(\n     level = \"debug\",\n     skip(selcx, candidate_set, ctor, env_predicates, potentially_unnormalized_candidates)\n )]\n@@ -1419,7 +1419,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     }\n }\n \n-#[tracing::instrument(level = \"debug\", skip(selcx, obligation, candidate_set))]\n+#[instrument(level = \"debug\", skip(selcx, obligation, candidate_set))]\n fn assemble_candidates_from_impls<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}, {"sha": "e84c462ca816195e39badb321ed16c0a2135404b", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -28,7 +28,7 @@ use super::SelectionCandidate::{self, *};\n use super::{EvaluatedCandidate, SelectionCandidateSet, SelectionContext, TraitObligationStack};\n \n impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     pub(super) fn candidate_from_obligation<'o>(\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n@@ -48,7 +48,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if let Some(c) =\n             self.check_candidate_cache(stack.obligation.param_env, cache_fresh_trait_pred)\n         {\n-            debug!(candidate = ?c, \"CACHE HIT\");\n+            debug!(\"CACHE HIT\");\n             return c;\n         }\n \n@@ -61,7 +61,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let (candidate, dep_node) =\n             self.in_task(|this| this.candidate_from_obligation_no_cache(stack));\n \n-        debug!(?candidate, \"CACHE MISS\");\n+        debug!(\"CACHE MISS\");\n         self.insert_candidate_cache(\n             stack.obligation.param_env,\n             cache_fresh_trait_pred,\n@@ -337,7 +337,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(candidates)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n+    #[instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_candidates_from_projected_tys(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -367,7 +367,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// supplied to find out whether it is listed among them.\n     ///\n     /// Never affects the inference environment.\n-    #[tracing::instrument(level = \"debug\", skip(self, stack, candidates))]\n+    #[instrument(level = \"debug\", skip(self, stack, candidates))]\n     fn assemble_candidates_from_caller_bounds<'o>(\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n@@ -880,7 +880,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, obligation, candidates))]\n+    #[instrument(level = \"debug\", skip(self, obligation, candidates))]\n     fn assemble_candidates_for_transmutability(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -898,7 +898,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidates.vec.push(TransmutabilityCandidate);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, obligation, candidates))]\n+    #[instrument(level = \"debug\", skip(self, obligation, candidates))]\n     fn assemble_candidates_for_trait_alias(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -917,7 +917,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Assembles the trait which are built-in to the language itself:\n     /// `Copy`, `Clone` and `Sized`.\n-    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n+    #[instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_builtin_bound_candidates(\n         &mut self,\n         conditions: BuiltinImplConditions<'tcx>,"}, {"sha": "5da8cfab0b13b77102197cf235c3503b1cef9533", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -295,7 +295,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Attempts to satisfy the obligation. If successful, this will affect the surrounding\n     /// type environment by performing unification.\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     pub fn select(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -325,10 +325,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Err(SelectionError::Overflow(OverflowError::Canonical))\n             }\n             Err(e) => Err(e),\n-            Ok(candidate) => {\n-                debug!(?candidate, \"confirmed\");\n-                Ok(Some(candidate))\n-            }\n+            Ok(candidate) => Ok(Some(candidate)),\n         }\n     }\n \n@@ -435,6 +432,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         level = \"debug\",\n         skip(self, previous_stack),\n         fields(previous_stack = ?previous_stack.head())\n+        ret,\n     )]\n     fn evaluate_predicate_recursively<'o>(\n         &mut self,\n@@ -450,7 +448,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             None => self.check_recursion_limit(&obligation, &obligation)?,\n         }\n \n-        let result = ensure_sufficient_stack(|| {\n+        ensure_sufficient_stack(|| {\n             let bound_predicate = obligation.predicate.kind();\n             match bound_predicate.skip_binder() {\n                 ty::PredicateKind::Trait(t) => {\n@@ -760,14 +758,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     bug!(\"TypeWellFormedFromEnv is only used for chalk\")\n                 }\n             }\n-        });\n-\n-        debug!(\"finished: {:?} from {:?}\", result, obligation);\n-\n-        result\n+        })\n     }\n \n-    #[instrument(skip(self, previous_stack), level = \"debug\")]\n+    #[instrument(skip(self, previous_stack), level = \"debug\", ret)]\n     fn evaluate_trait_predicate_recursively<'o>(\n         &mut self,\n         previous_stack: TraitObligationStackList<'o, 'tcx>,\n@@ -798,12 +792,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // If a trait predicate is in the (local or global) evaluation cache,\n         // then we know it holds without cycles.\n         if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {\n-            debug!(?result, \"CACHE HIT\");\n+            debug!(\"CACHE HIT\");\n             return Ok(result);\n         }\n \n         if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {\n-            debug!(?result, \"PROVISIONAL CACHE HIT\");\n+            debug!(\"PROVISIONAL CACHE HIT\");\n             stack.update_reached_depth(result.reached_depth);\n             return Ok(result.result);\n         }\n@@ -826,11 +820,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let reached_depth = stack.reached_depth.get();\n         if reached_depth >= stack.depth {\n-            debug!(?result, \"CACHE MISS\");\n+            debug!(\"CACHE MISS\");\n             self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);\n             stack.cache().on_completion(stack.dfn);\n         } else {\n-            debug!(?result, \"PROVISIONAL\");\n+            debug!(\"PROVISIONAL\");\n             debug!(\n                 \"caching provisionally because {:?} \\\n                  is a cycle participant (at depth {}, reached depth {})\",\n@@ -1023,7 +1017,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     #[instrument(\n         level = \"debug\",\n         skip(self, stack),\n-        fields(depth = stack.obligation.recursion_depth)\n+        fields(depth = stack.obligation.recursion_depth),\n+        ret\n     )]\n     fn evaluate_candidate<'o>(\n         &mut self,\n@@ -1056,7 +1051,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             result = result.max(EvaluatedToOkModuloRegions);\n         }\n \n-        debug!(?result);\n         Ok(result)\n     }\n \n@@ -1405,7 +1399,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// a projection, look at the bounds of `T::Bar`, see if we can find a\n     /// `Baz` bound. We return indexes into the list returned by\n     /// `tcx.item_bounds` for any applicable bounds.\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn match_projection_obligation_against_definition_bounds(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -1435,7 +1429,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // unnecessary ambiguity.\n         let mut distinct_normalized_bounds = FxHashSet::default();\n \n-        let matching_bounds = bounds\n+        bounds\n             .iter()\n             .enumerate()\n             .filter_map(|(idx, bound)| {\n@@ -1462,10 +1456,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n                 None\n             })\n-            .collect();\n-\n-        debug!(?matching_bounds);\n-        matching_bounds\n+            .collect()\n     }\n \n     /// Equates the trait in `obligation` with trait bound. If the two traits\n@@ -2153,7 +2144,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn match_impl(\n         &mut self,\n         impl_def_id: DefId,\n@@ -2194,17 +2185,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .at(&cause, obligation.param_env)\n             .define_opaque_types(false)\n             .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n-            .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n+            .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{e}`\"))?;\n         nested_obligations.extend(obligations);\n \n         if !self.intercrate\n             && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation\n         {\n-            debug!(\"match_impl: reservation impls only apply in intercrate mode\");\n+            debug!(\"reservation impls only apply in intercrate mode\");\n             return Err(());\n         }\n \n-        debug!(?impl_substs, ?nested_obligations, \"match_impl: success\");\n         Ok(Normalized { value: impl_substs, obligations: nested_obligations })\n     }\n \n@@ -2335,7 +2325,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// impl or trait. The obligations are substituted and fully\n     /// normalized. This is used when confirming an impl or default\n     /// impl.\n-    #[tracing::instrument(level = \"debug\", skip(self, cause, param_env))]\n+    #[instrument(level = \"debug\", skip(self, cause, param_env))]\n     fn impl_or_trait_obligations(\n         &mut self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "bb6009cb22a37b2df733bb9019e164eae8d5288b", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -841,7 +841,7 @@ pub fn object_region_bounds<'tcx>(\n ///\n /// Requires that trait definitions have been processed so that we can\n /// elaborate predicates and walk supertraits.\n-#[instrument(skip(tcx, predicates), level = \"debug\")]\n+#[instrument(skip(tcx, predicates), level = \"debug\", ret)]\n pub(crate) fn required_region_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     erased_self_ty: Ty<'tcx>,"}, {"sha": "211c813b8001c8ae626bc5f783213c3c83fc2010", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -317,7 +317,7 @@ pub(crate) mod rustc {\n                             tcx,\n                         )?,\n                         AdtKind::Enum => {\n-                            tracing::trace!(?adt_def, \"treeifying enum\");\n+                            trace!(?adt_def, \"treeifying enum\");\n                             let mut tree = Tree::uninhabited();\n \n                             for (idx, discr) in adt_def.discriminants(tcx) {\n@@ -381,7 +381,7 @@ pub(crate) mod rustc {\n             let clamp =\n                 |align: Align| align.clamp(min_align, max_align).bytes().try_into().unwrap();\n \n-            let variant_span = tracing::trace_span!(\n+            let variant_span = trace_span!(\n                 \"treeifying variant\",\n                 min_align = ?min_align,\n                 max_align = ?max_align,\n@@ -396,22 +396,22 @@ pub(crate) mod rustc {\n \n             // The layout of the variant is prefixed by the discriminant, if any.\n             if let Some(discr) = discr {\n-                tracing::trace!(?discr, \"treeifying discriminant\");\n+                trace!(?discr, \"treeifying discriminant\");\n                 let discr_layout = alloc::Layout::from_size_align(\n                     layout_summary.discriminant_size,\n                     clamp(layout_summary.discriminant_align),\n                 )\n                 .unwrap();\n-                tracing::trace!(?discr_layout, \"computed discriminant layout\");\n+                trace!(?discr_layout, \"computed discriminant layout\");\n                 variant_layout = variant_layout.extend(discr_layout).unwrap().0;\n                 tree = tree.then(Self::from_disr(discr, tcx, layout_summary.discriminant_size));\n             }\n \n             // Next come fields.\n-            let fields_span = tracing::trace_span!(\"treeifying fields\").entered();\n+            let fields_span = trace_span!(\"treeifying fields\").entered();\n             for field_def in variant_def.fields.iter() {\n                 let field_ty = field_def.ty(tcx, substs_ref);\n-                let _span = tracing::trace_span!(\"treeifying field\", field = ?field_ty).entered();\n+                let _span = trace_span!(\"treeifying field\", field = ?field_ty).entered();\n \n                 // begin with the field's visibility\n                 tree = tree.then(Self::def(Def::Field(field_def)));\n@@ -434,7 +434,7 @@ pub(crate) mod rustc {\n             drop(fields_span);\n \n             // finally: padding\n-            let padding_span = tracing::trace_span!(\"adding trailing padding\").entered();\n+            let padding_span = trace_span!(\"adding trailing padding\").entered();\n             let padding_needed = layout_summary.total_size - variant_layout.size();\n             if padding_needed > 0 {\n                 tree = tree.then(Self::padding(padding_needed));\n@@ -467,7 +467,7 @@ pub(crate) mod rustc {\n             layout.align().abi.bytes().try_into().unwrap(),\n         )\n         .unwrap();\n-        tracing::trace!(?ty, ?layout, \"computed layout for type\");\n+        trace!(?ty, ?layout, \"computed layout for type\");\n         Ok(layout)\n     }\n }"}, {"sha": "248ff1ec24164c9209c84bdd98b009de8e2679d7", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -110,7 +110,7 @@ where\n             // Remove all `Def` nodes from `src`, without checking their visibility.\n             let src = src.prune(&|def| true);\n \n-            tracing::trace!(?src, \"pruned src\");\n+            trace!(?src, \"pruned src\");\n \n             // Remove all `Def` nodes from `dst`, additionally...\n             let dst = if assume_visibility {\n@@ -121,7 +121,7 @@ where\n                 dst.prune(&|def| context.is_accessible_from(def, scope))\n             };\n \n-            tracing::trace!(?dst, \"pruned dst\");\n+            trace!(?dst, \"pruned dst\");\n \n             // Convert `src` from a tree-based representation to an NFA-based representation.\n             // If the conversion fails because `src` is uninhabited, conclude that the transmutation"}, {"sha": "adab343ac98aaa4b225a4b2bcb790d3000f3c2ea", "filename": "compiler/rustc_transmute/src/maybe_transmutable/query_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -82,7 +82,7 @@ mod rustc {\n                 false\n             };\n \n-            tracing::trace!(?ret, \"ret\");\n+            trace!(?ret, \"ret\");\n             ret\n         }\n "}, {"sha": "661e413fc5b8170defb0d06724fc0b62710b4573", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -15,8 +15,6 @@ use std::collections::btree_map::Entry;\n use std::collections::BTreeMap;\n use std::ops::ControlFlow;\n \n-use tracing::debug;\n-\n // FIXME(#86795): `BoundVarsCollector` here should **NOT** be used\n // outside of `resolve_associated_item`. It's just to address #64494,\n // #83765, and #85848 which are creating bound types/regions that lose"}, {"sha": "9d640672cf92c8cd3bc2f7cc861c931a71b3edb7", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -104,7 +104,6 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtSizedConstrain\n }\n \n /// See `ParamEnv` struct definition for details.\n-#[instrument(level = \"debug\", skip(tcx))]\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // The param_env of an impl Trait type is its defining function's param_env\n     if let Some(parent) = ty::is_impl_trait_defn(tcx, def_id) {\n@@ -410,7 +409,6 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n }\n \n /// Don't call this directly: use ``tcx.conservative_is_privately_uninhabited`` instead.\n-#[instrument(level = \"debug\", skip(tcx))]\n pub fn conservative_is_privately_uninhabited_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env_and: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,"}, {"sha": "ef927058df4eef0781c1c7a512921844d540b2c9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -144,7 +144,7 @@ enum ConvertedBindingKind<'a, 'tcx> {\n /// instantiated with some generic arguments providing `'a` explicitly,\n /// we taint those arguments with `ExplicitLateBound::Yes` so that we\n /// can provide an appropriate diagnostic later.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum ExplicitLateBound {\n     Yes,\n     No,\n@@ -167,7 +167,7 @@ pub(crate) enum GenericArgPosition {\n \n /// A marker denoting that the generic arguments that were\n /// provided did not match the respective generic parameters.\n-#[derive(Clone, Default)]\n+#[derive(Clone, Default, Debug)]\n pub struct GenericArgCountMismatch {\n     /// Indicates whether a fatal error was reported (`Some`), or just a lint (`None`).\n     pub reported: Option<ErrorGuaranteed>,\n@@ -177,7 +177,7 @@ pub struct GenericArgCountMismatch {\n \n /// Decorates the result of a generic argument count mismatch\n /// check with whether explicit late bounds were provided.\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct GenericArgCountResult {\n     pub explicit_late_bound: ExplicitLateBound,\n     pub correct: Result<(), GenericArgCountMismatch>,\n@@ -201,7 +201,7 @@ pub trait CreateSubstsForGenericArgsCtxt<'a, 'tcx> {\n }\n \n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     pub fn ast_region_to_region(\n         &self,\n         lifetime: &hir::Lifetime,\n@@ -210,7 +210,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| tcx.hir().name(tcx.hir().local_def_id_to_hir_id(def_id));\n \n-        let r = match tcx.named_region(lifetime.hir_id) {\n+        match tcx.named_region(lifetime.hir_id) {\n             Some(rl::Region::Static) => tcx.lifetimes.re_static,\n \n             Some(rl::Region::LateBound(debruijn, index, def_id)) => {\n@@ -255,9 +255,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     tcx.lifetimes.re_static\n                 })\n             }\n-        };\n-        debug!(\"ast_region_to_region(lifetime={:?}) yields {:?}\", lifetime, r);\n-        r\n+        }\n     }\n \n     /// Given a path `path` that refers to an item `I` with the declared generics `decl_generics`,\n@@ -317,7 +315,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// `[Vec<u8>, u8]` and `generic_args` are the arguments for the associated\n     /// type itself: `['a]`. The returned `SubstsRef` concatenates these two\n     /// lists: `[Vec<u8>, u8, 'a]`.\n-    #[tracing::instrument(level = \"debug\", skip(self, span))]\n+    #[instrument(level = \"debug\", skip(self, span), ret)]\n     fn create_substs_for_ast_path<'a>(\n         &self,\n         span: Span,\n@@ -537,11 +535,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             &mut substs_ctx,\n         );\n \n-        debug!(\n-            \"create_substs_for_ast_path(generic_params={:?}, self_ty={:?}) -> {:?}\",\n-            generics, self_ty, substs\n-        );\n-\n         (substs, arg_count)\n     }\n \n@@ -716,7 +709,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// where `'a` is a bound region at depth 0. Similarly, the `poly_trait_ref` would be\n     /// `Bar<'a>`. The returned poly-trait-ref will have this binder instantiated explicitly,\n     /// however.\n-    #[tracing::instrument(level = \"debug\", skip(self, span, constness, bounds, speculative))]\n+    #[instrument(level = \"debug\", skip(self, span, constness, bounds, speculative))]\n     pub(crate) fn instantiate_poly_trait_ref(\n         &self,\n         trait_ref: &hir::TraitRef<'_>,\n@@ -808,7 +801,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ty::TraitRef::new(trait_def_id, substs)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, span))]\n+    #[instrument(level = \"debug\", skip(self, span))]\n     fn create_substs_for_ast_trait_ref<'a>(\n         &self,\n         span: Span,\n@@ -922,7 +915,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// **A note on binders:** there is an implied binder around\n     /// `param_ty` and `ast_bounds`. See `instantiate_poly_trait_ref`\n     /// for more details.\n-    #[tracing::instrument(level = \"debug\", skip(self, ast_bounds, bounds))]\n+    #[instrument(level = \"debug\", skip(self, ast_bounds, bounds))]\n     pub(crate) fn add_bounds<'hir, I: Iterator<Item = &'hir hir::GenericBound<'hir>>>(\n         &self,\n         param_ty: Ty<'tcx>,\n@@ -1028,10 +1021,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// **A note on binders:** given something like `T: for<'a> Iterator<Item = &'a u32>`, the\n     /// `trait_ref` here will be `for<'a> T: Iterator`. The `binding` data however is from *inside*\n     /// the binder (e.g., `&'a u32`) and hence may reference bound regions.\n-    #[tracing::instrument(\n-        level = \"debug\",\n-        skip(self, bounds, speculative, dup_bindings, path_span)\n-    )]\n+    #[instrument(level = \"debug\", skip(self, bounds, speculative, dup_bindings, path_span))]\n     fn add_predicates_for_ast_type_binding(\n         &self,\n         hir_ref_id: hir::HirId,\n@@ -2599,7 +2589,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// Turns a `hir::Ty` into a `Ty`. For diagnostics' purposes we keep track of whether trait\n     /// objects are borrowed like `&dyn Trait` to avoid emitting redundant errors.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn ast_ty_to_ty_inner(&self, ast_ty: &hir::Ty<'_>, borrowed: bool, in_path: bool) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n@@ -2703,8 +2693,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::Err => tcx.ty_error(),\n         };\n \n-        debug!(?result_ty);\n-\n         self.record_ty(ast_ty.hir_id, result_ty, ast_ty.span);\n         result_ty\n     }"}, {"sha": "25bafdfe859b882af75dee0a021595a9db8f7670", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -12,7 +12,7 @@ use rustc_trait_selection::traits::{\n };\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    #[instrument(skip(self), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\", ret)]\n     pub fn check_match(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n@@ -212,9 +212,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // We won't diverge unless the scrutinee or all arms diverge.\n         self.diverges.set(scrut_diverges | all_arms_diverge);\n \n-        let match_ty = coercion.complete(self);\n-        debug!(?match_ty);\n-        match_ty\n+        coercion.complete(self)\n     }\n \n     /// When the previously checked expression (the scrutinee) diverges,"}, {"sha": "bc3fec6e7d66a371dc57dfb0fd8a0039a30838fa", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.check_closure(expr, expected_kind, decl, body, gen, expected_sig)\n     }\n \n-    #[instrument(skip(self, expr, body, decl), level = \"debug\")]\n+    #[instrument(skip(self, expr, body, decl), level = \"debug\", ret)]\n     fn check_closure(\n         &self,\n         expr: &hir::Expr<'_>,\n@@ -158,11 +158,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             },\n         );\n \n-        let closure_type = self.tcx.mk_closure(expr_def_id.to_def_id(), closure_substs.substs);\n-\n-        debug!(?expr.hir_id, ?closure_type);\n-\n-        closure_type\n+        self.tcx.mk_closure(expr_def_id.to_def_id(), closure_substs.substs)\n     }\n \n     /// Given the expected type, figures out what it can about this closure we\n@@ -262,7 +258,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// The `cause_span` should be the span that caused us to\n     /// have this expected signature, or `None` if we can't readily\n     /// know that.\n-    #[instrument(level = \"debug\", skip(self, cause_span))]\n+    #[instrument(level = \"debug\", skip(self, cause_span), ret)]\n     fn deduce_sig_from_projection(\n         &self,\n         cause_span: Option<Span>,\n@@ -317,7 +313,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir::Unsafety::Normal,\n             Abi::Rust,\n         ));\n-        debug!(?sig);\n \n         Some(ExpectedSig { cause_span, sig })\n     }\n@@ -576,7 +571,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// types that the user gave into a signature.\n     ///\n     /// Also, record this closure signature for later.\n-    #[instrument(skip(self, decl, body), level = \"debug\")]\n+    #[instrument(skip(self, decl, body), level = \"debug\", ret)]\n     fn supplied_sig_of_closure(\n         &self,\n         hir_id: hir::HirId,\n@@ -629,8 +624,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             bound_vars,\n         );\n \n-        debug!(?result);\n-\n         let c_result = self.inh.infcx.canonicalize_response(result);\n         self.typeck_results.borrow_mut().user_provided_sigs.insert(expr_def_id, c_result);\n \n@@ -643,7 +636,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// user specified. The \"desugared\" return type is an `impl\n     /// Future<Output = T>`, so we do this by searching through the\n     /// obligations to extract the `T`.\n-    #[instrument(skip(self), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\", ret)]\n     fn deduce_future_output_from_obligations(\n         &self,\n         expr_def_id: DefId,\n@@ -704,7 +697,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n         self.register_predicates(obligations);\n \n-        debug!(\"deduce_future_output_from_obligations: output_ty={:?}\", output_ty);\n         Some(output_ty)\n     }\n "}, {"sha": "b6bc244d2b14447a5c3d4a96c942a87f8ca0f58a", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -1308,7 +1308,7 @@ fn compare_type_predicate_entailment<'tcx>(\n /// For default associated types the normalization is not possible (the value\n /// from the impl could be overridden). We also can't normalize generic\n /// associated types (yet) because they contain bound parameters.\n-#[tracing::instrument(level = \"debug\", skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n pub fn check_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ty: &ty::AssocItem,"}, {"sha": "b9054898a2e579174a748a275146d570d0074449", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// N.B., this code relies on `self.diverges` to be accurate. In particular, assignments to `!`\n     /// will be permitted if the diverges flag is currently \"always\".\n-    #[tracing::instrument(level = \"debug\", skip(self, expr, expected_ty_expr, allow_two_phase))]\n+    #[instrument(level = \"debug\", skip(self, expr, expected_ty_expr, allow_two_phase))]\n     pub fn demand_coerce_diag(\n         &self,\n         expr: &hir::Expr<'tcx>,"}, {"sha": "66b737a493058861a7b36928ba4295eeb1b2ff8a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.resolve_vars_with_obligations_and_mutate_fulfillment(ty, |_| {})\n     }\n \n-    #[instrument(skip(self, mutate_fulfillment_errors), level = \"debug\")]\n+    #[instrument(skip(self, mutate_fulfillment_errors), level = \"debug\", ret)]\n     pub(in super::super) fn resolve_vars_with_obligations_and_mutate_fulfillment(\n         &self,\n         mut ty: Ty<'tcx>,\n@@ -107,10 +107,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // indirect dependencies that don't seem worth tracking\n         // precisely.\n         self.select_obligations_where_possible(false, mutate_fulfillment_errors);\n-        ty = self.resolve_vars_if_possible(ty);\n-\n-        debug!(?ty);\n-        ty\n+        self.resolve_vars_if_possible(ty)\n     }\n \n     pub(in super::super) fn record_deferred_call_resolution(\n@@ -1405,7 +1402,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n+    #[instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n     fn add_required_obligations_with_code(\n         &self,\n         span: Span,"}, {"sha": "2a8c460bb11830921c4e48fdc715d9d3e0980ae2", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n use rustc_middle::ty::{self, RvalueScopes, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use tracing::debug;\n \n mod drop_ranges;\n "}, {"sha": "a9071cd1fd949efe57c2bfd122425fb0b5277dd7", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// * `call_expr`:             the complete method call: (`foo.bar::<T1,...Tn>(...)`)\n     /// * `self_expr`:             the self expression (`foo`)\n     /// * `args`:                  the expressions of the arguments (`a, b + 1, ...`)\n-    #[instrument(level = \"debug\", skip(self, call_expr, self_expr))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn lookup_method(\n         &self,\n         self_ty: Ty<'tcx>,\n@@ -178,11 +178,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self_expr: &'tcx hir::Expr<'tcx>,\n         args: &'tcx [hir::Expr<'tcx>],\n     ) -> Result<MethodCallee<'tcx>, MethodError<'tcx>> {\n-        debug!(\n-            \"lookup(method_name={}, self_ty={:?}, call_expr={:?}, self_expr={:?})\",\n-            segment.ident, self_ty, call_expr, self_expr\n-        );\n-\n         let pick =\n             self.lookup_probe(span, segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n \n@@ -383,7 +378,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// In particular, it doesn't really do any probing: it simply constructs\n     /// an obligation for a particular trait with the given self type and checks\n     /// whether that trait is implemented.\n-    #[instrument(level = \"debug\", skip(self, span, opt_input_types))]\n+    #[instrument(level = \"debug\", skip(self, span))]\n     pub(super) fn lookup_method_in_trait(\n         &self,\n         span: Span,\n@@ -392,11 +387,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         opt_input_types: Option<&[Ty<'tcx>]>,\n     ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n-        debug!(\n-            \"lookup_in_trait_adjusted(self_ty={:?}, m_name={}, trait_def_id={:?}, opt_input_types={:?})\",\n-            self_ty, m_name, trait_def_id, opt_input_types\n-        );\n-\n         let (obligation, substs) =\n             self.obligation_for_method(span, trait_def_id, self_ty, opt_input_types);\n         self.construct_obligation_for_trait(\n@@ -576,7 +566,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// * `self_ty`:               the type to search within (`Foo`)\n     /// * `self_ty_span`           the span for the type being searched within (span of `Foo`)\n     /// * `expr_id`:               the [`hir::HirId`] of the expression composing the entire call\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     pub fn resolve_fully_qualified_call(\n         &self,\n         span: Span,\n@@ -585,11 +575,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self_ty_span: Span,\n         expr_id: hir::HirId,\n     ) -> Result<(DefKind, DefId), MethodError<'tcx>> {\n-        debug!(\n-            \"resolve_fully_qualified_call: method_name={:?} self_ty={:?} expr_id={:?}\",\n-            method_name, self_ty, expr_id,\n-        );\n-\n         let tcx = self.tcx;\n \n         // Check if we have an enum variant.\n@@ -633,21 +618,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             &pick,\n         );\n \n-        debug!(\"resolve_fully_qualified_call: pick={:?}\", pick);\n+        debug!(?pick);\n         {\n             let mut typeck_results = self.typeck_results.borrow_mut();\n             let used_trait_imports = Lrc::get_mut(&mut typeck_results.used_trait_imports).unwrap();\n             for import_id in pick.import_ids {\n-                debug!(\"resolve_fully_qualified_call: used_trait_import: {:?}\", import_id);\n+                debug!(used_trait_import=?import_id);\n                 used_trait_imports.insert(import_id);\n             }\n         }\n \n         let def_kind = pick.item.kind.as_def_kind();\n-        debug!(\n-            \"resolve_fully_qualified_call: def_kind={:?}, def_id={:?}\",\n-            def_kind, pick.item.def_id\n-        );\n         tcx.check_stability(pick.item.def_id, Some(expr_id), span, Some(method_name.span));\n         Ok((def_kind, pick.item.def_id))\n     }"}, {"sha": "e9f55ab3406f5df2ea9bc49c8e34985b479c36df", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// would result in an error (basically, the same criteria we\n     /// would use to decide if a method is a plausible fit for\n     /// ambiguity purposes).\n-    #[instrument(level = \"debug\", skip(self, scope_expr_id))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn probe_for_return_type(\n         &self,\n         span: Span,\n@@ -262,10 +262,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         scope_expr_id: hir::HirId,\n     ) -> Vec<ty::AssocItem> {\n-        debug!(\n-            \"probe(self_ty={:?}, return_type={}, scope_expr_id={})\",\n-            self_ty, return_type, scope_expr_id\n-        );\n         let method_names = self\n             .probe_op(\n                 span,\n@@ -299,7 +295,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect()\n     }\n \n-    #[instrument(level = \"debug\", skip(self, scope_expr_id))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn probe_for_name(\n         &self,\n         span: Span,\n@@ -310,10 +306,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         scope_expr_id: hir::HirId,\n         scope: ProbeScope,\n     ) -> PickResult<'tcx> {\n-        debug!(\n-            \"probe(self_ty={:?}, item_name={}, scope_expr_id={})\",\n-            self_ty, item_name, scope_expr_id\n-        );\n         self.probe_op(\n             span,\n             mode,"}, {"sha": "66281448d40e88e6c5c45217b5d0183501de1281", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -341,7 +341,6 @@ fn diagnostic_only_typeck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::T\n     typeck_with_fallback(tcx, def_id, fallback)\n }\n \n-#[instrument(skip(tcx, fallback))]\n fn typeck_with_fallback<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,"}, {"sha": "86cf12d224047a664cef7b1942e4da58b09f64fd", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -972,7 +972,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n     }\n }\n \n-#[tracing::instrument(level = \"debug\", skip(tcx, span, sig_if_method))]\n+#[instrument(level = \"debug\", skip(tcx, span, sig_if_method))]\n fn check_associated_item(\n     tcx: TyCtxt<'_>,\n     item_id: LocalDefId,\n@@ -1225,7 +1225,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n     });\n }\n \n-#[tracing::instrument(level = \"debug\", skip(tcx, ast_self_ty, ast_trait_ref))]\n+#[instrument(level = \"debug\", skip(tcx, ast_self_ty, ast_trait_ref))]\n fn check_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     item: &'tcx hir::Item<'tcx>,\n@@ -1472,7 +1472,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n     wfcx.register_obligations(obligations);\n }\n \n-#[tracing::instrument(level = \"debug\", skip(wfcx, span, hir_decl))]\n+#[instrument(level = \"debug\", skip(wfcx, span, hir_decl))]\n fn check_fn_or_method<'tcx>(\n     wfcx: &WfCheckingCtxt<'_, 'tcx>,\n     span: Span,\n@@ -1536,7 +1536,7 @@ const HELP_FOR_SELF_TYPE: &str = \"consider changing to `self`, `&self`, `&mut se\n      `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n      of the previous types except `Self`)\";\n \n-#[tracing::instrument(level = \"debug\", skip(wfcx))]\n+#[instrument(level = \"debug\", skip(wfcx))]\n fn check_method_receiver<'tcx>(\n     wfcx: &WfCheckingCtxt<'_, 'tcx>,\n     fn_sig: &hir::FnSig<'_>,"}, {"sha": "9f931de6fdedb674b11b6fff3724a49c5b4a361a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -19,7 +19,6 @@ use crate::errors::UnconstrainedOpaqueType;\n /// Computes the relevant generic parameter for a potential generic const argument.\n ///\n /// This should be called using the query `tcx.opt_const_param_of`.\n-#[instrument(level = \"debug\", skip(tcx))]\n pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n     use hir::*;\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "c27f0ce18c1414d027453b4e8d2799105c980cfa", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -750,7 +750,7 @@ fn resolve_associated_trait_item<'a>(\n ///\n /// This is just a wrapper around [`TyCtxt::impl_item_implementor_ids()`] and\n /// [`TyCtxt::associated_item()`] (with some helpful logging added).\n-#[instrument(level = \"debug\", skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx), ret)]\n fn trait_assoc_to_impl_assoc_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_id: DefId,\n@@ -760,9 +760,7 @@ fn trait_assoc_to_impl_assoc_item<'tcx>(\n     debug!(?trait_to_impl_assoc_map);\n     let impl_assoc_id = *trait_to_impl_assoc_map.get(&trait_assoc_id)?;\n     debug!(?impl_assoc_id);\n-    let impl_assoc = tcx.associated_item(impl_assoc_id);\n-    debug!(?impl_assoc);\n-    Some(impl_assoc)\n+    Some(tcx.associated_item(impl_assoc_id))\n }\n \n /// Given a type, return all trait impls in scope in `module` for that type."}, {"sha": "c1c109ac1eade556f168b1c2000ef8ff04d624e2", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -2,7 +2,7 @@\n // Tests error conditions for specifying diagnostics using #[derive(SessionDiagnostic)]\n \n // normalize-stderr-test \"the following other types implement trait `IntoDiagnosticArg`:(?:.*\\n){0,9}\\s+and \\d+ others\" -> \"normalized in stderr\"\n-\n+// normalize-stderr-test \"diagnostic_builder\\.rs:[0-9]+:[0-9]+\" -> \"diagnostic_builder.rs:LL:CC\"\n // The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n // changing the output of this test. Since SessionDiagnostic is strictly internal to the compiler\n // the test is just ignored on stable and beta:"}, {"sha": "ab5c28fe473326aa02b4a5a42cd62e32a4dc57e5", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af618b62e91b45d61f41548f24ba60b834e362b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af618b62e91b45d61f41548f24ba60b834e362b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=9af618b62e91b45d61f41548f24ba60b834e362b", "patch": "@@ -453,7 +453,7 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:569:19\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`"}]}