{"sha": "6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYmJlZTFkYzdlYzVjNjgwYmI1YzgzYWYwYWExYjE2YjNhMDNjYzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-18T18:25:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:06Z"}, "message": "apply the new placeholder errors even with just one placeholder", "tree": {"sha": "0dc929297bda1fbc9ab4585909457ab3cd16be4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dc929297bda1fbc9ab4585909457ab3cd16be4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "html_url": "https://github.com/rust-lang/rust/commit/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a61d682a194954494df3cdefb926172c5d423c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a61d682a194954494df3cdefb926172c5d423c4", "html_url": "https://github.com/rust-lang/rust/commit/0a61d682a194954494df3cdefb926172c5d423c4"}], "stats": {"total": 137, "additions": 90, "deletions": 47}, "files": [{"sha": "83fe3da70775dfa9abc5a94e99d194f3e6de561f", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -28,7 +28,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 _,\n                 ty::RePlaceholder(sup_placeholder),\n             )) => if expected.def_id == found.def_id {\n-                return Some(self.try_report_two_placeholders_trait(\n+                return Some(self.try_report_placeholders_trait(\n                     Some(*vid),\n                     cause,\n                     Some(*sub_placeholder),\n@@ -41,6 +41,54 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 // I actually can't see why this would be the case ever.\n             },\n \n+            Some(RegionResolutionError::SubSupConflict(\n+                vid,\n+                _,\n+                SubregionOrigin::Subtype(TypeTrace {\n+                    cause,\n+                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n+                }),\n+                ty::RePlaceholder(sub_placeholder),\n+                _,\n+                _,\n+            )) => if expected.def_id == found.def_id {\n+                return Some(self.try_report_placeholders_trait(\n+                    Some(*vid),\n+                    cause,\n+                    Some(*sub_placeholder),\n+                    None,\n+                    expected.def_id,\n+                    expected.substs,\n+                    found.substs,\n+                ));\n+            } else {\n+                // I actually can't see why this would be the case ever.\n+            },\n+\n+            Some(RegionResolutionError::SubSupConflict(\n+                vid,\n+                _,\n+                SubregionOrigin::Subtype(TypeTrace {\n+                    cause,\n+                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n+                }),\n+                _,\n+                _,\n+                ty::RePlaceholder(sup_placeholder),\n+            )) => if expected.def_id == found.def_id {\n+                return Some(self.try_report_placeholders_trait(\n+                    Some(*vid),\n+                    cause,\n+                    None,\n+                    Some(*sup_placeholder),\n+                    expected.def_id,\n+                    expected.substs,\n+                    found.substs,\n+                ));\n+            } else {\n+                // I actually can't see why this would be the case ever.\n+            },\n+\n             _ => {}\n         }\n \n@@ -56,7 +104,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n     //    = note: Due to a where-clause on the function `all`,\n     //    = note: `T` must implement `...` for any two lifetimes `'1` and `'2`.\n     //    = note: However, the type `T` only implements `...` for some specific lifetime `'2`.\n-    fn try_report_two_placeholders_trait(\n+    fn try_report_placeholders_trait(\n         &self,\n         vid: Option<ty::RegionVid>,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "e82fa51524ef1c52af48ac9171bf3590ea3a19f0", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -1,15 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements\n+error: implementation of `Deserialize` is not general enough\n   --> $DIR/hrtb-cache-issue-54302.rs:19:5\n    |\n LL |     assert_deserialize_owned::<&'static str>(); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:12), 'de) })...\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected Deserialize<'de>\n-              found Deserialize<'_>\n+   = note: `&'static str` must implement `Deserialize<'0>` for any lifetime `'0`\n+   = note: but `&str` only implements `Deserialize<'1>` for some lifetime `'1`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "88d5ce8e640568dba709cac70488455176ea6f94", "filename": "src/test/ui/hrtb/hrtb-just-for-static.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -24,4 +24,10 @@ fn give_static() {\n     want_hrtb::<StaticInt>() //~ ERROR\n }\n \n+// AnyInt implements Foo<&'a isize> for any 'a, so it is a match.\n+impl<'a> Foo<&'a isize> for &'a u32 { }\n+fn give_some<'a>() {\n+    want_hrtb::<&'a u32>() //~ ERROR\n+}\n+\n fn main() { }"}, {"sha": "6ea415c1734b28fd14a99675fbef686aee2d4c29", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -9,6 +9,16 @@ LL |     want_hrtb::<StaticInt>() //~ ERROR\n    = note: lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:11), 'a) })...\n    = note: ...does not necessarily outlive the static lifetime\n \n-error: aborting due to previous error\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/hrtb-just-for-static.rs:30:5\n+   |\n+LL |     want_hrtb::<&'a u32>() //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Due to a where-clause on `want_hrtb`,\n+   = note: `&'a u32` must implement `Foo<&'0 isize>` for any lifetime `'0`\n+   = note: but `&'1 u32` only implements `Foo<&'1 isize>` for some lifetime `'1`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "faa116269ee96f5d017951dbe290c33ae492f75f", "filename": "src/test/ui/issues/issue-54302-cases.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -61,25 +61,25 @@ impl<T> RefFoo<T> for T where for<'a> &'a T: Foo<'static, T> {\n fn coerce_lifetime1(a: &u32) -> &'static u32\n {\n     <u32 as RefFoo<u32>>::ref_foo(a)\n-    //~^ ERROR cannot infer\n+    //~^ ERROR not general enough\n }\n \n fn coerce_lifetime2(a: &i32) -> &'static i32\n {\n     <i32 as RefFoo<i32>>::ref_foo(a)\n-    //~^ ERROR cannot infer\n+    //~^ ERROR not general enough\n }\n \n fn coerce_lifetime3(a: &u64) -> &'static u64\n {\n     <u64 as RefFoo<u64>>::ref_foo(a)\n-    //~^ ERROR cannot infer\n+    //~^ ERROR not general enough\n }\n \n fn coerce_lifetime4(a: &i64) -> &'static i64\n {\n     <i64 as RefFoo<i64>>::ref_foo(a)\n-    //~^ ERROR cannot infer\n+    //~^ ERROR not general enough\n }\n \n fn main() {}"}, {"sha": "6469829e789b43bee10b4411463d314c2b464a09", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -1,51 +1,38 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:63:5\n    |\n LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected Foo<'static, u32>\n-              found Foo<'_, u32>\n+   = note: `&'0 u32` must implement `Foo<'static, u32>` for any lifetime `'0`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n    |\n LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected Foo<'static, i32>\n-              found Foo<'_, i32>\n+   = note: `&'0 i32` must implement `Foo<'static, i32>` for any lifetime `'0`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n    |\n LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected Foo<'static, u64>\n-              found Foo<'_, u64>\n+   = note: `&'0 u64` must implement `Foo<'static, u64>` for any lifetime `'0`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n    |\n LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected Foo<'static, i64>\n-              found Foo<'_, i64>\n+   = note: `&'0 i64` must implement `Foo<'static, i64>` for any lifetime `'0`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "1bfaebc3895d96dc00c72719055d66cafcaffcfd", "filename": "src/test/ui/issues/issue-54302.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     // Then why does it implement DeserializeOwned? This compiles.\n     fn assert_deserialize_owned<T: DeserializeOwned>() {}\n     assert_deserialize_owned::<&'static str>();\n-    //~^ ERROR E0495\n+    //~^ ERROR not general enough\n \n     // It correctly does not implement for<'de> Deserialize<'de>.\n     //fn assert_hrtb<T: for<'de> Deserialize<'de>>() {}"}, {"sha": "1b255204b6ef71517026be13d2b3b4f753626222", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=6cbbee1dc7ec5c680bb5c83af0aa1b16b3a03cc0", "patch": "@@ -1,15 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements\n+error: implementation of `Deserialize` is not general enough\n   --> $DIR/issue-54302.rs:13:5\n    |\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:12), 'de) })...\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected Deserialize<'de>\n-              found Deserialize<'_>\n+   = note: `&'static str` must implement `Deserialize<'0>` for any lifetime `'0`\n+   = note: but `&str` only implements `Deserialize<'1>` for some lifetime `'1`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}]}