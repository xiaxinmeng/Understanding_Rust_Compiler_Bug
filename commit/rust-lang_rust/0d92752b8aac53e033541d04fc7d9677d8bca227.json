{"sha": "0d92752b8aac53e033541d04fc7d9677d8bca227", "node_id": "C_kwDOAAsO6NoAKDBkOTI3NTJiOGFhYzUzZTAzMzU0MWQwNGZjN2Q5Njc3ZDhiY2EyMjc", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T05:54:38Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T16:32:08Z"}, "message": "Suggest `if let`/`let_else` for refutable pat in `let`", "tree": {"sha": "4315f285b95b6288c8fec03ed4f7b77daee4bcf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4315f285b95b6288c8fec03ed4f7b77daee4bcf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d92752b8aac53e033541d04fc7d9677d8bca227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d92752b8aac53e033541d04fc7d9677d8bca227", "html_url": "https://github.com/rust-lang/rust/commit/0d92752b8aac53e033541d04fc7d9677d8bca227", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d92752b8aac53e033541d04fc7d9677d8bca227/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97dc20784698730bd7bc1a20eabdcd32066d174", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97dc20784698730bd7bc1a20eabdcd32066d174", "html_url": "https://github.com/rust-lang/rust/commit/b97dc20784698730bd7bc1a20eabdcd32066d174"}], "stats": {"total": 260, "additions": 204, "deletions": 56}, "files": [{"sha": "dae313da8d993c6cfd161bd3bfd35f7a7c8094ab", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 79, "deletions": 7, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -7,7 +7,8 @@ use super::{PatCtxt, PatternError};\n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n use rustc_errors::{\n-    error_code, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder,\n+    ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def::*;\n@@ -20,7 +21,7 @@ use rustc_session::lint::builtin::{\n };\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n-use rustc_span::{DesugaringKind, ExpnKind, MultiSpan, Span};\n+use rustc_span::{BytePos, DesugaringKind, ExpnKind, MultiSpan, Span};\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match def_id.as_local() {\n@@ -241,6 +242,9 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         }\n \n         let joined_patterns = joined_uncovered_patterns(&cx, &witnesses);\n+\n+        let mut bindings = vec![];\n+\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             pat.span,\n@@ -257,6 +261,16 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                 false\n             }\n             _ => {\n+                pat.walk(&mut |pat: &hir::Pat<'_>| {\n+                    match pat.kind {\n+                        hir::PatKind::Binding(_, _, ident, _) => {\n+                            bindings.push(ident);\n+                        }\n+                        _ => {}\n+                    }\n+                    true\n+                });\n+\n                 err.span_label(pat.span, pattern_not_covered_label(&witnesses, &joined_patterns));\n                 true\n             }\n@@ -267,13 +281,71 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                 \"`let` bindings require an \\\"irrefutable pattern\\\", like a `struct` or \\\n                  an `enum` with only one variant\",\n             );\n-            if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                err.span_suggestion(\n-                    span,\n-                    \"you might want to use `if let` to ignore the variant that isn't matched\",\n-                    format!(\"if {} {{ /* */ }}\", &snippet[..snippet.len() - 1]),\n+            if self.tcx.sess.source_map().span_to_snippet(span).is_ok() {\n+                let semi_span = span.shrink_to_hi().with_lo(span.hi() - BytePos(1));\n+                let start_span = span.shrink_to_lo();\n+                let end_span = semi_span.shrink_to_lo();\n+                err.multipart_suggestion(\n+                    &format!(\n+                        \"you might want to use `if let` to ignore the variant{} that {} matched\",\n+                        pluralize!(witnesses.len()),\n+                        match witnesses.len() {\n+                            1 => \"isn't\",\n+                            _ => \"aren't\",\n+                        },\n+                    ),\n+                    vec![\n+                        match &bindings[..] {\n+                            [] => (start_span, \"if \".to_string()),\n+                            [binding] => (start_span, format!(\"let {} = if \", binding)),\n+                            bindings => (\n+                                start_span,\n+                                format!(\n+                                    \"let ({}) = if \",\n+                                    bindings\n+                                        .iter()\n+                                        .map(|ident| ident.to_string())\n+                                        .collect::<Vec<_>>()\n+                                        .join(\", \")\n+                                ),\n+                            ),\n+                        },\n+                        match &bindings[..] {\n+                            [] => (semi_span, \" { todo!() }\".to_string()),\n+                            [binding] => {\n+                                (end_span, format!(\" {{ {} }} else {{ todo!() }}\", binding))\n+                            }\n+                            bindings => (\n+                                end_span,\n+                                format!(\n+                                    \" {{ ({}) }} else {{ todo!() }}\",\n+                                    bindings\n+                                        .iter()\n+                                        .map(|ident| ident.to_string())\n+                                        .collect::<Vec<_>>()\n+                                        .join(\", \")\n+                                ),\n+                            ),\n+                        },\n+                    ],\n                     Applicability::HasPlaceholders,\n                 );\n+                if cx.tcx.sess.is_nightly_build() {\n+                    err.span_suggestion_verbose(\n+                        semi_span.shrink_to_lo(),\n+                        &format!(\n+                            \"alternatively, on nightly, you might want to use \\\n+                             `#![feature(let_else)]` to handle the variant{} that {} matched\",\n+                            pluralize!(witnesses.len()),\n+                            match witnesses.len() {\n+                                1 => \"isn't\",\n+                                _ => \"aren't\",\n+                            },\n+                        ),\n+                        \" else { todo!() }\".to_string(),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                }\n             }\n             err.note(\n                 \"for more information, visit \\"}, {"sha": "08ee800f138d2478f4f041d8f4f203d34ae2c43c", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -7,10 +7,14 @@ LL |     A = { let 0 = 0; 0 },\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     A = { if let 0 = 0 { /* */ } 0 },\n-   |           ~~~~~~~~~~~~~~~~~~~~~~\n+LL |     A = { if let 0 = 0 { todo!() } 0 },\n+   |           ++           ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+   |\n+LL |     A = { let 0 = 0 else { todo!() }; 0 },\n+   |                     ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "579cb7e780007faadd230ba5bee1bd2e3273d02c", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -7,10 +7,14 @@ LL |     let x: [i32; { let 0 = 0; 0 }] = [];\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     let x: [i32; { if let 0 = 0 { /* */ } 0 }] = [];\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let x: [i32; { if let 0 = 0 { todo!() } 0 }] = [];\n+   |                    ++           ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+   |\n+LL |     let x: [i32; { let 0 = 0 else { todo!() }; 0 }] = [];\n+   |                              ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f89bbc0d42234447a3d195300f54c8165cf26679", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -7,10 +7,14 @@ LL | const X: i32 = { let 0 = 0; 0 };\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL | const X: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~\n+LL | const X: i32 = { if let 0 = 0 { todo!() } 0 };\n+   |                  ++           ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+   |\n+LL | const X: i32 = { let 0 = 0 else { todo!() }; 0 };\n+   |                            ++++++++++++++++\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:8:23\n@@ -21,10 +25,14 @@ LL | static Y: i32 = { let 0 = 0; 0 };\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n+   |\n+LL | static Y: i32 = { if let 0 = 0 { todo!() } 0 };\n+   |                   ++           ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n    |\n-LL | static Y: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~\n+LL | static Y: i32 = { let 0 = 0 else { todo!() }; 0 };\n+   |                             ++++++++++++++++\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:13:26\n@@ -35,10 +43,14 @@ LL |     const X: i32 = { let 0 = 0; 0 };\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     const X: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~\n+LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n+   |                      ++           ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+   |\n+LL |     const X: i32 = { let 0 = 0 else { todo!() }; 0 };\n+   |                                ++++++++++++++++\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:19:26\n@@ -49,10 +61,14 @@ LL |     const X: i32 = { let 0 = 0; 0 };\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n+   |\n+LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n+   |                      ++           ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n    |\n-LL |     const X: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~\n+LL |     const X: i32 = { let 0 = 0 else { todo!() }; 0 };\n+   |                                ++++++++++++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "909aa73a74a38fb2a9b8313de32527f95ad9c9ce", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -16,8 +16,12 @@ LL |     T(T, [!; 0]),\n    = note: the matched value is of type `Helper<T, U>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n-LL |     if let Helper::U(u) = Helper::T(t, []) { /* */ }\n+LL |     let u = if let Helper::U(u) = Helper::T(t, []) { u } else { todo!() };\n+   |     ++++++++++                                     ++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n    |\n+LL |     let Helper::U(u) = Helper::T(t, []) else { todo!() };\n+   |                                         ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "55b1112b5f8ecb4e0f1993894fb6241c3f1f65e6", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -22,8 +22,12 @@ LL | | }\n    = note: the matched value is of type `Option<i32>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n-LL |     if let Some(y) = x { /* */ }\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let y = if let Some(y) = x { y } else { todo!() };\n+   |     ++++++++++                 ++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+   |\n+LL |     let Some(y) = x else { todo!() };\n+   |                     ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "21180f31bbd26a11a59631f1f1966072ee34cbab", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -21,8 +21,12 @@ LL | | }\n    = note: the matched value is of type `Result<u32, !>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n-LL |     if let Ok(_x) = foo() { /* */ }\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let _x = if let Ok(_x) = foo() { _x } else { todo!() };\n+   |     +++++++++++                    +++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+   |\n+LL |     let Ok(_x) = foo() else { todo!() };\n+   |                        ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "aa1aa4434c3fa4e84c2288fd4d1025de87592ce3", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -7,10 +7,14 @@ LL |     let (0 | (1 | 2)) = 0;\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     if let (0 | (1 | 2)) = 0 { /* */ }\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     if let (0 | (1 | 2)) = 0 { todo!() }\n+   |     ++                       ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+   |\n+LL |     let (0 | (1 | 2)) = 0 else { todo!() };\n+   |                           ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n   --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:3:11"}, {"sha": "9da6b5eeead235a575107bbde68c86eda7eb0204", "filename": "src/test/ui/pattern/usefulness/issue-31561.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -17,10 +17,14 @@ LL |     Bar,\n LL |     Baz\n    |     ^^^ not covered\n    = note: the matched value is of type `Thing`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     if let Thing::Foo(y) = Thing::Foo(1) { /* */ }\n+LL |     let y = if let Thing::Foo(y) = Thing::Foo(1) { y } else { todo!() };\n+   |     ++++++++++                                   ++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n    |\n+LL |     let Thing::Foo(y) = Thing::Foo(1) else { todo!() };\n+   |                                       ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f7dc070f802489986a765057c9d49784f750a7be", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -42,10 +42,14 @@ LL |     B,\n LL |     C\n    |     ^ not covered\n    = note: the matched value is of type `E`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n+   |\n+LL |     if let E::A = e { todo!() }\n+   |     ++              ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n    |\n-LL |     if let E::A = e { /* */ }\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let E::A = e else { todo!() };\n+   |                  ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `&B` and `&C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:52:11\n@@ -91,10 +95,14 @@ LL |     B,\n LL |     C\n    |     ^ not covered\n    = note: the matched value is of type `&E`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     if let E::A = e { /* */ }\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     if let E::A = e { todo!() }\n+   |     ++              ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+   |\n+LL |     let E::A = e else { todo!() };\n+   |                  ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `&&mut &B` and `&&mut &C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:66:11\n@@ -140,10 +148,14 @@ LL |     B,\n LL |     C\n    |     ^ not covered\n    = note: the matched value is of type `&&mut &E`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     if let E::A = e { /* */ }\n+LL |     if let E::A = e { todo!() }\n+   |     ++              ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n    |\n+LL |     let E::A = e else { todo!() };\n+   |                  ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `None` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:92:11\n@@ -185,8 +197,12 @@ LL |     None,\n    = note: the matched value is of type `Opt`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n-LL |     if let Opt::Some(ref _x) = e { /* */ }\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let _x = if let Opt::Some(ref _x) = e { _x } else { todo!() };\n+   |     +++++++++++                           +++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+   |\n+LL |     let Opt::Some(ref _x) = e else { todo!() };\n+   |                               ++++++++++++++++\n \n error: aborting due to 8 previous errors\n "}, {"sha": "e3ffc092327acc8bf0dfe47975010cde9ec8d5a4", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-errors.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -15,10 +15,14 @@ LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `(i32, (Option<i32>, i32))`\n-help: you might want to use `if let` to ignore the variant that isn't matched\n+help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n-LL |     if let (1, (Some(1), 2..=3)) = (1, (None, 2)) { /* */ }\n+LL |     if let (1, (Some(1), 2..=3)) = (1, (None, 2)) { todo!() }\n+   |     ++                                            ~~~~~~~~~~~\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n    |\n+LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2)) else { todo!() };\n+   |                                                ++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a9159562d9d512858354816138493869f75349e5", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -21,8 +21,12 @@ LL | | }\n    = note: the matched value is of type `Result<u32, &R>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n-LL |     if let Ok(x) = res { /* */ }\n+LL |     let x = if let Ok(x) = res { x } else { todo!() };\n+   |     ++++++++++                 ++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n    |\n+LL |     let Ok(x) = res else { todo!() };\n+   |                     ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "661b5486adc122ca9cfe4f19d17ee0625f654304", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -19,10 +19,10 @@ enum Foo {\n     A(foo::SecretlyEmpty),\n     B(foo::NotSoSecretlyEmpty),\n     C(NotSoSecretlyEmpty),\n-    D(u32),\n+    D(u32, u32),\n }\n \n fn main() {\n-    let x: Foo = Foo::D(123);\n-    let Foo::D(_y) = x; //~ ERROR refutable pattern in local binding: `A(_)` not covered\n+    let x: Foo = Foo::D(123, 456);\n+    let Foo::D(_y, _z) = x; //~ ERROR refutable pattern in local binding: `A(_)` not covered\n }"}, {"sha": "c571e17a7b372516a801b64476dec81bfae86fde", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -1,8 +1,8 @@\n error[E0005]: refutable pattern in local binding: `A(_)` not covered\n   --> $DIR/uninhabited-irrefutable.rs:27:9\n    |\n-LL |     let Foo::D(_y) = x;\n-   |         ^^^^^^^^^^ pattern `A(_)` not covered\n+LL |     let Foo::D(_y, _z) = x;\n+   |         ^^^^^^^^^^^^^^ pattern `A(_)` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -16,8 +16,12 @@ LL |     A(foo::SecretlyEmpty),\n    = note: the matched value is of type `Foo`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n-LL |     if let Foo::D(_y) = x { /* */ }\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let (_y, _z) = if let Foo::D(_y, _z) = x { (_y, _z) } else { todo!() };\n+   |     +++++++++++++++++                        +++++++++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+   |\n+LL |     let Foo::D(_y, _z) = x else { todo!() };\n+   |                            ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "74216d265d03416e218903443c3a6c5d46a9ef0c", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d92752b8aac53e033541d04fc7d9677d8bca227/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=0d92752b8aac53e033541d04fc7d9677d8bca227", "patch": "@@ -132,8 +132,12 @@ LL | | }\n    = note: the matched value is of type `Result<u32, Void>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n-LL |     if let Ok(x) = x { /* */ }\n+LL |     let x = if let Ok(x) = x { x } else { todo!() };\n+   |     ++++++++++               ++++++++++++++++++++++\n+help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n    |\n+LL |     let Ok(x) = x else { todo!() };\n+   |                   ++++++++++++++++\n \n error: aborting due to 7 previous errors\n "}]}