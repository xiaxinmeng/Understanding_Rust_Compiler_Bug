{"sha": "fe7b6a943d76c9ea0db296aab601f02749454895", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlN2I2YTk0M2Q3NmM5ZWEwZGIyOTZhYWI2MDFmMDI3NDk0NTQ4OTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T07:40:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T10:53:27Z"}, "message": "fix truncate and sign_extend for size == 0", "tree": {"sha": "d0f0124434a56eab89b35fc30a7c8e4bf7179994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f0124434a56eab89b35fc30a7c8e4bf7179994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe7b6a943d76c9ea0db296aab601f02749454895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7b6a943d76c9ea0db296aab601f02749454895", "html_url": "https://github.com/rust-lang/rust/commit/fe7b6a943d76c9ea0db296aab601f02749454895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe7b6a943d76c9ea0db296aab601f02749454895/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad13a176a0c9c96380fecf574f424e555fe880b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad13a176a0c9c96380fecf574f424e555fe880b", "html_url": "https://github.com/rust-lang/rust/commit/aad13a176a0c9c96380fecf574f424e555fe880b"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "4b4c89695a6caf1c9708c4fd6098adac9585aae7", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe7b6a943d76c9ea0db296aab601f02749454895/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7b6a943d76c9ea0db296aab601f02749454895/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=fe7b6a943d76c9ea0db296aab601f02749454895", "patch": "@@ -349,6 +349,7 @@ impl<'tcx> AllocMap<'tcx> {\n     /// illegal and will likely ICE.\n     /// This function exists to allow const eval to detect the difference between evaluation-\n     /// local dangling pointers and allocations in constants/statics.\n+    #[inline]\n     pub fn get(&self, id: AllocId) -> Option<AllocKind<'tcx>> {\n         self.id_to_kind.get(&id).cloned()\n     }\n@@ -397,6 +398,7 @@ impl<'tcx> AllocMap<'tcx> {\n // Methods to access integers in the target endianness\n ////////////////////////////////////////////////////////////////////////////////\n \n+#[inline]\n pub fn write_target_uint(\n     endianness: layout::Endian,\n     mut target: &mut [u8],\n@@ -409,6 +411,7 @@ pub fn write_target_uint(\n     }\n }\n \n+#[inline]\n pub fn read_target_uint(endianness: layout::Endian, mut source: &[u8]) -> Result<u128, io::Error> {\n     match endianness {\n         layout::Endian::Little => source.read_uint128::<LittleEndian>(source.len()),\n@@ -420,17 +423,30 @@ pub fn read_target_uint(endianness: layout::Endian, mut source: &[u8]) -> Result\n // Methods to facilitate working with signed integers stored in a u128\n ////////////////////////////////////////////////////////////////////////////////\n \n+/// Truncate `value` to `size` bits and then sign-extend it to 128 bits\n+/// (i.e., if it is negative, fill with 1's on the left).\n+#[inline]\n pub fn sign_extend(value: u128, size: Size) -> u128 {\n     let size = size.bits();\n+    if size == 0 {\n+        // Truncated until nothing is left.\n+        return 0;\n+    }\n     // sign extend\n     let shift = 128 - size;\n     // shift the unsigned value to the left\n     // and back to the right as signed (essentially fills with FF on the left)\n     (((value << shift) as i128) >> shift) as u128\n }\n \n+/// Truncate `value` to `size` bits.\n+#[inline]\n pub fn truncate(value: u128, size: Size) -> u128 {\n     let size = size.bits();\n+    if size == 0 {\n+        // Truncated until nothing is left.\n+        return 0;\n+    }\n     let shift = 128 - size;\n     // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n     (value << shift) >> shift"}]}