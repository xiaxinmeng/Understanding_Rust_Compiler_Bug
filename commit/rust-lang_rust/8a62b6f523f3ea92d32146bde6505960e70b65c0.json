{"sha": "8a62b6f523f3ea92d32146bde6505960e70b65c0", "node_id": "C_kwDOAAsO6NoAKDhhNjJiNmY1MjNmM2VhOTJkMzIxNDZiZGU2NTA1OTYwZTcwYjY1YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T09:03:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T09:03:20Z"}, "message": "Auto merge of #9144 - alex-semenyuk:or_fun_call_span_fix, r=giraffate\n\nFix span for or_fun_call\n\nCloses #9033\nchangelog: [`or_fun_call`]: span points to the `unwrap_or` only instead of through the entire method chain expression", "tree": {"sha": "283e9698662357d0cdf3498949943d33e35bdd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283e9698662357d0cdf3498949943d33e35bdd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a62b6f523f3ea92d32146bde6505960e70b65c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a62b6f523f3ea92d32146bde6505960e70b65c0", "html_url": "https://github.com/rust-lang/rust/commit/8a62b6f523f3ea92d32146bde6505960e70b65c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a62b6f523f3ea92d32146bde6505960e70b65c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea4592a8b4197bc77ac531594a295253d620364", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea4592a8b4197bc77ac531594a295253d620364", "html_url": "https://github.com/rust-lang/rust/commit/7ea4592a8b4197bc77ac531594a295253d620364"}, {"sha": "c3c4cda50b1b1b212eb02e5d822b3fd1479dc24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c4cda50b1b1b212eb02e5d822b3fd1479dc24c", "html_url": "https://github.com/rust-lang/rust/commit/c3c4cda50b1b1b212eb02e5d822b3fd1479dc24c"}], "stats": {"total": 140, "additions": 36, "deletions": 104}, "files": [{"sha": "6af134019a472956958a698163b7837c6a5b9ea3", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a62b6f523f3ea92d32146bde6505960e70b65c0/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a62b6f523f3ea92d32146bde6505960e70b65c0/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=8a62b6f523f3ea92d32146bde6505960e70b65c0", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::switch_to_lazy_eval;\n-use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n+use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::ty::{implements_trait, match_type};\n use clippy_utils::{contains_return, is_trait_item, last_path_segment, paths};\n use if_chain::if_chain;\n@@ -28,10 +28,10 @@ pub(super) fn check<'tcx>(\n         cx: &LateContext<'_>,\n         name: &str,\n         fun: &hir::Expr<'_>,\n-        self_expr: &hir::Expr<'_>,\n         arg: &hir::Expr<'_>,\n         or_has_args: bool,\n         span: Span,\n+        method_span: Span,\n     ) -> bool {\n         let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n@@ -52,24 +52,14 @@ pub(super) fn check<'tcx>(\n                 || (matches!(path, sym::new) && implements_default(arg, default_trait_id));\n \n             then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let hint = \"unwrap_or_default()\";\n-                let sugg_span = span;\n-\n-                let sugg: String = format!(\n-                    \"{}.{}\",\n-                    snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability),\n-                    hint\n-                );\n-\n                 span_lint_and_sugg(\n                     cx,\n                     OR_FUN_CALL,\n-                    sugg_span,\n+                    method_span.with_hi(span.hi()),\n                     &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                     \"try this\",\n-                    sugg,\n-                    applicability,\n+                    \"unwrap_or_default()\".to_string(),\n+                    Applicability::MachineApplicable,\n                 );\n \n                 true\n@@ -171,7 +161,7 @@ pub(super) fn check<'tcx>(\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n-                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span) {\n+                if !check_unwrap_or_default(cx, name, fun, arg, or_has_args, expr.span, method_span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n                     check_general_case(cx, name, method_span, self_arg, arg, expr.span, fun_span);\n                 }"}, {"sha": "fdb08d953ff1dbc95263e6d41e88861310d9a6b5", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a62b6f523f3ea92d32146bde6505960e70b65c0/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a62b6f523f3ea92d32146bde6505960e70b65c0/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=8a62b6f523f3ea92d32146bde6505960e70b65c0", "patch": "@@ -185,7 +185,8 @@ mod issue8239 {\n             .reduce(|mut acc, f| {\n                 acc.push_str(&f);\n                 acc\n-            }).unwrap_or_default();\n+            })\n+            .unwrap_or_default();\n     }\n \n     fn more_to_max_suggestion_highest_lines_1() {\n@@ -197,7 +198,8 @@ mod issue8239 {\n                 let _ = \"\";\n                 acc.push_str(&f);\n                 acc\n-            }).unwrap_or_default();\n+            })\n+            .unwrap_or_default();\n     }\n \n     fn equal_to_max_suggestion_highest_lines() {\n@@ -208,7 +210,8 @@ mod issue8239 {\n                 let _ = \"\";\n                 acc.push_str(&f);\n                 acc\n-            }).unwrap_or_default();\n+            })\n+            .unwrap_or_default();\n     }\n \n     fn less_than_max_suggestion_highest_lines() {\n@@ -218,7 +221,8 @@ mod issue8239 {\n         map.reduce(|mut acc, f| {\n             acc.push_str(&f);\n             acc\n-        }).unwrap_or_default();\n+        })\n+        .unwrap_or_default();\n     }\n }\n "}, {"sha": "4c5938ab88b90926c25c189063ad1b4ab1e268f5", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 22, "deletions": 84, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/8a62b6f523f3ea92d32146bde6505960e70b65c0/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a62b6f523f3ea92d32146bde6505960e70b65c0/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=8a62b6f523f3ea92d32146bde6505960e70b65c0", "patch": "@@ -7,10 +7,10 @@ LL |     with_constructor.unwrap_or(make());\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:52:5\n+  --> $DIR/or_fun_call.rs:52:14\n    |\n LL |     with_new.unwrap_or(Vec::new());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n+   |              ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:55:21\n@@ -31,16 +31,16 @@ LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:64:5\n+  --> $DIR/or_fun_call.rs:64:24\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:67:5\n+  --> $DIR/or_fun_call.rs:67:23\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:70:18\n@@ -49,16 +49,16 @@ LL |     self_default.unwrap_or(<FakeDefault>::default());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(<FakeDefault>::default)`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:73:5\n+  --> $DIR/or_fun_call.rs:73:18\n    |\n LL |     real_default.unwrap_or(<FakeDefault as Default>::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `real_default.unwrap_or_default()`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:76:5\n+  --> $DIR/or_fun_call.rs:76:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n+   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:79:21\n@@ -109,90 +109,28 @@ LL |         None.unwrap_or( unsafe { ptr_to_ref(s) }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { ptr_to_ref(s) })`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:182:9\n-   |\n-LL | /         frames\n-LL | |             .iter()\n-LL | |             .map(|f: &String| f.to_lowercase())\n-LL | |             .reduce(|mut acc, f| {\n-...  |\n-LL | |             })\n-LL | |             .unwrap_or(String::new());\n-   | |_____________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         frames\n-LL +             .iter()\n-LL +             .map(|f: &String| f.to_lowercase())\n-LL +             .reduce(|mut acc, f| {\n-LL +                 acc.push_str(&f);\n-LL +                 acc\n-LL ~             }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:189:14\n    |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:195:9\n-   |\n-LL | /         iter.map(|f: &String| f.to_lowercase())\n-LL | |             .reduce(|mut acc, f| {\n-LL | |                 let _ = \"\";\n-LL | |                 let _ = \"\";\n-...  |\n-LL | |             })\n-LL | |             .unwrap_or(String::new());\n-   | |_____________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         iter.map(|f: &String| f.to_lowercase())\n-LL +             .reduce(|mut acc, f| {\n-LL +                 let _ = \"\";\n-LL +                 let _ = \"\";\n-LL +                 acc.push_str(&f);\n-LL +                 acc\n-LL ~             }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:202:14\n    |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:208:9\n-   |\n-LL | /         iter.map(|f: &String| f.to_lowercase())\n-LL | |             .reduce(|mut acc, f| {\n-LL | |                 let _ = \"\";\n-LL | |                 acc.push_str(&f);\n-LL | |                 acc\n-LL | |             })\n-LL | |             .unwrap_or(String::new());\n-   | |_____________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         iter.map(|f: &String| f.to_lowercase())\n-LL +             .reduce(|mut acc, f| {\n-LL +                 let _ = \"\";\n-LL +                 acc.push_str(&f);\n-LL +                 acc\n-LL ~             }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:214:14\n    |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:221:9\n-   |\n-LL | /         map.reduce(|mut acc, f| {\n-LL | |             acc.push_str(&f);\n-LL | |             acc\n-LL | |         })\n-LL | |         .unwrap_or(String::new());\n-   | |_________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         map.reduce(|mut acc, f| {\n-LL +             acc.push_str(&f);\n-LL +             acc\n-LL ~         }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:225:10\n    |\n+LL |         .unwrap_or(String::new());\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: aborting due to 22 previous errors\n "}]}