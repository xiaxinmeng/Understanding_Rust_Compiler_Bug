{"sha": "3e32d42532c9499066c1f45f8a301c2a81e45ec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzJkNDI1MzJjOTQ5OTA2NmMxZjQ1ZjhhMzAxYzJhODFlNDVlYzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-12T18:33:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:40Z"}, "message": "transition to `Fallible`", "tree": {"sha": "78281744d6ba4c190222b4d7eb245b5d8177e5d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78281744d6ba4c190222b4d7eb245b5d8177e5d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e32d42532c9499066c1f45f8a301c2a81e45ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e32d42532c9499066c1f45f8a301c2a81e45ec8", "html_url": "https://github.com/rust-lang/rust/commit/3e32d42532c9499066c1f45f8a301c2a81e45ec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e32d42532c9499066c1f45f8a301c2a81e45ec8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a0b3d6224768119f1d2e9850488c3d184362c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0b3d6224768119f1d2e9850488c3d184362c1c", "html_url": "https://github.com/rust-lang/rust/commit/2a0b3d6224768119f1d2e9850488c3d184362c1c"}], "stats": {"total": 115, "additions": 69, "deletions": 46}, "files": [{"sha": "96034dd935ca8aa79afbf5b52dd2c9d3be69fe52", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -16,6 +16,7 @@\n //! `librustc_traits`.\n \n use infer::canonical::Canonical;\n+use ty::error::TypeError;\n use ty::{self, Ty};\n \n pub mod dropck_outlives;\n@@ -49,4 +50,10 @@ pub struct NoSolution;\n \n pub type Fallible<T> = Result<T, NoSolution>;\n \n+impl<'tcx> From<TypeError<'tcx>> for NoSolution {\n+    fn from(_: TypeError<'tcx>) -> NoSolution {\n+        NoSolution\n+    }\n+}\n+\n impl_stable_hash_for!(struct NoSolution { });"}, {"sha": "d3bc81a09a9950b5fd5ec59bfee70d2f36145257", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{InferCtxt, InferResult};\n+use infer::{InferCtxt, InferOk};\n+use traits::query::Fallible;\n use ty::TyCtxt;\n use std::fmt;\n \n@@ -20,7 +21,7 @@ pub struct CustomTypeOp<F, G> {\n impl<F, G> CustomTypeOp<F, G> {\n     pub fn new<'gcx, 'tcx, R>(closure: F, description: G) -> Self\n     where\n-        F: FnOnce(&InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n+        F: FnOnce(&InferCtxt<'_, 'gcx, 'tcx>) -> Fallible<InferOk<'tcx, R>>,\n         G: Fn() -> String,\n     {\n         CustomTypeOp {\n@@ -32,7 +33,7 @@ impl<F, G> CustomTypeOp<F, G> {\n \n impl<'gcx, 'tcx, F, R, G> super::TypeOp<'gcx, 'tcx> for CustomTypeOp<F, G>\n where\n-    F: for<'a, 'cx> FnOnce(&'a InferCtxt<'cx, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n+    F: for<'a, 'cx> FnOnce(&'a InferCtxt<'cx, 'gcx, 'tcx>) -> Fallible<InferOk<'tcx, R>>,\n     G: Fn() -> String,\n {\n     type Output = R;\n@@ -41,8 +42,8 @@ where\n         Err(self)\n     }\n \n-    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R> {\n-        (self.closure)(infcx)\n+    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> Fallible<InferOk<'tcx, R>> {\n+        Ok((self.closure)(infcx)?)\n     }\n }\n "}, {"sha": "cc5f72151841170c81dfb435c329d2b33e782008", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n+use traits::query::Fallible;\n use ty::{self, ParamEnv, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -42,8 +43,8 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonical<'gcx, Eq<'gcx>>,\n-    ) -> CanonicalizedQueryResult<'gcx, ()> {\n-        tcx.type_op_eq(canonicalized).unwrap()\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n+        tcx.type_op_eq(canonicalized)\n     }\n \n     fn upcast_result("}, {"sha": "4addb6c027b9549e9bc211825b732529fa4149f1", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -12,12 +12,12 @@ use infer::canonical::query_result;\n use infer::canonical::{\n     Canonical, Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint, QueryResult,\n };\n-use infer::{InferCtxt, InferOk, InferResult};\n+use infer::{InferCtxt, InferOk};\n use std::fmt;\n use std::rc::Rc;\n use syntax::codemap::DUMMY_SP;\n+use traits::query::Fallible;\n use traits::{ObligationCause, TraitEngine};\n-use ty::error::TypeError;\n use ty::fold::TypeFoldable;\n use ty::{Lift, ParamEnv, TyCtxt};\n \n@@ -42,15 +42,18 @@ pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     /// should use `fully_perform`, which will take those resulting\n     /// obligations and prove them, and then process the combined\n     /// results into region obligations which are returned.\n-    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output>;\n+    fn perform(\n+        self,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+    ) -> Fallible<InferOk<'tcx, Self::Output>>;\n \n     /// Processes the operation and all resulting obligations,\n     /// returning the final result along with any region constraints\n     /// (they will be given over to the NLL region solver).\n     fn fully_perform(\n         self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-    ) -> Result<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>), TypeError<'tcx>> {\n+    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>)> {\n         match self.trivial_noop(infcx.tcx) {\n             Ok(r) => Ok((r, None)),\n             Err(op) => op.fully_perform_nontrivial(infcx),\n@@ -62,7 +65,7 @@ pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     fn fully_perform_nontrivial(\n         self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-    ) -> Result<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>), TypeError<'tcx>> {\n+    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>)> {\n         if cfg!(debug_assertions) {\n             info!(\n                 \"fully_perform_op_and_get_region_constraint_data({:?})\",\n@@ -112,7 +115,7 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: TypeFoldable<'tcx> + Lift<'gcx> {\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Self>,\n-    ) -> CanonicalizedQueryResult<'gcx, Self::QueryResult>;\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>>;\n \n     /// \"Upcasts\" a lifted query result (which is in the gcx lifetime)\n     /// into the tcx lifetime. This is always just an identity cast,\n@@ -136,15 +139,18 @@ where\n         QueryTypeOp::trivial_noop(self, tcx)\n     }\n \n-    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n+    fn perform(\n+        self,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+    ) -> Fallible<InferOk<'tcx, Self::Output>> {\n         let param_env = self.param_env();\n \n         // FIXME(#33684) -- We need to use\n         // `canonicalize_hr_query_hack` here because of things like\n         // the subtype query, which go awry around `'static`\n         // otherwise.\n         let (canonical_self, canonical_var_values) = infcx.canonicalize_hr_query_hack(&self);\n-        let canonical_result = Q::perform_query(infcx.tcx, canonical_self);\n+        let canonical_result = Q::perform_query(infcx.tcx, canonical_self)?;\n \n         // FIXME: This is not the most efficient setup. The\n         // `instantiate_query_result_and_region_obligations` basically\n@@ -155,11 +161,11 @@ where\n         // `QueryRegionConstraint` and ultimately into NLL\n         // constraints. We should cut out the middleman but that will\n         // take a bit of refactoring.\n-        infcx.instantiate_query_result_and_region_obligations(\n+        Ok(infcx.instantiate_query_result_and_region_obligations(\n             &ObligationCause::dummy(),\n             param_env,\n             &canonical_var_values,\n             Q::upcast_result(&canonical_result),\n-        )\n+        )?)\n     }\n }"}, {"sha": "80bcc20f842c8d2deccd04cb80ad28c43e8783e8", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -10,6 +10,7 @@\n \n use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n use std::fmt;\n+use traits::query::Fallible;\n use ty::fold::TypeFoldable;\n use ty::{self, Lift, ParamEnv, Ty, TyCtxt};\n \n@@ -49,7 +50,7 @@ where\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Self>,\n-    ) -> CanonicalizedQueryResult<'gcx, Self::QueryResult> {\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n         T::type_op_method(tcx, canonicalized)\n     }\n \n@@ -64,7 +65,7 @@ pub trait Normalizable<'gcx, 'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx>\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n-    ) -> CanonicalizedQueryResult<'gcx, Self>;\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>>;\n \n     /// Convert from the `'gcx` (lifted) form of `Self` into the `tcx`\n     /// form of `Self`.\n@@ -80,8 +81,8 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n-    ) -> CanonicalizedQueryResult<'gcx, Self> {\n-        tcx.type_op_normalize_ty(canonicalized).unwrap()\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+        tcx.type_op_normalize_ty(canonicalized)\n     }\n \n     fn upcast_result(\n@@ -98,8 +99,8 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n-    ) -> CanonicalizedQueryResult<'gcx, Self> {\n-        tcx.type_op_normalize_predicate(canonicalized).unwrap()\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+        tcx.type_op_normalize_predicate(canonicalized)\n     }\n \n     fn upcast_result(\n@@ -116,8 +117,8 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n-    ) -> CanonicalizedQueryResult<'gcx, Self> {\n-        tcx.type_op_normalize_poly_fn_sig(canonicalized).unwrap()\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+        tcx.type_op_normalize_poly_fn_sig(canonicalized)\n     }\n \n     fn upcast_result(\n@@ -134,8 +135,8 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n-    ) -> CanonicalizedQueryResult<'gcx, Self> {\n-        tcx.type_op_normalize_fn_sig(canonicalized).unwrap()\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+        tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n \n     fn upcast_result("}, {"sha": "419146d82ec4d8b5def72629e2e64b9e5394d8d2", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{InferCtxt, InferResult};\n+use infer::{InferCtxt, InferOk};\n use traits::query::dropck_outlives::trivial_dropck_outlives;\n+use traits::query::Fallible;\n use traits::ObligationCause;\n use ty::subst::Kind;\n use ty::{ParamEnv, Ty, TyCtxt};\n@@ -40,7 +41,10 @@ impl<'gcx, 'tcx> super::TypeOp<'gcx, 'tcx> for DropckOutlives<'tcx> {\n         }\n     }\n \n-    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n+    fn perform(\n+        self,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+    ) -> Fallible<InferOk<'tcx, Vec<Kind<'tcx>>>> {\n         Ok(infcx\n             .at(&ObligationCause::dummy(), self.param_env)\n             .dropck_outlives(self.dropped_ty))"}, {"sha": "d2714803eaecc580e2357f3277c2afbeced3bac4", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n+use traits::query::Fallible;\n use ty::{ParamEnv, Predicate, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -40,8 +41,8 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonical<'gcx, ProvePredicate<'gcx>>,\n-    ) -> CanonicalizedQueryResult<'gcx, ()> {\n-        tcx.type_op_prove_predicate(canonicalized).unwrap()\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n+        tcx.type_op_prove_predicate(canonicalized)\n     }\n \n     fn upcast_result("}, {"sha": "7bb1eda4eecfe5d15a0fc4d87f6d1965e0f4593f", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n+use traits::query::Fallible;\n use ty::{ParamEnv, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -46,8 +47,8 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonical<'gcx, Subtype<'gcx>>,\n-    ) -> CanonicalizedQueryResult<'gcx, ()> {\n-        tcx.type_op_subtype(canonicalized).unwrap()\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n+        tcx.type_op_subtype(canonicalized)\n     }\n \n     fn upcast_result("}, {"sha": "7a8337b2498dbd19d6d6d69920132da7f4c4c644", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32d42532c9499066c1f45f8a301c2a81e45ec8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3e32d42532c9499066c1f45f8a301c2a81e45ec8", "patch": "@@ -22,14 +22,14 @@ use dataflow::MaybeInitializedPlaces;\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::region_constraints::GenericKind;\n-use rustc::infer::{InferCtxt, LateBoundRegionConversionTime, UnitResult};\n+use rustc::infer::{InferCtxt, LateBoundRegionConversionTime};\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::traits::query::type_op;\n+use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::ObligationCause;\n-use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n use std::fmt;\n@@ -733,7 +733,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         locations: Locations,\n         op: impl type_op::TypeOp<'gcx, 'tcx, Output = R>,\n-    ) -> Result<R, TypeError<'tcx>> {\n+    ) -> Fallible<R> {\n         let (r, opt_data) = op.fully_perform(self.infcx)?;\n \n         if let Some(data) = &opt_data {\n@@ -775,15 +775,15 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         sub: Ty<'tcx>,\n         sup: Ty<'tcx>,\n         locations: Locations,\n-    ) -> UnitResult<'tcx> {\n+    ) -> Fallible<()> {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n             locations,\n             type_op::subtype::Subtype::new(param_env, sub, sup),\n         )\n     }\n \n-    fn eq_types(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, locations: Locations) -> UnitResult<'tcx> {\n+    fn eq_types(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, locations: Locations) -> Fallible<()> {\n         let param_env = self.param_env;\n         self.fully_perform_op(locations, type_op::eq::Eq::new(param_env, b, a))\n     }\n@@ -1561,11 +1561,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 predicate, location,\n             );\n \n-            let param_env = self.param_env;\n-            self.fully_perform_op(\n-                location.at_self(),\n-                type_op::prove_predicate::ProvePredicate::new(param_env, predicate),\n-            ).unwrap()\n+            self.prove_predicate(predicate, location);\n         }\n     }\n \n@@ -1579,7 +1575,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         self.fully_perform_op(\n             location.at_self(),\n             type_op::prove_predicate::ProvePredicate::new(param_env, predicate),\n-        ).unwrap()\n+        ).unwrap_or_else(|NoSolution| {\n+            span_mirbug!(self, NoSolution, \"could not prove {:?}\", predicate);\n+        })\n     }\n \n     fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n@@ -1610,14 +1608,17 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn normalize<T>(&mut self, value: T, location: impl ToLocations) -> T\n     where\n-        T: type_op::normalize::Normalizable<'gcx, 'tcx>,\n+        T: type_op::normalize::Normalizable<'gcx, 'tcx> + Copy,\n     {\n         debug!(\"normalize(value={:?}, location={:?})\", value, location);\n         let param_env = self.param_env;\n         self.fully_perform_op(\n             location.to_locations(),\n             type_op::normalize::Normalize::new(param_env, value),\n-        ).unwrap()\n+        ).unwrap_or_else(|NoSolution| {\n+            span_mirbug!(self, NoSolution, \"failed to normalize `{:?}`\", value);\n+            value\n+        })\n     }\n }\n "}]}