{"sha": "459f898b911f8a3a1711b3be80b7fd2f167a7217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWY4OThiOTExZjhhM2ExNzExYjNiZTgwYjdmZDJmMTY3YTcyMTc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T11:24:05Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T11:28:17Z"}, "message": "Reformatting.", "tree": {"sha": "12282439f86cf080c98fdbd39eaf1712c7a22437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12282439f86cf080c98fdbd39eaf1712c7a22437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459f898b911f8a3a1711b3be80b7fd2f167a7217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459f898b911f8a3a1711b3be80b7fd2f167a7217", "html_url": "https://github.com/rust-lang/rust/commit/459f898b911f8a3a1711b3be80b7fd2f167a7217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459f898b911f8a3a1711b3be80b7fd2f167a7217/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68daab974de75078f24d4982b0ca1d81d06ed80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68daab974de75078f24d4982b0ca1d81d06ed80b", "html_url": "https://github.com/rust-lang/rust/commit/68daab974de75078f24d4982b0ca1d81d06ed80b"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "c3764d3c51004e5caf2f20abc6b7356e03515f45", "filename": "src/step.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/459f898b911f8a3a1711b3be80b7fd2f167a7217/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459f898b911f8a3a1711b3be80b7fd2f167a7217/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=459f898b911f8a3a1711b3be80b7fd2f167a7217", "patch": "@@ -148,7 +148,13 @@ struct ConstantExtractor<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n-    fn global_item(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span, immutable: bool) {\n+    fn global_item(\n+        &mut self,\n+        def_id: DefId,\n+        substs: &'tcx subst::Substs<'tcx>,\n+        span: Span,\n+        shared: bool,\n+    ) {\n         let (def_id, substs) = self.ecx.resolve_associated_const(def_id, substs);\n         let cid = GlobalId { def_id, substs, promoted: None };\n         if self.ecx.globals.contains_key(&cid) {\n@@ -157,10 +163,19 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n         self.try(|this| {\n             let mir = this.ecx.load_mir(def_id)?;\n             this.ecx.globals.insert(cid, Global::uninitialized(mir.return_ty));\n-            let cleanup = StackPopCleanup::MarkStatic(!immutable || mir.return_ty.type_contents(this.ecx.tcx).interior_unsafe());\n+            let mutable = !shared || mir.return_ty.type_contents(this.ecx.tcx).interior_unsafe();\n+            let cleanup = StackPopCleanup::MarkStatic(mutable);\n             let name = ty::tls::with(|tcx| tcx.item_path_str(def_id));\n             trace!(\"pushing stack frame for global: {}\", name);\n-            this.ecx.push_stack_frame(def_id, span, mir, substs, Lvalue::Global(cid), cleanup, Vec::new())\n+            this.ecx.push_stack_frame(\n+                def_id,\n+                span,\n+                mir,\n+                substs,\n+                Lvalue::Global(cid),\n+                cleanup,\n+                Vec::new(),\n+            )\n         });\n     }\n     fn try<F: FnOnce(&mut Self) -> EvalResult<'tcx>>(&mut self, f: F) {"}]}