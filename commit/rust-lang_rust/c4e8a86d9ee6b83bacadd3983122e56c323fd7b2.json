{"sha": "c4e8a86d9ee6b83bacadd3983122e56c323fd7b2", "node_id": "C_kwDOAAsO6NoAKGM0ZThhODZkOWVlNmI4M2JhY2FkZDM5ODMxMjJlNTZjMzIzZmQ3YjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T19:46:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-27T04:13:44Z"}, "message": "Don't use outlives type op outside of MIR typeck", "tree": {"sha": "74f2c5c1f11991617379ddb1b988561f9705d5d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74f2c5c1f11991617379ddb1b988561f9705d5d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e8a86d9ee6b83bacadd3983122e56c323fd7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e8a86d9ee6b83bacadd3983122e56c323fd7b2", "html_url": "https://github.com/rust-lang/rust/commit/c4e8a86d9ee6b83bacadd3983122e56c323fd7b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e8a86d9ee6b83bacadd3983122e56c323fd7b2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a2fdd4dba976fddfebe4b3be95a327bae39423", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a2fdd4dba976fddfebe4b3be95a327bae39423", "html_url": "https://github.com/rust-lang/rust/commit/d7a2fdd4dba976fddfebe4b3be95a327bae39423"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "f8d056e321e656e28bf0fdf622fc2ee4ea57303c", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8a86d9ee6b83bacadd3983122e56c323fd7b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8a86d9ee6b83bacadd3983122e56c323fd7b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=c4e8a86d9ee6b83bacadd3983122e56c323fd7b2", "patch": "@@ -1,9 +1,9 @@\n use crate::infer::InferCtxt;\n-use crate::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use crate::traits::{ObligationCause, ObligationCtxt};\n use rustc_data_structures::fx::FxIndexSet;\n-use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n+use rustc_infer::infer::InferOk;\n+use rustc_middle::infer::canonical::{OriginalQueryValues, QueryRegionConstraints};\n use rustc_middle::ty::{self, ParamEnv, Ty, TypeFolder, TypeVisitableExt};\n use rustc_span::def_id::LocalDefId;\n \n@@ -68,20 +68,29 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n             return vec![];\n         }\n \n-        let span = self.tcx.def_span(body_id);\n-        let result: Result<_, ErrorGuaranteed> = param_env\n-            .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n-            .fully_perform(self, span);\n-        let result = match result {\n-            Ok(r) => r,\n-            Err(_) => {\n-                return vec![];\n-            }\n+        let mut canonical_var_values = OriginalQueryValues::default();\n+        let canonical_ty =\n+            self.canonicalize_query_keep_static(param_env.and(ty), &mut canonical_var_values);\n+        let Ok(canonical_result) = self.tcx.implied_outlives_bounds(canonical_ty) else {\n+            return vec![];\n+        };\n+\n+        let mut constraints = QueryRegionConstraints::default();\n+        let Ok(InferOk { value, obligations }) = self\n+            .instantiate_nll_query_response_and_region_obligations(\n+                &ObligationCause::dummy(),\n+                param_env,\n+                &canonical_var_values,\n+                canonical_result,\n+                &mut constraints,\n+            ) else {\n+            return vec![];\n         };\n+        assert_eq!(&obligations, &[]);\n \n-        let TypeOpOutput { output, constraints, .. } = result;\n+        if !constraints.is_empty() {\n+            let span = self.tcx.def_span(body_id);\n \n-        if let Some(constraints) = constraints {\n             debug!(?constraints);\n             if !constraints.member_constraints.is_empty() {\n                 span_bug!(span, \"{:#?}\", constraints.member_constraints);\n@@ -108,7 +117,7 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n             }\n         };\n \n-        output\n+        value\n     }\n \n     fn implied_bounds_tys("}]}