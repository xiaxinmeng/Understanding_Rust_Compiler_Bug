{"sha": "78ec6fe30cf2b1e85db76107154d315fde6af8bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZWM2ZmUzMGNmMmIxZTg1ZGI3NjEwNzE1NGQzMTVmZGU2YWY4YmQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-11T21:31:35Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-13T02:02:07Z"}, "message": "Obliterate the callee_id hack\n\nExprs that could be applications of overloaded operators\n(expr_unary, expr_binary, expr_index) relied on the previous node ID\nbeing \"reserved\" to carry extra typechecking info. This was\nincredibly error-prone. Fixed it; now all exprs have two node IDs\n(which will be wasted in some cases; future work could make this\nan option instead if the extra int field ends up being a performance\nproblem).\n\nCloses #2804", "tree": {"sha": "e4c4b54ea819d68c8fd7d5a2b5055364488bf15b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c4b54ea819d68c8fd7d5a2b5055364488bf15b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78ec6fe30cf2b1e85db76107154d315fde6af8bd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78ec6fe30cf2b1e85db76107154d315fde6af8bd", "html_url": "https://github.com/rust-lang/rust/commit/78ec6fe30cf2b1e85db76107154d315fde6af8bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78ec6fe30cf2b1e85db76107154d315fde6af8bd/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec8059ed5cf756adf25742c96f82bf3a240513e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec8059ed5cf756adf25742c96f82bf3a240513e", "html_url": "https://github.com/rust-lang/rust/commit/fec8059ed5cf756adf25742c96f82bf3a240513e"}], "stats": {"total": 205, "additions": 148, "deletions": 57}, "files": [{"sha": "00a9ceeabd7cbebd15beecda8c80c33d93c89a27", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -34,7 +34,7 @@ fn find_rust_files(&files: ~[str], path: str) {\n \n fn common_exprs() -> ~[ast::expr] {\n     fn dse(e: ast::expr_) -> ast::expr {\n-        { id: 0, node: e, span: ast_util::dummy_sp() }\n+        { id: 0, callee_id: -1, node: e, span: ast_util::dummy_sp() }\n     }\n \n     fn dsl(l: ast::lit_) -> ast::lit {"}, {"sha": "e79e5e2ab77ee14f7068efcd5d39676de25ae127", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -288,7 +288,8 @@ enum blk_check_mode { default_blk, unchecked_blk, unsafe_blk, }\n enum expr_check_mode { claimed_expr, checked_expr, }\n \n #[auto_serialize]\n-type expr = {id: node_id, node: expr_, span: span};\n+type expr = {id: node_id, callee_id: node_id, node: expr_, span: span};\n+// Extra node ID is only used for index, assign_op, unary, binary\n \n #[auto_serialize]\n enum alt_mode { alt_check, alt_exhaustive, }"}, {"sha": "1e2de4f5bfa47bc95c15374317a9938c5901e499", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -272,11 +272,6 @@ pure fn unguarded_pat(a: arm) -> option<~[@pat]> {\n     if is_unguarded(a) { some(/* FIXME (#2543) */ copy a.pats) } else { none }\n }\n \n-// Provides an extra node_id to hang callee information on, in case the\n-// operator is deferred to a user-supplied method. The parser is responsible\n-// for reserving this id.\n-fn op_expr_callee_id(e: @expr) -> node_id { e.id - 1 }\n-\n pure fn class_item_ident(ci: @class_member) -> ident {\n     alt ci.node {\n       instance_var(i,_,_,_,_) { /* FIXME (#2543) */ copy i }\n@@ -455,14 +450,8 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n         },\n \n         visit_expr: fn@(e: @expr) {\n+            vfn(e.callee_id);\n             vfn(e.id);\n-            alt e.node {\n-              expr_index(*) | expr_assign_op(*) |\n-              expr_unary(*) | expr_binary(*) {\n-                vfn(ast_util::op_expr_callee_id(e));\n-              }\n-              _ { /* fallthrough */ }\n-            }\n         },\n \n         visit_ty: fn@(t: @ty) {"}, {"sha": "119dbb59109cec8c0785ee29c7ebfbc6b1b8f6d6", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -172,7 +172,8 @@ impl helpers for ext_ctxt {\n     }\n \n     fn expr(span: span, node: ast::expr_) -> @ast::expr {\n-        @{id: self.next_id(), node: node, span: span}\n+        @{id: self.next_id(), callee_id: self.next_id(),\n+          node: node, span: span}\n     }\n \n     fn var_ref(span: span, name: ast::ident) -> @ast::expr {"}, {"sha": "342ecac22626f6a958cdd110231cf5b3b8205397", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -3,12 +3,13 @@ import base::ext_ctxt;\n \n fn mk_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) ->\n     @ast::expr {\n-    ret @{id: cx.next_id(), node: expr, span: sp};\n+    ret @{id: cx.next_id(), callee_id: cx.next_id(),\n+          node: expr, span: sp};\n }\n \n fn mk_lit(cx: ext_ctxt, sp: span, lit: ast::lit_) -> @ast::expr {\n     let sp_lit = @{node: lit, span: sp};\n-    ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n+    mk_expr(cx, sp, ast::expr_lit(sp_lit))\n }\n fn mk_str(cx: ext_ctxt, sp: span, s: str) -> @ast::expr {\n     let lit = ast::lit_str(@s);\n@@ -62,7 +63,7 @@ fn mk_call(cx: ext_ctxt, sp: span, fn_path: ~[ast::ident],\n fn mk_base_vec_e(cx: ext_ctxt, sp: span, exprs: ~[@ast::expr]) ->\n    @ast::expr {\n     let vecexpr = ast::expr_vec(exprs, ast::m_imm);\n-    ret @{id: cx.next_id(), node: vecexpr, span: sp};\n+    mk_expr(cx, sp, vecexpr)\n }\n fn mk_vstore_e(cx: ext_ctxt, sp: span, expr: @ast::expr, vst: ast::vstore) ->\n    @ast::expr {"}, {"sha": "f5d13df75d635163fb18012be958e88e64d86658", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -9,6 +9,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n     }\n \n     ret @{id: cx.next_id(),\n+          callee_id: cx.next_id(),\n           node: ast::expr_path(@{span: sp, global: false, idents: ~[@res],\n                                  rp: none, types: ~[]}),\n           span: sp};"}, {"sha": "06941fc5d38f92ab3752ecad33456e355ca7a1dd", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -11,6 +11,6 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n     );\n \n     //trivial expression\n-    ret @{id: cx.next_id(), node: ast::expr_rec(~[], option::none),\n-          span: sp};\n+    ret @{id: cx.next_id(), callee_id: cx.next_id(),\n+          node: ast::expr_rec(~[], option::none), span: sp};\n }"}, {"sha": "6ccbabd748e96c8f3a0c555df410f8a99577755e", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -7,7 +7,7 @@ import base::*;\n import fold::*;\n import ast_util::respan;\n import ast::{ident, path, ty, blk_, expr, expr_path,\n-             expr_vec, expr_mac, mac_invoc, node_id};\n+             expr_vec, expr_mac, mac_invoc, node_id, expr_index};\n \n export add_new_extension;\n "}, {"sha": "0e16d4bdca870f76c118c0f0bc34eea5953c4b3b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -688,6 +688,7 @@ impl of ast_fold for ast_fold_precursor {\n     fn fold_expr(&&x: @expr) -> @expr {\n         let (n, s) = self.fold_expr(x.node, x.span, self as ast_fold);\n         ret @{id: self.new_id(x.id),\n+              callee_id: self.new_id(x.callee_id),\n               node: n,\n               span: self.new_span(s)};\n     }"}, {"sha": "4a013f20dfd88207001ad1ba6b93369cb292efc8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -1,3 +1,5 @@\n+import print::pprust::expr_to_str;\n+\n import result::result;\n import either::{either, left, right};\n import std::map::{hashmap, str_hash};\n@@ -758,11 +760,13 @@ class parser {\n     }\n \n     fn mk_expr(lo: uint, hi: uint, +node: expr_) -> @expr {\n-        ret @{id: self.get_id(), node: node, span: mk_sp(lo, hi)};\n+        ret @{id: self.get_id(), callee_id: self.get_id(),\n+              node: node, span: mk_sp(lo, hi)};\n     }\n \n     fn mk_mac_expr(lo: uint, hi: uint, m: mac_) -> @expr {\n         ret @{id: self.get_id(),\n+              callee_id: self.get_id(),\n               node: expr_mac({node: m, span: mk_sp(lo, hi)}),\n               span: mk_sp(lo, hi)};\n     }\n@@ -772,7 +776,8 @@ class parser {\n         let lv_lit = @{node: lit_uint(i as u64, ty_u32),\n                        span: span};\n \n-        ret @{id: self.get_id(), node: expr_lit(lv_lit), span: span};\n+        ret @{id: self.get_id(), callee_id: self.get_id(),\n+              node: expr_lit(lv_lit), span: span};\n     }\n \n     fn mk_pexpr(lo: uint, hi: uint, node: expr_) -> pexpr {\n@@ -1112,7 +1117,6 @@ class parser {\n                 let ix = self.parse_expr();\n                 hi = ix.span.hi;\n                 self.expect(token::RBRACKET);\n-                self.get_id(); // see ast_util::op_expr_callee_id\n                 e = self.mk_pexpr(lo, hi, expr_index(self.to_expr(e), ix));\n               }\n "}, {"sha": "44d68a3fcd96a4e1d3cc5804497470639152a640", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -283,9 +283,11 @@ fn mk_test_desc_vec(cx: test_ctxt) -> @ast::expr {\n     }\n \n     let inner_expr = @{id: cx.sess.next_node_id(),\n+                       callee_id: cx.sess.next_node_id(),\n                        node: ast::expr_vec(descs, ast::m_imm),\n                        span: dummy_sp()};\n     ret @{id: cx.sess.next_node_id(),\n+          callee_id: cx.sess.next_node_id(),\n           node: ast::expr_vstore(inner_expr, ast::vstore_uniq),\n           span: dummy_sp()};\n }\n@@ -300,6 +302,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n         nospan(ast::lit_str(@ast_util::path_name_i(path)));\n     let name_expr: ast::expr =\n         {id: cx.sess.next_node_id(),\n+         callee_id: cx.sess.next_node_id(),\n          node: ast::expr_lit(@name_lit),\n          span: span};\n \n@@ -310,6 +313,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n \n     let fn_expr: ast::expr =\n         {id: cx.sess.next_node_id(),\n+         callee_id: cx.sess.next_node_id(),\n          node: ast::expr_path(fn_path),\n          span: span};\n \n@@ -322,6 +326,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n \n     let ignore_expr: ast::expr =\n         {id: cx.sess.next_node_id(),\n+         callee_id: cx.sess.next_node_id(),\n          node: ast::expr_lit(@ignore_lit),\n          span: span};\n \n@@ -332,6 +337,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n \n     let fail_expr: ast::expr =\n         {id: cx.sess.next_node_id(),\n+         callee_id: cx.sess.next_node_id(),\n          node: ast::expr_lit(@fail_lit),\n          span: span};\n \n@@ -342,7 +348,8 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n         ast::expr_rec(~[name_field, fn_field, ignore_field, fail_field],\n             option::none);\n     let desc_rec: ast::expr =\n-        {id: cx.sess.next_node_id(), node: desc_rec_, span: span};\n+        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n+         node: desc_rec_, span: span};\n     ret @desc_rec;\n }\n \n@@ -354,6 +361,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n                    span: span) -> @ast::expr {\n     let call_expr: ast::expr = {\n         id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n         node: ast::expr_call(@fn_path_expr, ~[], false),\n         span: span\n     };\n@@ -379,6 +387,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n \n     let wrapper_expr: ast::expr = {\n         id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n         node: ast::expr_fn(ast::proto_bare, wrapper_decl,\n                            wrapper_body, @~[]),\n         span: span\n@@ -444,37 +453,40 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n     let args_path_expr_: ast::expr_ = ast::expr_path(args_path);\n \n     let args_path_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), node: args_path_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n+         node: args_path_expr_, span: dummy_sp()};\n \n     // Call __test::test to generate the vector of test_descs\n     let test_path = path_node(~[@\"tests\"]);\n \n     let test_path_expr_: ast::expr_ = ast::expr_path(test_path);\n \n     let test_path_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), node: test_path_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n+         node: test_path_expr_, span: dummy_sp()};\n \n     let test_call_expr_ = ast::expr_call(@test_path_expr, ~[], false);\n \n     let test_call_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), node: test_call_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n+         node: test_call_expr_, span: dummy_sp()};\n \n     // Call std::test::test_main\n     let test_main_path = path_node(mk_path(cx, ~[@\"test\", @\"test_main\"]));\n \n     let test_main_path_expr_: ast::expr_ = ast::expr_path(test_main_path);\n \n     let test_main_path_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), node: test_main_path_expr_,\n-         span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n+         node: test_main_path_expr_, span: dummy_sp()};\n \n     let test_main_call_expr_: ast::expr_ =\n         ast::expr_call(@test_main_path_expr,\n                        ~[@args_path_expr, @test_call_expr], false);\n \n     let test_main_call_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), node: test_main_call_expr_,\n-         span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n+         node: test_main_call_expr_, span: dummy_sp()};\n \n     ret @test_main_call_expr;\n }"}, {"sha": "01d04fa167af539af32ae257b650d3830c98a31b", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -159,7 +159,6 @@ import std::list::{list, cons, nil};\n import result::{result, ok, err, extensions};\n import syntax::print::pprust;\n import util::common::indenter;\n-import ast_util::op_expr_callee_id;\n import ty::to_str;\n import driver::session::session;\n import dvec::{dvec, extensions};"}, {"sha": "4977af45b7ebf5fd51855dae667297f94f93ac77", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -616,15 +616,15 @@ fn check_loans_in_expr(expr: @ast::expr,\n       if self.bccx.method_map.contains_key(expr.id) {\n         self.check_call(expr,\n                         none,\n-                        ast_util::op_expr_callee_id(expr),\n+                        expr.callee_id,\n                         expr.span,\n                         ~[rval]);\n       }\n       ast::expr_unary(*) | ast::expr_index(*)\n       if self.bccx.method_map.contains_key(expr.id) {\n         self.check_call(expr,\n                         none,\n-                        ast_util::op_expr_callee_id(expr),\n+                        expr.callee_id,\n                         expr.span,\n                         ~[]);\n       }"}, {"sha": "60c75a06dbf7480dd3b3cac828ba259d4da48941", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -405,6 +405,7 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n         visit_stmt: fn@(s: @ast::stmt) {\n             alt s.node {\n               ast::stmt_semi(@{id: id,\n+                               callee_id: _,\n                                node: ast::expr_path(@path),\n                                span: _}, _) {\n                 cx.sess.span_lint("}, {"sha": "2b4447d71ce05d358b1a43d375e82568fe80a2eb", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -1475,12 +1475,12 @@ fn trans_unary(bcx: block, op: ast::unop, e: @ast::expr,\n     // Check for user-defined method call\n     alt bcx.ccx().maps.method_map.find(un_expr.id) {\n       some(mentry) {\n-        let callee_id = ast_util::op_expr_callee_id(un_expr);\n-        let fty = node_id_type(bcx, callee_id);\n+        let fty = node_id_type(bcx, un_expr.callee_id);\n         ret trans_call_inner(\n             bcx, un_expr.info(), fty,\n             expr_ty(bcx, un_expr),\n-            |bcx| impl::trans_method_callee(bcx, callee_id, e, mentry),\n+            |bcx| impl::trans_method_callee(bcx, un_expr.callee_id, e,\n+                                            mentry),\n             arg_exprs(~[]), dest);\n       }\n       _ {}\n@@ -1703,10 +1703,9 @@ fn trans_assign_op(bcx: block, ex: @ast::expr, op: ast::binop,\n     alt bcx.ccx().maps.method_map.find(ex.id) {\n       some(origin) {\n         let bcx = lhs_res.bcx;\n-        let callee_id = ast_util::op_expr_callee_id(ex);\n         #debug[\"user-defined method callee_id: %s\",\n-               ast_map::node_id_to_str(bcx.tcx().items, callee_id)];\n-        let fty = node_id_type(bcx, callee_id);\n+               ast_map::node_id_to_str(bcx.tcx().items, ex.callee_id)];\n+        let fty = node_id_type(bcx, ex.callee_id);\n \n         let dty = expr_ty(bcx, dst);\n         let target = alloc_ty(bcx, dty);\n@@ -1717,7 +1716,7 @@ fn trans_assign_op(bcx: block, ex: @ast::expr, op: ast::binop,\n             |bcx| {\n                 // FIXME (#2528): provide the already-computed address, not\n                 // the expr.\n-                impl::trans_method_callee(bcx, callee_id, dst, origin)\n+                impl::trans_method_callee(bcx, ex.callee_id, dst, origin)\n             },\n             arg_exprs(~[src]), save_in(target));\n \n@@ -1851,13 +1850,12 @@ fn trans_binary(bcx: block, op: ast::binop, lhs: @ast::expr,\n     // User-defined operators\n     alt bcx.ccx().maps.method_map.find(ex.id) {\n       some(origin) {\n-        let callee_id = ast_util::op_expr_callee_id(ex);\n-        let fty = node_id_type(bcx, callee_id);\n+        let fty = node_id_type(bcx, ex.callee_id);\n         ret trans_call_inner(\n             bcx, ex.info(), fty,\n             expr_ty(bcx, ex),\n             |bcx| {\n-                impl::trans_method_callee(bcx, callee_id, lhs, origin)\n+                impl::trans_method_callee(bcx, ex.callee_id, lhs, origin)\n             },\n             arg_exprs(~[rhs]), dest);\n       }\n@@ -3597,12 +3595,12 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             // If it is here, it's not an lval, so this is a user-defined\n             // index op\n             let origin = bcx.ccx().maps.method_map.get(e.id);\n-            let callee_id = ast_util::op_expr_callee_id(e);\n-            let fty = node_id_type(bcx, callee_id);\n+            let fty = node_id_type(bcx, e.callee_id);\n             ret trans_call_inner(\n                 bcx, e.info(), fty,\n                 expr_ty(bcx, e),\n-                |bcx| impl::trans_method_callee(bcx, callee_id, base, origin),\n+                |bcx| impl::trans_method_callee(bcx, e.callee_id, base,\n+                                                origin),\n                 arg_exprs(~[idx]), dest);\n           }\n "}, {"sha": "43dc46cd2b6be7d6f44653d117f234dc68623149", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -893,13 +893,12 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                         self_ex: @ast::expr, self_t: ty::t,\n                         opname: str, args: ~[@ast::expr])\n         -> option<(ty::t, bool)> {\n-        let callee_id = ast_util::op_expr_callee_id(op_ex);\n         let lkup = method::lookup(fcx, op_ex, self_ex, op_ex.id,\n-                                  callee_id, @opname, self_t, ~[], false);\n+                     op_ex.callee_id, @opname, self_t, ~[], false);\n         alt lkup.method() {\n           some(origin) {\n             let {fty: method_ty, bot: bot} = {\n-                let method_ty = fcx.node_ty(callee_id);\n+                let method_ty = fcx.node_ty(op_ex.callee_id);\n                 check_call_inner(fcx, op_ex.span, op_ex.id,\n                                  method_ty, args)\n             };\n@@ -1963,7 +1962,9 @@ fn check_constraints(fcx: @fn_ctxt, cs: ~[@ast::constr],\n                     }\n                     ast::carg_lit(l) {\n                       let tmp_node_id = fcx.ccx.tcx.sess.next_node_id();\n-                      {id: tmp_node_id, node: ast::expr_lit(l), span: a.span}\n+                      {id: tmp_node_id,\n+                       callee_id: fcx.ccx.tcx.sess.next_node_id(),\n+                       node: ast::expr_lit(l), span: a.span}\n                     }\n                     ast::carg_ident(i) {\n                       if i < num_args {\n@@ -1976,6 +1977,7 @@ fn check_constraints(fcx: @fn_ctxt, cs: ~[@ast::constr],\n                               (arg_occ_node_id,\n                                ast::def_arg(args[i].id, args[i].mode));\n                           {id: arg_occ_node_id,\n+                           callee_id: fcx.ccx.tcx.sess.next_node_id(),\n                            node: ast::expr_path(p),\n                            span: a.span}\n                       } else {\n@@ -1987,11 +1989,14 @@ fn check_constraints(fcx: @fn_ctxt, cs: ~[@ast::constr],\n                   });\n         }\n         let p_op: ast::expr_ = ast::expr_path(c.node.path);\n-        let oper: @ast::expr = @{id: c.node.id, node: p_op, span: c.span};\n+        let oper: @ast::expr = @{id: c.node.id,\n+             callee_id: fcx.ccx.tcx.sess.next_node_id(),\n+             node: p_op, span: c.span};\n         // Another ephemeral expr\n         let call_expr_id = fcx.ccx.tcx.sess.next_node_id();\n         let call_expr =\n             @{id: call_expr_id,\n+              callee_id: fcx.ccx.tcx.sess.next_node_id(),\n               node: ast::expr_call(oper, c_args, false),\n               span: c.span};\n         check_pred_expr(fcx, call_expr);"}, {"sha": "c3829f60c40dc6e913c85815e8def83df743e726", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -415,7 +415,7 @@ class lookup {\n         let all_substs = {tps: vec::append(cand.self_substs.tps, m_substs)\n                           with cand.self_substs};\n \n-        self.fcx.write_ty_substs(self.node_id, cand.fty, all_substs);\n+         self.fcx.write_ty_substs(self.node_id, cand.fty, all_substs);\n \n         ret cand.entry;\n     }"}, {"sha": "d5401e3a4e7e73d9b6ee9d09feacd0f4b06d734d", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -233,7 +233,7 @@ fn resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, v: visit::vt<@fn_ctxt>) {\n             if has_trait_bounds(*bounds) {\n                 let callee_id = alt ex.node {\n                   ast::expr_field(_, _, _) { ex.id }\n-                  _ { ast_util::op_expr_callee_id(ex) }\n+                  _ { ex.callee_id }\n                 };\n                 let substs = fcx.node_ty_substs(callee_id);\n                 let iscs = cx.impl_map.get(ex.id);"}, {"sha": "a55c0515d7676a93006d21c611d0dc95857acc73", "filename": "src/rustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -105,8 +105,7 @@ fn visit_expr(e: @ast::expr, wbcx: wb_ctxt, v: wb_vt) {\n \n       ast::expr_binary(*) | ast::expr_unary(*) | ast::expr_assign_op(*)\n         | ast::expr_index(*) {\n-        maybe_resolve_type_vars_for_node(wbcx, e.span,\n-                                         ast_util::op_expr_callee_id(e));\n+        maybe_resolve_type_vars_for_node(wbcx, e.span, e.callee_id);\n       }\n \n       _ { }"}, {"sha": "245d0d0ab244ac41a8b9db39ec0328f2c602dd4d", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -0,0 +1,10 @@\n+// Minimized version of issue-2804.rs. Both check that callee IDs don't\n+// clobber the previous node ID in a macro expr\n+use std;\n+import std::map::hashmap;\n+\n+fn add_interfaces(managed_ip: str, device: std::map::hashmap<str, int>)  {\n+     #error[\"%s, %?\", managed_ip, device[\"interfaces\"]];\n+}\n+\n+fn main() {}"}, {"sha": "ae63e1ab22e6b979c51e0dc3b7b8336f253340b2", "filename": "src/test/run-pass/issue-2804.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ec6fe30cf2b1e85db76107154d315fde6af8bd/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=78ec6fe30cf2b1e85db76107154d315fde6af8bd", "patch": "@@ -0,0 +1,69 @@\n+use std;\n+import io;\n+import io::writer_util;\n+import std::map::hashmap;\n+\n+enum object\n+{\n+    bool_value(bool),\n+    int_value(i64),\n+}\n+\n+fn lookup(table: std::map::hashmap<str, std::json::json>, key: str, default: str) -> str\n+{\n+    alt table.find(key)\n+    {\n+        option::some(std::json::string(s))\n+        {\n+            *s\n+        }\n+        option::some(value)\n+        {\n+            #error[\"%s was expected to be a string but is a %?\", key, value];\n+            default\n+        }\n+        option::none\n+        {\n+            default\n+        }\n+    }\n+}\n+\n+fn add_interface(store: int, managed_ip: str, data: std::json::json) -> (str, object)\n+{\n+    alt data\n+    {\n+        std::json::dict(interface)\n+        {\n+            let name = lookup(interface, \"ifDescr\", \"\");\n+            let label = #fmt[\"%s-%s\", managed_ip, name];\n+\n+            (label, bool_value(false))\n+        }\n+        _\n+        {\n+            #error[\"Expected dict for %s interfaces but found %?\", managed_ip, data];\n+            (\"gnos:missing-interface\", bool_value(true))\n+        }\n+    }\n+}\n+\n+fn add_interfaces(store: int, managed_ip: str, device: std::map::hashmap<str, std::json::json>) -> [(str, object)]/~\n+{\n+    alt device[\"interfaces\"]\n+    {\n+        std::json::list(interfaces)\n+        {\n+          do vec::map(*interfaces) |interface| {\n+                add_interface(store, managed_ip, interface)\n+          }\n+        }\n+        _\n+        {\n+            #error[\"Expected list for %s interfaces but found %?\", managed_ip, device[\"interfaces\"]];\n+            []/~\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}