{"sha": "f73f001ce58026633c2399daf75bc22ac7b698cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3M2YwMDFjZTU4MDI2NjMzYzIzOTlkYWY3NWJjMjJhYzdiNjk4Y2M=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T22:53:56Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T22:53:56Z"}, "message": "Fix fabsf{32,64} intrinsics.", "tree": {"sha": "725382ac5559fce7b958990748ec5182e4235234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725382ac5559fce7b958990748ec5182e4235234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73f001ce58026633c2399daf75bc22ac7b698cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73f001ce58026633c2399daf75bc22ac7b698cc", "html_url": "https://github.com/rust-lang/rust/commit/f73f001ce58026633c2399daf75bc22ac7b698cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73f001ce58026633c2399daf75bc22ac7b698cc/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f714b72a0c6936c26a354eac560a51a33606119", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f714b72a0c6936c26a354eac560a51a33606119", "html_url": "https://github.com/rust-lang/rust/commit/0f714b72a0c6936c26a354eac560a51a33606119"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "0443206e80dba9d493e16dd8580e852559902be7", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f73f001ce58026633c2399daf75bc22ac7b698cc/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73f001ce58026633c2399daf75bc22ac7b698cc/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=f73f001ce58026633c2399daf75bc22ac7b698cc", "patch": "@@ -208,12 +208,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"fabsf32\" => {\n-                let f = self.value_to_primval(arg_vals[2], f32)?.to_f32()?;\n+                let f = self.value_to_primval(arg_vals[0], f32)?.to_f32()?;\n                 self.write_primval(dest, PrimVal::from_f32(f.abs()), dest_ty)?;\n             }\n \n             \"fabsf64\" => {\n-                let f = self.value_to_primval(arg_vals[2], f64)?.to_f64()?;\n+                let f = self.value_to_primval(arg_vals[0], f64)?.to_f64()?;\n                 self.write_primval(dest, PrimVal::from_f64(f.abs()), dest_ty)?;\n             }\n "}]}