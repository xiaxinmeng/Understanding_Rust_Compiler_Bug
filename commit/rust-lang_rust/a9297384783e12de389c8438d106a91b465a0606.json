{"sha": "a9297384783e12de389c8438d106a91b465a0606", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Mjk3Mzg0NzgzZTEyZGUzODljODQzOGQxMDZhOTFiNDY1YTA2MDY=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T08:19:06Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T08:19:06Z"}, "message": "Use intra-doc links for u32::*", "tree": {"sha": "684250fd06c9f4c20534b800a4a5a6ce0efd3679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/684250fd06c9f4c20534b800a4a5a6ce0efd3679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9297384783e12de389c8438d106a91b465a0606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9297384783e12de389c8438d106a91b465a0606", "html_url": "https://github.com/rust-lang/rust/commit/a9297384783e12de389c8438d106a91b465a0606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9297384783e12de389c8438d106a91b465a0606/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b5ec9e9e05c2bc0a4b9a81138801450d0585a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5ec9e9e05c2bc0a4b9a81138801450d0585a3f", "html_url": "https://github.com/rust-lang/rust/commit/7b5ec9e9e05c2bc0a4b9a81138801450d0585a3f"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "d23e4a6ce94942414681b8a0bd357a90ee03e494", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a9297384783e12de389c8438d106a91b465a0606/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9297384783e12de389c8438d106a91b465a0606/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=a9297384783e12de389c8438d106a91b465a0606", "patch": "@@ -1656,15 +1656,15 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `count_ones` method. For example,\n-    /// [`std::u32::count_ones`](../../std/primitive.u32.html#method.count_ones)\n+    /// [`std::u32::count_ones`](u32::count_ones)\n     #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n     pub fn ctpop<T: Copy>(x: T) -> T;\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `leading_zeros` method. For example,\n-    /// [`std::u32::leading_zeros`](../../std/primitive.u32.html#method.leading_zeros)\n+    /// [`std::u32::leading_zeros`](u32::leading_zeros)\n     ///\n     /// # Examples\n     ///\n@@ -1715,7 +1715,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `trailing_zeros` method. For example,\n-    /// [`std::u32::trailing_zeros`](../../std/primitive.u32.html#method.trailing_zeros)\n+    /// [`std::u32::trailing_zeros`](u32::trailing_zeros)\n     ///\n     /// # Examples\n     ///\n@@ -1766,39 +1766,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `swap_bytes` method. For example,\n-    /// [`std::u32::swap_bytes`](../../std/primitive.u32.html#method.swap_bytes)\n+    /// [`std::u32::swap_bytes`](u32::swap_bytes)\n     #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n     pub fn bswap<T: Copy>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `reverse_bits` method. For example,\n-    /// [`std::u32::reverse_bits`](../../std/primitive.u32.html#method.reverse_bits)\n+    /// [`std::u32::reverse_bits`](u32::reverse_bits)\n     #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n     pub fn bitreverse<T: Copy>(x: T) -> T;\n \n     /// Performs checked integer addition.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_add` method. For example,\n-    /// [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n+    /// [`std::u32::overflowing_add`](u32::overflowing_add)\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn add_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_sub` method. For example,\n-    /// [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n+    /// [`std::u32::overflowing_sub`](u32::overflowing_sub)\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn sub_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_mul` method. For example,\n-    /// [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n+    /// [`std::u32::overflowing_mul`](u32::overflowing_mul)\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n@@ -1813,15 +1813,15 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n-    /// [`std::u32::checked_div`](../../std/primitive.u32.html#method.checked_div)\n+    /// [`std::u32::checked_div`](u32::checked_div)\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior where y = 0 or x = `T::MIN` and y = -1\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n-    /// [`std::u32::checked_rem`](../../std/primitive.u32.html#method.checked_rem)\n+    /// [`std::u32::checked_rem`](u32::checked_rem)\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_rem<T: Copy>(x: T, y: T) -> T;\n \n@@ -1830,15 +1830,15 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_shl` method. For example,\n-    /// [`std::u32::checked_shl`](../../std/primitive.u32.html#method.checked_shl)\n+    /// [`std::u32::checked_shl`](u32::checked_shl)\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shl<T: Copy>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_shr` method. For example,\n-    /// [`std::u32::checked_shr`](../../std/primitive.u32.html#method.checked_shr)\n+    /// [`std::u32::checked_shr`](u32::checked_shr)\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shr<T: Copy>(x: T, y: T) -> T;\n \n@@ -1867,52 +1867,52 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_left` method. For example,\n-    /// [`std::u32::rotate_left`](../../std/primitive.u32.html#method.rotate_left)\n+    /// [`std::u32::rotate_left`](u32::rotate_left)\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_left<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs rotate right.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_right` method. For example,\n-    /// [`std::u32::rotate_right`](../../std/primitive.u32.html#method.rotate_right)\n+    /// [`std::u32::rotate_right`](u32::rotate_right)\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_right<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_add` method. For example,\n-    /// [`std::u32::checked_add`](../../std/primitive.u32.html#method.checked_add)\n+    /// [`std::u32::checked_add`](u32::checked_add)\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_add<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_sub` method. For example,\n-    /// [`std::u32::checked_sub`](../../std/primitive.u32.html#method.checked_sub)\n+    /// [`std::u32::checked_sub`](u32::checked_sub)\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_sub<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_mul` method. For example,\n-    /// [`std::u32::checked_mul`](../../std/primitive.u32.html#method.checked_mul)\n+    /// [`std::u32::checked_mul`](u32::checked_mul)\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_mul<T: Copy>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,\n-    /// [`std::u32::saturating_add`](../../std/primitive.u32.html#method.saturating_add)\n+    /// [`std::u32::saturating_add`](u32::saturating_add)\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_add<T: Copy>(a: T, b: T) -> T;\n     /// Computes `a - b`, while saturating at numeric bounds.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_sub` method. For example,\n-    /// [`std::u32::saturating_sub`](../../std/primitive.u32.html#method.saturating_sub)\n+    /// [`std::u32::saturating_sub`](u32::saturating_sub)\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_sub<T: Copy>(a: T, b: T) -> T;\n "}]}