{"sha": "bcc99091f36a8796a76da9a287457d3e04303903", "node_id": "C_kwDOAAsO6NoAKGJjYzk5MDkxZjM2YTg3OTZhNzZkYTlhMjg3NDU3ZDNlMDQzMDM5MDM", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T10:30:51Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T10:30:51Z"}, "message": "hacky fix for cancelling", "tree": {"sha": "299a90071acd0c6cf83a69be5f3bb1e36f91182f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/299a90071acd0c6cf83a69be5f3bb1e36f91182f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc99091f36a8796a76da9a287457d3e04303903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc99091f36a8796a76da9a287457d3e04303903", "html_url": "https://github.com/rust-lang/rust/commit/bcc99091f36a8796a76da9a287457d3e04303903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc99091f36a8796a76da9a287457d3e04303903/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5504a61751cbcb71d779dfe2085557e72b6030", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5504a61751cbcb71d779dfe2085557e72b6030", "html_url": "https://github.com/rust-lang/rust/commit/6c5504a61751cbcb71d779dfe2085557e72b6030"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "5da299555634827847b2fa3689a6547861328eb9", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bcc99091f36a8796a76da9a287457d3e04303903/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc99091f36a8796a76da9a287457d3e04303903/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=bcc99091f36a8796a76da9a287457d3e04303903", "patch": "@@ -4,6 +4,8 @@\n //! various caches, it's not really advanced at the moment.\n mod topologic_sort;\n \n+use std::time::Duration;\n+\n use hir::db::DefDatabase;\n use ide_db::{\n     base_db::{\n@@ -14,7 +16,7 @@ use ide_db::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::{prime_caches, RootDatabase};\n+use crate::RootDatabase;\n \n /// We're indexing many crates.\n #[derive(Debug)]\n@@ -93,7 +95,7 @@ pub(crate) fn parallel_prime_caches(\n     let mut crates_currently_indexing =\n         FxIndexMap::with_capacity_and_hasher(num_worker_threads as _, Default::default());\n \n-    while !crates_to_prime.is_empty() {\n+    while crates_done < crates_total {\n         db.unwind_if_cancelled();\n \n         for crate_id in &mut crates_to_prime {\n@@ -105,9 +107,14 @@ pub(crate) fn parallel_prime_caches(\n                 .ok();\n         }\n \n-        let worker_progress = match progress_receiver.recv() {\n+        // recv_timeout is somewhat a hack, we need a way to from this thread check to see if the current salsa revision\n+        // is cancelled.\n+        let worker_progress = match progress_receiver.recv_timeout(Duration::from_millis(10)) {\n             Ok(p) => p,\n-            Err(_) => {\n+            Err(crossbeam_channel::RecvTimeoutError::Timeout) => {\n+                continue;\n+            }\n+            Err(crossbeam_channel::RecvTimeoutError::Disconnected) => {\n                 // our workers may have died from a cancelled task, so we'll check and re-raise here.\n                 db.unwind_if_cancelled();\n                 break;"}, {"sha": "f54d2c19086c94e9019078f6ccfa14963d553762", "filename": "crates/ide/src/prime_caches/topologic_sort.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc99091f36a8796a76da9a287457d3e04303903/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc99091f36a8796a76da9a287457d3e04303903/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs?ref=bcc99091f36a8796a76da9a287457d3e04303903", "patch": "@@ -60,10 +60,6 @@ where\n         self.nodes.len()\n     }\n \n-    pub(crate) fn is_empty(&self) -> bool {\n-        self.nodes.len() == 0 && self.ready.len() == 0\n-    }\n-\n     pub(crate) fn mark_done(&mut self, item: T) {\n         let entry = self.nodes.remove(&item).expect(\"invariant: unknown item marked as done\");\n "}]}