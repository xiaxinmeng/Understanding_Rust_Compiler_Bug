{"sha": "185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "node_id": "C_kwDOAAsO6NoAKDE4NWVmN2I2ZGUwZGNkZDMyYWY0M2ZkNzVlZmE0MWZkMTI4Y2JhYWQ", "commit": {"author": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-08-26T19:27:17Z"}, "committer": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-11-09T13:56:21Z"}, "message": "Port `MissingFeatures` and `TargetFeatureDisableOrEnable`", "tree": {"sha": "afa86983a15ad6263b67a8584fe20169c13912b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa86983a15ad6263b67a8584fe20169c13912b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "html_url": "https://github.com/rust-lang/rust/commit/185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/comments", "author": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ef16f291b6a43dc57dcb8915bdb4aa736a7936", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ef16f291b6a43dc57dcb8915bdb4aa736a7936", "html_url": "https://github.com/rust-lang/rust/commit/33ef16f291b6a43dc57dcb8915bdb4aa736a7936"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "ce54c2813843270183169a40bb1ef65186303ea4", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "patch": "@@ -12,7 +12,7 @@ use rustc_target::spec::{FramePointer, SanitizerSet, StackProbeType, StackProtec\n use smallvec::SmallVec;\n \n use crate::attributes;\n-use crate::errors::SanitizerMemtagRequiresMte;\n+use crate::errors::{MissingFeatures, SanitizerMemtagRequiresMte, TargetFeatureDisableOrEnable};\n use crate::llvm::AttributePlace::Function;\n use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace, MemoryEffects};\n use crate::llvm_util;\n@@ -394,13 +394,11 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n             .get_attrs(instance.def_id(), sym::target_feature)\n             .next()\n             .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n-        let msg = format!(\n-            \"the target features {} must all be either enabled or disabled together\",\n-            f.join(\", \")\n-        );\n-        let mut err = cx.tcx.sess.struct_span_err(span, &msg);\n-        err.help(\"add the missing features in a `target_feature` attribute\");\n-        err.emit();\n+        cx.tcx\n+            .sess\n+            .create_err(TargetFeatureDisableOrEnable { features: f, span: Some(span) })\n+            .subdiagnostic(MissingFeatures)\n+            .emit();\n         return;\n     }\n "}, {"sha": "cd53ac4532ae64dc187a4b23e54bcc4796bcf43f", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "patch": "@@ -2,7 +2,8 @@ use std::borrow::Cow;\n \n use rustc_errors::fluent;\n use rustc_errors::DiagnosticBuilder;\n-use rustc_macros::SessionDiagnostic;\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_session::SessionDiagnostic;\n use rustc_span::Span;\n \n@@ -117,3 +118,29 @@ pub(crate) struct DlltoolFailImportLibrary<'a> {\n pub(crate) struct UnknownArchiveKind<'a> {\n     pub kind: &'a str,\n }\n+\n+pub(crate) struct TargetFeatureDisableOrEnable<'a> {\n+    pub features: &'a [&'a str],\n+    pub span: Option<Span>,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[help(codegen_llvm::missing_features)]\n+pub(crate) struct MissingFeatures;\n+\n+impl SessionDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {\n+    fn into_diagnostic(\n+        self,\n+        sess: &'_ rustc_session::parse::ParseSess,\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = if let Some(span) = self.span {\n+            let mut diag = sess.struct_err(fluent::codegen_llvm::target_feature_disable_or_enable);\n+            diag.set_span(span);\n+            diag\n+        } else {\n+            sess.struct_err(fluent::codegen_llvm::target_feature_disable_or_enable)\n+        };\n+        diag.set_arg(\"features\", self.features.join(\", \"));\n+        diag\n+    }\n+}"}, {"sha": "8c2db38d84d8c0fd7e496e63d6b7b92878187901", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "patch": "@@ -1,5 +1,5 @@\n use crate::back::write::create_informational_target_machine;\n-use crate::errors::UnknownCTargetFeature;\n+use crate::errors::{TargetFeatureDisableOrEnable, UnknownCTargetFeature};\n use crate::llvm;\n use libc::c_int;\n use rustc_codegen_ssa::target_features::{\n@@ -480,10 +480,10 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n     features.extend(feats);\n \n     if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n-        sess.err(&format!(\n-            \"target features {} must all be enabled or disabled together\",\n-            f.join(\", \")\n-        ));\n+        sess.emit_err(TargetFeatureDisableOrEnable {\n+            features: f,\n+            span: None\n+        });\n     }\n \n     features"}, {"sha": "4113e6640d6e3f506ac24f74d700729eadd29271", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/185ef7b6de0dcdd32af43fd75efa41fd128cbaad/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=185ef7b6de0dcdd32af43fd75efa41fd128cbaad", "patch": "@@ -51,3 +51,9 @@ codegen_llvm_dlltool_fail_import_library =\n \n codegen_llvm_unknown_archive_kind =\n     Don't know how to build archive of type: {$kind}\n+\n+codegen_llvm_target_feature_disable_or_enable =\n+    target features {$features} must all be enabled or disabled together\n+\n+codegen_llvm_missing_features =\n+    add the missing features in a `target_feature` attribute"}]}