{"sha": "4134241bcf79a77c724158cc388a746499c5fa06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMzQyNDFiY2Y3OWE3N2M3MjQxNThjYzM4OGE3NDY0OTljNWZhMDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T02:18:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T02:18:48Z"}, "message": "Rollup merge of #63499 - nikomatsakis:issuee-63388-async-fn-elision-self-mut-self, r=cramertj\n\nhandle elision in async fn correctly\n\nWe now always make fresh lifetimne parameters for all elided\nlifetimes, whether they are in the inputs or outputs. But then\nwe generate `'_` in the case of elided lifetimes from the outputs.\n\nExample:\n\n```rust\nasync fn foo<'a>(x: &'a u32) -> &u32 { .. }\n```\n\nbecomes\n\n```rust\ntype Foo<'a, 'b> = impl Future<Output = &'b u32>;\nfn foo<'a>(x: &'a u32) -> Foo<'a, '_>\n```\n\nFixes #63388", "tree": {"sha": "5b37ae4e4c011e52ae2e483ced4f0b5b69916f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b37ae4e4c011e52ae2e483ced4f0b5b69916f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4134241bcf79a77c724158cc388a746499c5fa06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdU2+ICRBK7hj4Ov3rIwAAdHIIAECjNR7Ac1YufMTh1TpCWJTm\nFVG3pGrAmx+EJjhUT/vI4lyINWdrDqt4bhONdUGVm8ryxzVnejzARqZfF2q76b+a\n9YgUVsVMvswVUqrKBPmHvfzpLO7e+XHpRNg4zRa9xJ75iLe219t8QDEiBlPaQ110\ndPuqs91ZovqhWcaeaA/smVZIlTrFX1uCvEZaMjS/6QecEwJRTUYFtD7HA/YtZ5Hx\naunGjitGUnkRVxPWgnlP3rgmdNTyiBndi/JXg4X66b6QPOv27RDhWGk3SZ1ycTvS\nFFaFU/yasdyH+RKPpPxYLWgQwbFkzYFJ0vftCYi3o8zTWy/MLfCNs703Bq5WoBs=\n=ADSV\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b37ae4e4c011e52ae2e483ced4f0b5b69916f9c\nparent 0098d0c514208122ca63e652b5614da01fe210f1\nparent 18d69c8ebe7b313d574014e6585680f78bd2e157\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565749128 +0200\ncommitter GitHub <noreply@github.com> 1565749128 +0200\n\nRollup merge of #63499 - nikomatsakis:issuee-63388-async-fn-elision-self-mut-self, r=cramertj\n\nhandle elision in async fn correctly\n\nWe now always make fresh lifetimne parameters for all elided\nlifetimes, whether they are in the inputs or outputs. But then\nwe generate `'_` in the case of elided lifetimes from the outputs.\n\nExample:\n\n```rust\nasync fn foo<'a>(x: &'a u32) -> &u32 { .. }\n```\n\nbecomes\n\n```rust\ntype Foo<'a, 'b> = impl Future<Output = &'b u32>;\nfn foo<'a>(x: &'a u32) -> Foo<'a, '_>\n```\n\nFixes #63388\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4134241bcf79a77c724158cc388a746499c5fa06", "html_url": "https://github.com/rust-lang/rust/commit/4134241bcf79a77c724158cc388a746499c5fa06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4134241bcf79a77c724158cc388a746499c5fa06/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0098d0c514208122ca63e652b5614da01fe210f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0098d0c514208122ca63e652b5614da01fe210f1", "html_url": "https://github.com/rust-lang/rust/commit/0098d0c514208122ca63e652b5614da01fe210f1"}, {"sha": "18d69c8ebe7b313d574014e6585680f78bd2e157", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d69c8ebe7b313d574014e6585680f78bd2e157", "html_url": "https://github.com/rust-lang/rust/commit/18d69c8ebe7b313d574014e6585680f78bd2e157"}], "stats": {"total": 2891, "additions": 983, "deletions": 1908}, "files": [{"sha": "803a2ebbb012dceb52cd9a26326aaf2a638060c4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 102, "deletions": 125, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -337,49 +337,6 @@ enum AnonymousLifetimeMode {\n \n     /// Pass responsibility to `resolve_lifetime` code for all cases.\n     PassThrough,\n-\n-    /// Used in the return types of `async fn` where there exists\n-    /// exactly one argument-position elided lifetime.\n-    ///\n-    /// In `async fn`, we lower the arguments types using the `CreateParameter`\n-    /// mode, meaning that non-`dyn` elided lifetimes are assigned a fresh name.\n-    /// If any corresponding elided lifetimes appear in the output, we need to\n-    /// replace them with references to the fresh name assigned to the corresponding\n-    /// elided lifetime in the arguments.\n-    ///\n-    /// For **Modern cases**, replace the anonymous parameter with a\n-    /// reference to a specific freshly-named lifetime that was\n-    /// introduced in argument\n-    ///\n-    /// For **Dyn Bound** cases, pass responsibility to\n-    /// `resole_lifetime` code.\n-    Replace(LtReplacement),\n-}\n-\n-/// The type of elided lifetime replacement to perform on `async fn` return types.\n-#[derive(Copy, Clone)]\n-enum LtReplacement {\n-    /// Fresh name introduced by the single non-dyn elided lifetime\n-    /// in the arguments of the async fn.\n-    Some(ParamName),\n-\n-    /// There is no single non-dyn elided lifetime because no lifetimes\n-    /// appeared in the arguments.\n-    NoLifetimes,\n-\n-    /// There is no single non-dyn elided lifetime because multiple\n-    /// lifetimes appeared in the arguments.\n-    MultipleLifetimes,\n-}\n-\n-/// Calculates the `LtReplacement` to use for elided lifetimes in the return\n-/// type based on the fresh elided lifetimes introduced in argument position.\n-fn get_elided_lt_replacement(arg_position_lifetimes: &[(Span, ParamName)]) -> LtReplacement {\n-    match arg_position_lifetimes {\n-        [] => LtReplacement::NoLifetimes,\n-        [(_span, param)] => LtReplacement::Some(*param),\n-        _ => LtReplacement::MultipleLifetimes,\n-    }\n }\n \n struct ImplTraitTypeIdVisitor<'a> { ids: &'a mut SmallVec<[NodeId; 1]> }\n@@ -1953,8 +1910,7 @@ impl<'a> LoweringContext<'a> {\n                         err.emit();\n                     }\n                     AnonymousLifetimeMode::PassThrough |\n-                    AnonymousLifetimeMode::ReportError |\n-                    AnonymousLifetimeMode::Replace(_) => {\n+                    AnonymousLifetimeMode::ReportError => {\n                         self.sess.buffer_lint_with_diagnostic(\n                             ELIDED_LIFETIMES_IN_PATHS,\n                             CRATE_NODE_ID,\n@@ -2141,7 +2097,6 @@ impl<'a> LoweringContext<'a> {\n \n         // Remember how many lifetimes were already around so that we can\n         // only look at the lifetime parameters introduced by the arguments.\n-        let lifetime_count_before_args = self.lifetimes_to_define.len();\n         let inputs = self.with_anonymous_lifetime_mode(lt_mode, |this| {\n             decl.inputs\n                 .iter()\n@@ -2156,16 +2111,10 @@ impl<'a> LoweringContext<'a> {\n         });\n \n         let output = if let Some(ret_id) = make_ret_async {\n-            // Calculate the `LtReplacement` to use for any return-position elided\n-            // lifetimes based on the elided lifetime parameters introduced in the args.\n-            let lt_replacement = get_elided_lt_replacement(\n-                &self.lifetimes_to_define[lifetime_count_before_args..]\n-            );\n             self.lower_async_fn_ret_ty(\n                 &decl.output,\n                 in_band_ty_params.expect(\"`make_ret_async` but no `fn_def_id`\").0,\n                 ret_id,\n-                lt_replacement,\n             )\n         } else {\n             match decl.output {\n@@ -2230,7 +2179,6 @@ impl<'a> LoweringContext<'a> {\n         output: &FunctionRetTy,\n         fn_def_id: DefId,\n         opaque_ty_node_id: NodeId,\n-        elided_lt_replacement: LtReplacement,\n     ) -> hir::FunctionRetTy {\n         let span = output.span();\n \n@@ -2248,9 +2196,65 @@ impl<'a> LoweringContext<'a> {\n \n         self.allocate_hir_id_counter(opaque_ty_node_id);\n \n+        // When we create the opaque type for this async fn, it is going to have\n+        // to capture all the lifetimes involved in the signature (including in the\n+        // return type). This is done by introducing lifetime parameters for:\n+        //\n+        // - all the explicitly declared lifetimes from the impl and function itself;\n+        // - all the elided lifetimes in the fn arguments;\n+        // - all the elided lifetimes in the return type.\n+        //\n+        // So for example in this snippet:\n+        //\n+        // ```rust\n+        // impl<'a> Foo<'a> {\n+        //   async fn bar<'b>(&self, x: &'b Vec<f64>, y: &str) -> &u32 {\n+        //   //               ^ '0                       ^ '1     ^ '2\n+        //   // elided lifetimes used below\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // we would create an opaque type like:\n+        //\n+        // ```\n+        // type Bar<'a, 'b, '0, '1, '2> = impl Future<Output = &'2 u32>;\n+        // ```\n+        //\n+        // and we would then desugar `bar` to the equivalent of:\n+        //\n+        // ```rust\n+        // impl<'a> Foo<'a> {\n+        //   fn bar<'b, '0, '1>(&'0 self, x: &'b Vec<f64>, y: &'1 str) -> Bar<'a, 'b, '0, '1, '_>\n+        // }\n+        // ```\n+        //\n+        // Note that the final parameter to `Bar` is `'_`, not `'2` --\n+        // this is because the elided lifetimes from the return type\n+        // should be figured out using the ordinary elision rules, and\n+        // this desugaring achieves that.\n+        //\n+        // The variable `input_lifetimes_count` tracks the number of\n+        // lifetime parameters to the opaque type *not counting* those\n+        // lifetimes elided in the return type. This includes those\n+        // that are explicitly declared (`in_scope_lifetimes`) and\n+        // those elided lifetimes we found in the arguments (current\n+        // content of `lifetimes_to_define`). Next, we will process\n+        // the return type, which will cause `lifetimes_to_define` to\n+        // grow.\n+        let input_lifetimes_count = self.in_scope_lifetimes.len() + self.lifetimes_to_define.len();\n+\n         let (opaque_ty_id, lifetime_params) = self.with_hir_id_owner(opaque_ty_node_id, |this| {\n+            // We have to be careful to get elision right here. The\n+            // idea is that we create a lifetime parameter for each\n+            // lifetime in the return type.  So, given a return type\n+            // like `async fn foo(..) -> &[&u32]`, we lower to `impl\n+            // Future<Output = &'1 [ &'2 u32 ]>`.\n+            //\n+            // Then, we will create `fn foo(..) -> Foo<'_, '_>`, and\n+            // hence the elision takes place at the fn site.\n             let future_bound = this.with_anonymous_lifetime_mode(\n-                AnonymousLifetimeMode::Replace(elided_lt_replacement),\n+                AnonymousLifetimeMode::CreateParameter,\n                 |this| this.lower_async_fn_output_type_to_future_bound(\n                     output,\n                     fn_def_id,\n@@ -2304,19 +2308,52 @@ impl<'a> LoweringContext<'a> {\n             (opaque_ty_id, lifetime_params)\n         });\n \n-        let generic_args =\n-            lifetime_params\n-                .iter().cloned()\n-                .map(|(span, hir_name)| {\n-                    GenericArg::Lifetime(hir::Lifetime {\n-                        hir_id: self.next_id(),\n-                        span,\n-                        name: hir::LifetimeName::Param(hir_name),\n-                    })\n+        // As documented above on the variable\n+        // `input_lifetimes_count`, we need to create the lifetime\n+        // arguments to our opaque type. Continuing with our example,\n+        // we're creating the type arguments for the return type:\n+        //\n+        // ```\n+        // Bar<'a, 'b, '0, '1, '_>\n+        // ```\n+        //\n+        // For the \"input\" lifetime parameters, we wish to create\n+        // references to the parameters themselves, including the\n+        // \"implicit\" ones created from parameter types (`'a`, `'b`,\n+        // '`0`, `'1`).\n+        //\n+        // For the \"output\" lifetime parameters, we just want to\n+        // generate `'_`.\n+        let mut generic_args: Vec<_> =\n+            lifetime_params[..input_lifetimes_count]\n+            .iter()\n+            .map(|&(span, hir_name)| {\n+                // Input lifetime like `'a` or `'1`:\n+                GenericArg::Lifetime(hir::Lifetime {\n+                    hir_id: self.next_id(),\n+                    span,\n+                    name: hir::LifetimeName::Param(hir_name),\n                 })\n-                .collect();\n+            })\n+            .collect();\n+        generic_args.extend(\n+            lifetime_params[input_lifetimes_count..]\n+            .iter()\n+            .map(|&(span, _)| {\n+                // Output lifetime like `'_`.\n+                GenericArg::Lifetime(hir::Lifetime {\n+                    hir_id: self.next_id(),\n+                    span,\n+                    name: hir::LifetimeName::Implicit,\n+                })\n+            })\n+        );\n \n-        let opaque_ty_ref = hir::TyKind::Def(hir::ItemId { id: opaque_ty_id }, generic_args);\n+        // Create the `Foo<...>` refernece itself. Note that the `type\n+        // Foo = impl Trait` is, internally, created as a child of the\n+        // async fn, so the *type parameters* are inherited.  It's\n+        // only the lifetime parameters that we must supply.\n+        let opaque_ty_ref = hir::TyKind::Def(hir::ItemId { id: opaque_ty_id }, generic_args.into());\n \n         hir::FunctionRetTy::Return(P(hir::Ty {\n             node: opaque_ty_ref,\n@@ -2412,11 +2449,6 @@ impl<'a> LoweringContext<'a> {\n                     }\n \n                     AnonymousLifetimeMode::ReportError => self.new_error_lifetime(Some(l.id), span),\n-\n-                    AnonymousLifetimeMode::Replace(replacement) => {\n-                        let hir_id = self.lower_node_id(l.id);\n-                        self.replace_elided_lifetime(hir_id, span, replacement)\n-                    }\n                 },\n             ident => {\n                 self.maybe_collect_in_band_lifetime(ident);\n@@ -2439,39 +2471,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    /// Replace a return-position elided lifetime with the elided lifetime\n-    /// from the arguments.\n-    fn replace_elided_lifetime(\n-        &mut self,\n-        hir_id: hir::HirId,\n-        span: Span,\n-        replacement: LtReplacement,\n-    ) -> hir::Lifetime {\n-        let multiple_or_none = match replacement {\n-            LtReplacement::Some(name) => {\n-                return hir::Lifetime {\n-                    hir_id,\n-                    span,\n-                    name: hir::LifetimeName::Param(name),\n-                };\n-            }\n-            LtReplacement::MultipleLifetimes => \"multiple\",\n-            LtReplacement::NoLifetimes => \"none\",\n-        };\n-\n-        let mut err = crate::middle::resolve_lifetime::report_missing_lifetime_specifiers(\n-            self.sess,\n-            span,\n-            1,\n-        );\n-        err.note(&format!(\n-            \"return-position elided lifetimes require exactly one \\\n-             input-position elided lifetime, found {}.\", multiple_or_none));\n-        err.emit();\n-\n-        hir::Lifetime { hir_id, span, name: hir::LifetimeName::Error }\n-    }\n-\n     fn lower_generic_params(\n         &mut self,\n         params: &[GenericParam],\n@@ -3174,10 +3173,6 @@ impl<'a> LoweringContext<'a> {\n             AnonymousLifetimeMode::ReportError => self.new_error_lifetime(None, span),\n \n             AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n-\n-            AnonymousLifetimeMode::Replace(replacement) => {\n-                self.new_replacement_lifetime(replacement, span)\n-            }\n         }\n     }\n \n@@ -3231,10 +3226,6 @@ impl<'a> LoweringContext<'a> {\n             // This is the normal case.\n             AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n \n-            AnonymousLifetimeMode::Replace(replacement) => {\n-                self.new_replacement_lifetime(replacement, span)\n-            }\n-\n             AnonymousLifetimeMode::ReportError => self.new_error_lifetime(None, span),\n         }\n     }\n@@ -3266,25 +3257,11 @@ impl<'a> LoweringContext<'a> {\n \n             // This is the normal case.\n             AnonymousLifetimeMode::PassThrough => {}\n-\n-            // We don't need to do any replacement here as this lifetime\n-            // doesn't refer to an elided lifetime elsewhere in the function\n-            // signature.\n-            AnonymousLifetimeMode::Replace(_) => {}\n         }\n \n         self.new_implicit_lifetime(span)\n     }\n \n-    fn new_replacement_lifetime(\n-        &mut self,\n-        replacement: LtReplacement,\n-        span: Span,\n-    ) -> hir::Lifetime {\n-        let hir_id = self.next_id();\n-        self.replace_elided_lifetime(hir_id, span, replacement)\n-    }\n-\n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n         hir::Lifetime {\n             hir_id: self.next_id(),"}, {"sha": "fab5892dae18387c816b58bbd7fc9758e28736f2", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,24 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-63388-1.rs:14:10\n+   |\n+LL |     ) -> &dyn Foo\n+   |          ^^^^^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#27r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-63388-1.rs:15:5\n+   |\n+LL |       async fn do_sth<'a>(\n+   |                       -- lifetime `'a` defined here\n+LL |           &'a self, foo: &dyn Foo\n+   |                          - lifetime `'_` defined here\n+LL |       ) -> &dyn Foo\n+LL | /     {\n+LL | |         foo\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'_`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "80003b0d701f592fbb9542991456862e5853c6fd", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Xyz {\n+    a: u64,\n+}\n+\n+trait Foo {}\n+\n+impl Xyz {\n+    async fn do_sth<'a>(\n+        &'a self, foo: &dyn Foo\n+    ) -> &dyn Foo //~ ERROR lifetime mismatch\n+    {\n+        foo\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5302adce5a01e3cbe2413ba1cdebba9d9836d306", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,12 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-63388-1.rs:14:10\n+   |\n+LL |         &'a self, foo: &dyn Foo\n+   |         -------- this parameter and the return type are declared with different lifetimes...\n+LL |     ) -> &dyn Foo\n+   |          ^^^^^^^^\n+   |          |\n+   |          ...but data from `foo` is returned here\n+\n+error: aborting due to previous error\n+"}, {"sha": "b91cdc1b770fba29e31243c53aef0bb2bac1719c", "filename": "src/test/ui/async-await/issues/issue-63388-2.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,11 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-63388-2.rs:14:10\n+   |\n+LL |     ) -> &dyn Foo\n+   |          ^ help: consider using the named lifetime: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ca9bbef0d503d3d239ceefed134113aed5f62d83", "filename": "src/test/ui/async-await/issues/issue-63388-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Xyz {\n+    a: u64,\n+}\n+\n+trait Foo {}\n+\n+impl Xyz {\n+    async fn do_sth<'a>(\n+        foo: &dyn Foo, bar: &'a dyn Foo //~ ERROR cannot infer\n+    ) -> &dyn Foo //~ ERROR missing lifetime specifier\n+    {\n+        foo\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1810138dc80e08fac10b942043146f7636b9df6c", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,29 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-63388-2.rs:14:10\n+   |\n+LL |     ) -> &dyn Foo\n+   |          ^ help: consider using the named lifetime: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/issue-63388-2.rs:13:9\n+   |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |         ^^^ ...but this borrow...\n+LL |     ) -> &dyn Foo\n+   |          -------- this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 13:14\n+  --> $DIR/issue-63388-2.rs:13:14\n+   |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 13:14\n+   |\n+LL |     ) -> &dyn Foo + '_\n+   |          ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "05f23f95965b993e0b1a14be4fdd3d4864b9d38c", "filename": "src/test/ui/async-await/issues/issue-63388-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+\n+struct Xyz {\n+    a: u64,\n+}\n+\n+trait Foo {}\n+\n+impl Xyz {\n+    async fn do_sth(\n+        &self, foo: &dyn Foo\n+    ) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0939242d7fc7a27aedec3308bf73297c2b9cdd6e", "filename": "src/test/ui/async-await/issues/issue-63388-4.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct A;\n+\n+impl A {\n+    async fn foo(&self, f: &u32) -> &A { self }\n+}\n+\n+fn main() { }"}, {"sha": "94646c2cfe0c3468a66e6654aefef0583153cc0d", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,27 +1,46 @@\n-error[E0106]: missing lifetime specifier\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                             ^\n+   |                                             ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:60\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n    |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                                            ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                          -                       ^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          |\n+   |                          lifetime `'_` defined here\n+   |                          lifetime `'_` defined here\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:67\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:73\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                                                   ^\n+   |                          -                                              ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          |\n+   |                          lifetime `'_` defined here\n+   |                          lifetime `'_` defined here\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+   |\n+LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                                                          ^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                  --              -                           ^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`\n+   |                  |               |\n+   |                  |               lifetime `'_` defined here\n+   |                  lifetime `'a` defined here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "53ab75ee16bd0d1803f322ec7a55f6f5e63718c6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -8,16 +8,10 @@ struct Foo;\n \n impl Foo {\n     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n-    // FIXME: should be E0623?\n+    //~^ ERROR lifetime mismatch\n \n     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n-    //~| ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n-    // FIXME: should be E0623?\n+    //~^ ERROR lifetime mismatch\n }\n \n type Alias<T> = Pin<T>;"}, {"sha": "74fc4741349492fb92bbfa5644e7574520eceb9a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 13, "deletions": 72, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,88 +1,29 @@\n-error[E0106]: missing lifetime specifier\n+error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:60\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                                            ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   |                          ----               ^^^^\n+   |                          |                  |\n+   |                          |                  ...but data from `f` is returned here\n+   |                          this parameter and the return type are declared with different lifetimes...\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:67\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                                                   ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:33\n-   |\n-LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                 |\n-   |                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:26\n-   |\n-LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n-   |\n-LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo + '_ { f }\n-   |                                             ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:16\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                ^^^^ ...but this borrow...             ----------------- this return type evaluates to the `'static` lifetime...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:34\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                  ^                    ----------------- this return type evaluates to the `'static` lifetime...\n-   |                                  |\n-   |                                  ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:55\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |                          -----                        ^^^^^^^^^^^^^^^^^\n+   |                          |                            |\n+   |                          |                            ...but data from `f` is returned here\n+   |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:25:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                  -----                   ^^^\n    |                                  |                       |\n    |                                  |                       ...but data from `arg` is returned here\n    |                                  this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "3bd7a6c00b2ad97ef13b7d40d7f33527ce6281eb", "filename": "src/test/ui/self/elision/README.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -61,15 +61,15 @@ Legends:\n | `struct-async.rs`| \u2713 | \u2713 | N/A |\n | `alias-async.rs`| \u2713 | \u2713 | N/A |\n | `assoc-async.rs`| \u2713 | \u2713 | N/A |\n-| `ref-self-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n-| `ref-mut-self-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n-| `ref-struct-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n-| `ref-mut-struct-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n-| `ref-alias-async.rs` | X | X | \u2713 \u27f6 \u03b2 + \u03b3 |\n-| `ref-assoc-async.rs` | X | X | \u2713 \u27f6 \u03b2 + \u03b3 |\n-| `ref-mut-alias-async.rs` | X | X | \u2713 \u27f6 \u03b2 + \u03b3 |\n+| `ref-self-async.rs` | X | \u2713 | N/A |\n+| `ref-mut-self-async.rs` | X | \u2713 | N/A |\n+| `ref-struct-async.rs` | X | \u2713 | N/A |\n+| `ref-mut-struct-async.rs` | X | \u2713 | N/A |\n+| `ref-alias-async.rs` | \u2713 | \u2713 | N/A |\n+| `ref-assoc-async.rs` | \u2713 | \u2713 | N/A |\n+| `ref-mut-alias-async.rs` | \u2713 | \u2713 | N/A |\n | `lt-self-async.rs` | \u2713 | \u2713 | N/A\n | `lt-struct-async.rs` | \u2713 | \u2713 | N/A\n | `lt-alias-async.rs` | \u2713 | \u2713 | N/A\n | `lt-assoc-async.rs` | \u2713 | \u2713 | N/A\n-| `lt-ref-self-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3\n+| `lt-ref-self-async.rs` | X | \u2713 | N/A |"}, {"sha": "779b21e21a097d36cec271898f059dec8591d142", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 97, "deletions": 25, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,51 +1,123 @@\n-error[E0106]: missing lifetime specifier\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:15:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                          ^\n+   |                                          ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:23:48\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:15:47\n+   |\n+LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n+   |  _______________________-_______________________^\n+   | |                       |\n+   | |                       lifetime `'_` defined here\n+   | |                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:21:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                                ^\n+   |                                                ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:29:57\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:21:53\n+   |\n+LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |  _____________________________-_______________________^\n+   | |                             |\n+   | |                             lifetime `'_` defined here\n+   | |                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:25:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n+   |                                                         ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:25:62\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:35:57\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:29:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n+   |                                                         ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:29:62\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:41:66\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:33:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n+   |                                                                  ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:47:62\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:33:71\n+   |\n+LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:37:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                              ^\n+   |                                                              ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:37:67\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |  _________________________________________-_________________________^\n+   | |                                         |\n+   | |                                         lifetime `'_` defined here\n+   | |                                         lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "79a4771978a8e511b389d62e84772ee5952449b8", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -13,41 +13,29 @@ impl<'a> Struct<'a> {\n     // Test using `&self` sugar:\n \n     async fn ref_self(&self, f: &u32) -> &u32 {\n-        //~^ ERROR cannot infer an appropriate lifetime\n-        //~| ERROR missing lifetime specifier\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        //~^ ERROR cannot infer an appropriate lifetime\n-        //~| ERROR missing lifetime specifier\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        //~^ ERROR cannot infer an appropriate lifetime\n-        //~| ERROR missing lifetime specifier\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        //~^ ERROR cannot infer an appropriate lifetime\n-        //~| ERROR missing lifetime specifier\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR cannot infer an appropriate lifetime\n-        //~| ERROR missing lifetime specifier\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR cannot infer an appropriate lifetime\n-        //~| ERROR missing lifetime specifier\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "0a459257fa7087edf02d3e95695635af9c3ae63b", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 36, "deletions": 139, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,159 +1,56 @@\n-error[E0106]: missing lifetime specifier\n+error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:15:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                          ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:23:48\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                                ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:29:57\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:35:57\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:41:66\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lt-ref-self-async.rs:47:62\n-   |\n-LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                              ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/lt-ref-self-async.rs:15:30\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                              ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                              |\n-   |                              ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:23\n-  --> $DIR/lt-ref-self-async.rs:15:23\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:23\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 + '_ {\n-   |                                          ^^^^^^^^^\n+   |                       -----              ^^^^\n+   |                       |                  |\n+   |                       |                  ...but data from `f` is returned here\n+   |                       this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/lt-ref-self-async.rs:23:36\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                    ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                    |\n-   |                                    ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 23:29\n-  --> $DIR/lt-ref-self-async.rs:23:29\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:21:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:29\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 + '_ {\n-   |                                                ^^^^^^^^^\n+   |                             -----              ^^^^\n+   |                             |                  |\n+   |                             |                  ...but data from `f` is returned here\n+   |                             this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/lt-ref-self-async.rs:29:45\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                             |\n-   |                                             ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 29:37\n-  --> $DIR/lt-ref-self-async.rs:29:37\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:25:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:37\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 + '_ {\n-   |                                                         ^^^^^^^^^\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/lt-ref-self-async.rs:35:45\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                             |\n-   |                                             ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 35:37\n-  --> $DIR/lt-ref-self-async.rs:35:37\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:29:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:37\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 + '_ {\n-   |                                                         ^^^^^^^^^\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/lt-ref-self-async.rs:41:54\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                      |\n-   |                                                      ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 41:45\n-  --> $DIR/lt-ref-self-async.rs:41:45\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:33:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:45\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                                  ^^^^^^^^^\n+   |                                             -----                ^^^^\n+   |                                             |                    |\n+   |                                             |                    ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/lt-ref-self-async.rs:47:50\n-   |\n-LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                  ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                  |\n-   |                                                  ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 47:41\n-  --> $DIR/lt-ref-self-async.rs:47:41\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:37:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                         ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 47:41\n-   |\n-LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                              ^^^^^^^^^\n+   |                                         -----                ^^^^\n+   |                                         |                    |\n+   |                                         |                    ...but data from `f` is returned here\n+   |                                         this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "00e16cd7f99fbdb40b0d15b9924401e438479c8d", "filename": "src/test/ui/self/elision/multiple-ref-self-async.nll.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,43 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:24:74\n-   |\n-LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n-   |                                                                          ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:30:84\n-   |\n-LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:36:84\n-   |\n-LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:42:93\n-   |\n-LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:48:93\n-   |\n-LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "eb8c25277e1452fbe19c7c241c619a906c03e3d0", "filename": "src/test/ui/self/elision/multiple-ref-self-async.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n // edition:2018\n \n #![feature(async_await)]\n@@ -22,32 +23,22 @@ impl Struct {\n     // Test using multiple `&Self`:\n \n     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n }"}, {"sha": "2a89ed3feba62fd17c274d82657897acbaa11e60", "filename": "src/test/ui/self/elision/multiple-ref-self-async.stderr", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,133 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:24:74\n-   |\n-LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n-   |                                                                          ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:30:84\n-   |\n-LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:36:84\n-   |\n-LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:42:93\n-   |\n-LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/multiple-ref-self-async.rs:48:93\n-   |\n-LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/multiple-ref-self-async.rs:24:63\n-   |\n-LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n-   |                                                               ^          --- this return type evaluates to the `'static` lifetime...\n-   |                                                               |\n-   |                                                               ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 24:48\n-  --> $DIR/multiple-ref-self-async.rs:24:48\n-   |\n-LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n-   |                                                ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 24:48\n-   |\n-LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 + '_ {\n-   |                                                                          ^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/multiple-ref-self-async.rs:30:72\n-   |\n-LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                        |\n-   |                                                                        ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 30:56\n-  --> $DIR/multiple-ref-self-async.rs:30:56\n-   |\n-LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                        ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 30:56\n-   |\n-LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                                                    ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/multiple-ref-self-async.rs:36:72\n-   |\n-LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                        |\n-   |                                                                        ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 36:56\n-  --> $DIR/multiple-ref-self-async.rs:36:56\n-   |\n-LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n-   |                                                        ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 36:56\n-   |\n-LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                                                    ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/multiple-ref-self-async.rs:42:81\n-   |\n-LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                                 |\n-   |                                                                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 42:64\n-  --> $DIR/multiple-ref-self-async.rs:42:64\n-   |\n-LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 42:64\n-   |\n-LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 + '_ {\n-   |                                                                                             ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/multiple-ref-self-async.rs:48:81\n-   |\n-LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                                 |\n-   |                                                                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 48:64\n-  --> $DIR/multiple-ref-self-async.rs:48:64\n-   |\n-LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n-   |                                                                ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 48:64\n-   |\n-LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 + '_ {\n-   |                                                                                             ^^^^^^^^^\n-\n-error: aborting due to 10 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "7e47b3794035f49bfbac43a02efd581361905f54", "filename": "src/test/ui/self/elision/ref-alias-async.nll.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,43 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:20:50\n-   |\n-LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n-   |                                                  ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:26:59\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n-   |                                                           ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:32:59\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n-   |                                                           ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:38:68\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n-   |                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:44:68\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n-   |                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "acc4b2153ef66f9fb79dc8e564fd64377f492c9e", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+// check-pass\n \n #![feature(async_await)]\n \n@@ -18,32 +19,22 @@ impl Struct {\n     // feels like a bug.\n \n     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n }"}, {"sha": "a3250562c6ffffc9edfd8d29f6792af7529522ab", "filename": "src/test/ui/self/elision/ref-alias-async.stderr", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,133 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:20:50\n-   |\n-LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n-   |                                                  ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:26:59\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n-   |                                                           ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:32:59\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n-   |                                                           ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:38:68\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n-   |                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-alias-async.rs:44:68\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n-   |                                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-alias-async.rs:20:38\n-   |\n-LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n-   |                                      ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                      |\n-   |                                      ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 20:30\n-  --> $DIR/ref-alias-async.rs:20:30\n-   |\n-LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n-   |                              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 20:30\n-   |\n-LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 + '_ {\n-   |                                                  ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-alias-async.rs:26:47\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n-   |                                               ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                               |\n-   |                                               ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 26:38\n-  --> $DIR/ref-alias-async.rs:26:38\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n-   |                                      ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 26:38\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 + '_ {\n-   |                                                           ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-alias-async.rs:32:47\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n-   |                                               ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                               |\n-   |                                               ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 32:38\n-  --> $DIR/ref-alias-async.rs:32:38\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n-   |                                      ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 32:38\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 + '_ {\n-   |                                                           ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-alias-async.rs:38:56\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n-   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                        |\n-   |                                                        ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 38:46\n-  --> $DIR/ref-alias-async.rs:38:46\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n-   |                                              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 38:46\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 + '_ {\n-   |                                                                    ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-alias-async.rs:44:56\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n-   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                        |\n-   |                                                        ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 44:46\n-  --> $DIR/ref-alias-async.rs:44:46\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n-   |                                              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 44:46\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 + '_ {\n-   |                                                                    ^^^^^^^^^\n-\n-error: aborting due to 10 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "25c8bf652d84b35867fd1daa457920f5918b07fd", "filename": "src/test/ui/self/elision/ref-assoc-async.nll.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,43 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:21:77\n-   |\n-LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n-   |                                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:27:86\n-   |\n-LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:33:86\n-   |\n-LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:39:95\n-   |\n-LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:45:95\n-   |\n-LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "a6b6cbd6da391967c4318b9f1f841c1d28f1e635", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+// check-pass\n \n #![feature(async_await)]\n \n@@ -19,32 +20,22 @@ impl Trait for Struct {\n \n impl Struct {\n     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n }"}, {"sha": "c2e893a3f58bff6e1a2338f1d2c4e17f54701276", "filename": "src/test/ui/self/elision/ref-assoc-async.stderr", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,133 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:21:77\n-   |\n-LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n-   |                                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:27:86\n-   |\n-LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:33:86\n-   |\n-LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:39:95\n-   |\n-LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-assoc-async.rs:45:95\n-   |\n-LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-assoc-async.rs:21:65\n-   |\n-LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n-   |                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                 |\n-   |                                                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 21:34\n-  --> $DIR/ref-assoc-async.rs:21:34\n-   |\n-LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n-   |                                  ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:34\n-   |\n-LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 + '_ {\n-   |                                                                             ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-assoc-async.rs:27:74\n-   |\n-LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                          |\n-   |                                                                          ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 27:42\n-  --> $DIR/ref-assoc-async.rs:27:42\n-   |\n-LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:42\n-   |\n-LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 + '_ {\n-   |                                                                                      ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-assoc-async.rs:33:74\n-   |\n-LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                          |\n-   |                                                                          ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 33:42\n-  --> $DIR/ref-assoc-async.rs:33:42\n-   |\n-LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n-   |                                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:42\n-   |\n-LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 + '_ {\n-   |                                                                                      ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-assoc-async.rs:39:83\n-   |\n-LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                                   |\n-   |                                                                                   ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 39:50\n-  --> $DIR/ref-assoc-async.rs:39:50\n-   |\n-LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                  ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:50\n-   |\n-LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 + '_ {\n-   |                                                                                               ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-assoc-async.rs:45:83\n-   |\n-LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                                                   |\n-   |                                                                                   ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 45:50\n-  --> $DIR/ref-assoc-async.rs:45:50\n-   |\n-LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n-   |                                                  ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 45:50\n-   |\n-LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 + '_ {\n-   |                                                                                               ^^^^^^^^^\n-\n-error: aborting due to 10 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "1026a0b492f34b2b76f1054086c4440fb4946b6f", "filename": "src/test/ui/self/elision/ref-mut-alias-async.nll.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,43 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:17:54\n-   |\n-LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n-   |                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:23:63\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n-   |                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:29:63\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n-   |                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:35:72\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                                                        ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:41:72\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                                                        ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "873e92bc6d33e76cace2335ee3b79f71b3d6e331", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n+// check-pass\n \n #![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n@@ -15,32 +15,22 @@ impl Struct {\n     // Test using an alias for `Struct`:\n \n     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n \n     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n         f\n     }\n }"}, {"sha": "678bf7451860682918d5215e70af352a439748ad", "filename": "src/test/ui/self/elision/ref-mut-alias-async.stderr", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,133 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:17:54\n-   |\n-LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n-   |                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:23:63\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n-   |                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:29:63\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n-   |                                                               ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:35:72\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                                                        ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-alias-async.rs:41:72\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                                                        ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-alias-async.rs:17:42\n-   |\n-LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n-   |                                          ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                          |\n-   |                                          ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 17:30\n-  --> $DIR/ref-mut-alias-async.rs:17:30\n-   |\n-LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n-   |                              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 17:30\n-   |\n-LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 + '_ {\n-   |                                                      ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-alias-async.rs:23:51\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n-   |                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                   |\n-   |                                                   ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 23:38\n-  --> $DIR/ref-mut-alias-async.rs:23:38\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n-   |                                      ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:38\n-   |\n-LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 + '_ {\n-   |                                                               ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-alias-async.rs:29:51\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n-   |                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                   |\n-   |                                                   ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 29:38\n-  --> $DIR/ref-mut-alias-async.rs:29:38\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n-   |                                      ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:38\n-   |\n-LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 + '_ {\n-   |                                                               ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-alias-async.rs:35:60\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                                            ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                            |\n-   |                                                            ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 35:46\n-  --> $DIR/ref-mut-alias-async.rs:35:46\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:46\n-   |\n-LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 + '_ {\n-   |                                                                        ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-alias-async.rs:41:60\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                                            ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                            |\n-   |                                                            ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 41:46\n-  --> $DIR/ref-mut-alias-async.rs:41:46\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n-   |                                              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:46\n-   |\n-LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 + '_ {\n-   |                                                                        ^^^^^^^^^\n-\n-error: aborting due to 10 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "cfe91dde37354c09f337fabbdc7a32a517566814", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 97, "deletions": 25, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,51 +1,123 @@\n-error[E0106]: missing lifetime specifier\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:15:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                                              ^\n+   |                                              ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:23:52\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:15:51\n+   |\n+LL |       async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |  _______________________-___________________________^\n+   | |                       |\n+   | |                       lifetime `'_` defined here\n+   | |                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:21:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                                                    ^\n+   |                                                    ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:29:61\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:21:57\n+   |\n+LL |       async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |  _____________________________-___________________________^\n+   | |                             |\n+   | |                             lifetime `'_` defined here\n+   | |                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:25:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                                             ^\n+   |                                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:25:66\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-____________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:35:61\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:29:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                                             ^\n+   |                                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:29:66\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-____________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:41:70\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:33:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                                      ^\n+   |                                                                      ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:47:70\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:33:75\n+   |\n+LL |       async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_____________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:37:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                                      ^\n+   |                                                                      ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:37:75\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_____________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "a6bd9d693163e29b3470b9045c64089480814a2a", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -12,42 +12,30 @@ struct Struct { }\n impl Struct {\n     // Test using `&mut self` sugar:\n \n-    async fn ref_self(&mut self, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n+    async fn ref_self(&mut self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n         f\n     }\n \n     // Test using `&mut Self` explicitly:\n \n     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "805833f94720dfdc5fb21838749a1179e1b829e3", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 36, "deletions": 139, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,159 +1,56 @@\n-error[E0106]: missing lifetime specifier\n+error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:15:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                                              ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:23:52\n-   |\n-LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:29:61\n-   |\n-LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:35:61\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:41:70\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-self-async.rs:47:70\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-self-async.rs:15:34\n-   |\n-LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                                  ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                  |\n-   |                                  ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:23\n-  --> $DIR/ref-mut-self-async.rs:15:23\n-   |\n-LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                       ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:23\n-   |\n-LL |     async fn ref_self(&mut self, f: &u32) -> &u32 + '_ {\n-   |                                              ^^^^^^^^^\n+   |                       ---------              ^^^^\n+   |                       |                      |\n+   |                       |                      ...but data from `f` is returned here\n+   |                       this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-self-async.rs:23:40\n-   |\n-LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                                        ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                        |\n-   |                                        ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 23:29\n-  --> $DIR/ref-mut-self-async.rs:23:29\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:21:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:29\n-   |\n-LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 + '_ {\n-   |                                                    ^^^^^^^^^\n+   |                             ---------              ^^^^\n+   |                             |                      |\n+   |                             |                      ...but data from `f` is returned here\n+   |                             this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-self-async.rs:29:49\n-   |\n-LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                 |\n-   |                                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 29:37\n-  --> $DIR/ref-mut-self-async.rs:29:37\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:25:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:37\n-   |\n-LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 + '_ {\n-   |                                                             ^^^^^^^^^\n+   |                                     ---------               ^^^^\n+   |                                     |                       |\n+   |                                     |                       ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-self-async.rs:35:49\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                 |\n-   |                                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 35:37\n-  --> $DIR/ref-mut-self-async.rs:35:37\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:29:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:37\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 + '_ {\n-   |                                                             ^^^^^^^^^\n+   |                                     ---------               ^^^^\n+   |                                     |                       |\n+   |                                     |                       ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-self-async.rs:41:58\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                          |\n-   |                                                          ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 41:45\n-  --> $DIR/ref-mut-self-async.rs:41:45\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:33:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:45\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                                      ^^^^^^^^^\n+   |                                             ---------                ^^^^\n+   |                                             |                        |\n+   |                                             |                        ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-self-async.rs:47:58\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                          |\n-   |                                                          ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 47:45\n-  --> $DIR/ref-mut-self-async.rs:47:45\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:37:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 47:45\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                                      ^^^^^^^^^\n+   |                                             ---------                ^^^^\n+   |                                             |                        |\n+   |                                             |                        ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "98fa5e2545186b5268038a2f516addc94fe1e6a4", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 81, "deletions": 21, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,43 +1,103 @@\n-error[E0106]: missing lifetime specifier\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:15:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                                                        ^\n+   |                                                        ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:21:65\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:15:61\n+   |\n+LL |       async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |  _______________________________-_____________________________^\n+   | |                               |\n+   | |                               lifetime `'_` defined here\n+   | |                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:19:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                                 ^\n+   |                                                                 ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:27:65\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:19:70\n+   |\n+LL |       async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-______________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:23:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                                 ^\n+   |                                                                 ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:23:70\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-______________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:33:74\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:27:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                          ^\n+   |                                                                          ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:27:79\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |  _______________________________________________-_______________________________^\n+   | |                                               |\n+   | |                                               lifetime `'_` defined here\n+   | |                                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:39:74\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:31:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                          ^\n+   |                                                                          ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:31:79\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |  _______________________________________________-_______________________________^\n+   | |                                               |\n+   | |                                               lifetime `'_` defined here\n+   | |                                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "7a89ef9596a37da45f1c9a0ccb3c3171c094f974", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -13,33 +13,23 @@ impl Struct {\n     // Test using `&mut Struct` explicitly:\n \n     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "4c983872942c10110fecf5dd034eacece58693b1", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 30, "deletions": 116, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,133 +1,47 @@\n-error[E0106]: missing lifetime specifier\n+error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:15:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                                                        ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:21:65\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                                 ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:27:65\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                                 ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:33:74\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                          ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-mut-struct-async.rs:39:74\n-   |\n-LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                          ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-struct-async.rs:15:44\n-   |\n-LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                                            ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                            |\n-   |                                            ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:31\n-  --> $DIR/ref-mut-struct-async.rs:15:31\n-   |\n-LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                               ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:31\n-   |\n-LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 + '_ {\n-   |                                                        ^^^^^^^^^\n+   |                               -----------              ^^^^\n+   |                               |                        |\n+   |                               |                        ...but data from `f` is returned here\n+   |                               this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-struct-async.rs:21:53\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                     ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                     |\n-   |                                                     ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 21:39\n-  --> $DIR/ref-mut-struct-async.rs:21:39\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:19:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:39\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 + '_ {\n-   |                                                                 ^^^^^^^^^\n+   |                                       -----------               ^^^^\n+   |                                       |                         |\n+   |                                       |                         ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-struct-async.rs:27:53\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                     ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                     |\n-   |                                                     ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 27:39\n-  --> $DIR/ref-mut-struct-async.rs:27:39\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:23:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:39\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 + '_ {\n-   |                                                                 ^^^^^^^^^\n+   |                                       -----------               ^^^^\n+   |                                       |                         |\n+   |                                       |                         ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-struct-async.rs:33:62\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                              ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                              |\n-   |                                                              ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 33:47\n-  --> $DIR/ref-mut-struct-async.rs:33:47\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:27:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:47\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 + '_ {\n-   |                                                                          ^^^^^^^^^\n+   |                                               -----------                ^^^^\n+   |                                               |                          |\n+   |                                               |                          ...but data from `f` is returned here\n+   |                                               this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-mut-struct-async.rs:39:62\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:31:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                              ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                              |\n-   |                                                              ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 39:47\n-  --> $DIR/ref-mut-struct-async.rs:39:47\n-   |\n-LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:47\n-   |\n-LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 + '_ {\n-   |                                                                          ^^^^^^^^^\n+   |                                               -----------                ^^^^\n+   |                                               |                          |\n+   |                                               |                          ...but data from `f` is returned here\n+   |                                               this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "f991f6d9f7fa1181ab9a260ebf0d95a0d68cb069", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 113, "deletions": 29, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,59 +1,143 @@\n-error[E0106]: missing lifetime specifier\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-self-async.rs:24:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                          ^\n+   |                                          ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:32:48\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:24:47\n+   |\n+LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n+   |  _______________________-_______________________^\n+   | |                       |\n+   | |                       lifetime `'_` defined here\n+   | |                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:30:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                                ^\n+   |                                                ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:38:57\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:30:53\n+   |\n+LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |  _____________________________-_______________________^\n+   | |                             |\n+   | |                             lifetime `'_` defined here\n+   | |                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:34:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n+   |                                                         ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:34:62\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:44:57\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:38:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n+   |                                                         ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:50:66\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:38:62\n+   |\n+LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:42:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n+   |                                                                  ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:42:71\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:56:66\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:46:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n+   |                                                                  ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:62:69\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:46:71\n+   |\n+LL |       async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:50:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                                                     ^\n+   |                                                                     ^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:50:73\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |  ____________________________________________-____________________________^\n+   | |                                            |\n+   | |                                            lifetime `'_` defined here\n+   | |                                            lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 14 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "5a5705d7e099b8220f9ad658544154bc6dada828", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -21,48 +21,34 @@ impl<T, P> Deref for Wrap<T, P> {\n impl Struct {\n     // Test using `&self` sugar:\n \n-    async fn ref_self(&self, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n+    async fn ref_self(&self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n         f\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "eb796a07a86d57f45b3f9a6947fe39021e37e3f8", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 42, "deletions": 162, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,185 +1,65 @@\n-error[E0106]: missing lifetime specifier\n+error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:24:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                          ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:32:48\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                                ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:38:57\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:44:57\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:50:66\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:56:66\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-self-async.rs:62:69\n-   |\n-LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                                                     ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-self-async.rs:24:30\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                              ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                              |\n-   |                              ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 24:23\n-  --> $DIR/ref-self-async.rs:24:23\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 24:23\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 + '_ {\n-   |                                          ^^^^^^^^^\n+   |                       -----              ^^^^\n+   |                       |                  |\n+   |                       |                  ...but data from `f` is returned here\n+   |                       this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-self-async.rs:32:36\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:30:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                    ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                    |\n-   |                                    ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 32:29\n-  --> $DIR/ref-self-async.rs:32:29\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 32:29\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 + '_ {\n-   |                                                ^^^^^^^^^\n+   |                             -----              ^^^^\n+   |                             |                  |\n+   |                             |                  ...but data from `f` is returned here\n+   |                             this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-self-async.rs:38:45\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:34:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                             |\n-   |                                             ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 38:37\n-  --> $DIR/ref-self-async.rs:38:37\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 38:37\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 + '_ {\n-   |                                                         ^^^^^^^^^\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-self-async.rs:44:45\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                             |\n-   |                                             ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 44:37\n-  --> $DIR/ref-self-async.rs:44:37\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:38:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 44:37\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 + '_ {\n-   |                                                         ^^^^^^^^^\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-self-async.rs:50:54\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:42:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                      |\n-   |                                                      ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 50:45\n-  --> $DIR/ref-self-async.rs:50:45\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 50:45\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                                  ^^^^^^^^^\n+   |                                             -----                ^^^^\n+   |                                             |                    |\n+   |                                             |                    ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-self-async.rs:56:54\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                      |\n-   |                                                      ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 56:45\n-  --> $DIR/ref-self-async.rs:56:45\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:46:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                             ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 56:45\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 + '_ {\n-   |                                                                  ^^^^^^^^^\n+   |                                             -----                ^^^^\n+   |                                             |                    |\n+   |                                             |                    ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-self-async.rs:62:58\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:50:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                                          ^          --- this return type evaluates to the `'static` lifetime...\n-   |                                                          |\n-   |                                                          ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 62:44\n-  --> $DIR/ref-self-async.rs:62:44\n-   |\n-LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                            ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 62:44\n-   |\n-LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 + '_ {\n-   |                                                                     ^^^^^^^^\n+   |                                            -----                    ^^^\n+   |                                            |                        |\n+   |                                            |                        ...but data from `f` is returned here\n+   |                                            this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "437d403e044ede637eaa2ef5748f1964aceb5194", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 81, "deletions": 21, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,43 +1,103 @@\n-error[E0106]: missing lifetime specifier\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:15:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                                                    ^\n+   |                                                    ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:21:61\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:15:57\n+   |\n+LL |       async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |  _______________________________-_________________________^\n+   | |                               |\n+   | |                               lifetime `'_` defined here\n+   | |                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:19:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                                             ^\n+   |                                                             ^^^^\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:27:61\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:19:66\n+   |\n+LL |       async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-__________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:23:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                                             ^\n+   |                                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:23:66\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-__________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:33:70\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:27:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                                                      ^\n+   |                                                                      ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:27:75\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |  _______________________________________________-___________________________^\n+   | |                                               |\n+   | |                                               lifetime `'_` defined here\n+   | |                                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:39:66\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:31:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n+   |                                                                  ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:31:71\n    |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+LL |       async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |  ___________________________________________-___________________________^\n+   | |                                           |\n+   | |                                           lifetime `'_` defined here\n+   | |                                           lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "f0410bbee906ded62b4d35c425e05828c0fac240", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -13,33 +13,23 @@ impl Struct {\n     // Test using `&Struct` explicitly:\n \n     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-        //~^ ERROR missing lifetime specifier\n-        //~| ERROR cannot infer an appropriate lifetime\n-        f\n+        f //~^ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "574b0fddc1eb2f17de5cee737d3d7a378ba54e29", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 30, "deletions": 116, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,133 +1,47 @@\n-error[E0106]: missing lifetime specifier\n+error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:15:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                                                    ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:21:61\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:27:61\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:33:70\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                                                      ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/ref-struct-async.rs:39:66\n-   |\n-LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                                                  ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-struct-async.rs:15:40\n-   |\n-LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                                        ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                        |\n-   |                                        ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:31\n-  --> $DIR/ref-struct-async.rs:15:31\n-   |\n-LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                               ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:31\n-   |\n-LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 + '_ {\n-   |                                                    ^^^^^^^^^\n+   |                               -------              ^^^^\n+   |                               |                    |\n+   |                               |                    ...but data from `f` is returned here\n+   |                               this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-struct-async.rs:21:49\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                 |\n-   |                                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 21:39\n-  --> $DIR/ref-struct-async.rs:21:39\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:19:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                       ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:39\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 + '_ {\n-   |                                                             ^^^^^^^^^\n+   |                                       -------               ^^^^\n+   |                                       |                     |\n+   |                                       |                     ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-struct-async.rs:27:49\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                 |\n-   |                                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 27:39\n-  --> $DIR/ref-struct-async.rs:27:39\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:23:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                       ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:39\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 + '_ {\n-   |                                                             ^^^^^^^^^\n+   |                                       -------               ^^^^\n+   |                                       |                     |\n+   |                                       |                     ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-struct-async.rs:33:58\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                          |\n-   |                                                          ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 33:47\n-  --> $DIR/ref-struct-async.rs:33:47\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:27:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                               ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:47\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 + '_ {\n-   |                                                                      ^^^^^^^^^\n+   |                                               -------                ^^^^\n+   |                                               |                      |\n+   |                                               |                      ...but data from `f` is returned here\n+   |                                               this parameter and the return type are declared with different lifetimes...\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/ref-struct-async.rs:39:54\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:31:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                                      |\n-   |                                                      ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 39:43\n-  --> $DIR/ref-struct-async.rs:39:43\n-   |\n-LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                           ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:43\n-   |\n-LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 + '_ {\n-   |                                                                  ^^^^^^^^^\n+   |                                           -------                ^^^^\n+   |                                           |                      |\n+   |                                           |                      ...but data from `f` is returned here\n+   |                                           this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "805d2433f87acccfa3a37f5ad007122bd5fff626", "filename": "src/test/ui/self/self_lifetime-async.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,11 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/self_lifetime-async.rs:9:44\n-   |\n-LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-   |                                            ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found none.\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "ec4c3d15224232548e3f40a84304f5d5a473e7c6", "filename": "src/test/ui/self/self_lifetime-async.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4134241bcf79a77c724158cc388a746499c5fa06/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs?ref=4134241bcf79a77c724158cc388a746499c5fa06", "patch": "@@ -1,20 +1,16 @@\n-// FIXME: Investigate why `self_lifetime.rs` is check-pass but this isn't.\n-\n+// check-pass\n // edition:2018\n \n #![feature(async_await)]\n \n struct Foo<'a>(&'a ());\n impl<'a> Foo<'a> {\n     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n }\n \n type Alias = Foo<'static>;\n impl Alias {\n     async fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n-    //~^ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "e3ec1abd44763863558c96ced88e83cd9599db45", "filename": "src/test/ui/self/self_lifetime-async.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0098d0c514208122ca63e652b5614da01fe210f1/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr?ref=0098d0c514208122ca63e652b5614da01fe210f1", "patch": "@@ -1,39 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/self_lifetime-async.rs:9:44\n-   |\n-LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-   |                                            ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found none.\n-\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/self_lifetime-async.rs:9:22\n-   |\n-LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-   |                      ^^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 8:6...\n-  --> $DIR/self_lifetime-async.rs:8:6\n-   |\n-LL | impl<'a> Foo<'a> {\n-   |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected &Foo<'_>\n-              found &'b Foo<'a>\n-   = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected &()\n-              found &'static ()\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/self_lifetime-async.rs:16:52\n-   |\n-LL |     async fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n-   |                            ------                  ^^^\n-   |                            |                       |\n-   |                            |                       ...but data from `arg` is returned here\n-   |                            this parameter and the return type are declared with different lifetimes...\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}]}