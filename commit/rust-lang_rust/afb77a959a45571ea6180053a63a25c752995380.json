{"sha": "afb77a959a45571ea6180053a63a25c752995380", "node_id": "C_kwDOAAsO6NoAKGFmYjc3YTk1OWE0NTU3MWVhNjE4MDA1M2E2M2EyNWM3NTI5OTUzODA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T03:16:33Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T03:16:33Z"}, "message": "Coalesce two arguments as `&Function`", "tree": {"sha": "c8f29cbd410173d004b7139c5b83d69d7f51c16e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8f29cbd410173d004b7139c5b83d69d7f51c16e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afb77a959a45571ea6180053a63a25c752995380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afb77a959a45571ea6180053a63a25c752995380", "html_url": "https://github.com/rust-lang/rust/commit/afb77a959a45571ea6180053a63a25c752995380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afb77a959a45571ea6180053a63a25c752995380/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe", "html_url": "https://github.com/rust-lang/rust/commit/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "90e73f4a76d87a00ccf84308252f65510f937a85", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afb77a959a45571ea6180053a63a25c752995380/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb77a959a45571ea6180053a63a25c752995380/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=afb77a959a45571ea6180053a63a25c752995380", "patch": "@@ -7,7 +7,7 @@ use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean;\n-use crate::clean::types::{FnDecl, FnRetTy, GenericBound, Generics, Type, WherePredicate};\n+use crate::clean::types::{FnRetTy, Function, GenericBound, Generics, Type, WherePredicate};\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n use crate::html::markdown::short_markdown_summary;\n@@ -186,9 +186,9 @@ crate fn get_index_search_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n ) -> Option<IndexItemFunctionType> {\n     let (mut inputs, mut output) = match *item.kind {\n-        clean::FunctionItem(ref f) => get_all_types(&f.generics, &f.decl, tcx),\n-        clean::MethodItem(ref m, _) => get_all_types(&m.generics, &m.decl, tcx),\n-        clean::TyMethodItem(ref m) => get_all_types(&m.generics, &m.decl, tcx),\n+        clean::FunctionItem(ref f) => get_all_types(f, tcx),\n+        clean::MethodItem(ref m, _) => get_all_types(m, tcx),\n+        clean::TyMethodItem(ref m) => get_all_types(m, tcx),\n         _ => return None,\n     };\n \n@@ -378,10 +378,12 @@ fn get_real_types<'tcx>(\n /// i.e. `fn foo<A: Display, B: Option<A>>(x: u32, y: B)` will return\n /// `[u32, Display, Option]`.\n fn get_all_types<'tcx>(\n-    generics: &Generics,\n-    decl: &FnDecl,\n+    func: &Function,\n     tcx: TyCtxt<'tcx>,\n ) -> (Vec<TypeWithKind>, Vec<TypeWithKind>) {\n+    let decl = &func.decl;\n+    let generics = &func.generics;\n+\n     let mut all_types = Vec::new();\n     for arg in decl.inputs.values.iter() {\n         if arg.type_.is_self_type() {"}]}