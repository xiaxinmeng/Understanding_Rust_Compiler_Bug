{"sha": "1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMzNhYTI5ZGUyZDZmNWUyOTNmODRiMzhiYTJiMDJjZmFmMWZhMGU=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2018-03-26T13:15:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-26T13:15:01Z"}, "message": "Rollup merge of #49353 - chisophugis:patch-1, r=Mark-Simulacrum\n\nFix confusing doc for `scan`\n\nThe comment \"the value passed on to the next iteration\" confused me since it sounded more like what Haskell's [scanl](http://hackage.haskell.org/package/base-4.11.0.0/docs/Prelude.html#v:scanl) does where the closure's return value serves as both the \"yielded value\" *and* the new value of the \"state\".\n\nI tried changing the example to make it clear that the closure's return value is decoupled from the state argument.", "tree": {"sha": "86e9a6450971d12a82eb18ead0b5036d6ffda0a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e9a6450971d12a82eb18ead0b5036d6ffda0a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJauPJVCRBK7hj4Ov3rIwAAdHIIAISgz/s3aL3W4ePywMQftI+B\nl3uajpZUJp4DXoZc19JahfH8MGfBW+nQW7wmYt7eBFuEK2qVohIY4iGNuVZMIB7E\nMmgKYSO3ZHYtFduOR1KKoPYhwy5QD4pZIy34ap9zwloYcU3xuZy0Es4Lfw8V+rHt\nsDCn5FCDrnxUY9QLRfAfGVvuTAQ9LeSTylgrWYqImaVAGQORtD6wS6EbHVzTtqAD\nBk+ukZom9Ukxqp7psIhFo7TcshCd8vpJ7oF+8WlPKvF/+dy/450pSLV+s8v6HwRN\n4qQieGRduOLg2kD/AumVraOVuy1CYSqUt4Dq1WQ2ajdIZ+YTyyMtI6lOorJAtQA=\n=OFim\n-----END PGP SIGNATURE-----\n", "payload": "tree 86e9a6450971d12a82eb18ead0b5036d6ffda0a8\nparent d601e74675b5e92b2050c1f4454138a69e620f54\nparent f198b0acf512458bdbe5079d12414ff94b03f7ac\nauthor Tim Neumann <mail@timnn.me> 1522070101 +0200\ncommitter GitHub <noreply@github.com> 1522070101 +0200\n\nRollup merge of #49353 - chisophugis:patch-1, r=Mark-Simulacrum\n\nFix confusing doc for `scan`\n\nThe comment \"the value passed on to the next iteration\" confused me since it sounded more like what Haskell's [scanl](http://hackage.haskell.org/package/base-4.11.0.0/docs/Prelude.html#v:scanl) does where the closure's return value serves as both the \"yielded value\" *and* the new value of the \"state\".\n\nI tried changing the example to make it clear that the closure's return value is decoupled from the state argument.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e", "html_url": "https://github.com/rust-lang/rust/commit/1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d601e74675b5e92b2050c1f4454138a69e620f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/d601e74675b5e92b2050c1f4454138a69e620f54", "html_url": "https://github.com/rust-lang/rust/commit/d601e74675b5e92b2050c1f4454138a69e620f54"}, {"sha": "f198b0acf512458bdbe5079d12414ff94b03f7ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f198b0acf512458bdbe5079d12414ff94b03f7ac", "html_url": "https://github.com/rust-lang/rust/commit/f198b0acf512458bdbe5079d12414ff94b03f7ac"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "31f77f92435d83ff72a9f04582bb6717f1c1bedd", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=1233aa29de2d6f5e293f84b38ba2b02cfaf1fa0e", "patch": "@@ -974,13 +974,13 @@ pub trait Iterator {\n     ///     // each iteration, we'll multiply the state by the element\n     ///     *state = *state * x;\n     ///\n-    ///     // the value passed on to the next iteration\n-    ///     Some(*state)\n+    ///     // then, we'll yield the negation of the state\n+    ///     Some(-*state)\n     /// });\n     ///\n-    /// assert_eq!(iter.next(), Some(1));\n-    /// assert_eq!(iter.next(), Some(2));\n-    /// assert_eq!(iter.next(), Some(6));\n+    /// assert_eq!(iter.next(), Some(-1));\n+    /// assert_eq!(iter.next(), Some(-2));\n+    /// assert_eq!(iter.next(), Some(-6));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[inline]"}]}