{"sha": "ccf831769459fb1b306387e6796a0155d63eb012", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZjgzMTc2OTQ1OWZiMWIzMDYzODdlNjc5NmEwMTU1ZDYzZWIwMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-27T15:13:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-27T15:13:30Z"}, "message": "Auto merge of #28016 - ranma42:mini-rem-in-core, r=alexcrichton\n\nThe implementation of the remainder operation belongs to\r\nlibrustc_trans, but it is also stubbed out in libcore in order to\r\nexpose it as a trait on primitive types. Instead of exposing some\r\nimplementation details (like the upcast to `f64` in MSVC), use a\r\nminimal implementation just like that of the `Div` trait.", "tree": {"sha": "d22daff7d6306623a89bd28f89e3b469b24f00ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22daff7d6306623a89bd28f89e3b469b24f00ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccf831769459fb1b306387e6796a0155d63eb012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf831769459fb1b306387e6796a0155d63eb012", "html_url": "https://github.com/rust-lang/rust/commit/ccf831769459fb1b306387e6796a0155d63eb012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccf831769459fb1b306387e6796a0155d63eb012/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40fd4d678706af0684cee1e95304352a6ca02837", "url": "https://api.github.com/repos/rust-lang/rust/commits/40fd4d678706af0684cee1e95304352a6ca02837", "html_url": "https://github.com/rust-lang/rust/commit/40fd4d678706af0684cee1e95304352a6ca02837"}, {"sha": "4653a8b3fd69dbab366a8ec67ae9cf68dc128c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43", "html_url": "https://github.com/rust-lang/rust/commit/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "3fb720ab6c83c17d5cf48ed7494910069e677d44", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ccf831769459fb1b306387e6796a0155d63eb012/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf831769459fb1b306387e6796a0155d63eb012/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=ccf831769459fb1b306387e6796a0155d63eb012", "patch": "@@ -423,7 +423,7 @@ pub trait Rem<RHS=Self> {\n     fn rem(self, rhs: RHS) -> Self::Output;\n }\n \n-macro_rules! rem_impl {\n+macro_rules! rem_impl_integer {\n     ($($t:ty)*) => ($(\n         /// This operation satisfies `n % d == n - (n / d) * d`.  The\n         /// result has the same sign as the left operand.\n@@ -439,9 +439,28 @@ macro_rules! rem_impl {\n     )*)\n }\n \n-rem_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n+rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n+\n+#[cfg(not(stage0))]\n+macro_rules! rem_impl_float {\n+    ($($t:ty)*) => ($(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl Rem for $t {\n+            type Output = $t;\n+\n+            #[inline]\n+            fn rem(self, other: $t) -> $t { self % other }\n+        }\n+\n+        forward_ref_binop! { impl Rem, rem for $t, $t }\n+    )*)\n+}\n+\n+#[cfg(not(stage0))]\n+rem_impl_float! { f32 f64 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl Rem for f32 {\n     type Output = f32;\n \n@@ -463,6 +482,7 @@ impl Rem for f32 {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl Rem for f64 {\n     type Output = f64;\n \n@@ -473,7 +493,9 @@ impl Rem for f64 {\n     }\n }\n \n+#[cfg(stage0)]\n forward_ref_binop! { impl Rem, rem for f64, f64 }\n+#[cfg(stage0)]\n forward_ref_binop! { impl Rem, rem for f32, f32 }\n \n /// The `Neg` trait is used to specify the functionality of unary `-`."}]}