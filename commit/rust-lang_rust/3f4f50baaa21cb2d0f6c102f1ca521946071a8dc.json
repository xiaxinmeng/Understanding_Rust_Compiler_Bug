{"sha": "3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNGY1MGJhYWEyMWNiMmQwZjZjMTAyZjFjYTUyMTk0NjA3MWE4ZGM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-27T15:55:47Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-27T15:55:47Z"}, "message": "Merge #690\n\n690: Fix module resolution for non standard filenames r=matklad a=regiontog\n\nfixes #668\n\nCo-authored-by: Erlend Tobiassen <erlend.tobiassen@gmail.com>", "tree": {"sha": "2de93a338992d963f265ef35b53e55f8d3f1ec66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de93a338992d963f265ef35b53e55f8d3f1ec66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "html_url": "https://github.com/rust-lang/rust/commit/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b2b62b9579e9eefbce27b8a9b799fbd59438ce36", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b62b9579e9eefbce27b8a9b799fbd59438ce36", "html_url": "https://github.com/rust-lang/rust/commit/b2b62b9579e9eefbce27b8a9b799fbd59438ce36"}, {"sha": "b775fa285c985821f38f09c25507d80ee793ecfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b775fa285c985821f38f09c25507d80ee793ecfd", "html_url": "https://github.com/rust-lang/rust/commit/b775fa285c985821f38f09c25507d80ee793ecfd"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "893c375b554ae7d17b123e52f11ae6a3a3046535", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "patch": "@@ -172,6 +172,7 @@ impl ModuleTree {\n         file_id: HirFileId,\n         decl_id: Option<SourceFileItemId>,\n     ) -> ModuleId {\n+        let is_root = parent.is_none();\n         let id = self.alloc_mod(ModuleData {\n             file_id,\n             decl_id,\n@@ -191,7 +192,7 @@ impl ModuleTree {\n             });\n \n             let (points_to, problem) = if sub.is_declaration {\n-                let (points_to, problem) = resolve_submodule(db, file_id, &sub.name);\n+                let (points_to, problem) = resolve_submodule(db, file_id, &sub.name, is_root);\n                 let points_to = points_to\n                     .into_iter()\n                     .map(|file_id| {\n@@ -295,6 +296,7 @@ fn resolve_submodule(\n     db: &impl HirDatabase,\n     file_id: HirFileId,\n     name: &Name,\n+    is_root: bool,\n ) -> (Vec<FileId>, Option<Problem>) {\n     // FIXME: handle submodules of inline modules properly\n     let file_id = file_id.original_file(db);\n@@ -303,7 +305,7 @@ fn resolve_submodule(\n     let root = RelativePathBuf::default();\n     let dir_path = path.parent().unwrap_or(&root);\n     let mod_name = path.file_stem().unwrap_or(\"unknown\");\n-    let is_dir_owner = mod_name == \"mod\" || mod_name == \"lib\" || mod_name == \"main\";\n+    let is_dir_owner = is_root || mod_name == \"mod\";\n \n     let file_mod = dir_path.join(format!(\"{}.rs\", name));\n     let dir_mod = dir_path.join(format!(\"{}/mod.rs\", name));"}, {"sha": "3d420467c18d918d7d4bee5a0a8dfc95e2185460", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "patch": "@@ -19,6 +19,20 @@ fn item_map(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n     (db.item_map(krate.crate_id), module_id)\n }\n \n+/// Sets the crate root to the file of the cursor marker\n+fn item_map_custom_crate_root(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n+    let (mut db, pos) = MockDatabase::with_position(fixture);\n+\n+    let mut crate_graph = CrateGraph::default();\n+    crate_graph.add_crate_root(pos.file_id);\n+    db.set_crate_graph(Arc::new(crate_graph));\n+\n+    let module = crate::source_binder::module_from_position(&db, pos).unwrap();\n+    let krate = module.krate(&db).unwrap();\n+    let module_id = module.module_id;\n+    (db.item_map(krate.crate_id), module_id)\n+}\n+\n fn check_module_item_map(map: &ItemMap, module_id: ModuleId, expected: &str) {\n     let mut lines = map[module_id]\n         .items\n@@ -133,6 +147,28 @@ fn re_exports() {\n     );\n }\n \n+#[test]\n+fn module_resolution_works_for_non_standard_filenames() {\n+    let (item_map, module_id) = item_map_custom_crate_root(\n+        \"\n+        //- /my_library.rs\n+        mod foo;\n+        use self::foo::Bar;\n+        <|>\n+        //- /foo/mod.rs\n+        pub struct Bar;\n+    \",\n+    );\n+    check_module_item_map(\n+        &item_map,\n+        module_id,\n+        \"\n+            Bar: t v\n+            foo: t\n+        \",\n+    );\n+}\n+\n #[test]\n fn name_res_works_for_broken_modules() {\n     covers!(name_res_works_for_broken_modules);"}, {"sha": "c2cb38f7e96d1a08a09acf85bb919bfbe3bde31f", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "patch": "@@ -1,9 +1,9 @@\n+use insta::assert_debug_snapshot_matches;\n use ra_ide_api::{\n-    AnalysisChange,\n-    CrateGraph, FileId, mock_analysis::{MockAnalysis, single_file, single_file_with_position}, Query,\n+    mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n+    AnalysisChange, CrateGraph, FileId, Query,\n };\n use ra_syntax::TextRange;\n-use insta::assert_debug_snapshot_matches;\n \n #[test]\n fn test_unresolved_module_diagnostic() {\n@@ -26,12 +26,12 @@ fn test_resolve_crate_root() {\n         \"\n         //- /bar.rs\n         mod foo;\n-        //- /bar/foo.rs\n-        // emtpy <|>\n+        //- /foo.rs\n+        // empty <|>\n     \",\n     );\n     let root_file = mock.id_of(\"/bar.rs\");\n-    let mod_file = mock.id_of(\"/bar/foo.rs\");\n+    let mod_file = mock.id_of(\"/foo.rs\");\n     let mut host = mock.analysis_host();\n     assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n "}, {"sha": "99b0983b0d8ecaa8cb0656916d96eb38344069fe", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "patch": "@@ -17,14 +17,14 @@ pub fn find_leaf_at_offset(node: &SyntaxNode, offset: TextUnit) -> LeafAtOffset<\n }\n \n /// Finds a node of specific Ast type at offset. Note that this is slightly\n-/// impercise: if the cursor is strictly betwen two nodes of the desired type,\n+/// imprecise: if the cursor is strictly between two nodes of the desired type,\n /// as in\n ///\n /// ```no-run\n /// struct Foo {}|struct Bar;\n /// ```\n ///\n-/// then the left node will be silently prefered.\n+/// then the left node will be silently preferred.\n pub fn find_node_at_offset<N: AstNode>(syntax: &SyntaxNode, offset: TextUnit) -> Option<&N> {\n     find_leaf_at_offset(syntax, offset).find_map(|leaf| leaf.ancestors().find_map(N::cast))\n }"}]}