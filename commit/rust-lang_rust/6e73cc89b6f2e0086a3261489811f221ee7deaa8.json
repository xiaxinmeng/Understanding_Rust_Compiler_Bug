{"sha": "6e73cc89b6f2e0086a3261489811f221ee7deaa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNzNjYzg5YjZmMmUwMDg2YTMyNjE0ODk4MTFmMjIxZWU3ZGVhYTg=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-13T12:00:27Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-13T12:10:01Z"}, "message": "Implement tuple inference", "tree": {"sha": "b5ebd108b601a3a89642d5ba077780f1d0bec07d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ebd108b601a3a89642d5ba077780f1d0bec07d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e73cc89b6f2e0086a3261489811f221ee7deaa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e73cc89b6f2e0086a3261489811f221ee7deaa8", "html_url": "https://github.com/rust-lang/rust/commit/6e73cc89b6f2e0086a3261489811f221ee7deaa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e73cc89b6f2e0086a3261489811f221ee7deaa8/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6efda8f6cefdd69c3bae892eb168971a465d2a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6efda8f6cefdd69c3bae892eb168971a465d2a8b", "html_url": "https://github.com/rust-lang/rust/commit/6efda8f6cefdd69c3bae892eb168971a465d2a8b"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "f0936e9f33a26df31d124a8121a25822e14bfd49", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e73cc89b6f2e0086a3261489811f221ee7deaa8/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e73cc89b6f2e0086a3261489811f221ee7deaa8/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=6e73cc89b6f2e0086a3261489811f221ee7deaa8", "patch": "@@ -183,6 +183,9 @@ pub enum Expr {\n         arg_types: Vec<Option<TypeRef>>,\n         body: ExprId,\n     },\n+    Tuple {\n+        exprs: Vec<ExprId>,\n+    },\n }\n \n pub use ra_syntax::ast::PrefixOp as UnaryOp;\n@@ -297,6 +300,11 @@ impl Expr {\n             | Expr::UnaryOp { expr, .. } => {\n                 f(*expr);\n             }\n+            Expr::Tuple { exprs } => {\n+                for expr in exprs {\n+                    f(*expr);\n+                }\n+            }\n         }\n     }\n }\n@@ -621,11 +629,14 @@ impl ExprCollector {\n                 let op = e.op();\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n+            ast::ExprKind::TupleExpr(e) => {\n+                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n+            }\n \n             // TODO implement HIR for these:\n             ast::ExprKind::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::IndexExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            ast::ExprKind::TupleExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::ArrayExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::Literal(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),"}, {"sha": "0692d3b2a83822f68fa964edb9f364fcfc42010e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e73cc89b6f2e0086a3261489811f221ee7deaa8/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e73cc89b6f2e0086a3261489811f221ee7deaa8/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=6e73cc89b6f2e0086a3261489811f221ee7deaa8", "patch": "@@ -1040,6 +1040,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n                 _ => Ty::Unknown,\n             },\n+            Expr::Tuple { exprs } => {\n+                let mut ty_vec = Vec::with_capacity(exprs.len());\n+                for arg in exprs.iter() {\n+                    ty_vec.push(self.infer_expr(*arg, &Expectation::none())?);\n+                }\n+\n+                Ty::Tuple(Arc::from(ty_vec))\n+            }\n         };\n         // use a new type variable if we got Ty::Unknown here\n         let ty = self.insert_type_vars_shallow(ty);"}]}