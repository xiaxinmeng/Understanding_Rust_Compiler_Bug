{"sha": "a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzY0YzI4ZTZjMDA3ZmNmNzBkZDM0YTEyNTE4ZmU0ZDY1ZjlmYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T11:36:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T11:36:25Z"}, "message": "auto merge of #11909 : thestinger/rust/tydesc, r=pcwalton", "tree": {"sha": "68f68ea2e6d1a34a38e6ec54502ee1a9daddd63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f68ea2e6d1a34a38e6ec54502ee1a9daddd63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "html_url": "https://github.com/rust-lang/rust/commit/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b305f34fb56bfa5394aec56d0cd0262053df94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b305f34fb56bfa5394aec56d0cd0262053df94a", "html_url": "https://github.com/rust-lang/rust/commit/6b305f34fb56bfa5394aec56d0cd0262053df94a"}, {"sha": "383e3fd13b99827b5dbb107da7433bd0a70dea80", "url": "https://api.github.com/repos/rust-lang/rust/commits/383e3fd13b99827b5dbb107da7433bd0a70dea80", "html_url": "https://github.com/rust-lang/rust/commit/383e3fd13b99827b5dbb107da7433bd0a70dea80"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "d39369c7a5f47288090bc9870cdf7e7f9a83369d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "patch": "@@ -376,7 +376,7 @@ pub fn malloc_raw_dyn<'a>(\n \n         // Get the tydesc for the body:\n         let static_ti = get_tydesc(ccx, t);\n-        glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n+        glue::lazily_emit_tydesc_glue(ccx, abi::tydesc_field_drop_glue, static_ti);\n \n         // Allocate space:\n         let tydesc = PointerCast(bcx, static_ti.tydesc, Type::i8p());"}, {"sha": "ab77d105e5feaf85c51a8d04dfa7131f3d582278", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "patch": "@@ -131,7 +131,7 @@ fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n     t\n }\n \n-fn lazily_emit_tydesc_glue(ccx: @CrateContext, field: uint, ti: @tydesc_info) {\n+pub fn lazily_emit_tydesc_glue(ccx: @CrateContext, field: uint, ti: @tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_tydesc_glue\");\n \n     let simpl = simplified_glue_type(ccx.tcx, field, ti.ty);\n@@ -367,17 +367,9 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n             let lluniquevalue = GEPi(bcx, v0, [0, abi::trt_field_box]);\n             // Only drop the value when it is non-null\n             with_cond(bcx, IsNotNull(bcx, Load(bcx, lluniquevalue)), |bcx| {\n-                let llvtable = Load(bcx, GEPi(bcx, v0, [0, abi::trt_field_vtable]));\n-\n-                // Cast the vtable to a pointer to a pointer to a tydesc.\n-                let llvtable = PointerCast(bcx, llvtable,\n-                                           ccx.tydesc_type.ptr_to().ptr_to());\n-                let lltydesc = Load(bcx, llvtable);\n-                call_tydesc_glue_full(bcx,\n-                                      lluniquevalue,\n-                                      lltydesc,\n-                                      abi::tydesc_field_drop_glue,\n-                                      None);\n+                let lldtor_ptr = Load(bcx, GEPi(bcx, v0, [0, abi::trt_field_vtable]));\n+                let lldtor = Load(bcx, lldtor_ptr);\n+                Call(bcx, lldtor, [PointerCast(bcx, lluniquevalue, Type::i8p())], []);\n                 bcx\n             })\n         }"}, {"sha": "09bfa36ddc172445e3003ad3c3cec425b8ff35a5", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "patch": "@@ -481,7 +481,7 @@ pub fn get_vtable(bcx: &Block,\n \n     // Generate a type descriptor for the vtable.\n     let tydesc = get_tydesc(ccx, self_ty);\n-    glue::lazily_emit_all_tydesc_glue(ccx, tydesc);\n+    glue::lazily_emit_tydesc_glue(ccx, abi::tydesc_field_drop_glue, tydesc);\n \n     let vtable = make_vtable(ccx, tydesc, methods);\n \n@@ -498,7 +498,7 @@ pub fn make_vtable(ccx: &CrateContext,\n     unsafe {\n         let _icx = push_ctxt(\"meth::make_vtable\");\n \n-        let mut components = ~[ tydesc.tydesc ];\n+        let mut components = ~[tydesc.drop_glue.get().unwrap()];\n         for &ptr in ptrs.iter() {\n             components.push(ptr)\n         }"}, {"sha": "39a99ef995012f9d9cceb7ef24cb4f484ac982f5", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "patch": "@@ -180,7 +180,7 @@ impl Type {\n     }\n \n     pub fn vtable() -> Type {\n-        Type::array(&Type::i8().ptr_to(), 1)\n+        Type::array(&Type::i8p().ptr_to(), 1)\n     }\n \n     pub fn generic_glue_fn(cx: &CrateContext) -> Type {\n@@ -246,13 +246,13 @@ impl Type {\n     }\n \n     pub fn opaque_trait(ctx: &CrateContext, store: ty::TraitStore) -> Type {\n-        let tydesc_ptr = ctx.tydesc_type.ptr_to();\n+        let vtable = Type::glue_fn(Type::i8p()).ptr_to().ptr_to();\n         let box_ty = match store {\n             ty::BoxTraitStore => Type::at_box(ctx, Type::i8()),\n             ty::UniqTraitStore => Type::i8(),\n             ty::RegionTraitStore(..) => Type::i8()\n         };\n-        Type::struct_([tydesc_ptr, box_ty.ptr_to()], false)\n+        Type::struct_([vtable, box_ty.ptr_to()], false)\n     }\n \n     pub fn kind(&self) -> TypeKind {"}]}