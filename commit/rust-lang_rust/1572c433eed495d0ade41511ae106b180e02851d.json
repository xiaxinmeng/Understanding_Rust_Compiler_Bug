{"sha": "1572c433eed495d0ade41511ae106b180e02851d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NzJjNDMzZWVkNDk1ZDBhZGU0MTUxMWFlMTA2YjE4MGUwMjg1MWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-13T19:16:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-13T19:16:03Z"}, "message": "Auto merge of #69986 - JohnTitor:rollup-h0809mf, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #69403 (Implement `Copy` for `IoSlice`)\n - #69460 (Move some `build-pass` tests to `check-pass`)\n - #69723 (Added doc on keyword Pub.)\n - #69802 (fix more clippy findings)\n - #69809 (remove lifetimes that can be elided (clippy::needless_lifetimes))\n - #69947 (Clean up E0423 explanation)\n - #69949 (triagebot.toml: add ping aliases)\n - #69954 (rename panic_if_ intrinsics to assert_)\n - #69960 (miri engine: fix treatment of abort intrinsic)\n - #69966 (Add more regression tests)\n - #69973 (Update stable-since version for const_int_conversion)\n - #69974 (Clean up E0434 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7f39caac777b04c27f8a6a63dbad558fa6b14e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f39caac777b04c27f8a6a63dbad558fa6b14e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1572c433eed495d0ade41511ae106b180e02851d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1572c433eed495d0ade41511ae106b180e02851d", "html_url": "https://github.com/rust-lang/rust/commit/1572c433eed495d0ade41511ae106b180e02851d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1572c433eed495d0ade41511ae106b180e02851d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "html_url": "https://github.com/rust-lang/rust/commit/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd"}, {"sha": "1d8f5f0ff5882c2a8cd739eb901cea0ea3c437d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8f5f0ff5882c2a8cd739eb901cea0ea3c437d4", "html_url": "https://github.com/rust-lang/rust/commit/1d8f5f0ff5882c2a8cd739eb901cea0ea3c437d4"}], "stats": {"total": 595, "additions": 358, "deletions": 237}, "files": [{"sha": "53d4f7239b76ea15a6e0db3b884d014c89bb650b", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1427,7 +1427,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// `CursorMut`, which means it cannot outlive the `CursorMut` and that the\n     /// `CursorMut` is frozen for the lifetime of the `Cursor`.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn as_cursor<'cm>(&'cm self) -> Cursor<'cm, T> {\n+    pub fn as_cursor(&self) -> Cursor<'_, T> {\n         Cursor { list: self.list, current: self.current, index: self.index }\n     }\n }"}, {"sha": "953b7a986514d36a89e173f302fe09fa6ee21452", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1005,17 +1005,23 @@ extern \"rust-intrinsic\" {\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n+    #[cfg(bootstrap)]\n     pub fn panic_if_uninhabited<T>();\n \n+    /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n+    /// This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn assert_inhabited<T>();\n+\n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n     /// zero-initialization: This will statically either panic, or do nothing.\n     #[cfg(not(bootstrap))]\n-    pub fn panic_if_zero_invalid<T>();\n+    pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n     #[cfg(not(bootstrap))]\n-    pub fn panic_if_any_invalid<T>();\n+    pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]"}, {"sha": "bf39d56fc115c6e8bea5760a28a877e0a3d1a25f", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -495,7 +495,10 @@ impl<T> MaybeUninit<T> {\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     pub unsafe fn assume_init(self) -> T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }\n \n@@ -559,7 +562,10 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub unsafe fn read(&self) -> T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         self.as_ptr().read()\n     }\n \n@@ -621,7 +627,10 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         &*self.value\n     }\n \n@@ -739,7 +748,10 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         &mut *self.value\n     }\n "}, {"sha": "e65150af59f81ab96f86fd749f63b3158fca9b2c", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -497,7 +497,7 @@ pub const fn needs_drop<T>() -> bool {\n #[rustc_diagnostic_item = \"mem_zeroed\"]\n pub unsafe fn zeroed<T>() -> T {\n     #[cfg(not(bootstrap))]\n-    intrinsics::panic_if_zero_invalid::<T>();\n+    intrinsics::assert_zero_valid::<T>();\n     #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n@@ -533,7 +533,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n pub unsafe fn uninitialized<T>() -> T {\n     #[cfg(not(bootstrap))]\n-    intrinsics::panic_if_any_invalid::<T>();\n+    intrinsics::assert_uninit_valid::<T>();\n     #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()"}, {"sha": "853092dd85ee94436fb3433c35ce4b4b181aa71b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -2154,7 +2154,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2174,7 +2174,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2209,7 +2209,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n             #[allow_internal_unstable(const_fn_union)]\n@@ -2251,7 +2251,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2284,7 +2284,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2327,7 +2327,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n             #[allow_internal_unstable(const_fn_union)]\n@@ -4115,7 +4115,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -4135,7 +4135,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -4170,7 +4170,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n             #[allow_internal_unstable(const_fn_union)]\n@@ -4212,7 +4212,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4245,7 +4245,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4288,7 +4288,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n             #[allow_internal_unstable(const_fn_union)]"}, {"sha": "ffa418cba6c99346b91892adabbcfba74f25a2df", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -365,11 +365,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n         let haystack = self.haystack.as_bytes();\n         loop {\n             // get the haystack up to but not including the last character searched\n-            let bytes = if let Some(slice) = haystack.get(self.finger..self.finger_back) {\n-                slice\n-            } else {\n-                return None;\n-            };\n+            let bytes = haystack.get(self.finger..self.finger_back)?;\n             // the last byte of the utf8 encoded needle\n             // SAFETY: we have an invariant that `utf8_size < 5`\n             let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size - 1) };\n@@ -575,11 +571,12 @@ macro_rules! pattern_methods {\n \n         #[inline]\n         fn is_suffix_of(self, haystack: &'a str) -> bool\n-            where $t: ReverseSearcher<'a>\n+        where\n+            $t: ReverseSearcher<'a>,\n         {\n             ($pmap)(self).is_suffix_of(haystack)\n         }\n-    }\n+    };\n }\n \n macro_rules! searcher_methods {\n@@ -614,7 +611,7 @@ macro_rules! searcher_methods {\n         fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n             self.0.next_reject_back()\n         }\n-    }\n+    };\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "03218920ef1aa293a045a670a53ec349141d9d9f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -179,7 +179,7 @@ macro_rules! define_dep_nodes {\n             $(\n                 #[inline(always)]\n                 #[allow(unreachable_code, non_snake_case)]\n-                pub fn $variant<'tcx>(_tcx: TyCtxt<'tcx>, $(arg: $tuple_arg_ty)*) -> DepNode {\n+                pub fn $variant(_tcx: TyCtxt<'_>, $(arg: $tuple_arg_ty)*) -> DepNode {\n                     // tuple args\n                     $({\n                         erase!($tuple_arg_ty);"}, {"sha": "ca5f9ba5ad62dbca3ae641fc51294325e2351671", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n     }\n "}, {"sha": "f176f92434372ebff5d1189f525af698a04201c9", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     type Map = Map<'hir>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n "}, {"sha": "4c889ef41005c4f132146310d6d2e9c9f252f23f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -298,7 +298,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n-        let node = if let Some(node) = self.find(hir_id) { node } else { return None };\n+        let node = self.find(hir_id)?;\n \n         Some(match node {\n             Node::Item(item) => match item.kind {"}, {"sha": "a26ff2ea7aa2f2331519f775c284f3b12300d814", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -403,7 +403,7 @@ pub enum ClearCrossCrate<T> {\n }\n \n impl<T> ClearCrossCrate<T> {\n-    pub fn as_ref(&'a self) -> ClearCrossCrate<&'a T> {\n+    pub fn as_ref(&self) -> ClearCrossCrate<&T> {\n         match self {\n             ClearCrossCrate::Clear => ClearCrossCrate::Clear,\n             ClearCrossCrate::Set(v) => ClearCrossCrate::Set(v),\n@@ -2503,7 +2503,7 @@ impl UserTypeProjection {\n \n     pub(crate) fn variant(\n         mut self,\n-        adt_def: &'tcx AdtDef,\n+        adt_def: &AdtDef,\n         variant_index: VariantIdx,\n         field: Field,\n     ) -> Self {"}, {"sha": "69daa2da1fd0e1e9bc39fa1182b05b24a9833abb", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -346,12 +346,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         adt_did: DefId,\n         validate: &mut dyn FnMut(Self, DefId) -> Result<(), ErrorReported>,\n     ) -> Option<ty::Destructor> {\n-        let drop_trait = if let Some(def_id) = self.lang_items().drop_trait() {\n-            def_id\n-        } else {\n-            return None;\n-        };\n-\n+        let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);\n \n         let mut dtor_did = None;"}, {"sha": "609ddfc1d3a8075b7ef33456413cc4ba3de6187f", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -323,7 +323,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n-pub fn val_ty(v: &'ll Value) -> &'ll Type {\n+pub fn val_ty(v: &Value) -> &Type {\n     unsafe { llvm::LLVMTypeOf(v) }\n }\n \n@@ -345,6 +345,6 @@ fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)\n }\n \n-fn try_as_const_integral(v: &'ll Value) -> Option<&'ll ConstantInt> {\n+fn try_as_const_integral(v: &Value) -> Option<&ConstantInt> {\n     unsafe { llvm::LLVMIsAConstantInt(v) }\n }"}, {"sha": "a083e14979c0b8dc82aad3c506de774f37d02aec", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -185,12 +185,12 @@ impl Drop for SectionIter<'a> {\n     }\n }\n \n-pub fn mk_section_iter(llof: &'a ffi::ObjectFile) -> SectionIter<'a> {\n+pub fn mk_section_iter(llof: &ffi::ObjectFile) -> SectionIter<'_> {\n     unsafe { SectionIter { llsi: LLVMGetSections(llof) } }\n }\n \n /// Safe wrapper around `LLVMGetParam`, because segfaults are no fun.\n-pub fn get_param(llfn: &'a Value, index: c_uint) -> &'a Value {\n+pub fn get_param(llfn: &Value, index: c_uint) -> &Value {\n     unsafe {\n         assert!(\n             index < LLVMCountParams(llfn),\n@@ -203,7 +203,7 @@ pub fn get_param(llfn: &'a Value, index: c_uint) -> &'a Value {\n }\n \n /// Safe wrapper for `LLVMGetValueName2` into a byte slice\n-pub fn get_value_name(value: &'a Value) -> &'a [u8] {\n+pub fn get_value_name(value: &Value) -> &[u8] {\n     unsafe {\n         let mut len = 0;\n         let data = LLVMGetValueName2(value, &mut len);"}, {"sha": "5bc1475df23a7ff89a5a08a24e3dd5785d3667b8", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -240,7 +240,7 @@ impl Type {\n         unsafe { llvm::LLVMIntTypeInContext(llcx, num_bits as c_uint) }\n     }\n \n-    pub fn i8p_llcx(llcx: &'ll llvm::Context) -> &'ll Type {\n+    pub fn i8p_llcx(llcx: &llvm::Context) -> &Type {\n         Type::i8_llcx(llcx).ptr_to()\n     }\n "}, {"sha": "798d22ccd764cb4f8ad1e16fd82777ecbc8762e8", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -449,38 +449,38 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n     ) -> bool {\n-        // Emit a panic or a no-op for `panic_if_uninhabited`.\n+        // Emit a panic or a no-op for `assert_*` intrinsics.\n         // These are intrinsics that compile to panics so that we can get a message\n         // which mentions the offending type, even from a const context.\n         #[derive(Debug, PartialEq)]\n-        enum PanicIntrinsic {\n-            IfUninhabited,\n-            IfZeroInvalid,\n-            IfAnyInvalid,\n+        enum AssertIntrinsic {\n+            Inhabited,\n+            ZeroValid,\n+            UninitValid,\n         };\n         let panic_intrinsic = intrinsic.and_then(|i| match i {\n             // FIXME: Move to symbols instead of strings.\n-            \"panic_if_uninhabited\" => Some(PanicIntrinsic::IfUninhabited),\n-            \"panic_if_zero_invalid\" => Some(PanicIntrinsic::IfZeroInvalid),\n-            \"panic_if_any_invalid\" => Some(PanicIntrinsic::IfAnyInvalid),\n+            \"assert_inhabited\" => Some(AssertIntrinsic::Inhabited),\n+            \"assert_zero_valid\" => Some(AssertIntrinsic::ZeroValid),\n+            \"assert_uninit_valid\" => Some(AssertIntrinsic::UninitValid),\n             _ => None,\n         });\n         if let Some(intrinsic) = panic_intrinsic {\n-            use PanicIntrinsic::*;\n+            use AssertIntrinsic::*;\n             let ty = instance.unwrap().substs.type_at(0);\n             let layout = bx.layout_of(ty);\n             let do_panic = match intrinsic {\n-                IfUninhabited => layout.abi.is_uninhabited(),\n+                Inhabited => layout.abi.is_uninhabited(),\n                 // We unwrap as the error type is `!`.\n-                IfZeroInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n+                ZeroValid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n                 // We unwrap as the error type is `!`.\n-                IfAnyInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n+                UninitValid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n             };\n             if do_panic {\n                 let msg_str = if layout.abi.is_uninhabited() {\n                     // Use this error even for the other intrinsics as it is more precise.\n                     format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                } else if intrinsic == IfZeroInvalid {\n+                } else if intrinsic == ZeroValid {\n                     format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n                 } else {\n                     format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)"}, {"sha": "7ecf3e3cb8d5dbfc23b8cac2e62fdf091775d863", "filename": "src/librustc_data_structures/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -97,7 +97,7 @@ impl<N: Idx, S: Idx> GraphSuccessors<'graph> for Sccs<N, S> {\n }\n \n impl<N: Idx, S: Idx> WithSuccessors for Sccs<N, S> {\n-    fn successors<'graph>(&'graph self, node: S) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors(&self, node: S) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors(node).iter().cloned()\n     }\n }"}, {"sha": "064467174cae22f9b91812d6b9304e1d29a2d35d", "filename": "src/librustc_data_structures/graph/vec_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -101,7 +101,7 @@ impl<N: Idx> GraphSuccessors<'graph> for VecGraph<N> {\n }\n \n impl<N: Idx> WithSuccessors for VecGraph<N> {\n-    fn successors<'graph>(&'graph self, node: N) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors(&self, node: N) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors(node).iter().cloned()\n     }\n }"}, {"sha": "8acb2260cbe894e3b9247de271463de6c7937e59", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1124,12 +1124,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n         return None;\n     }\n \n-    let matches = if let Some(matches) = handle_options(&args) {\n-        matches\n-    } else {\n-        return None;\n-    };\n-\n+    let matches = handle_options(&args)?;\n     let mut result = Vec::new();\n     let mut excluded_cargo_defaults = false;\n     for flag in ICE_REPORT_COMPILER_FLAGS {"}, {"sha": "65fe1fec52643f673a08738c50a13763c5934a4a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -96,7 +96,7 @@ trait PrinterSupport: pprust::PpAnn {\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n     /// an object for one of its super-traits.)\n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn;\n+    fn pp_ann(&self) -> &dyn pprust::PpAnn;\n }\n \n trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n@@ -106,13 +106,13 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n \n     /// Provides a uniform interface for re-extracting a reference to an\n     /// `hir_map::Map` from a value that now owns it.\n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>>;\n+    fn hir_map(&self) -> Option<&hir_map::Map<'hir>>;\n \n     /// Produces the pretty-print annotation object.\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n     /// an object for one of its super-traits.)\n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn;\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn;\n \n     /// Computes an user-readable representation of a path, if possible.\n     fn node_path(&self, id: hir::HirId) -> Option<String> {\n@@ -132,7 +132,7 @@ impl<'hir> PrinterSupport for NoAnn<'hir> {\n         self.sess\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust::PpAnn {\n         self\n     }\n }\n@@ -142,11 +142,11 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n         self.sess\n     }\n \n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n+    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n         self.tcx.map(|tcx| *tcx.hir())\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n         self\n     }\n }\n@@ -170,7 +170,7 @@ impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n         self.sess\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust::PpAnn {\n         self\n     }\n }\n@@ -216,11 +216,11 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n         self.sess\n     }\n \n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n+    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n         self.tcx.map(|tcx| *tcx.hir())\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n         self\n     }\n }\n@@ -315,11 +315,11 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n         &self.tcx.sess\n     }\n \n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'tcx>> {\n+    fn hir_map(&self) -> Option<&hir_map::Map<'tcx>> {\n         Some(&self.tcx.hir())\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n         self\n     }\n "}, {"sha": "a98ada17a469c7801c8e0d27854f98ad1366bd08", "filename": "src/librustc_error_codes/error_codes/E0423.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0423.md", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0423.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0423.md?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,8 +1,7 @@\n An identifier was used like a function name or a value was expected and the\n identifier exists but it belongs to a different namespace.\n \n-For (an erroneous) example, here a `struct` variant name were used as a\n-function:\n+Erroneous code example:\n \n ```compile_fail,E0423\n struct Foo { a: bool };"}, {"sha": "8fd60412baf01d9cc05611932f9b1712cb5ff064", "filename": "src/librustc_error_codes/error_codes/E0434.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0434.md", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0434.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0434.md?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,6 +1,4 @@\n-This error indicates that a variable usage inside an inner function is invalid\n-because the variable comes from a dynamic environment. Inner functions do not\n-have access to their containing environment.\n+A variable used inside an inner function comes from a dynamic environment.\n \n Erroneous code example:\n \n@@ -14,8 +12,8 @@ fn foo() {\n }\n ```\n \n-Functions do not capture local variables. To fix this error, you can replace the\n-function with a closure:\n+Inner functions do not have access to their containing environment. To fix this\n+error, you can replace the function with a closure:\n \n ```\n fn foo() {\n@@ -26,7 +24,7 @@ fn foo() {\n }\n ```\n \n-or replace the captured variable with a constant or a static item:\n+Or replace the captured variable with a constant or a static item:\n \n ```\n fn foo() {"}, {"sha": "f8bd40d380d754a3c9e51d26d5787c64dbdb1ab2", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -284,7 +284,7 @@ pub trait Visitor<'v>: Sized {\n     /// If you use this, you probably don't want to process the\n     /// contents of nested item-like things, since the outer loop will\n     /// visit them as well.\n-    fn as_deep_visitor<'s>(&'s mut self) -> DeepVisitor<'s, Self> {\n+    fn as_deep_visitor(&mut self) -> DeepVisitor<'_, Self> {\n         DeepVisitor::new(self)\n     }\n "}, {"sha": "c2b62f9670c8bd84db80722cbdd619c12214e3e8", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -162,7 +162,7 @@ impl IfThisChanged<'tcx> {\n impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "c90b5abfe30e50944e84d89825f672d3eb0f314d", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -548,7 +548,7 @@ impl FindAllAttrs<'tcx> {\n impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "22576c088ff4110b355dea6240ce6a8c7cb6b1d7", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "23ad93c6a21aeefc040cc492ec260549166a971d", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -93,7 +93,7 @@ struct FindNestedTypeVisitor<'tcx> {\n impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "d221d6886e9fbd6edf8f21d50590fef73f78091a", "filename": "src/librustc_infer/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             return AutoTraitResult::ExplicitImpl;\n         }\n \n-        return tcx.infer_ctxt().enter(|mut infcx| {\n+        return tcx.infer_ctxt().enter(|infcx| {\n             let mut fresh_preds = FxHashSet::default();\n \n             // Due to the way projections are handled by SelectionContext, we need to run\n@@ -164,7 +164,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             let (full_env, full_user_env) = self\n                 .evaluate_predicates(\n-                    &mut infcx,\n+                    &infcx,\n                     trait_did,\n                     ty,\n                     new_env,"}, {"sha": "5f542e7e13be5affad47c7deb52169371017ff53", "filename": "src/librustc_infer/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -451,7 +451,7 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_non_local_constructor<'tcx>(ty: Ty<'tcx>, in_crate: InCrate) -> Option<Ty<'tcx>> {\n+fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>> {\n     debug!(\"ty_is_non_local_constructor({:?})\", ty);\n \n     match ty.kind {"}, {"sha": "d1d4a58fdf297369f1b580c2b8bdacadff8f64d9", "filename": "src/librustc_infer/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -413,12 +413,7 @@ pub(super) fn specialization_graph_provider(\n fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String> {\n     use std::fmt::Write;\n \n-    let trait_ref = if let Some(tr) = tcx.impl_trait_ref(impl_def_id) {\n-        tr\n-    } else {\n-        return None;\n-    };\n-\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id)?;\n     let mut w = \"impl\".to_owned();\n \n     let substs = InternalSubsts::identity_for_item(tcx, impl_def_id);"}, {"sha": "0964dfa28998eaa6673b0c11a6aecf8b542a153f", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -33,7 +33,7 @@ use std::slice;\n \n /// Extract the `LintStore` from the query context.\n /// This function exists because we've erased `LintStore` as `dyn Any` in the context.\n-crate fn unerased_lint_store<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx LintStore {\n+crate fn unerased_lint_store(tcx: TyCtxt<'_>) -> &LintStore {\n     let store: &dyn Any = &*tcx.lint_store;\n     store.downcast_ref().unwrap()\n }\n@@ -99,7 +99,7 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n         hir_visit::NestedVisitorMap::All(&self.context.tcx.hir())\n     }\n "}, {"sha": "0e85b8d2a39edf482ee0de20823b0cb16e038962", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -438,7 +438,7 @@ impl LintLevelMapBuilder<'_, '_> {\n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "605091d6c7d415b88fc8b3c602c1f96528a75b91", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn const_field<'tcx>(\n     op_to_const(&ecx, field)\n }\n \n-pub(crate) fn const_caller_location<'tcx>(\n+pub(crate) fn const_caller_location(\n     tcx: TyCtxt<'tcx>,\n     (file, line, col): (Symbol, u32, u32),\n ) -> ConstValue<'tcx> {"}, {"sha": "37a60bcc8368d35fb62b49124478b2af34a4ab67", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -84,14 +84,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let substs = instance.substs;\n         let intrinsic_name = self.tcx.item_name(instance.def_id());\n \n-        // We currently do not handle any intrinsics that are *allowed* to diverge,\n-        // but `transmute` could lack a return place in case of UB.\n+        // First handle intrinsics without return place.\n         let (dest, ret) = match ret {\n-            Some(p) => p,\n             None => match intrinsic_name {\n-                sym::transmute => throw_ub!(Unreachable),\n+                sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n+                sym::abort => M::abort(self)?,\n+                // Unsupported diverging intrinsic.\n                 _ => return Ok(false),\n             },\n+            Some(p) => p,\n         };\n \n         // Keep the patterns in this match ordered the same as the list in\n@@ -103,10 +104,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(location.ptr, dest)?;\n             }\n \n-            sym::abort => {\n-                M::abort(self)?;\n-            }\n-\n             sym::min_align_of\n             | sym::pref_align_of\n             | sym::needs_drop"}, {"sha": "aa9cad7ffc19fa67a886ef472633b4cb401fffcf", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -34,7 +34,7 @@ fn is_stable(place: PlaceRef<'_>) -> bool {\n }\n \n /// Determine whether this type may be a reference (or box), and thus needs retagging.\n-fn may_be_reference<'tcx>(ty: Ty<'tcx>) -> bool {\n+fn may_be_reference(ty: Ty<'tcx>) -> bool {\n     match ty.kind {\n         // Primitive types that are not references\n         ty::Bool"}, {"sha": "152a98c0c1aa2e0a93d3356da6a6aaa4764b59e7", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -453,7 +453,7 @@ struct UnusedUnsafeVisitor<'a> {\n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "27a1373cdcc7a573a81f0fa5784d3daf94f8a883", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -944,7 +944,7 @@ fn create_generator_drop_shim<'tcx>(\n     // unrelated code from the resume part of the function\n     simplify::remove_dead_blocks(&mut body);\n \n-    dump_mir(tcx, None, \"generator_drop\", &0, source, &mut body, |_, _| Ok(()));\n+    dump_mir(tcx, None, \"generator_drop\", &0, source, &body, |_, _| Ok(()));\n \n     body\n }"}, {"sha": "95e2db7508099323abe29c545da5029018ffd3a1", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -87,7 +87,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             intravisit::walk_struct_def(self, v)\n         }\n         type Map = Map<'tcx>;\n-        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "f6c6f55549593c6b57bf0586b527767411ffee56", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -293,7 +293,7 @@ fn dump_matched_mir_node<'tcx>(\n         writeln!(file, \"// MIR local liveness analysis for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n         writeln!(file, \"// pass_name = {}\", pass_name)?;\n-        writeln!(file, \"\")?;\n+        writeln!(file)?;\n         write_mir_fn(tcx, source, body, &mut file, result)?;\n         Ok(())\n     });\n@@ -316,7 +316,7 @@ pub fn write_mir_fn<'tcx>(\n         write_basic_block(tcx, block, body, &mut |_, _| Ok(()), w)?;\n         print(w, \"   \", &result.outs)?;\n         if block.index() + 1 != body.basic_blocks().len() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n     }\n "}, {"sha": "f8dfddef2bbd5a087e4ba08b4445fb37580c30f1", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -134,7 +134,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         if let Some(ref layout) = body.generator_layout {\n             writeln!(file, \"// generator_layout = {:?}\", layout)?;\n         }\n-        writeln!(file, \"\")?;\n+        writeln!(file)?;\n         extra_data(PassWhere::BeforeCFG, &mut file)?;\n         write_user_type_annotations(body, &mut file)?;\n         write_mir_fn(tcx, source, body, &mut extra_data, &mut file)?;\n@@ -242,13 +242,13 @@ pub fn write_mir_pretty<'tcx>(\n             first = false;\n         } else {\n             // Put empty lines between all items\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n \n         write_mir_fn(tcx, MirSource::item(def_id), body, &mut |_, _| Ok(()), w)?;\n \n         for (i, body) in tcx.promoted_mir(def_id).iter_enumerated() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n             let src = MirSource { instance: ty::InstanceDef::Item(def_id), promoted: Some(i) };\n             write_mir_fn(tcx, src, body, &mut |_, _| Ok(()), w)?;\n         }\n@@ -271,7 +271,7 @@ where\n         extra_data(PassWhere::BeforeBlock(block), w)?;\n         write_basic_block(tcx, block, body, extra_data, w)?;\n         if block.index() + 1 != body.basic_blocks().len() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n     }\n \n@@ -529,7 +529,7 @@ pub fn write_mir_intro<'tcx>(\n     write_scope_tree(tcx, body, &scope_tree, w, OUTERMOST_SOURCE_SCOPE, 1)?;\n \n     // Add an empty line before the first block is printed.\n-    writeln!(w, \"\")?;\n+    writeln!(w)?;\n \n     Ok(())\n }"}, {"sha": "884499ff2dd48a5e9407f9b396e59c29dd5f8671", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -271,11 +271,11 @@ pub fn stream_to_parser<'a>(\n /// The main usage of this function is outside of rustc, for those who uses\n /// librustc_ast as a library. Please do not remove this function while refactoring\n /// just because it is not used in rustc codebase!\n-pub fn stream_to_parser_with_base_dir<'a>(\n-    sess: &'a ParseSess,\n+pub fn stream_to_parser_with_base_dir(\n+    sess: &ParseSess,\n     stream: TokenStream,\n     base_dir: Directory,\n-) -> Parser<'a> {\n+) -> Parser<'_> {\n     Parser::new(sess, stream, Some(base_dir), true, false, None)\n }\n "}, {"sha": "7ee16de52beaba743f60b1b3a3034d85fe2509ff", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -418,7 +418,7 @@ impl CheckAttrVisitor<'tcx> {\n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "88e92bbdba1aa00021319ae1ff8914c8e52f8b17", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -143,7 +143,7 @@ impl LanguageItemCollector<'tcx> {\n }\n \n /// Traverses and collects all the lang items in all crates.\n-fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> LanguageItems {\n+fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n     // Initialize the collector.\n     let mut collector = LanguageItemCollector::new(tcx);\n "}, {"sha": "6be4f130c1f96aef89214f0c02c4150984d821ee", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -46,7 +46,7 @@ struct LocalCollector {\n impl Visitor<'tcx> for LocalCollector {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -75,7 +75,7 @@ impl CaptureCollector<'_, '_> {\n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "13d433052809db835d36652d6ef166aadc2c1d3f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1107,11 +1107,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 }\n             };\n \n-            match (\n-                lifetime_names.len(),\n-                lifetime_names.iter().next(),\n-                snippet.as_ref().map(|s| s.as_str()),\n-            ) {\n+            match (lifetime_names.len(), lifetime_names.iter().next(), snippet.as_deref()) {\n                 (1, Some(name), Some(\"&\")) => {\n                     suggest_existing(err, format!(\"&{} \", name));\n                 }"}, {"sha": "948b86225f38b7a6f735c54ec32c7069327a3a60", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -2773,12 +2773,8 @@ impl<'a> Resolver<'a> {\n             } else {\n                 let crate_id = if !speculative {\n                     self.crate_loader.process_path_extern(ident.name, ident.span)\n-                } else if let Some(crate_id) =\n-                    self.crate_loader.maybe_process_path_extern(ident.name, ident.span)\n-                {\n-                    crate_id\n                 } else {\n-                    return None;\n+                    self.crate_loader.maybe_process_path_extern(ident.name, ident.span)?\n                 };\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 Some("}, {"sha": "b5224e57cd2b6c4694e64564be4c39f272ff1068", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1147,11 +1147,7 @@ impl SourceFile {\n         }\n \n         let begin = {\n-            let line = if let Some(line) = self.lines.get(line_number) {\n-                line\n-            } else {\n-                return None;\n-            };\n+            let line = self.lines.get(line_number)?;\n             let begin: BytePos = *line - self.start_pos;\n             begin.to_usize()\n         };"}, {"sha": "e77bb6df8e642b0cf261dd3efda9f1d950b2b71b", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -603,7 +603,7 @@ impl ClauseDumper<'tcx> {\n impl Visitor<'tcx> for ClauseDumper<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "5a87cf4c10d0d1fd25112b1d5c828f0a23f99525", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -210,7 +210,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     }\n }\n \n-fn associated_items<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AssociatedItems {\n+fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AssociatedItems {\n     let items = tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did));\n     tcx.arena.alloc(ty::AssociatedItems::new(items))\n }"}, {"sha": "022b2e82964e0382e22da2af313908d571cece07", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -111,7 +111,7 @@ fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {\n     vec![]\n }\n \n-fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n+fn simple(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n     move |target| vec![Adjustment { kind, target }]\n }\n "}, {"sha": "dac67c2f5a27d6de650fffc1a9b7788ae3aac6cf", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -147,7 +147,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             ),\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n-            \"panic_if_uninhabited\" | \"panic_if_zero_invalid\" | \"panic_if_any_invalid\" => {\n+            \"assert_inhabited\" | \"assert_zero_valid\" | \"assert_uninit_valid\" => {\n                 (1, Vec::new(), tcx.mk_unit())\n             }\n             \"init\" => (1, Vec::new(), param(0)),"}, {"sha": "f7bbde35aa72e9e4a496e87d80ad35c3a2a424b5", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -860,7 +860,7 @@ enum Op {\n }\n \n /// Dereferences a single level of immutable referencing.\n-fn deref_ty_if_possible<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n+fn deref_ty_if_possible(ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.kind {\n         ty::Ref(_, ty, hir::Mutability::Not) => ty,\n         _ => ty,"}, {"sha": "7d7d34e45a634ab69b47f7b60a08c111b525c496", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -322,7 +322,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n     }\n }\n \n-pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n+pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n     let coerce_unsized_trait = tcx.lang_items().coerce_unsized_trait().unwrap();\n "}, {"sha": "153f7af9f97cae1d3151579e295bd1686be6af60", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -41,11 +41,7 @@ pub fn try_inline(\n     attrs: Option<Attrs<'_>>,\n     visited: &mut FxHashSet<DefId>,\n ) -> Option<Vec<clean::Item>> {\n-    let did = if let Some(did) = res.opt_def_id() {\n-        did\n-    } else {\n-        return None;\n-    };\n+    let did = res.opt_def_id()?;\n     if did.is_local() {\n         return None;\n     }\n@@ -578,7 +574,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n                     name: ref _name,\n                 },\n             ref bounds,\n-        } => !(*s == \"Self\" && did == trait_did) && !bounds.is_empty(),\n+        } => !(bounds.is_empty() || *s == \"Self\" && did == trait_did),\n         _ => true,\n     });\n     g"}, {"sha": "e13bf270440e20bfce4d11d5150e35acd8526c43", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -844,11 +844,7 @@ pub fn plain_summary_line(md: &str) -> String {\n         type Item = String;\n \n         fn next(&mut self) -> Option<String> {\n-            let next_event = self.inner.next();\n-            if next_event.is_none() {\n-                return None;\n-            }\n-            let next_event = next_event.unwrap();\n+            let next_event = self.inner.next()?;\n             let (ret, is_in) = match next_event {\n                 Event::Start(Tag::Paragraph) => (None, 1),\n                 Event::Start(Tag::Heading(_)) => (None, 1),\n@@ -870,7 +866,7 @@ pub fn plain_summary_line(md: &str) -> String {\n     }\n     let mut s = String::with_capacity(md.len() * 3 / 2);\n     let p = ParserWrapper { inner: Parser::new(md), is_in: 0, is_first: true };\n-    p.into_iter().filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n+    p.filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n     s\n }\n "}, {"sha": "ceae42cc598b4ada05ba9268e69d791ac7b9da31", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1543,7 +1543,7 @@ impl Context {\n         }\n \n         if self.shared.sort_modules_alphabetically {\n-            for (_, items) in &mut map {\n+            for items in map.values_mut() {\n                 items.sort();\n             }\n         }\n@@ -3396,10 +3396,8 @@ fn render_assoc_items(\n         let deref_impl =\n             traits.iter().find(|t| t.inner_impl().trait_.def_id() == c.deref_trait_did);\n         if let Some(impl_) = deref_impl {\n-            let has_deref_mut = traits\n-                .iter()\n-                .find(|t| t.inner_impl().trait_.def_id() == c.deref_mut_trait_did)\n-                .is_some();\n+            let has_deref_mut =\n+                traits.iter().any(|t| t.inner_impl().trait_.def_id() == c.deref_mut_trait_did);\n             render_deref_methods(w, cx, impl_, containing_item, has_deref_mut);\n         }\n \n@@ -3740,7 +3738,7 @@ fn render_impl(\n     ) {\n         for trait_item in &t.items {\n             let n = trait_item.name.clone();\n-            if i.items.iter().find(|m| m.name == n).is_some() {\n+            if i.items.iter().any(|m| m.name == n) {\n                 continue;\n             }\n             let did = i.trait_.as_ref().unwrap().def_id().unwrap();"}, {"sha": "6790f3bd5d0b19d2cf9cf573e5c0292ea4d965d9", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -8,106 +8,106 @@\n //! directly written to a `Write` handle.\n \n /// The file contents of the main `rustdoc.css` file, responsible for the core layout of the page.\n-pub static RUSTDOC_CSS: &'static str = include_str!(\"static/rustdoc.css\");\n+pub static RUSTDOC_CSS: &str = include_str!(\"static/rustdoc.css\");\n \n /// The file contents of `settings.css`, responsible for the items on the settings page.\n-pub static SETTINGS_CSS: &'static str = include_str!(\"static/settings.css\");\n+pub static SETTINGS_CSS: &str = include_str!(\"static/settings.css\");\n \n /// The file contents of the `noscript.css` file, used in case JS isn't supported or is disabled.\n-pub static NOSCRIPT_CSS: &'static str = include_str!(\"static/noscript.css\");\n+pub static NOSCRIPT_CSS: &str = include_str!(\"static/noscript.css\");\n \n /// The file contents of `normalize.css`, included to even out standard elements between browser\n /// implementations.\n-pub static NORMALIZE_CSS: &'static str = include_str!(\"static/normalize.css\");\n+pub static NORMALIZE_CSS: &str = include_str!(\"static/normalize.css\");\n \n /// The file contents of `main.js`, which contains the core JavaScript used on documentation pages,\n /// including search behavior and docblock folding, among others.\n-pub static MAIN_JS: &'static str = include_str!(\"static/main.js\");\n+pub static MAIN_JS: &str = include_str!(\"static/main.js\");\n \n /// The file contents of `settings.js`, which contains the JavaScript used to handle the settings\n /// page.\n-pub static SETTINGS_JS: &'static str = include_str!(\"static/settings.js\");\n+pub static SETTINGS_JS: &str = include_str!(\"static/settings.js\");\n \n /// The file contents of `storage.js`, which contains functionality related to browser Local\n /// Storage, used to store documentation settings.\n-pub static STORAGE_JS: &'static str = include_str!(\"static/storage.js\");\n+pub static STORAGE_JS: &str = include_str!(\"static/storage.js\");\n \n /// The file contents of `brush.svg`, the icon used for the theme-switch button.\n-pub static BRUSH_SVG: &'static [u8] = include_bytes!(\"static/brush.svg\");\n+pub static BRUSH_SVG: &[u8] = include_bytes!(\"static/brush.svg\");\n \n /// The file contents of `wheel.svg`, the icon used for the settings button.\n-pub static WHEEL_SVG: &'static [u8] = include_bytes!(\"static/wheel.svg\");\n+pub static WHEEL_SVG: &[u8] = include_bytes!(\"static/wheel.svg\");\n \n /// The file contents of `down-arrow.svg`, the icon used for the crate choice combobox.\n-pub static DOWN_ARROW_SVG: &'static [u8] = include_bytes!(\"static/down-arrow.svg\");\n+pub static DOWN_ARROW_SVG: &[u8] = include_bytes!(\"static/down-arrow.svg\");\n \n /// The contents of `COPYRIGHT.txt`, the license listing for files distributed with documentation\n /// output.\n-pub static COPYRIGHT: &'static [u8] = include_bytes!(\"static/COPYRIGHT.txt\");\n+pub static COPYRIGHT: &[u8] = include_bytes!(\"static/COPYRIGHT.txt\");\n \n /// The contents of `LICENSE-APACHE.txt`, the text of the Apache License, version 2.0.\n-pub static LICENSE_APACHE: &'static [u8] = include_bytes!(\"static/LICENSE-APACHE.txt\");\n+pub static LICENSE_APACHE: &[u8] = include_bytes!(\"static/LICENSE-APACHE.txt\");\n \n /// The contents of `LICENSE-MIT.txt`, the text of the MIT License.\n-pub static LICENSE_MIT: &'static [u8] = include_bytes!(\"static/LICENSE-MIT.txt\");\n+pub static LICENSE_MIT: &[u8] = include_bytes!(\"static/LICENSE-MIT.txt\");\n \n /// The contents of `rust-logo.png`, the default icon of the documentation.\n-pub static RUST_LOGO: &'static [u8] = include_bytes!(\"static/rust-logo.png\");\n+pub static RUST_LOGO: &[u8] = include_bytes!(\"static/rust-logo.png\");\n /// The contents of `favicon.ico`, the default favicon of the documentation.\n-pub static RUST_FAVICON: &'static [u8] = include_bytes!(\"static/favicon.ico\");\n+pub static RUST_FAVICON: &[u8] = include_bytes!(\"static/favicon.ico\");\n \n /// The built-in themes given to every documentation site.\n pub mod themes {\n     /// The \"light\" theme, selected by default when no setting is available. Used as the basis for\n     /// the `--check-theme` functionality.\n-    pub static LIGHT: &'static str = include_str!(\"static/themes/light.css\");\n+    pub static LIGHT: &str = include_str!(\"static/themes/light.css\");\n \n     /// The \"dark\" theme.\n-    pub static DARK: &'static str = include_str!(\"static/themes/dark.css\");\n+    pub static DARK: &str = include_str!(\"static/themes/dark.css\");\n }\n \n /// Files related to the Fira Sans font.\n pub mod fira_sans {\n     /// The file `FiraSans-Regular.woff`, the Regular variant of the Fira Sans font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/FiraSans-Regular.woff\");\n+    pub static REGULAR: &[u8] = include_bytes!(\"static/FiraSans-Regular.woff\");\n \n     /// The file `FiraSans-Medium.woff`, the Medium variant of the Fira Sans font.\n-    pub static MEDIUM: &'static [u8] = include_bytes!(\"static/FiraSans-Medium.woff\");\n+    pub static MEDIUM: &[u8] = include_bytes!(\"static/FiraSans-Medium.woff\");\n \n     /// The file `FiraSans-LICENSE.txt`, the license text for the Fira Sans font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n+    pub static LICENSE: &[u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n }\n \n /// Files related to the Source Serif Pro font.\n pub mod source_serif_pro {\n     /// The file `SourceSerifPro-Regular.ttf.woff`, the Regular variant of the Source Serif Pro\n     /// font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Regular.ttf.woff\");\n+    pub static REGULAR: &[u8] = include_bytes!(\"static/SourceSerifPro-Regular.ttf.woff\");\n \n     /// The file `SourceSerifPro-Bold.ttf.woff`, the Bold variant of the Source Serif Pro font.\n-    pub static BOLD: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Bold.ttf.woff\");\n+    pub static BOLD: &[u8] = include_bytes!(\"static/SourceSerifPro-Bold.ttf.woff\");\n \n     /// The file `SourceSerifPro-It.ttf.woff`, the Italic variant of the Source Serif Pro font.\n-    pub static ITALIC: &'static [u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n+    pub static ITALIC: &[u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n \n     /// The file `SourceSerifPro-LICENSE.txt`, the license text for the Source Serif Pro font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.md\");\n+    pub static LICENSE: &[u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.md\");\n }\n \n /// Files related to the Source Code Pro font.\n pub mod source_code_pro {\n     /// The file `SourceCodePro-Regular.woff`, the Regular variant of the Source Code Pro font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceCodePro-Regular.woff\");\n+    pub static REGULAR: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.woff\");\n \n     /// The file `SourceCodePro-Semibold.woff`, the Semibold variant of the Source Code Pro font.\n-    pub static SEMIBOLD: &'static [u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n+    pub static SEMIBOLD: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n+    pub static LICENSE: &[u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n }\n \n /// Files related to the sidebar in rustdoc sources.\n pub mod sidebar {\n     /// File script to handle sidebar.\n-    pub static SOURCE_SCRIPT: &'static str = include_str!(\"static/source-script.js\");\n+    pub static SOURCE_SCRIPT: &str = include_str!(\"static/source-script.js\");\n }"}, {"sha": "dc831432c176f22d861f30fd8b1d5871071239f2", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1050,6 +1050,7 @@ impl<'a> DerefMut for IoSliceMut<'a> {\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+#[derive(Copy, Clone)]\n #[repr(transparent)]\n pub struct IoSlice<'a>(sys::io::IoSlice<'a>);\n "}, {"sha": "2702de15b858a5c80b5111de9e0f859ceb84d939", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -925,9 +925,15 @@ mod mut_keyword {}\n //\n /// Make an item visible to others.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// The keyword `pub` makes any module, function, or data structure accessible from inside\n+/// of external modules. The `pub` keyword may also be used in a `use` declaration to re-export\n+/// an identifier from a namespace.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// For more information on the `pub` keyword, please see the visibility section\n+/// of the [reference] and for some examples, see [Rust by Example].\n+///\n+/// [reference]:../reference/visibility-and-privacy.html?highlight=pub#visibility-and-privacy\n+/// [Rust by Example]:../rust-by-example/mod/visibility.html\n mod pub_keyword {}\n \n #[doc(keyword = \"ref\")]"}, {"sha": "d5f475b4310fde64b7f0f50154c14d345ce3788f", "filename": "src/libstd/sys/cloudabi/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,5 +1,6 @@\n use crate::mem;\n \n+#[derive(Copy, Clone)]\n pub struct IoSlice<'a>(&'a [u8]);\n \n impl<'a> IoSlice<'a> {"}, {"sha": "d5f475b4310fde64b7f0f50154c14d345ce3788f", "filename": "src/libstd/sys/hermit/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fhermit%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fhermit%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,5 +1,6 @@\n use crate::mem;\n \n+#[derive(Copy, Clone)]\n pub struct IoSlice<'a>(&'a [u8]);\n \n impl<'a> IoSlice<'a> {"}, {"sha": "d5f475b4310fde64b7f0f50154c14d345ce3788f", "filename": "src/libstd/sys/sgx/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,5 +1,6 @@\n use crate::mem;\n \n+#[derive(Copy, Clone)]\n pub struct IoSlice<'a>(&'a [u8]);\n \n impl<'a> IoSlice<'a> {"}, {"sha": "deb5ee76bd035381f91e76e18bccc87de4ad5d6e", "filename": "src/libstd/sys/unix/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -3,6 +3,7 @@ use crate::slice;\n \n use libc::{c_void, iovec};\n \n+#[derive(Copy, Clone)]\n #[repr(transparent)]\n pub struct IoSlice<'a> {\n     vec: iovec,"}, {"sha": "0f68ebf8da9cc43577482eb6f62dad433e701007", "filename": "src/libstd/sys/vxworks/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fvxworks%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fvxworks%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -3,6 +3,7 @@ use crate::slice;\n \n use libc::{c_void, iovec};\n \n+#[derive(Copy, Clone)]\n #[repr(transparent)]\n pub struct IoSlice<'a> {\n     vec: iovec,"}, {"sha": "0ad2e152855b79dd937647354af773762e8d291f", "filename": "src/libstd/sys/wasi/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,6 +1,7 @@\n use crate::marker::PhantomData;\n use crate::slice;\n \n+#[derive(Copy, Clone)]\n #[repr(transparent)]\n pub struct IoSlice<'a> {\n     vec: wasi::Ciovec,"}, {"sha": "d5f475b4310fde64b7f0f50154c14d345ce3788f", "filename": "src/libstd/sys/wasm/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,5 +1,6 @@\n use crate::mem;\n \n+#[derive(Copy, Clone)]\n pub struct IoSlice<'a>(&'a [u8]);\n \n impl<'a> IoSlice<'a> {"}, {"sha": "d7e1a8010308ae9de3d8b9ee8c883c9f783603e5", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -295,6 +295,7 @@ pub struct WSADATA {\n     pub szSystemStatus: [u8; WSASYS_STATUS_LEN + 1],\n }\n \n+#[derive(Copy, Clone)]\n #[repr(C)]\n pub struct WSABUF {\n     pub len: ULONG,"}, {"sha": "5525d2832526f0f4baaa69e5590a83e998e8e097", "filename": "src/libstd/sys/windows/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -2,6 +2,7 @@ use crate::marker::PhantomData;\n use crate::slice;\n use crate::sys::c;\n \n+#[derive(Copy, Clone)]\n #[repr(transparent)]\n pub struct IoSlice<'a> {\n     vec: c::WSABUF,"}, {"sha": "2c7ba8f8ea1fd97cbba071815a611871a36adb6a", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -70,7 +70,7 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n     let mut print_path = move |fmt: &mut fmt::Formatter<'_>, bows: BytesOrWideString<'_>| {\n         output_filename(fmt, bows, print_fmt, cwd.as_ref())\n     };\n-    write!(fmt, \"stack backtrace:\\n\")?;\n+    writeln!(fmt, \"stack backtrace:\")?;\n     let mut bt_fmt = BacktraceFmt::new(fmt, print_fmt, &mut print_path);\n     bt_fmt.add_context()?;\n     let mut idx = 0;"}, {"sha": "f3a2962098b4d484865a2b687eb6fa6f02a09e42", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -47,7 +47,7 @@ impl CommandEnv {\n             }\n         }\n         for (key, maybe_val) in self.vars.iter() {\n-            if let &Some(ref val) = maybe_val {\n+            if let Some(ref val) = maybe_val {\n                 env::set_var(key, val);\n             } else {\n                 env::remove_var(key);"}, {"sha": "7509e1ee35dee7821cade4f2afe4d1e04dec06a5", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -603,8 +603,8 @@ impl Wtf8 {\n         if len < 3 {\n             return None;\n         }\n-        match &self.bytes[(len - 3)..] {\n-            &[0xED, b2 @ 0xA0..=0xAF, b3] => Some(decode_surrogate(b2, b3)),\n+        match self.bytes[(len - 3)..] {\n+            [0xED, b2 @ 0xA0..=0xAF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None,\n         }\n     }\n@@ -615,8 +615,8 @@ impl Wtf8 {\n         if len < 3 {\n             return None;\n         }\n-        match &self.bytes[..3] {\n-            &[0xED, b2 @ 0xB0..=0xBF, b3] => Some(decode_surrogate(b2, b3)),\n+        match self.bytes[..3] {\n+            [0xED, b2 @ 0xB0..=0xBF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None,\n         }\n     }"}, {"sha": "ff741e3bd53bec702ece44826a2ce927c51de46b", "filename": "src/libtest/console.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fconsole.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -169,7 +169,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n \n     if !quiet {\n         if ntest != 0 || nbench != 0 {\n-            writeln!(output, \"\")?;\n+            writeln!(output)?;\n         }\n \n         writeln!(output, \"{}, {}\", plural(ntest, \"test\"), plural(nbench, \"benchmark\"))?;"}, {"sha": "1fb840520a6567e41d4f3de7a854da7ac6e44d7c", "filename": "src/libtest/formatters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fmod.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -36,5 +36,5 @@ pub(crate) fn write_stderr_delimiter(test_output: &mut Vec<u8>, test_name: &Test\n         Some(_) => test_output.push(b'\\n'),\n         None => (),\n     }\n-    write!(test_output, \"---- {} stderr ----\\n\", test_name).unwrap();\n+    writeln!(test_output, \"---- {} stderr ----\", test_name).unwrap();\n }"}, {"sha": "077005371c0cf1c70573a890a510500852aaf9b0", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -204,7 +204,7 @@ impl Stats for [f64] {\n     }\n \n     fn median(&self) -> f64 {\n-        self.percentile(50 as f64)\n+        self.percentile(50_f64)\n     }\n \n     fn var(&self) -> f64 {\n@@ -230,7 +230,7 @@ impl Stats for [f64] {\n     }\n \n     fn std_dev_pct(&self) -> f64 {\n-        let hundred = 100 as f64;\n+        let hundred = 100_f64;\n         (self.std_dev() / self.mean()) * hundred\n     }\n \n@@ -244,7 +244,7 @@ impl Stats for [f64] {\n     }\n \n     fn median_abs_dev_pct(&self) -> f64 {\n-        let hundred = 100 as f64;\n+        let hundred = 100_f64;\n         (self.median_abs_dev() / self.median()) * hundred\n     }\n \n@@ -257,11 +257,11 @@ impl Stats for [f64] {\n     fn quartiles(&self) -> (f64, f64, f64) {\n         let mut tmp = self.to_vec();\n         local_sort(&mut tmp);\n-        let first = 25f64;\n+        let first = 25_f64;\n         let a = percentile_of_sorted(&tmp, first);\n-        let second = 50f64;\n+        let second = 50_f64;\n         let b = percentile_of_sorted(&tmp, second);\n-        let third = 75f64;\n+        let third = 75_f64;\n         let c = percentile_of_sorted(&tmp, third);\n         (a, b, c)\n     }\n@@ -281,7 +281,7 @@ fn percentile_of_sorted(sorted_samples: &[f64], pct: f64) -> f64 {\n     }\n     let zero: f64 = 0.0;\n     assert!(zero <= pct);\n-    let hundred = 100f64;\n+    let hundred = 100_f64;\n     assert!(pct <= hundred);\n     if pct == hundred {\n         return sorted_samples[sorted_samples.len() - 1];\n@@ -307,7 +307,7 @@ pub fn winsorize(samples: &mut [f64], pct: f64) {\n     let mut tmp = samples.to_vec();\n     local_sort(&mut tmp);\n     let lo = percentile_of_sorted(&tmp, pct);\n-    let hundred = 100 as f64;\n+    let hundred = 100_f64;\n     let hi = percentile_of_sorted(&tmp, hundred - pct);\n     for samp in samples {\n         if *samp > hi {"}, {"sha": "5b75d2f367fff3ef09c332e6882c60fbffc4012e", "filename": "src/libtest/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Flibtest%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftypes.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -59,10 +59,10 @@ impl TestName {\n     }\n \n     pub fn with_padding(&self, padding: NamePadding) -> TestName {\n-        let name = match self {\n-            &TestName::StaticTestName(name) => Cow::Borrowed(name),\n-            &TestName::DynTestName(ref name) => Cow::Owned(name.clone()),\n-            &TestName::AlignedTestName(ref name, _) => name.clone(),\n+        let name = match *self {\n+            TestName::StaticTestName(name) => Cow::Borrowed(name),\n+            TestName::DynTestName(ref name) => Cow::Owned(name.clone()),\n+            TestName::AlignedTestName(ref name, _) => name.clone(),\n         };\n \n         TestName::AlignedTestName(name, padding)"}, {"sha": "caa5c2e0b9f965f1288a82b33a4b861b9fed8e50", "filename": "src/test/ui/asm/issue-69092.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,10 @@\n+// build-fail\n+// ignore-emscripten no asm! support\n+// Regression test for #69092\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe { asm!(\".ascii \\\"Xen\\0\\\"\"); }\n+    //~^ ERROR: <inline asm>:1:9: error: expected string in '.ascii' directive\n+}"}, {"sha": "5661097cb8b804fec8bec3464a08fe01a27d145f", "filename": "src/test/ui/asm/issue-69092.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,11 @@\n+error: <inline asm>:1:9: error: expected string in '.ascii' directive\n+        .ascii \"Xen\n+               ^\n+\n+  --> $DIR/issue-69092.rs:8:14\n+   |\n+LL |     unsafe { asm!(\".ascii \\\"Xen\\0\\\"\"); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "74ed3d354fc747562ff3d2b87a0cd1003bac99b3", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for #62504\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait HasSize {\n+    const SIZE: usize;\n+}\n+\n+impl<const X: usize> HasSize for ArrayHolder<{ X }> {\n+    const SIZE: usize = X;\n+}\n+\n+struct ArrayHolder<const X: usize>([u32; X]);\n+\n+impl<const X: usize> ArrayHolder<{ X }> {\n+    pub const fn new() -> Self {\n+        ArrayHolder([0; Self::SIZE])\n+        //~^ ERROR: array lengths can't depend on generic parameters\n+    }\n+}\n+\n+fn main() {\n+    let mut array = ArrayHolder::new();\n+}"}, {"sha": "c2a752ec1715fc2f6d8b6c77258d9af1d6e59e83", "filename": "src/test/ui/const-generics/issues/issue-62504.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,8 @@\n+error: array lengths can't depend on generic parameters\n+  --> $DIR/issue-62504.rs:18:25\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                         ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "79c5ac9dd187e035f8be0b93c60a6eb025e7bf3e", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #67739\n+\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+use std::mem;\n+\n+pub trait Trait {\n+    type Associated: Sized;\n+\n+    fn associated_size(&self) -> usize {\n+        [0u8; mem::size_of::<Self::Associated>()];\n+        //~^ ERROR: array lengths can't depend on generic parameters\n+        0\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a31b556c086f8301a3f476670300907c2fe608df", "filename": "src/test/ui/const-generics/issues/issue-67739.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,8 @@\n+error: array lengths can't depend on generic parameters\n+  --> $DIR/issue-67739.rs:12:15\n+   |\n+LL |         [0u8; mem::size_of::<Self::Associated>()];\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9a36d37943f301c2538f4220a1b8f0c6f311352", "filename": "src/test/ui/consts/const-eval/const_prop_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_prop_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_prop_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_prop_errors.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub trait Foo {\n     fn foo(self) -> u32;"}, {"sha": "c61239bb677e8841e9f4d10d9e7176644b240085", "filename": "src/test/ui/consts/const-eval/const_signed_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_signed_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_signed_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_signed_pat.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn main() {\n     const MIN: i8 = -5;"}, {"sha": "f156d259abb202bcf6b5e858e343e2d6cda882b5", "filename": "src/test/ui/consts/const-eval/double_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n enum Foo {\n     A = 5,"}, {"sha": "48f4426d9cff48671fe89dac60d0d78b359704f5", "filename": "src/test/ui/consts/const-eval/double_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(const_fn, rustc_attrs)]\n "}, {"sha": "87b12937dd4f230f282c3b8dbcedf29e879739af", "filename": "src/test/ui/consts/const-eval/duration_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n use std::time::Duration;\n "}, {"sha": "f210d1a0a90c59acf3b3c9e5e829d3ad4a83347a", "filename": "src/test/ui/consts/const-eval/extern_fat_pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fextern_fat_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fextern_fat_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fextern_fat_pointer.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(extern_types)]\n "}, {"sha": "4444cdfcda9c7ae27383ae140b6ef8a91cfaba85", "filename": "src/test/ui/consts/const-eval/ice-generic-assoc-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub trait Nullable {\n     const NULL: Self;"}, {"sha": "4758a5a9d561c2232809224347735dea563adef9", "filename": "src/test/ui/consts/const-eval/ice-packed.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-packed.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,7 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// Regression test for #50356: Compiler panic when using repr(packed)\n+// associated constant in a match arm\n+\n+// check-pass\n #[derive(Copy, Clone, PartialEq, Eq)]\n #[repr(packed)]\n pub struct Num(u64);"}, {"sha": "b98e76031d4f300434acd1500144e6d5edae2fdb", "filename": "src/test/ui/consts/const-eval/issue-47971.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n struct S(pub &'static u32, pub u32);\n "}, {"sha": "a13c27f2e780269c61a2a9993829c1a4740625d6", "filename": "src/test/ui/consts/const-eval/issue-50706.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50706.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub struct Stats;\n "}, {"sha": "8e68e8c911785bb0b99b2784d12fa0091d326e95", "filename": "src/test/ui/consts/const-eval/issue-51300.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-51300.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-51300.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-51300.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // https://github.com/rust-lang/rust/issues/51300\n \n #[derive(PartialEq, Eq, Clone, Copy)]"}, {"sha": "850338625bc0136387fc88a282a8d3d9f69a37e9", "filename": "src/test/ui/consts/const-eval/issue-53157.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53157.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n macro_rules! m {\n     () => {{"}, {"sha": "31c946c3cb7613a2dd07234a9080c88b4744ab5c", "filename": "src/test/ui/consts/const-eval/issue-53401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub const STATIC_TRAIT: &dyn Test = &();\n "}, {"sha": "4c9e10d9cbe16503eb82481c2d74d57be036d538", "filename": "src/test/ui/consts/const-eval/issue-55541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // Test that we can handle newtypes wrapping extern types\n "}, {"sha": "910ca3c4bcbb601ad768722c22ea1a9e7b5d1cbf", "filename": "src/test/ui/consts/const-eval/no_lint_for_statically_known_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fno_lint_for_statically_known_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fno_lint_for_statically_known_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fno_lint_for_statically_known_error.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // if `X` were used instead of `x`, `X - 10` would result in a lint.\n // This file should never produce a lint, no matter how the const"}, {"sha": "edda10e6e82e97535027f53d6dc36641189ff0f7", "filename": "src/test/ui/consts/const-eval/promote_mutable_zst_mir_borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub fn main() {\n     let y: &'static mut [u8; 0] = &mut [];"}, {"sha": "ad165d40a76f27b8e45ee6a88a12f70d24cb8676", "filename": "src/test/ui/consts/const-eval/pub_const_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![warn(const_err)]\n \n #![crate_type = \"lib\"]"}, {"sha": "078e4c896df80ec3e257d61d7f548e556770c81b", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![warn(const_err)]\n \n pub const Z: u32 = 0 - 1;"}, {"sha": "1a416dd460d684cc9ea8054aed9fa47f99cb00f5", "filename": "src/test/ui/consts/const-eval/simple_with_undef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimple_with_undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimple_with_undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimple_with_undef.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n const PARSE_BOOL: Option<&'static str> = None;\n static FOO: (Option<&str>, u32) = (PARSE_BOOL, 42);"}, {"sha": "cede356a6b8a190ba48585677ee7b83174b45575", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              entering unreachable code\n+   |              transmuting to uninhabited type\n    |              inside call to `foo` at $DIR/validate_uninhabited_zsts.rs:14:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];"}, {"sha": "5f7ddf7f758e0b50eae396d63f2a4faa37e7eec7", "filename": "src/test/ui/consts/const-eval/zst_operand_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fzst_operand_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fzst_operand_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fzst_operand_eval.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n static ASSERT: () = [()][!(std::mem::size_of::<u32>() == 4) as usize];\n "}, {"sha": "97e71c9a1ce40bb9a4e83641a5786c133ae71d85", "filename": "src/test/ui/macros/issue-58490.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fmacros%2Fissue-58490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fmacros%2Fissue-58490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-58490.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for #58490\n+\n+macro_rules! a {\n+    ( @1 $i:item ) => {\n+        a! { @2 $i }\n+    };\n+    ( @2 $i:item ) => {\n+        $i\n+    };\n+}\n+mod b {\n+    a! {\n+        @1\n+        #[macro_export]\n+        macro_rules! b { () => () }\n+    }\n+    #[macro_export]\n+    macro_rules! b { () => () }\n+    //~^ ERROR: the name `b` is defined multiple times\n+}\n+mod c {\n+    #[allow(unused_imports)]\n+    use crate::b;\n+}\n+\n+fn main() {}"}, {"sha": "b1f0896f3b65c920457458271c801e239f32d295", "filename": "src/test/ui/macros/issue-58490.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fmacros%2Fissue-58490.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fmacros%2Fissue-58490.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-58490.stderr?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,14 @@\n+error[E0428]: the name `b` is defined multiple times\n+  --> $DIR/issue-58490.rs:18:5\n+   |\n+LL |         macro_rules! b { () => () }\n+   |         -------------- previous definition of the macro `b` here\n+...\n+LL |     macro_rules! b { () => () }\n+   |     ^^^^^^^^^^^^^^ `b` redefined here\n+   |\n+   = note: `b` must be defined only once in the macro namespace of this module\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0428`."}, {"sha": "fd9d6b46dd4440a9e29bc03efbe581e0746854c0", "filename": "src/test/ui/mir/issue-60390.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fmir%2Fissue-60390.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/src%2Ftest%2Fui%2Fmir%2Fissue-60390.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-60390.rs?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+// compile-flags: --emit=mir,link\n+// Regression test for #60390, this ICE requires `--emit=mir` flag.\n+\n+fn main() {\n+    enum Inner { Member(u32) };\n+    Inner::Member(0);\n+}"}, {"sha": "ec32771583334b6d56ce52309f64917d0ec4ccf1", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1572c433eed495d0ade41511ae106b180e02851d/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1572c433eed495d0ade41511ae106b180e02851d/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=1572c433eed495d0ade41511ae106b180e02851d", "patch": "@@ -11,6 +11,7 @@ allow-unauthenticated = [\n [assign]\n \n [ping.icebreakers-llvm]\n+alias = [\"llvm\", \"llvms\"]\n message = \"\"\"\\\n Hey LLVM ICE-breakers! This bug has been identified as a good\n \"LLVM ICE-breaking candidate\". In case it's useful, here are some\n@@ -22,6 +23,7 @@ Thanks! <3\n label = \"ICEBreaker-LLVM\"\n \n [ping.icebreakers-cleanup-crew]\n+alias = [\"cleanup\", \"cleanups\", \"shrink\", \"reduce\", \"bisect\"]\n message = \"\"\"\\\n Hey Cleanup Crew ICE-breakers! This bug has been identified as a good\n \"Cleanup ICE-breaking candidate\". In case it's useful, here are some"}]}