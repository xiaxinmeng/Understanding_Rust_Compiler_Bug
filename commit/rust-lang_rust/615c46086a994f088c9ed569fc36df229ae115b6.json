{"sha": "615c46086a994f088c9ed569fc36df229ae115b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNWM0NjA4NmE5OTRmMDg4YzllZDU2OWZjMzZkZjIyOWFlMTE1YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T00:45:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T00:45:00Z"}, "message": "Auto merge of #63341 - Centril:rollup-hkhxahb, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #63034 (Fix generator size regressions due to optimization)\n - #63035 (Use MaybeUninit to produce more correct layouts)\n - #63163 (add a pair of whitespace after remove parentheses)\n - #63294 (tests for async/await drop order)\n - #63307 (don't ignore mir_dump folder)\n - #63308 (PlaceRef's base is already a reference)\n - #63310 (Tests around moving parts of structs and tuples across await points)\n - #63314 (doc: the content has since been moved to the guide)\n - #63333 (Remove unnecessary features from compiler error code list)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "19e1de19f35bd7d06ba2e3c8c0bfce72092b662f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e1de19f35bd7d06ba2e3c8c0bfce72092b662f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/615c46086a994f088c9ed569fc36df229ae115b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/615c46086a994f088c9ed569fc36df229ae115b6", "html_url": "https://github.com/rust-lang/rust/commit/615c46086a994f088c9ed569fc36df229ae115b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/615c46086a994f088c9ed569fc36df229ae115b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c326c2e0f1761d133f295a8fe6d2b5a0b7ac6f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/c326c2e0f1761d133f295a8fe6d2b5a0b7ac6f91", "html_url": "https://github.com/rust-lang/rust/commit/c326c2e0f1761d133f295a8fe6d2b5a0b7ac6f91"}, {"sha": "c8ea26e6ffeaf46cf217cb5a51f6c5cfd91b4f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ea26e6ffeaf46cf217cb5a51f6c5cfd91b4f44", "html_url": "https://github.com/rust-lang/rust/commit/c8ea26e6ffeaf46cf217cb5a51f6c5cfd91b4f44"}], "stats": {"total": 1672, "additions": 1599, "deletions": 73}, "files": [{"sha": "b53b06b03cac6c6721dc305d82bea2755537d824", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -52,7 +52,6 @@ config.mk\n config.stamp\n keywords.md\n lexer.ml\n-mir_dump\n Session.vim\n src/etc/dl\n tmp.*.rs"}, {"sha": "32ca4a105741b9f09754a40d2da21f5095fb056f", "filename": "src/README.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -5,10 +5,7 @@ This directory contains the source code of the rust project, including:\n \n For more information on how various parts of the compiler work, see the [rustc guide].\n \n-There is also useful content in the following READMEs, which are gradually being moved over to the guide:\n-- https://github.com/rust-lang/rust/tree/master/src/librustc/ty/query\n-- https://github.com/rust-lang/rust/tree/master/src/librustc/dep_graph\n-- https://github.com/rust-lang/rust/tree/master/src/librustc/infer/higher_ranked\n-- https://github.com/rust-lang/rust/tree/master/src/librustc/infer/lexical_region_resolve\n+There is also useful content in this README:\n+https://github.com/rust-lang/rust/tree/master/src/librustc/infer/lexical_region_resolve.\n \n [rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html"}, {"sha": "8d064de6f4751da48c1dc68fd33ef8fdd1f0d1f7", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -209,6 +209,8 @@ use crate::mem::ManuallyDrop;\n /// guarantee may evolve.\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+// Lang item so we can wrap other types in it. This is useful for generators.\n+#[cfg_attr(not(bootstrap), lang = \"maybe_uninit\")]\n #[derive(Copy)]\n #[repr(transparent)]\n pub union MaybeUninit<T> {"}, {"sha": "c5c8639324358123035b0f1bcf2145254b56d8da", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -365,6 +365,8 @@ language_item_table! {\n \n     ManuallyDropItem,            \"manually_drop\",      manually_drop,           Target::Struct;\n \n+    MaybeUninitLangItem,         \"maybe_uninit\",       maybe_uninit,            Target::Union;\n+\n     DebugTraitLangItem,          \"debug_trait\",        debug_trait,             Target::Trait;\n \n     // Align offset for stride != 1, must not panic."}, {"sha": "dadc126eba48ec062c2cb0e16d900edbc6e51d18", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -2347,18 +2347,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Foreign(def_id))\n     }\n \n-    pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n-        let adt_def = self.adt_def(def_id);\n-        let substs = InternalSubsts::for_item(self, def_id, |param, substs| {\n+    fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {\n+        let adt_def = self.adt_def(wrapper_def_id);\n+        let substs = InternalSubsts::for_item(self, wrapper_def_id, |param, substs| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime |\n                 GenericParamDefKind::Const => {\n                     bug!()\n                 }\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if param.index == 0 {\n-                        ty.into()\n+                        ty_param.into()\n                     } else {\n                         assert!(has_default);\n                         self.type_of(param.def_id).subst(self, substs).into()\n@@ -2369,6 +2368,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Adt(adt_def, substs))\n     }\n \n+    #[inline]\n+    pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n+        self.mk_generic_adt(def_id, ty)\n+    }\n+\n+    #[inline]\n+    pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        let def_id = self.require_lang_item(lang_items::MaybeUninitLangItem);\n+        self.mk_generic_adt(def_id, ty)\n+    }\n+\n     #[inline]\n     pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(RawPtr(tm))"}, {"sha": "1c9a5ad621854b7bfd887eb79742098ec7118d34", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -1368,6 +1368,27 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             }\n         }\n \n+        // Count the number of variants in use. If only one of them, then it is\n+        // impossible to overlap any locals in our layout. In this case it's\n+        // always better to make the remaining locals ineligible, so we can\n+        // lay them out with the other locals in the prefix and eliminate\n+        // unnecessary padding bytes.\n+        {\n+            let mut used_variants = BitSet::new_empty(info.variant_fields.len());\n+            for assignment in &assignments {\n+                match assignment {\n+                    Assigned(idx) => { used_variants.insert(*idx); }\n+                    _ => {}\n+                }\n+            }\n+            if used_variants.count() < 2 {\n+                for assignment in assignments.iter_mut() {\n+                    *assignment = Ineligible(None);\n+                }\n+                ineligible_locals.insert_all();\n+            }\n+        }\n+\n         // Write down the order of our locals that will be promoted to the prefix.\n         {\n             let mut idx = 0u32;\n@@ -1406,24 +1427,21 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             Abi::Scalar(s) => s.clone(),\n             _ => bug!(),\n         };\n-        // FIXME(eddyb) wrap each promoted type in `MaybeUninit` so that they\n-        // don't poison the `largest_niche` or `abi` fields of `prefix`.\n         let promoted_layouts = ineligible_locals.iter()\n             .map(|local| subst_field(info.field_tys[local]))\n+            .map(|ty| tcx.mk_maybe_uninit(ty))\n             .map(|ty| self.layout_of(ty));\n         let prefix_layouts = substs.prefix_tys(def_id, tcx)\n             .map(|ty| self.layout_of(ty))\n             .chain(iter::once(Ok(discr_layout)))\n             .chain(promoted_layouts)\n             .collect::<Result<Vec<_>, _>>()?;\n-        let mut prefix = self.univariant_uninterned(\n+        let prefix = self.univariant_uninterned(\n             ty,\n             &prefix_layouts,\n             &ReprOptions::default(),\n             StructKind::AlwaysSized,\n         )?;\n-        // FIXME(eddyb) need `MaybeUninit` around promoted types (see above).\n-        prefix.largest_niche = None;\n \n         let (prefix_size, prefix_align) = (prefix.size, prefix.align);\n "}, {"sha": "6a3dfdbe316848797e492169d2a75ce2e62d3d3b", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 83, "deletions": 27, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -15,7 +15,7 @@ use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n use syntax::symbol::Symbol;\n use syntax::util::parser;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, BytePos};\n \n use rustc::hir;\n \n@@ -353,31 +353,46 @@ declare_lint! {\n declare_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n \n impl UnusedParens {\n+\n+    fn is_expr_parens_necessary(inner: &ast::Expr, followed_by_block: bool) -> bool {\n+        followed_by_block && match inner.node {\n+            ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n+            _ => parser::contains_exterior_struct_lit(&inner),\n+        }\n+    }\n+\n     fn check_unused_parens_expr(&self,\n-                                cx: &EarlyContext<'_>,\n-                                value: &ast::Expr,\n-                                msg: &str,\n-                                followed_by_block: bool) {\n+                                     cx: &EarlyContext<'_>,\n+                                     value: &ast::Expr,\n+                                     msg: &str,\n+                                     followed_by_block: bool,\n+                                     left_pos: Option<BytePos>,\n+                                     right_pos: Option<BytePos>) {\n         match value.node {\n             ast::ExprKind::Paren(ref inner) => {\n-                let necessary = followed_by_block && match inner.node {\n-                    ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n-                    _ => parser::contains_exterior_struct_lit(&inner),\n-                };\n-                if !necessary {\n+                if !Self::is_expr_parens_necessary(inner, followed_by_block) {\n                     let expr_text = if let Ok(snippet) = cx.sess().source_map()\n                         .span_to_snippet(value.span) {\n                             snippet\n                         } else {\n                             pprust::expr_to_string(value)\n                         };\n-                    Self::remove_outer_parens(cx, value.span, &expr_text, msg);\n+                    let keep_space = (\n+                        left_pos.map(|s| s >= value.span.lo()).unwrap_or(false),\n+                        right_pos.map(|s| s <= value.span.hi()).unwrap_or(false),\n+                    );\n+                    Self::remove_outer_parens(cx, value.span, &expr_text, msg, keep_space);\n                 }\n             }\n             ast::ExprKind::Let(_, ref expr) => {\n                 // FIXME(#60336): Properly handle `let true = (false && true)`\n                 // actually needing the parenthesis.\n-                self.check_unused_parens_expr(cx, expr, \"`let` head expression\", followed_by_block);\n+                self.check_unused_parens_expr(\n+                    cx, expr,\n+                    \"`let` head expression\",\n+                    followed_by_block,\n+                    None, None\n+                );\n             }\n             _ => {}\n         }\n@@ -394,11 +409,15 @@ impl UnusedParens {\n                 } else {\n                     pprust::pat_to_string(value)\n                 };\n-            Self::remove_outer_parens(cx, value.span, &pattern_text, msg);\n+            Self::remove_outer_parens(cx, value.span, &pattern_text, msg, (false, false));\n         }\n     }\n \n-    fn remove_outer_parens(cx: &EarlyContext<'_>, span: Span, pattern: &str, msg: &str) {\n+    fn remove_outer_parens(cx: &EarlyContext<'_>,\n+                           span: Span,\n+                           pattern: &str,\n+                           msg: &str,\n+                           keep_space: (bool, bool)) {\n         let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n         let mut err = cx.struct_span_lint(UNUSED_PARENS, span, &span_msg);\n         let mut ate_left_paren = false;\n@@ -424,11 +443,27 @@ impl UnusedParens {\n                     },\n                     _ => false,\n                 }\n-            }).to_owned();\n+            });\n+\n+        let replace = {\n+            let mut replace = if keep_space.0 {\n+                let mut s = String::from(\" \");\n+                s.push_str(parens_removed);\n+                s\n+            } else {\n+                String::from(parens_removed)\n+            };\n+\n+            if keep_space.1 {\n+                replace.push(' ');\n+            }\n+            replace\n+        };\n+\n         err.span_suggestion_short(\n             span,\n             \"remove these parentheses\",\n-            parens_removed,\n+            replace,\n             Applicability::MachineApplicable,\n         );\n         err.emit();\n@@ -438,14 +473,35 @@ impl UnusedParens {\n impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n-        let (value, msg, followed_by_block) = match e.node {\n-            If(ref cond, ..) => (cond, \"`if` condition\", true),\n-            While(ref cond, ..) => (cond, \"`while` condition\", true),\n-            ForLoop(_, ref cond, ..) => (cond, \"`for` head expression\", true),\n-            Match(ref head, _) => (head, \"`match` head expression\", true),\n-            Ret(Some(ref value)) => (value, \"`return` value\", false),\n-            Assign(_, ref value) => (value, \"assigned value\", false),\n-            AssignOp(.., ref value) => (value, \"assigned value\", false),\n+        let (value, msg, followed_by_block, left_pos, right_pos) = match e.node {\n+            If(ref cond, ref block, ..) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(2);\n+                let right = block.span.lo();\n+                (cond, \"`if` condition\", true, Some(left), Some(right))\n+            }\n+\n+            While(ref cond, ref block, ..) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                let right = block.span.lo();\n+                (cond, \"`while` condition\", true, Some(left), Some(right))\n+            },\n+\n+            ForLoop(_, ref cond, ref block, ..) => {\n+                (cond, \"`for` head expression\", true, None, Some(block.span.lo()))\n+            }\n+\n+            Match(ref head, _) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                (head, \"`match` head expression\", true, Some(left), None)\n+            }\n+\n+            Ret(Some(ref value)) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(3);\n+                (value, \"`return` value\", false, Some(left), None)\n+            }\n+\n+            Assign(_, ref value) => (value, \"assigned value\", false, None, None),\n+            AssignOp(.., ref value) => (value, \"assigned value\", false, None, None),\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {\n                 let (args_to_check, call_kind) = match *call_or_other {\n@@ -467,12 +523,12 @@ impl EarlyLintPass for UnusedParens {\n                 }\n                 let msg = format!(\"{} argument\", call_kind);\n                 for arg in args_to_check {\n-                    self.check_unused_parens_expr(cx, arg, &msg, false);\n+                    self.check_unused_parens_expr(cx, arg, &msg, false, None, None);\n                 }\n                 return;\n             }\n         };\n-        self.check_unused_parens_expr(cx, &value, msg, followed_by_block);\n+        self.check_unused_parens_expr(cx, &value, msg, followed_by_block, left_pos, right_pos);\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n@@ -492,7 +548,7 @@ impl EarlyLintPass for UnusedParens {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n             if let Some(ref value) = local.init {\n-                self.check_unused_parens_expr(cx, &value, \"assigned value\", false);\n+                self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n             }\n         }\n     }"}, {"sha": "99899aa390c4a05c6cc0932d13b0aaf0c24137f0", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -177,7 +177,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 buf.push_str(&self.infcx.tcx.item_name(*def_id).to_string());\n             }\n             PlaceRef {\n-                ref base,\n+                base,\n                 projection: Some(ref proj),\n             } => {\n                 match proj.elem {\n@@ -197,7 +197,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 // FIXME turn this recursion into iteration\n                                 self.append_place_to_string(\n                                     PlaceRef {\n-                                        base: &base,\n+                                        base,\n                                         projection: &proj.base,\n                                     },\n                                     buf,\n@@ -210,7 +210,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         if self.body.local_decls[*local].is_ref_for_guard() {\n                                             self.append_place_to_string(\n                                                 PlaceRef {\n-                                                    base: &base,\n+                                                    base,\n                                                     projection: &proj.base,\n                                                 },\n                                                 buf,\n@@ -222,7 +222,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                             buf.push_str(&\"*\");\n                                             self.append_place_to_string(\n                                                 PlaceRef {\n-                                                    base: &base,\n+                                                    base,\n                                                     projection: &proj.base,\n                                                 },\n                                                 buf,\n@@ -236,7 +236,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         buf.push_str(&\"*\");\n                                         self.append_place_to_string(\n                                             PlaceRef {\n-                                                base: &base,\n+                                                base,\n                                                 projection: &proj.base,\n                                             },\n                                             buf,\n@@ -251,7 +251,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     ProjectionElem::Downcast(..) => {\n                         self.append_place_to_string(\n                             PlaceRef {\n-                                base: &base,\n+                                base,\n                                 projection: &proj.base,\n                             },\n                             buf,\n@@ -273,12 +273,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             buf.push_str(&name);\n                         } else {\n                             let field_name = self.describe_field(PlaceRef {\n-                                base: base,\n+                                base,\n                                 projection: &proj.base,\n                             }, field);\n                             self.append_place_to_string(\n                                 PlaceRef {\n-                                    base: &base,\n+                                    base,\n                                     projection: &proj.base,\n                                 },\n                                 buf,\n@@ -293,7 +293,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                         self.append_place_to_string(\n                             PlaceRef {\n-                                base: &base,\n+                                base,\n                                 projection: &proj.base,\n                             },\n                             buf,\n@@ -313,7 +313,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         // to avoid confusing the end-user\n                         self.append_place_to_string(\n                             PlaceRef {\n-                                base: &base,\n+                                base,\n                                 projection: &proj.base,\n                             },\n                             buf,"}, {"sha": "86c263a447bb6ecf9bd940e6239829cf9fe6ea80", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -2027,15 +2027,13 @@ Local variables, function parameters and temporaries are all dropped before the\n end of the function body. So a reference to them cannot be returned.\n \n ```compile_fail,E0515\n-#![feature(nll)]\n fn get_dangling_reference() -> &'static i32 {\n     let x = 0;\n     &x\n }\n ```\n \n ```compile_fail,E0515\n-#![feature(nll)]\n use std::slice::Iter;\n fn get_dangling_iterator<'a>() -> Iter<'a, i32> {\n     let v = vec![1, 2, 3];\n@@ -2233,7 +2231,6 @@ function which outlived the lifetime of the function.\n Example of erroneous code:\n \n ```compile_fail,E0712\n-#![feature(nll)]\n #![feature(thread_local)]\n \n #[thread_local]\n@@ -2286,8 +2283,6 @@ not run while the string-data is borrowed; for example by taking `S`\n by reference:\n \n ```\n-#![feature(nll)]\n-\n pub struct S<'a> { data: &'a mut String }\n \n impl<'a> Drop for S<'a> {\n@@ -2312,7 +2307,6 @@ while a borrow is still in active use.\n Erroneous code example:\n \n ```compile_fail,E0716\n-# #![feature(nll)]\n fn foo() -> i32 { 22 }\n fn bar(x: &i32) -> &i32 { x }\n let p = bar(&foo());"}, {"sha": "9a644ed44a670b81cfe02d019a55c46b8fcd11f9", "filename": "src/test/run-pass/generator/niche-in-generator.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Frun-pass%2Fgenerator%2Fniche-in-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Frun-pass%2Fgenerator%2Fniche-in-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fniche-in-generator.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,17 @@\n+// Test that niche finding works with captured generator upvars.\n+\n+#![feature(generators)]\n+\n+use std::mem::size_of_val;\n+\n+fn take<T>(_: T) {}\n+\n+fn main() {\n+    let x = false;\n+    let gen1 = || {\n+        yield;\n+        take(x);\n+    };\n+\n+    assert_eq!(size_of_val(&gen1), size_of_val(&Some(gen1)));\n+}"}, {"sha": "30b59d037d51239ff0fc56b28751a4e141a25734", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -93,9 +93,27 @@ async fn joined_with_noop() {\n     joiner.await\n }\n \n+async fn mixed_sizes() {\n+    let a = BigFut::new();\n+    let b = BigFut::new();\n+    let c = BigFut::new();\n+    let d = BigFut::new();\n+    let e = BigFut::new();\n+    let joiner = Joiner {\n+        a: Some(a),\n+        b: Some(b),\n+        c: Some(c),\n+    };\n+\n+    d.await;\n+    e.await;\n+    joiner.await;\n+}\n+\n fn main() {\n     assert_eq!(1028, std::mem::size_of_val(&single()));\n     assert_eq!(1032, std::mem::size_of_val(&single_with_noop()));\n     assert_eq!(3084, std::mem::size_of_val(&joined()));\n     assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(7188, std::mem::size_of_val(&mixed_sizes()));\n }"}, {"sha": "db396d3957e13c1ce005b3282e8c36f859533919", "filename": "src/test/ui/async-await/drop-order/drop-order-for-locals-when-cancelled.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,176 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![deny(dead_code)]\n+#![feature(async_await)]\n+\n+// Test that the drop order for locals in a fn and async fn matches up.\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::pin::Pin;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+struct NeverReady;\n+\n+impl Future for NeverReady {\n+    type Output = ();\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        Poll::Pending\n+    }\n+}\n+\n+async fn simple_variable_declaration_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    NeverReady.await;\n+}\n+\n+fn simple_variable_declaration_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+}\n+\n+async fn varable_completely_contained_within_block_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    async {\n+        let x = D(\"x\", l.clone());\n+    }\n+        .await;\n+    let y = D(\"y\", l.clone());\n+    NeverReady.await;\n+}\n+\n+fn varable_completely_contained_within_block_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    {\n+        let x = D(\"x\", l.clone());\n+    }\n+    let y = D(\"y\", l.clone());\n+}\n+\n+async fn variables_moved_into_separate_blocks_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    async move { x }.await;\n+    async move { y }.await;\n+    NeverReady.await;\n+}\n+\n+fn variables_moved_into_separate_blocks_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    {\n+        x\n+    };\n+    {\n+        y\n+    };\n+}\n+\n+async fn variables_moved_into_same_block_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    async move {\n+        x;\n+        y;\n+    };\n+    NeverReady.await;\n+}\n+\n+fn variables_moved_into_same_block_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    {\n+        x;\n+        y;\n+    };\n+    return;\n+}\n+\n+async fn move_after_current_await_doesnt_affect_order(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    NeverReady.await;\n+    async move {\n+        x;\n+        y;\n+    };\n+}\n+\n+fn assert_drop_order_after_cancel<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    drop(fut);\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    assert_drop_order_after_cancel(\n+        simple_variable_declaration_async,\n+        simple_variable_declaration_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        varable_completely_contained_within_block_async,\n+        varable_completely_contained_within_block_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        variables_moved_into_separate_blocks_async,\n+        variables_moved_into_separate_blocks_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        variables_moved_into_same_block_async,\n+        variables_moved_into_same_block_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        move_after_current_await_doesnt_affect_order,\n+        simple_variable_declaration_sync,\n+    );\n+}"}, {"sha": "410a623681db546c4826604ed44bf0898c528352", "filename": "src/test/ui/async-await/drop-order/drop-order-when-cancelled.rs", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,307 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![feature(async_await)]\n+\n+// Test that the drop order for parameters in a fn and async fn matches up. Also test that\n+// parameters (used or unused) are not dropped until the async fn is cancelled.\n+// This file is mostly copy-pasted from drop-order-for-async-fn-parameters.rs\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::pin::Pin;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+struct NeverReady;\n+\n+impl Future for NeverReady {\n+    type Output = ();\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        Poll::Pending\n+    }\n+}\n+\n+/// Check that unused bindings are dropped after the function is polled.\n+async fn foo_async(x: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn foo_sync(x: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns are dropped after the function is polled.\n+async fn bar_async(x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn bar_sync(x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns within more complex patterns are dropped after the function\n+/// is polled.\n+async fn baz_async((x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn baz_sync((x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore and unused bindings within and outwith more complex patterns are dropped\n+/// after the function is polled.\n+async fn foobar_async(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn foobar_sync(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    /// Check that unused bindings are dropped after the method is polled.\n+    async fn foo_async(x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foo_sync(x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method is polled.\n+    async fn bar_async(x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn bar_sync(x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// is polled.\n+    async fn baz_async((x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn baz_sync((x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method is polled.\n+    async fn foobar_async(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foobar_sync(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+struct Bar<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> Bar<'a> {\n+    /// Check that unused bindings are dropped after the method with self is polled.\n+    async fn foo_async(&'a self, x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foo_sync(&'a self, x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method with self is polled.\n+    async fn bar_async(&'a self, x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn bar_sync(&'a self, x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// with self is polled.\n+    async fn baz_async(&'a self, (x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn baz_sync(&'a self, (x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method with self is polled.\n+    async fn foobar_async(&'a self, x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foobar_sync(&'a self, x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+fn assert_drop_order_after_cancel<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+\n+    // Parameters are never dropped until the future completes.\n+    assert_eq!(*actual_order.borrow(), vec![DropOrder::Function]);\n+\n+    drop(fut);\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    // Free functions (see doc comment on function for what it tests).\n+    assert_drop_order_after_cancel(\n+        |l| foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+        |l| foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+        |l| bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+        |l| baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| {\n+            foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods w/out self (see doc comment on function for what it tests).\n+    assert_drop_order_after_cancel(\n+        |l| Foo::foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+        |l| Foo::foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| Foo::bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+        |l| Foo::bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| Foo::baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+        |l| Foo::baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| {\n+            Foo::foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            Foo::foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods (see doc comment on function for what it tests).\n+    let b = Bar(Default::default());\n+    assert_drop_order_after_cancel(\n+        |l| b.foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+        |l| b.foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| b.bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+        |l| b.bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| b.baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+        |l| b.baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| {\n+            b.foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            b.foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+}"}, {"sha": "8f4254b10ceafec8485651b0d2d692fa62887c78", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -1,3 +1,7 @@\n+// Incorrect handling of uninhabited types could cause us to mark generator\n+// types as entirely uninhabited, when they were in fact constructible. This\n+// caused us to hit \"unreachable\" code (illegal instruction on x86).\n+\n // run-pass\n \n // compile-flags: --edition=2018\n@@ -19,7 +23,18 @@ async fn contains_never() {\n     let error2 = error;\n }\n \n+#[allow(unused)]\n+async fn overlap_never() {\n+    let error1 = uninhabited_async();\n+    noop().await;\n+    let error2 = uninhabited_async();\n+    drop(error1);\n+    noop().await;\n+    drop(error2);\n+}\n+\n #[allow(unused_must_use)]\n fn main() {\n     contains_never();\n+    overlap_never();\n }"}, {"sha": "9bd7a515cbdbfac5778c4598648132ab8f90ebe9", "filename": "src/test/ui/async-await/move-part-await-return-rest-struct.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,20 @@\n+// build-pass\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+struct Small {\n+    x: Vec<usize>,\n+    y: Vec<usize>,\n+}\n+\n+// You are allowed to move out part of a struct to an async fn, you still\n+// have access to remaining parts after awaiting\n+async fn move_part_await_return_rest_struct() -> Vec<usize> {\n+    let s = Small { x: vec![31], y: vec![19, 1441] };\n+    needs_vec(s.x).await;\n+    s.y\n+}\n+\n+async fn needs_vec(_vec: Vec<usize>) {}"}, {"sha": "69eee855e759412661ff9b494683d85931ad0ad1", "filename": "src/test/ui/async-await/move-part-await-return-rest-tuple.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+async fn move_part_await_return_rest_tuple() -> Vec<usize> {\n+    let x = (vec![3], vec![4, 4]);\n+    drop(x.1);\n+    echo(x.0[0]).await;\n+    x.0\n+}\n+\n+async fn echo(x: usize) -> usize { x }"}, {"sha": "58e094708979c1dcbce1a19edf002605db6721a0", "filename": "src/test/ui/async-await/no-move-across-await-struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,19 @@\n+// compile-fail\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+async fn no_move_across_await_struct() -> Vec<usize> {\n+    let s = Small { x: vec![31], y: vec![19, 1441] };\n+    needs_vec(s.x).await;\n+    s.x\n+    //~^ ERROR use of moved value: `s.x`\n+}\n+\n+struct Small {\n+    x: Vec<usize>,\n+    y: Vec<usize>,\n+}\n+\n+async fn needs_vec(_vec: Vec<usize>) {}"}, {"sha": "121c7791bd98eca4ba7f3f454a976fbe5a4d2fb5", "filename": "src/test/ui/async-await/no-move-across-await-struct.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,13 @@\n+error[E0382]: use of moved value: `s.x`\n+  --> $DIR/no-move-across-await-struct.rs:10:5\n+   |\n+LL |     needs_vec(s.x).await;\n+   |               --- value moved here\n+LL |     s.x\n+   |     ^^^ value used here after move\n+   |\n+   = note: move occurs because `s.x` has type `std::vec::Vec<usize>`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "5d3ed3da1e31613addcacce3d931be3291f103bb", "filename": "src/test/ui/async-await/no-move-across-await-tuple.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,15 @@\n+// compile-fail\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+async fn no_move_across_await_tuple() -> Vec<usize> {\n+    let x = (vec![3], vec![4, 4]);\n+    drop(x.1);\n+    nothing().await;\n+    x.1\n+    //~^ ERROR use of moved value: `x.1`\n+}\n+\n+async fn nothing() {}"}, {"sha": "5da037ea5c0b6465b69b2b97f6af32fd53ab9a2e", "filename": "src/test/ui/async-await/no-move-across-await-tuple.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: use of moved value: `x.1`\n+  --> $DIR/no-move-across-await-tuple.rs:11:5\n+   |\n+LL |     drop(x.1);\n+   |          --- value moved here\n+LL |     nothing().await;\n+LL |     x.1\n+   |     ^^^ value used here after move\n+   |\n+   = note: move occurs because `x.1` has type `std::vec::Vec<usize>`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "427407119102cb7ab36586a652bc5176c6f2fe18", "filename": "src/test/ui/lint/unused_parens_json_suggestion.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: --error-format pretty-json -Zunstable-options\n+// build-pass (FIXME(62277): could be check-pass?)\n+// run-rustfix\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+#![warn(unused_parens)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+    // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not\n+    // the malformed `1 / (2 + 3`\n+    let _a = 1 / (2 + 3);\n+    f();\n+}\n+\n+fn f() -> bool {\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n+}"}, {"sha": "87192503986c44123c96763361c6d84f016889d2", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: --error-format pretty-json -Zunstable-options\n // build-pass (FIXME(62277): could be check-pass?)\n+// run-rustfix\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested\n@@ -8,6 +9,7 @@\n // test of the JSON error format.\n \n #![warn(unused_parens)]\n+#![allow(unreachable_code)]\n \n fn main() {\n     // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not"}, {"sha": "256c7555c908bd25ba2c09fd635b31fcaac741df", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -8,10 +8,10 @@\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-      \"byte_start\": 611,\n-      \"byte_end\": 624,\n-      \"line_start\": 15,\n-      \"line_end\": 15,\n+      \"byte_start\": 654,\n+      \"byte_end\": 667,\n+      \"line_start\": 17,\n+      \"line_end\": 17,\n       \"column_start\": 14,\n       \"column_end\": 27,\n       \"is_primary\": true,\n@@ -36,10 +36,10 @@\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 457,\n-          \"byte_end\": 470,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 472,\n+          \"byte_end\": 485,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 9,\n           \"column_end\": 22,\n           \"is_primary\": true,\n@@ -66,10 +66,10 @@\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 611,\n-          \"byte_end\": 624,\n-          \"line_start\": 15,\n-          \"line_end\": 15,\n+          \"byte_start\": 654,\n+          \"byte_end\": 667,\n+          \"line_start\": 17,\n+          \"line_end\": 17,\n           \"column_start\": 14,\n           \"column_end\": 27,\n           \"is_primary\": true,\n@@ -91,13 +91,13 @@\n     }\n   ],\n   \"rendered\": \"warning: unnecessary parentheses around assigned value\n-  --> $DIR/unused_parens_json_suggestion.rs:15:14\n+  --> $DIR/unused_parens_json_suggestion.rs:17:14\n    |\n LL |     let _a = (1 / (2 + 3));\n    |              ^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/unused_parens_json_suggestion.rs:10:9\n+  --> $DIR/unused_parens_json_suggestion.rs:11:9\n    |\n LL | #![warn(unused_parens)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "2459eb1ac5cb866e14a06ef2edfe15cc324021bf", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,62 @@\n+// compile-flags: --error-format pretty-json -Zunstable-options\n+// build-pass\n+// run-rustfix\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+#![warn(unused_parens)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+\n+    let _b = false;\n+\n+    if _b {\n+        println!(\"hello\");\n+    }\n+\n+    f();\n+\n+}\n+\n+fn f() -> bool {\n+    let c = false;\n+\n+    if c {\n+        println!(\"next\");\n+    }\n+\n+    if c {\n+        println!(\"prev\");\n+    }\n+\n+    while false && true {\n+        if c {\n+            println!(\"norm\");\n+        }\n+\n+    }\n+\n+    while true && false {\n+        for _ in 0 .. 3 {\n+            println!(\"e~\")\n+        }\n+    }\n+\n+    for _ in 0 .. 3 {\n+        while true && false {\n+            println!(\"e~\")\n+        }\n+    }\n+\n+\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n+}"}, {"sha": "0e9869b67d590a120044456d143ca8d322086dec", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,62 @@\n+// compile-flags: --error-format pretty-json -Zunstable-options\n+// build-pass\n+// run-rustfix\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+#![warn(unused_parens)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+\n+    let _b = false;\n+\n+    if (_b) {\n+        println!(\"hello\");\n+    }\n+\n+    f();\n+\n+}\n+\n+fn f() -> bool {\n+    let c = false;\n+\n+    if(c) {\n+        println!(\"next\");\n+    }\n+\n+    if (c){\n+        println!(\"prev\");\n+    }\n+\n+    while (false && true){\n+        if (c) {\n+            println!(\"norm\");\n+        }\n+\n+    }\n+\n+    while(true && false) {\n+        for _ in (0 .. 3){\n+            println!(\"e~\")\n+        }\n+    }\n+\n+    for _ in (0 .. 3) {\n+        while (true && false) {\n+            println!(\"e~\")\n+        }\n+    }\n+\n+\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n+}"}, {"sha": "b4eab200dd0163d98f03ff43b5a8fe3d0fd42709", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.stderr", "status": "added", "additions": 666, "deletions": 0, "changes": 666, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -0,0 +1,666 @@\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 521,\n+      \"byte_end\": 525,\n+      \"line_start\": 18,\n+      \"line_end\": 18,\n+      \"column_start\": 8,\n+      \"column_end\": 12,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if (_b) {\",\n+          \"highlight_start\": 8,\n+          \"highlight_end\": 12\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"lint level defined here\",\n+      \"code\": null,\n+      \"level\": \"note\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 435,\n+          \"byte_end\": 448,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n+          \"column_start\": 9,\n+          \"column_end\": 22,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"#![warn(unused_parens)]\",\n+              \"highlight_start\": 9,\n+              \"highlight_end\": 22\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": null,\n+          \"suggestion_applicability\": null,\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    },\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 521,\n+          \"byte_end\": 525,\n+          \"line_start\": 18,\n+          \"line_end\": 18,\n+          \"column_start\": 8,\n+          \"column_end\": 12,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if (_b) {\",\n+              \"highlight_start\": 8,\n+              \"highlight_end\": 12\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"_b\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:18:8\n+   |\n+LL |     if (_b) {\n+   |        ^^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:11:9\n+   |\n+LL | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 618,\n+      \"byte_end\": 621,\n+      \"line_start\": 29,\n+      \"line_end\": 29,\n+      \"column_start\": 7,\n+      \"column_end\": 10,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if(c) {\",\n+          \"highlight_start\": 7,\n+          \"highlight_end\": 10\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 618,\n+          \"byte_end\": 621,\n+          \"line_start\": 29,\n+          \"line_end\": 29,\n+          \"column_start\": 7,\n+          \"column_end\": 10,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if(c) {\",\n+              \"highlight_start\": 7,\n+              \"highlight_end\": 10\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \" c\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:29:7\n+   |\n+LL |     if(c) {\n+   |       ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 664,\n+      \"byte_end\": 667,\n+      \"line_start\": 33,\n+      \"line_end\": 33,\n+      \"column_start\": 8,\n+      \"column_end\": 11,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if (c){\",\n+          \"highlight_start\": 8,\n+          \"highlight_end\": 11\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 664,\n+          \"byte_end\": 667,\n+          \"line_start\": 33,\n+          \"line_end\": 33,\n+          \"column_start\": 8,\n+          \"column_end\": 11,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if (c){\",\n+              \"highlight_start\": 8,\n+              \"highlight_end\": 11\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"c \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:33:8\n+   |\n+LL |     if (c){\n+   |        ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 712,\n+      \"byte_end\": 727,\n+      \"line_start\": 37,\n+      \"line_end\": 37,\n+      \"column_start\": 11,\n+      \"column_end\": 26,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    while (false && true){\",\n+          \"highlight_start\": 11,\n+          \"highlight_end\": 26\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 712,\n+          \"byte_end\": 727,\n+          \"line_start\": 37,\n+          \"line_end\": 37,\n+          \"column_start\": 11,\n+          \"column_end\": 26,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    while (false && true){\",\n+              \"highlight_start\": 11,\n+              \"highlight_end\": 26\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"false && true \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:37:11\n+   |\n+LL |     while (false && true){\n+   |           ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 740,\n+      \"byte_end\": 743,\n+      \"line_start\": 38,\n+      \"line_end\": 38,\n+      \"column_start\": 12,\n+      \"column_end\": 15,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        if (c) {\",\n+          \"highlight_start\": 12,\n+          \"highlight_end\": 15\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 740,\n+          \"byte_end\": 743,\n+          \"line_start\": 38,\n+          \"line_end\": 38,\n+          \"column_start\": 12,\n+          \"column_end\": 15,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        if (c) {\",\n+              \"highlight_start\": 12,\n+              \"highlight_end\": 15\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"c\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:38:12\n+   |\n+LL |         if (c) {\n+   |            ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 803,\n+      \"byte_end\": 818,\n+      \"line_start\": 44,\n+      \"line_end\": 44,\n+      \"column_start\": 10,\n+      \"column_end\": 25,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    while(true && false) {\",\n+          \"highlight_start\": 10,\n+          \"highlight_end\": 25\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 803,\n+          \"byte_end\": 818,\n+          \"line_start\": 44,\n+          \"line_end\": 44,\n+          \"column_start\": 10,\n+          \"column_end\": 25,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    while(true && false) {\",\n+              \"highlight_start\": 10,\n+              \"highlight_end\": 25\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \" true && false\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:44:10\n+   |\n+LL |     while(true && false) {\n+   |          ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `for` head expression\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 838,\n+      \"byte_end\": 846,\n+      \"line_start\": 45,\n+      \"line_end\": 45,\n+      \"column_start\": 18,\n+      \"column_end\": 26,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        for _ in (0 .. 3){\",\n+          \"highlight_start\": 18,\n+          \"highlight_end\": 26\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 838,\n+          \"byte_end\": 846,\n+          \"line_start\": 45,\n+          \"line_end\": 45,\n+          \"column_start\": 18,\n+          \"column_end\": 26,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        for _ in (0 .. 3){\",\n+              \"highlight_start\": 18,\n+              \"highlight_end\": 26\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"0 .. 3 \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:45:18\n+   |\n+LL |         for _ in (0 .. 3){\n+   |                  ^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `for` head expression\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 905,\n+      \"byte_end\": 913,\n+      \"line_start\": 50,\n+      \"line_end\": 50,\n+      \"column_start\": 14,\n+      \"column_end\": 22,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    for _ in (0 .. 3) {\",\n+          \"highlight_start\": 14,\n+          \"highlight_end\": 22\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 905,\n+          \"byte_end\": 913,\n+          \"line_start\": 50,\n+          \"line_end\": 50,\n+          \"column_start\": 14,\n+          \"column_end\": 22,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    for _ in (0 .. 3) {\",\n+              \"highlight_start\": 14,\n+              \"highlight_end\": 22\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"0 .. 3\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:50:14\n+   |\n+LL |     for _ in (0 .. 3) {\n+   |              ^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 930,\n+      \"byte_end\": 945,\n+      \"line_start\": 51,\n+      \"line_end\": 51,\n+      \"column_start\": 15,\n+      \"column_end\": 30,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        while (true && false) {\",\n+          \"highlight_start\": 15,\n+          \"highlight_end\": 30\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 930,\n+          \"byte_end\": 945,\n+          \"line_start\": 51,\n+          \"line_end\": 51,\n+          \"column_start\": 15,\n+          \"column_end\": 30,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        while (true && false) {\",\n+              \"highlight_start\": 15,\n+              \"highlight_end\": 30\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"true && false\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:51:15\n+   |\n+LL |         while (true && false) {\n+   |               ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}"}]}