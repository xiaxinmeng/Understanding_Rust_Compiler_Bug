{"sha": "f39ba69aaa0b50d7aaa130306f3f12d89583d501", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOWJhNjlhYWEwYjUwZDdhYWExMzAzMDZmM2YxMmQ4OTU4M2Q1MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T10:36:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T10:36:27Z"}, "message": "auto merge of #13539 : Aatch/rust/vector-copy-faster, r=thestinger\n\nLLVM wasn't recognising the loops as memcpy loops and was therefore failing to optimise them properly. While improving LLVM is the \"proper\" way to fix this, I think that these cases are important enough to warrant a little low-level optimisation.\r\n\r\nFixes #13472 \r\n\r\nr? @thestinger \r\n\r\n---\r\n\r\nBenchmark Results:\r\n\r\n```\r\n--- Before ---\r\ntest clone_owned          ... bench:   6126104 ns/iter (+/- 285962) = 170 MB/s\r\ntest clone_owned_to_owned ... bench:   6125054 ns/iter (+/- 271197) = 170 MB/s\r\ntest clone_str            ... bench:     80586 ns/iter (+/- 11489) = 13011 MB/s\r\ntest clone_vec            ... bench:   3903220 ns/iter (+/- 658556) = 268 MB/s\r\ntest test_memcpy          ... bench:     69401 ns/iter (+/- 2168) = 15108 MB/s\r\n\r\n--- After ---\r\ntest clone_owned          ... bench:     70839 ns/iter (+/- 4931) = 14801 MB/s\r\ntest clone_owned_to_owned ... bench:     70286 ns/iter (+/- 4836) = 14918 MB/s\r\ntest clone_str            ... bench:     78519 ns/iter (+/- 5511) = 13353 MB/s\r\ntest clone_vec            ... bench:     71415 ns/iter (+/- 1999) = 14682 MB/s\r\ntest test_memcpy          ... bench:     70980 ns/iter (+/- 2126) = 14772 MB/s\r\n```", "tree": {"sha": "3a2ed31ecb5ac65b25704fa4a815e506762ea5a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a2ed31ecb5ac65b25704fa4a815e506762ea5a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39ba69aaa0b50d7aaa130306f3f12d89583d501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39ba69aaa0b50d7aaa130306f3f12d89583d501", "html_url": "https://github.com/rust-lang/rust/commit/f39ba69aaa0b50d7aaa130306f3f12d89583d501", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39ba69aaa0b50d7aaa130306f3f12d89583d501/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61f788c772a1e0cefb19c54f12fbf42a65464334", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f788c772a1e0cefb19c54f12fbf42a65464334", "html_url": "https://github.com/rust-lang/rust/commit/61f788c772a1e0cefb19c54f12fbf42a65464334"}, {"sha": "be334d582435a05ea56c1ca7fcb2e512cfc51f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/be334d582435a05ea56c1ca7fcb2e512cfc51f24", "html_url": "https://github.com/rust-lang/rust/commit/be334d582435a05ea56c1ca7fcb2e512cfc51f24"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "153e21c780c098cf69e4b8031502fa4186b61fd1", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f39ba69aaa0b50d7aaa130306f3f12d89583d501/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39ba69aaa0b50d7aaa130306f3f12d89583d501/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=f39ba69aaa0b50d7aaa130306f3f12d89583d501", "patch": "@@ -760,9 +760,25 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     /// Returns a copy of `v`.\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n-        let mut result = with_capacity(self.len());\n-        for e in self.iter() {\n-            result.push((*e).clone());\n+        let len = self.len();\n+        let mut result = with_capacity(len);\n+        // Unsafe code so this can be optimised to a memcpy (or something\n+        // similarly fast) when T is Copy. LLVM is easily confused, so any\n+        // extra operations during the loop can prevent this optimisation\n+        unsafe {\n+            let mut i = 0;\n+            let p = result.as_mut_ptr();\n+            // Use try_finally here otherwise the write to length\n+            // inside the loop stops LLVM from optimising this.\n+            try_finally(\n+                &mut i, (),\n+                |i, ()| while *i < len {\n+                    mem::move_val_init(\n+                        &mut(*p.offset(*i as int)),\n+                        self.unsafe_ref(*i).clone());\n+                    *i += 1;\n+                },\n+                |i| result.set_len(*i));\n         }\n         result\n     }\n@@ -2584,7 +2600,8 @@ pub mod bytes {\n impl<A: Clone> Clone for ~[A] {\n     #[inline]\n     fn clone(&self) -> ~[A] {\n-        self.iter().map(|item| item.clone()).collect()\n+        // Use the fast to_owned on &[A] for cloning\n+        self.as_slice().to_owned()\n     }\n \n     fn clone_from(&mut self, source: &~[A]) {"}, {"sha": "96cbac8869ef212d4452c59900ed436e3a9345bd", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f39ba69aaa0b50d7aaa130306f3f12d89583d501/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39ba69aaa0b50d7aaa130306f3f12d89583d501/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f39ba69aaa0b50d7aaa130306f3f12d89583d501", "patch": "@@ -311,7 +311,23 @@ impl<T: Clone> Vec<T> {\n \n impl<T:Clone> Clone for Vec<T> {\n     fn clone(&self) -> Vec<T> {\n-        self.iter().map(|x| x.clone()).collect()\n+        let len = self.len;\n+        let mut vector = Vec::with_capacity(len);\n+        // Unsafe code so this can be optimised to a memcpy (or something\n+        // similarly fast) when T is Copy. LLVM is easily confused, so any\n+        // extra operations during the loop can prevent this optimisation\n+        {\n+            let this_slice = self.as_slice();\n+            while vector.len < len {\n+                unsafe {\n+                    mem::move_val_init(\n+                        vector.as_mut_slice().unsafe_mut_ref(vector.len),\n+                        this_slice.unsafe_ref(vector.len).clone());\n+                }\n+                vector.len += 1;\n+            }\n+        }\n+        vector\n     }\n \n     fn clone_from(&mut self, other: &Vec<T>) {"}]}