{"sha": "aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYTU2ZGRkMDVkODIxYjZmMGEzZTVmYzA1YmM0NzMxMWUwOTA1MWM=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-11-19T19:25:35Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-01-07T01:15:59Z"}, "message": "type error method suggestions use whitelisted identity-like conversions\n\nPreviously, on a type mismatch (and if this wasn't pre\u00ebmpted by a\nhigher-priority suggestion), we would look for argumentless methods\nreturning the expected type, and list them in a `help` note.\n\nThis had two major shortcomings. Firstly, a lot of the suggestions didn't\nreally make sense (if you used a &str where a String was expected,\n`.to_ascii_uppercase()` is probably not the solution you were hoping\nfor). Secondly, we weren't generating suggestions from the most useful\ntraits!\n\nWe address the first problem with an internal\n`#[rustc_conversion_suggestion]` attribute meant to mark methods that keep\nthe \"same value\" in the relevant sense, just converting the type. We\naddress the second problem by making `FnCtxt.probe_for_return_type` pass\nthe `ProbeScope::AllTraits` to `probe_op`: this would seem to be safe\nbecause grep reveals no other callers of `probe_for_return_type`.\n\nAlso, structured suggestions are preferred (because they're pretty, but\nalso for RLS and friends).\n\nAlso also, we make the E0055 autoderef recursion limit error use the\none-time-diagnostics set, because we can potentially hit the limit a lot\nduring probing. (Without this,\ntest/ui/did_you_mean/recursion_limit_deref.rs would report \"aborting due to\n51 errors\").\n\nUnfortunately, the trait probing is still not all one would hope for: at a\nminimum, we don't know how to rule out `into()` in cases where it wouldn't\nactually work, and we don't know how to rule in `.to_owned()` where it\nwould. Issues #46459 and #46460 have been filed and are ref'd in a FIXME.\n\nThis is hoped to resolve #42929, #44672, and #45777.", "tree": {"sha": "c9c40e980387f5a32cc611e82e4da0df602d7ba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c40e980387f5a32cc611e82e4da0df602d7ba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "html_url": "https://github.com/rust-lang/rust/commit/aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72176cf96cb79a0ebf62972b76dbe68c933bef4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72176cf96cb79a0ebf62972b76dbe68c933bef4d", "html_url": "https://github.com/rust-lang/rust/commit/72176cf96cb79a0ebf62972b76dbe68c933bef4d"}], "stats": {"total": 212, "additions": 147, "deletions": 65}, "files": [{"sha": "914dd12e5e2a9a81fe25196347663769571935f1", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -1595,6 +1595,7 @@ impl<T> [T] {\n     /// let x = s.to_vec();\n     /// // Here, `s` and `x` can be modified independently.\n     /// ```\n+    #[rustc_conversion_suggestion]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_vec(&self) -> Vec<T>"}, {"sha": "8d99d0bc8f4dc330f14ac5b06e7bb23503173738", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -2034,6 +2034,7 @@ pub trait ToString {\n     ///\n     /// assert_eq!(five, i.to_string());\n     /// ```\n+    #[rustc_conversion_suggestion]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_string(&self) -> String;\n }"}, {"sha": "169959d12b5d556dd09c5c688146f60004d1ade5", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -14,6 +14,7 @@ use super::{FnCtxt, LvalueOp};\n use super::method::MethodCallee;\n \n use rustc::infer::InferOk;\n+use rustc::session::DiagnosticMessageId;\n use rustc::traits;\n use rustc::ty::{self, Ty, TraitRef};\n use rustc::ty::{ToPredicate, TypeFoldable};\n@@ -56,19 +57,25 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n             return Some((self.cur_ty, 0));\n         }\n \n-        if self.steps.len() == tcx.sess.recursion_limit.get() {\n+        if self.steps.len() >= tcx.sess.recursion_limit.get() {\n             // We've reached the recursion limit, error gracefully.\n             let suggested_limit = tcx.sess.recursion_limit.get() * 2;\n-            struct_span_err!(tcx.sess,\n-                             self.span,\n-                             E0055,\n-                             \"reached the recursion limit while auto-dereferencing {:?}\",\n-                             self.cur_ty)\n-                .span_label(self.span, \"deref recursion limit reached\")\n-                .help(&format!(\n-                        \"consider adding a `#[recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n+            let msg = format!(\"reached the recursion limit while auto-dereferencing {:?}\",\n+                              self.cur_ty);\n+            let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg.clone());\n+            let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n+            if fresh {\n+                struct_span_err!(tcx.sess,\n+                                 self.span,\n+                                 E0055,\n+                                 \"reached the recursion limit while auto-dereferencing {:?}\",\n+                                 self.cur_ty)\n+                    .span_label(self.span, \"deref recursion limit reached\")\n+                    .help(&format!(\n+                        \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n                         suggested_limit))\n-                .emit();\n+                    .emit();\n+            }\n             return None;\n         }\n "}, {"sha": "6703bbba86b1c9db37271eefd9767c4477e1ac90", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::iter;\n \n use check::FnCtxt;\n use rustc::infer::InferOk;\n@@ -137,49 +138,45 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some((msg, suggestion)) = self.check_ref(expr, checked_ty, expected) {\n             err.span_suggestion(expr.span, msg, suggestion);\n         } else {\n-            let mode = probe::Mode::MethodCall;\n-            let suggestions = self.probe_for_return_type(syntax_pos::DUMMY_SP,\n-                                                         mode,\n-                                                         expected,\n-                                                         checked_ty,\n-                                                         ast::DUMMY_NODE_ID);\n-            if suggestions.len() > 0 {\n-                err.help(&format!(\"here are some functions which \\\n-                                   might fulfill your needs:\\n{}\",\n-                                  self.get_best_match(&suggestions).join(\"\\n\")));\n+            let methods = self.get_conversion_methods(expected, checked_ty);\n+            if let Ok(expr_text) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n+                let suggestions = iter::repeat(expr_text).zip(methods.iter())\n+                    .map(|(receiver, method)| format!(\"{}.{}()\", receiver, method.name))\n+                    .collect::<Vec<_>>();\n+                if !suggestions.is_empty() {\n+                    err.span_suggestions(expr.span,\n+                                         \"try using a conversion method\",\n+                                         suggestions);\n+                }\n             }\n         }\n         (expected, Some(err))\n     }\n \n-    fn format_method_suggestion(&self, method: &AssociatedItem) -> String {\n-        format!(\"- .{}({})\",\n-                method.name,\n-                if self.has_no_input_arg(method) {\n-                    \"\"\n-                } else {\n-                    \"...\"\n-                })\n-    }\n-\n-    fn display_suggested_methods(&self, methods: &[AssociatedItem]) -> Vec<String> {\n-        methods.iter()\n-               .take(5)\n-               .map(|method| self.format_method_suggestion(&*method))\n-               .collect::<Vec<String>>()\n-    }\n+    fn get_conversion_methods(&self, expected: Ty<'tcx>, checked_ty: Ty<'tcx>)\n+                              -> Vec<AssociatedItem> {\n+        let mut methods = self.probe_for_return_type(syntax_pos::DUMMY_SP,\n+                                                     probe::Mode::MethodCall,\n+                                                     expected,\n+                                                     checked_ty,\n+                                                     ast::DUMMY_NODE_ID);\n+        methods.retain(|m| {\n+            self.has_no_input_arg(m) &&\n+                self.tcx.get_attrs(m.def_id).iter()\n+                // This special internal attribute is used to whitelist\n+                // \"identity-like\" conversion methods to be suggested here.\n+                //\n+                // FIXME (#46459 and #46460): ideally\n+                // `std::convert::Into::into` and `std::borrow:ToOwned` would\n+                // also be `#[rustc_conversion_suggestion]`, if not for\n+                // method-probing false-positives and -negatives (respectively).\n+                //\n+                // FIXME? Other potential candidate methods: `as_ref` and\n+                // `as_mut`?\n+                .find(|a| a.check_name(\"rustc_conversion_suggestion\")).is_some()\n+        });\n \n-    fn get_best_match(&self, methods: &[AssociatedItem]) -> Vec<String> {\n-        let no_argument_methods: Vec<_> =\n-            methods.iter()\n-                   .filter(|ref x| self.has_no_input_arg(&*x))\n-                   .map(|x| x.clone())\n-                   .collect();\n-        if no_argument_methods.len() > 0 {\n-            self.display_suggested_methods(&no_argument_methods)\n-        } else {\n-            self.display_suggested_methods(&methods)\n-        }\n+        methods\n     }\n \n     // This function checks if the method isn't static and takes other arguments than `self`."}, {"sha": "012e2831edbbb1ded3cf991386336b89d63ac8db", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                scope_expr_id);\n         let method_names =\n             self.probe_op(span, mode, None, Some(return_type), IsSuggestion(true),\n-                          self_ty, scope_expr_id, ProbeScope::TraitsInScope,\n+                          self_ty, scope_expr_id, ProbeScope::AllTraits,\n                           |probe_cx| Ok(probe_cx.candidate_method_names()))\n                 .unwrap_or(vec![]);\n          method_names\n@@ -199,7 +199,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                  self.probe_op(\n                      span, mode, Some(method_name), Some(return_type),\n                      IsSuggestion(true), self_ty, scope_expr_id,\n-                     ProbeScope::TraitsInScope, |probe_cx| probe_cx.pick()\n+                     ProbeScope::AllTraits, |probe_cx| probe_cx.pick()\n                  ).ok().map(|pick| pick.item)\n              })\n             .collect()"}, {"sha": "0d4e310480d7ebec973e9b7f52a518babf80011a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -229,7 +229,7 @@\n \n // Turn warnings into errors, but only after stage0, where it can be useful for\n // code to emit warnings during language transitions\n-#![deny(warnings)]\n+#![cfg_attr(not(stage0), deny(warnings))]\n \n // std may use features in a platform-specific way\n #![allow(unused_features)]"}, {"sha": "6328e4a844768b3fa2d29d0e4aedbe74718d3eaa", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -1702,6 +1702,7 @@ impl Path {\n     /// let path_buf = Path::new(\"foo.txt\").to_path_buf();\n     /// assert_eq!(path_buf, std::path::PathBuf::from(\"foo.txt\"));\n     /// ```\n+    #[rustc_conversion_suggestion]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_path_buf(&self) -> PathBuf {\n         PathBuf::from(self.inner.to_os_string())"}, {"sha": "d3e78b3be26bc5578680320621f461e06690e199", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -966,6 +966,13 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                       never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n \n+    // whitelists \"identity-like\" conversion methods to suggest on type mismatch\n+    (\"rustc_conversion_suggestion\", Whitelisted, Gated(Stability::Unstable,\n+                                                       \"rustc_attrs\",\n+                                                       \"this is an internal attribute that will \\\n+                                                        never be stable\",\n+                                                       cfg_fn!(rustc_attrs))),\n+\n     (\"wasm_import_memory\", Whitelisted, Gated(Stability::Unstable,\n                                  \"wasm_import_memory\",\n                                  \"wasm_import_memory attribute is currently unstable\","}, {"sha": "4c2896e220735e12dad0291414fc8814e1e5f1c3", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -2,16 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:18:9\n    |\n 18 |     foo(s); //~ ERROR mismatched types\n-   |         ^ expected struct `std::string::String`, found reference\n+   |         ^\n+   |         |\n+   |         expected struct `std::string::String`, found reference\n+   |         help: try using a conversion method: `s.to_string()`\n    |\n    = note: expected type `std::string::String`\n               found type `&std::string::String`\n-   = help: here are some functions which might fulfill your needs:\n-           - .escape_debug()\n-           - .escape_default()\n-           - .escape_unicode()\n-           - .to_ascii_lowercase()\n-           - .to_ascii_uppercase()\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:23:10"}, {"sha": "860c6bb5b909f821ec296b897c050d8d2fc48759", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -4,11 +4,11 @@ error[E0055]: reached the recursion limit while auto-dereferencing I\n 62 |     let x: &Bottom = &t; //~ ERROR mismatched types\n    |                      ^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#[recursion_limit=\"20\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n \n error[E0055]: reached the recursion limit while auto-dereferencing I\n   |\n-  = help: consider adding a `#[recursion_limit=\"20\"]` attribute to your crate\n+  = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n \n error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:62:22"}, {"sha": "06f0e6ec228f20489d71f4ab4e1a9b691ad3d8a6", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -6,9 +6,6 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `usize`\n               found type `std::string::String`\n-   = help: here are some functions which might fulfill your needs:\n-           - .capacity()\n-           - .len()\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:19:19\n@@ -44,7 +41,10 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:27:9\n    |\n 27 |     f = box f;\n-   |         ^^^^^ cyclic type of infinite size\n+   |         ^^^^^\n+   |         |\n+   |         cyclic type of infinite size\n+   |         help: try using a conversion method: `box f.to_string()`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:31:9"}, {"sha": "18860a7456eacb52a4e43f8d47953cdb28cc5848", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -33,8 +33,6 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `usize`\n               found type `&'static str`\n-   = help: here are some functions which might fulfill your needs:\n-           - .len()\n \n error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n   --> $DIR/issue-34264.rs:20:5"}, {"sha": "8a53bc3ca9385b53b8790eda762c29fc96835abb", "filename": "src/test/ui/suggestions/conversion-methods.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fsuggestions%2Fconversion-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fsuggestions%2Fconversion-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconversion-methods.rs?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::path::{Path, PathBuf};\n+\n+\n+fn main() {\n+    let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\"; //~ ERROR mismatched types\n+    let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n+    //~^ ERROR mismatched types\n+\n+    let _but_should_the_play: String = 2; // Perhaps surprisingly, we suggest .to_string() here\n+    //~^ ERROR mismatched types\n+\n+    let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3]; //~ ERROR mismatched types\n+}"}, {"sha": "96fdc29d952cb319f048b6e645a9c379f9952841", "filename": "src/test/ui/suggestions/conversion-methods.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fsuggestions%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aba56ddd05d821b6f0a3e5fc05bc47311e09051c/src%2Ftest%2Fui%2Fsuggestions%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconversion-methods.stderr?ref=aba56ddd05d821b6f0a3e5fc05bc47311e09051c", "patch": "@@ -0,0 +1,50 @@\n+error[E0308]: mismatched types\n+  --> $DIR/conversion-methods.rs:15:41\n+   |\n+15 |     let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\"; //~ ERROR mismatched types\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^\n+   |                                         |\n+   |                                         expected struct `std::string::String`, found reference\n+   |                                         help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/conversion-methods.rs:16:40\n+   |\n+16 |     let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                        |\n+   |                                        expected struct `std::path::PathBuf`, found reference\n+   |                                        help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n+   |\n+   = note: expected type `std::path::PathBuf`\n+              found type `&std::path::Path`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/conversion-methods.rs:19:40\n+   |\n+19 |     let _but_should_the_play: String = 2; // Perhaps surprisingly, we suggest .to_string() here\n+   |                                        ^\n+   |                                        |\n+   |                                        expected struct `std::string::String`, found integral variable\n+   |                                        help: try using a conversion method: `2.to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/conversion-methods.rs:22:47\n+   |\n+22 |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3]; //~ ERROR mismatched types\n+   |                                               ^^^^^^^^^^\n+   |                                               |\n+   |                                               expected struct `std::vec::Vec`, found reference\n+   |                                               help: try using a conversion method: `&[1, 2, 3].to_vec()`\n+   |\n+   = note: expected type `std::vec::Vec<usize>`\n+              found type `&[{integer}; 3]`\n+\n+error: aborting due to 4 previous errors\n+"}]}