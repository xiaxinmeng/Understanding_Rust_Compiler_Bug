{"sha": "b5c7530fcf879576f43d31b635e8363fd8609405", "node_id": "C_kwDOAAsO6NoAKGI1Yzc1MzBmY2Y4Nzk1NzZmNDNkMzFiNjM1ZTgzNjNmZDg2MDk0MDU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-12-02T02:37:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-12-20T21:37:14Z"}, "message": "compare calling convention instead of call ABI", "tree": {"sha": "5ab16cb37036da8629fa08804a0d8463231ae73a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ab16cb37036da8629fa08804a0d8463231ae73a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c7530fcf879576f43d31b635e8363fd8609405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c7530fcf879576f43d31b635e8363fd8609405", "html_url": "https://github.com/rust-lang/rust/commit/b5c7530fcf879576f43d31b635e8363fd8609405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c7530fcf879576f43d31b635e8363fd8609405/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc5fd6135c1c7b1c3933ce8df12f20799e2da13", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc5fd6135c1c7b1c3933ce8df12f20799e2da13", "html_url": "https://github.com/rust-lang/rust/commit/fcc5fd6135c1c7b1c3933ce8df12f20799e2da13"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "a5907a2cacc99ba88d9edf9b42cdef2e0ceeee95", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 9, "deletions": 37, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b5c7530fcf879576f43d31b635e8363fd8609405/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c7530fcf879576f43d31b635e8363fd8609405/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=b5c7530fcf879576f43d31b635e8363fd8609405", "patch": "@@ -274,9 +274,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Call this function -- pushing the stack frame and initializing the arguments.\n     ///\n-    /// For now, we require *both* the `Abi` and `FnAbi` of the caller. In principle, however,\n-    /// `FnAbi` should be enough -- if they are sufficiently compatible, it's probably okay for\n-    /// `Abi` to differ.\n+    /// `caller_fn_abi` is used to determine if all the arguments are passed the proper way.\n+    /// However, we also need `caller_abi` to determine if we need to do untupling of arguments.\n     ///\n     /// `with_caller_location` indicates whether the caller passed a caller location. Miri\n     /// implements caller locations without argument passing, but to match `FnAbi` we need to know\n@@ -299,40 +298,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n \n-        let get_abi = |this: &Self, instance_ty: Ty<'tcx>| match instance_ty.kind() {\n-            ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n-            // Even after lowering closures and generators away, the *callee* can still have this\n-            // kind of type.\n-            ty::Closure(..) => Abi::RustCall,\n-            ty::Generator(..) => Abi::Rust,\n-            _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n-        };\n-\n-        // ABI check\n-        let check_abi = |callee_abi: Abi| -> InterpResult<'tcx> {\n-            let normalize_abi = |abi| match abi {\n-                Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n-                // These are all the same ABI, really.\n-                {\n-                    Abi::Rust\n-                }\n-                abi => abi,\n-            };\n-            if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n-                throw_ub_format!(\n-                    \"calling a function with ABI {} using caller ABI {}\",\n-                    callee_abi.name(),\n-                    caller_abi.name()\n-                )\n-            }\n-            Ok(())\n-        };\n-\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n-                if M::enforce_abi(self) {\n-                    check_abi(get_abi(self, instance.ty(*self.tcx, self.param_env)))?;\n-                }\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n                 // caller_fn_abi is not relevant here, we interpret the arguments directly for each intrinsic.\n                 M::call_intrinsic(self, instance, args, ret, unwind)\n@@ -353,14 +320,19 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 // Compute callee information using the `instance` returned by\n                 // `find_mir_or_eval_fn`.\n-                let callee_abi = get_abi(self, instance.ty(*self.tcx, self.param_env));\n                 // FIXME: for variadic support, do we have to somehow determine calle's extra_args?\n                 let callee_fn_abi = self.fn_abi_of_instance(instance, ty::List::empty())?;\n                 assert!(!callee_fn_abi.c_variadic);\n                 assert!(!caller_fn_abi.c_variadic);\n \n                 if M::enforce_abi(self) {\n-                    check_abi(callee_abi)?;\n+                    if caller_fn_abi.conv != callee_fn_abi.conv {\n+                        throw_ub_format!(\n+                            \"calling a function with calling convention {:?} using calling convention {:?}\",\n+                            callee_fn_abi.conv,\n+                            caller_fn_abi.conv\n+                        )\n+                    }\n                 }\n \n                 if !matches!(unwind, StackPopUnwind::NotAllowed) && !callee_fn_abi.can_unwind {"}, {"sha": "3360e9cacda655064862a8a9fcbf46b2af6a9c91", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5c7530fcf879576f43d31b635e8363fd8609405/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c7530fcf879576f43d31b635e8363fd8609405/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs?ref=b5c7530fcf879576f43d31b635e8363fd8609405", "patch": "@@ -9,7 +9,7 @@ const extern \"C\" fn c_fn() {}\n const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n     my_fn();\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE calling a function with ABI C using caller ABI Rust\n+    //~| NOTE calling a function with calling convention C using calling convention Rust\n     //~| NOTE inside `call_rust_fn`\n }\n "}, {"sha": "e2f9708ddcb0143509ce9918fb39dbbd717ae7ea", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5c7530fcf879576f43d31b635e8363fd8609405/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5c7530fcf879576f43d31b635e8363fd8609405/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=b5c7530fcf879576f43d31b635e8363fd8609405", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n-   |     calling a function with ABI C using caller ABI Rust\n+   |     calling a function with calling convention C using calling convention Rust\n    |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:10:5\n ...\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });"}]}