{"sha": "0302d379776fca82d3eb693046239dc66998f691", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMDJkMzc5Nzc2ZmNhODJkM2ViNjkzMDQ2MjM5ZGM2Njk5OGY2OTE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-30T02:58:31Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T01:30:51Z"}, "message": "Merge `UnicodeChar` and `CharExt`.\n\nThis \"reexports\" all the functionality of `core::char::CharExt` as\nmethods on `unicode::u_char::UnicodeChar` (renamed to `CharExt`).\n\nImports may need to be updated (one now just imports\n`unicode::CharExt`, or `std::char::CharExt` rather than two traits from\neither), so this is a\n\n[breaking-change]", "tree": {"sha": "ee410f469e5a025f09d1eca774ca3aa71f9d519e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee410f469e5a025f09d1eca774ca3aa71f9d519e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0302d379776fca82d3eb693046239dc66998f691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0302d379776fca82d3eb693046239dc66998f691", "html_url": "https://github.com/rust-lang/rust/commit/0302d379776fca82d3eb693046239dc66998f691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0302d379776fca82d3eb693046239dc66998f691/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19120209d8e532514203d16a2cff0ad3b44de3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/19120209d8e532514203d16a2cff0ad3b44de3bb", "html_url": "https://github.com/rust-lang/rust/commit/19120209d8e532514203d16a2cff0ad3b44de3bb"}], "stats": {"total": 135, "additions": 116, "deletions": 19}, "files": [{"sha": "db2367950387b4a125d74446770a90fb07e6dc35", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -103,7 +103,6 @@ mod std {\n mod prelude {\n     // from core.\n     pub use core::borrow::IntoCow;\n-    pub use core::char::CharExt;\n     pub use core::clone::Clone;\n     pub use core::cmp::{PartialEq, Eq, PartialOrd, Ord};\n     pub use core::cmp::Ordering::{Less, Equal, Greater};\n@@ -127,7 +126,7 @@ mod prelude {\n \n     // from other crates.\n     pub use alloc::boxed::Box;\n-    pub use unicode::char::UnicodeChar;\n+    pub use unicode::char::CharExt;\n \n     // from collections.\n     pub use slice::SliceConcatExt;"}, {"sha": "3fa0b5645c5288fba7b0ccc61a802ac7b20e88d8", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -248,7 +248,6 @@ use str;\n use string::String;\n use uint;\n use unicode;\n-use unicode::char::UnicodeChar;\n use vec::Vec;\n \n // Reexports"}, {"sha": "67fe599ecd6bfcbfe588a06620d64748fa16bd8a", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -16,7 +16,7 @@ use self::ExponentFormat::*;\n use self::SignificantDigits::*;\n use self::SignFormat::*;\n \n-use char::{self, Char};\n+use char::{self, CharExt};\n use num::{self, Int, Float, ToPrimitive};\n use num::FpCategory as Fp;\n use ops::FnMut;"}, {"sha": "cf8bc0e6242b312752e0ac621563ead9f994d2a5", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -16,6 +16,7 @@ use self::PathPrefix::*;\n \n use ascii::AsciiExt;\n use c_str::{CString, ToCStr};\n+use char::CharExt;\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n@@ -28,7 +29,6 @@ use option::Option::{Some, None};\n use slice::{SliceExt, SliceConcatExt};\n use str::{SplitTerminator, FromStr, StrExt};\n use string::{String, ToString};\n-use unicode::char::UnicodeChar;\n use vec::Vec;\n \n use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};"}, {"sha": "f6bdcd53dff24c29dd68528d1f45ebbb427e051f", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -22,7 +22,7 @@\n // Reexported types and traits\n \n #[stable] #[doc(no_inline)] pub use boxed::Box;\n-#[stable] #[doc(no_inline)] pub use char::{CharExt, UnicodeChar};\n+#[stable] #[doc(no_inline)] pub use char::CharExt;\n #[stable] #[doc(no_inline)] pub use clone::Clone;\n #[stable] #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable] #[doc(no_inline)] pub use iter::CloneIteratorExt;"}, {"sha": "a3884d0c86e1de78a708508117d6a611e598b3c1", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -44,9 +44,9 @@ mod u_str;\n // re-export char so that std et al see it correctly\n /// Character manipulation (`char` type, Unicode Scalar Value)\n ///\n-/// This module  provides the `Char` and `UnicodeChar` traits, as well as their\n-/// implementation for the primitive `char` type, in order to allow basic character\n-/// manipulation.\n+/// This module provides the `CharExt` trait, as well as its\n+/// implementation for the primitive `char` type, in order to allow\n+/// basic character manipulation.\n ///\n /// A `char` actually represents a\n /// *[Unicode Scalar Value](http://www.unicode.org/glossary/#unicode_scalar_value)*,\n@@ -58,14 +58,14 @@ mod u_str;\n /// however the converse is not always true due to the above range limits\n /// and, as such, should be performed via the `from_u32` function..\n pub mod char {\n-    pub use core::char::{MAX, from_u32, from_digit, CharExt};\n+    pub use core::char::{MAX, from_u32, from_digit};\n \n     pub use normalize::{decompose_canonical, decompose_compatible, compose};\n \n     pub use tables::normalization::canonical_combining_class;\n     pub use tables::UNICODE_VERSION;\n \n-    pub use u_char::UnicodeChar;\n+    pub use u_char::CharExt;\n }\n \n pub mod str {"}, {"sha": "c755ea93184028fb9f068c2a0b83a902ddbd1752", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -13,7 +13,7 @@\n #![allow(missing_docs, non_upper_case_globals, non_snake_case)]\n \n /// The version of [Unicode](http://www.unicode.org/)\n-/// that the `UnicodeChar` and `UnicodeStrPrelude` traits are based on.\n+/// that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.\n pub const UNICODE_VERSION: (uint, uint, uint) = (7, 0, 0);\n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {"}, {"sha": "c1abfd4e189987a5b8df329278ed34c43d5597f7", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 103, "deletions": 4, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -8,17 +8,99 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unicode-intensive `char` methods.\n+//! Unicode-intensive `char` methods along with the `core` methods.\n //!\n //! These methods implement functionality for `char` that requires knowledge of\n //! Unicode definitions, including normalization, categorization, and display information.\n \n+use core::char;\n+use core::char::CharExt as C;\n use core::option::Option;\n use tables::{derived_property, property, general_category, conversions, charwidth};\n \n-/// Useful functions for Unicode characters.\n+/// Functionality for manipulating `char`.\n #[experimental = \"pending prelude organization\"]\n-pub trait UnicodeChar {\n+pub trait CharExt {\n+    /// Checks if a `char` parses as a numeric digit in the given radix.\n+    ///\n+    /// Compared to `is_numeric()`, this function only recognizes the characters\n+    /// `0-9`, `a-z` and `A-Z`.\n+    ///\n+    /// # Return value\n+    ///\n+    /// Returns `true` if `c` is a valid digit under `radix`, and `false`\n+    /// otherwise.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if given a radix > 36.\n+    #[unstable = \"pending integer conventions\"]\n+    fn is_digit(self, radix: uint) -> bool;\n+\n+    /// Converts a character to the corresponding digit.\n+    ///\n+    /// # Return value\n+    ///\n+    /// If `c` is between '0' and '9', the corresponding value between 0 and\n+    /// 9. If `c` is 'a' or 'A', 10. If `c` is 'b' or 'B', 11, etc. Returns\n+    /// none if the character does not refer to a digit in the given radix.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if given a radix outside the range [0..36].\n+    #[unstable = \"pending integer conventions\"]\n+    fn to_digit(self, radix: uint) -> Option<uint>;\n+\n+    /// Returns an iterator that yields the hexadecimal Unicode escape\n+    /// of a character, as `char`s.\n+    ///\n+    /// All characters are escaped with Rust syntax of the form `\\\\u{NNNN}`\n+    /// where `NNNN` is the shortest hexadecimal representation of the code\n+    /// point.\n+    #[stable]\n+    fn escape_unicode(self) -> char::EscapeUnicode;\n+\n+    /// Returns an iterator that yields the 'default' ASCII and\n+    /// C++11-like literal escape of a character, as `char`s.\n+    ///\n+    /// The default is chosen with a bias toward producing literals that are\n+    /// legal in a variety of languages, including C++11 and similar C-family\n+    /// languages. The exact rules are:\n+    ///\n+    /// * Tab, CR and LF are escaped as '\\t', '\\r' and '\\n' respectively.\n+    /// * Single-quote, double-quote and backslash chars are backslash-\n+    ///   escaped.\n+    /// * Any other chars in the range [0x20,0x7e] are not escaped.\n+    /// * Any other chars are given hex Unicode escapes; see `escape_unicode`.\n+    #[stable]\n+    fn escape_default(self) -> char::EscapeDefault;\n+\n+    /// Returns the amount of bytes this character would need if encoded in\n+    /// UTF-8.\n+    #[stable]\n+    fn len_utf8(self) -> uint;\n+\n+    /// Returns the amount of bytes this character would need if encoded in\n+    /// UTF-16.\n+    #[stable]\n+    fn len_utf16(self) -> uint;\n+\n+    /// Encodes this character as UTF-8 into the provided byte buffer,\n+    /// and then returns the number of bytes written.\n+    ///\n+    /// If the buffer is not large enough, nothing will be written into it\n+    /// and a `None` will be returned.\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint>;\n+\n+    /// Encodes this character as UTF-16 into the provided `u16` buffer,\n+    /// and then returns the number of `u16`s written.\n+    ///\n+    /// If the buffer is not large enough, nothing will be written into it\n+    /// and a `None` will be returned.\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint>;\n+\n     /// Returns whether the specified character is considered a Unicode\n     /// alphabetic code point.\n     fn is_alphabetic(self) -> bool;\n@@ -118,7 +200,24 @@ pub trait UnicodeChar {\n }\n \n #[experimental = \"pending prelude organization\"]\n-impl UnicodeChar for char {\n+impl CharExt for char {\n+    #[unstable = \"pending integer conventions\"]\n+    fn is_digit(self, radix: uint) -> bool { C::is_digit(self, radix) }\n+    #[unstable = \"pending integer conventions\"]\n+    fn to_digit(self, radix: uint) -> Option<uint> { C::to_digit(self, radix) }\n+    #[stable]\n+    fn escape_unicode(self) -> char::EscapeUnicode { C::escape_unicode(self) }\n+    #[stable]\n+    fn escape_default(self) -> char::EscapeDefault { C::escape_default(self) }\n+    #[stable]\n+    fn len_utf8(self) -> uint { C::len_utf8(self) }\n+    #[stable]\n+    fn len_utf16(self) -> uint { C::len_utf16(self) }\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint> { C::encode_utf8(self, dst) }\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint> { C::encode_utf16(self, dst) }\n+\n     fn is_alphabetic(self) -> bool {\n         match self {\n             'a' ... 'z' | 'A' ... 'Z' => true,"}, {"sha": "90949437774f107c3f1aa463af994ed7f2ce9170", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0302d379776fca82d3eb693046239dc66998f691/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=0302d379776fca82d3eb693046239dc66998f691", "patch": "@@ -13,7 +13,7 @@\n //! Unicode-intensive string manipulations.\n //!\n //! This module provides functionality to `str` that requires the Unicode methods provided by the\n-//! UnicodeChar trait.\n+//! unicode parts of the CharExt trait.\n \n use self::GraphemeState::*;\n use core::prelude::*;\n@@ -26,7 +26,7 @@ use core::num::Int;\n use core::slice;\n use core::str::Split;\n \n-use u_char::UnicodeChar;\n+use u_char::CharExt as UCharExt; // conflicts with core::prelude::CharExt\n use tables::grapheme::GraphemeCat;\n \n /// An iterator over the words of a string, separated by a sequence of whitespace\n@@ -529,7 +529,7 @@ impl<I> Iterator for Utf16Encoder<I> where I: Iterator<Item=char> {\n \n         let mut buf = [0u16; 2];\n         self.chars.next().map(|ch| {\n-            let n = ch.encode_utf16(buf.as_mut_slice()).unwrap_or(0);\n+            let n = CharExt::encode_utf16(ch, buf.as_mut_slice()).unwrap_or(0);\n             if n == 2 { self.extra = buf[1]; }\n             buf[0]\n         })"}]}