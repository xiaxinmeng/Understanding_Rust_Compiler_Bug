{"sha": "08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTc3ZTA2YThiN2U3NjQ2NmE1YzE3NzE1OWE1ZWNkZjNjYWQzMWI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T21:05:06Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T22:15:46Z"}, "message": "Rewrite task-comm-NN to use pipes", "tree": {"sha": "9a4ab8ed348fafd1b8e54e5366d870771e02cbf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4ab8ed348fafd1b8e54e5366d870771e02cbf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "html_url": "https://github.com/rust-lang/rust/commit/08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60d682b57759a4fd3b6f666963e40ba457c2e4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/60d682b57759a4fd3b6f666963e40ba457c2e4fc", "html_url": "https://github.com/rust-lang/rust/commit/60d682b57759a4fd3b6f666963e40ba457c2e4fc"}], "stats": {"total": 361, "additions": 151, "deletions": 210}, "files": [{"sha": "a999d615e31b45d0146da275841030c1e82a14b2", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 6, "deletions": 53, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -30,59 +30,6 @@ macro_rules! move {\n // places. Once there is unary move, it can be removed.\n fn move<T>(-x: T) -> T { x }\n \n-/**\n-\n-Some thoughts about fixed buffers.\n-\n-The idea is if a protocol is bounded, we will synthesize a record that\n-has a field for each state. Each of these states contains a packet for\n-the messages that are legal to be sent in that state. Then, instead of\n-allocating, the send code just finds a pointer to the right field and\n-uses that instead.\n-\n-Unforunately, this makes things kind of tricky. We need to be able to\n-find the buffer, which means we need to pass it around. This could\n-either be associated with the (send|recv)_packet classes, or with the\n-packet itself. We will also need some form of reference counting so we\n-can track who has the responsibility of freeing the buffer.\n-\n-We want to preserve the ability to do things like optimistic buffer\n-re-use, and skipping over to a new buffer when necessary. What I mean\n-is, suppose we had the typical stream protocol. It'd make sense to\n-amortize allocation costs by allocating a buffer with say 16\n-messages. When the sender gets to the end of the buffer, it could\n-check if the receiver is done with the packet in slot 0. If so, it can\n-just reuse that one, checking if the receiver is done with the next\n-one in each case. If it is ever not done, it just allocates a new\n-buffer and skips over to that.\n-\n-Also, since protocols are in libcore, we have to do this in a way that\n-maintains backwards compatibility.\n-\n-buffer header and buffer. Cast as c_void when necessary.\n-\n-===\n-\n-Okay, here are some new ideas.\n-\n-It'd be nice to keep the bounded/unbounded case as uniform as\n-possible. It leads to less code duplication, and less things that can\n-go sublty wrong. For the bounded case, we could either have a struct\n-with a bunch of unique pointers to pre-allocated packets, or we could\n-lay them out inline. Inline layout is better, if for no other reason\n-than that we don't have to allocate each packet\n-individually. Currently we pass unique packets around as unsafe\n-pointers, but they are actually unique pointers. We should instead use\n-real unsafe pointers. This makes freeing data and running destructors\n-trickier though. Thus, we should allocate all packets in parter of a\n-higher level buffer structure. Packets can maintain a pointer to their\n-buffer, and this is the part that gets freed.\n-\n-It might be helpful to have some idea of a semi-unique pointer (like\n-being partially pregnant, also like an ARC).\n-\n-*/\n-\n enum state {\n     empty,\n     full,\n@@ -805,6 +752,12 @@ class port_set<T: send> : recv<T> {\n         vec::push(self.ports, port)\n     }\n \n+    fn chan() -> chan<T> {\n+        let (ch, po) = stream();\n+        self.add(po);\n+        ch\n+    }\n+\n     fn try_recv() -> option<T> {\n         let mut result = none;\n         while result == none && self.ports.len() > 0 {"}, {"sha": "eb866ee7b3e7934bf3857a2336ceca4c4f15d81e", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,31 +1,29 @@\n use std;\n \n-import comm;\n-import comm::chan;\n-import comm::send;\n+import pipes;\n+import pipes::chan;\n+import pipes::port;\n import task;\n \n fn main() { test05(); }\n \n fn test05_start(ch : chan<int>) {\n-    log(error, ch);\n-    send(ch, 10);\n+    ch.send(10);\n     #error(\"sent 10\");\n-    send(ch, 20);\n+    ch.send(20);\n     #error(\"sent 20\");\n-    send(ch, 30);\n+    ch.send(30);\n     #error(\"sent 30\");\n }\n \n fn test05() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let (ch, po) = pipes::stream();\n     task::spawn(|| test05_start(ch) );\n-    let mut value = comm::recv(po);\n+    let mut value = po.recv();\n     log(error, value);\n-    value = comm::recv(po);\n+    value = po.recv();\n     log(error, value);\n-    value = comm::recv(po);\n+    value = po.recv();\n     log(error, value);\n     assert (value == 30);\n }"}, {"sha": "ef94a13c072616ccb94eca9186b1af8d5a4d2a53", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,28 +1,27 @@\n use std;\n import task;\n-import comm;\n+import pipes;\n \n-fn start(c: comm::chan<comm::chan<~str>>) {\n-    let p = comm::port();\n-    comm::send(c, comm::chan(p));\n+fn start(c: pipes::chan<pipes::chan<~str>>) {\n+    let (ch, p) = pipes::stream();\n+    c.send(ch);\n \n     let mut a;\n     let mut b;\n-    a = comm::recv(p);\n+    a = p.recv();\n     assert a == ~\"A\";\n     log(error, a);\n-    b = comm::recv(p);\n+    b = p.recv();\n     assert b == ~\"B\";\n     log(error, b);\n }\n \n fn main() {\n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let (ch, p) = pipes::stream();\n     let child = task::spawn(|| start(ch) );\n \n-    let c = comm::recv(p);\n-    comm::send(c, ~\"A\");\n-    comm::send(c, ~\"B\");\n+    let c = p.recv();\n+    c.send(~\"A\");\n+    c.send(~\"B\");\n     task::yield();\n }"}, {"sha": "5e1e5c5facd264389195ee14e41e44af4cb98d2a", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,15 +1,14 @@\n use std;\n-import comm;\n+import pipes;\n import task;\n \n-fn start(c: comm::chan<comm::chan<int>>) {\n-    let p: comm::port<int> = comm::port();\n-    comm::send(c, comm::chan(p));\n+fn start(c: pipes::chan<pipes::chan<int>>) {\n+    let (ch, p) = pipes::stream();\n+    c.send(ch);\n }\n \n fn main() {\n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let (ch, p) = pipes::stream();\n     let child = task::spawn(|| start(ch) );\n-    let c = comm::recv(p);\n+    let c = p.recv();\n }"}, {"sha": "88220437c4316e191cca987ec90d79d227108c0a", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,17 +1,16 @@\n use std;\n import task;\n-import comm;\n-import comm::send;\n+import pipes;\n+import pipes::send;\n \n-fn start(c: comm::chan<int>, start: int, number_of_messages: int) {\n+fn start(c: pipes::chan<int>, start: int, number_of_messages: int) {\n     let mut i: int = 0;\n-    while i < number_of_messages { send(c, start + i); i += 1; }\n+    while i < number_of_messages { c.send(start + i); i += 1; }\n }\n \n fn main() {\n     #debug(\"Check that we don't deadlock.\");\n-    let p = comm::port::<int>();\n-    let ch = comm::chan(p);\n+    let (ch, p) = pipes::stream();\n     task::try(|| start(ch, 0, 10) );\n     #debug(\"Joined task\");\n }"}, {"sha": "268b6d06dfdeed98229b5a4eee9788111d4278f8", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,15 +1,14 @@\n-use std;\n-import comm;\n import task;\n \n fn main() {\n-    let po = comm::port::<int>();\n-    let ch = comm::chan(po);\n+    let po = pipes::port_set();\n \n     // Spawn 10 tasks each sending us back one int.\n     let mut i = 10;\n     while (i > 0) {\n         log(debug, i);\n+        let (ch, p) = pipes::stream();\n+        po.add(p);\n         task::spawn(|copy i| child(i, ch) );\n         i = i - 1;\n     }\n@@ -18,17 +17,16 @@ fn main() {\n     // anything back, so we deadlock here.\n \n     i = 10;\n-    let mut value = 0;\n     while (i > 0) {\n         log(debug, i);\n-        value = comm::recv(po);\n+        po.recv();\n         i = i - 1;\n     }\n \n     #debug(\"main thread exiting\");\n }\n \n-fn child(x: int, ch: comm::chan<int>) {\n+fn child(x: int, ch: pipes::chan<int>) {\n     log(debug, x);\n-    comm::send(ch, copy x);\n+    ch.send(x);\n }"}, {"sha": "71a732490ce00787278d8dac84fde60059585d2c", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,23 +1,21 @@\n // xfail-win32\n use std;\n-import comm;\n import task;\n \n-fn start(c: comm::chan<int>, i0: int) {\n+fn start(c: pipes::chan<int>, i0: int) {\n     let mut i = i0;\n     while i > 0 {\n-        comm::send(c, 0);\n+        c.send(0);\n         i = i - 1;\n     }\n }\n \n fn main() {\n-    let p = comm::port();\n     // Spawn a task that sends us back messages. The parent task\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n-    let ch = comm::chan(p);\n-    let child = task::spawn(|| start(ch, 10) );\n-    let c = comm::recv(p);\n+    let (ch, p) = pipes::stream();\n+    task::spawn(|| start(ch, 10));\n+    p.recv();\n }"}, {"sha": "2d1c72df713c9cf2065b0d77075e431a3943c2ee", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,44 +1,41 @@\n // -*- rust -*-\n \n use std;\n-import comm;\n-import comm::send;\n-import comm::port;\n-import comm::recv;\n-import comm::chan;\n+import pipes;\n+import pipes::send;\n+import pipes::port;\n+import pipes::recv;\n+import pipes::chan;\n \n // Tests of ports and channels on various types\n fn test_rec() {\n     type r = {val0: int, val1: u8, val2: char};\n \n-    let po = comm::port();\n-    let ch = chan(po);\n+    let (ch, po) = pipes::stream();\n     let r0: r = {val0: 0, val1: 1u8, val2: '2'};\n-    send(ch, r0);\n+    ch.send(r0);\n     let mut r1: r;\n-    r1 = recv(po);\n+    r1 = po.recv();\n     assert (r1.val0 == 0);\n     assert (r1.val1 == 1u8);\n     assert (r1.val2 == '2');\n }\n \n fn test_vec() {\n-    let po = port();\n-    let ch = chan(po);\n+    let (ch, po) = pipes::stream();\n     let v0: ~[int] = ~[0, 1, 2];\n-    send(ch, v0);\n-    let v1 = recv(po);\n+    ch.send(v0);\n+    let v1 = po.recv();\n     assert (v1[0] == 0);\n     assert (v1[1] == 1);\n     assert (v1[2] == 2);\n }\n \n fn test_str() {\n-    let po = port();\n-    let ch = chan(po);\n-    let s0 = ~\"test\";\n-    send(ch, s0);\n-    let s1 = recv(po);\n+    let (ch, po) = pipes::stream();\n+    let s0 = \"test\";\n+    ch.send(s0);\n+    let s1 = po.recv();\n     assert (s1[0] == 't' as u8);\n     assert (s1[1] == 'e' as u8);\n     assert (s1[2] == 's' as u8);\n@@ -47,33 +44,36 @@ fn test_str() {\n \n fn test_tag() {\n     enum t { tag1, tag2(int), tag3(int, u8, char), }\n-    let po = port();\n-    let ch = chan(po);\n-    send(ch, tag1);\n-    send(ch, tag2(10));\n-    send(ch, tag3(10, 11u8, 'A'));\n+    let (ch, po) = pipes::stream();\n+    ch.send(tag1);\n+    ch.send(tag2(10));\n+    ch.send(tag3(10, 11u8, 'A'));\n     let mut t1: t;\n-    t1 = recv(po);\n+    t1 = po.recv();\n     assert (t1 == tag1);\n-    t1 = recv(po);\n+    t1 = po.recv();\n     assert (t1 == tag2(10));\n-    t1 = recv(po);\n+    t1 = po.recv();\n     assert (t1 == tag3(10, 11u8, 'A'));\n }\n \n fn test_chan() {\n-    let po = port();\n-    let ch = chan(po);\n-    let po0 = port();\n-    let ch0 = chan(po0);\n-    send(ch, ch0);\n-    let ch1 = recv(po);\n+    let (ch, po) = pipes::stream();\n+    let (ch0, po0) = pipes::stream();\n+    ch.send(ch0);\n+    let ch1 = po.recv();\n     // Does the transmitted channel still work?\n \n-    send(ch1, 10);\n+    ch1.send(10);\n     let mut i: int;\n-    i = recv(po0);\n+    i = po0.recv();\n     assert (i == 10);\n }\n \n-fn main() { test_rec(); test_vec(); test_str(); test_tag(); test_chan(); }\n+fn main() {\n+    test_rec();\n+    test_vec();\n+    test_str();\n+    test_tag();\n+    test_chan();\n+}"}, {"sha": "05c057d85fd8814a0903261312e682d2c1127845", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,9 +1,9 @@\n use std;\n import task;\n-import comm;\n-import comm::chan;\n-import comm::send;\n-import comm::recv;\n+import pipes;\n+import pipes::chan;\n+import pipes::send;\n+import pipes::recv;\n \n fn main() { #debug(\"===== WITHOUT THREADS =====\"); test00(); }\n \n@@ -12,7 +12,7 @@ fn test00_start(ch: chan<int>, message: int, count: int) {\n     let mut i: int = 0;\n     while i < count {\n         #debug(\"Sending Message\");\n-        send(ch, message + 0);\n+        ch.send(message + 0);\n         i = i + 1;\n     }\n     #debug(\"Ending test00_start\");\n@@ -24,14 +24,14 @@ fn test00() {\n \n     #debug(\"Creating tasks\");\n \n-    let po = comm::port();\n-    let ch = chan(po);\n+    let po = pipes::port_set();\n \n     let mut i: int = 0;\n \n     // Create and spawn tasks...\n     let mut results = ~[];\n     while i < number_of_tasks {\n+        let ch = po.chan();        \n         do task::task().future_result(|-r| {\n             results += ~[r];\n         }).spawn |copy i| {\n@@ -45,7 +45,7 @@ fn test00() {\n     for results.each |r| {\n         i = 0;\n         while i < number_of_messages {\n-            let value = recv(po);\n+            let value = po.recv();\n             sum += value;\n             i = i + 1;\n         }"}, {"sha": "9b99c1cb799bd5ef6faf5c340e48fbab10d31a6a", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,44 +1,43 @@\n use std;\n-import comm;\n-import comm::send;\n+import pipes;\n+import pipes::send;\n \n fn main() { test00(); }\n \n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::port();\n-    let c = comm::chan(p);\n-    send(c, 1);\n-    send(c, 2);\n-    send(c, 3);\n-    send(c, 4);\n-    r = comm::recv(p);\n+    let (c, p) = pipes::stream();\n+    c.send(1);\n+    c.send(2);\n+    c.send(3);\n+    c.send(4);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n-    r = comm::recv(p);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n-    r = comm::recv(p);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n-    r = comm::recv(p);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n-    send(c, 5);\n-    send(c, 6);\n-    send(c, 7);\n-    send(c, 8);\n-    r = comm::recv(p);\n+    c.send(5);\n+    c.send(6);\n+    c.send(7);\n+    c.send(8);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n-    r = comm::recv(p);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n-    r = comm::recv(p);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n-    r = comm::recv(p);\n+    r = p.recv();\n     sum += r;\n     log(debug, r);\n     assert (sum == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);"}, {"sha": "249bdaf1c9a5d649b748fc6d54d4ebb957ce7946", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,17 +1,16 @@\n use std;\n-import comm;\n+import pipes;\n \n fn main() { test00(); }\n \n fn test00() {\n     let r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::port();\n-    let c = comm::chan(p);\n+    let (c, p) = pipes::stream();\n     let number_of_messages: int = 1000;\n     let mut i: int = 0;\n-    while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n+    while i < number_of_messages { c.send(i + 0); i += 1; }\n     i = 0;\n-    while i < number_of_messages { sum += comm::recv(p); i += 1; }\n+    while i < number_of_messages { sum += p.recv(); i += 1; }\n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "8bc93a78913d01910a19b3ae613b22b4d01ea668", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,37 +1,37 @@\n use std;\n-import comm;\n-import comm::send;\n-import comm::chan;\n-import comm::recv;\n+import pipes;\n+import pipes::send;\n+import pipes::chan;\n+import pipes::recv;\n \n fn main() { test00(); }\n \n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::port();\n-    let c0 = chan(p);\n-    let c1 = chan(p);\n-    let c2 = chan(p);\n-    let c3 = chan(p);\n+    let p = pipes::port_set();\n+    let c0 = p.chan();\n+    let c1 = p.chan();\n+    let c2 = p.chan();\n+    let c3 = p.chan();\n     let number_of_messages: int = 1000;\n     let mut i: int = 0;\n     while i < number_of_messages {\n-        send(c0, i + 0);\n-        send(c1, i + 0);\n-        send(c2, i + 0);\n-        send(c3, i + 0);\n+        c0.send(i + 0);\n+        c1.send(i + 0);\n+        c2.send(i + 0);\n+        c3.send(i + 0);\n         i += 1;\n     }\n     i = 0;\n     while i < number_of_messages {\n-        r = recv(p);\n+        r = p.recv();\n         sum += r;\n-        r = recv(p);\n+        r = p.recv();\n         sum += r;\n-        r = recv(p);\n+        r = p.recv();\n         sum += r;\n-        r = recv(p);\n+        r = p.recv();\n         sum += r;\n         i += 1;\n     }"}, {"sha": "1df3de6ba1eb8f59d391d1ea3bceb269e9954579", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,43 +1,45 @@\n use std;\n import task;\n-import comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n+fn test00_start(c: pipes::chan<int>, start: int, number_of_messages: int) {\n     let mut i: int = 0;\n-    while i < number_of_messages { comm::send(c, start + i); i += 1; }\n+    while i < number_of_messages { c.send(start + i); i += 1; }\n }\n \n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::port();\n+    let p = pipes::port_set();\n     let number_of_messages: int = 10;\n-    let c = comm::chan(p);\n \n+    let c = p.chan();\n     do task::spawn {\n         test00_start(c, number_of_messages * 0, number_of_messages);\n     }\n+    let c = p.chan();\n     do task::spawn {\n         test00_start(c, number_of_messages * 1, number_of_messages);\n     }\n+    let c = p.chan();\n     do task::spawn {\n         test00_start(c, number_of_messages * 2, number_of_messages);\n     }\n+    let c = p.chan();\n     do task::spawn {\n         test00_start(c, number_of_messages * 3, number_of_messages);\n     }\n \n     let mut i: int = 0;\n     while i < number_of_messages {\n-        r = comm::recv(p);\n+        r = p.recv();\n         sum += r;\n-        r = comm::recv(p);\n+        r = p.recv();\n         sum += r;\n-        r = comm::recv(p);\n+        r = p.recv();\n         sum += r;\n-        r = comm::recv(p);\n+        r = p.recv();\n         sum += r;\n         i += 1;\n     }"}, {"sha": "939cfd15797f1e4624ed88e30f2ed46b74e26bc9", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,20 +1,19 @@\n use std;\n import task;\n-import comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::chan<int>, number_of_messages: int) {\n+fn test00_start(c: pipes::chan<int>, number_of_messages: int) {\n     let mut i: int = 0;\n-    while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n+    while i < number_of_messages { c.send(i + 0); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::port();\n+    let p = pipes::port_set();\n     let number_of_messages: int = 10;\n-    let ch = comm::chan(p);\n+    let ch = p.chan();\n \n     let mut result = none;\n     do task::task().future_result(|-r| { result = some(r); }).spawn {\n@@ -23,7 +22,7 @@ fn test00() {\n \n     let mut i: int = 0;\n     while i < number_of_messages {\n-        sum += comm::recv(p);\n+        sum += p.recv();\n         log(debug, r);\n         i += 1;\n     }"}, {"sha": "8e92e8f2020f219960b2f5307d6fd627bea9cfa8", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a77e06a8b7e76466a5c177159a5ecdf3cad31b/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=08a77e06a8b7e76466a5c177159a5ecdf3cad31b", "patch": "@@ -1,14 +1,12 @@\n-use std;\n-import comm::*;\n+import pipes::{port, chan}\n \n /*\n   This is about the simplest program that can successfully send a\n   message.\n  */\n fn main() {\n-    let po = port();\n-    let ch = chan(po);\n-    send(ch, 42);\n-    let r = recv(po);\n+    let (ch, po) = pipes::stream();\n+    ch.send(42);\n+    let r = po.recv();\n     log(error, r);\n }"}]}