{"sha": "cfd183db15af50f06b5e2803b03f87061adad9f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZDE4M2RiMTVhZjUwZjA2YjVlMjgwM2IwM2Y4NzA2MWFkYWQ5ZjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-28T00:26:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:05Z"}, "message": "core::rt: Fix some copies in uv", "tree": {"sha": "2c7e0ae3a42db69d57978979542fe817c04cb243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7e0ae3a42db69d57978979542fe817c04cb243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd183db15af50f06b5e2803b03f87061adad9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd183db15af50f06b5e2803b03f87061adad9f5", "html_url": "https://github.com/rust-lang/rust/commit/cfd183db15af50f06b5e2803b03f87061adad9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd183db15af50f06b5e2803b03f87061adad9f5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b771c993044d87d80c4ebc740e86b1b744770c57", "url": "https://api.github.com/repos/rust-lang/rust/commits/b771c993044d87d80c4ebc740e86b1b744770c57", "html_url": "https://github.com/rust-lang/rust/commit/b771c993044d87d80c4ebc740e86b1b744770c57"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "22ed82fbed391d66cd73c771aa12d22fbc8454cb", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd183db15af50f06b5e2803b03f87061adad9f5/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd183db15af50f06b5e2803b03f87061adad9f5/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=cfd183db15af50f06b5e2803b03f87061adad9f5", "patch": "@@ -362,7 +362,6 @@ struct WatcherData {\n     connect_cb: Option<ConnectionCallback>,\n     close_cb: Option<NullCallback>,\n     alloc_cb: Option<AllocCallback>,\n-    buf: Option<Buf>\n }\n \n pub fn install_watcher_data<H, W: Watcher + NativeHandle<*H>>(watcher: &mut W) {\n@@ -373,7 +372,6 @@ pub fn install_watcher_data<H, W: Watcher + NativeHandle<*H>>(watcher: &mut W) {\n             connect_cb: None,\n             close_cb: None,\n             alloc_cb: None,\n-            buf: None\n         };\n         let data = transmute::<~WatcherData, *c_void>(data);\n         uvll::set_data_for_uv_handle(watcher.native_handle(), data);"}, {"sha": "49c42fa3587ac1f69539035d234fe1b5fea3eef0", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cfd183db15af50f06b5e2803b03f87061adad9f5/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd183db15af50f06b5e2803b03f87061adad9f5/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=cfd183db15af50f06b5e2803b03f87061adad9f5", "patch": "@@ -11,12 +11,13 @@\n use prelude::*;\n use libc::{size_t, ssize_t, c_int, c_void};\n use cast::transmute_mut_region;\n+use util::ignore;\n use rt::uv::uvll;\n use rt::uv::uvll::*;\n use super::{Loop, Watcher, Request, UvError, Buf, Callback, NativeHandle, NullCallback,\n             loop_from_watcher, status_to_maybe_uv_error,\n             install_watcher_data, get_watcher_data, drop_watcher_data,\n-            vec_to_uv_buf, vec_from_uv_buf};\n+            vec_to_uv_buf, vec_from_uv_buf, slice_to_uv_buf};\n use super::super::io::net::ip::{IpAddr, Ipv4, Ipv6};\n use rt::uv::last_uv_error;\n \n@@ -99,17 +100,13 @@ pub impl StreamWatcher {\n         unsafe { uvll::read_stop(handle); }\n     }\n \n-    // XXX: Needs to take &[u8], not ~[u8]\n-    fn write(&mut self, msg: ~[u8], cb: ConnectionCallback) {\n+    fn write(&mut self, buf: Buf, cb: ConnectionCallback) {\n         // XXX: Borrowck\n         let data = get_watcher_data(unsafe { transmute_mut_region(self) });\n         assert!(data.write_cb.is_none());\n         data.write_cb = Some(cb);\n \n         let req = WriteRequest::new();\n-        let buf = vec_to_uv_buf(msg);\n-        assert!(data.buf.is_none());\n-        data.buf = Some(buf);\n         let bufs = [buf];\n         unsafe {\n             assert!(0 == uvll::write(req.native_handle(),\n@@ -123,7 +120,6 @@ pub impl StreamWatcher {\n             write_request.delete();\n             let cb = {\n                 let data = get_watcher_data(&mut stream_watcher);\n-                let _vec = vec_from_uv_buf(data.buf.swap_unwrap());\n                 let cb = data.write_cb.swap_unwrap();\n                 cb\n             };\n@@ -434,10 +430,13 @@ fn listen() {\n                 assert!(status.is_none());\n                 let mut stream_watcher = stream_watcher;\n                 let msg = ~[0, 1, 2, 3, 4, 5, 6 ,7 ,8, 9];\n-                do stream_watcher.write(msg) |stream_watcher, status| {\n+                let buf = slice_to_uv_buf(msg);\n+                let msg_cell = Cell(msg);\n+                do stream_watcher.write(buf) |stream_watcher, status| {\n                     rtdebug!(\"writing\");\n                     assert!(status.is_none());\n-                    stream_watcher.close(||());\n+                    let msg_cell = Cell(msg_cell.take());\n+                    stream_watcher.close(||ignore(msg_cell.take()));\n                 }\n             }\n             loop_.run();"}, {"sha": "d8858717f6f398910ceed87695573762c8d166eb", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd183db15af50f06b5e2803b03f87061adad9f5/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd183db15af50f06b5e2803b03f87061adad9f5/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=cfd183db15af50f06b5e2803b03f87061adad9f5", "patch": "@@ -289,9 +289,7 @@ impl RtioTcpStream for UvTcpStream {\n         do scheduler.deschedule_running_task_and_then |task| {\n             let mut watcher = watcher;\n             let task_cell = Cell(task);\n-            let buf = unsafe { &*buf_ptr };\n-            // XXX: OMGCOPIES\n-            let buf = buf.to_vec();\n+            let buf = unsafe { slice_to_uv_buf(*buf_ptr) };\n             do watcher.write(buf) |_watcher, status| {\n                 let result = if status.is_none() {\n                     Ok(())"}]}