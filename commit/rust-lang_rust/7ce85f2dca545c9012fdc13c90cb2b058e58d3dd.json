{"sha": "7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZTg1ZjJkY2E1NDVjOTAxMmZkYzEzYzkwY2IyYjA1OGU1OGQzZGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-09T22:41:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-18T21:23:57Z"}, "message": "expand: Simplify expansion of derives\n\nAnd make it more uniform with other macros.\nBy merging placeholders for future derives' outputs into the derive container's output fragment early.", "tree": {"sha": "4bf0abedfcbbc75183513172f43ac45ea941bbf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bf0abedfcbbc75183513172f43ac45ea941bbf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "html_url": "https://github.com/rust-lang/rust/commit/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3c17a609e672120305e084314cba2f98308399", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3c17a609e672120305e084314cba2f98308399", "html_url": "https://github.com/rust-lang/rust/commit/2d3c17a609e672120305e084314cba2f98308399"}], "stats": {"total": 68, "additions": 28, "deletions": 40}, "files": [{"sha": "9be339be7034f2b00d1d83823d3bc79f48f10ce9", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "patch": "@@ -90,7 +90,7 @@ impl<'a> DefCollector<'a> {\n         }\n     }\n \n-    pub fn visit_macro_invoc(&mut self, id: NodeId) {\n+    fn visit_macro_invoc(&mut self, id: NodeId) {\n         self.definitions.set_invocation_parent(id.placeholder_to_expn_id(), self.parent_def);\n     }\n }"}, {"sha": "e261d3af61ff8c8372b7b464e1a65fe10ee6a5a3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "patch": "@@ -163,25 +163,15 @@ impl<'a> Resolver<'a> {\n         Some(ext)\n     }\n \n-    // FIXME: `extra_placeholders` should be included into the `fragment` as regular placeholders.\n     crate fn build_reduced_graph(\n         &mut self,\n         fragment: &AstFragment,\n-        extra_placeholders: &[NodeId],\n         parent_scope: ParentScope<'a>,\n     ) -> LegacyScope<'a> {\n         let mut def_collector = DefCollector::new(&mut self.definitions, parent_scope.expansion);\n         fragment.visit_with(&mut def_collector);\n-        for placeholder in extra_placeholders {\n-            def_collector.visit_macro_invoc(*placeholder);\n-        }\n-\n         let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };\n         fragment.visit_with(&mut visitor);\n-        for placeholder in extra_placeholders {\n-            visitor.parent_scope.legacy = visitor.visit_invoc(*placeholder);\n-        }\n-\n         visitor.parent_scope.legacy\n     }\n "}, {"sha": "94fe0cc57403e7a376a5d66384839e1a484b529e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "patch": "@@ -108,15 +108,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n         });\n     }\n \n-    // FIXME: `extra_placeholders` should be included into the `fragment` as regular placeholders.\n-    fn visit_ast_fragment_with_placeholders(\n-        &mut self, expansion: ExpnId, fragment: &AstFragment, extra_placeholders: &[NodeId]\n-    ) {\n+    fn visit_ast_fragment_with_placeholders(&mut self, expansion: ExpnId, fragment: &AstFragment) {\n         // Integrate the new AST fragment into all the definition and module structures.\n         // We are inside the `expansion` now, but other parent scope components are still the same.\n         let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };\n-        let output_legacy_scope =\n-            self.build_reduced_graph(fragment, extra_placeholders, parent_scope);\n+        let output_legacy_scope = self.build_reduced_graph(fragment, parent_scope);\n         self.output_legacy_scopes.insert(expansion, output_legacy_scope);\n \n         parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);"}, {"sha": "261cc53e158cad0609e69e8d85b5d5fc8c952d6d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "patch": "@@ -11,6 +11,7 @@\n #![feature(const_fn)]\n #![feature(const_transmute)]\n #![feature(crate_visibility_modifier)]\n+#![feature(decl_macro)]\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(try_trait)]"}, {"sha": "c222e7357ac7ed39a1ea810a602547f3dc6ea8ff", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "patch": "@@ -851,8 +851,7 @@ pub trait Resolver {\n     fn next_node_id(&mut self) -> NodeId;\n \n     fn resolve_dollar_crates(&mut self);\n-    fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment,\n-                                            extra_placeholders: &[NodeId]);\n+    fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment);\n     fn register_builtin_macro(&mut self, ident: ast::Ident, ext: SyntaxExtension);\n \n     fn expansion_for_ast_pass("}, {"sha": "f03d464eafb907fd98964b5636892eeb8e6cb938", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "patch": "@@ -26,7 +26,6 @@ use errors::{Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, DUMMY_SP, FileName};\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n use std::{iter, mem, slice};\n@@ -75,6 +74,22 @@ macro_rules! ast_fragments {\n         }\n \n         impl AstFragment {\n+            pub fn add_placeholders(&mut self, placeholders: &[NodeId]) {\n+                if placeholders.is_empty() {\n+                    return;\n+                }\n+                match self {\n+                    $($(AstFragment::$Kind(ast) => ast.extend(placeholders.iter().flat_map(|id| {\n+                        // We are repeating through arguments with `many`, to do that we have to\n+                        // mention some macro variable from those arguments even if it's not used.\n+                        #[cfg_attr(bootstrap, allow(unused_macros))]\n+                        macro _repeating($flat_map_ast_elt) {}\n+                        placeholder(AstFragmentKind::$Kind, *id).$make_ast()\n+                    })),)?)*\n+                    _ => panic!(\"unexpected AST fragment kind\")\n+                }\n+            }\n+\n             pub fn make_opt_expr(self) -> Option<P<ast::Expr>> {\n                 match self {\n                     AstFragment::OptExpr(expr) => expr,\n@@ -342,7 +357,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Unresolved macros produce dummy outputs as a recovery measure.\n         invocations.reverse();\n         let mut expanded_fragments = Vec::new();\n-        let mut all_derive_placeholders: FxHashMap<ExpnId, Vec<_>> = FxHashMap::default();\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {\n@@ -420,9 +434,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         self.cx.resolver.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n                     }\n \n-                    let derive_placeholders =\n-                        all_derive_placeholders.entry(invoc.expansion_data.id).or_default();\n-                    derive_placeholders.reserve(derives.len());\n+                    let mut derive_placeholders = Vec::with_capacity(derives.len());\n                     invocations.reserve(derives.len());\n                     for path in derives {\n                         let expn_id = ExpnId::fresh(None);\n@@ -438,7 +450,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     }\n                     let fragment = invoc.fragment_kind\n                         .expect_from_annotatables(::std::iter::once(item));\n-                    self.collect_invocations(fragment, derive_placeholders)\n+                    self.collect_invocations(fragment, &derive_placeholders)\n                 }\n             };\n \n@@ -457,10 +469,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n         while let Some(expanded_fragments) = expanded_fragments.pop() {\n             for (expn_id, expanded_fragment) in expanded_fragments.into_iter().rev() {\n-                let derive_placeholders =\n-                    all_derive_placeholders.remove(&expn_id).unwrap_or_else(Vec::new);\n                 placeholder_expander.add(NodeId::placeholder_from_expn_id(expn_id),\n-                                         expanded_fragment, derive_placeholders);\n+                                         expanded_fragment);\n             }\n         }\n         fragment_with_placeholders.mut_visit_with(&mut placeholder_expander);\n@@ -493,13 +503,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 monotonic: self.monotonic,\n             };\n             fragment.mut_visit_with(&mut collector);\n+            fragment.add_placeholders(extra_placeholders);\n             collector.invocations\n         };\n \n-        // FIXME: Merge `extra_placeholders` into the `fragment` as regular placeholders.\n         if self.monotonic {\n             self.cx.resolver.visit_ast_fragment_with_placeholders(\n-                self.cx.current_expansion.id, &fragment, extra_placeholders);\n+                self.cx.current_expansion.id, &fragment\n+            );\n         }\n \n         (fragment, invocations)"}, {"sha": "21d8a21aa394775b02fa2a41070e1b52bd9e0913", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce85f2dca545c9012fdc13c90cb2b058e58d3dd/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=7ce85f2dca545c9012fdc13c90cb2b058e58d3dd", "patch": "@@ -171,17 +171,8 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n-    pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment, placeholders: Vec<NodeId>) {\n+    pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment) {\n         fragment.mut_visit_with(self);\n-        if let AstFragment::Items(mut items) = fragment {\n-            for placeholder in placeholders {\n-                match self.remove(placeholder) {\n-                    AstFragment::Items(derived_items) => items.extend(derived_items),\n-                    _ => unreachable!(),\n-                }\n-            }\n-            fragment = AstFragment::Items(items);\n-        }\n         self.expanded_fragments.insert(id, fragment);\n     }\n "}]}