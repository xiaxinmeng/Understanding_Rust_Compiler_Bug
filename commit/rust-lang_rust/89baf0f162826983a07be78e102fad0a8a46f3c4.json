{"sha": "89baf0f162826983a07be78e102fad0a8a46f3c4", "node_id": "C_kwDOAAsO6NoAKDg5YmFmMGYxNjI4MjY5ODNhMDdiZTc4ZTEwMmZhZDBhOGE0NmYzYzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-23T19:13:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-23T19:13:00Z"}, "message": "Rollup merge of #91526 - petrochenkov:earlint, r=cjgillot\n\nrustc_lint: Some early linting refactorings\n\nThe first one removes and renames some fields and methods from `EarlyContext`.\n\nThe second one uses the set of registered tools (for tool attributes and tool lints) in a more centralized way.\n\nThe third one removes creation of a fake `ast::Crate` from `fn pre_expansion_lint`.\nPre-expansion linting is done with per-module granularity on freshly loaded modules, and it previously synthesized an `ast::Crate` to visit non-root modules, now they are visited as modules.\nThe node ID used for pre-expansion linting is also made more precise (the loaded module ID is used).", "tree": {"sha": "465468203ce7d05af307babaa76c79324d6cd199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465468203ce7d05af307babaa76c79324d6cd199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89baf0f162826983a07be78e102fad0a8a46f3c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7ai9CRBK7hj4Ov3rIwAAgEYIAK/zMnFSgvDtbloIWdq7jJ+4\nbA8pwzrjCOhljHWD3zo+uTDtDDltCr9AqPG2C9YY2FXQmvTYgXFekFxkRnF0uXXD\noeeN/QbqfKdP5A0RPEwH9gROHuVtvYs0dvQj59i3if+5cw0ExflXrbRcAWSdhG8u\naYY6C6Nh3EwvqebeHpW4twYHhNJJSZbfxfhzi/GNmFz0X4sCYLKaV0dXwtPwx8jf\nLk8hOGX296bG1kMnTIvRGR5nIk7MZrG7i5pYeP1lX0JnWHHrA8YK0LpI3QoApxeq\nBXLiPe/Y111qWp+pI4MciBv8Ng5o3nqUEnYoF1L2+tQ2IJanyJVJN/Nhzi80jz4=\n=fsIq\n-----END PGP SIGNATURE-----\n", "payload": "tree 465468203ce7d05af307babaa76c79324d6cd199\nparent 84322efad553c7a79c80189f2d1b9197c1aa005f\nparent 67cccaff4858eef5e78793f5a123ac33e5cf3704\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642965180 +0100\ncommitter GitHub <noreply@github.com> 1642965180 +0100\n\nRollup merge of #91526 - petrochenkov:earlint, r=cjgillot\n\nrustc_lint: Some early linting refactorings\n\nThe first one removes and renames some fields and methods from `EarlyContext`.\n\nThe second one uses the set of registered tools (for tool attributes and tool lints) in a more centralized way.\n\nThe third one removes creation of a fake `ast::Crate` from `fn pre_expansion_lint`.\nPre-expansion linting is done with per-module granularity on freshly loaded modules, and it previously synthesized an `ast::Crate` to visit non-root modules, now they are visited as modules.\nThe node ID used for pre-expansion linting is also made more precise (the loaded module ID is used).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89baf0f162826983a07be78e102fad0a8a46f3c4", "html_url": "https://github.com/rust-lang/rust/commit/89baf0f162826983a07be78e102fad0a8a46f3c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89baf0f162826983a07be78e102fad0a8a46f3c4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84322efad553c7a79c80189f2d1b9197c1aa005f", "url": "https://api.github.com/repos/rust-lang/rust/commits/84322efad553c7a79c80189f2d1b9197c1aa005f", "html_url": "https://github.com/rust-lang/rust/commit/84322efad553c7a79c80189f2d1b9197c1aa005f"}, {"sha": "67cccaff4858eef5e78793f5a123ac33e5cf3704", "url": "https://api.github.com/repos/rust-lang/rust/commits/67cccaff4858eef5e78793f5a123ac33e5cf3704", "html_url": "https://github.com/rust-lang/rust/commit/67cccaff4858eef5e78793f5a123ac33e5cf3704"}], "stats": {"total": 514, "additions": 285, "deletions": 229}, "files": [{"sha": "258320aeb636ad5403e4bb7ec4963fcfa005b249", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream};\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n@@ -920,8 +920,25 @@ pub trait ResolverExpand {\n     /// we generated proc macros harnesses, so that we can map\n     /// HIR proc macros items back to their harness items.\n     fn declare_proc_macro(&mut self, id: NodeId);\n+\n+    /// Tools registered with `#![register_tool]` and used by tool attributes and lints.\n+    fn registered_tools(&self) -> &FxHashSet<Ident>;\n }\n \n+pub trait LintStoreExpand {\n+    fn pre_expansion_lint(\n+        &self,\n+        sess: &Session,\n+        registered_tools: &FxHashSet<Ident>,\n+        node_id: NodeId,\n+        attrs: &[Attribute],\n+        items: &[P<Item>],\n+        name: &str,\n+    );\n+}\n+\n+type LintStoreExpandDyn<'a> = Option<&'a (dyn LintStoreExpand + 'a)>;\n+\n #[derive(Clone, Default)]\n pub struct ModuleData {\n     /// Path to the module starting from the crate name, like `my_crate::foo::bar`.\n@@ -956,9 +973,6 @@ pub struct ExpansionData {\n     pub is_trailing_mac: bool,\n }\n \n-type OnExternModLoaded<'a> =\n-    Option<&'a dyn Fn(Ident, Vec<Attribute>, Vec<P<Item>>, Span) -> (Vec<Attribute>, Vec<P<Item>>)>;\n-\n /// One of these is made during expansion and incrementally updated as we go;\n /// when a macro expansion occurs, the resulting nodes have the `backtrace()\n /// -> expn_data` of their expansion context stored into their span.\n@@ -973,10 +987,8 @@ pub struct ExtCtxt<'a> {\n     /// (or during eager expansion, but that's a hack).\n     pub force_mode: bool,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n-    /// Called directly after having parsed an external `mod foo;` in expansion.\n-    ///\n-    /// `Ident` is the module name.\n-    pub(super) extern_mod_loaded: OnExternModLoaded<'a>,\n+    /// Used for running pre-expansion lints on freshly loaded modules.\n+    pub(super) lint_store: LintStoreExpandDyn<'a>,\n     /// When we 'expand' an inert attribute, we leave it\n     /// in the AST, but insert it here so that we know\n     /// not to expand it again.\n@@ -988,14 +1000,14 @@ impl<'a> ExtCtxt<'a> {\n         sess: &'a Session,\n         ecfg: expand::ExpansionConfig<'a>,\n         resolver: &'a mut dyn ResolverExpand,\n-        extern_mod_loaded: OnExternModLoaded<'a>,\n+        lint_store: LintStoreExpandDyn<'a>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {\n             sess,\n             ecfg,\n             reduced_recursion_limit: None,\n             resolver,\n-            extern_mod_loaded,\n+            lint_store,\n             root_path: PathBuf::new(),\n             current_expansion: ExpansionData {\n                 id: LocalExpnId::ROOT,"}, {"sha": "9a4daa6d7500a57565fd4dd94316a4f6c7c0b675", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -1097,7 +1097,7 @@ impl InvocationCollectorNode for P<ast::Item> {\n             ModKind::Unloaded => {\n                 // We have an outline `mod foo;` so we need to parse the file.\n                 let old_attrs_len = attrs.len();\n-                let ParsedExternalMod { mut items, inner_span, file_path, dir_path, dir_ownership } =\n+                let ParsedExternalMod { items, inner_span, file_path, dir_path, dir_ownership } =\n                     parse_external_mod(\n                         &ecx.sess,\n                         ident,\n@@ -1107,8 +1107,15 @@ impl InvocationCollectorNode for P<ast::Item> {\n                         &mut attrs,\n                     );\n \n-                if let Some(extern_mod_loaded) = ecx.extern_mod_loaded {\n-                    (attrs, items) = extern_mod_loaded(ident, attrs, items, inner_span);\n+                if let Some(lint_store) = ecx.lint_store {\n+                    lint_store.pre_expansion_lint(\n+                        ecx.sess,\n+                        ecx.resolver.registered_tools(),\n+                        ecx.current_expansion.lint_node_id,\n+                        &attrs,\n+                        &items,\n+                        ident.name.as_str(),\n+                    );\n                 }\n \n                 *mod_kind = ModKind::Loaded(items, Inline::No, inner_span);"}, {"sha": "be31eb89f1b92b67a4a9bcaf1dcb5349c6343f43", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -3,24 +3,24 @@ use crate::proc_macro_decls;\n use crate::util;\n \n use rustc_ast::mut_visit::MutVisitor;\n-use rustc_ast::{self as ast, visit, DUMMY_NODE_ID};\n+use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{Applicability, ErrorReported, PResult};\n-use rustc_expand::base::ExtCtxt;\n+use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n-use rustc_lint::LintStore;\n+use rustc_lint::{EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n+use rustc_middle::ty::{self, GlobalCtxt, RegisteredTools, ResolverOutputs, TyCtxt};\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n use rustc_passes::{self, hir_stats, layout_test};\n@@ -34,7 +34,7 @@ use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{FileName, MultiSpan};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n@@ -233,26 +233,43 @@ pub fn register_plugins<'a>(\n     Ok((krate, lint_store))\n }\n \n-fn pre_expansion_lint(\n+fn pre_expansion_lint<'a>(\n     sess: &Session,\n     lint_store: &LintStore,\n-    krate: &ast::Crate,\n-    crate_attrs: &[ast::Attribute],\n-    crate_name: &str,\n+    registered_tools: &RegisteredTools,\n+    check_node: impl EarlyCheckNode<'a>,\n+    node_name: &str,\n ) {\n-    sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", crate_name).run(|| {\n-        rustc_lint::check_ast_crate(\n+    sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", node_name).run(|| {\n+        rustc_lint::check_ast_node(\n             sess,\n-            lint_store,\n-            krate,\n-            crate_attrs,\n             true,\n+            lint_store,\n+            registered_tools,\n             None,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n+            check_node,\n         );\n     });\n }\n \n+// Cannot implement directly for `LintStore` due to trait coherence.\n+struct LintStoreExpandImpl<'a>(&'a LintStore);\n+\n+impl LintStoreExpand for LintStoreExpandImpl<'_> {\n+    fn pre_expansion_lint(\n+        &self,\n+        sess: &Session,\n+        registered_tools: &RegisteredTools,\n+        node_id: ast::NodeId,\n+        attrs: &[ast::Attribute],\n+        items: &[rustc_ast::ptr::P<ast::Item>],\n+        name: &str,\n+    ) {\n+        pre_expansion_lint(sess, self.0, registered_tools, (node_id, attrs, items), name);\n+    }\n+}\n+\n /// Runs the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins,\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n@@ -265,7 +282,7 @@ pub fn configure_and_expand(\n     resolver: &mut Resolver<'_>,\n ) -> Result<ast::Crate> {\n     tracing::trace!(\"configure_and_expand\");\n-    pre_expansion_lint(sess, lint_store, &krate, &krate.attrs, crate_name);\n+    pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n@@ -321,13 +338,8 @@ pub fn configure_and_expand(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n-        let crate_attrs = krate.attrs.clone();\n-        let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n-            let krate = ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false };\n-            pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, ident.name.as_str());\n-            (krate.attrs, krate.items)\n-        };\n-        let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&extern_mod_loaded));\n+        let lint_store = LintStoreExpandImpl(lint_store);\n+        let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&lint_store));\n \n         // Expand macros now!\n         let krate = sess.time(\"expand_crate\", || ecx.monotonic_expander().expand_crate(krate));\n@@ -499,14 +511,15 @@ pub fn lower_to_hir<'res, 'tcx>(\n     );\n \n     sess.time(\"early_lint_checks\", || {\n-        rustc_lint::check_ast_crate(\n+        let lint_buffer = Some(std::mem::take(resolver.lint_buffer()));\n+        rustc_lint::check_ast_node(\n             sess,\n-            lint_store,\n-            &krate,\n-            &krate.attrs,\n             false,\n-            Some(std::mem::take(resolver.lint_buffer())),\n+            lint_store,\n+            resolver.registered_tools(),\n+            lint_buffer,\n             rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n+            &*krate,\n         )\n     });\n "}, {"sha": "24d295ee9fbf68f4383b6291b2dd9cc049d617b4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -912,7 +912,7 @@ declare_lint_pass!(\n \n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n-        if cx.sess.edition() != Edition::Edition2015 {\n+        if cx.sess().edition() != Edition::Edition2015 {\n             // This is a hard error in future editions; avoid linting and erroring\n             return;\n         }\n@@ -921,7 +921,7 @@ impl EarlyLintPass for AnonymousParameters {\n                 if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {\n                     if ident.name == kw::Empty {\n                         cx.struct_span_lint(ANONYMOUS_PARAMETERS, arg.pat.span, |lint| {\n-                            let ty_snip = cx.sess.source_map().span_to_snippet(arg.ty.span);\n+                            let ty_snip = cx.sess().source_map().span_to_snippet(arg.ty.span);\n \n                             let (ty_snip, appl) = if let Ok(ref snip) = ty_snip {\n                                 (snip.as_str(), Applicability::MachineApplicable)\n@@ -1775,7 +1775,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                 };\n                 if join.edition() >= Edition::Edition2021 {\n                     let mut err =\n-                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                        rustc_errors::struct_span_err!(cx.sess(), pat.span, E0783, \"{}\", msg,);\n                     err.span_suggestion(\n                         pat.span,\n                         suggestion,\n@@ -1799,7 +1799,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                 let replace = \"..=\".to_owned();\n                 if join.edition() >= Edition::Edition2021 {\n                     let mut err =\n-                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                        rustc_errors::struct_span_err!(cx.sess(), pat.span, E0783, \"{}\", msg,);\n                     err.span_suggestion_short(\n                         join,\n                         suggestion,\n@@ -1983,7 +1983,7 @@ impl KeywordIdents {\n         UnderMacro(under_macro): UnderMacro,\n         ident: Ident,\n     ) {\n-        let next_edition = match cx.sess.edition() {\n+        let next_edition = match cx.sess().edition() {\n             Edition::Edition2015 => {\n                 match ident.name {\n                     kw::Async | kw::Await | kw::Try => Edition::Edition2018,\n@@ -2011,7 +2011,7 @@ impl KeywordIdents {\n         };\n \n         // Don't lint `r#foo`.\n-        if cx.sess.parse_sess.raw_identifier_spans.borrow().contains(&ident.span) {\n+        if cx.sess().parse_sess.raw_identifier_spans.borrow().contains(&ident.span) {\n             return;\n         }\n \n@@ -2379,7 +2379,7 @@ declare_lint_pass!(\n \n impl EarlyLintPass for IncompleteFeatures {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n-        let features = cx.sess.features_untracked();\n+        let features = cx.sess().features_untracked();\n         features\n             .declared_lang_features\n             .iter()"}, {"sha": "35c0abd73ba86a708d5540802d1cdc75afffe49b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -16,10 +16,9 @@\n \n use self::TargetLint::*;\n \n-use crate::levels::{is_known_lint_tool, LintLevelsBuilder};\n+use crate::levels::LintLevelsBuilder;\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n-use ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n-use rustc_ast as ast;\n+use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_errors::{struct_span_err, Applicability, SuggestionStyle};\n@@ -32,13 +31,14 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n+use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools, Ty, TyCtxt};\n use rustc_serialize::json::Json;\n use rustc_session::lint::{BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n-use rustc_span::{symbol::Symbol, BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_target::abi;\n use tracing::debug;\n \n@@ -313,7 +313,7 @@ impl LintStore {\n         sess: &Session,\n         lint_name: &str,\n         level: Level,\n-        crate_attrs: &[ast::Attribute],\n+        registered_tools: &RegisteredTools,\n     ) {\n         let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n         if lint_name_only == crate::WARNINGS.name_lower() && level == Level::ForceWarn {\n@@ -326,7 +326,7 @@ impl LintStore {\n             )\n             .emit();\n         }\n-        let db = match self.check_lint_name(sess, lint_name_only, tool_name, crate_attrs) {\n+        let db = match self.check_lint_name(lint_name_only, tool_name, registered_tools) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n             CheckLintNameResult::NoLint(suggestion) => {\n@@ -397,13 +397,16 @@ impl LintStore {\n     /// printing duplicate warnings.\n     pub fn check_lint_name(\n         &self,\n-        sess: &Session,\n         lint_name: &str,\n         tool_name: Option<Symbol>,\n-        crate_attrs: &[ast::Attribute],\n+        registered_tools: &RegisteredTools,\n     ) -> CheckLintNameResult<'_> {\n         if let Some(tool_name) = tool_name {\n-            if !is_known_lint_tool(tool_name, sess, crate_attrs) {\n+            // FIXME: rustc and rustdoc are considered tools for lints, but not for attributes.\n+            if tool_name != sym::rustc\n+                && tool_name != sym::rustdoc\n+                && !registered_tools.contains(&Ident::with_dummy_span(tool_name))\n+            {\n                 return CheckLintNameResult::NoTool;\n             }\n         }\n@@ -553,20 +556,9 @@ pub struct LateContext<'tcx> {\n     pub only_module: bool,\n }\n \n-/// Context for lint checking of the AST, after expansion, before lowering to\n-/// HIR.\n+/// Context for lint checking of the AST, after expansion, before lowering to HIR.\n pub struct EarlyContext<'a> {\n-    /// Type context we're checking in.\n-    pub sess: &'a Session,\n-\n-    /// The crate being checked.\n-    pub krate: &'a ast::Crate,\n-\n     pub builder: LintLevelsBuilder<'a>,\n-\n-    /// The store of registered lints and the lint levels.\n-    pub lint_store: &'a LintStore,\n-\n     pub buffered: LintBuffer,\n }\n \n@@ -801,19 +793,20 @@ pub trait LintContext: Sized {\n }\n \n impl<'a> EarlyContext<'a> {\n-    pub fn new(\n+    pub(crate) fn new(\n         sess: &'a Session,\n+        warn_about_weird_lints: bool,\n         lint_store: &'a LintStore,\n-        krate: &'a ast::Crate,\n-        crate_attrs: &'a [ast::Attribute],\n+        registered_tools: &'a RegisteredTools,\n         buffered: LintBuffer,\n-        warn_about_weird_lints: bool,\n     ) -> EarlyContext<'a> {\n         EarlyContext {\n-            sess,\n-            krate,\n-            lint_store,\n-            builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store, crate_attrs),\n+            builder: LintLevelsBuilder::new(\n+                sess,\n+                warn_about_weird_lints,\n+                lint_store,\n+                registered_tools,\n+            ),\n             buffered,\n         }\n     }\n@@ -851,11 +844,11 @@ impl LintContext for EarlyContext<'_> {\n \n     /// Gets the overall compiler `Session` object.\n     fn sess(&self) -> &Session {\n-        &self.sess\n+        &self.builder.sess()\n     }\n \n     fn lints(&self) -> &LintStore {\n-        &*self.lint_store\n+        self.builder.lint_store()\n     }\n \n     fn lookup<S: Into<MultiSpan>>("}, {"sha": "1b2c88867d49dbe2822ff83ad1af5d59ea240b22", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 85, "deletions": 42, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -16,9 +16,11 @@\n \n use crate::context::{EarlyContext, LintContext, LintStore};\n use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n-use rustc_ast as ast;\n-use rustc_ast::visit as ast_visit;\n+use rustc_ast::ptr::P;\n+use rustc_ast::visit::{self as ast_visit, Visitor};\n use rustc_ast::AstLike;\n+use rustc_ast::{self as ast, walk_list};\n+use rustc_middle::ty::RegisteredTools;\n use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n@@ -31,7 +33,7 @@ macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n \n-struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n+pub struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n     context: EarlyContext<'a>,\n     pass: T,\n }\n@@ -57,7 +59,7 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n         F: FnOnce(&mut Self),\n     {\n         let is_crate_node = id == ast::CRATE_NODE_ID;\n-        let push = self.context.builder.push(attrs, &self.context.lint_store, is_crate_node);\n+        let push = self.context.builder.push(attrs, is_crate_node);\n         self.check_id(id);\n         self.enter_attrs(attrs);\n         f(self);\n@@ -325,88 +327,129 @@ macro_rules! early_lint_pass_impl {\n \n crate::early_lint_methods!(early_lint_pass_impl, []);\n \n-fn early_lint_crate<T: EarlyLintPass>(\n+/// Early lints work on different nodes - either on the crate root, or on freshly loaded modules.\n+/// This trait generalizes over those nodes.\n+pub trait EarlyCheckNode<'a>: Copy {\n+    fn id(self) -> ast::NodeId;\n+    fn attrs<'b>(self) -> &'b [ast::Attribute]\n+    where\n+        'a: 'b;\n+    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    where\n+        'a: 'b;\n+}\n+\n+impl<'a> EarlyCheckNode<'a> for &'a ast::Crate {\n+    fn id(self) -> ast::NodeId {\n+        ast::CRATE_NODE_ID\n+    }\n+    fn attrs<'b>(self) -> &'b [ast::Attribute]\n+    where\n+        'a: 'b,\n+    {\n+        &self.attrs\n+    }\n+    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    where\n+        'a: 'b,\n+    {\n+        run_early_pass!(cx, check_crate, self);\n+        ast_visit::walk_crate(cx, self);\n+        run_early_pass!(cx, check_crate_post, self);\n+    }\n+}\n+\n+impl<'a> EarlyCheckNode<'a> for (ast::NodeId, &'a [ast::Attribute], &'a [P<ast::Item>]) {\n+    fn id(self) -> ast::NodeId {\n+        self.0\n+    }\n+    fn attrs<'b>(self) -> &'b [ast::Attribute]\n+    where\n+        'a: 'b,\n+    {\n+        self.1\n+    }\n+    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    where\n+        'a: 'b,\n+    {\n+        walk_list!(cx, visit_attribute, self.1);\n+        walk_list!(cx, visit_item, self.2);\n+    }\n+}\n+\n+fn early_lint_node<'a>(\n     sess: &Session,\n+    warn_about_weird_lints: bool,\n     lint_store: &LintStore,\n-    krate: &ast::Crate,\n-    crate_attrs: &[ast::Attribute],\n-    pass: T,\n+    registered_tools: &RegisteredTools,\n     buffered: LintBuffer,\n-    warn_about_weird_lints: bool,\n+    pass: impl EarlyLintPass,\n+    check_node: impl EarlyCheckNode<'a>,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n         context: EarlyContext::new(\n             sess,\n+            warn_about_weird_lints,\n             lint_store,\n-            krate,\n-            crate_attrs,\n+            registered_tools,\n             buffered,\n-            warn_about_weird_lints,\n         ),\n         pass,\n     };\n \n-    // Visit the whole crate.\n-    cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n-        // item), warn for it here.\n-        run_early_pass!(cx, check_crate, krate);\n-\n-        ast_visit::walk_crate(cx, krate);\n-\n-        run_early_pass!(cx, check_crate_post, krate);\n-    });\n+    cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n     cx.context.buffered\n }\n \n-pub fn check_ast_crate<T: EarlyLintPass>(\n+pub fn check_ast_node<'a>(\n     sess: &Session,\n-    lint_store: &LintStore,\n-    krate: &ast::Crate,\n-    crate_attrs: &[ast::Attribute],\n     pre_expansion: bool,\n+    lint_store: &LintStore,\n+    registered_tools: &RegisteredTools,\n     lint_buffer: Option<LintBuffer>,\n-    builtin_lints: T,\n+    builtin_lints: impl EarlyLintPass,\n+    check_node: impl EarlyCheckNode<'a>,\n ) {\n     let passes =\n         if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n     let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n     let mut buffered = lint_buffer.unwrap_or_default();\n \n     if !sess.opts.debugging_opts.no_interleave_lints {\n-        buffered = early_lint_crate(\n+        buffered = early_lint_node(\n             sess,\n+            pre_expansion,\n             lint_store,\n-            krate,\n-            crate_attrs,\n-            builtin_lints,\n+            registered_tools,\n             buffered,\n-            pre_expansion,\n+            builtin_lints,\n+            check_node,\n         );\n \n         if !passes.is_empty() {\n-            buffered = early_lint_crate(\n+            buffered = early_lint_node(\n                 sess,\n+                false,\n                 lint_store,\n-                krate,\n-                crate_attrs,\n-                EarlyLintPassObjects { lints: &mut passes[..] },\n+                registered_tools,\n                 buffered,\n-                false,\n+                EarlyLintPassObjects { lints: &mut passes[..] },\n+                check_node,\n             );\n         }\n     } else {\n         for (i, pass) in passes.iter_mut().enumerate() {\n             buffered =\n                 sess.prof.extra_verbose_generic_activity(\"run_lint\", pass.name()).run(|| {\n-                    early_lint_crate(\n+                    early_lint_node(\n                         sess,\n+                        pre_expansion && i == 0,\n                         lint_store,\n-                        krate,\n-                        crate_attrs,\n-                        EarlyLintPassObjects { lints: slice::from_mut(pass) },\n+                        registered_tools,\n                         buffered,\n-                        pre_expansion && i == 0,\n+                        EarlyLintPassObjects { lints: slice::from_mut(pass) },\n+                        check_node,\n                     )\n                 });\n         }"}, {"sha": "8afbd462c146ba2378701ab918c95bc2067d8bf9", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -5,7 +5,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::{intravisit, HirId, CRATE_HIR_ID};\n+use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n@@ -14,7 +14,7 @@ use rustc_middle::lint::{\n     COMMAND_LINE,\n };\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     Level, Lint, LintId,\n@@ -27,14 +27,14 @@ use tracing::debug;\n \n fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n-    let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n-    let levels = LintLevelsBuilder::new(tcx.sess, false, &store, crate_attrs);\n-    let mut builder = LintLevelMapBuilder { levels, tcx, store };\n+    let levels =\n+        LintLevelsBuilder::new(tcx.sess, false, &store, &tcx.resolutions(()).registered_tools);\n+    let mut builder = LintLevelMapBuilder { levels, tcx };\n     let krate = tcx.hir().krate();\n \n     builder.levels.id_to_set.reserve(krate.owners.len() + 1);\n \n-    let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n+    let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     tcx.hir().walk_toplevel_module(&mut builder);\n     builder.levels.pop(push);\n@@ -49,7 +49,7 @@ pub struct LintLevelsBuilder<'s> {\n     cur: LintStackIndex,\n     warn_about_weird_lints: bool,\n     store: &'s LintStore,\n-    crate_attrs: &'s [ast::Attribute],\n+    registered_tools: &'s RegisteredTools,\n }\n \n pub struct BuilderPush {\n@@ -62,7 +62,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         sess: &'s Session,\n         warn_about_weird_lints: bool,\n         store: &'s LintStore,\n-        crate_attrs: &'s [ast::Attribute],\n+        registered_tools: &'s RegisteredTools,\n     ) -> Self {\n         let mut builder = LintLevelsBuilder {\n             sess,\n@@ -71,19 +71,27 @@ impl<'s> LintLevelsBuilder<'s> {\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n             store,\n-            crate_attrs,\n+            registered_tools,\n         };\n         builder.process_command_line(sess, store);\n         assert_eq!(builder.sets.list.len(), 1);\n         builder\n     }\n \n+    pub(crate) fn sess(&self) -> &Session {\n+        self.sess\n+    }\n+\n+    pub(crate) fn lint_store(&self) -> &LintStore {\n+        self.store\n+    }\n+\n     fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n         let mut specs = FxHashMap::default();\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, level, self.crate_attrs);\n+            store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);\n             let orig_level = level;\n             let lint_flag_val = Symbol::intern(lint_name);\n \n@@ -217,12 +225,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n-    pub(crate) fn push(\n-        &mut self,\n-        attrs: &[ast::Attribute],\n-        store: &LintStore,\n-        is_crate_node: bool,\n-    ) -> BuilderPush {\n+    pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {\n         let mut specs = FxHashMap::default();\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n@@ -310,7 +313,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                 };\n                 let tool_name = tool_ident.map(|ident| ident.name);\n                 let name = pprust::path_to_string(&meta_item.path);\n-                let lint_result = store.check_lint_name(sess, &name, tool_name, self.crate_attrs);\n+                let lint_result =\n+                    self.store.check_lint_name(&name, tool_name, self.registered_tools);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintLevelSource::Node(\n@@ -459,7 +463,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                     // Ignore any errors or warnings that happen because the new name is inaccurate\n                     // NOTE: `new_name` already includes the tool name, so we don't have to add it again.\n                     if let CheckLintNameResult::Ok(ids) =\n-                        store.check_lint_name(sess, &new_name, None, self.crate_attrs)\n+                        self.store.check_lint_name(&new_name, None, self.registered_tools)\n                     {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n@@ -562,34 +566,19 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n }\n \n-pub fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n-    if [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item) {\n-        return true;\n-    }\n-    // Look for registered tools\n-    // NOTE: does no error handling; error handling is done by rustc_resolve.\n-    sess.filter_by_name(attrs, sym::register_tool)\n-        .filter_map(|attr| attr.meta_item_list())\n-        .flatten()\n-        .filter_map(|nested_meta| nested_meta.ident())\n-        .map(|ident| ident.name)\n-        .any(|name| name == m_item)\n-}\n-\n-struct LintLevelMapBuilder<'a, 'tcx> {\n+struct LintLevelMapBuilder<'tcx> {\n     levels: LintLevelsBuilder<'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    store: &'a LintStore,\n }\n \n-impl LintLevelMapBuilder<'_, '_> {\n+impl LintLevelMapBuilder<'_> {\n     fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)\n     where\n         F: FnOnce(&mut Self),\n     {\n         let is_crate_hir = id == hir::CRATE_HIR_ID;\n         let attrs = self.tcx.hir().attrs(id);\n-        let push = self.levels.push(attrs, self.store, is_crate_hir);\n+        let push = self.levels.push(attrs, is_crate_hir);\n         if push.changed {\n             self.levels.register_id(id);\n         }\n@@ -598,7 +587,7 @@ impl LintLevelMapBuilder<'_, '_> {\n     }\n }\n \n-impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n+impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n     type NestedFilter = nested_filter::All;\n \n     fn nested_visit_map(&mut self) -> Self::Map {"}, {"sha": "a87f2b2768d6754252e06743507346d9b21f9f3f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -96,7 +96,7 @@ use unused::*;\n pub use builtin::SoftLints;\n pub use context::{CheckLintNameResult, FindLintError, LintStore};\n pub use context::{EarlyContext, LateContext, LintContext};\n-pub use early::check_ast_crate;\n+pub use early::{check_ast_node, EarlyCheckNode};\n pub use late::check_crate;\n pub use passes::{EarlyLintPass, LateLintPass};\n pub use rustc_session::lint::Level::{self, *};"}, {"sha": "2dd6dbd67a8d2ef1bd94514f0dee539e198e0b7e", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -166,7 +166,7 @@ impl EarlyLintPass for NonAsciiIdents {\n         }\n \n         let mut has_non_ascii_idents = false;\n-        let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+        let symbols = cx.sess().parse_sess.symbol_gallery.symbols.lock();\n \n         // Sort by `Span` so that error messages make sense with respect to the\n         // order of identifier locations in the code."}, {"sha": "f73388c675ee2a25dcc178ffe013976a6daa534d", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -164,7 +164,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n         let has_repr_c = it\n             .attrs\n             .iter()\n-            .any(|attr| attr::find_repr_attrs(&cx.sess, attr).contains(&attr::ReprC));\n+            .any(|attr| attr::find_repr_attrs(cx.sess(), attr).contains(&attr::ReprC));\n \n         if has_repr_c {\n             return;"}, {"sha": "64c00c353ca1b0ef9fda89fca6de0684c475385f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -119,6 +119,8 @@ mod sty;\n \n // Data types\n \n+pub type RegisteredTools = FxHashSet<Ident>;\n+\n #[derive(Debug)]\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n@@ -141,6 +143,7 @@ pub struct ResolverOutputs {\n     /// Mapping from ident span to path span for paths that don't exist as written, but that\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: FxHashMap<Span, Span>,\n+    pub registered_tools: RegisteredTools,\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "f6625ac021b30e0cfdfad796f86e1fa829fa37e4", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -53,7 +53,7 @@ use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, DefIdTree, MainDefinition, ResolverOutputs};\n+use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc_session::lint;\n@@ -989,7 +989,7 @@ pub struct Resolver<'a> {\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n     registered_attrs: FxHashSet<Ident>,\n-    registered_tools: FxHashSet<Ident>,\n+    registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n     all_macros: FxHashMap<Symbol, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n@@ -1487,6 +1487,7 @@ impl<'a> Resolver<'a> {\n             trait_impls: self.trait_impls,\n             proc_macros,\n             confused_type_with_std_module,\n+            registered_tools: self.registered_tools,\n         }\n     }\n \n@@ -1511,6 +1512,7 @@ impl<'a> Resolver<'a> {\n             trait_impls: self.trait_impls.clone(),\n             proc_macros,\n             confused_type_with_std_module: self.confused_type_with_std_module.clone(),\n+            registered_tools: self.registered_tools.clone(),\n         }\n     }\n "}, {"sha": "82807e2d0a2c55b281e18ec85de513299f2fd682", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -23,7 +23,7 @@ use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{CrateNum, LocalDefId};\n use rustc_hir::PrimTy;\n use rustc_middle::middle::stability;\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, RegisteredTools};\n use rustc_session::lint::builtin::{LEGACY_DERIVE_HELPERS, PROC_MACRO_DERIVE_RESOLUTION_FALLBACK};\n use rustc_session::lint::builtin::{SOFT_UNSTABLE, UNUSED_MACROS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -447,6 +447,10 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     fn declare_proc_macro(&mut self, id: NodeId) {\n         self.proc_macros.push(id)\n     }\n+\n+    fn registered_tools(&self) -> &RegisteredTools {\n+        &self.registered_tools\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "e109ee0009ee0f624e725acad27ca90dbfc36995", "filename": "src/tools/clippy/clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol;"}, {"sha": "88b91d589074d85e300c79979bab0d89269e1b6a", "filename": "src/tools/clippy/clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -48,7 +48,7 @@ declare_lint_pass!(AsConversions => [AS_CONVERSIONS]);\n \n impl EarlyLintPass for AsConversions {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "0c27c3f9255f28585175bf42c52833860a1d5760", "filename": "src/tools/clippy/clippy_lints/src/disallowed_script_idents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_script_idents.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_lint::{EarlyContext, EarlyLintPass, Level};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Level, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use unicode_script::{Script, UnicodeScript};\n \n@@ -72,7 +72,7 @@ impl EarlyLintPass for DisallowedScriptIdents {\n             return;\n         }\n \n-        let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+        let symbols = cx.sess().parse_sess.symbol_gallery.symbols.lock();\n         // Sort by `Span` so that error messages make sense with respect to the\n         // order of identifier locations in the code.\n         let mut symbols: Vec<_> = symbols.iter().collect();"}, {"sha": "0b9f54231c59bc8566e06b8599ec04e9242893ac", "filename": "src/tools/clippy/clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -50,7 +50,7 @@ declare_lint_pass!(ElseIfWithoutElse => [ELSE_IF_WITHOUT_ELSE]);\n \n impl EarlyLintPass for ElseIfWithoutElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, mut item: &Expr) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n "}, {"sha": "ae18f8081bcc870d2b90f8a6e0f27a16f68176c5", "filename": "src/tools/clippy/clippy_lints/src/formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::differing_macro_contexts;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -207,7 +207,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n         if let ExprKind::If(_, then, Some(else_)) = &expr.kind;\n         if is_block(else_) || is_if(else_);\n         if !differing_macro_contexts(then.span, else_.span);\n-        if !then.span.from_expansion() && !in_external_macro(cx.sess, expr.span);\n+        if !then.span.from_expansion() && !in_external_macro(cx.sess(), expr.span);\n \n         // workaround for rust-lang/rust#43081\n         if expr.span.lo().0 != 0 && expr.span.hi().0 != 0;\n@@ -259,7 +259,7 @@ fn has_unary_equivalent(bin_op: BinOpKind) -> bool {\n }\n \n fn indentation(cx: &EarlyContext<'_>, span: Span) -> usize {\n-    cx.sess.source_map().lookup_char_pos(span.lo()).col.0\n+    cx.sess().source_map().lookup_char_pos(span.lo()).col.0\n }\n \n /// Implementation of the `POSSIBLE_MISSING_COMMA` lint for array"}, {"sha": "c2f52605151ed2e0f750a050695d57c87efe6122", "filename": "src/tools/clippy/clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;"}, {"sha": "667652106987a6bff185c95d32c0334f2ed1c90e", "filename": "src/tools/clippy/clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;"}, {"sha": "cdefe627efdaad877d2c95150a8ddc6ad036f984", "filename": "src/tools/clippy/clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{Block, ItemKind, StmtKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -55,7 +55,7 @@ declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n \n@@ -69,7 +69,7 @@ impl EarlyLintPass for ItemsAfterStatements {\n         // lint on all further items\n         for stmt in stmts {\n             if let StmtKind::Item(ref it) = *stmt {\n-                if in_external_macro(cx.sess, it.span) {\n+                if in_external_macro(cx.sess(), it.span) {\n                     return;\n                 }\n                 if let ItemKind::MacroDef(..) = it.kind {"}, {"sha": "b7430f49229ae6e673a98fd596f717b3324418c0", "filename": "src/tools/clippy/clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use std::iter;\n@@ -225,7 +225,7 @@ impl_lint_pass!(LiteralDigitGrouping => [\n \n impl EarlyLintPass for LiteralDigitGrouping {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n \n@@ -418,7 +418,7 @@ impl_lint_pass!(DecimalLiteralRepresentation => [DECIMAL_LITERAL_REPRESENTATION]\n \n impl EarlyLintPass for DecimalLiteralRepresentation {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "33d1bb2985f43fdcd4dcd525abf8d0fb16082c78", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_ast::ast::{FieldDef, Item, ItemKind, Variant, VariantData, VisibilityKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n@@ -116,7 +116,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n                 |diag| {\n                     if_chain! {\n                         if !item.attrs.iter().any(|attr| attr.has_name(sym::non_exhaustive));\n-                        let header_span = cx.sess.source_map().span_until_char(item.span, '{');\n+                        let header_span = cx.sess().source_map().span_until_char(item.span, '{');\n                         if let Some(snippet) = snippet_opt(cx, header_span);\n                         then {\n                             diag.span_suggestion(\n@@ -149,7 +149,7 @@ fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data:\n             VariantData::Unit(_) => unreachable!(\"`VariantData::Unit` is already handled above\"),\n         };\n \n-        cx.sess.source_map().span_until_char(item.span, delimiter)\n+        cx.sess().source_map().span_until_char(item.span, delimiter)\n     }\n \n     let fields = data.fields();"}, {"sha": "aacabf303a7025dd6f7c841ee9acb1589ecb495f", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "dfb450c8848adcd4aa4b7fca2663e15a5c088810", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -25,7 +25,7 @@ use rustc_hir::{\n     Mutability, Node, Pat, PatKind, PathSegment, QPath, RangeEnd, TyKind,\n };\n use rustc_hir::{HirIdMap, HirIdSet};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "a184806d021bcfcf86617c9fff35eaba84cff16a", "filename": "src/tools/clippy/clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "d955fad7d41a2fb12295dc352f901dfa19c883bf", "filename": "src/tools/clippy/clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -12,7 +12,7 @@ use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{Expr, ExprKind, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -342,7 +342,7 @@ impl EarlyLintPass for MiscEarlyLints {\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "bad9e0be82e61e026a25b715d2b20e50d18c960a", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msr\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "b8dfe996880661e118ec06aa357a4606a4d1815b", "filename": "src/tools/clippy/clippy_lints/src/module_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -80,9 +80,9 @@ impl EarlyLintPass for ModStyle {\n             return;\n         }\n \n-        let files = cx.sess.source_map().files();\n+        let files = cx.sess().source_map().files();\n \n-        let trim_to_src = if let RealFileName::LocalPath(p) = &cx.sess.opts.working_dir {\n+        let trim_to_src = if let RealFileName::LocalPath(p) = &cx.sess().opts.working_dir {\n             p.to_string_lossy()\n         } else {\n             return;"}, {"sha": "0d0c88b02c78b6d5adabe7ed4a6b8bc41b599507", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ast::{\n     self, Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n@@ -356,7 +356,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n \n impl EarlyLintPass for NonExpressiveNames {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n \n@@ -371,7 +371,7 @@ impl EarlyLintPass for NonExpressiveNames {\n     }\n \n     fn check_impl_item(&mut self, cx: &EarlyContext<'_>, item: &AssocItem) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n "}, {"sha": "d81481ade044d255d843fab0262669ca48c19ea1", "filename": "src/tools/clippy/clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_ast::token::{Lit, LitKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -51,7 +51,7 @@ declare_lint_pass!(OctalEscapes => [OCTAL_ESCAPES]);\n \n impl EarlyLintPass for OctalEscapes {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "027ab70014fc0c2ca51ced2aa25f329cfcb87028", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -8,7 +8,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "5a25008e95e5bceae5bc16f9311c8b9bc87b78f4", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor as HirVisitor;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -62,7 +62,7 @@ impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n \n impl EarlyLintPass for RedundantClosureCall {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n         if_chain! {"}, {"sha": "73088ce1a87e74effa4a4b256e2e2f13b27c5993", "filename": "src/tools/clippy/clippy_lints/src/redundant_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_else.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Block, Expr, ExprKind, Stmt, StmtKind};\n use rustc_ast::visit::{walk_expr, Visitor};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -46,7 +46,7 @@ declare_lint_pass!(RedundantElse => [REDUNDANT_ELSE]);\n \n impl EarlyLintPass for RedundantElse {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n-        if in_external_macro(cx.sess, stmt.span) {\n+        if in_external_macro(cx.sess(), stmt.span) {\n             return;\n         }\n         // Only look at expressions that are a whole statement"}, {"sha": "40a62fd6d20133382f1cfc40d4b12d7658f0c02c", "filename": "src/tools/clippy/clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -55,7 +55,7 @@ impl EarlyLintPass for RedundantFieldNames {\n             return;\n         }\n \n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n         if let ExprKind::Struct(ref se) = expr.kind {"}, {"sha": "aa306a630c467fea479790e580ba57389298da36", "filename": "src/tools/clippy/clippy_lints/src/single_char_lifetime_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{GenericParam, GenericParamKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -43,7 +43,7 @@ declare_lint_pass!(SingleCharLifetimeNames => [SINGLE_CHAR_LIFETIME_NAMES]);\n \n impl EarlyLintPass for SingleCharLifetimeNames {\n     fn check_generic_param(&mut self, ctx: &EarlyContext<'_>, param: &GenericParam) {\n-        if in_external_macro(ctx.sess, param.ident.span) {\n+        if in_external_macro(ctx.sess(), param.ident.span) {\n             return;\n         }\n "}, {"sha": "961cdb317e76cd0abd0c26a240567533869f72c5", "filename": "src/tools/clippy/clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind, VisibilityKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{edition::Edition, symbol::kw, Span, Symbol};\n \n@@ -37,7 +37,7 @@ declare_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]\n \n impl EarlyLintPass for SingleComponentPathImports {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &Crate) {\n-        if cx.sess.opts.edition < Edition::Edition2018 {\n+        if cx.sess().opts.edition < Edition::Edition2018 {\n             return;\n         }\n         check_mod(cx, &krate.items);"}, {"sha": "be20282b3b88c53547571a7ec2f2a28443e3ab14", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::{\n     intravisit::{walk_inf, walk_ty, Visitor},\n     Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n };\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;"}, {"sha": "512c39389c1bd8fbf8d68b12bceda8563e541e31", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -580,7 +580,7 @@ fn get_lint_group_and_level_or_lint(\n ) -> Option<(String, &'static str)> {\n     let result = cx\n         .lint_store\n-        .check_lint_name(cx.sess(), lint_name, Some(sym::clippy), &[]);\n+        .check_lint_name(lint_name, Some(sym::clippy), &[]);\n     if let CheckLintNameResult::Tool(Ok(lint_lst)) = result {\n         if let Some(group) = get_lint_group(cx, lint_lst[0]) {\n             if EXCLUDED_LINT_GROUPS.contains(&group.as_str()) {"}, {"sha": "b0044695ea8a88388da9a655e3336873c4252a8f", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::token::{self, LitKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n use rustc_lexer::unescape::{self, EscapeError};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_parse::parser;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, Symbol};\n@@ -290,7 +290,7 @@ impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &MacCall) {\n         fn is_build_script(cx: &EarlyContext<'_>) -> bool {\n             // Cargo sets the crate name for build scripts to `build_script_build`\n-            cx.sess\n+            cx.sess()\n                 .opts\n                 .crate_name\n                 .as_ref()\n@@ -529,7 +529,7 @@ impl Write {\n     /// ```\n     #[allow(clippy::too_many_lines)]\n     fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n-        let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, false, None);\n+        let mut parser = parser::Parser::new(&cx.sess().parse_sess, tts, false, None);\n         let expr = if is_write {\n             match parser\n                 .parse_expr()"}, {"sha": "9233903e98a0068c6ee1d1170101da2f22f12053", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89baf0f162826983a07be78e102fad0a8a46f3c4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=89baf0f162826983a07be78e102fad0a8a46f3c4", "patch": "@@ -117,25 +117,15 @@ pub fn meets_msrv(msrv: Option<&RustcVersion>, lint_msrv: &RustcVersion) -> bool\n \n #[macro_export]\n macro_rules! extract_msrv_attr {\n-    (LateContext) => {\n-        extract_msrv_attr!(@LateContext, ());\n-    };\n-    (EarlyContext) => {\n-        extract_msrv_attr!(@EarlyContext);\n-    };\n-    (@$context:ident$(, $call:tt)?) => {\n+    ($context:ident) => {\n         fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'_>, attrs: &[rustc_ast::ast::Attribute]) {\n-            use $crate::get_unique_inner_attr;\n-            match get_unique_inner_attr(cx.sess$($call)?, attrs, \"msrv\") {\n+            let sess = rustc_lint::LintContext::sess(cx);\n+            match $crate::get_unique_inner_attr(sess, attrs, \"msrv\") {\n                 Some(msrv_attr) => {\n                     if let Some(msrv) = msrv_attr.value_str() {\n-                        self.msrv = $crate::parse_msrv(\n-                            &msrv.to_string(),\n-                            Some(cx.sess$($call)?),\n-                            Some(msrv_attr.span),\n-                        );\n+                        self.msrv = $crate::parse_msrv(&msrv.to_string(), Some(sess), Some(msrv_attr.span));\n                     } else {\n-                        cx.sess$($call)?.span_err(msrv_attr.span, \"bad clippy attribute\");\n+                        sess.span_err(msrv_attr.span, \"bad clippy attribute\");\n                     }\n                 },\n                 _ => (),"}]}