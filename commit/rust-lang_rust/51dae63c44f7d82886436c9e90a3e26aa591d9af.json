{"sha": "51dae63c44f7d82886436c9e90a3e26aa591d9af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZGFlNjNjNDRmN2Q4Mjg4NjQzNmM5ZTkwYTNlMjZhYTU5MWQ5YWY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T09:01:42Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T09:31:05Z"}, "message": "Make most of the compiler aware of return-by-reference\n\ntyencode/tydecode still don't know about it. return_ref will be extended to take\narguments anyway.", "tree": {"sha": "ac81d65c64f23f7f110996f9133f06f3dd740a90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac81d65c64f23f7f110996f9133f06f3dd740a90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51dae63c44f7d82886436c9e90a3e26aa591d9af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51dae63c44f7d82886436c9e90a3e26aa591d9af", "html_url": "https://github.com/rust-lang/rust/commit/51dae63c44f7d82886436c9e90a3e26aa591d9af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51dae63c44f7d82886436c9e90a3e26aa591d9af/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1c083cd66dd2a6dd46dac3e68210227a67331ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c083cd66dd2a6dd46dac3e68210227a67331ab", "html_url": "https://github.com/rust-lang/rust/commit/c1c083cd66dd2a6dd46dac3e68210227a67331ab"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "5103fbd917dbcc3152526435fe7a3b4a44ca6b4e", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=51dae63c44f7d82886436c9e90a3e26aa591d9af", "patch": "@@ -218,7 +218,10 @@ fn enc_ty_fn(w: io::writer, cx: @ctxt, args: [ty::arg], out: ty::t,\n         } else { w.write_char(';'); }\n         enc_constr(w, cx, c);\n     }\n-    alt cf { noreturn. { w.write_char('!'); } _ { enc_ty(w, cx, out); } }\n+    alt cf {\n+      noreturn. { w.write_char('!'); }\n+      _ { enc_ty(w, cx, out); }\n+    }\n }\n \n // FIXME less copy-and-paste"}, {"sha": "7d3df41acc546b722d37fec13583d5c860f54002", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=51dae63c44f7d82886436c9e90a3e26aa591d9af", "patch": "@@ -279,7 +279,7 @@ type constr = constr_general<uint>;\n // Data structures used in type unification\n tag type_err {\n     terr_mismatch;\n-    terr_controlflow_mismatch;\n+    terr_ret_style_mismatch(ast::ret_style, ast::ret_style);\n     terr_box_mutability;\n     terr_vec_mutability;\n     terr_tuple_size(uint, uint);\n@@ -1952,26 +1952,13 @@ mod unify {\n                 _expected_constrs: [@constr], actual_constrs: [@constr]) ->\n        result {\n         if e_proto != a_proto { ret ures_err(terr_mismatch); }\n-        alt expected_cf {\n-          ast::return_val. { }\n-          // ok\n-          ast::noreturn. {\n-            alt actual_cf {\n-              ast::noreturn. {\n-                // ok\n-\n-              }\n-              _ {\n-                /* even though typestate checking is mostly\n-                   responsible for checking control flow annotations,\n-                   this check is necessary to ensure that the\n-                   annotation in an object method matches the\n-                   declared object type */\n-\n-                ret ures_err(terr_controlflow_mismatch);\n-              }\n-            }\n-          }\n+        if actual_cf != ast::noreturn && actual_cf != expected_cf {\n+            /* even though typestate checking is mostly\n+               responsible for checking control flow annotations,\n+               this check is necessary to ensure that the\n+               annotation in an object method matches the\n+               declared object type */\n+            ret ures_err(terr_ret_style_mismatch(expected_cf, actual_cf));\n         }\n         let t =\n             unify_fn_common(cx, expected, actual, expected_inputs,\n@@ -2470,9 +2457,16 @@ mod unify {\n fn type_err_to_str(err: ty::type_err) -> str {\n     alt err {\n       terr_mismatch. { ret \"types differ\"; }\n-      terr_controlflow_mismatch. {\n-        ret \"returning function used where non-returning function\" +\n-                \" was expected\";\n+      terr_ret_style_mismatch(expect, actual) {\n+        fn to_str(s: ast::ret_style) -> str {\n+            alt s {\n+              ast::noreturn. { \"non-returning\" }\n+              ast::return_val. { \"return-by-value\" }\n+              ast::return_ref. { \"return-by-reference\" }\n+            }\n+        }\n+        ret to_str(actual) + \" function found where \" + to_str(expect) +\n+            \" function was expected\";\n       }\n       terr_box_mutability. { ret \"boxed values differ in mutability\"; }\n       terr_vec_mutability. { ret \"vectors differ in mutability\"; }"}, {"sha": "beb22544fdaf5eeda9d14bfed9b70a3a865f3374", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=51dae63c44f7d82886436c9e90a3e26aa591d9af", "patch": "@@ -1224,6 +1224,7 @@ fn print_fn_args_and_ret(s: ps, decl: ast::fn_decl, constrs: [@ast::constr]) {\n     if decl.output.node != ast::ty_nil {\n         space_if_not_bol(s);\n         word_space(s, \"->\");\n+        if decl.cf == ast::return_ref { word(s.s, \"&\"); }\n         print_type(s, decl.output);\n     }\n }\n@@ -1419,9 +1420,11 @@ fn print_ty_fn(s: ps, proto: ast::proto, id: option::t<ast::ident>,\n         space_if_not_bol(s);\n         ibox(s, indent_unit);\n         word_space(s, \"->\");\n-        alt cf {\n-          ast::return_val. { print_type(s, output); }\n-          ast::noreturn. { word_nbsp(s, \"!\"); }\n+        if cf == ast::noreturn {\n+            word_nbsp(s, \"!\")\n+        } else {\n+            if cf == ast::return_ref { word(s.s, \"&\"); }\n+            print_type(s, output);\n         }\n         end(s);\n     }"}, {"sha": "3aa002c50fe4a682a206b2fe88eb66d505599e50", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51dae63c44f7d82886436c9e90a3e26aa591d9af/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=51dae63c44f7d82886436c9e90a3e26aa591d9af", "patch": "@@ -58,9 +58,12 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         s += str::connect(strs, \", \");\n         s += \")\";\n         if struct(cx, output) != ty_nil {\n-            alt cf {\n-              ast::noreturn. { s += \" -> !\"; }\n-              ast::return_val. { s += \" -> \" + ty_to_str(cx, output); }\n+            s += \" -> \";\n+            if cf == ast::noreturn {\n+                s += \"!\";\n+            } else {\n+                if cf == ast::return_ref { s += \"&\"; }\n+                s += ty_to_str(cx, output);\n             }\n         }\n         s += constrs_str(constrs);"}]}