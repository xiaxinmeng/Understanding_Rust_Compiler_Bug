{"sha": "faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjNiY2Q3MmM4NTc3NDgwNWFlMGU4NGQwNDU4YWEzZTY3YjIwZTQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-20T12:10:54Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:57Z"}, "message": "Accommodate simple cases of arith-overflow in `rustc` related crates.", "tree": {"sha": "bee7a1833b37e74c58b9183012c3a286c15db8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee7a1833b37e74c58b9183012c3a286c15db8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "html_url": "https://github.com/rust-lang/rust/commit/faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf3bcd72c85774805ae0e84d0458aa3e67b20e4/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0404c39f272868c1dedc7cda7b0b6dffcb5713d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0404c39f272868c1dedc7cda7b0b6dffcb5713d", "html_url": "https://github.com/rust-lang/rust/commit/f0404c39f272868c1dedc7cda7b0b6dffcb5713d"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "1525055f13fde09550bc46328e7428912f984979", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faf3bcd72c85774805ae0e84d0458aa3e67b20e4/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf3bcd72c85774805ae0e84d0458aa3e67b20e4/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "patch": "@@ -778,7 +778,9 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)\n     assert!(bits <= 64);\n     let  bits = bits as uint;\n     let mask = (-1u64 >> (64 - bits)) as Disr;\n-    if (max + 1) & mask == min & mask {\n+    // For a (max) discr of -1, max will be `-1 as usize`, which overflows.\n+    // However, that is fine here (it would still represent the full range),\n+    if (max.wrapping_add(1)) & mask == min & mask {\n         // i.e., if the range is everything.  The lo==hi case would be\n         // rejected by the LLVM verifier (it would mean either an\n         // empty set, which is impossible, or the entire range of the\n@@ -787,7 +789,7 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)\n     } else {\n         // llvm::ConstantRange can deal with ranges that wrap around,\n         // so an overflow on (max + 1) is fine.\n-        LoadRangeAssert(bcx, ptr, min, (max+1), /* signed: */ True)\n+        LoadRangeAssert(bcx, ptr, min, (max.wrapping_add(1)), /* signed: */ True)\n     }\n }\n "}, {"sha": "87c17c7d9ad9b2aa7cdd0d62624a921117519034", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faf3bcd72c85774805ae0e84d0458aa3e67b20e4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf3bcd72c85774805ae0e84d0458aa3e67b20e4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "patch": "@@ -205,9 +205,9 @@ pub fn opt_ast_region_to_region<'tcx>(\n \n                                 if len == 2 && i == 0 {\n                                     m.push_str(\" or \");\n-                                } else if i == len - 2 {\n+                                } else if i + 2 == len {\n                                     m.push_str(\", or \");\n-                                } else if i != len - 1 {\n+                                } else if i + 1 != len {\n                                     m.push_str(\", \");\n                                 }\n                             }"}, {"sha": "17687534d750ae81376d2f95effc99541e102344", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf3bcd72c85774805ae0e84d0458aa3e67b20e4/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf3bcd72c85774805ae0e84d0458aa3e67b20e4/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "patch": "@@ -181,7 +181,6 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n         Struct(ref fields) => {\n             let emit_struct_field = cx.ident_of(\"emit_struct_field\");\n             let mut stmts = Vec::new();\n-            let last = fields.len() - 1;\n             for (i, &FieldInfo {\n                     name,\n                     ref self_,\n@@ -204,6 +203,7 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                                                  lambda));\n \n                 // last call doesn't need a try!\n+                let last = fields.len() - 1;\n                 let call = if i != last {\n                     cx.expr_try(span, call)\n                 } else {"}]}