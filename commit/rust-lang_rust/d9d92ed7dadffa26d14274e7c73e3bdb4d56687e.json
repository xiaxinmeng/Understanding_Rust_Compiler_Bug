{"sha": "d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "node_id": "C_kwDOAAsO6NoAKGQ5ZDkyZWQ3ZGFkZmZhMjZkMTQyNzRlN2M3M2UzYmRiNGQ1NjY4N2U", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-22T11:16:33Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-15T16:07:35Z"}, "message": "Move alignment failure error reporting to machine", "tree": {"sha": "404813021d7026b195ac93d1456c89e0143f1a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404813021d7026b195ac93d1456c89e0143f1a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "html_url": "https://github.com/rust-lang/rust/commit/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d66824dbc4fb74598251a89d7c3c5fb2df5afeba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d66824dbc4fb74598251a89d7c3c5fb2df5afeba", "html_url": "https://github.com/rust-lang/rust/commit/d66824dbc4fb74598251a89d7c3c5fb2df5afeba"}], "stats": {"total": 122, "additions": 78, "deletions": 44}, "files": [{"sha": "50776d65551ef48d6d3b09d9f796047c06caaf62", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "patch": "@@ -1,9 +1,10 @@\n use rustc_hir::def::DefKind;\n-use rustc_hir::LangItem;\n+use rustc_hir::{LangItem, CRATE_HIR_ID};\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::PointerArithmetic;\n+use rustc_middle::mir::interpret::{PointerArithmetic, UndefinedBehaviorInfo};\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::lint::builtin::INVALID_ALIGNMENT;\n use std::borrow::Borrow;\n use std::hash::Hash;\n use std::ops::ControlFlow;\n@@ -338,6 +339,40 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n     }\n \n+    fn alignment_check_failed(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        has: Align,\n+        required: Align,\n+        check: CheckAlignment,\n+    ) -> InterpResult<'tcx, ()> {\n+        match check {\n+            CheckAlignment::Error => {\n+                throw_ub!(AlignmentCheckFailed { has, required })\n+            }\n+            CheckAlignment::No => span_bug!(\n+                ecx.cur_span(),\n+                \"`alignment_check_failed` called when no alignment check requested\"\n+            ),\n+            CheckAlignment::FutureIncompat => ecx.tcx.struct_span_lint_hir(\n+                INVALID_ALIGNMENT,\n+                ecx.stack().iter().find_map(|frame| frame.lint_root()).unwrap_or(CRATE_HIR_ID),\n+                ecx.cur_span(),\n+                UndefinedBehaviorInfo::AlignmentCheckFailed { has, required }.to_string(),\n+                |db| {\n+                    let mut stacktrace = ecx.generate_stacktrace();\n+                    // Filter out `requires_caller_location` frames.\n+                    stacktrace\n+                        .retain(|frame| !frame.instance.def.requires_caller_location(*ecx.tcx));\n+                    for frame in stacktrace {\n+                        db.span_label(frame.span, format!(\"inside `{}`\", frame.instance));\n+                    }\n+                    db\n+                },\n+            ),\n+        }\n+        Ok(())\n+    }\n+\n     fn load_mir(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         instance: ty::InstanceDef<'tcx>,"}, {"sha": "1d4ef20d0651f7bd11d7cb466f0290d375ff27d8", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n-use rustc_target::abi::Size;\n+use rustc_target::abi::{Align, Size};\n use rustc_target::spec::abi::Abi as CallAbi;\n \n use crate::const_eval::CheckAlignment;\n@@ -132,6 +132,13 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// If this returns true, Provenance::OFFSET_IS_ADDR must be true.\n     fn use_addr_for_alignment_check(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n+    fn alignment_check_failed(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        has: Align,\n+        required: Align,\n+        check: CheckAlignment,\n+    ) -> InterpResult<'tcx, ()>;\n+\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n "}, {"sha": "5b1ac6b2f65e29f7bc7a726d3044a6fd5cb95654", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "patch": "@@ -14,11 +14,8 @@ use std::ptr;\n \n use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::CRATE_HIR_ID;\n use rustc_middle::mir::display_allocation;\n-use rustc_middle::mir::interpret::UndefinedBehaviorInfo;\n use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n-use rustc_session::lint::builtin::INVALID_ALIGNMENT;\n use rustc_target::abi::{Align, HasDataLayout, Size};\n \n use crate::const_eval::CheckAlignment;\n@@ -448,7 +445,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     } else {\n                         // Check allocation alignment and offset alignment.\n                         if alloc_align.bytes() < align.bytes() {\n-                            self.alignment_check_failed(alloc_align, align, check)?;\n+                            M::alignment_check_failed(self, alloc_align, align, check)?;\n                         }\n                         self.check_offset_align(offset.bytes(), align, check)?;\n                     }\n@@ -472,43 +469,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             // The biggest power of two through which `offset` is divisible.\n             let offset_pow2 = 1 << offset.trailing_zeros();\n-            self.alignment_check_failed(Align::from_bytes(offset_pow2).unwrap(), align, check)\n+            M::alignment_check_failed(self, Align::from_bytes(offset_pow2).unwrap(), align, check)\n         }\n     }\n-\n-    fn alignment_check_failed(\n-        &self,\n-        has: Align,\n-        required: Align,\n-        check: CheckAlignment,\n-    ) -> InterpResult<'tcx, ()> {\n-        match check {\n-            CheckAlignment::Error => {\n-                throw_ub!(AlignmentCheckFailed { has, required })\n-            }\n-            CheckAlignment::No => span_bug!(\n-                self.cur_span(),\n-                \"`alignment_check_failed` called when no alignment check requested\"\n-            ),\n-            CheckAlignment::FutureIncompat => self.tcx.struct_span_lint_hir(\n-                INVALID_ALIGNMENT,\n-                self.stack().iter().find_map(|frame| frame.lint_root()).unwrap_or(CRATE_HIR_ID),\n-                self.cur_span(),\n-                UndefinedBehaviorInfo::AlignmentCheckFailed { has, required }.to_string(),\n-                |db| {\n-                    let mut stacktrace = self.generate_stacktrace();\n-                    // Filter out `requires_caller_location` frames.\n-                    stacktrace\n-                        .retain(|frame| !frame.instance.def.requires_caller_location(*self.tcx));\n-                    for frame in stacktrace {\n-                        db.span_label(frame.span, format!(\"inside `{}`\", frame.instance));\n-                    }\n-                    db\n-                },\n-            ),\n-        }\n-        Ok(())\n-    }\n }\n \n /// Allocation accessors"}, {"sha": "044b7ce65bd71cd65ed54597d246e1e4efc01cac", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayo\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable};\n use rustc_span::{def_id::DefId, Span};\n-use rustc_target::abi::{self, HasDataLayout, Size, TargetDataLayout};\n+use rustc_target::abi::{self, Align, HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi as CallAbi;\n use rustc_trait_selection::traits;\n \n@@ -197,6 +197,17 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         false // for now, we don't enforce validity\n     }\n+    fn alignment_check_failed(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        _has: Align,\n+        _required: Align,\n+        _check: CheckAlignment,\n+    ) -> InterpResult<'tcx, ()> {\n+        span_bug!(\n+            ecx.cur_span(),\n+            \"`alignment_check_failed` called when no alignment check requested\"\n+        )\n+    }\n \n     fn load_mir(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,"}, {"sha": "c75fe2327de3eb0b52e35f0cbebfe02fc9282838", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, ValueOrPlace};\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n use rustc_span::DUMMY_SP;\n+use rustc_target::abi::Align;\n \n use crate::MirPass;\n \n@@ -456,6 +457,14 @@ impl<'mir, 'tcx> rustc_const_eval::interpret::Machine<'mir, 'tcx> for DummyMachi\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         unimplemented!()\n     }\n+    fn alignment_check_failed(\n+        _ecx: &InterpCx<'mir, 'tcx, Self>,\n+        _has: Align,\n+        _required: Align,\n+        _check: CheckAlignment,\n+    ) -> interpret::InterpResult<'tcx, ()> {\n+        unimplemented!()\n+    }\n \n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,"}, {"sha": "ab629e4711b10c0e2ca8e5fec502336575f2ab9a", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d92ed7dadffa26d14274e7c73e3bdb4d56687e/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=d9d92ed7dadffa26d14274e7c73e3bdb4d56687e", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::{\n };\n use rustc_span::def_id::{CrateNum, DefId};\n use rustc_span::Symbol;\n-use rustc_target::abi::Size;\n+use rustc_target::abi::{Size, Align};\n use rustc_target::spec::abi::Abi;\n use rustc_const_eval::const_eval::CheckAlignment;\n \n@@ -766,6 +766,15 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         ecx.machine.check_alignment == AlignmentCheck::Int\n     }\n \n+    fn alignment_check_failed(\n+        _ecx: &InterpCx<'mir, 'tcx, Self>,\n+        has: Align,\n+        required: Align,\n+        _check: CheckAlignment,\n+    ) -> InterpResult<'tcx, ()> {\n+        throw_ub!(AlignmentCheckFailed { has, required })\n+    }\n+\n     #[inline(always)]\n     fn enforce_validity(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         ecx.machine.validate"}]}