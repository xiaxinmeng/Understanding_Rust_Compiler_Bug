{"sha": "42a18bd985e103484abbe801082b0593f1a43019", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYTE4YmQ5ODVlMTAzNDg0YWJiZTgwMTA4MmIwNTkzZjFhNDMwMTk=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-06-08T06:46:32Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-06-08T06:46:32Z"}, "message": "Remove the attribute_usage lint\n\nIt has been superseded by the unused_attribute lint.\n\n[breaking change]", "tree": {"sha": "833c6674b515c70fcd1c6fe48641bdcdfbf9fce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/833c6674b515c70fcd1c6fe48641bdcdfbf9fce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42a18bd985e103484abbe801082b0593f1a43019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42a18bd985e103484abbe801082b0593f1a43019", "html_url": "https://github.com/rust-lang/rust/commit/42a18bd985e103484abbe801082b0593f1a43019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42a18bd985e103484abbe801082b0593f1a43019/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "url": "https://api.github.com/repos/rust-lang/rust/commits/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "html_url": "https://github.com/rust-lang/rust/commit/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73"}], "stats": {"total": 132, "additions": 9, "deletions": 123}, "files": [{"sha": "8d76535af7f99dfdcbd6c9ad4fa8b9465e5c20b6", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/42a18bd985e103484abbe801082b0593f1a43019/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a18bd985e103484abbe801082b0593f1a43019/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=42a18bd985e103484abbe801082b0593f1a43019", "patch": "@@ -92,7 +92,6 @@ pub enum Lint {\n     TypeOverflow,\n     UnusedUnsafe,\n     UnsafeBlock,\n-    AttributeUsage,\n     UnusedAttribute,\n     UnknownFeatures,\n     UnknownCrateType,\n@@ -294,13 +293,6 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: Allow\n     }),\n \n-    (\"attribute_usage\",\n-     LintSpec {\n-        lint: AttributeUsage,\n-        desc: \"detects bad use of attributes\",\n-        default: Warn\n-    }),\n-\n     (\"unused_attribute\",\n      LintSpec {\n          lint: UnusedAttribute,\n@@ -1096,93 +1088,6 @@ fn check_raw_ptr_deriving(cx: &mut Context, item: &ast::Item) {\n     }\n }\n \n-static crate_attrs: &'static [&'static str] = &[\n-    \"crate_type\", \"feature\", \"no_start\", \"no_main\", \"no_std\", \"crate_id\",\n-    \"desc\", \"comment\", \"license\", \"copyright\", // not used in rustc now\n-    \"no_builtins\",\n-];\n-\n-\n-static obsolete_attrs: &'static [(&'static str, &'static str)] = &[\n-    (\"abi\", \"Use `extern \\\"abi\\\" fn` instead\"),\n-    (\"auto_encode\", \"Use `#[deriving(Encodable)]` instead\"),\n-    (\"auto_decode\", \"Use `#[deriving(Decodable)]` instead\"),\n-    (\"fast_ffi\", \"Remove it\"),\n-    (\"fixed_stack_segment\", \"Remove it\"),\n-    (\"rust_stack\", \"Remove it\"),\n-];\n-\n-static other_attrs: &'static [&'static str] = &[\n-    // item-level\n-    \"address_insignificant\", // can be crate-level too\n-    \"thread_local\", // for statics\n-    \"allow\", \"deny\", \"forbid\", \"warn\", // lint options\n-    \"deprecated\", \"experimental\", \"unstable\", \"stable\", \"locked\", \"frozen\", //item stability\n-    \"cfg\", \"doc\", \"export_name\", \"link_section\",\n-    \"no_mangle\", \"static_assert\", \"unsafe_no_drop_flag\", \"packed\",\n-    \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\", \"link\", \"phase\",\n-    \"macro_export\", \"must_use\", \"automatically_derived\",\n-\n-    //mod-level\n-    \"path\", \"link_name\", \"link_args\", \"macro_escape\", \"no_implicit_prelude\",\n-\n-    // fn-level\n-    \"test\", \"bench\", \"should_fail\", \"ignore\", \"inline\", \"lang\", \"main\", \"start\",\n-    \"no_split_stack\", \"cold\", \"macro_registrar\", \"linkage\",\n-\n-    // internal attribute: bypass privacy inside items\n-    \"!resolve_unexported\",\n-];\n-\n-fn check_crate_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n-\n-    for attr in attrs.iter() {\n-        let name = attr.node.value.name();\n-        let mut iter = crate_attrs.iter().chain(other_attrs.iter());\n-        if !iter.any(|other_attr| { name.equiv(other_attr) }) {\n-            cx.span_lint(AttributeUsage, attr.span, \"unknown crate attribute\");\n-        }\n-        if name.equiv(&(\"link\")) {\n-            cx.tcx.sess.span_err(attr.span,\n-                                 \"obsolete crate `link` attribute\");\n-            cx.tcx.sess.note(\"the link attribute has been superceded by the crate_id \\\n-                             attribute, which has the format `#[crate_id = \\\"name#version\\\"]`\");\n-        }\n-    }\n-}\n-\n-fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n-    // check if element has crate-level, obsolete, or any unknown attributes.\n-\n-    for attr in attrs.iter() {\n-        let name = attr.node.value.name();\n-        for crate_attr in crate_attrs.iter() {\n-            if name.equiv(crate_attr) {\n-                let msg = match attr.node.style {\n-                    ast::AttrOuter => \"crate-level attribute should be an inner attribute: \\\n-                                       add an exclamation mark: #![foo]\",\n-                    ast::AttrInner => \"crate-level attribute should be in the root module\",\n-                };\n-                cx.span_lint(AttributeUsage, attr.span, msg);\n-                return;\n-            }\n-        }\n-\n-        for &(obs_attr, obs_alter) in obsolete_attrs.iter() {\n-            if name.equiv(&obs_attr) {\n-                cx.span_lint(AttributeUsage, attr.span,\n-                             format!(\"obsolete attribute: {:s}\",\n-                                     obs_alter).as_slice());\n-                return;\n-            }\n-        }\n-\n-        if !other_attrs.iter().any(|other_attr| { name.equiv(other_attr) }) {\n-            cx.span_lint(AttributeUsage, attr.span, \"unknown attribute\");\n-        }\n-    }\n-}\n-\n fn check_unused_attribute(cx: &Context, attr: &ast::Attribute) {\n     static ATTRIBUTE_WHITELIST: &'static [&'static str] = &'static [\n         // FIXME: #14408 whitelist docs since rustdoc looks at them\n@@ -1834,7 +1739,6 @@ impl<'a> Visitor<()> for Context<'a> {\n             check_item_non_uppercase_statics(cx, it);\n             check_heap_item(cx, it);\n             check_missing_doc_item(cx, it);\n-            check_attrs_usage(cx, it.attrs.as_slice());\n             check_raw_ptr_deriving(cx, it);\n \n             cx.visit_ids(|v| v.visit_item(it, ()));\n@@ -1845,15 +1749,12 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     fn visit_foreign_item(&mut self, it: &ast::ForeignItem, _: ()) {\n         self.with_lint_attrs(it.attrs.as_slice(), |cx| {\n-            check_attrs_usage(cx, it.attrs.as_slice());\n             visit::walk_foreign_item(cx, it, ());\n         })\n     }\n \n     fn visit_view_item(&mut self, i: &ast::ViewItem, _: ()) {\n         self.with_lint_attrs(i.attrs.as_slice(), |cx| {\n-            check_attrs_usage(cx, i.attrs.as_slice());\n-\n             cx.visit_ids(|v| v.visit_view_item(i, ()));\n \n             visit::walk_view_item(cx, i, ());\n@@ -1935,7 +1836,6 @@ impl<'a> Visitor<()> for Context<'a> {\n             visit::FkMethod(ident, _, m) => {\n                 self.with_lint_attrs(m.attrs.as_slice(), |cx| {\n                     check_missing_doc_method(cx, m);\n-                    check_attrs_usage(cx, m.attrs.as_slice());\n \n                     match method_context(cx, m) {\n                         PlainImpl => check_snake_case(cx, \"method\", ident, span),\n@@ -1960,7 +1860,6 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_ty_method(&mut self, t: &ast::TypeMethod, _: ()) {\n         self.with_lint_attrs(t.attrs.as_slice(), |cx| {\n             check_missing_doc_ty_method(cx, t);\n-            check_attrs_usage(cx, t.attrs.as_slice());\n             check_snake_case(cx, \"trait method\", t.ident, t.span);\n \n             visit::walk_ty_method(cx, t, ());\n@@ -1984,7 +1883,6 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_struct_field(&mut self, s: &ast::StructField, _: ()) {\n         self.with_lint_attrs(s.node.attrs.as_slice(), |cx| {\n             check_missing_doc_struct_field(cx, s);\n-            check_attrs_usage(cx, s.node.attrs.as_slice());\n \n             visit::walk_struct_field(cx, s, ());\n         })\n@@ -1993,7 +1891,6 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics, _: ()) {\n         self.with_lint_attrs(v.node.attrs.as_slice(), |cx| {\n             check_missing_doc_variant(cx, v);\n-            check_attrs_usage(cx, v.node.attrs.as_slice());\n \n             visit::walk_variant(cx, v, g, ());\n         })\n@@ -2053,7 +1950,6 @@ pub fn check_crate(tcx: &ty::ctxt,\n             visit::walk_crate(v, krate, ());\n         });\n \n-        check_crate_attrs_usage(cx, krate.attrs.as_slice());\n         // since the root module isn't visited as an item (because it isn't an item), warn for it\n         // here.\n         check_missing_doc_attrs(cx,"}, {"sha": "745e29508d218a3554996d5078513db04f45a51d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a18bd985e103484abbe801082b0593f1a43019/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a18bd985e103484abbe801082b0593f1a43019/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=42a18bd985e103484abbe801082b0593f1a43019", "patch": "@@ -205,7 +205,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool) -> String {\n     if lints {\n         prog.push_str(r\"\n #![deny(warnings)]\n-#![allow(unused_variable, dead_assignment, unused_mut, attribute_usage, dead_code)]\n+#![allow(unused_variable, dead_assignment, unused_mut, unused_attribute, dead_code)]\n \");\n     }\n "}, {"sha": "9af48527435c576ff057c297883c9668ef23199c", "filename": "src/test/compile-fail/lint-misplaced-attr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs?ref=42a18bd985e103484abbe801082b0593f1a43019", "patch": "@@ -11,13 +11,10 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(attribute_usage)]\n #![deny(unused_attribute)]\n \n mod a {\n-    #![crate_type = \"bin\"] //~ ERROR: crate-level attribute\n-                           //~^ ERROR: unused attribute\n+    #![crate_type = \"bin\"] //~ ERROR unused attribute\n }\n \n-#[crate_type = \"bin\"] fn main() {} //~ ERROR: crate-level attribute\n-                                   //~^ ERROR: unused attribute\n+#[crate_type = \"bin\"] fn main() {} //~ ERROR unused attribute"}, {"sha": "6b46a0c19bdddbddd766df080c5249156d9cc6d0", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=42a18bd985e103484abbe801082b0593f1a43019", "patch": "@@ -11,14 +11,11 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(attribute_usage)]\n #![deny(unused_attribute)]\n #![allow(dead_code)]\n \n-#[abi=\"stdcall\"] extern {} //~ ERROR: obsolete attribute\n-                           //~^ ERROR: unused attribute\n+#[abi=\"stdcall\"] extern {} //~ ERROR unused attribute\n \n-#[fixed_stack_segment] fn f() {} //~ ERROR: obsolete attribute\n-                                 //~^ ERROR: unused attribute\n+#[fixed_stack_segment] fn f() {} //~ ERROR unused attribute\n \n fn main() {}"}, {"sha": "020ed80c0fbbadc00274f9c9025abab650bbcdb2", "filename": "src/test/compile-fail/lint-unknown-attr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs?ref=42a18bd985e103484abbe801082b0593f1a43019", "patch": "@@ -11,14 +11,10 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(attribute_usage)]\n #![deny(unused_attribute)]\n \n-#![mutable_doc] //~ ERROR: unknown crate attribute\n-                //~^ ERROR: unused attribute\n+#![mutable_doc] //~ ERROR unused attribute\n \n-#[dance] mod a {} //~ ERROR: unknown attribute\n-                //~^ ERROR: unused attribute\n+#[dance] mod a {} //~ ERROR unused attribute\n \n-#[dance] fn main() {} //~ ERROR: unknown attribute\n-                //~^ ERROR: unused attribute\n+#[dance] fn main() {} //~ ERROR unused attribute"}, {"sha": "3e1e08c7b58dd5c084e6f3facabca4f692d1bb76", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a18bd985e103484abbe801082b0593f1a43019/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=42a18bd985e103484abbe801082b0593f1a43019", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![deny(unused_attribute)]\n-#![allow(attribute_usage, dead_code, unused_imports)]\n+#![allow(dead_code, unused_imports)]\n \n #![foo] //~ ERROR unused attribute\n "}]}