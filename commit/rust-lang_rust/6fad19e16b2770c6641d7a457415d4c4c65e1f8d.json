{"sha": "6fad19e16b2770c6641d7a457415d4c4c65e1f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYWQxOWUxNmIyNzcwYzY2NDFkN2E0NTc0MTVkNGM0YzY1ZTFmOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-26T08:51:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-26T08:51:25Z"}, "message": "auto merge of #14439 : thestinger/rust/nonnull, r=luqmana", "tree": {"sha": "5c4fdfd596e72444a25c8d99f12eb1e035706cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c4fdfd596e72444a25c8d99f12eb1e035706cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fad19e16b2770c6641d7a457415d4c4c65e1f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fad19e16b2770c6641d7a457415d4c4c65e1f8d", "html_url": "https://github.com/rust-lang/rust/commit/6fad19e16b2770c6641d7a457415d4c4c65e1f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fad19e16b2770c6641d7a457415d4c4c65e1f8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba77c602707fe7adba2c631db87ba7ad7f4dc812", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba77c602707fe7adba2c631db87ba7ad7f4dc812", "html_url": "https://github.com/rust-lang/rust/commit/ba77c602707fe7adba2c631db87ba7ad7f4dc812"}, {"sha": "22ab5303ff03f09c1de24834a08e982e8b6e8fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ab5303ff03f09c1de24834a08e982e8b6e8fdd", "html_url": "https://github.com/rust-lang/rust/commit/22ab5303ff03f09c1de24834a08e982e8b6e8fdd"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "655910d98a480cecc378a7f350cd852f11d359c1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fad19e16b2770c6641d7a457415d4c4c65e1f8d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fad19e16b2770c6641d7a457415d4c4c65e1f8d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6fad19e16b2770c6641d7a457415d4c4c65e1f8d", "patch": "@@ -1780,16 +1780,20 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n \n     for (idx, &t) in fn_sig.inputs.iter().enumerate().map(|(i, v)| (i + first_arg_offset, v)) {\n         match ty::get(t).sty {\n+            // this needs to be first to prevent fat pointers from falling through\n+            _ if !type_is_immediate(ccx, t) => {\n+                // For non-immediate arguments the callee gets its own copy of\n+                // the value on the stack, so there are no aliases. It's also\n+                // program-invisible so can't possibly capture\n+                attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n+                attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n+                attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n+            }\n             // `~` pointer parameters never alias because ownership is transferred\n             ty::ty_uniq(_) => {\n                 attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n                 attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n             }\n-            // These are not really pointers but pairs, (pointer, len)\n-            ty::ty_rptr(_, ty::mt { ty: it, .. }) |\n-            ty::ty_rptr(_, ty::mt { ty: it, .. }) if match ty::get(it).sty {\n-                ty::ty_str | ty::ty_vec(..) => true, _ => false\n-            } => {}\n             // `&mut` pointer parameters never alias other parameters, or mutable global data\n             ty::ty_rptr(b, mt) if mt.mutbl == ast::MutMutable => {\n                 attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n@@ -1811,15 +1815,7 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n             ty::ty_rptr(_, _) => {\n                 attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n             }\n-            _ => {\n-                // For non-immediate arguments the callee gets its own copy of\n-                // the value on the stack, so there are no aliases. It's also\n-                // program-invisible so can't possibly capture\n-                if !type_is_immediate(ccx, t) {\n-                    attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n-                    attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n-                }\n-            }\n+            _ => ()\n         }\n     }\n "}]}