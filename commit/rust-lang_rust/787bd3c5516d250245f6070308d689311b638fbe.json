{"sha": "787bd3c5516d250245f6070308d689311b638fbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4N2JkM2M1NTE2ZDI1MDI0NWY2MDcwMzA4ZDY4OTMxMWI2MzhmYmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-21T00:10:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-21T00:10:14Z"}, "message": "Merge #8122\n\n8122: Make bare underscore token an Ident rather than Punct in proc-macro r=edwin0cheng a=kevinmehall\n\nIn rustc and proc-macro2, a bare `_` token is parsed for procedural macro purposes as `Ident` rather than `Punct` (see https://github.com/rust-lang/rust/pull/48842). This changes rust-analyzer to match rustc's behavior and implementation by handling `_` as an Ident in token trees, but explicitly preventing `$x:ident` from matching it in MBE.\r\n\r\nproc macro crate:\r\n```rust\r\n#[proc_macro]\r\npub fn input(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\r\n    dbg!(input)\r\n}\r\n```\r\n\r\ntest crate:\r\n```rust\r\ntest_proc_macro::input!(_);\r\n```\r\n\r\noutput (rustc):\r\n```rust\r\n[test-proc-macro/src/lib.rs:10] input = TokenStream [\r\n    Ident {\r\n        ident: \"_\",\r\n        span: #0 bytes(173..174),\r\n    },\r\n]\r\n```\r\n\r\noutput (rust-analyzer before this change):\r\n```rust\r\n[test-proc-macro/src/lib.rs:10] input = TokenStream [\r\n    Punct {\r\n        ch: '_',\r\n        spacing: Joint,\r\n        span: 4294967295,\r\n    },\r\n]\r\n```\r\n\r\noutput (rust-analyzer after this change):\r\n```rust\r\n[test-proc-macro/src/lib.rs:10] input = TokenStream [\r\n    Ident {\r\n        ident: \"_\",\r\n        span: 4294967295,\r\n    },\r\n]\r\n```\r\n\n\nCo-authored-by: Kevin Mehall <km@kevinmehall.net>", "tree": {"sha": "3513cb44470b7ff148258bc300402be778c7f097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3513cb44470b7ff148258bc300402be778c7f097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/787bd3c5516d250245f6070308d689311b638fbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVo7mCRBK7hj4Ov3rIwAAdHIIAKV9hiL3kllRjiQjICxRgzwP\ne7HnIA9BHNxKlcQWzRwVdxH+rFltj+cZMTpfD0YbZNS1DxiEroKf88U4PKyX1lqo\nHq0wrYFsFjokQ6oMzC4zatesuhYcpvb6W4p2Om5ZIgJqmwcwVIugzUt+nxTWcpI7\naE2uQrKUJ92Y3Xx/i7X3MaHG81qNr9ZO0ci6jYYGkmUPnMUolCMO2N5Jp0MXKrFK\nLuDYdplDa/moBH+dO+YMQ9NRxnmmAzOl2OZzBYKPxi0Omkc4ah1geoPcC9lIkFsW\n46qToSNbOkcz0oB/4f+w+RHc6yV4HNcz6qz6Ewtlie0i8Ke1Kj+SPYJJaJESgW4=\n=F2cu\n-----END PGP SIGNATURE-----\n", "payload": "tree 3513cb44470b7ff148258bc300402be778c7f097\nparent 090e013161ab5b1679554ddd53683e81e3fe845a\nparent 0a7f28620a7002f47890c2030862052bcbf25cdb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616285414 +0000\ncommitter GitHub <noreply@github.com> 1616285414 +0000\n\nMerge #8122\n\n8122: Make bare underscore token an Ident rather than Punct in proc-macro r=edwin0cheng a=kevinmehall\n\nIn rustc and proc-macro2, a bare `_` token is parsed for procedural macro purposes as `Ident` rather than `Punct` (see https://github.com/rust-lang/rust/pull/48842). This changes rust-analyzer to match rustc's behavior and implementation by handling `_` as an Ident in token trees, but explicitly preventing `$x:ident` from matching it in MBE.\r\n\r\nproc macro crate:\r\n```rust\r\n#[proc_macro]\r\npub fn input(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\r\n    dbg!(input)\r\n}\r\n```\r\n\r\ntest crate:\r\n```rust\r\ntest_proc_macro::input!(_);\r\n```\r\n\r\noutput (rustc):\r\n```rust\r\n[test-proc-macro/src/lib.rs:10] input = TokenStream [\r\n    Ident {\r\n        ident: \"_\",\r\n        span: #0 bytes(173..174),\r\n    },\r\n]\r\n```\r\n\r\noutput (rust-analyzer before this change):\r\n```rust\r\n[test-proc-macro/src/lib.rs:10] input = TokenStream [\r\n    Punct {\r\n        ch: '_',\r\n        spacing: Joint,\r\n        span: 4294967295,\r\n    },\r\n]\r\n```\r\n\r\noutput (rust-analyzer after this change):\r\n```rust\r\n[test-proc-macro/src/lib.rs:10] input = TokenStream [\r\n    Ident {\r\n        ident: \"_\",\r\n        span: 4294967295,\r\n    },\r\n]\r\n```\r\n\n\nCo-authored-by: Kevin Mehall <km@kevinmehall.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/787bd3c5516d250245f6070308d689311b638fbe", "html_url": "https://github.com/rust-lang/rust/commit/787bd3c5516d250245f6070308d689311b638fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/787bd3c5516d250245f6070308d689311b638fbe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "090e013161ab5b1679554ddd53683e81e3fe845a", "url": "https://api.github.com/repos/rust-lang/rust/commits/090e013161ab5b1679554ddd53683e81e3fe845a", "html_url": "https://github.com/rust-lang/rust/commit/090e013161ab5b1679554ddd53683e81e3fe845a"}, {"sha": "0a7f28620a7002f47890c2030862052bcbf25cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a7f28620a7002f47890c2030862052bcbf25cdb", "html_url": "https://github.com/rust-lang/rust/commit/0a7f28620a7002f47890c2030862052bcbf25cdb"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "1682b21b081060711e5011f58464e16644b0e7b1", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -762,7 +762,7 @@ impl<'a> TtIter<'a> {\n     fn expect_separator(&mut self, separator: &Separator, idx: usize) -> bool {\n         let mut fork = self.clone();\n         let ok = match separator {\n-            Separator::Ident(lhs) if idx == 0 => match fork.expect_ident() {\n+            Separator::Ident(lhs) if idx == 0 => match fork.expect_ident_or_underscore() {\n                 Ok(rhs) => rhs.text == lhs.text,\n                 _ => false,\n             },\n@@ -852,7 +852,7 @@ impl<'a> TtIter<'a> {\n         if punct.char != '\\'' {\n             return Err(());\n         }\n-        let ident = self.expect_ident()?;\n+        let ident = self.expect_ident_or_underscore()?;\n \n         Ok(tt::Subtree {\n             delimiter: None,"}, {"sha": "c88387653dd25bbf8f250b83c69600c2c1ada9d2", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -177,16 +177,8 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n                     Op::Repeat { tokens: MetaTemplate(tokens), separator, kind }\n                 }\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n-                    tt::Leaf::Punct(punct) => {\n-                        static UNDERSCORE: SmolStr = SmolStr::new_inline(\"_\");\n-\n-                        if punct.char != '_' {\n-                            return Err(ParseError::Expected(\"_\".to_string()));\n-                        }\n-                        let name = UNDERSCORE.clone();\n-                        let kind = eat_fragment_kind(src, mode)?;\n-                        let id = punct.id;\n-                        Op::Var { name, kind, id }\n+                    tt::Leaf::Punct(_) => {\n+                        return Err(ParseError::Expected(\"ident\".to_string()));\n                     }\n                     tt::Leaf::Ident(ident) if ident.text == \"crate\" => {\n                         // We simply produce identifier `$crate` here. And it will be resolved when lowering ast to Path."}, {"sha": "a05cab0f373de92a6342d346df3eab19789cd1f8", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -150,6 +150,7 @@ fn convert_ident(ident: &tt::Ident) -> TtToken {\n     let kind = match ident.text.as_ref() {\n         \"true\" => T![true],\n         \"false\" => T![false],\n+        \"_\" => UNDERSCORE,\n         i if i.starts_with('\\'') => LIFETIME_IDENT,\n         _ => SyntaxKind::from_keyword(ident.text.as_str()).unwrap_or(IDENT),\n     };"}, {"sha": "8bba3d3d5288d7ba84c463e34ee6c48a23174cb1", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -350,7 +350,7 @@ trait TokenConvertor {\n             return;\n         }\n \n-        result.push(if k.is_punct() {\n+        result.push(if k.is_punct() && k != UNDERSCORE {\n             assert_eq!(range.len(), TextSize::of('.'));\n             let delim = match k {\n                 T!['('] => Some((tt::DelimiterKind::Parenthesis, T![')'])),\n@@ -395,7 +395,9 @@ trait TokenConvertor {\n                     {\n                         tt::Spacing::Alone\n                     }\n-                    Some(next) if next.kind().is_punct() => tt::Spacing::Joint,\n+                    Some(next) if next.kind().is_punct() && next.kind() != UNDERSCORE => {\n+                        tt::Spacing::Joint\n+                    }\n                     _ => tt::Spacing::Alone,\n                 };\n                 let char = match token.to_char() {\n@@ -415,6 +417,7 @@ trait TokenConvertor {\n             let leaf: tt::Leaf = match k {\n                 T![true] | T![false] => make_leaf!(Ident),\n                 IDENT => make_leaf!(Ident),\n+                UNDERSCORE => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n                 k if k.is_literal() => make_leaf!(Literal),\n                 LIFETIME_IDENT => {"}, {"sha": "2cce62781a41f3aee6dfef8e3679822aa492dd89", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -1079,6 +1079,12 @@ macro_rules! q {\n     .assert_expand_items(r#\"q![_]\"#, r#\"0\"#);\n }\n \n+#[test]\n+fn test_underscore_lifetime() {\n+    parse_macro(r#\"macro_rules! q { ($a:lifetime) => {0}; }\"#)\n+        .assert_expand_items(r#\"q!['_]\"#, r#\"0\"#);\n+}\n+\n #[test]\n fn test_vertical_bar_with_pat() {\n     parse_macro("}, {"sha": "bf48112b3a38c65ff75ce1add2f3212ebd851023", "filename": "crates/mbe/src/tests/rule.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -12,6 +12,9 @@ fn test_valid_arms() {\n     }\n \n     check(\"($i:ident) => ()\");\n+    check(\"($(x),*) => ()\");\n+    check(\"($(x)_*) => ()\");\n+    check(\"($(x)i*) => ()\");\n     check(\"($($i:ident)*) => ($_)\");\n     check(\"($($true:ident)*) => ($true)\");\n     check(\"($($false:ident)*) => ($false)\");\n@@ -32,6 +35,7 @@ fn test_invalid_arms() {\n \n     check(\"($i) => ($i)\", ParseError::UnexpectedToken(\"bad fragment specifier 1\".into()));\n     check(\"($i:) => ($i)\", ParseError::UnexpectedToken(\"bad fragment specifier 1\".into()));\n+    check(\"($i:_) => ()\", ParseError::UnexpectedToken(\"bad fragment specifier 1\".into()));\n }\n \n fn parse_macro_arm(arm_definition: &str) -> Result<crate::MacroRules, ParseError> {"}, {"sha": "319a40f2aab4105280f5197145e8dd1c4f4e5635", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -49,6 +49,13 @@ impl<'a> TtIter<'a> {\n     }\n \n     pub(crate) fn expect_ident(&mut self) -> Result<&'a tt::Ident, ()> {\n+        match self.expect_leaf()? {\n+            tt::Leaf::Ident(it) if it.text != \"_\" => Ok(it),\n+            _ => Err(()),\n+        }\n+    }\n+\n+    pub(crate) fn expect_ident_or_underscore(&mut self) -> Result<&'a tt::Ident, ()> {\n         match self.expect_leaf()? {\n             tt::Leaf::Ident(it) => Ok(it),\n             _ => Err(()),"}, {"sha": "c147484c0e0f65518b54e427fdc03203a2c1482a", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787bd3c5516d250245f6070308d689311b638fbe/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=787bd3c5516d250245f6070308d689311b638fbe", "patch": "@@ -805,5 +805,14 @@ mod tests {\n         let t2 = TokenStream::from_str(\"(a);\").unwrap();\n         assert_eq!(t2.token_trees.len(), 2);\n         assert_eq!(t2.token_trees[0], subtree_paren_a);\n+\n+        let underscore = TokenStream::from_str(\"_\").unwrap();\n+        assert_eq!(\n+            underscore.token_trees[0],\n+            tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n+                text: \"_\".into(),\n+                id: tt::TokenId::unspecified(),\n+            }))\n+        );\n     }\n }"}]}