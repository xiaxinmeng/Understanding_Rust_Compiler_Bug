{"sha": "f9fdf642bab2bfcabe1829a4c82aaf055330661b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZmRmNjQyYmFiMmJmY2FiZTE4MjlhNGM4MmFhZjA1NTMzMDY2MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-07T14:14:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-07T14:14:34Z"}, "message": "Auto merge of #73093 - Dylan-DPC:rollup-9gh5tyu, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72764 (Be more careful around ty::Error in generators)\n - #72908 (rename FalseEdges -> FalseEdge)\n - #72970 (Properly handle feature-gated lints)\n - #72998 (Mention that some atomic operations may not be available on some platforms)\n - #73063 (Elide type on liballoc vec)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b471ac848384a134a5f73ea4bc04cb7a6ba4f36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b471ac848384a134a5f73ea4bc04cb7a6ba4f36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9fdf642bab2bfcabe1829a4c82aaf055330661b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fdf642bab2bfcabe1829a4c82aaf055330661b", "html_url": "https://github.com/rust-lang/rust/commit/f9fdf642bab2bfcabe1829a4c82aaf055330661b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9fdf642bab2bfcabe1829a4c82aaf055330661b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "html_url": "https://github.com/rust-lang/rust/commit/a2fc33e0c87a258542cd12d6ffae52c43aa3785a"}, {"sha": "a23b51ebea63e5369bb2b2ad66173dc9e9795a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23b51ebea63e5369bb2b2ad66173dc9e9795a97", "html_url": "https://github.com/rust-lang/rust/commit/a23b51ebea63e5369bb2b2ad66173dc9e9795a97"}], "stats": {"total": 350, "additions": 234, "deletions": 116}, "files": [{"sha": "96923ea47f39ba4a3fc47dead93926cbe9a06a99", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -984,7 +984,7 @@ impl<T> Vec<T> {\n             // bounds check above succeeds there must be a last element (which\n             // can be self[index] itself).\n             let last = ptr::read(self.as_ptr().add(len - 1));\n-            let hole: *mut T = self.as_mut_ptr().add(index);\n+            let hole = self.as_mut_ptr().add(index);\n             self.set_len(len - 1);\n             ptr::replace(hole, last)\n         }"}, {"sha": "477cb24d6be67ad57747b46b024f56f251d38709", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -153,6 +153,9 @@ pub fn spin_loop_hint() {\n ///\n /// This type has the same in-memory representation as a [`bool`].\n ///\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of `u8`.\n+///\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -178,6 +181,9 @@ unsafe impl Sync for AtomicBool {}\n /// A raw pointer type which can be safely shared between threads.\n ///\n /// This type has the same in-memory representation as a `*mut T`.\n+///\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of pointers. Its size depends on the target pointer's size.\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(target_pointer_width = \"16\", repr(C, align(2)))]\n@@ -447,6 +453,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -481,6 +490,9 @@ impl AtomicBool {\n     /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n     /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -524,6 +536,8 @@ impl AtomicBool {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`Ordering`]: enum.Ordering.html\n@@ -586,6 +600,9 @@ impl AtomicBool {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n@@ -646,6 +663,9 @@ impl AtomicBool {\n     /// [`Release`]: enum.Ordering.html#variant.Release\n     /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -683,6 +703,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -737,6 +760,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -779,6 +805,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -981,6 +1010,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1017,6 +1049,9 @@ impl<T> AtomicPtr<T> {\n     /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n     /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1058,6 +1093,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1118,6 +1156,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n@@ -1223,6 +1264,13 @@ macro_rules! atomic_int {\n         /// non-atomic types as well as information about the portability of\n         /// this type, please see the [module-level documentation].\n         ///\n+        /// **Note:** This type is only available on platforms that support\n+        /// atomic loads and stores of [`\n+        #[doc = $s_int_type]\n+        /// `](\n+        #[doc = $int_ref]\n+        /// ).\n+        ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n         #[repr(C, align($align))]\n@@ -1408,6 +1456,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1444,6 +1495,9 @@ might fail and hence just perform an `Acquire` load, but not have `Release` sema\n Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n happens, and using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1496,6 +1550,9 @@ of this operation [`Relaxed`], and using [`Release`] makes the successful load\n [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1558,6 +1615,9 @@ and must be equivalent to or weaker than the success ordering.\n [`Acquire`]: enum.Ordering.html#variant.Acquire\n [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n # Examples\n \n ```\n@@ -1599,6 +1659,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1632,6 +1695,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1668,6 +1734,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1704,6 +1773,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1741,6 +1813,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1777,6 +1852,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1819,6 +1897,9 @@ of this operation [`Relaxed`], and using [`Release`] makes the final successful\n [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`bool`]: ../../../std/primitive.bool.html\n [`compare_exchange`]: #method.compare_exchange\n [`Ordering`]: enum.Ordering.html\n@@ -1870,6 +1951,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1917,6 +2001,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release"}, {"sha": "61692280d2a775e3ef4b4a271a9a9c33eaf936af", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -357,7 +357,7 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 | TerminatorKind::Unreachable\n                 | TerminatorKind::SwitchInt { .. }\n                 | TerminatorKind::Yield { .. }\n-                | TerminatorKind::FalseEdges { .. }\n+                | TerminatorKind::FalseEdge { .. }\n                 | TerminatorKind::FalseUnwind { .. }\n                 | TerminatorKind::InlineAsm { .. } => { /* nothing to do */ }\n                 TerminatorKind::Call { cleanup: unwind, .. }"}, {"sha": "30a84c4e47b03a183088afe5d4b90f1cf7c9e418", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -1030,7 +1030,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::TerminatorKind::GeneratorDrop | mir::TerminatorKind::Yield { .. } => {\n                 bug!(\"generator ops in codegen\")\n             }\n-            mir::TerminatorKind::FalseEdges { .. } | mir::TerminatorKind::FalseUnwind { .. } => {\n+            mir::TerminatorKind::FalseEdge { .. } | mir::TerminatorKind::FalseUnwind { .. } => {\n                 bug!(\"borrowck false edges in codegen\")\n             }\n "}, {"sha": "05e7c9a0c780de86898cb28e32a1118872a05495", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -214,9 +214,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintSource::Node(name, li.span(), reason);\n-                        for id in ids {\n-                            self.check_gated_lint(*id, attr.span);\n-                            specs.insert(*id, (level, src));\n+                        for &id in ids {\n+                            self.check_gated_lint(id, attr.span);\n+                            specs.insert(id, (level, src));\n                         }\n                     }\n \n@@ -386,17 +386,18 @@ impl<'s> LintLevelsBuilder<'s> {\n         BuilderPush { prev, changed: prev != self.cur }\n     }\n \n-    fn check_gated_lint(&self, id: LintId, span: Span) {\n-        if id == LintId::of(builtin::UNSAFE_OP_IN_UNSAFE_FN)\n-            && !self.sess.features_untracked().unsafe_block_in_unsafe_fn\n-        {\n-            feature_err(\n-                &self.sess.parse_sess,\n-                sym::unsafe_block_in_unsafe_fn,\n-                span,\n-                \"the `unsafe_op_in_unsafe_fn` lint is unstable\",\n-            )\n-            .emit();\n+    /// Checks if the lint is gated on a feature that is not enabled.\n+    fn check_gated_lint(&self, lint_id: LintId, span: Span) {\n+        if let Some(feature) = lint_id.lint.feature_gate {\n+            if !self.sess.features_untracked().enabled(feature) {\n+                feature_err(\n+                    &self.sess.parse_sess,\n+                    feature,\n+                    span,\n+                    &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower()),\n+                )\n+                .emit();\n+            }\n         }\n     }\n "}, {"sha": "98973f1b6fb7d889270d3a42f72795fbe04e7d44", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -1160,7 +1160,7 @@ pub enum TerminatorKind<'tcx> {\n \n     /// A block where control flow only ever takes one real path, but borrowck\n     /// needs to be more conservative.\n-    FalseEdges {\n+    FalseEdge {\n         /// The target normal control flow will take.\n         real_target: BasicBlock,\n         /// A block control flow could conceptually jump to, but won't in\n@@ -1314,7 +1314,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 Some(t).into_iter().chain(slice::from_ref(u))\n             }\n             SwitchInt { ref targets, .. } => None.into_iter().chain(&targets[..]),\n-            FalseEdges { ref real_target, ref imaginary_target } => {\n+            FalseEdge { ref real_target, ref imaginary_target } => {\n                 Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))\n             }\n         }\n@@ -1348,7 +1348,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 Some(t).into_iter().chain(slice::from_mut(u))\n             }\n             SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets[..]),\n-            FalseEdges { ref mut real_target, ref mut imaginary_target } => {\n+            FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n                 Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))\n             }\n         }\n@@ -1364,7 +1364,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::InlineAsm { .. } => None,\n             TerminatorKind::Call { cleanup: ref unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref unwind, .. }\n@@ -1384,7 +1384,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::InlineAsm { .. } => None,\n             TerminatorKind::Call { cleanup: ref mut unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref mut unwind, .. }\n@@ -1598,7 +1598,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 msg.fmt_assert_args(fmt)?;\n                 write!(fmt, \")\")\n             }\n-            FalseEdges { .. } => write!(fmt, \"falseEdges\"),\n+            FalseEdge { .. } => write!(fmt, \"falseEdge\"),\n             FalseUnwind { .. } => write!(fmt, \"falseUnwind\"),\n             InlineAsm { template, ref operands, options, .. } => {\n                 write!(fmt, \"asm!(\\\"{}\\\"\", InlineAsmTemplatePiece::to_string(template))?;\n@@ -1683,7 +1683,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             Assert { cleanup: None, .. } => vec![\"\".into()],\n             Assert { .. } => vec![\"success\".into(), \"unwind\".into()],\n-            FalseEdges { .. } => vec![\"real\".into(), \"imaginary\".into()],\n+            FalseEdge { .. } => vec![\"real\".into(), \"imaginary\".into()],\n             FalseUnwind { unwind: Some(_), .. } => vec![\"real\".into(), \"cleanup\".into()],\n             FalseUnwind { unwind: None, .. } => vec![\"real\".into()],\n             InlineAsm { destination: Some(_), .. } => vec![\"\".into()],"}, {"sha": "97c6d6bf5f40b5f3c0845502c977790446bc49eb", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -74,8 +74,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Abort => Abort,\n             Return => Return,\n             Unreachable => Unreachable,\n-            FalseEdges { real_target, imaginary_target } => {\n-                FalseEdges { real_target, imaginary_target }\n+            FalseEdge { real_target, imaginary_target } => {\n+                FalseEdge { real_target, imaginary_target }\n             }\n             FalseUnwind { real_target, unwind } => FalseUnwind { real_target, unwind },\n             InlineAsm { template, ref operands, options, line_spans, destination } => InlineAsm {\n@@ -134,7 +134,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             | Return\n             | GeneratorDrop\n             | Unreachable\n-            | FalseEdges { .. }\n+            | FalseEdge { .. }\n             | FalseUnwind { .. } => false,\n         }\n     }"}, {"sha": "9f886cbc9fb5baf5b2e98d114a2cf1eb2261d9a4", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -429,7 +429,7 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Abort |\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable |\n-                    TerminatorKind::FalseEdges { .. } |\n+                    TerminatorKind::FalseEdge { .. } |\n                     TerminatorKind::FalseUnwind { .. } => {\n                     }\n "}, {"sha": "77d16458383d1885539d72fe5e3303b5a9ee1481", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -215,7 +215,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             TerminatorKind::Goto { target: _ }\n             | TerminatorKind::Abort\n             | TerminatorKind::Unreachable\n-            | TerminatorKind::FalseEdges { real_target: _, imaginary_target: _ }\n+            | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {\n                 // no data used, thus irrelevant to borrowck\n             }"}, {"sha": "736cda83ca5121847da49c0a8520e42a065e7c7a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -770,7 +770,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             | TerminatorKind::Resume\n             | TerminatorKind::Return\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { real_target: _, imaginary_target: _ }\n+            | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {\n                 // no data used, thus irrelevant to borrowck\n             }\n@@ -814,7 +814,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::DropAndReplace { .. }\n-            | TerminatorKind::FalseEdges { real_target: _, imaginary_target: _ }\n+            | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }\n             | TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }"}, {"sha": "e2255d170f9c96ac0d8137380713c0e1b18a1f2f", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -1547,7 +1547,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::InlineAsm { .. } => {\n                 // no checks needed for these\n@@ -1843,7 +1843,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     self.assert_iscleanup(body, block_data, cleanup, true);\n                 }\n             }\n-            TerminatorKind::FalseEdges { real_target, imaginary_target } => {\n+            TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n                 self.assert_iscleanup(body, block_data, real_target, is_cleanup);\n                 self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);\n             }"}, {"sha": "da4ad9b6168ed8e3353f6b535ae891e747ac52e4", "filename": "src/librustc_mir/dataflow/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -453,7 +453,7 @@ impl Direction for Forward {\n                 propagate(target, exit_state);\n             }\n \n-            FalseEdges { real_target, imaginary_target } => {\n+            FalseEdge { real_target, imaginary_target } => {\n                 propagate(real_target, exit_state);\n                 propagate(imaginary_target, exit_state);\n             }"}, {"sha": "608237087732e90577a321ea315b93b820925d44", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -203,7 +203,7 @@ where\n             TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Goto { .. }"}, {"sha": "c0ab356756acfa6f217730ccf6ea68b8559a8b73", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -365,7 +365,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Unreachable => {}\n "}, {"sha": "4a63884be4c4d6964234b280e87fcc6842dd5264", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -129,7 +129,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             // These should never occur for MIR we actually run.\n             DropAndReplace { .. }\n-            | FalseEdges { .. }\n+            | FalseEdge { .. }\n             | FalseUnwind { .. }\n             | Yield { .. }\n             | GeneratorDrop => span_bug!("}, {"sha": "f3d3666b99f9f0467a6decd2324ede09a26628b0", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -649,7 +649,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             | mir::TerminatorKind::Assert { .. } => {}\n             mir::TerminatorKind::GeneratorDrop\n             | mir::TerminatorKind::Yield { .. }\n-            | mir::TerminatorKind::FalseEdges { .. }\n+            | mir::TerminatorKind::FalseEdge { .. }\n             | mir::TerminatorKind::FalseUnwind { .. } => bug!(),\n         }\n "}, {"sha": "ab87d70da7da3f678b2cf441557d7377e3cff5d7", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -609,7 +609,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             // instead.\n             TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Goto { .. }"}, {"sha": "7dbb2ebad8b996b0c43b28978368fe60c1b93fa8", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             | TerminatorKind::Abort\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. } => {\n                 // safe (at least as emitted during MIR construction)\n             }"}, {"sha": "0ff60cbd55d3ca790433e18e3139c03fd45882cf", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -1013,7 +1013,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::InlineAsm { .. } => {}\n             // Every argument in our function calls can be const propagated."}, {"sha": "3509a9a5653c8d5af0bd69d7024a39afac40c613", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -669,40 +669,33 @@ fn compute_storage_conflicts(\n     storage_conflicts\n }\n \n-fn compute_layout<'tcx>(\n+/// Validates the typeck view of the generator against the actual set of types retained between\n+/// yield points.\n+fn sanitize_witness<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    source: MirSource<'tcx>,\n+    body: &Body<'tcx>,\n+    did: DefId,\n+    witness: Ty<'tcx>,\n     upvars: &Vec<Ty<'tcx>>,\n-    interior: Ty<'tcx>,\n-    always_live_locals: &storage::AlwaysLiveLocals,\n-    movable: bool,\n-    body: &mut Body<'tcx>,\n-) -> (\n-    FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n-    GeneratorLayout<'tcx>,\n-    IndexVec<BasicBlock, Option<BitSet<Local>>>,\n+    retained: &BitSet<Local>,\n ) {\n-    // Use a liveness analysis to compute locals which are live across a suspension point\n-    let LivenessInfo {\n-        live_locals,\n-        live_locals_at_suspension_points,\n-        storage_conflicts,\n-        storage_liveness,\n-    } = locals_live_across_suspend_points(tcx, body, source, always_live_locals, movable);\n-\n-    // Erase regions from the types passed in from typeck so we can compare them with\n-    // MIR types\n     let allowed_upvars = tcx.erase_regions(upvars);\n-    let allowed = match interior.kind {\n+    let allowed = match witness.kind {\n         ty::GeneratorWitness(s) => tcx.erase_late_bound_regions(&s),\n-        _ => bug!(),\n+        _ => {\n+            tcx.sess.delay_span_bug(\n+                body.span,\n+                &format!(\"unexpected generator witness type {:?}\", witness.kind),\n+            );\n+            return;\n+        }\n     };\n \n-    let param_env = tcx.param_env(source.def_id());\n+    let param_env = tcx.param_env(did);\n \n     for (local, decl) in body.local_decls.iter_enumerated() {\n-        // Ignore locals which are internal or not live\n-        if !live_locals.contains(local) || decl.internal {\n+        // Ignore locals which are internal or not retained between yields.\n+        if !retained.contains(local) || decl.internal {\n             continue;\n         }\n         let decl_ty = tcx.normalize_erasing_regions(param_env, decl.ty);\n@@ -715,10 +708,34 @@ fn compute_layout<'tcx>(\n                 \"Broken MIR: generator contains type {} in MIR, \\\n                        but typeck only knows about {}\",\n                 decl.ty,\n-                interior\n+                witness,\n             );\n         }\n     }\n+}\n+\n+fn compute_layout<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    source: MirSource<'tcx>,\n+    upvars: &Vec<Ty<'tcx>>,\n+    interior: Ty<'tcx>,\n+    always_live_locals: &storage::AlwaysLiveLocals,\n+    movable: bool,\n+    body: &mut Body<'tcx>,\n+) -> (\n+    FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n+    GeneratorLayout<'tcx>,\n+    IndexVec<BasicBlock, Option<BitSet<Local>>>,\n+) {\n+    // Use a liveness analysis to compute locals which are live across a suspension point\n+    let LivenessInfo {\n+        live_locals,\n+        live_locals_at_suspension_points,\n+        storage_conflicts,\n+        storage_liveness,\n+    } = locals_live_across_suspend_points(tcx, body, source, always_live_locals, movable);\n+\n+    sanitize_witness(tcx, body, source.def_id(), interior, upvars, &live_locals);\n \n     // Gather live local types and their indices.\n     let mut locals = IndexVec::<GeneratorSavedLocal, _>::new();\n@@ -971,7 +988,7 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::InlineAsm { .. } => {}\n "}, {"sha": "47aa4fbf60c034cefff77cc49963c4b4803b8df2", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -791,7 +791,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n             }\n             TerminatorKind::Abort => {}\n             TerminatorKind::Unreachable => {}\n-            TerminatorKind::FalseEdges { ref mut real_target, ref mut imaginary_target } => {\n+            TerminatorKind::FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n                 *real_target = self.update_target(*real_target);\n                 *imaginary_target = self.update_target(*imaginary_target);\n             }"}, {"sha": "5c78307d882fcaa8b962452f1b989c7347730eba", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -342,7 +342,7 @@ fn check_terminator(\n ) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n-        TerminatorKind::FalseEdges { .. }\n+        TerminatorKind::FalseEdge { .. }\n         | TerminatorKind::FalseUnwind { .. }\n         | TerminatorKind::Goto { .. }\n         | TerminatorKind::Return"}, {"sha": "bf63bf24447a4634450f8b31d5e6fe7ee3bd9701", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -65,7 +65,7 @@ impl RemoveNoopLandingPads {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. } => {\n                 terminator.successors().all(|&succ| nop_landing_pads.contains(succ))\n             }"}, {"sha": "4c30a0946bccfcefadd8a7e96411647606c583bc", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n                 } if (c.literal.try_eval_bool(tcx, param_env) == Some(true)) == expected => {\n                     TerminatorKind::Goto { target }\n                 }\n-                TerminatorKind::FalseEdges { real_target, .. } => {\n+                TerminatorKind::FalseEdge { real_target, .. } => {\n                     TerminatorKind::Goto { target: real_target }\n                 }\n                 TerminatorKind::FalseUnwind { real_target, .. } => {"}, {"sha": "1433d39abfbba93ddb5204e446d01dd76b97bce0", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.check_bb(location, *drop);\n                 }\n             }\n-            TerminatorKind::FalseEdges { real_target, imaginary_target } => {\n+            TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n                 self.check_bb(location, *real_target);\n                 self.check_bb(location, *imaginary_target);\n             }"}, {"sha": "7d89a93129b1bb8b325dafba255e82e8840a0928", "filename": "src/librustc_mir_build/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.terminate(\n                     from_block,\n                     source_info,\n-                    TerminatorKind::FalseEdges { real_target, imaginary_target: target },\n+                    TerminatorKind::FalseEdge { real_target, imaginary_target: target },\n                 );\n             }\n             _ => self.cfg.goto(from_block, source_info, real_target),"}, {"sha": "ac5d128a1baa26ded9d12d616534f7bd4416afbb", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -128,7 +128,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::DropAndReplace { .. }\n-            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. } => ControlFlow::Continue,\n@@ -153,7 +153,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             TerminatorKind::Call { ref func, .. } => self.is_recursive_call(func),\n \n             TerminatorKind::FalseUnwind { unwind: Some(imaginary_target), .. }\n-            | TerminatorKind::FalseEdges { imaginary_target, .. } => imaginary_target == target,\n+            | TerminatorKind::FalseEdge { imaginary_target, .. } => imaginary_target == target,\n \n             _ => false,\n         }"}, {"sha": "ffb45793090750926b7dc798751ca57e90675bd2", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -85,6 +85,9 @@ pub struct Lint {\n     pub future_incompatible: Option<FutureIncompatibleInfo>,\n \n     pub is_plugin: bool,\n+\n+    /// `Some` if this lint is feature gated, otherwise `None`.\n+    pub feature_gate: Option<Symbol>,\n }\n \n /// Extra information for a future incompatibility lint.\n@@ -107,6 +110,7 @@ impl Lint {\n             is_plugin: false,\n             report_in_external_macro: false,\n             future_incompatible: None,\n+            feature_gate: None,\n         }\n     }\n \n@@ -276,7 +280,9 @@ macro_rules! declare_lint {\n         );\n     );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n+     $(@future_incompatible = $fi:expr;)?\n+     $(@feature_gate = $gate:expr;)?\n+     $($v:ident),*) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n@@ -285,6 +291,7 @@ macro_rules! declare_lint {\n             is_plugin: false,\n             $($v: true,)*\n             $(future_incompatible: Some($fi),)*\n+            $(feature_gate: Some($gate),)*\n             ..$crate::lint::Lint::default_fields_for_macro()\n         };\n     );\n@@ -328,6 +335,7 @@ macro_rules! declare_tool_lint {\n             report_in_external_macro: $external,\n             future_incompatible: None,\n             is_plugin: true,\n+            feature_gate: None,\n         };\n     );\n }"}, {"sha": "bb0d6e1a47eaddb5f06458999fa5f67b39afbede", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -7,6 +7,7 @@\n use crate::lint::FutureIncompatibleInfo;\n use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n+use rustc_span::symbol::sym;\n \n declare_lint! {\n     pub ILL_FORMED_ATTRIBUTE_INPUT,\n@@ -530,6 +531,7 @@ declare_lint! {\n     pub UNSAFE_OP_IN_UNSAFE_FN,\n     Allow,\n     \"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\",\n+    @feature_gate = sym::unsafe_block_in_unsafe_fn;\n }\n \n declare_lint_pass! {"}, {"sha": "439bec1702eaed10e2d4dc133a8d5f281246d7cf", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -99,7 +99,7 @@ where\n                         }\n                     }\n \n-                    ty::Generator(_, substs, _) => {\n+                    ty::Generator(def_id, substs, _) => {\n                         let substs = substs.as_generator();\n                         for upvar_ty in substs.upvar_tys() {\n                             queue_type(self, upvar_ty);\n@@ -108,7 +108,13 @@ where\n                         let witness = substs.witness();\n                         let interior_tys = match &witness.kind {\n                             ty::GeneratorWitness(tys) => tcx.erase_late_bound_regions(tys),\n-                            _ => bug!(),\n+                            _ => {\n+                                tcx.sess.delay_span_bug(\n+                                    tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP),\n+                                    &format!(\"unexpected generator witness type {:?}\", witness),\n+                                );\n+                                return Some(Err(AlwaysRequiresDrop));\n+                            }\n                         };\n \n                         for interior_ty in interior_tys {"}, {"sha": "1690b946bb625050fde5de6d9a8c5c7926c412f1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -225,11 +225,6 @@ where\n {\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n \n-    // Whitelist feature-gated lints to avoid feature errors when trying to\n-    // allow all lints.\n-    // FIXME(#72694): handle feature-gated lints properly.\n-    let unsafe_op_in_unsafe_fn_name = rustc_lint::builtin::UNSAFE_OP_IN_UNSAFE_FN.name;\n-\n     whitelisted_lints.push(warnings_lint_name.to_owned());\n     whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n \n@@ -241,7 +236,9 @@ where\n \n     let lint_opts = lints()\n         .filter_map(|lint| {\n-            if lint.name == warnings_lint_name || lint.name == unsafe_op_in_unsafe_fn_name {\n+            // Whitelist feature-gated lints to avoid feature errors when trying to\n+            // allow all lints.\n+            if lint.name == warnings_lint_name || lint.feature_gate.is_some() {\n                 None\n             } else {\n                 filter_call(lint)"}, {"sha": "3c1c02da42ff8d9cd885b9e12ef497c7892fc73c", "filename": "src/test/mir-opt/exponential-or/rustc.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -87,7 +87,7 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n     }\n \n     bb8: {\n-        falseEdges -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:8:9: 8:79\n+        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:8:9: 8:79\n     }\n \n     bb9: {"}, {"sha": "7b58dc1f624a594cd2d2e5aa5013d3b2e11231e1", "filename": "src/test/mir-opt/issue-38669/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -41,7 +41,7 @@ fn main() -> () {\n     }\n \n     bb4: {\n-        falseEdges -> [real: bb6, imaginary: bb5]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        falseEdge -> [real: bb6, imaginary: bb5]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n     bb5: {"}, {"sha": "7299a683a9f0b3ba00acbcff491a974a8ad5924e", "filename": "src/test/mir-opt/issue-49232/rustc.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -43,7 +43,7 @@ fn main() -> () {\n     }\n \n     bb5: {\n-        falseEdges -> [real: bb7, imaginary: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+        falseEdge -> [real: bb7, imaginary: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n     bb6: {"}, {"sha": "7046ebb793466de1503dd8398ebc0e2a1736b09c", "filename": "src/test/mir-opt/loop_test/rustc.main.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -31,7 +31,7 @@ fn main() -> () {\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n     bb3: {"}, {"sha": "1f6b2c982fee0fb5231f8824f663003999fb1180", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -39,23 +39,23 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n+        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n     }\n \n     bb3: {\n         switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n     }\n \n     bb4: {\n-        falseEdges -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n+        falseEdge -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n     }\n \n     bb5: {\n         switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n     }\n \n     bb6: {\n-        falseEdges -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n+        falseEdge -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n     }\n \n     bb7: {\n@@ -92,7 +92,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb10: {\n-        falseEdges -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdge -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb11: {\n@@ -145,7 +145,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdge -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb18: {\n@@ -163,7 +163,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb19: {\n-        falseEdges -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdge -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb20: {\n@@ -204,7 +204,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdge -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb24: {"}, {"sha": "3e1dec697b76f4ecea869b57a560b2a1941e0dad", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -60,11 +60,11 @@ fn full_tested_match() -> () {\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb6, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        falseEdge -> [real: bb6, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb4: {\n-        falseEdges -> [real: bb10, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n+        falseEdge -> [real: bb10, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n     }\n \n     bb5: {"}, {"sha": "4e6dc6e13ff629467e00f863443dbd43687772bd", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -42,11 +42,11 @@ fn full_tested_match2() -> () {\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb10, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+        falseEdge -> [real: bb10, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        falseEdge -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n     bb4: {\n@@ -112,7 +112,7 @@ fn full_tested_match2() -> () {\n     bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        falseEdges -> [real: bb4, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        falseEdge -> [real: bb4, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n     bb10: {"}, {"sha": "b54058ca73f6f4d5bb38394e673ee6727825380f", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -53,11 +53,11 @@ fn main() -> () {\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb10, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        falseEdge -> [real: bb10, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        falseEdge -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n     bb4: {\n@@ -75,7 +75,7 @@ fn main() -> () {\n     }\n \n     bb5: {\n-        falseEdges -> [real: bb11, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+        falseEdge -> [real: bb11, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n     }\n \n     bb6: {\n@@ -117,7 +117,7 @@ fn main() -> () {\n     bb9: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        falseEdges -> [real: bb2, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        falseEdge -> [real: bb2, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n     bb10: {\n@@ -176,7 +176,7 @@ fn main() -> () {\n     bb14: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        falseEdges -> [real: bb4, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        falseEdge -> [real: bb4, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n     bb15: {"}, {"sha": "5996496406a9f8584ca6eaee623001d1fda86fc2", "filename": "src/test/mir-opt/match_test/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -61,7 +61,7 @@ fn main() -> () {\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb9, imaginary: bb6]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        falseEdge -> [real: bb9, imaginary: bb6]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }\n \n     bb3: {\n@@ -98,15 +98,15 @@ fn main() -> () {\n     }\n \n     bb6: {\n-        falseEdges -> [real: bb12, imaginary: bb8]; // scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        falseEdge -> [real: bb12, imaginary: bb8]; // scope 2 at $DIR/match_test.rs:14:9: 14:16\n     }\n \n     bb7: {\n         switchInt(_1) -> [-1i32: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n     }\n \n     bb8: {\n-        falseEdges -> [real: bb13, imaginary: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n+        falseEdge -> [real: bb13, imaginary: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n     }\n \n     bb9: {\n@@ -131,7 +131,7 @@ fn main() -> () {\n \n     bb11: {\n         StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:24: 13:25\n-        falseEdges -> [real: bb3, imaginary: bb6]; // scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        falseEdge -> [real: bb3, imaginary: bb6]; // scope 2 at $DIR/match_test.rs:13:18: 13:19\n     }\n \n     bb12: {"}, {"sha": "e3f113fea285140937976d3d49bc7e56d7ee0c8f", "filename": "src/test/mir-opt/nll/region-subtyping-basic/32bit/rustc.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -102,7 +102,7 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        falseEdge -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {"}, {"sha": "a69952ff07f34990079cad845b9004f00785e740", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -102,7 +102,7 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        falseEdge -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {"}, {"sha": "cc2738b5e50a36b00c79f9483f3f5c8dd27d77ef", "filename": "src/test/mir-opt/simple-match/32bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -14,7 +14,7 @@ fn match_bool(_1: bool) -> usize {\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb3: {"}, {"sha": "309041abef9be180e04cb7613b0405abb39d4c94", "filename": "src/test/mir-opt/simple-match/64bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -14,7 +14,7 @@ fn match_bool(_1: bool) -> usize {\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb3: {"}, {"sha": "1ba05b1cb3881e9240533bfa35b709528f8368db", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9fdf642bab2bfcabe1829a4c82aaf055330661b/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff?ref=f9fdf642bab2bfcabe1829a4c82aaf055330661b", "patch": "@@ -45,9 +45,9 @@\n       }\n   \n -     bb6: {\n--         falseEdges -> [real: bb8, imaginary: bb7]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         falseEdge -> [real: bb8, imaginary: bb7]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb4: {\n-+         falseEdges -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb7: {"}]}