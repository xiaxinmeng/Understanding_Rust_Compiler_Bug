{"sha": "35584629f4f8ad1eb32c4363fb9b5437e1052e5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTg0NjI5ZjRmOGFkMWViMzJjNDM2M2ZiOWI1NDM3ZTEwNTJlNWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-10T15:52:26Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-14T17:03:18Z"}, "message": "Update E0049 to new error format", "tree": {"sha": "25d7220e5c8d564413eb0bf8f20b7213fcf6f0c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25d7220e5c8d564413eb0bf8f20b7213fcf6f0c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35584629f4f8ad1eb32c4363fb9b5437e1052e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35584629f4f8ad1eb32c4363fb9b5437e1052e5e", "html_url": "https://github.com/rust-lang/rust/commit/35584629f4f8ad1eb32c4363fb9b5437e1052e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35584629f4f8ad1eb32c4363fb9b5437e1052e5e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f4cc527de4230359c81799852f6bc770eba0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f4cc527de4230359c81799852f6bc770eba0e6", "html_url": "https://github.com/rust-lang/rust/commit/a5f4cc527de4230359c81799852f6bc770eba0e6"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "faad3f9b000cc0a08b40a7c27770dc895c865d91", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/35584629f4f8ad1eb32c4363fb9b5437e1052e5e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35584629f4f8ad1eb32c4363fb9b5437e1052e5e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=35584629f4f8ad1eb32c4363fb9b5437e1052e5e", "patch": "@@ -38,7 +38,8 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                      impl_m_span: Span,\n                                      impl_m_body_id: ast::NodeId,\n                                      trait_m: &ty::Method<'tcx>,\n-                                     impl_trait_ref: &ty::TraitRef<'tcx>) {\n+                                     impl_trait_ref: &ty::TraitRef<'tcx>,\n+                                     trait_item_span: Option<Span>) {\n     debug!(\"compare_impl_method(impl_trait_ref={:?})\",\n            impl_trait_ref);\n \n@@ -97,14 +98,42 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let num_impl_m_type_params = impl_m.generics.types.len();\n     let num_trait_m_type_params = trait_m.generics.types.len();\n     if num_impl_m_type_params != num_trait_m_type_params {\n-        span_err!(tcx.sess, impl_m_span, E0049,\n+        let impl_m_node_id = tcx.map.as_local_node_id(impl_m.def_id).unwrap();\n+        let span = match tcx.map.expect_impl_item(impl_m_node_id).node {\n+            ImplItemKind::Method(ref impl_m_sig, _) => {\n+                if impl_m_sig.generics.is_parameterized() {\n+                    impl_m_sig.generics.span\n+                } else {\n+                    impl_m_span\n+                }\n+            }\n+            _ => bug!(\"{:?} is not a method\", impl_m)\n+        };\n+\n+        struct_span_err!(tcx.sess, span, E0049,\n             \"method `{}` has {} type parameter{} \\\n              but its trait declaration has {} type parameter{}\",\n             trait_m.name,\n             num_impl_m_type_params,\n             if num_impl_m_type_params == 1 {\"\"} else {\"s\"},\n             num_trait_m_type_params,\n-            if num_trait_m_type_params == 1 {\"\"} else {\"s\"});\n+            if num_trait_m_type_params == 1 {\"\"} else {\"s\"})\n+            .span_label(trait_item_span.unwrap(),\n+                        &format!(\"expected {}\",\n+                                 &if num_trait_m_type_params != 1 {\n+                                     format!(\"{} type parameters\",\n+                                             num_trait_m_type_params)\n+                                 } else {\n+                                     format!(\"{} type parameter\",\n+                                             num_trait_m_type_params)\n+                                 }))\n+            .span_label(span, &format!(\"found {}\",\n+                                       &if num_impl_m_type_params != 1 {\n+                                           format!(\"{} type parameters\", num_impl_m_type_params)\n+                                       } else {\n+                                           format!(\"1 type parameter\")\n+                                       }))\n+            .emit();\n         return;\n     }\n "}, {"sha": "455bde9421d7fe49ace502334c227c512a517efa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35584629f4f8ad1eb32c4363fb9b5437e1052e5e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35584629f4f8ad1eb32c4363fb9b5437e1052e5e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=35584629f4f8ad1eb32c4363fb9b5437e1052e5e", "patch": "@@ -1015,13 +1015,15 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         _ => span_bug!(impl_item.span, \"non-method impl-item for method\")\n                     };\n \n+                    let trait_span = tcx.map.span_if_local(ty_trait_item.def_id());\n                     if let &ty::MethodTraitItem(ref trait_method) = ty_trait_item {\n                         compare_impl_method(ccx,\n                                             &impl_method,\n                                             impl_item.span,\n                                             body.id,\n                                             &trait_method,\n-                                            &impl_trait_ref);\n+                                            &impl_trait_ref,\n+                                            trait_span);\n                     } else {\n                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0324,\n                                   \"item `{}` is an associated method, \\"}, {"sha": "33ebd3f7aca5e345d4d6f8018fd8cd9c7cd6129b", "filename": "src/test/compile-fail/E0049.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35584629f4f8ad1eb32c4363fb9b5437e1052e5e/src%2Ftest%2Fcompile-fail%2FE0049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35584629f4f8ad1eb32c4363fb9b5437e1052e5e/src%2Ftest%2Fcompile-fail%2FE0049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0049.rs?ref=35584629f4f8ad1eb32c4363fb9b5437e1052e5e", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo<T: Default>(x: T) -> Self;\n+    fn foo<T: Default>(x: T) -> Self; //~ NOTE expected 1 type parameter\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n+                                    //~| NOTE found 0 type parameters\n }\n \n fn main() {"}]}