{"sha": "dc435ee762b0f46dba84e67798c8a2f0ab394091", "node_id": "C_kwDOAAsO6NoAKGRjNDM1ZWU3NjJiMGY0NmRiYTg0ZTY3Nzk4YzhhMmYwYWIzOTQwOTE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T16:45:44Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:26Z"}, "message": "For hr-subtype test, use check-pass instead of rustc_error and split nll differences to separate test", "tree": {"sha": "da6a59d0f86d762d61321287d79b55e913cacae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da6a59d0f86d762d61321287d79b55e913cacae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc435ee762b0f46dba84e67798c8a2f0ab394091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc435ee762b0f46dba84e67798c8a2f0ab394091", "html_url": "https://github.com/rust-lang/rust/commit/dc435ee762b0f46dba84e67798c8a2f0ab394091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc435ee762b0f46dba84e67798c8a2f0ab394091/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a437b2ca081bc12425a3318cb66aade9824cbae", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a437b2ca081bc12425a3318cb66aade9824cbae", "html_url": "https://github.com/rust-lang/rust/commit/0a437b2ca081bc12425a3318cb66aade9824cbae"}], "stats": {"total": 276, "additions": 164, "deletions": 112}, "files": [{"sha": "3edb1064e3e3e28a73c92527b743885e40e561c3", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr"}, {"sha": "f02eeea90bfd386111a7013eded67d342b2b5b90", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_a_vs_free_x.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.nll.stderr"}, {"sha": "bfc9793fe5d6d3023e74f81b7250c025ec06178c", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n@@ -13,7 +13,7 @@ LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr"}, {"sha": "ee0dc877fd1275e3711cc532dcda03431fda446f", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:39:13\n+  --> $DIR/hr-subtype-nll.rs:54:13\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n    |                      --  -- lifetime `'y` defined here\n@@ -19,7 +19,7 @@ LL | | fn(Inv<'y>)) }\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        --  -- lifetime `'y` defined here", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr"}, {"sha": "75904d6df997aefe85c4c12b1a1c8a37e018b57d", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.free_x_vs_free_y.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        --  -- lifetime `'y` defined here", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr"}, {"sha": "7fc1692b3506c416b89cf303d9b7ff42a33c2b1f", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -0,0 +1,117 @@\n+// Targeted tests for the higher-ranked subtyping code.\n+\n+#![allow(dead_code)]\n+\n+// revisions: bound_a_vs_bound_a\n+// revisions: bound_a_vs_bound_b\n+// revisions: bound_inv_a_vs_bound_inv_b\n+// revisions: bound_co_a_vs_bound_co_b\n+// revisions: bound_a_vs_free_x\n+// revisions: free_x_vs_free_x\n+// revisions: free_x_vs_free_y\n+// revisions: free_inv_x_vs_free_inv_y\n+// revisions: bound_a_b_vs_bound_a\n+// revisions: bound_co_a_b_vs_bound_co_a\n+// revisions: bound_contra_a_contra_b_ret_co_a\n+// revisions: bound_co_a_co_b_ret_contra_a\n+// revisions: bound_inv_a_b_vs_bound_inv_a\n+// revisions: bound_a_b_ret_a_vs_bound_a_ret_a\n+\n+//[bound_a_vs_bound_a] check-pass\n+//[bound_a_vs_bound_b] check-pass\n+//[bound_inv_a_vs_bound_inv_b] check-pass\n+//[bound_co_a_vs_bound_co_b] check-pass\n+//[free_x_vs_free_x] check-pass\n+//[bound_co_a_b_vs_bound_co_a] check-pass\n+//[bound_co_a_co_b_ret_contra_a] check-pass\n+//[bound_a_b_vs_bound_a] check-pass\n+//[bound_contra_a_contra_b_ret_co_a] check-pass\n+\n+// compile-flags: -Z borrowck=mir\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replace with `hr-subtype.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n+fn gimme<T>(_: Option<T>) {}\n+\n+struct Inv<'a> {\n+    x: *mut &'a u32,\n+}\n+\n+struct Co<'a> {\n+    x: fn(&'a u32),\n+}\n+\n+struct Contra<'a> {\n+    x: &'a u32,\n+}\n+\n+macro_rules! check {\n+    ($rev:ident: ($t1:ty, $t2:ty)) => {\n+        #[cfg($rev)]\n+        fn subtype<'x, 'y: 'x, 'z: 'y>() {\n+            gimme::<$t2>(None::<$t1>);\n+            //[free_inv_x_vs_free_inv_y]~^ ERROR\n+        }\n+\n+        #[cfg($rev)]\n+        fn supertype<'x, 'y: 'x, 'z: 'y>() {\n+            gimme::<$t1>(None::<$t2>);\n+            //[bound_a_vs_free_x]~^ ERROR\n+            //[free_x_vs_free_y]~^^ ERROR\n+            //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n+            //[bound_inv_a_b_vs_bound_inv_a]~| ERROR\n+            //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^^ ERROR\n+            //[free_inv_x_vs_free_inv_y]~^^^^^^ ERROR\n+        }\n+    };\n+}\n+\n+// If both have bound regions, they are equivalent, regardless of\n+// variant.\n+check! { bound_a_vs_bound_a: (for<'a> fn(&'a u32),\n+for<'a> fn(&'a u32)) }\n+check! { bound_a_vs_bound_b: (for<'a> fn(&'a u32),\n+for<'b> fn(&'b u32)) }\n+check! { bound_inv_a_vs_bound_inv_b: (for<'a> fn(Inv<'a>),\n+for<'b> fn(Inv<'b>)) }\n+check! { bound_co_a_vs_bound_co_b: (for<'a> fn(Co<'a>),\n+for<'b> fn(Co<'b>)) }\n+\n+// Bound is a subtype of free.\n+check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n+fn(&'x u32)) }\n+\n+// Two free regions are relatable if subtyping holds.\n+check! { free_x_vs_free_x: (fn(&'x u32),\n+fn(&'x u32)) }\n+check! { free_x_vs_free_y: (fn(&'x u32),\n+fn(&'y u32)) }\n+check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+fn(Inv<'y>)) }\n+\n+// Somewhat surprisingly, a fn taking two distinct bound lifetimes and\n+// a fn taking one bound lifetime can be interchangeable, but only if\n+// we are co- or contra-variant with respect to both lifetimes.\n+//\n+// The reason is:\n+// - if we are covariant, then 'a and 'b can be set to the call-site\n+//   intersection;\n+// - if we are contravariant, then 'a can be inferred to 'static.\n+check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n+for<'a>    fn(&'a u32, &'a u32)) }\n+check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n+for<'a>    fn(Co<'a>, Co<'a>)) }\n+check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n+for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n+check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n+for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n+\n+// If we make those lifetimes invariant, then the two types are not interchangeable.\n+check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n+for<'a>    fn(Inv<'a>, Inv<'a>)) }\n+check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n+for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n+\n+fn main() {}"}, {"sha": "13e9fa8a8944a75bd7b5c7213840795987fa21c8", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ one type is more general than the other"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b66ff5a392eb66f540dcb9916e989a91dbc8acce", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ one type is more general than the other"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "fa715fd354eaa3ecad3165c3d96868aa5b1b9882", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ one type is more general than the other"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "377689603aa6c9dbcdf4234df6a41743efb6717b", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+  --> $DIR/hr-subtype.rs:53:26\n    |\n LL |               gimme::<$t2>(None::<$t1>);\n    |                            ^^^^^^^^^^^ lifetime mismatch\n@@ -11,7 +11,7 @@ LL | | fn(Inv<'y>)) }\n    = note: expected enum `Option<fn(Inv<'y>)>`\n               found enum `Option<fn(Inv<'x>)>`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:38:20\n+  --> $DIR/hr-subtype.rs:52:20\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n    |                      ^^\n@@ -20,7 +20,7 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:38:24\n+  --> $DIR/hr-subtype.rs:52:24\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n    |                          ^^\n@@ -31,7 +31,7 @@ LL | | fn(Inv<'y>)) }\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ lifetime mismatch\n@@ -43,7 +43,7 @@ LL | | fn(Inv<'y>)) }\n    = note: expected enum `Option<fn(Inv<'x>)>`\n               found enum `Option<fn(Inv<'y>)>`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:44:22\n+  --> $DIR/hr-subtype.rs:58:22\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        ^^\n@@ -52,7 +52,7 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:44:26\n+  --> $DIR/hr-subtype.rs:58:26\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                            ^^"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9e5eb972f476a1c5f62b649b238f350a9e2730ac", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ lifetime mismatch\n@@ -11,7 +11,7 @@ LL | | fn(&'y u32)) }\n    = note: expected enum `Option<fn(&'x u32)>`\n               found enum `Option<fn(&'y u32)>`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:44:22\n+  --> $DIR/hr-subtype.rs:58:22\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        ^^\n@@ -20,7 +20,7 @@ LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | | fn(&'y u32)) }\n    | |______________- in this macro invocation\n note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:44:26\n+  --> $DIR/hr-subtype.rs:58:26\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                            ^^"}, {"sha": "33929cdb8683758e9f846a2e6bdffe5ddc9dae27", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,6 +1,5 @@\n // Targeted tests for the higher-ranked subtyping code.\n \n-#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n // revisions: bound_a_vs_bound_a\n@@ -18,6 +17,21 @@\n // revisions: bound_inv_a_b_vs_bound_inv_a\n // revisions: bound_a_b_ret_a_vs_bound_a_ret_a\n \n+//[bound_a_vs_bound_a] check-pass\n+//[bound_a_vs_bound_b] check-pass\n+//[bound_inv_a_vs_bound_inv_b] check-pass\n+//[bound_co_a_vs_bound_co_b] check-pass\n+//[free_x_vs_free_x] check-pass\n+//[bound_co_a_b_vs_bound_co_a] check-pass\n+//[bound_co_a_co_b_ret_contra_a] check-pass\n+//[bound_a_b_vs_bound_a] check-pass\n+//[bound_contra_a_contra_b_ret_co_a] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replaced with `hr-subtype-nll.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n fn gimme<T>(_: Option<T>) {}\n \n struct Inv<'a> {\n@@ -98,15 +112,4 @@ for<'a>    fn(Inv<'a>, Inv<'a>)) }\n check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n \n-#[rustc_error]\n-fn main() {\n-    //[bound_a_vs_bound_a]~^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_a_vs_bound_b]~^^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_co_a_vs_bound_co_b]~^^^^ ERROR fatal error triggered by #[rustc_error]\n-    //[free_x_vs_free_x]~^^^^^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_co_a_b_vs_bound_co_a]~^^^^^^ ERROR\n-    //[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR\n-    //[bound_a_b_vs_bound_a]~^^^^^^^^ ERROR\n-    //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR\n-}\n+fn main() {}"}, {"sha": "c6cb77d8d8db9f00efe4796e693a75c81d3887ad", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:9:47\n+  --> $DIR/placeholder-pattern-fail.rs:13:47\n    |\n LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n    |                                               ^^^ one type is more general than the other\n@@ -8,30 +8,30 @@ LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n               found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n \n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:14:31\n+  --> $DIR/placeholder-pattern-fail.rs:18:31\n    |\n LL |     let _x: (&'static i32,) = x;\n    |                               ^ lifetime mismatch\n    |\n    = note: expected tuple `(&'static i32,)`\n               found tuple `(&'c i32,)`\n note: the lifetime `'c` as defined here...\n-  --> $DIR/placeholder-pattern-fail.rs:13:12\n+  --> $DIR/placeholder-pattern-fail.rs:17:12\n    |\n LL | fn simple1<'c>(x: (&'c i32,)) {\n    |            ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:19:30\n+  --> $DIR/placeholder-pattern-fail.rs:23:30\n    |\n LL |     let _: (&'static i32,) = x;\n    |                              ^ lifetime mismatch\n    |\n    = note: expected tuple `(&'static i32,)`\n               found tuple `(&'c i32,)`\n note: the lifetime `'c` as defined here...\n-  --> $DIR/placeholder-pattern-fail.rs:18:12\n+  --> $DIR/placeholder-pattern-fail.rs:22:12\n    |\n LL | fn simple2<'c>(x: (&'c i32,)) {\n    |            ^^", "previous_filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.stderr"}, {"sha": "a1f713d8afb3be17a22726462844f9331790ac67", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:9:47\n+  --> $DIR/placeholder-pattern-fail.rs:13:47\n    |\n LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n    |                                               ^^^ one type is more general than the other"}, {"sha": "ac276a889824e8ddeb9d1b83768ebc6abab1e8a2", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc435ee762b0f46dba84e67798c8a2f0ab394091/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs?ref=dc435ee762b0f46dba84e67798c8a2f0ab394091", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Check that incorrect higher ranked subtyping\n // causes an error.\n struct Inv<'a>(fn(&'a ()) -> &'a ());\n@@ -12,12 +16,12 @@ fn hr_subtype<'c>(f: for<'a, 'b> fn(Inv<'a>, Inv<'a>)) {\n \n fn simple1<'c>(x: (&'c i32,)) {\n     let _x: (&'static i32,) = x;\n-    //~^ ERROR mismatched types\n+    //[base]~^ ERROR mismatched types\n }\n \n fn simple2<'c>(x: (&'c i32,)) {\n     let _: (&'static i32,) = x;\n-    //~^ ERROR mismatched types\n+    //[base]~^ ERROR mismatched types\n }\n \n fn main() {"}]}