{"sha": "8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjBlM2QxNmJjZjIxMmY0NWYyMWM4M2MxYjgxYzY3ZmI0MTdhNmY=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-08-22T00:56:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-22T00:56:27Z"}, "message": "Rollup merge of #87604 - yaymukund:verify-backported-commits, r=Mark-Simulacrum\n\nCI: Verify commits in beta & stable are in upstream branches.\n\nCloses #74721\n\nI think this does the trick. https://github.com/rust-lang/rust/pull/87597 is an example of it failing as it should.", "tree": {"sha": "232f52242a8b0419e61ddb5e64af7babb8414f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232f52242a8b0419e61ddb5e64af7babb8414f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhIaC7CRBK7hj4Ov3rIwAAoqcIAChYckLZFmgBtDmO0y84jxgn\nzC/VzQA4ngYvxIc/PvleABsW8m2B7pI6qU1w7Z8SOhHGeNyfaAu9TSXg7vMndCVE\njQ1OHFTbe5gGI7pVxOp5yusF0L2pj2fQXt37cZLjwQ97b2SrSCu4P3tpYi8/+0X0\nVMkayAQLiuypzkGBViCAvl1UP9w4CXO774SwTSVPsbxpUvrL3Z7KIzDAzrIM75cu\n3RTdE1g+KlaQcua3HRbEWj5yPdWIEq1pYvKdtoutOQq6tDFZmCvoS+I6TUnsvRRD\nMR8htRjP8erOPuk3LkzQ2yNuUwzO/r5OIYKpylCOasQc8sQgCuwcg8Wep8SDha4=\n=LF4v\n-----END PGP SIGNATURE-----\n", "payload": "tree 232f52242a8b0419e61ddb5e64af7babb8414f67\nparent d3e2578c31688619ddc0a10ddf8543bf4ebcba5b\nparent f19ba35bcedb7cf602f78d30ec126167bacb7c3f\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1629593787 -0400\ncommitter GitHub <noreply@github.com> 1629593787 -0400\n\nRollup merge of #87604 - yaymukund:verify-backported-commits, r=Mark-Simulacrum\n\nCI: Verify commits in beta & stable are in upstream branches.\n\nCloses #74721\n\nI think this does the trick. https://github.com/rust-lang/rust/pull/87597 is an example of it failing as it should.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "html_url": "https://github.com/rust-lang/rust/commit/8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e2578c31688619ddc0a10ddf8543bf4ebcba5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2578c31688619ddc0a10ddf8543bf4ebcba5b", "html_url": "https://github.com/rust-lang/rust/commit/d3e2578c31688619ddc0a10ddf8543bf4ebcba5b"}, {"sha": "f19ba35bcedb7cf602f78d30ec126167bacb7c3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f19ba35bcedb7cf602f78d30ec126167bacb7c3f", "html_url": "https://github.com/rust-lang/rust/commit/f19ba35bcedb7cf602f78d30ec126167bacb7c3f"}], "stats": {"total": 197, "additions": 197, "deletions": 0}, "files": [{"sha": "ff4fa1527e93ad09beb3f137c458c5c79bc18600", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "patch": "@@ -128,6 +128,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n@@ -499,6 +502,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n@@ -609,6 +615,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:"}, {"sha": "6417f5a984ad55070e00731831ef815bd472998c", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "patch": "@@ -206,6 +206,10 @@ x--expand-yaml-anchors--remove:\n         run: src/ci/scripts/verify-line-endings.sh\n         <<: *step\n \n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        <<: *step\n+\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:"}, {"sha": "1023e4b0e2837d2ef4b2a7b4f07fb01cff29a2fc", "filename": "src/ci/scripts/verify-backported-commits.sh", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/src%2Fci%2Fscripts%2Fverify-backported-commits.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/src%2Fci%2Fscripts%2Fverify-backported-commits.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fverify-backported-commits.sh?ref=8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "patch": "@@ -0,0 +1,150 @@\n+#!/bin/bash\n+# Ensure commits in beta are in master & commits in stable are in beta + master.\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+# We don't care about commits that predate this automation check, so we pass a\n+# `<limit>` argument to `git cherry`.\n+BETA_LIMIT=\"53fd98ca776cb875bc9e5514f56b52eb74f9e7a9\"\n+STABLE_LIMIT=\"a178d0322ce20e33eac124758e837cbd80a6f633\"\n+\n+verify_backported_commits_main() {\n+  ci_base_branch=$(ciBaseBranch)\n+\n+  if [[ \"$ci_base_branch\" != \"beta\" && \"$ci_base_branch\" != \"stable\" ]]; then\n+    echo 'Skipping. This is only run when merging to the beta or stable branches.'\n+    exit 0\n+  fi\n+\n+  echo 'git: unshallowing the repository so we can check commits'\n+  git fetch \\\n+    --no-tags \\\n+    --no-recurse-submodules \\\n+    --progress \\\n+    --prune \\\n+    --unshallow\n+\n+  if [[ $ci_base_branch == \"beta\" ]]; then\n+    verify_cherries master \"$BETA_LIMIT\" \\\n+      || exit 1\n+\n+  elif [[ $ci_base_branch == \"stable\" ]]; then\n+    (verify_cherries master \"$STABLE_LIMIT\" \\\n+      & verify_cherries beta \"$STABLE_LIMIT\") \\\n+      || exit 1\n+\n+  fi\n+}\n+\n+# Verify all commits in `HEAD` are backports of a commit in <upstream>. See\n+# https://git-scm.com/docs/git-cherry for an explanation of the arguments.\n+#\n+# $1 = <upstream>\n+# $2 = <limit>\n+verify_cherries() {\n+  # commits that lack a `backport-of` comment.\n+  local no_backports=()\n+  # commits with an incorrect `backport-of` comment.\n+  local bad_backports=()\n+\n+  commits=$(git cherry \"origin/$1\" HEAD \"$2\")\n+\n+  if [[ -z \"$commits\" ]]; then\n+    echo \"All commits in \\`HEAD\\` are present in \\`$1\\`\"\n+    return 0\n+  fi\n+\n+  commits=$(echo \"$commits\" | grep '^\\+' | cut -c 3-)\n+\n+  while read sha; do\n+    # Check each commit in <current>..<upstream>\n+    backport_sha=$(get_backport \"$sha\")\n+\n+    if [[ \"$backport_sha\" == \"nothing\" ]]; then\n+      echo \"\u2713 \\`$sha\\` backports nothing\"\n+      continue\n+    fi\n+\n+    if [[ -z \"$backport_sha\" ]]; then\n+      no_backports+=(\"$sha\")\n+      continue\n+    fi\n+\n+    if ! is_in_master \"$backport_sha\"; then\n+      bad_backports+=(\"$sha\")\n+      continue\n+    fi\n+\n+    echo \"\u2713 \\`$sha\\` backports \\`$backport_sha\\`\"\n+  done <<< \"$commits\"\n+\n+  failure=0\n+\n+  if [ ${#no_backports[@]} -ne 0 ]; then\n+        echo 'Error: Could not find backports for all commits.'\n+        echo\n+        echo 'All commits in \\`HEAD\\` are required to have a corresponding upstream commit.'\n+        echo 'It looks like the following commits:'\n+        echo\n+        for commit in \"${no_backports[@]}\"; do\n+          echo \"    $commit\"\n+        done\n+        echo\n+        echo \"do not match any commits in \\`$1\\`. If this was intended, add the text\"\n+        echo '\\`backport-of: <SHA of a commit already in master>\\`'\n+        echo 'somewhere in the message of each of these commits.'\n+        echo\n+        failure=1\n+  fi\n+\n+  if [ ${#bad_backports[@]} -ne 0 ]; then\n+        echo 'Error: Found incorrectly marked commits.'\n+        echo\n+        echo 'The following commits:'\n+        echo\n+        for commit in \"${bad_backports[@]}\"; do\n+          echo \"    $commit\"\n+        done\n+        echo\n+        echo 'have commit messages marked \\`backport-of: <SHA>\\`, but the SHA is not in'\n+        echo '\\`master\\`.'\n+        echo\n+        failure=1\n+  fi\n+\n+  return $failure\n+}\n+\n+# Get the backport of a commit. It echoes one of:\n+#\n+# 1. A SHA of the backported commit\n+# 2. The string \"nothing\"\n+# 3. An empty string\n+#\n+# $1 = <sha>\n+get_backport() {\n+  # This regex is:\n+  #\n+  # ^.* - throw away any extra starting characters\n+  # backport-of: - prefix\n+  # \\s\\? - optional space\n+  # \\(\\) - capture group\n+  # [a-f0-9]\\+\\|nothing - a SHA or the text 'nothing'\n+  # .* - throw away any extra ending characters\n+  # \\1 - replace it with the first match\n+  # {s//\\1/p;q} - print the first occurrence and quit\n+  #\n+  git show -s --format=%B \"$1\" \\\n+    | sed -n '/^.*backport-of:\\s\\?\\([a-f0-9]\\+\\|nothing\\).*/{s//\\1/p;q}'\n+}\n+\n+# Check if a commit is in master.\n+#\n+# $1 = <sha>\n+is_in_master() {\n+  git merge-base --is-ancestor \"$1\" origin/master 2> /dev/null\n+}\n+\n+verify_backported_commits_main"}, {"sha": "90539a96389b05f71de34e07370a09af0295a7db", "filename": "src/tools/cherry-pick.sh", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/src%2Ftools%2Fcherry-pick.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8660e3d16bcf212f45f21c83c1b81c67fb417a6f/src%2Ftools%2Fcherry-pick.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcherry-pick.sh?ref=8660e3d16bcf212f45f21c83c1b81c67fb417a6f", "patch": "@@ -0,0 +1,34 @@\n+#!/bin/bash\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+print_error() {\n+  echo \"Error: \\`$1\\` is not a valid commit. To debug, run:\"\n+  echo\n+  echo \"    git rev-parse --verify $1\"\n+  echo\n+}\n+\n+full_sha() {\n+  git rev-parse \\\n+    --verify \\\n+    --quiet \\\n+    \"$1^{object}\" || print_error $1\n+}\n+\n+commit_message_with_backport_note() {\n+  message=$(git log --format=%B -n 1 $1)\n+  echo $message | awk \"NR==1{print; print \\\"\\n(backport-of: $1)\\\"} NR!=1\"\n+}\n+\n+cherry_pick_commit() {\n+  sha=$(full_sha $1)\n+  git cherry-pick $sha > /dev/null\n+  git commit \\\n+    --amend \\\n+    --file <(commit_message_with_backport_note $sha)\n+}\n+\n+for arg ; do\n+  cherry_pick_commit $arg\n+done"}]}