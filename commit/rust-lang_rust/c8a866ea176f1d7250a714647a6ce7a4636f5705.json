{"sha": "c8a866ea176f1d7250a714647a6ce7a4636f5705", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YTg2NmVhMTc2ZjFkNzI1MGE3MTQ2NDdhNmNlN2E0NjM2ZjU3MDU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T16:56:32Z"}, "committer": {"name": "oli", "email": "oli@uhura.edef.eu", "date": "2020-10-27T14:08:07Z"}, "message": "Show the inline stack of MIR lints that only occur after inlining", "tree": {"sha": "44070d82ce7adc4e3ca3e0f29c6ce7eeba8c93c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44070d82ce7adc4e3ca3e0f29c6ce7eeba8c93c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a866ea176f1d7250a714647a6ce7a4636f5705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a866ea176f1d7250a714647a6ce7a4636f5705", "html_url": "https://github.com/rust-lang/rust/commit/c8a866ea176f1d7250a714647a6ce7a4636f5705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a866ea176f1d7250a714647a6ce7a4636f5705/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4445e465182f13590fb7c938881ee1225175740d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4445e465182f13590fb7c938881ee1225175740d", "html_url": "https://github.com/rust-lang/rust/commit/4445e465182f13590fb7c938881ee1225175740d"}], "stats": {"total": 731, "additions": 378, "deletions": 353}, "files": [{"sha": "1922dbef64d67ebede6da31a67e2a98061e756be", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -296,7 +296,7 @@ pub trait Emitter {\n \n                     // Skip past non-macro entries, just in case there\n                     // are some which do actually involve macros.\n-                    ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n+                    ExpnKind::Inlined | ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n \n                     ExpnKind::Macro(macro_kind, _) => Some(macro_kind),\n                 }\n@@ -356,7 +356,9 @@ pub trait Emitter {\n                     continue;\n                 }\n \n-                if always_backtrace {\n+                if matches!(trace.kind, ExpnKind::Inlined) {\n+                    new_labels.push((trace.call_site, \"in the inlined copy of this\".to_string()));\n+                } else if always_backtrace {\n                     new_labels.push((\n                         trace.def_site,\n                         format!("}, {"sha": "8430d162aeca4eebbd03b43c7194c9976e5dd1bf", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -358,7 +358,9 @@ pub fn struct_lint_level<'s, 'd>(\n pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n     let expn_data = span.ctxt().outer_expn_data();\n     match expn_data.kind {\n-        ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop(_)) => false,\n+        ExpnKind::Inlined | ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop(_)) => {\n+            false\n+        }\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::Macro(MacroKind::Bang, _) => {\n             // Dummy span for the `def_site` means it's an external macro."}, {"sha": "ee1e99935828c19f7284c64317cb1bee2d7d84a9", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -8,6 +8,7 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n@@ -488,6 +489,8 @@ impl Inliner<'tcx> {\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n+                    callsite_span: callsite.source_info.span,\n+                    body_span: callee_body.span,\n                 };\n \n                 // Map all `Local`s, `SourceScope`s and `BasicBlock`s to new ones\n@@ -699,6 +702,8 @@ struct Integrator<'a, 'tcx> {\n     cleanup_block: Option<BasicBlock>,\n     in_cleanup_block: bool,\n     tcx: TyCtxt<'tcx>,\n+    callsite_span: Span,\n+    body_span: Span,\n }\n \n impl<'a, 'tcx> Integrator<'a, 'tcx> {\n@@ -743,6 +748,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         *scope = self.map_scope(*scope);\n     }\n \n+    fn visit_span(&mut self, span: &mut Span) {\n+        // Make sure that all spans track the fact that they were inlined.\n+        *span = self.callsite_span.fresh_expansion(ExpnData {\n+            def_site: self.body_span,\n+            ..ExpnData::default(ExpnKind::Inlined, *span, self.tcx.sess.edition(), None)\n+        });\n+    }\n+\n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n         // If this is the `RETURN_PLACE`, we need to rebase any projections onto it.\n         let dest_proj_len = self.destination.projection.len();"}, {"sha": "eed9f2eb74d4f727545e7104735738f6eeafd242", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -799,7 +799,9 @@ impl<'tcx> SaveContext<'tcx> {\n \n             // These are not macros.\n             // FIXME(eddyb) maybe there is a way to handle them usefully?\n-            ExpnKind::Root | ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => return None,\n+            ExpnKind::Inlined | ExpnKind::Root | ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => {\n+                return None;\n+            }\n         };\n \n         let callee_span = self.span_from_span(callee.def_site);"}, {"sha": "0f82db1d05aa12991f5ad3975ef1f3ac12c811dd", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -766,6 +766,8 @@ pub enum ExpnKind {\n     AstPass(AstPass),\n     /// Desugaring done by the compiler during HIR lowering.\n     Desugaring(DesugaringKind),\n+    /// MIR inlining\n+    Inlined,\n }\n \n impl ExpnKind {\n@@ -779,6 +781,7 @@ impl ExpnKind {\n             },\n             ExpnKind::AstPass(kind) => kind.descr().to_string(),\n             ExpnKind::Desugaring(kind) => format!(\"desugaring of {}\", kind.descr()),\n+            ExpnKind::Inlined => \"inlined source\".to_string(),\n         }\n     }\n }"}, {"sha": "1fbda50f783e1501fbd2e1e1e85800dfb0492804", "filename": "src/test/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -19,7 +19,7 @@\n -                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n +                 debug z => _4;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n                   scope 4 (inlined std::mem::drop::<i32>) { // at $DIR/cycle.rs:14:5: 14:12\n-                      debug _x => _6;      // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                      debug _x => _6;      // in scope 4 at $DIR/cycle.rs:14:5: 14:12\n                   }\n               }\n           }\n@@ -56,7 +56,7 @@\n           StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:14:10: 14:11\n -         _6 = _1;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n +         _6 = _4;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n-          _5 = const ();                   // scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          _5 = const ();                   // scope 4 at $DIR/cycle.rs:14:5: 14:12\n           StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:14:11: 14:12\n           StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:14:12: 14:13\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:8:11: 15:2"}, {"sha": "0ff3e4b2dcf7d98eb72eaa1f81a564230a712057", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -12,7 +12,7 @@\n           scope 2 {\n           }\n           scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:15:5: 15:27\n-              debug _x => _4;              // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+              debug _x => _4;              // in scope 3 at $DIR/union.rs:15:5: 15:27\n           }\n       }\n   \n@@ -31,7 +31,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n           StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n           _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n-          _3 = const ();                   // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          _3 = const ();                   // scope 3 at $DIR/union.rs:15:5: 15:27\n           StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n           StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n           _0 = const ();                   // scope 0 at $DIR/union.rs:8:11: 16:2"}, {"sha": "6da0460286b9af7cf5c908822dfe385f11628e9b", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -27,8 +27,8 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n         debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     }\n     scope 2 (inlined String::new) {      // at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n-        let mut _6: std::vec::Vec<u8>;   // in scope 2 at $SRC_DIR/alloc/src/string.rs:LL:COL\n-        scope 3 (inlined Vec::<u8>::new) { // at $SRC_DIR/alloc/src/string.rs:LL:COL\n+        let mut _6: std::vec::Vec<u8>;   // in scope 2 at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n+        scope 3 (inlined Vec::<u8>::new) { // at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n         }\n     }\n "}, {"sha": "815d02c73d1e2a6dbe0629a56d52bf26fd4e715e", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -9,10 +9,10 @@ fn bar() -> bool {\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:11:9: 11:10\n         scope 2 (inlined foo) {          // at $DIR/inline-any-operand.rs:12:5: 12:13\n-            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n-            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n-            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n         }\n     }\n \n@@ -28,13 +28,13 @@ fn bar() -> bool {\n         _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n-        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13"}, {"sha": "d312369d2af75e87438f826ef93e49fbabdf1d82", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -14,8 +14,8 @@ fn foo(_1: T, _2: i32) -> i32 {\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure.rs:11:9: 11:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure.rs:12:5: 12:12\n-            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:11:14: 11:16\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:11:18: 11:20\n+            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:12:5: 12:12\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:12:5: 12:12\n         }\n     }\n \n@@ -34,7 +34,7 @@ fn foo(_1: T, _2: i32) -> i32 {\n         _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:11:22: 11:24\n+        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12"}, {"sha": "db504b416fe1dffb77345f67604e9c35c23ad4b2", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -14,11 +14,11 @@ fn foo(_1: T, _2: &i32) -> i32 {\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n-            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n-            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n             scope 3 {\n-                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n             }\n         }\n     }\n@@ -38,10 +38,10 @@ fn foo(_1: T, _2: &i32) -> i32 {\n         _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n-        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:24: 13:27\n-        _0 = (*_8);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:15:5: 15:6\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _0 = (*_8);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12"}, {"sha": "a861eab39d33788eb3300cdc206c901eeab92f66", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -14,10 +14,10 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:11:9: 11:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:11:14: 11:16\n-            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:10:23: 10:24\n-            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:10:17: 10:18\n-            let mut _10: T;              // in scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+            let mut _10: T;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         }\n     }\n \n@@ -39,11 +39,11 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        (_0.0: i32) = (*((*_6).0: &i32)); // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        _10 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        (_0.1: T) = move _10;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        (_0.0: i32) = (*((*_6).0: &i32)); // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        _10 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        (_0.1: T) = move _10;            // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9"}, {"sha": "451ec39422fc420068316439e7896ec266d0a656", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -16,7 +16,7 @@\n -     }\n - \n -     bb1: {\n-+         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:39:29: 39:31\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:25:5: 25:18\n           StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:25:18: 25:19\n           _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:24:37: 26:2\n           return;                          // scope 0 at $DIR/inline-compatibility.rs:26:2: 26:2"}, {"sha": "a59ddd344cb267524aac2c47a72d8ff30c0d8a92", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -16,7 +16,7 @@\n -     }\n - \n -     bb1: {\n-+         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:35:32: 35:34\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:14:5: 14:21\n           StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:14:21: 14:22\n           _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:13:40: 15:2\n           return;                          // scope 0 at $DIR/inline-compatibility.rs:15:2: 15:2"}, {"sha": "0fbafd76e209b0906ad57f1853b0cedf76d51c42", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -30,10 +30,10 @@\n -     }\n - \n -     bb1: {\n-+                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n++                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n++         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2"}, {"sha": "9277e57134eca3318efa2eb07e65a3b74342400f", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -30,10 +30,10 @@\n -     }\n - \n -     bb1: {\n-+                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n++                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n++         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2"}, {"sha": "b9fe84fcd0443e70bf304ec79fb35816d9d7c459", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -15,10 +15,10 @@ fn bar() -> bool {\n         let mut _9: &i32;                // in scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         let mut _10: &i32;               // in scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         scope 2 (inlined foo) {          // at $DIR/inline-retag.rs:12:5: 12:15\n-            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:16:8: 16:9\n-            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:16:17: 16:18\n-            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n         }\n     }\n \n@@ -58,15 +58,15 @@ fn bar() -> bool {\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _6 = &(*_7);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_6);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n-        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n-        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n-        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n-        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:17:5: 17:13\n-        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n-        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n+        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n         StorageDead(_6);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n         StorageDead(_3);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n         StorageDead(_2);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15"}, {"sha": "2a9ce446e307c01c62eb5ac05819b1d4c41c1f1f", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -19,7 +19,7 @@\n -     }\n - \n -     bb1: {\n-+         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:5:13: 5:38\n           _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n           StorageDead(_1);                 // scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/inline-specialization.rs:6:2: 6:2"}, {"sha": "01be1f3907ca28a1c364eaea48ff081b3b264575", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -6,8 +6,8 @@ fn test2(_1: &dyn X) -> bool {\n     let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n     let mut _3: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n     scope 1 (inlined test) {             // at $DIR/inline-trait-method_2.rs:5:5: 5:12\n-        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:9:9: 9:10\n-        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:6\n+        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n+        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n     }\n \n     bb0: {\n@@ -16,16 +16,16 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:6\n-        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:6\n-        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n+        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n+        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n+                                         // + span: $DIR/inline-trait-method_2.rs:5:5: 5:12\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:9: 10:10\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n         StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:11: 5:12\n         return;                          // scope 0 at $DIR/inline-trait-method_2.rs:6:2: 6:2\n     }"}, {"sha": "651855f80245418935b01b0515fc6e4a607263d5", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -7,19 +7,19 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _3: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n     scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        debug self => _4;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        let mut _5: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        debug self => _4;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        let mut _5: &mut [T];            // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _5 = &mut (*_4);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        _5 = &mut (*_4);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        _3 = &mut (*_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        StorageDead(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15"}, {"sha": "c67ea7e00b7609e88d0d26c78e9be59769c1666f", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -7,23 +7,23 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _3: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n     scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        debug self => _4;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        let mut _5: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        let mut _6: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n-        StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _6 = &mut (*(*_4));              // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageLive(_6);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        _6 = &mut (*(*_4));              // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        _5 = &mut (*_6);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        _3 = &mut (*_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageDead(_6);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageDead(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15"}, {"sha": "16fae453ac936c53d58aaa0d9a3b7eea1441e78f", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -6,14 +6,14 @@ fn c(_1: &[T]) -> &[T] {\n     let _2: &[T];                        // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n     let mut _3: &[T];                    // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n     scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n-        debug self => _3;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        debug self => _3;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n-        _2 = _3;                         // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        _2 = _3;                         // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:14: 13:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:14:1: 14:2"}, {"sha": "e9ca7095a43ab49f1772f7e0ea57853b9ee25c41", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -6,14 +6,14 @@ fn d(_1: &Box<T>) -> &T {\n     let _2: &T;                          // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n     scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        debug self => _3;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n-        _2 = &(*(*_3));                  // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _2 = &(*(*_3));                  // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2"}, {"sha": "3d386e3b1756b4b186a9adaa8ecb591a2d8345cf", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -10,10 +10,10 @@ fn main() -> () {\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:5:9: 5:10\n         scope 2 (inlined main::{closure#0}) { // at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-            debug x => _5;               // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:14: 5:15\n-            let _6: ();                  // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n+            debug x => _5;               // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+            let _6: ();                  // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n             scope 3 {\n-                debug y => _6;           // in scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n+                debug y => _6;           // in scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n             }\n         }\n     }\n@@ -27,10 +27,10 @@ fn main() -> () {\n         (_3.0: ()) = move _4;            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-        StorageLive(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n-        _6 = const ();                   // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:27: 5:28\n-        _0 = const ();                   // scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:5:30: 5:31\n-        StorageDead(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:32: 5:33\n+        StorageLive(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        _6 = const ();                   // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        _0 = const ();                   // scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageDead(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10"}, {"sha": "f9f30ccb20e250f88b7e2cf0c937cb2c5bf705cb", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -36,30 +36,30 @@\n                       debug arg0 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _28;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _25: &&i32; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _25;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _24;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _25: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n                       scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _28;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _28: &&i32; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _28;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _27;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _28: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n                   scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      debug pieces => _29; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _31;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _29: &[&str]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _30: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _31: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug pieces => _29; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug args => _31;   // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _29: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _30: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _31: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n@@ -139,53 +139,53 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _23 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _24) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _23 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _24) -> bb3; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb3: {\n-          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb4; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n-          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _23; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _23; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_23);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _26 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _26 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          (_22.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _28) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_22.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _28) -> bb6; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          (_22.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _26; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_22.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _26; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_26);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _16 = [move _21, move _22];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _15 = &_16;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _31 = move _15 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_30) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_13.0: &[&str]) = move _29;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _30; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_13.2: &[std::fmt::ArgumentV1]) = move _31; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_30);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          discriminant(_30) = 0;           // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_13.0: &[&str]) = move _29;     // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _30; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_13.2: &[std::fmt::ArgumentV1]) = move _31; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_30);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           begin_panic_fmt(move _12);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "f9f30ccb20e250f88b7e2cf0c937cb2c5bf705cb", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -36,30 +36,30 @@\n                       debug arg0 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _28;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _25: &&i32; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _25;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _24;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _25: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n                       scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _28;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _28: &&i32; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _28;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _27;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _28: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n                   scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      debug pieces => _29; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _31;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _29: &[&str]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _30: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _31: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug pieces => _29; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug args => _31;   // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _29: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _30: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _31: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n@@ -139,53 +139,53 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _23 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _24) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _23 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _24) -> bb3; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb3: {\n-          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb4; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n-          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _23; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _23; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_23);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _26 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _26 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          (_22.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _28) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_22.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _28) -> bb6; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          (_22.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _26; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_22.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _26; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_26);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _16 = [move _21, move _22];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _15 = &_16;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _31 = move _15 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_30) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_13.0: &[&str]) = move _29;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _30; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_13.2: &[std::fmt::ArgumentV1]) = move _31; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_30);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          discriminant(_30) = 0;           // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_13.0: &[&str]) = move _29;     // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _30; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_13.2: &[std::fmt::ArgumentV1]) = move _31; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_30);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           begin_panic_fmt(move _12);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "a9425224ce475b176d8ea0d69a9da1fc5fbb8526", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -59,32 +59,32 @@\n                       debug arg0 => _36;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _37;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _39;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _40;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _46: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _47: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _48: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _49: &&i32; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _39;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _40;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _46: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _47: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _48: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _49: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n                       scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _42;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _43;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _50: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _51: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _52: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _53: &&i32; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _42;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _43;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _50: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _51: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _52: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _53: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n                   scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      debug pieces => _23; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _27;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _54: &[&str]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _55: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _56: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug pieces => _23; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug args => _27;   // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _54: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _55: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _56: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n@@ -217,32 +217,32 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _46 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb5; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_46);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_47);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _47 = _40;                       // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _46 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb5; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_48);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _48 = transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_47);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_48);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_49);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _49 = _39;                       // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _48 = transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb6; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          StorageDead(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_38.0: &core::fmt::Opaque) = move _48; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_38.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _46; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_48);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_38.0: &core::fmt::Opaque) = move _48; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_38.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _46; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_48);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_46);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_40);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_39);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_41);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n@@ -253,32 +253,32 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _50 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb7; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_50);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_51);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _51 = _43;                       // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _50 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb7; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb7: {\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _52 = transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_51);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_52);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_53);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _53 = _42;                       // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _52 = transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb8; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb8: {\n-          StorageDead(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_41.0: &core::fmt::Opaque) = move _52; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_41.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _50; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_53);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_41.0: &core::fmt::Opaque) = move _52; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_41.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _50; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_52);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_50);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_43);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_42);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _30 = [move _38, move _41];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n@@ -290,18 +290,18 @@\n           _28 = _29;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = move _28 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_28);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _54 = _23;                       // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_55);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_55) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_56);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _56 = _27;                       // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_22.0: &[&str]) = move _54;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _55; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_22.2: &[std::fmt::ArgumentV1]) = move _56; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_56);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_55);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_54);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _54 = _23;                       // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_55);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          discriminant(_55) = 0;           // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_56);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _56 = _27;                       // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.0: &[&str]) = move _54;     // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _55; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.2: &[std::fmt::ArgumentV1]) = move _56; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_56);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_55);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_54);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_27);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_23);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "a9425224ce475b176d8ea0d69a9da1fc5fbb8526", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -59,32 +59,32 @@\n                       debug arg0 => _36;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _37;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _39;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _40;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _46: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _47: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _48: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _49: &&i32; // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _39;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _40;  // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _46: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _47: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _48: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _49: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n                       scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          debug x => _42;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _43;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _50: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _51: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _52: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _53: &&i32; // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug x => _42;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug f => _43;  // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _50: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _51: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _52: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _53: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n                   scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      debug pieces => _23; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _27;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _54: &[&str]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _55: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _56: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug pieces => _23; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug args => _27;   // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _54: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _55: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _56: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n@@ -217,32 +217,32 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _46 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb5; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_46);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_47);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _47 = _40;                       // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _46 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb5; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_48);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _48 = transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_47);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_48);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_49);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _49 = _39;                       // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _48 = transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb6; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          StorageDead(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_38.0: &core::fmt::Opaque) = move _48; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_38.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _46; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_48);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_38.0: &core::fmt::Opaque) = move _48; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_38.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _46; // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_48);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_46);                // scope 7 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_40);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_39);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_41);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n@@ -253,32 +253,32 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _50 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb7; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_50);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_51);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _51 = _43;                       // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _50 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb7; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb7: {\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _52 = transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_51);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_52);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_53);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _53 = _42;                       // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _52 = transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb8; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb8: {\n-          StorageDead(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_41.0: &core::fmt::Opaque) = move _52; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_41.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _50; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_53);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_41.0: &core::fmt::Opaque) = move _52; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_41.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _50; // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_52);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_50);                // scope 9 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_43);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_42);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _30 = [move _38, move _41];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n@@ -290,18 +290,18 @@\n           _28 = _29;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = move _28 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_28);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _54 = _23;                       // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_55);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_55) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_56);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _56 = _27;                       // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_22.0: &[&str]) = move _54;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _55; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_22.2: &[std::fmt::ArgumentV1]) = move _56; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_56);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_55);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_54);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _54 = _23;                       // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_55);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          discriminant(_55) = 0;           // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_56);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _56 = _27;                       // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.0: &[&str]) = move _54;     // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _55; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.2: &[std::fmt::ArgumentV1]) = move _56; // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_56);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_55);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_54);                // scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_27);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_23);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "e55ee287ba34f2d54212d5dd051bfe1753819c6d", "filename": "src/test/mir-opt/remove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -7,15 +7,15 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n       let mut _3: T;                       // in scope 0 at $DIR/remove_unneeded_drops.rs:21:10: 21:11\n       scope 1 (inlined std::mem::drop::<T>) { // at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n-          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:21:10: 21:11\n           _3 = move _1;                    // scope 0 at $DIR/remove_unneeded_drops.rs:21:10: 21:11\n-          _2 = const ();                   // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          _2 = const ();                   // scope 1 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n+          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n       }\n   \n       bb1 (cleanup): {"}, {"sha": "e5ad8f1ac75a9f6ce85fe8765c1197d5f001d5b4", "filename": "src/test/mir-opt/remove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -7,15 +7,15 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n       let mut _3: std::vec::Vec<bool>;     // in scope 0 at $DIR/remove_unneeded_drops.rs:9:10: 9:11\n       scope 1 (inlined std::mem::drop::<Vec<bool>>) { // at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n-          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:9:10: 9:11\n           _3 = move _1;                    // scope 0 at $DIR/remove_unneeded_drops.rs:9:10: 9:11\n-          _2 = const ();                   // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          _2 = const ();                   // scope 1 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n+          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n       }\n   \n       bb1 (cleanup): {"}, {"sha": "bddf0e2103920c94624984a3fd16d3b0eb78698a", "filename": "src/test/mir-opt/remove_unneeded_drops.opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -7,15 +7,15 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n       let mut _3: bool;                    // in scope 0 at $DIR/remove_unneeded_drops.rs:4:10: 4:11\n       scope 1 (inlined std::mem::drop::<bool>) { // at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n-          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:4:10: 4:11\n           _3 = _1;                         // scope 0 at $DIR/remove_unneeded_drops.rs:4:10: 4:11\n-          _2 = const ();                   // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n--         drop(_3) -> bb1;                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          _2 = const ();                   // scope 1 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n+-         drop(_3) -> bb1;                 // scope 1 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n -     }\n - \n -     bb1: {"}, {"sha": "87fb8a295c6b0a718672be4e0a0a5c695a510f5f", "filename": "src/test/mir-opt/remove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -7,15 +7,15 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n       let mut _3: T;                       // in scope 0 at $DIR/remove_unneeded_drops.rs:14:10: 14:11\n       scope 1 (inlined std::mem::drop::<T>) { // at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n-          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:14:10: 14:11\n           _3 = _1;                         // scope 0 at $DIR/remove_unneeded_drops.rs:14:10: 14:11\n-          _2 = const ();                   // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n--         drop(_3) -> bb1;                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          _2 = const ();                   // scope 1 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n+-         drop(_3) -> bb1;                 // scope 1 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n -     }\n - \n -     bb1: {"}, {"sha": "84d8214122ae124a032ed5aa3a42167e88d7e006", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -23,13 +23,13 @@\n +         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n           scope 3 {\n               scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n--                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-                 debug t => _9;           // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n++                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n               }\n               scope 8 (inlined <std::result::Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n--                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-                 debug v => _8;           // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n++                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n               }\n           }\n       }\n@@ -40,15 +40,15 @@\n           }\n       }\n       scope 6 (inlined <std::result::Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-          debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = move _4;                    // scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n@@ -80,16 +80,16 @@\n -         StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n -         StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n -         _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         _8 = move _9;                    // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-         _8 = move _9;                    // scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n -         StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageLive(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         _12 = move _8;                   // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         StorageLive(_12);                // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         _12 = move _8;                   // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         ((_0 as Err).0: i32) = move _12; // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         discriminant(_0) = 1;            // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         StorageDead(_12);                // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n -         StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n -         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _0 = move _3;                    // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2"}, {"sha": "aa050655cdaa5fe8cd85b18ba11e69d691652bf8", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -21,11 +21,11 @@\n           debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n           scope 3 {\n               scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n-                  debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                  debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n               }\n               scope 8 (inlined <std::result::Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-                  debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n               }\n           }\n       }\n@@ -35,15 +35,15 @@\n           }\n       }\n       scope 6 (inlined <std::result::Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-          debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = move _4;                    // scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n -         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n@@ -63,7 +63,7 @@\n -     }\n - \n -     bb3: {\n--         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         _0 = move _3;                    // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n -         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2"}, {"sha": "3ba0af991f63b17b009c8b42a43f101940caa00e", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -21,11 +21,11 @@\n           debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n               scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                  debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                  debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n               scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                  debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n               }\n           }\n       }\n@@ -35,22 +35,22 @@\n           }\n       }\n       scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n--         debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         debug self => _0;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n++         debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n -         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n -         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n--         _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n -         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n -         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n +         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-+         nop;                             // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++         nop;                             // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n +         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n           goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15"}, {"sha": "9c91762eb4e1562947748260445450893aede546", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -23,13 +23,13 @@\n +         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n               scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n--                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-                 debug t => _9;           // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n++                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n               scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n--                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-                 debug v => _8;           // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n++                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n               }\n           }\n       }\n@@ -40,15 +40,15 @@\n           }\n       }\n       scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-          debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n           StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n           _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-          _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n           StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n           switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n@@ -76,16 +76,16 @@\n -         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n -         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n -         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         _8 = move _9;                    // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-         _8 = move _9;                    // scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n -         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         _12 = move _8;                   // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         StorageLive(_12);                // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n+-         _12 = move _8;                   // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n+-         ((_0 as Err).0: i32) = move _12; // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n+-         discriminant(_0) = 1;            // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n+-         StorageDead(_12);                // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n -         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n -         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _0 = move _3;                    // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2"}, {"sha": "cd8436a971ee85a2f7a649623dc1755ac9b696e0", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -20,11 +20,11 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n             scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n             }\n             scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _12: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n+                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n             }\n         }\n     }\n@@ -34,15 +34,15 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         }\n     }\n     scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-        debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n         goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15"}, {"sha": "73f77f35a2b92f247be0ab44178df8da2d8e0926", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -10,10 +10,10 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n             scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n             }\n             scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n             }\n         }\n     }\n@@ -23,7 +23,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         }\n     }\n     scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-        debug self => _0;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n     }\n \n     bb0: {"}, {"sha": "32902b49d0284ea86aa04fb2dae8b4eb19c59f2d", "filename": "src/test/ui/const_prop/inline_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.rs?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -5,10 +5,10 @@\n \n fn main() {\n     let _ = add(u8::MAX, 1);\n+    //~^ ERROR this arithmetic operation will overflow\n }\n \n #[inline(always)]\n fn add(x: u8, y: u8) -> u8 {\n     x + y\n-    //~^ ERROR this arithmetic operation will overflow\n }"}, {"sha": "05596b8dd3fa4545d22a850faba3a4bec5150029", "filename": "src/test/ui/const_prop/inline_spans.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8a866ea176f1d7250a714647a6ce7a4636f5705/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.stderr?ref=c8a866ea176f1d7250a714647a6ce7a4636f5705", "patch": "@@ -1,8 +1,11 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/inline_spans.rs:12:5\n+  --> $DIR/inline_spans.rs:7:13\n    |\n+LL |     let _ = add(u8::MAX, 1);\n+   |             ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+...\n LL |     x + y\n-   |     ^^^^^ attempt to compute `u8::MAX + 1_u8` which would overflow\n+   |     ----- in the inlined copy of this\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n "}]}