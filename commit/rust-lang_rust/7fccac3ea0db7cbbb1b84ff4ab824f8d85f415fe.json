{"sha": "7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "node_id": "C_kwDOAAsO6NoAKDdmY2NhYzNlYTBkYjdjYmJiMWI4NGZmNGFiODI0ZjhkODVmNDE1ZmU", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-04-13T23:38:16Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-12T23:55:56Z"}, "message": "Typecheck dyn* coercions\n\nAlso changes things to treat dyn* as a sized type, unlike dyn Trait.", "tree": {"sha": "180db46f04cb01e79b9f843387b875de77264db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/180db46f04cb01e79b9f843387b875de77264db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "html_url": "https://github.com/rust-lang/rust/commit/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c01273a1566bc312ea88225880d35c2259914a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c01273a1566bc312ea88225880d35c2259914a6", "html_url": "https://github.com/rust-lang/rust/commit/6c01273a1566bc312ea88225880d35c2259914a6"}], "stats": {"total": 177, "additions": 148, "deletions": 29}, "files": [{"sha": "6713660ab8fafdcd81da629a61db132bd03f1051", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -31,7 +31,7 @@ use ty::util::IntTypeExt;\n \n use rustc_type_ir::sty::TyKind::*;\n use rustc_type_ir::RegionKind as IrRegionKind;\n-use rustc_type_ir::TyKind as IrTyKind;\n+use rustc_type_ir::{TraitObjectRepresentation, TyKind as IrTyKind};\n \n // Re-export the `TyKind` from `rustc_type_ir` here for convenience\n #[rustc_diagnostic_item = \"TyKind\"]\n@@ -692,6 +692,9 @@ impl<'tcx> ExistentialPredicate<'tcx> {\n }\n \n impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {\n+    /// Given an existential predicate like `?Self: PartialEq<u32>` (e.g., derived from `dyn PartialEq<u32>`),\n+    /// and a concrete type `self_ty`, returns a full predicate where the existentially quantified variable `?Self`\n+    /// has been replaced with `self_ty` (e.g., `self_ty: PartialEq<u32>`, in our example).\n     pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {\n         use crate::ty::ToPredicate;\n         match self.skip_binder() {\n@@ -1849,7 +1852,12 @@ impl<'tcx> Ty<'tcx> {\n \n     #[inline]\n     pub fn is_trait(self) -> bool {\n-        matches!(self.kind(), Dynamic(..))\n+        matches!(self.kind(), Dynamic(_, _, TraitObjectRepresentation::Unsized))\n+    }\n+\n+    #[inline]\n+    pub fn is_dyn_star(self) -> bool {\n+        matches!(self.kind(), Dynamic(_, _, TraitObjectRepresentation::Sized))\n     }\n \n     #[inline]"}, {"sha": "43ee5b5545543781eee84cffc7dc7afa1031ae6e", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -20,8 +20,8 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::abstract_const::{walk_abstract_const, AbstractConst};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n-    TraitObjectRepresentation,\n+    self, EarlyBinder, TraitObjectRepresentation, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+    TypeVisitor,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;"}, {"sha": "a64179c14f51e43cec86d45cfe3f9073676f0973", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -38,6 +38,7 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n+use rustc_middle::ty::TraitObjectRepresentation;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_span::symbol::sym;\n@@ -1865,6 +1866,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n+            | ty::Dynamic(_, _, TraitObjectRepresentation::Sized)\n             | ty::Error(_) => {\n                 // safe for everything\n                 Where(ty::Binder::dummy(Vec::new()))"}, {"sha": "0010bcc4bf6207ac27a5c8a268f14852a8fff57c", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -28,10 +28,10 @@ use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n+use rustc_middle::ty::TraitObjectRepresentation;\n use rustc_middle::ty::{\n     self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeVisitable,\n };\n-use rustc_middle::ty::{TraitObjectRepresentation};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -1253,6 +1253,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_bounds: &[hir::PolyTraitRef<'_>],\n         lifetime: &hir::Lifetime,\n         borrowed: bool,\n+        representation: TraitObjectRepresentation,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n@@ -1573,11 +1574,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n         debug!(\"region_bound: {:?}\", region_bound);\n \n-        let ty = tcx.mk_dynamic(\n-            existential_predicates,\n-            region_bound,\n-            TraitObjectRepresentation::Unsized, // FIXME: check whether the source syntax was dyn or dyn*\n-        );\n+        let ty = tcx.mk_dynamic(existential_predicates, region_bound, representation);\n         debug!(\"trait_object_type: {:?}\", ty);\n         ty\n     }\n@@ -2623,9 +2620,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     Some(ast_ty),\n                 ))\n             }\n-            hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n+            hir::TyKind::TraitObject(bounds, ref lifetime, repr) => {\n                 self.maybe_lint_bare_trait(ast_ty, in_path);\n-                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed)\n+                let repr = match repr {\n+                    TraitObjectSyntax::Dyn | TraitObjectSyntax::None => {\n+                        TraitObjectRepresentation::Unsized\n+                    }\n+                    TraitObjectSyntax::DynStar => TraitObjectRepresentation::Sized,\n+                };\n+                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed, repr)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(ref maybe_qself, ref path)) => {\n                 debug!(?maybe_qself, ?path);"}, {"sha": "fa6224f1915a9ae2e425a8cc96997d8f0552fe8e", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 77, "deletions": 3, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -35,12 +35,15 @@ use crate::type_error_struct;\n use hir::def_id::LOCAL_CRATE;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n+use rustc_infer::traits::{Obligation, ObligationCause, ObligationCauseCode};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable, VariantDef};\n+use rustc_middle::ty::{\n+    self, Binder, TraitObjectRepresentation, Ty, TypeAndMut, TypeVisitable, VariantDef,\n+};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -52,9 +55,12 @@ use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n /// a function context.\n #[derive(Debug)]\n pub struct CastCheck<'tcx> {\n+    /// The expression whose value is being casted\n     expr: &'tcx hir::Expr<'tcx>,\n+    /// The source type for the cast expression\n     expr_ty: Ty<'tcx>,\n     expr_span: Span,\n+    /// The target type. That is, the type we are casting to.\n     cast_ty: Ty<'tcx>,\n     cast_span: Span,\n     span: Span,\n@@ -199,8 +205,76 @@ fn make_invalid_casting_error<'a, 'tcx>(\n     )\n }\n \n+pub enum CastCheckResult<'tcx> {\n+    Ok,\n+    Deferred(CastCheck<'tcx>),\n+    Err(ErrorGuaranteed),\n+}\n+\n+pub fn check_cast<'tcx>(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    expr_ty: Ty<'tcx>,\n+    cast_ty: Ty<'tcx>,\n+    cast_span: Span,\n+    span: Span,\n+) -> CastCheckResult<'tcx> {\n+    if cast_ty.is_dyn_star() {\n+        check_dyn_star_cast(fcx, expr, expr_ty, cast_ty)\n+    } else {\n+        match CastCheck::new(fcx, expr, expr_ty, cast_ty, cast_span, span) {\n+            Ok(check) => CastCheckResult::Deferred(check),\n+            Err(e) => CastCheckResult::Err(e),\n+        }\n+    }\n+}\n+\n+fn check_dyn_star_cast<'tcx>(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    expr_ty: Ty<'tcx>,\n+    cast_ty: Ty<'tcx>,\n+) -> CastCheckResult<'tcx> {\n+    // Find the bounds in the dyn*. For eaxmple, if we have\n+    //\n+    //    let x = 22_usize as dyn* (Clone + Debug + 'static)\n+    //\n+    // this would return `existential_predicates = [?Self: Clone, ?Self: Debug]` and `region = 'static`.\n+    let (existential_predicates, region) = match cast_ty.kind() {\n+        ty::Dynamic(predicates, region, TraitObjectRepresentation::Sized) => (predicates, region),\n+        _ => panic!(\"Invalid dyn* cast_ty\"),\n+    };\n+\n+    let cause = ObligationCause::new(\n+        expr.span,\n+        fcx.body_id,\n+        // FIXME: Use a better obligation cause code\n+        ObligationCauseCode::MiscObligation,\n+    );\n+\n+    // For each existential predicate (e.g., `?Self: Clone`) substitute\n+    // the type of the expression (e.g., `usize` in our example above)\n+    // and then require that the resulting predicate (e.g., `usize: Clone`)\n+    // holds (it does).\n+    for existential_predicate in existential_predicates.iter() {\n+        let predicate = existential_predicate.with_self_ty(fcx.tcx, expr_ty);\n+        fcx.register_predicate(Obligation::new(cause.clone(), fcx.param_env, predicate));\n+    }\n+\n+    // Enforce the region bound `'static` (e.g., `usize: 'static`, in our example).\n+    fcx.register_predicate(Obligation::new(\n+        cause,\n+        fcx.param_env,\n+        fcx.tcx.mk_predicate(Binder::dummy(ty::PredicateKind::TypeOutlives(\n+            ty::OutlivesPredicate(expr_ty, *region),\n+        ))),\n+    ));\n+\n+    CastCheckResult::Ok\n+}\n+\n impl<'a, 'tcx> CastCheck<'tcx> {\n-    pub fn new(\n+    fn new(\n         fcx: &FnCtxt<'a, 'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n         expr_ty: Ty<'tcx>,\n@@ -215,7 +289,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         // cases now. We do a more thorough check at the end, once\n         // inference is more completely known.\n         match cast_ty.kind() {\n-            ty::Dynamic(..) | ty::Slice(..) => {\n+            ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) | ty::Slice(..) => {\n                 let reported = check.report_cast_to_unsized_type(fcx);\n                 Err(reported)\n             }"}, {"sha": "93b00850069c277e18eea35b30367b11386c32b7", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -3,18 +3,15 @@\n //! See `mod.rs` for more context on type checking in general.\n \n use crate::astconv::AstConv as _;\n-use crate::check::cast;\n+use crate::check::cast::{self, CastCheckResult};\n use crate::check::coercion::CoerceMany;\n use crate::check::fatally_break_rust;\n use crate::check::method::SelfSource;\n-use crate::check::report_unexpected_variant_res;\n-use crate::check::BreakableCtxt;\n-use crate::check::Diverges;\n-use crate::check::DynamicCoerceMany;\n use crate::check::Expectation::{self, ExpectCastableToType, ExpectHasType, NoExpectation};\n-use crate::check::FnCtxt;\n-use crate::check::Needs;\n-use crate::check::TupleArgumentsFlag::DontTupleArguments;\n+use crate::check::{\n+    report_unexpected_variant_res, BreakableCtxt, Diverges, DynamicCoerceMany, FnCtxt, Needs,\n+    TupleArgumentsFlag::DontTupleArguments,\n+};\n use crate::errors::{\n     FieldMultiplySpecifiedInInitializer, FunctionalRecordUpdateOnNonStruct,\n     YieldExprOutsideOfGenerator,\n@@ -1252,16 +1249,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             // Defer other checks until we're done type checking.\n             let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n-            match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n-                Ok(cast_check) => {\n+            match cast::check_cast(self, e, t_expr, t_cast, t.span, expr.span) {\n+                CastCheckResult::Ok => t_cast,\n+                CastCheckResult::Deferred(cast_check) => {\n                     debug!(\n                         \"check_expr_cast: deferring cast from {:?} to {:?}: {:?}\",\n                         t_cast, t_expr, cast_check,\n                     );\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                Err(_) => self.tcx.ty_error(),\n+                CastCheckResult::Err(ErrorGuaranteed { .. }) => self.tcx.ty_error(),\n             }\n         }\n     }"}, {"sha": "82b7101baa3a88cb238ba254baa03c4566516f91", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     })\n                 }\n-                ty::Dynamic(data, _) => {\n+                ty::Dynamic(data, _, ty::TraitObjectRepresentation::Unsized) => {\n                     data.iter().find_map(|pred| {\n                         if let ty::ExistentialPredicate::Projection(proj) = pred.skip_binder()\n                         && Some(proj.item_def_id) == self.tcx.lang_items().fn_once_output()"}, {"sha": "20e183c74554af8ba548408e43b9c89fe6913a75", "filename": "src/test/ui/async-await/dyn-star-trait-error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-error.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -0,0 +1,12 @@\n+#![feature(async_fn_in_traits)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {}\n+\n+fn make_dyn_star() {\n+    let i = 42;\n+    let dyn_i: dyn* Foo = i as dyn* Foo; //~ ERROR trait bound `{integer}: Foo` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "932bc50ffde5ae9b39a36500242b587e92b97f82", "filename": "src/test/ui/async-await/dyn-star-trait-error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-error.stderr?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `{integer}: Foo` is not satisfied\n+  --> $DIR/dyn-star-trait-error.rs:9:27\n+   |\n+LL |     let dyn_i: dyn* Foo = i as dyn* Foo;\n+   |                           ^ the trait `Foo` is not implemented for `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "17356bfbd84b9e79d127a4b7f9b8666c3065be08", "filename": "src/test/ui/dyn-star/make-dyn-star.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![feature(dyn_star)]\n+\n+use std::fmt::Debug;\n+\n+pub fn dyn_star_parameter(_: dyn* Send) {\n+}\n+\n+fn make_dyn_star() {\n+    let i = 42usize;\n+    let dyn_i: dyn* Debug = i as dyn* Debug;\n+}\n+\n+fn main() {}"}, {"sha": "7848996e5e0221d244064a3f285616e5d5a6e092", "filename": "src/test/ui/dyn-star/syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs?ref=7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "patch": "@@ -2,10 +2,9 @@\n //\n // check-pass\n \n-\n #![feature(dyn_star)]\n \n-pub fn dyn_star_parameter(_: &dyn* Send) {\n+pub fn dyn_star_parameter(_: dyn* Send) {\n }\n \n fn main() {}"}]}