{"sha": "df9fa1a51e9e9570c30b98be2409964313f5d607", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOWZhMWE1MWU5ZTk1NzBjMzBiOThiZTI0MDk5NjQzMTNmNWQ2MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-01T13:59:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-01T13:59:09Z"}, "message": "Auto merge of #36857 - Manishearth:syntax-rollup, r=Manishearth\n\nSyntax breaking batch\n\nNone", "tree": {"sha": "1687c31700872c8587edfee7bd50510e17a75e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1687c31700872c8587edfee7bd50510e17a75e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9fa1a51e9e9570c30b98be2409964313f5d607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9fa1a51e9e9570c30b98be2409964313f5d607", "html_url": "https://github.com/rust-lang/rust/commit/df9fa1a51e9e9570c30b98be2409964313f5d607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9fa1a51e9e9570c30b98be2409964313f5d607/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5045d4e39621b265eca947277f07e23f62608ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5045d4e39621b265eca947277f07e23f62608ad0", "html_url": "https://github.com/rust-lang/rust/commit/5045d4e39621b265eca947277f07e23f62608ad0"}, {"sha": "406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "html_url": "https://github.com/rust-lang/rust/commit/406fe7e3c2cf3e339763aea2a263559b8a8e6d87"}], "stats": {"total": 688, "additions": 514, "deletions": 174}, "files": [{"sha": "50d4cbc982e97b2be8633d71090024b430f76ddb", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_ast_node(pat.id, &[pats_exit])\n             }\n \n-            PatKind::Vec(ref pre, ref vec, ref post) => {\n+            PatKind::Slice(ref pre, ref vec, ref post) => {\n                 let pre_exit = self.pats_all(pre.iter(), pred);\n                 let vec_exit = self.pats_all(vec.iter(), pre_exit);\n                 let post_exit = self.pats_all(post.iter(), vec_exit);\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_unreachable_node()\n             }\n \n-            hir::ExprVec(ref elems) => {\n+            hir::ExprArray(ref elems) => {\n                 self.straightline(expr, pred, elems.iter().map(|e| &**e))\n             }\n "}, {"sha": "b1771f52da2c6fef8b4fa31ade542c9ea393c380", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -394,7 +394,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     visitor.visit_id(typ.id);\n \n     match typ.node {\n-        TyVec(ref ty) => {\n+        TySlice(ref ty) => {\n             visitor.visit_ty(ty)\n         }\n         TyPtr(ref mutable_type) => {\n@@ -422,7 +422,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n-        TyFixedLengthVec(ref ty, ref expression) => {\n+        TyArray(ref ty, ref expression) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expression)\n         }\n@@ -520,7 +520,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_expr(upper_bound)\n         }\n         PatKind::Wild => (),\n-        PatKind::Vec(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n+        PatKind::Slice(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n             walk_list!(visitor, visit_pat, prepatterns);\n             walk_list!(visitor, visit_pat, slice_pattern);\n             walk_list!(visitor, visit_pat, postpatterns);\n@@ -749,7 +749,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprBox(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }\n-        ExprVec(ref subexpressions) => {\n+        ExprArray(ref subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n         ExprRepeat(ref element, ref count) => {"}, {"sha": "dace486b277db7e5360287fe876610486994a6a8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -222,30 +222,31 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_ty(&mut self, t: &Ty) -> P<hir::Ty> {\n-        use syntax::ast::TyKind::*;\n         P(hir::Ty {\n             id: t.id,\n             node: match t.node {\n-                Infer | ImplicitSelf => hir::TyInfer,\n-                Vec(ref ty) => hir::TyVec(self.lower_ty(ty)),\n-                Ptr(ref mt) => hir::TyPtr(self.lower_mt(mt)),\n-                Rptr(ref region, ref mt) => {\n+                TyKind::Infer | TyKind::ImplicitSelf => hir::TyInfer,\n+                TyKind::Slice(ref ty) => hir::TySlice(self.lower_ty(ty)),\n+                TyKind::Ptr(ref mt) => hir::TyPtr(self.lower_mt(mt)),\n+                TyKind::Rptr(ref region, ref mt) => {\n                     hir::TyRptr(self.lower_opt_lifetime(region), self.lower_mt(mt))\n                 }\n-                BareFn(ref f) => {\n+                TyKind::BareFn(ref f) => {\n                     hir::TyBareFn(P(hir::BareFnTy {\n                         lifetimes: self.lower_lifetime_defs(&f.lifetimes),\n                         unsafety: self.lower_unsafety(f.unsafety),\n                         abi: f.abi,\n                         decl: self.lower_fn_decl(&f.decl),\n                     }))\n                 }\n-                Never => hir::TyNever,\n-                Tup(ref tys) => hir::TyTup(tys.iter().map(|ty| self.lower_ty(ty)).collect()),\n-                Paren(ref ty) => {\n+                TyKind::Never => hir::TyNever,\n+                TyKind::Tup(ref tys) => {\n+                    hir::TyTup(tys.iter().map(|ty| self.lower_ty(ty)).collect())\n+                }\n+                TyKind::Paren(ref ty) => {\n                     return self.lower_ty(ty);\n                 }\n-                Path(ref qself, ref path) => {\n+                TyKind::Path(ref qself, ref path) => {\n                     let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n                         hir::QSelf {\n                             ty: self.lower_ty(ty),\n@@ -254,22 +255,22 @@ impl<'a> LoweringContext<'a> {\n                     });\n                     hir::TyPath(qself, self.lower_path(path))\n                 }\n-                ObjectSum(ref ty, ref bounds) => {\n+                TyKind::ObjectSum(ref ty, ref bounds) => {\n                     hir::TyObjectSum(self.lower_ty(ty), self.lower_bounds(bounds))\n                 }\n-                FixedLengthVec(ref ty, ref e) => {\n-                    hir::TyFixedLengthVec(self.lower_ty(ty), self.lower_expr(e))\n+                TyKind::Array(ref ty, ref e) => {\n+                    hir::TyArray(self.lower_ty(ty), self.lower_expr(e))\n                 }\n-                Typeof(ref expr) => {\n+                TyKind::Typeof(ref expr) => {\n                     hir::TyTypeof(self.lower_expr(expr))\n                 }\n-                PolyTraitRef(ref bounds) => {\n+                TyKind::PolyTraitRef(ref bounds) => {\n                     hir::TyPolyTraitRef(self.lower_bounds(bounds))\n                 }\n-                ImplTrait(ref bounds) => {\n+                TyKind::ImplTrait(ref bounds) => {\n                     hir::TyImplTrait(self.lower_bounds(bounds))\n                 }\n-                Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n+                TyKind::Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n             },\n             span: t.span,\n         })\n@@ -891,8 +892,8 @@ impl<'a> LoweringContext<'a> {\n                 PatKind::Range(ref e1, ref e2) => {\n                     hir::PatKind::Range(self.lower_expr(e1), self.lower_expr(e2))\n                 }\n-                PatKind::Vec(ref before, ref slice, ref after) => {\n-                    hir::PatKind::Vec(before.iter().map(|x| self.lower_pat(x)).collect(),\n+                PatKind::Slice(ref before, ref slice, ref after) => {\n+                    hir::PatKind::Slice(before.iter().map(|x| self.lower_pat(x)).collect(),\n                                 slice.as_ref().map(|x| self.lower_pat(x)),\n                                 after.iter().map(|x| self.lower_pat(x)).collect())\n                 }\n@@ -1031,7 +1032,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n \n                 ExprKind::Vec(ref exprs) => {\n-                    hir::ExprVec(exprs.iter().map(|x| self.lower_expr(x)).collect())\n+                    hir::ExprArray(exprs.iter().map(|x| self.lower_expr(x)).collect())\n                 }\n                 ExprKind::Repeat(ref expr, ref count) => {\n                     let expr = self.lower_expr(expr);"}, {"sha": "49d889ff08dec6a5aab1436be986bdad355d7322", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -286,7 +286,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n     fn visit_ty(&mut self, ty: &Ty) {\n         match ty.node {\n             TyKind::Mac(..) => return self.visit_macro_invoc(ty.id, false),\n-            TyKind::FixedLengthVec(_, ref length) => self.visit_ast_const_integer(length),\n+            TyKind::Array(_, ref length) => self.visit_ast_const_integer(length),\n             TyKind::ImplTrait(..) => {\n                 self.create_def(ty.id, DefPathData::ImplTrait);\n             }\n@@ -448,7 +448,7 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n     }\n \n     fn visit_ty(&mut self, ty: &'ast hir::Ty) {\n-        if let hir::TyFixedLengthVec(_, ref length) = ty.node {\n+        if let hir::TyArray(_, ref length) = ty.node {\n             self.visit_hir_const_integer(length);\n         }\n         if let hir::TyImplTrait(..) = ty.node {"}, {"sha": "f64b0e9c7342cf994cfc8624b8261ea66443b500", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -478,7 +478,7 @@ impl Pat {\n             PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n                 s.walk_(it)\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 before.iter().all(|p| p.walk_(it)) &&\n                 slice.iter().all(|p| p.walk_(it)) &&\n                 after.iter().all(|p| p.walk_(it))\n@@ -554,8 +554,8 @@ pub enum PatKind {\n     /// A range pattern, e.g. `1...2`\n     Range(P<Expr>, P<Expr>),\n     /// `[a, b, ..i, y, z]` is represented as:\n-    ///     `PatKind::Vec(box [a, b], Some(i), box [y, z])`\n-    Vec(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n+    ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n+    Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -826,7 +826,7 @@ pub enum Expr_ {\n     /// A `box x` expression.\n     ExprBox(P<Expr>),\n     /// An array (`[a, b, c, d]`)\n-    ExprVec(HirVec<P<Expr>>),\n+    ExprArray(HirVec<P<Expr>>),\n     /// A function call\n     ///\n     /// The first field resolves to the function itself (usually an `ExprPath`),\n@@ -1080,10 +1080,10 @@ pub struct BareFnTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n /// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n-    /// A variable length array (`[T]`)\n-    TyVec(P<Ty>),\n+    /// A variable length slice (`[T]`)\n+    TySlice(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n-    TyFixedLengthVec(P<Ty>, P<Expr>),\n+    TyArray(P<Ty>, P<Expr>),\n     /// A raw pointer (`*const T` or `*mut T`)\n     TyPtr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`)"}, {"sha": "505d126db7f4fb9f6b848d58ec2d468c5de1ebfd", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -62,7 +62,7 @@ pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n                 _ => false\n             }\n         }\n-        PatKind::Vec(..) => true,\n+        PatKind::Slice(..) => true,\n         _ => false\n     }\n }"}, {"sha": "90b92beb7a7fbf0eb17e332c6bed942b181e1ab8", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -486,7 +486,7 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(ty.span.lo)?;\n         self.ibox(0)?;\n         match ty.node {\n-            hir::TyVec(ref ty) => {\n+            hir::TySlice(ref ty) => {\n                 word(&mut self.s, \"[\")?;\n                 self.print_type(&ty)?;\n                 word(&mut self.s, \"]\")?;\n@@ -543,7 +543,7 @@ impl<'a> State<'a> {\n             hir::TyImplTrait(ref bounds) => {\n                 self.print_bounds(\"impl \", &bounds[..])?;\n             }\n-            hir::TyFixedLengthVec(ref ty, ref v) => {\n+            hir::TyArray(ref ty, ref v) => {\n                 word(&mut self.s, \"[\")?;\n                 self.print_type(&ty)?;\n                 word(&mut self.s, \"; \")?;\n@@ -1319,7 +1319,7 @@ impl<'a> State<'a> {\n                 self.word_space(\"box\")?;\n                 self.print_expr(expr)?;\n             }\n-            hir::ExprVec(ref exprs) => {\n+            hir::ExprArray(ref exprs) => {\n                 self.print_expr_vec(&exprs[..])?;\n             }\n             hir::ExprRepeat(ref element, ref count) => {\n@@ -1829,7 +1829,7 @@ impl<'a> State<'a> {\n                 word(&mut self.s, \"...\")?;\n                 self.print_expr(&end)?;\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 word(&mut self.s, \"[\")?;\n                 self.commasep(Inconsistent, &before[..], |s, p| s.print_pat(&p))?;\n                 if let Some(ref p) = *slice {"}, {"sha": "3f216d6916851a15867247edc15111a336d78c51", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -1433,8 +1433,8 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n                 hir::TyPtr(ref mut_ty) => {\n                     ty_queue.push(&mut_ty.ty);\n                 }\n-                hir::TyVec(ref ty) |\n-                hir::TyFixedLengthVec(ref ty, _) => {\n+                hir::TySlice(ref ty) |\n+                hir::TyArray(ref ty, _) => {\n                     ty_queue.push(&ty);\n                 }\n                 hir::TyTup(ref tys) => ty_queue.extend(tys.iter().map(|ty| &**ty)),\n@@ -1469,9 +1469,9 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n                             ty: build_to(mut_ty.ty, to),\n                         })\n                     }\n-                    hir::TyVec(ty) => hir::TyVec(build_to(ty, to)),\n-                    hir::TyFixedLengthVec(ty, e) => {\n-                        hir::TyFixedLengthVec(build_to(ty, to), e)\n+                    hir::TySlice(ty) => hir::TySlice(build_to(ty, to)),\n+                    hir::TyArray(ty, e) => {\n+                        hir::TyArray(build_to(ty, to), e)\n                     }\n                     hir::TyTup(tys) => {\n                         hir::TyTup(tys.into_iter().map(|ty| build_to(ty, to)).collect())"}, {"sha": "d7392338d5ed9539af80d2c660f5e75af5c870f7", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -442,7 +442,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            hir::ExprVec(ref exprs) => {\n+            hir::ExprArray(ref exprs) => {\n                 self.consume_exprs(exprs);\n             }\n "}, {"sha": "79396b9ca4dab155cda150de99f7af64395c3a90", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -490,7 +490,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n \n       // otherwise, live nodes are not required:\n       hir::ExprIndex(..) | hir::ExprField(..) | hir::ExprTupField(..) |\n-      hir::ExprVec(..) | hir::ExprCall(..) | hir::ExprMethodCall(..) |\n+      hir::ExprArray(..) | hir::ExprCall(..) | hir::ExprMethodCall(..) |\n       hir::ExprTup(..) | hir::ExprBinary(..) | hir::ExprAddrOf(..) |\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprBreak(_) |\n       hir::ExprAgain(_) | hir::ExprLit(_) | hir::ExprRet(..) |\n@@ -1095,7 +1095,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           // Uninteresting cases: just propagate in rev exec order\n \n-          hir::ExprVec(ref exprs) => {\n+          hir::ExprArray(ref exprs) => {\n             self.propagate_through_exprs(&exprs[..], succ)\n           }\n \n@@ -1436,7 +1436,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       hir::ExprCall(..) | hir::ExprMethodCall(..) | hir::ExprIf(..) |\n       hir::ExprMatch(..) | hir::ExprWhile(..) | hir::ExprLoop(..) |\n       hir::ExprIndex(..) | hir::ExprField(..) | hir::ExprTupField(..) |\n-      hir::ExprVec(..) | hir::ExprTup(..) | hir::ExprBinary(..) |\n+      hir::ExprArray(..) | hir::ExprTup(..) | hir::ExprBinary(..) |\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprRet(..) |\n       hir::ExprBreak(..) | hir::ExprAgain(..) | hir::ExprLit(_) |\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |"}, {"sha": "c50e668a417946c59d12bc377ab43dce9c2bb88d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           hir::ExprClosure(..) | hir::ExprRet(..) |\n           hir::ExprUnary(..) |\n           hir::ExprMethodCall(..) | hir::ExprCast(..) |\n-          hir::ExprVec(..) | hir::ExprTup(..) | hir::ExprIf(..) |\n+          hir::ExprArray(..) | hir::ExprTup(..) | hir::ExprIf(..) |\n           hir::ExprBinary(..) | hir::ExprWhile(..) |\n           hir::ExprBlock(..) | hir::ExprLoop(..) | hir::ExprMatch(..) |\n           hir::ExprLit(..) | hir::ExprBreak(..) |\n@@ -1155,7 +1155,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             self.cat_pattern_(subcmt, &subpat, op)?;\n           }\n \n-          PatKind::Vec(ref before, ref slice, ref after) => {\n+          PatKind::Slice(ref before, ref slice, ref after) => {\n             let context = InteriorOffsetKind::Pattern;\n             let elt_cmt = self.cat_index(pat, cmt, context)?;\n             for before_pat in before {"}, {"sha": "90b6cbad3d9aea54849a66893debd7e0279bcae0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -961,7 +961,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n                 field_pats.iter().any(|fp| is_binding_pat(&fp.node.pat))\n             }\n \n-            PatKind::Vec(ref pats1, ref pats2, ref pats3) => {\n+            PatKind::Slice(ref pats1, ref pats2, ref pats3) => {\n                 pats1.iter().any(|p| is_binding_pat(&p)) ||\n                 pats2.iter().any(|p| is_binding_pat(&p)) ||\n                 pats3.iter().any(|p| is_binding_pat(&p))\n@@ -1012,7 +1012,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n                         visitor, &field.expr, blk_id);\n                 }\n             }\n-            hir::ExprVec(ref subexprs) |\n+            hir::ExprArray(ref subexprs) |\n             hir::ExprTup(ref subexprs) => {\n                 for subexpr in subexprs {\n                     record_rvalue_scope_if_borrow_expr("}, {"sha": "f11dc3740da666a2bd53b6474d0fc12a2134eed5", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -1024,7 +1024,7 @@ pub enum CastKind {\n \n #[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum AggregateKind<'tcx> {\n-    Vec,\n+    Array,\n     Tuple,\n     /// The second field is variant number (discriminant), it's equal to 0\n     /// for struct and union expressions. The fourth field is active field\n@@ -1115,8 +1115,6 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             }\n \n             Aggregate(ref kind, ref lvs) => {\n-                use self::AggregateKind::*;\n-\n                 fn fmt_tuple(fmt: &mut Formatter, lvs: &[Operand]) -> fmt::Result {\n                     let mut tuple_fmt = fmt.debug_tuple(\"\");\n                     for lv in lvs {\n@@ -1126,17 +1124,17 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 }\n \n                 match *kind {\n-                    Vec => write!(fmt, \"{:?}\", lvs),\n+                    AggregateKind::Array => write!(fmt, \"{:?}\", lvs),\n \n-                    Tuple => {\n+                    AggregateKind::Tuple => {\n                         match lvs.len() {\n                             0 => write!(fmt, \"()\"),\n                             1 => write!(fmt, \"({:?},)\", lvs[0]),\n                             _ => fmt_tuple(fmt, lvs),\n                         }\n                     }\n \n-                    Adt(adt_def, variant, substs, _) => {\n+                    AggregateKind::Adt(adt_def, variant, substs, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n                         ppaux::parameterized(fmt, substs, variant_def.did,\n@@ -1155,7 +1153,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }\n \n-                    Closure(def_id, _) => ty::tls::with(|tcx| {\n+                    AggregateKind::Closure(def_id, _) => ty::tls::with(|tcx| {\n                         if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n                             let name = format!(\"[closure@{:?}]\", tcx.map.span(node_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);"}, {"sha": "960d61adba72c3b7c8b4878505f6f73a0b0cea04", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -174,7 +174,7 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             &Rvalue::Aggregate(ref ak, ref ops) => {\n                 match *ak {\n-                    AggregateKind::Vec => {\n+                    AggregateKind::Array => {\n                         if let Some(operand) = ops.get(0) {\n                             let ty = operand.ty(mir, tcx);\n                             Some(tcx.mk_array(ty, ops.len()))"}, {"sha": "cb8d3f97f7b2963fc8541c8f73d274d82bb45e8c", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -513,7 +513,7 @@ macro_rules! make_mir_visitor {\n                     Rvalue::Aggregate(ref $($mutability)* kind,\n                                       ref $($mutability)* operands) => {\n                         match *kind {\n-                            AggregateKind::Vec => {\n+                            AggregateKind::Array => {\n                             }\n                             AggregateKind::Tuple => {\n                             }"}, {"sha": "9b345c2d02329b5f1f6ca1e7a3a7da130cdb01b8", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -33,28 +33,21 @@ pub enum TypeError<'tcx> {\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n-    BoxMutability,\n-    PtrMutability,\n-    RefMutability,\n-    VecMutability,\n     TupleSize(ExpectedFound<usize>),\n     FixedArraySize(ExpectedFound<usize>),\n-    TyParamSize(ExpectedFound<usize>),\n     ArgCount,\n     RegionsDoesNotOutlive(&'tcx Region, &'tcx Region),\n     RegionsNotSame(&'tcx Region, &'tcx Region),\n     RegionsNoOverlap(&'tcx Region, &'tcx Region),\n     RegionsInsufficientlyPolymorphic(BoundRegion, &'tcx Region),\n     RegionsOverlyPolymorphic(BoundRegion, &'tcx Region),\n     Sorts(ExpectedFound<Ty<'tcx>>),\n-    IntegerAsChar,\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n     FloatMismatch(ExpectedFound<ast::FloatTy>),\n     Traits(ExpectedFound<DefId>),\n     BuiltinBoundsMismatch(ExpectedFound<ty::BuiltinBounds>),\n     VariadicMismatch(ExpectedFound<bool>),\n     CyclicTy,\n-    ConvergenceMismatch(ExpectedFound<bool>),\n     ProjectionNameMismatched(ExpectedFound<Name>),\n     ProjectionBoundsLength(ExpectedFound<usize>),\n     TyParamDefaultMismatch(ExpectedFound<type_variable::Default<'tcx>>)\n@@ -99,18 +92,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        values.found)\n             }\n             Mutability => write!(f, \"types differ in mutability\"),\n-            BoxMutability => {\n-                write!(f, \"boxed types differ in mutability\")\n-            }\n-            VecMutability => write!(f, \"vectors differ in mutability\"),\n-            PtrMutability => write!(f, \"pointers differ in mutability\"),\n-            RefMutability => write!(f, \"references differ in mutability\"),\n-            TyParamSize(values) => {\n-                write!(f, \"expected a type with {} type params, \\\n-                           found one with {} type params\",\n-                       values.expected,\n-                       values.found)\n-            }\n             FixedArraySize(values) => {\n                 write!(f, \"expected an array with a fixed size of {} elements, \\\n                            found one with {} elements\",\n@@ -167,9 +148,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                            values.found)\n                 }\n             }\n-            IntegerAsChar => {\n-                write!(f, \"expected an integral type, found `char`\")\n-            }\n             IntMismatch(ref values) => {\n                 write!(f, \"expected `{:?}`, found `{:?}`\",\n                        values.expected,\n@@ -185,11 +163,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        if values.expected { \"variadic\" } else { \"non-variadic\" },\n                        if values.found { \"variadic\" } else { \"non-variadic\" })\n             }\n-            ConvergenceMismatch(ref values) => {\n-                write!(f, \"expected {} fn, found {} function\",\n-                       if values.expected { \"converging\" } else { \"diverging\" },\n-                       if values.found { \"converging\" } else { \"diverging\" })\n-            }\n             ProjectionNameMismatched(ref values) => {\n                 write!(f, \"expected {}, found {}\",\n                        values.expected,"}, {"sha": "befc9533c387b338747e386c4e876ab0ff19ec44", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -24,7 +24,7 @@ pub enum SimplifiedType {\n     FloatSimplifiedType(ast::FloatTy),\n     AdtSimplifiedType(DefId),\n     StrSimplifiedType,\n-    VecSimplifiedType,\n+    ArraySimplifiedType,\n     PtrSimplifiedType,\n     NeverSimplifiedType,\n     TupleSimplifiedType(usize),\n@@ -57,7 +57,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyFloat(float_type) => Some(FloatSimplifiedType(float_type)),\n         ty::TyAdt(def, _) => Some(AdtSimplifiedType(def.did)),\n         ty::TyStr => Some(StrSimplifiedType),\n-        ty::TyArray(..) | ty::TySlice(_) => Some(VecSimplifiedType),\n+        ty::TyArray(..) | ty::TySlice(_) => Some(ArraySimplifiedType),\n         ty::TyRawPtr(_) => Some(PtrSimplifiedType),\n         ty::TyTrait(ref trait_info) => {\n             Some(TraitSimplifiedType(trait_info.principal.def_id()))"}, {"sha": "cc13299d4347585a8ce6f480e0951c1be6c963e6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -2228,7 +2228,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprClosure(..) |\n             hir::ExprBlock(..) |\n             hir::ExprRepeat(..) |\n-            hir::ExprVec(..) |\n+            hir::ExprArray(..) |\n             hir::ExprBreak(..) |\n             hir::ExprAgain(..) |\n             hir::ExprRet(..) |"}, {"sha": "abd5cb51f39baa795d2a4cb2d265ce80926a96d2", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -296,13 +296,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             UnsafetyMismatch(x) => UnsafetyMismatch(x),\n             AbiMismatch(x) => AbiMismatch(x),\n             Mutability => Mutability,\n-            BoxMutability => BoxMutability,\n-            PtrMutability => PtrMutability,\n-            RefMutability => RefMutability,\n-            VecMutability => VecMutability,\n             TupleSize(x) => TupleSize(x),\n             FixedArraySize(x) => FixedArraySize(x),\n-            TyParamSize(x) => TyParamSize(x),\n             ArgCount => ArgCount,\n             RegionsDoesNotOutlive(a, b) => {\n                 return tcx.lift(&(a, b)).map(|(a, b)| RegionsDoesNotOutlive(a, b))\n@@ -319,14 +314,12 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             RegionsOverlyPolymorphic(a, b) => {\n                 return tcx.lift(&b).map(|b| RegionsOverlyPolymorphic(a, b))\n             }\n-            IntegerAsChar => IntegerAsChar,\n             IntMismatch(x) => IntMismatch(x),\n             FloatMismatch(x) => FloatMismatch(x),\n             Traits(x) => Traits(x),\n             BuiltinBoundsMismatch(x) => BuiltinBoundsMismatch(x),\n             VariadicMismatch(x) => VariadicMismatch(x),\n             CyclicTy => CyclicTy,\n-            ConvergenceMismatch(x) => ConvergenceMismatch(x),\n             ProjectionNameMismatched(x) => ProjectionNameMismatched(x),\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n "}, {"sha": "5178ef65cf6a46ef356ff767996872483973688c", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -536,10 +536,10 @@ impl<'a, 'tcx> StaticInliner<'a, 'tcx> {\n                 }\n                 PatKind::Box(inner) => PatKind::Box(self.fold_pat(inner)),\n                 PatKind::Ref(inner, mutbl) => PatKind::Ref(self.fold_pat(inner), mutbl),\n-                PatKind::Vec(before, slice, after) => {\n-                    PatKind::Vec(before.move_map(|x| self.fold_pat(x)),\n-                                 slice.map(|x| self.fold_pat(x)),\n-                                 after.move_map(|x| self.fold_pat(x)))\n+                PatKind::Slice(before, slice, after) => {\n+                    PatKind::Slice(before.move_map(|x| self.fold_pat(x)),\n+                                   slice.map(|x| self.fold_pat(x)),\n+                                   after.move_map(|x| self.fold_pat(x)))\n                 }\n                 PatKind::Wild |\n                 PatKind::Lit(_) |\n@@ -610,14 +610,14 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n         ty::TySlice(_) => match ctor {\n             &Slice(n) => {\n                 assert_eq!(pats_len, n);\n-                PatKind::Vec(pats.collect(), None, hir::HirVec::new())\n+                PatKind::Slice(pats.collect(), None, hir::HirVec::new())\n             },\n             _ => unreachable!()\n         },\n \n         ty::TyArray(_, len) => {\n             assert_eq!(pats_len, len);\n-            PatKind::Vec(pats.collect(), None, hir::HirVec::new())\n+            PatKind::Slice(pats.collect(), None, hir::HirVec::new())\n         }\n \n         _ => {\n@@ -713,7 +713,7 @@ fn is_useful<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,\n     };\n \n     let max_slice_length = rows.iter().filter_map(|row| match row[0].0.node {\n-        PatKind::Vec(ref before, _, ref after) => Some(before.len() + after.len()),\n+        PatKind::Slice(ref before, _, ref after) => Some(before.len() + after.len()),\n         _ => None\n     }).max().map_or(0, |v| v + 1);\n \n@@ -812,7 +812,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n             vec![ConstantValue(eval_const_expr(cx.tcx, &expr))],\n         PatKind::Range(ref lo, ref hi) =>\n             vec![ConstantRange(eval_const_expr(cx.tcx, &lo), eval_const_expr(cx.tcx, &hi))],\n-        PatKind::Vec(ref before, ref slice, ref after) =>\n+        PatKind::Slice(ref before, ref slice, ref after) =>\n             match left_ty.sty {\n                 ty::TyArray(..) => vec![Single],\n                 ty::TySlice(_) if slice.is_some() => {\n@@ -1001,7 +1001,7 @@ pub fn specialize<'a, 'b, 'tcx>(\n             }\n         }\n \n-        PatKind::Vec(ref before, ref slice, ref after) => {\n+        PatKind::Slice(ref before, ref slice, ref after) => {\n             let pat_len = before.len() + after.len();\n             match *constructor {\n                 Single => {"}, {"sha": "3bf936dc9960c26e206a5bcbc9e1320f98107008", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -317,11 +317,11 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             PatKind::Struct(path.clone(), field_pats, false)\n         }\n \n-        hir::ExprVec(ref exprs) => {\n+        hir::ExprArray(ref exprs) => {\n             let pats = exprs.iter()\n                             .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n                             .collect::<Result<_, _>>()?;\n-            PatKind::Vec(pats, None, hir::HirVec::new())\n+            PatKind::Slice(pats, None, hir::HirVec::new())\n         }\n \n         hir::ExprPath(_, ref path) => {\n@@ -898,7 +898,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Array(_, n) if idx >= n => {\n                 signal!(e, IndexOutOfBounds { len: n, index: idx })\n             }\n-            Array(v, n) => if let hir::ExprVec(ref v) = tcx.map.expect_expr(v).node {\n+            Array(v, n) => if let hir::ExprArray(ref v) = tcx.map.expect_expr(v).node {\n                 assert_eq!(n as usize as u64, n);\n                 eval_const_expr_partial(tcx, &v[idx as usize], ty_hint, fn_args)?\n             } else {\n@@ -925,7 +925,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             _ => signal!(e, IndexedNonVec),\n         }\n       }\n-      hir::ExprVec(ref v) => Array(e.id, v.len() as u64),\n+      hir::ExprArray(ref v) => Array(e.id, v.len() as u64),\n       hir::ExprRepeat(_, ref n) => {\n           let len_hint = ty_hint.checked_or(tcx.types.usize);\n           Repeat("}, {"sha": "d0ae83a9826c25fbe35b2447011c1da2ed9e419f", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -207,7 +207,7 @@ enum SawExprComponent<'a> {\n     SawExprAgain(Option<token::InternedString>),\n \n     SawExprBox,\n-    SawExprVec,\n+    SawExprArray,\n     SawExprCall,\n     SawExprMethodCall,\n     SawExprTup,\n@@ -235,7 +235,7 @@ enum SawExprComponent<'a> {\n fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n     match *node {\n         ExprBox(..)              => SawExprBox,\n-        ExprVec(..)              => SawExprVec,\n+        ExprArray(..)            => SawExprArray,\n         ExprCall(..)             => SawExprCall,\n         ExprMethodCall(..)       => SawExprMethodCall,\n         ExprTup(..)              => SawExprTup,"}, {"sha": "2123235ddc1d887f7417d8f26e32c8aebe64ea0f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -160,7 +160,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                           .map(|f| unpack!(block = this.as_operand(block, f)))\n                           .collect();\n \n-                block.and(Rvalue::Aggregate(AggregateKind::Vec, fields))\n+                block.and(Rvalue::Aggregate(AggregateKind::Array, fields))\n             }\n             ExprKind::Tuple { fields } => { // see (*) above\n                 // first process the set of fields"}, {"sha": "2840538ae5b4f473feca3ec31e11bccb692b3cbd", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -613,7 +613,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 value: value.to_ref(),\n                 value_extents: cx.tcx.region_maps.node_extent(value.id)\n             },\n-        hir::ExprVec(ref fields) =>\n+        hir::ExprArray(ref fields) =>\n             ExprKind::Vec { fields: fields.to_ref() },\n         hir::ExprTup(ref fields) =>\n             ExprKind::Tuple { fields: fields.to_ref() },"}, {"sha": "8751b1dc03aabd7780d2baf08b2a0a3641529c68", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -113,7 +113,7 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n                 PatternKind::Deref { subpattern: self.to_pattern(subpattern) }\n             }\n \n-            PatKind::Vec(ref prefix, ref slice, ref suffix) => {\n+            PatKind::Slice(ref prefix, ref slice, ref suffix) => {\n                 let ty = self.cx.tcx.node_id_to_type(pat.id);\n                 match ty.sty {\n                     ty::TyRef(_, mt) =>"}, {"sha": "2dcefcc12f6e5e3b3374773f561309f30c4ca9a7", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n \n     // Array lengths, i.e. [T; constant].\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        if let hir::TyFixedLengthVec(_, ref length) = ty.node {\n+        if let hir::TyArray(_, ref length) = ty.node {\n             self.build_const_integer(length);\n         }\n         intravisit::walk_ty(self, ty);"}, {"sha": "1b86c84a057026f324769d04ee6405a3d06962a3", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -602,7 +602,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         hir::ExprIndex(..) |\n         hir::ExprField(..) |\n         hir::ExprTupField(..) |\n-        hir::ExprVec(_) |\n+        hir::ExprArray(_) |\n         hir::ExprType(..) |\n         hir::ExprTup(..) => {}\n "}, {"sha": "76b63512bdbd02870f1de5db2d0e2ae8ee7bffed", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -569,7 +569,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 }\n \n                 match *kind {\n-                    mir::AggregateKind::Vec => {\n+                    mir::AggregateKind::Array => {\n                         self.const_array(dest_ty, &fields)\n                     }\n                     mir::AggregateKind::Adt(..) |"}, {"sha": "2f6fe8d77d2148ec6b300ebb713ffd48b5693c97", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -1623,7 +1623,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         let result_ty = match ast_ty.node {\n-            hir::TyVec(ref ty) => {\n+            hir::TySlice(ref ty) => {\n                 tcx.mk_slice(self.ast_ty_to_ty(rscope, &ty))\n             }\n             hir::TyObjectSum(ref ty, ref bounds) => {\n@@ -1758,7 +1758,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n                 ty\n             }\n-            hir::TyFixedLengthVec(ref ty, ref e) => {\n+            hir::TyArray(ref ty, ref e) => {\n                 if let Ok(length) = eval_length(tcx.global_tcx(), &e, \"array length\") {\n                     tcx.mk_array(self.ast_ty_to_ty(rscope, &ty), length)\n                 } else {"}, {"sha": "99d1da77018ad26ecec59cdc6713fce19d4309e4", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.types.err\n                 }\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::TyArray(inner_ty, size) => {"}, {"sha": "2ac2dab999bb0470d0ee7111a76a87d6b82ebd7a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -450,7 +450,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n \n     fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n         match t.node {\n-            hir::TyFixedLengthVec(_, ref expr) => {\n+            hir::TyArray(_, ref expr) => {\n                 check_const_with_type(self.ccx, &expr, self.ccx.tcx.types.usize, expr.id);\n             }\n             _ => {}\n@@ -626,7 +626,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n     // need to record the type for that node\n     fn visit_ty(&mut self, t: &'gcx hir::Ty) {\n         match t.node {\n-            hir::TyFixedLengthVec(ref ty, ref count_expr) => {\n+            hir::TyArray(ref ty, ref count_expr) => {\n                 self.visit_ty(&ty);\n                 self.fcx.check_expr_with_hint(&count_expr, self.fcx.tcx.types.usize);\n             }\n@@ -3590,7 +3590,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               self.check_method_call(expr, name, &args[..], &tps[..], expected, lvalue_pref)\n           }\n           hir::ExprCast(ref e, ref t) => {\n-            if let hir::TyFixedLengthVec(_, ref count_expr) = t.node {\n+            if let hir::TyArray(_, ref count_expr) = t.node {\n                 self.check_expr_with_hint(&count_expr, tcx.types.usize);\n             }\n \n@@ -3623,7 +3623,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.check_expr_eq_type(&e, typ);\n             typ\n           }\n-          hir::ExprVec(ref args) => {\n+          hir::ExprArray(ref args) => {\n             let uty = expected.to_option(self).and_then(|uty| {\n                 match uty.sty {\n                     ty::TyArray(ty, _) | ty::TySlice(ty) => Some(ty),"}, {"sha": "8685f703a599c8888f7becf687f9091f53d364e8", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -247,7 +247,7 @@ impl<'cx, 'gcx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn visit_ty(&mut self, t: &hir::Ty) {\n         match t.node {\n-            hir::TyFixedLengthVec(ref ty, ref count_expr) => {\n+            hir::TyArray(ref ty, ref count_expr) => {\n                 self.visit_ty(&ty);\n                 write_ty_to_tcx(self.fcx.ccx, count_expr.id, self.tcx().types.usize);\n             }"}, {"sha": "af482a940bc14421f902fca33c5ef48f50b44cf6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -1646,8 +1646,8 @@ impl Clean<Type> for hir::Ty {\n             TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(cx), mutability: m.mutbl.clean(cx),\n                              type_: box m.ty.clean(cx)},\n-            TyVec(ref ty) => Vector(box ty.clean(cx)),\n-            TyFixedLengthVec(ref ty, ref e) => {\n+            TySlice(ref ty) => Vector(box ty.clean(cx)),\n+            TyArray(ref ty, ref e) => {\n                 let n = if let Some(tcx) = cx.tcx_opt() {\n                     use rustc_const_math::{ConstInt, ConstUsize};\n                     use rustc_const_eval::eval_const_expr;\n@@ -2699,7 +2699,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n         },\n         PatKind::Range(..) => panic!(\"tried to get argument name from PatKind::Range, \\\n                               which is not allowed in function arguments\"),\n-        PatKind::Vec(ref begin, ref mid, ref end) => {\n+        PatKind::Slice(ref begin, ref mid, ref end) => {\n             let begin = begin.iter().map(|p| name_from_pat(&**p));\n             let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n             let end = end.iter().map(|p| name_from_pat(&**p));"}, {"sha": "fcf2d32ded960aab2c61ccf47baf3ce785a8f91d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -121,6 +121,7 @@ impl fmt::Debug for Lifetime {\n /// A lifetime definition, e.g. `'a: 'b+'c+'d`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct LifetimeDef {\n+    pub attrs: ThinVec<Attribute>,\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n }\n@@ -370,6 +371,7 @@ pub type TyParamBounds = P<[TyParamBound]>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n+    pub attrs: ThinVec<Attribute>,\n     pub ident: Ident,\n     pub id: NodeId,\n     pub bounds: TyParamBounds,\n@@ -593,7 +595,7 @@ impl Pat {\n             PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n                 s.walk(it)\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 before.iter().all(|p| p.walk(it)) &&\n                 slice.iter().all(|p| p.walk(it)) &&\n                 after.iter().all(|p| p.walk(it))\n@@ -669,8 +671,8 @@ pub enum PatKind {\n     /// A range pattern, e.g. `1...2`\n     Range(P<Expr>, P<Expr>),\n     /// `[a, b, ..i, y, z]` is represented as:\n-    ///     `PatKind::Vec(box [a, b], Some(i), box [y, z])`\n-    Vec(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n+    ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n+    Slice(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n     /// A macro pattern; pre-expansion\n     Mac(Mac),\n }\n@@ -1431,10 +1433,10 @@ pub struct BareFnTy {\n /// The different kinds of types recognized by the compiler\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TyKind {\n-    /// A variable-length array (`[T]`)\n-    Vec(P<Ty>),\n+    /// A variable-length slice (`[T]`)\n+    Slice(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n-    FixedLengthVec(P<Ty>, P<Expr>),\n+    Array(P<Ty>, P<Expr>),\n     /// A raw pointer (`*const T` or `*mut T`)\n     Ptr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`)"}, {"sha": "81c8e0bdb8262c082835f9713470b87eebd880e4", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -215,7 +215,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n \n     let ty = ecx.ty(\n         span,\n-        ast::TyKind::FixedLengthVec(\n+        ast::TyKind::Array(\n             ecx.ty(\n                 span,\n                 ast::TyKind::Tup(vec![ty_str.clone(), ty_str])"}, {"sha": "bdbc45471bba29c115693a563cb9c29db8da5294", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -73,6 +73,7 @@ pub trait AstBuilder {\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n+               attrs: Vec<ast::Attribute>,\n                bounds: ast::TyParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::TyParam;\n \n@@ -83,6 +84,7 @@ pub trait AstBuilder {\n     fn lifetime_def(&self,\n                     span: Span,\n                     name: ast::Name,\n+                    attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n                     -> ast::LifetimeDef;\n \n@@ -96,7 +98,7 @@ pub trait AstBuilder {\n                       ident: ast::Ident,\n                       typ: P<ast::Ty>,\n                       ex: P<ast::Expr>)\n-                      -> P<ast::Stmt>;\n+                      -> ast::Stmt;\n     fn stmt_let_type_only(&self, span: Span, ty: P<ast::Ty>) -> ast::Stmt;\n     fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> ast::Stmt;\n \n@@ -452,11 +454,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n+               attrs: Vec<ast::Attribute>,\n                bounds: ast::TyParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::TyParam {\n         ast::TyParam {\n             ident: id,\n             id: ast::DUMMY_NODE_ID,\n+            attrs: attrs.into(),\n             bounds: bounds,\n             default: default,\n             span: span\n@@ -503,9 +507,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn lifetime_def(&self,\n                     span: Span,\n                     name: ast::Name,\n+                    attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n                     -> ast::LifetimeDef {\n         ast::LifetimeDef {\n+            attrs: attrs.into(),\n             lifetime: self.lifetime(span, name),\n             bounds: bounds\n         }\n@@ -556,7 +562,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                       ident: ast::Ident,\n                       typ: P<ast::Ty>,\n                       ex: P<ast::Expr>)\n-                      -> P<ast::Stmt> {\n+                      -> ast::Stmt {\n         let pat = if mutbl {\n             let binding_mode = ast::BindingMode::ByValue(ast::Mutability::Mutable);\n             self.pat_ident_binding_mode(sp, ident, binding_mode)\n@@ -571,11 +577,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             span: sp,\n             attrs: ast::ThinVec::new(),\n         });\n-        P(ast::Stmt {\n+        ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             node: ast::StmtKind::Local(local),\n             span: sp,\n-        })\n+        }\n     }\n \n     // Generate `let _: Type;`, usually used for type assertions."}, {"sha": "079d7175822cc9f7d4afc401d50ac84fc36faba8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -303,6 +303,9 @@ declare_features! (\n     // Used to identify the `compiler_builtins` crate\n     // rustc internal\n     (active, compiler_builtins, \"1.13.0\", None),\n+\n+    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n+    (active, generic_param_attrs, \"1.11.0\", Some(34761)),\n );\n \n declare_features! (\n@@ -1082,14 +1085,14 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n \n     fn visit_pat(&mut self, pattern: &ast::Pat) {\n         match pattern.node {\n-            PatKind::Vec(_, Some(_), ref last) if !last.is_empty() => {\n+            PatKind::Slice(_, Some(_), ref last) if !last.is_empty() => {\n                 gate_feature_post!(&self, advanced_slice_patterns,\n                                   pattern.span,\n                                   \"multiple-element slice matches anywhere \\\n                                    but at the end of a slice (e.g. \\\n                                    `[0, ..xs, 0]`) are experimental\")\n             }\n-            PatKind::Vec(..) => {\n+            PatKind::Slice(..) => {\n                 gate_feature_post!(&self, slice_patterns,\n                                   pattern.span,\n                                   \"slice pattern syntax is experimental\");\n@@ -1220,6 +1223,24 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n \n         visit::walk_vis(self, vis)\n     }\n+\n+    fn visit_generics(&mut self, g: &ast::Generics) {\n+        for t in &g.ty_params {\n+            if !t.attrs.is_empty() {\n+                gate_feature_post!(&self, generic_param_attrs, t.attrs[0].span,\n+                                   \"attributes on type parameter bindings are experimental\");\n+            }\n+        }\n+        visit::walk_generics(self, g)\n+    }\n+\n+    fn visit_lifetime_def(&mut self, lifetime_def: &ast::LifetimeDef) {\n+        if !lifetime_def.attrs.is_empty() {\n+            gate_feature_post!(&self, generic_param_attrs, lifetime_def.attrs[0].span,\n+                               \"attributes on lifetime bindings are experimental\");\n+        }\n+        visit::walk_lifetime_def(self, lifetime_def)\n+    }\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> Features {"}, {"sha": "08c0637b2d90255f666d7d0293966ff7c6c5e660", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -356,7 +356,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n         id: fld.new_id(id),\n         node: match node {\n             TyKind::Infer | TyKind::ImplicitSelf => node,\n-            TyKind::Vec(ty) => TyKind::Vec(fld.fold_ty(ty)),\n+            TyKind::Slice(ty) => TyKind::Slice(fld.fold_ty(ty)),\n             TyKind::Ptr(mt) => TyKind::Ptr(fld.fold_mt(mt)),\n             TyKind::Rptr(region, mt) => {\n                 TyKind::Rptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n@@ -385,8 +385,8 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 TyKind::ObjectSum(fld.fold_ty(ty),\n                             fld.fold_bounds(bounds))\n             }\n-            TyKind::FixedLengthVec(ty, e) => {\n-                TyKind::FixedLengthVec(fld.fold_ty(ty), fld.fold_expr(e))\n+            TyKind::Array(ty, e) => {\n+                TyKind::Array(fld.fold_ty(ty), fld.fold_expr(e))\n             }\n             TyKind::Typeof(expr) => {\n                 TyKind::Typeof(fld.fold_expr(expr))\n@@ -662,8 +662,13 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n }\n \n pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n-    let TyParam {id, ident, bounds, default, span} = tp;\n+    let TyParam {attrs, id, ident, bounds, default, span} = tp;\n+    let attrs: Vec<_> = attrs.into();\n     TyParam {\n+        attrs: attrs.into_iter()\n+            .flat_map(|x| fld.fold_attribute(x).into_iter())\n+            .collect::<Vec<_>>()\n+            .into(),\n         id: fld.new_id(id),\n         ident: ident,\n         bounds: fld.fold_bounds(bounds),\n@@ -687,7 +692,12 @@ pub fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime {\n \n pub fn noop_fold_lifetime_def<T: Folder>(l: LifetimeDef, fld: &mut T)\n                                          -> LifetimeDef {\n+    let attrs: Vec<_> = l.attrs.into();\n     LifetimeDef {\n+        attrs: attrs.into_iter()\n+            .flat_map(|x| fld.fold_attribute(x).into_iter())\n+            .collect::<Vec<_>>()\n+            .into(),\n         lifetime: fld.fold_lifetime(l.lifetime),\n         bounds: fld.fold_lifetimes(l.bounds),\n     }\n@@ -1092,8 +1102,8 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             PatKind::Range(e1, e2) => {\n                 PatKind::Range(folder.fold_expr(e1), folder.fold_expr(e2))\n             },\n-            PatKind::Vec(before, slice, after) => {\n-                PatKind::Vec(before.move_map(|x| folder.fold_pat(x)),\n+            PatKind::Slice(before, slice, after) => {\n+                PatKind::Slice(before.move_map(|x| folder.fold_pat(x)),\n                        slice.map(|x| folder.fold_pat(x)),\n                        after.move_map(|x| folder.fold_pat(x)))\n             }"}, {"sha": "9b6002b2469f2991411f4457295bf10aa79c70cc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -1179,7 +1179,7 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n \n         let (name, node) = if self.eat_keyword(keywords::Type) {\n-            let TyParam {ident, bounds, default, ..} = self.parse_ty_param()?;\n+            let TyParam {ident, bounds, default, ..} = self.parse_ty_param(vec![])?;\n             self.expect(&token::Semi)?;\n             (ident, TraitItemKind::Type(bounds, default))\n         } else if self.is_const_item() {\n@@ -1386,8 +1386,8 @@ impl<'a> Parser<'a> {\n             // Parse the `; e` in `[ i32; e ]`\n             // where `e` is a const expression\n             let t = match self.maybe_parse_fixed_length_of_vec()? {\n-                None => TyKind::Vec(t),\n-                Some(suffix) => TyKind::FixedLengthVec(t, suffix)\n+                None => TyKind::Slice(t),\n+                Some(suffix) => TyKind::Array(t, suffix)\n             };\n             self.expect(&token::CloseDelim(token::Bracket))?;\n             t\n@@ -1910,10 +1910,22 @@ impl<'a> Parser<'a> {\n \n     /// Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\n     /// lifetime [':' lifetimes]`\n-    pub fn parse_lifetime_defs(&mut self) -> PResult<'a, Vec<ast::LifetimeDef>> {\n-\n+    ///\n+    /// If `followed_by_ty_params` is None, then we are in a context\n+    /// where only lifetime parameters are allowed, and thus we should\n+    /// error if we encounter attributes after the bound lifetimes.\n+    ///\n+    /// If `followed_by_ty_params` is Some(r), then there may be type\n+    /// parameter bindings after the lifetimes, so we should pass\n+    /// along the parsed attributes to be attached to the first such\n+    /// type parmeter.\n+    pub fn parse_lifetime_defs(&mut self,\n+                               followed_by_ty_params: Option<&mut Vec<ast::Attribute>>)\n+                               -> PResult<'a, Vec<ast::LifetimeDef>>\n+    {\n         let mut res = Vec::new();\n         loop {\n+            let attrs = self.parse_outer_attributes()?;\n             match self.token {\n                 token::Lifetime(_) => {\n                     let lifetime = self.parse_lifetime()?;\n@@ -1923,11 +1935,20 @@ impl<'a> Parser<'a> {\n                         } else {\n                             Vec::new()\n                         };\n-                    res.push(ast::LifetimeDef { lifetime: lifetime,\n+                    res.push(ast::LifetimeDef { attrs: attrs.into(),\n+                                                lifetime: lifetime,\n                                                 bounds: bounds });\n                 }\n \n                 _ => {\n+                    if let Some(recv) = followed_by_ty_params {\n+                        assert!(recv.is_empty());\n+                        *recv = attrs;\n+                    } else {\n+                        let msg = \"trailing attribute after lifetime parameters\";\n+                        return Err(self.fatal(msg));\n+                    }\n+                    debug!(\"parse_lifetime_defs ret {:?}\", res);\n                     return Ok(res);\n                 }\n             }\n@@ -3587,7 +3608,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let (before, slice, after) = self.parse_pat_vec_elements()?;\n                 self.expect(&token::CloseDelim(token::Bracket))?;\n-                pat = PatKind::Vec(before, slice, after);\n+                pat = PatKind::Slice(before, slice, after);\n             }\n             // At this point, token != _, &, &&, (, [\n             _ => if self.eat_keyword(keywords::Mut) {\n@@ -4228,7 +4249,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Matches typaram = IDENT (`?` unbound)? optbounds ( EQ ty )?\n-    fn parse_ty_param(&mut self) -> PResult<'a, TyParam> {\n+    fn parse_ty_param(&mut self, preceding_attrs: Vec<ast::Attribute>) -> PResult<'a, TyParam> {\n         let span = self.span;\n         let ident = self.parse_ident()?;\n \n@@ -4242,6 +4263,7 @@ impl<'a> Parser<'a> {\n         };\n \n         Ok(TyParam {\n+            attrs: preceding_attrs.into(),\n             ident: ident,\n             id: ast::DUMMY_NODE_ID,\n             bounds: bounds,\n@@ -4262,11 +4284,27 @@ impl<'a> Parser<'a> {\n         let span_lo = self.span.lo;\n \n         if self.eat(&token::Lt) {\n-            let lifetime_defs = self.parse_lifetime_defs()?;\n+            // Upon encountering attribute in generics list, we do not\n+            // know if it is attached to lifetime or to type param.\n+            //\n+            // Solution: 1. eagerly parse attributes in tandem with\n+            // lifetime defs, 2. store last set of parsed (and unused)\n+            // attributes in `attrs`, and 3. pass in those attributes\n+            // when parsing formal type param after lifetime defs.\n+            let mut attrs = vec![];\n+            let lifetime_defs = self.parse_lifetime_defs(Some(&mut attrs))?;\n             let mut seen_default = false;\n+            let mut post_lifetime_attrs = Some(attrs);\n             let ty_params = self.parse_seq_to_gt(Some(token::Comma), |p| {\n                 p.forbid_lifetime()?;\n-                let ty_param = p.parse_ty_param()?;\n+                // Move out of `post_lifetime_attrs` if present. O/w\n+                // not first type param: parse attributes anew.\n+                let attrs = match post_lifetime_attrs.as_mut() {\n+                    None => p.parse_outer_attributes()?,\n+                    Some(attrs) => mem::replace(attrs, vec![]),\n+                };\n+                post_lifetime_attrs = None;\n+                let ty_param = p.parse_ty_param(attrs)?;\n                 if ty_param.default.is_some() {\n                     seen_default = true;\n                 } else if seen_default {\n@@ -4276,6 +4314,12 @@ impl<'a> Parser<'a> {\n                 }\n                 Ok(ty_param)\n             })?;\n+            if let Some(attrs) = post_lifetime_attrs {\n+                if !attrs.is_empty() {\n+                    self.span_err(attrs[0].span,\n+                                  \"trailing attribute after lifetime parameters\");\n+                }\n+            }\n             Ok(ast::Generics {\n                 lifetimes: lifetime_defs,\n                 ty_params: ty_params,\n@@ -4423,7 +4467,7 @@ impl<'a> Parser<'a> {\n                     let bound_lifetimes = if self.eat_keyword(keywords::For) {\n                         // Higher ranked constraint.\n                         self.expect(&token::Lt)?;\n-                        let lifetime_defs = self.parse_lifetime_defs()?;\n+                        let lifetime_defs = self.parse_lifetime_defs(None)?;\n                         self.expect_gt()?;\n                         lifetime_defs\n                     } else {\n@@ -4991,7 +5035,7 @@ impl<'a> Parser<'a> {\n     fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<ast::LifetimeDef>> {\n         if self.eat_keyword(keywords::For) {\n             self.expect(&token::Lt)?;\n-            let lifetime_defs = self.parse_lifetime_defs()?;\n+            let lifetime_defs = self.parse_lifetime_defs(None)?;\n             self.expect_gt()?;\n             Ok(lifetime_defs)\n         } else {"}, {"sha": "3c106970232cdb4dbf39e516d9db32544fbd5dec", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -972,7 +972,7 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ty.span.lo));\n         try!(self.ibox(0));\n         match ty.node {\n-            ast::TyKind::Vec(ref ty) => {\n+            ast::TyKind::Slice(ref ty) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&ty));\n                 try!(word(&mut self.s, \"]\"));\n@@ -1039,7 +1039,7 @@ impl<'a> State<'a> {\n             ast::TyKind::ImplTrait(ref bounds) => {\n                 try!(self.print_bounds(\"impl \", &bounds[..]));\n             }\n-            ast::TyKind::FixedLengthVec(ref ty, ref v) => {\n+            ast::TyKind::Array(ref ty, ref v) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&ty));\n                 try!(word(&mut self.s, \"; \"));\n@@ -2573,7 +2573,7 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"...\"));\n                 try!(self.print_expr(&end));\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.commasep(Inconsistent,\n                                    &before[..],"}, {"sha": "8faad77859e18d7cd1d5a4688ae91850b33ef670", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -572,7 +572,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     let static_lt = ecx.lifetime(sp, keywords::StaticLifetime.name());\n     // &'static [self::test::TestDescAndFn]\n     let static_type = ecx.ty_rptr(sp,\n-                                  ecx.ty(sp, ast::TyKind::Vec(struct_type)),\n+                                  ecx.ty(sp, ast::TyKind::Slice(struct_type)),\n                                   Some(static_lt),\n                                   ast::Mutability::Immutable);\n     // static TESTS: $static_type = &[...];"}, {"sha": "7fb3e5c6bee1d719d5b68267d25aa9f693afbff2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -201,6 +201,7 @@ pub fn walk_lifetime<V: Visitor>(visitor: &mut V, lifetime: &Lifetime) {\n pub fn walk_lifetime_def<V: Visitor>(visitor: &mut V, lifetime_def: &LifetimeDef) {\n     visitor.visit_lifetime(&lifetime_def.lifetime);\n     walk_list!(visitor, visit_lifetime, &lifetime_def.bounds);\n+    walk_list!(visitor, visit_attribute, &*lifetime_def.attrs);\n }\n \n pub fn walk_poly_trait_ref<V>(visitor: &mut V, trait_ref: &PolyTraitRef, _: &TraitBoundModifier)\n@@ -313,7 +314,7 @@ pub fn walk_variant<V>(visitor: &mut V, variant: &Variant, generics: &Generics,\n \n pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n     match typ.node {\n-        TyKind::Vec(ref ty) | TyKind::Paren(ref ty) => {\n+        TyKind::Slice(ref ty) | TyKind::Paren(ref ty) => {\n             visitor.visit_ty(ty)\n         }\n         TyKind::Ptr(ref mutable_type) => {\n@@ -341,7 +342,7 @@ pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n-        TyKind::FixedLengthVec(ref ty, ref expression) => {\n+        TyKind::Array(ref ty, ref expression) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expression)\n         }\n@@ -434,7 +435,7 @@ pub fn walk_pat<V: Visitor>(visitor: &mut V, pattern: &Pat) {\n             visitor.visit_expr(upper_bound)\n         }\n         PatKind::Wild => (),\n-        PatKind::Vec(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n+        PatKind::Slice(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n             walk_list!(visitor, visit_pat, prepatterns);\n             walk_list!(visitor, visit_pat, slice_pattern);\n             walk_list!(visitor, visit_pat, postpatterns);\n@@ -474,6 +475,7 @@ pub fn walk_generics<V: Visitor>(visitor: &mut V, generics: &Generics) {\n         visitor.visit_ident(param.span, param.ident);\n         walk_list!(visitor, visit_ty_param_bound, &param.bounds);\n         walk_list!(visitor, visit_ty, &param.default);\n+        walk_list!(visitor, visit_attribute, &*param.attrs);\n     }\n     walk_list!(visitor, visit_lifetime_def, &generics.lifetimes);\n     for predicate in &generics.where_clause.predicates {"}, {"sha": "bc47d8f4e613741977ac0dc0a52c3b78acd40aed", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -536,7 +536,7 @@ impl<'a> TraitDef<'a> {\n                 bounds.push((*declared_bound).clone());\n             }\n \n-            cx.typaram(self.span, ty_param.ident, P::from_vec(bounds), None)\n+            cx.typaram(self.span, ty_param.ident, vec![], P::from_vec(bounds), None)\n         }));\n \n         // and similarly for where clauses"}, {"sha": "4749d082bc0ec3dcd0723e57a000862ed3e866f7", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -194,6 +194,7 @@ impl<'a> Ty<'a> {\n fn mk_ty_param(cx: &ExtCtxt,\n                span: Span,\n                name: &str,\n+               attrs: &[ast::Attribute],\n                bounds: &[Path],\n                self_ident: Ident,\n                self_generics: &Generics)\n@@ -204,7 +205,7 @@ fn mk_ty_param(cx: &ExtCtxt,\n             cx.typarambound(path)\n         })\n         .collect();\n-    cx.typaram(span, cx.ident_of(name), bounds, None)\n+    cx.typaram(span, cx.ident_of(name), attrs.to_owned(), bounds, None)\n }\n \n fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, span: Span)\n@@ -246,15 +247,15 @@ impl<'a> LifetimeBounds<'a> {\n                 let bounds = bounds.iter()\n                     .map(|b| cx.lifetime(span, cx.ident_of(*b).name))\n                     .collect();\n-                cx.lifetime_def(span, cx.ident_of(*lt).name, bounds)\n+                cx.lifetime_def(span, cx.ident_of(*lt).name, vec![], bounds)\n             })\n             .collect();\n         let ty_params = self.bounds\n             .iter()\n             .map(|t| {\n                 match *t {\n                     (ref name, ref bounds) => {\n-                        mk_ty_param(cx, span, *name, bounds, self_ty, self_generics)\n+                        mk_ty_param(cx, span, *name, &[], bounds, self_ty, self_generics)\n                     }\n                 }\n             })"}, {"sha": "de78f859f0f616d7f155df7e5e42a4d6d58c2e74", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -506,7 +506,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     -> P<ast::Expr> {\n         let sp = piece_ty.span;\n         let ty = ecx.ty_rptr(sp,\n-                             ecx.ty(sp, ast::TyKind::Vec(piece_ty)),\n+                             ecx.ty(sp, ast::TyKind::Slice(piece_ty)),\n                              Some(ecx.lifetime(sp, keywords::StaticLifetime.name())),\n                              ast::Mutability::Immutable);\n         let slice = ecx.expr_vec_slice(sp, pieces);"}, {"sha": "c902cfdd756df839d288ac406290b2a1f7332cec", "filename": "src/test/compile-fail/attr-on-generic-formals-are-visited.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures that attributes on formals in generic parameter\n+// lists are included when we are checking for unstable attributes.\n+//\n+// Note that feature(generic_param_attrs) *is* enabled here. We are\n+// checking feature-gating of the attributes themselves, not the\n+// capability to parse such attributes in that context.\n+\n+#![feature(generic_param_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[lt_struct] 'a>(&'a u32);\n+//~^ ERROR The attribute `lt_struct` is currently unknown to the compiler\n+struct StTy<#[ty_struct] I>(I);\n+//~^ ERROR The attribute `ty_struct` is currently unknown to the compiler\n+\n+enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n+//~^ ERROR The attribute `lt_enum` is currently unknown to the compiler\n+enum EnTy<#[ty_enum] J> { A(J), B }\n+//~^ ERROR The attribute `ty_enum` is currently unknown to the compiler\n+\n+trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+//~^ ERROR The attribute `lt_trait` is currently unknown to the compiler\n+trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n+//~^ ERROR The attribute `ty_trait` is currently unknown to the compiler\n+\n+type TyLt<#[lt_type] 'd> = &'d u32;\n+//~^ ERROR The attribute `lt_type` is currently unknown to the compiler\n+type TyTy<#[ty_type] L> = (L, );\n+//~^ ERROR The attribute `ty_type` is currently unknown to the compiler\n+\n+impl<#[lt_inherent] 'e> StLt<'e> { }\n+//~^ ERROR The attribute `lt_inherent` is currently unknown to the compiler\n+impl<#[ty_inherent] M> StTy<M> { }\n+//~^ ERROR The attribute `ty_inherent` is currently unknown to the compiler\n+\n+impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    //~^ ERROR The attribute `lt_impl_for` is currently unknown to the compiler\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n+    //~^ ERROR The attribute `ty_impl_for` is currently unknown to the compiler\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+//~^ ERROR The attribute `lt_fn` is currently unknown to the compiler\n+fn f_ty<#[ty_fn] O>(_: O) { }\n+//~^ ERROR The attribute `ty_fn` is currently unknown to the compiler\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    //~^ ERROR The attribute `lt_meth` is currently unknown to the compiler\n+    fn m_ty<#[ty_meth] P>(_: P) { }\n+    //~^ ERROR The attribute `ty_meth` is currently unknown to the compiler\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+    //~^ ERROR The attribute `lt_hof` is currently unknown to the compiler\n+{\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "944802f450a6d0eee317fd634188dd448d9d8944", "filename": "src/test/compile-fail/attr-on-generic-formals-wo-feature-gate.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures that attributes on formals in generic parameter\n+// lists are rejected if feature(generic_param_attrs) is not enabled.\n+//\n+// (We are prefixing all tested features with `rustc_`, to ensure that\n+// the attributes themselves won't be rejected by the compiler when\n+// using `rustc_attrs` feature. There is a separate compile-fail/ test\n+// ensuring that the attribute feature-gating works in this context.)\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+struct StTy<#[rustc_ty_struct] I>(I);\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+type TyTy<#[rustc_ty_type] L> = (L, );\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+impl<#[rustc_ty_inherent] M> StTy<M> { }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+{\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "53e287cda208adbcee9881156b28a584350d9816", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n+\n+impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n+    //~^ ERROR trailing attribute after lifetime parameters\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "a38a7bfb9378526d090f42bdcd6f4a01a20ea162", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct RefAny<'a, T>(&'a T);\n+\n+impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {\n+    //~^ ERROR expected identifier, found `>`\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "e7d5b94d24226b1ceaee9813f9837550fc7b286a", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-3.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+    //~^ ERROR trailing attribute after lifetime parameters\n+{\n+\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "5985284d8496b83676a84daf4cc5116554800705", "filename": "src/test/run-pass/attr-on-generic-formals.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fa1a51e9e9570c30b98be2409964313f5d607/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs?ref=df9fa1a51e9e9570c30b98be2409964313f5d607", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures we can attach attributes to the formals in all\n+// places where generic parameter lists occur, assuming appropriate\n+// feature gates are enabled.\n+//\n+// (We are prefixing all tested features with `rustc_`, to ensure that\n+// the attributes themselves won't be rejected by the compiler when\n+// using `rustc_attrs` feature. There is a separate compile-fail/ test\n+// ensuring that the attribute feature-gating works in this context.)\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+struct StTy<#[rustc_ty_struct] I>(I);\n+\n+enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+\n+trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+\n+type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+type TyTy<#[rustc_ty_type] L> = (L, );\n+\n+impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+impl<#[rustc_ty_inherent] M> StTy<M> { }\n+\n+impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+{\n+}\n+\n+fn main() {\n+\n+}"}]}