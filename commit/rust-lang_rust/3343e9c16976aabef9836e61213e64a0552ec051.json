{"sha": "3343e9c16976aabef9836e61213e64a0552ec051", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNDNlOWMxNjk3NmFhYmVmOTgzNmU2MTIxM2U2NGEwNTUyZWMwNTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-20T18:34:13Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:27Z"}, "message": "Add new test for impl precedence and remove unnecessary coherence rules that prevent the test from compiling.", "tree": {"sha": "0aed1c39affc63f07ee20e46406b866e653a26a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aed1c39affc63f07ee20e46406b866e653a26a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3343e9c16976aabef9836e61213e64a0552ec051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3343e9c16976aabef9836e61213e64a0552ec051", "html_url": "https://github.com/rust-lang/rust/commit/3343e9c16976aabef9836e61213e64a0552ec051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3343e9c16976aabef9836e61213e64a0552ec051/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d1844c8065c5c680b0a86c83152902b47bc856c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1844c8065c5c680b0a86c83152902b47bc856c", "html_url": "https://github.com/rust-lang/rust/commit/6d1844c8065c5c680b0a86c83152902b47bc856c"}], "stats": {"total": 89, "additions": 33, "deletions": 56}, "files": [{"sha": "14ca867a56c164a182a1cabdea20fd77b8e9b921", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3343e9c16976aabef9836e61213e64a0552ec051/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3343e9c16976aabef9836e61213e64a0552ec051/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=3343e9c16976aabef9836e61213e64a0552ec051", "patch": "@@ -17,18 +17,12 @@ use middle::infer::{self, new_infer_ctxt};\n use syntax::ast::{DefId};\n use syntax::ast::{LOCAL_CRATE};\n use syntax::ast;\n-use syntax::ast_util;\n-use syntax::visit;\n use syntax::codemap::Span;\n use util::ppaux::Repr;\n \n pub fn check(tcx: &ty::ctxt) {\n-    let mut overlap = OverlapChecker { tcx: tcx };\n+    let overlap = OverlapChecker { tcx: tcx };\n     overlap.check_for_overlapping_impls();\n-\n-    // this secondary walk specifically checks for impls of defaulted\n-    // traits, for which additional overlap rules exist\n-    visit::walk_crate(&mut overlap, tcx.map.krate());\n }\n \n struct OverlapChecker<'cx, 'tcx:'cx> {\n@@ -128,52 +122,3 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n         self.tcx.map.span(impl_did.node)\n     }\n }\n-\n-\n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &'v ast::Item) {\n-        match item.node {\n-            ast::ItemImpl(_, ast::ImplPolarity::Positive, _, Some(ref ast_trait_ref), _, _) => {\n-                let trait_ref = ty::node_id_to_trait_ref(self.tcx, ast_trait_ref.ref_id);\n-                match ty::trait_default_impl(self.tcx, trait_ref.def_id) {\n-                    Some(default_impl) => {\n-                        match trait_ref.self_ty().sty {\n-                            ty::ty_struct(..) | ty::ty_enum(..) => {},\n-                            _ => {\n-                                let impl_def_id = ast_util::local_def(item.id);\n-                                span_err!(self.tcx.sess, self.span_of_impl(impl_def_id), E0319,\n-                                          \"implementations for traits providing default \\\n-                                           implementations are only allowed on structs and enums\");\n-\n-                                self.report_overlap_note(impl_def_id, default_impl);\n-                            }\n-                        }\n-                    }\n-                    None => {}\n-                }\n-            }\n-            ast::ItemDefaultImpl(_, _) => {\n-                let impl_def_id = ast_util::local_def(item.id);\n-                match ty::impl_trait_ref(self.tcx, impl_def_id) {\n-                    Some(ref trait_ref) => {\n-                        match ty::trait_default_impl(self.tcx, trait_ref.def_id) {\n-                            Some(other_impl) if other_impl != impl_def_id => {\n-                                self.report_overlap_error(trait_ref.def_id,\n-                                                          other_impl,\n-                                                          impl_def_id);\n-                            }\n-                            Some(_) => {}\n-                            None => {\n-                                self.tcx.sess.bug(\n-                                          &format!(\"no default implementation recorded for `{:?}`\",\n-                                          item)[]);\n-                            }\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-}"}, {"sha": "e519c3f2c2f5d4c37860e56f67795eeca0826592", "filename": "src/test/compile-fail/typeck-default-trait-impl-precedence.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3343e9c16976aabef9836e61213e64a0552ec051/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3343e9c16976aabef9836e61213e64a0552ec051/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs?ref=3343e9c16976aabef9836e61213e64a0552ec051", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that declaring that `&T` is `Defaulted` if `T:Signed` implies\n+// that other `&T` is NOT `Defaulted` if `T:Signed` does not hold. In\n+// other words, the `..` impl only applies if there are no existing\n+// impls whose types unify.\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::MarkerTrait;\n+\n+trait Defaulted : MarkerTrait { }\n+impl Defaulted for .. { }\n+impl<'a,T:Signed> Defaulted for &'a T { }\n+impl<'a,T:Signed> Defaulted for &'a mut T { }\n+fn is_defaulted<T:Defaulted>() { }\n+\n+trait Signed : MarkerTrait { }\n+impl Signed for i32 { }\n+\n+fn main() {\n+    is_defaulted::<&'static i32>();\n+    is_defaulted::<&'static u32>();\n+}"}]}