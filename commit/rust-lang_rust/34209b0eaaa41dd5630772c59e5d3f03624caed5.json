{"sha": "34209b0eaaa41dd5630772c59e5d3f03624caed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MjA5YjBlYWFhNDFkZDU2MzA3NzJjNTllNWQzZjAzNjI0Y2FlZDU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-06T18:10:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-11T08:57:53Z"}, "message": "Merge ui/README.md into COMPILER_TESTS.md and describe how custom UI normalization works.", "tree": {"sha": "6f113c2dff2d4e05157d7f84d7669dc6c18e760c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f113c2dff2d4e05157d7f84d7669dc6c18e760c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34209b0eaaa41dd5630772c59e5d3f03624caed5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZZJMRAAoJEP72yAUdDgE87RIP/3ABCn+jKjs+YIccHBvRuk6O\nTg5VpD8LX1NKeV/J4qYUoeJJPT2Fd1nOtTwkq/Hzl31CrXjiwxVmtfgsEqzeS4sg\nchb9vYJGBcXV4PdZX6t++JQ2mfnJTEPxmWEHN+NB3JF70VNKE9J0LHLUjVcJucp3\nvub92kcKkDmRonA/fcsGyg0AZ1Otru1fnQL4B8mUHE7uQ6ICFIX19FqpxaoTKwkt\n3I2UOAiqvfLYh1sZ09rCVV5jdZbzxErEK4JG+rZs4Tau9VPyZC4o7VVVeFLgkEaH\n79klCO9hN73YDZxMY//A8nhSxLNlLm2m5ahftsNaWi+sPBxrnHUYPD+iIbOuR3xD\nm868fa7AyY63/YAd8iLupcKHXfS4SR1JRkzxsHaLoVVCUAqRjf6BAuqz/SV/Lqmk\nTqzlo3E0YVx3dEApPFstVLLYs4VAMGgipMQ9LTtJ1Vz3JhI3iTspM2mLd5CRb/Tk\nglPOUIQPCcmn2+WjdS1Wu5NQNaEJuQ1JVy8jVn7Otl7oQBb/KyDwhARulSORNs4A\nfY4ZSXMxnjweabeTI/Xw6iqzn9uSgAG9y1Eh2K0nx//QqOvfPTBpMTvnhfsdnkV9\nMdeOue1NYXpHGCIesVfg9K7BKK1tm2HWau9TLiOT+n3M4FsFUPO2aYLpEvVtxzBf\nNHc4NVFNmborH8l4znqs\n=SC/b\n-----END PGP SIGNATURE-----", "payload": "tree 6f113c2dff2d4e05157d7f84d7669dc6c18e760c\nparent 4582ecda64f6f9173281390ef5698fac29dd6264\nauthor kennytm <kennytm@gmail.com> 1499364648 +0800\ncommitter kennytm <kennytm@gmail.com> 1499763473 +0800\n\nMerge ui/README.md into COMPILER_TESTS.md and describe how custom UI normalization works.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34209b0eaaa41dd5630772c59e5d3f03624caed5", "html_url": "https://github.com/rust-lang/rust/commit/34209b0eaaa41dd5630772c59e5d3f03624caed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34209b0eaaa41dd5630772c59e5d3f03624caed5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4582ecda64f6f9173281390ef5698fac29dd6264", "url": "https://api.github.com/repos/rust-lang/rust/commits/4582ecda64f6f9173281390ef5698fac29dd6264", "html_url": "https://github.com/rust-lang/rust/commit/4582ecda64f6f9173281390ef5698fac29dd6264"}], "stats": {"total": 104, "additions": 72, "deletions": 32}, "files": [{"sha": "0380454b8278d6b3b187fc587785146738ce1374", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/34209b0eaaa41dd5630772c59e5d3f03624caed5/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/34209b0eaaa41dd5630772c59e5d3f03624caed5/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=34209b0eaaa41dd5630772c59e5d3f03624caed5", "patch": "@@ -37,7 +37,7 @@ The error levels that you can have are:\n Header commands specify something about the entire test file as a\n whole, instead of just a few lines inside the test.\n \n-* `ignore-X` where `X` is an architecture, OS or stage will ignore the test accordingly\n+* `ignore-X` where `X` is a target detail or stage will ignore the test accordingly (see below)\n * `ignore-pretty` will not compile the pretty-printed test (this is done to test the pretty-printer, but might not always work)\n * `ignore-test` always ignores the test\n * `ignore-lldb` and `ignore-gdb` will skip the debuginfo tests\n@@ -50,6 +50,14 @@ whole, instead of just a few lines inside the test.\n   feature is attempted without the proper `#![feature(X)]` tag.\n   Each unstable lang feature is required to have a gate test.\n \n+Some examples of `X` in `ignore-X`:\n+\n+* Architecture: `aarch64`, `arm`, `asmjs`, `mips`, `wasm32`, `x86_64`, `x86`, ...\n+* OS: `android`, `emscripten`, `freebsd`, `ios`, `linux`, `macos`, `windows`, ...\n+* Environment (fourth word of the target triple): `gnu`, `msvc`, `musl`.\n+* Pointer width: `32bit`, `64bit`.\n+* Stage: `stage0`, `stage1`, `stage2`.\n+\n ## Revisions\n \n Certain classes of tests support \"revisions\" (as of the time of this\n@@ -86,3 +94,66 @@ For example, the `ignore-test` header (and all \"ignore\" headers)\n currently only apply to the test as a whole, not to particular\n revisions. The only headers that are intended to really work when\n customized to a revision are error patterns and compiler flags.\n+\n+## Guide to the UI Tests\n+\n+The UI tests are intended to capture the compiler's complete output,\n+so that we can test all aspects of the presentation. They work by\n+compiling a file (e.g., `ui/hello_world/main.rs`), capturing the output,\n+and then applying some normalization (see below). This normalized\n+result is then compared against reference files named\n+`ui/hello_world/main.stderr` and `ui/hello_world/main.stdout`. If either of\n+those files doesn't exist, the output must be empty. If the test run\n+fails, we will print out the current output, but it is also saved in\n+`build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n+printed as part of the test failure mesage), so you can run `diff` and\n+so forth.\n+\n+### Editing and updating the reference files\n+\n+If you have changed the compiler's output intentionally, or you are\n+making a new test, you can use the script `ui/update-references.sh` to\n+update the references. When you run the test framework, it will report\n+various errors: in those errors is a command you can use to run the\n+`ui/update-references.sh` script, which will then copy over the files\n+from the build directory and use them as the new reference. You can\n+also just run `ui/update-all-references.sh`. In both cases, you can run\n+the script with `--help` to get a help message.\n+\n+### Normalization\n+\n+The normalization applied is aimed at eliminating output difference\n+between platforms, mainly about filenames:\n+\n+- the test directory is replaced with `$DIR`\n+- all backslashes (`\\`) are converted to forward slashes (`/`) (for Windows)\n+- all CR LF newlines are converted to LF\n+\n+Sometimes these built-in normalizations are not enough. In such cases, you\n+may provide custom normalization rules using the header commands, e.g.\n+\n+```\n+// normalize-stderr-32bit: \"fn() (32 bits)\" -> \"fn() ($PTR bits)\"\n+// normalize-stderr-64bit: \"fn() (64 bits)\" -> \"fn() ($PTR bits)\"\n+```\n+\n+This tells the test, on 32-bit platforms, whenever the compiler writes\n+`fn() (32 bits)` to stderr, it should be normalized to read `fn() ($PTR bits)`\n+instead. Similar for 64-bit.\n+\n+The corresponding reference file will use the normalized output to test both\n+32-bit and 64-bit platforms:\n+\n+```\n+...\n+   |\n+   = note: source type: fn() ($PTR bits)\n+   = note: target type: u16 (16 bits)\n+...\n+```\n+\n+Please see `ui/transmute/main.rs` and `.stderr` for a concrete usage example.\n+\n+Besides `normalize-stderr-32bit` and `-64bit`, one may use any target\n+information or stage supported by `ignore-X` here as well (e.g.\n+`normalize-stderr-windows`)."}, {"sha": "dcdeabd80322f6016f2009ba23a0c4f745e4964e", "filename": "src/test/ui/README.md", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FREADME.md?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -1,31 +0,0 @@\n-# Guide to the UI Tests\n-\n-The UI tests are intended to capture the compiler's complete output,\n-so that we can test all aspects of the presentation. They work by\n-compiling a file (e.g., `hello_world/main.rs`), capturing the output,\n-and then applying some normalization (see below). This normalized\n-result is then compared against reference files named\n-`hello_world/main.stderr` and `hello_world/main.stdout`. If either of\n-those files doesn't exist, the output must be empty. If the test run\n-fails, we will print out the current output, but it is also saved in\n-`build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n-printed as part of the test failure mesage), so you can run `diff` and\n-so forth.\n-\n-# Editing and updating the reference files\n-\n-If you have changed the compiler's output intentionally, or you are\n-making a new test, you can use the script `update-references.sh` to\n-update the references. When you run the test framework, it will report\n-various errors: in those errors is a command you can use to run the\n-`update-references.sh` script, which will then copy over the files\n-from the build directory and use them as the new reference. You can\n-also just run `update-all-references.sh`. In both cases, you can run\n-the script with `--help` to get a help message.\n-\n-# Normalization\n-\n-The normalization applied is aimed at filenames:\n-\n-- the test directory is replaced with `$DIR`\n-- all backslashes (\\) are converted to forward slashes (/) (for windows)"}]}