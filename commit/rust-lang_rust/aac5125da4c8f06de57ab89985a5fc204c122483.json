{"sha": "aac5125da4c8f06de57ab89985a5fc204c122483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYzUxMjVkYTRjOGYwNmRlNTdhYjg5OTg1YTVmYzIwNGMxMjI0ODM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-22T16:14:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-22T16:14:41Z"}, "message": "Rollup merge of #84402 - CDirkx:rwlock, r=dtolnay\n\nMove `sys_common::rwlock::StaticRWLock` etc. to `sys::unix::rwlock`\n\nThis moves `sys_common::rwlock::StaticRwLock`, `RWLockReadGuard` and `RWLockWriteGuard` to `sys::unix::rwlock`. They are already `#[cfg(unix)]` and don't need to be in `sys_common`.", "tree": {"sha": "46237dc2672e9161fd9f2c96e8cdcf5f44d45f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46237dc2672e9161fd9f2c96e8cdcf5f44d45f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aac5125da4c8f06de57ab89985a5fc204c122483", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggaDxCRBK7hj4Ov3rIwAAIboIAKXYw18VY1qZ4iqEFS9I3CFA\nGT20deGSxC0T9BbhuG7JyKp1dhhcTzlkk+1tr13ZLcdxikIAxu9rJlYvkF+ExbpM\nyoz/Fjaja1KM5DhaRyl+/AKy9EvTnuWbjkjYB80980C7LSMiZDoHdkAbtyRYH8Tv\n8H9Yo2jfOOUdYBE67MrqeCPF/R+kEIurjweiaghEcXaaPTArRlRUxtm7lKxEJgVH\nwgVLBq3Jq1vzVbDeBAmwYCQvRP9ncZhkh2auEC75uIgFzM72jml7QJkhZl59xk0d\nZk9dZgca7sJzlI59bISMxFAygVyAJM4JHVCFlTky3qOtRoYG7OM2WxCsNhas/Gs=\n=4eOY\n-----END PGP SIGNATURE-----\n", "payload": "tree 46237dc2672e9161fd9f2c96e8cdcf5f44d45f6e\nparent 54af84b7ef245791dbe8dc00be807284f9431071\nparent eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619108081 +0200\ncommitter GitHub <noreply@github.com> 1619108081 +0200\n\nRollup merge of #84402 - CDirkx:rwlock, r=dtolnay\n\nMove `sys_common::rwlock::StaticRWLock` etc. to `sys::unix::rwlock`\n\nThis moves `sys_common::rwlock::StaticRwLock`, `RWLockReadGuard` and `RWLockWriteGuard` to `sys::unix::rwlock`. They are already `#[cfg(unix)]` and don't need to be in `sys_common`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aac5125da4c8f06de57ab89985a5fc204c122483", "html_url": "https://github.com/rust-lang/rust/commit/aac5125da4c8f06de57ab89985a5fc204c122483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aac5125da4c8f06de57ab89985a5fc204c122483/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54af84b7ef245791dbe8dc00be807284f9431071", "url": "https://api.github.com/repos/rust-lang/rust/commits/54af84b7ef245791dbe8dc00be807284f9431071", "html_url": "https://github.com/rust-lang/rust/commit/54af84b7ef245791dbe8dc00be807284f9431071"}, {"sha": "eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "html_url": "https://github.com/rust-lang/rust/commit/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "503ba410097c8a503f3d17a8de1a2d357fa93f1f", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac5125da4c8f06de57ab89985a5fc204c122483/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac5125da4c8f06de57ab89985a5fc204c122483/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=aac5125da4c8f06de57ab89985a5fc204c122483", "patch": "@@ -21,8 +21,8 @@ use crate::slice;\n use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n+use crate::sys::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n-use crate::sys_common::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};"}, {"sha": "d97d9d712fc93a383450b3f270fb5bdfb5a662e7", "filename": "library/std/src/sys/unix/rwlock.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aac5125da4c8f06de57ab89985a5fc204c122483/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac5125da4c8f06de57ab89985a5fc204c122483/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs?ref=aac5125da4c8f06de57ab89985a5fc204c122483", "patch": "@@ -139,3 +139,55 @@ impl RWLock {\n         }\n     }\n }\n+\n+pub struct StaticRWLock(RWLock);\n+\n+impl StaticRWLock {\n+    pub const fn new() -> StaticRWLock {\n+        StaticRWLock(RWLock::new())\n+    }\n+\n+    /// Acquires shared access to the underlying lock, blocking the current\n+    /// thread to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n+        // SAFETY: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.read();\n+        }\n+        RWLockReadGuard(&self.0)\n+    }\n+\n+    /// Acquires write access to the underlying lock, blocking the current thread\n+    /// to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n+        // SAFETY: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.write();\n+        }\n+        RWLockWriteGuard(&self.0)\n+    }\n+}\n+\n+pub struct RWLockReadGuard(&'static RWLock);\n+\n+impl Drop for RWLockReadGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.read_unlock() }\n+    }\n+}\n+\n+pub struct RWLockWriteGuard(&'static RWLock);\n+\n+impl Drop for RWLockWriteGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.write_unlock() }\n+    }\n+}"}, {"sha": "3705d641a1be646ab38436b8aaed032a6ef3e312", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/aac5125da4c8f06de57ab89985a5fc204c122483/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac5125da4c8f06de57ab89985a5fc204c122483/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=aac5125da4c8f06de57ab89985a5fc204c122483", "patch": "@@ -86,62 +86,3 @@ impl RWLock {\n         self.0.destroy()\n     }\n }\n-\n-// the cfg annotations only exist due to dead code warnings. the code itself is portable\n-#[cfg(unix)]\n-pub struct StaticRWLock(RWLock);\n-\n-#[cfg(unix)]\n-impl StaticRWLock {\n-    pub const fn new() -> StaticRWLock {\n-        StaticRWLock(RWLock::new())\n-    }\n-\n-    /// Acquires shared access to the underlying lock, blocking the current\n-    /// thread to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n-        // SAFETY: All methods require static references, therefore self\n-        // cannot be moved between invocations.\n-        unsafe {\n-            self.0.read();\n-        }\n-        RWLockReadGuard(&self.0)\n-    }\n-\n-    /// Acquires write access to the underlying lock, blocking the current thread\n-    /// to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n-        // SAFETY: All methods require static references, therefore self\n-        // cannot be moved between invocations.\n-        unsafe {\n-            self.0.write();\n-        }\n-        RWLockWriteGuard(&self.0)\n-    }\n-}\n-\n-#[cfg(unix)]\n-pub struct RWLockReadGuard(&'static RWLock);\n-\n-#[cfg(unix)]\n-impl Drop for RWLockReadGuard {\n-    fn drop(&mut self) {\n-        unsafe { self.0.read_unlock() }\n-    }\n-}\n-\n-#[cfg(unix)]\n-pub struct RWLockWriteGuard(&'static RWLock);\n-\n-#[cfg(unix)]\n-impl Drop for RWLockWriteGuard {\n-    fn drop(&mut self) {\n-        unsafe { self.0.write_unlock() }\n-    }\n-}"}]}