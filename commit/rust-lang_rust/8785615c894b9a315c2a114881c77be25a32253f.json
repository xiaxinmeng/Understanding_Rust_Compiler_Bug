{"sha": "8785615c894b9a315c2a114881c77be25a32253f", "node_id": "C_kwDOAAsO6NoAKDg3ODU2MTVjODk0YjlhMzE1YzJhMTE0ODgxYzc3YmUyNWEzMjI1M2Y", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-22T19:24:32Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-22T19:24:32Z"}, "message": "Apply `simulate-remapped-rust-src-base` even `remap-debuginfo` is set in config.toml\n\nThis is really a mess. Here is the situation before this change:\n\n- UI tests depend on not having `rust-src` available. In particular, <https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests/ui/tuple/wrong_argument_ice.stderr#L7-L8> is depending on the `note` being a single line and not showing the source code.\n- When `download-rustc` is disabled, we pass `-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX` `-Ztranslate-remapped-path-to-local-path=no`, which changes the diagnostic to something like `  --> /rustc/FAKE_PREFIX/library/alloc/src/collections/vec_deque/mod.rs:1657:12`\n- When `download-rustc` is enabled, we still pass those flags, but they no longer have an effect. Instead rustc emits diagnostic paths like this: `  --> /rustc/39c6804b92aa202369e402525cee329556bc1db0/library/alloc/src/collections/vec_deque/mod.rs:1657:12`. Notice how there's a real commit and not `FAKE_PREFIX`. This happens because we set `CFG_VIRTUAL_RUST_SOURCE_BASE_DIR` during bootstrapping for CI artifacts, and rustc previously didn't allow for `simulate-remapped` to affect paths that had already been remapped.\n- Pietro noticed this and decided the right thing was to normalize `/rustc/<commit>` to `$SRC_DIR` in compiletest: https://github.com/rust-lang/rust/pull/103969/commits/470423c3d2cde3a62d5d4ac23840d734e8145366\n- After my change to `x test core`, which rebuilds stage 2 std from source so `build/stage2-std` and `build/stage2` use the same `.rlib` metadata, the compiler suddenly notices it has sources for `std` available and prints those in the diagnostic, causing the test to fail.\n\nThis changes `simulate-remapped-rust-src-base` to support remapping paths that have already been remapped, unblocking download-rustc.\n\nUnfortunately, although this fixes the specific problem for\ndownload-rustc, it doesn't seem to affect all the compiler's\ndiagnostics. In particular, various `mir-opt` tests are failing to\nrespect `simulate-remapped-path-prefix` (I looked into fixing this but\nit seems non-trivial). As a result, we can't remove the normalization in\ncompiletest that maps `/rustc/<commit>` to `$SRC_DIR`, so this change is\ncurrently untested anywhere except locally.", "tree": {"sha": "2f170f3e5c883f38843bc4be7804d4c5c1276d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f170f3e5c883f38843bc4be7804d4c5c1276d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8785615c894b9a315c2a114881c77be25a32253f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8785615c894b9a315c2a114881c77be25a32253f", "html_url": "https://github.com/rust-lang/rust/commit/8785615c894b9a315c2a114881c77be25a32253f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8785615c894b9a315c2a114881c77be25a32253f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "919b3913150e8cce662e03891efeafdde038b383", "url": "https://api.github.com/repos/rust-lang/rust/commits/919b3913150e8cce662e03891efeafdde038b383", "html_url": "https://github.com/rust-lang/rust/commit/919b3913150e8cce662e03891efeafdde038b383"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "c6f8d3aec05b400403b9569e95f4012b8f506357", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8785615c894b9a315c2a114881c77be25a32253f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8785615c894b9a315c2a114881c77be25a32253f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=8785615c894b9a315c2a114881c77be25a32253f", "patch": "@@ -1458,22 +1458,27 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     ..\n                 } = source_file_to_import;\n \n-                // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped\n-                // during rust bootstrapping by `remap-debuginfo = true`, and the user\n-                // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,\n+                // If this file is under $sysroot/lib/rustlib/src/\n+                // and the user wish to simulate remapping with -Z simulate-remapped-rust-src-base,\n                 // then we change `name` to a similar state as if the rust was bootstrapped\n                 // with `remap-debuginfo = true`.\n                 // This is useful for testing so that tests about the effects of\n                 // `try_to_translate_virtual_to_real` don't have to worry about how the\n                 // compiler is bootstrapped.\n                 if let Some(virtual_dir) = &sess.opts.unstable_opts.simulate_remapped_rust_src_base\n                 && let Some(real_dir) = &sess.opts.real_rust_source_base_dir\n-                && let rustc_span::FileName::Real(ref mut old_name) = name\n-                && let rustc_span::RealFileName::LocalPath(local) = old_name {\n+                && let rustc_span::FileName::Real(ref mut old_name) = name {\n+                    let relative_path = match old_name {\n+                        rustc_span::RealFileName::LocalPath(local) => local.strip_prefix(real_dir).ok(),\n+                        rustc_span::RealFileName::Remapped { virtual_name, .. } => {\n+                            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").and_then(|virtual_dir| virtual_name.strip_prefix(virtual_dir).ok())\n+                        }\n+                    };\n+                    debug!(?relative_path, ?virtual_dir, \"simulate_remapped_rust_src_base\");\n                     for subdir in [\"library\", \"compiler\"] {\n-                        if let Ok(rest) = local.strip_prefix(real_dir.join(subdir)) {\n+                        if let Some(rest) = relative_path.and_then(|p| p.strip_prefix(subdir).ok()) {\n                             *old_name = rustc_span::RealFileName::Remapped {\n-                                local_path: None,\n+                                local_path: None, // FIXME: maybe we should preserve this?\n                                 virtual_name: virtual_dir.join(subdir).join(rest),\n                             };\n                             break;"}, {"sha": "fc6f5f23d92fa52a4e64e1cb424504a65e1d07cf", "filename": "tests/ui/track-diagnostics/track6.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8785615c894b9a315c2a114881c77be25a32253f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8785615c894b9a315c2a114881c77be25a32253f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.rs?ref=8785615c894b9a315c2a114881c77be25a32253f", "patch": "@@ -1,6 +1,9 @@\n // compile-flags: -Z track-diagnostics\n // error-pattern: created at\n \n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n \n \n pub trait Foo {"}, {"sha": "89438aea9ad62b4e95b135c8c1fcce95c7e873a0", "filename": "tests/ui/track-diagnostics/track6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8785615c894b9a315c2a114881c77be25a32253f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8785615c894b9a315c2a114881c77be25a32253f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr?ref=8785615c894b9a315c2a114881c77be25a32253f", "patch": "@@ -1,9 +1,9 @@\n error[E0658]: specialization is unstable\n-  --> $DIR/track6.rs:11:5\n+  --> $DIR/track6.rs:LL:CC\n    |\n LL |     default fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^\n--Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:93:5\n+-Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:LL:CC\n    |\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: add `#![feature(specialization)]` to the crate attributes to enable"}]}