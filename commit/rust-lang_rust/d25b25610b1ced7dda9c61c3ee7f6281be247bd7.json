{"sha": "d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNWIyNTYxMGIxY2VkN2RkYTljNjFjM2VlN2Y2MjgxYmUyNDdiZDc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-06T14:03:53Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:33Z"}, "message": "Handle InlineAsm in clippy", "tree": {"sha": "7d432e9883306afb23d7eb2c5fec5b873b69d6de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d432e9883306afb23d7eb2c5fec5b873b69d6de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "html_url": "https://github.com/rust-lang/rust/commit/d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d3086492db10deaa3268952792e93ad09ecec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d3086492db10deaa3268952792e93ad09ecec0", "html_url": "https://github.com/rust-lang/rust/commit/f1d3086492db10deaa3268952792e93ad09ecec0"}], "stats": {"total": 111, "additions": 104, "deletions": 7}, "files": [{"sha": "38a5829b3f74530d7b38c0090fec56043ae1ab3c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "patch": "@@ -16,8 +16,8 @@ use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    def_id, BinOpKind, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, GenericArg, HirId, LoopSource,\n-    MatchSource, Mutability, Node, Pat, PatKind, QPath, Stmt, StmtKind,\n+    def_id, BinOpKind, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, GenericArg, HirId, InlineAsmOperand,\n+    LoopSource, MatchSource, Mutability, Node, Pat, PatKind, QPath, Stmt, StmtKind,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -693,6 +693,20 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n                 NeverLoopResult::AlwaysBreak\n             }\n         },\n+        ExprKind::InlineAsm(ref asm) => asm\n+            .operands\n+            .iter()\n+            .map(|o| match o {\n+                InlineAsmOperand::In { expr, .. }\n+                | InlineAsmOperand::InOut { expr, .. }\n+                | InlineAsmOperand::Const { expr }\n+                | InlineAsmOperand::Sym { expr } => never_loop_expr(expr, main_loop_id),\n+                InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n+                InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n+                    never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n+                },\n+            })\n+            .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n         | ExprKind::Closure(_, _, _, _, _)"}, {"sha": "bbcf396eef7d61ba1b04144da9bc59ffc82ed825", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "patch": "@@ -469,6 +469,10 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     println!(\"Ret(None) = {};\", current);\n                 }\n             },\n+            ExprKind::InlineAsm(_) => {\n+                println!(\"InlineAsm(_) = {};\", current);\n+                println!(\"    // unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n+            },\n             ExprKind::LlvmInlineAsm(_) => {\n                 println!(\"LlvmInlineAsm(_) = {};\", current);\n                 println!(\"    // unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");"}, {"sha": "92c27e79452ab7110ba6f41ed9039f6cf906126c", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "patch": "@@ -1,10 +1,11 @@\n use crate::consts::{constant_context, constant_simple};\n use crate::utils::differing_macro_contexts;\n+use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::{\n     BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, Field, FnRetTy, GenericArg,\n-    GenericArgs, Guard, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path, PathSegment, QPath, Stmt, StmtKind, Ty,\n-    TyKind, TypeBinding,\n+    GenericArgs, Guard, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path, PathSegment, QPath,\n+    Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lint::LateContext;\n use rustc_middle::ich::StableHashingContextProvider;\n@@ -474,6 +475,56 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(a);\n                 self.hash_expr(i);\n             },\n+            ExprKind::InlineAsm(ref asm) => {\n+                for piece in asm.template {\n+                    match piece {\n+                        InlineAsmTemplatePiece::String(s) => s.hash(&mut self.s),\n+                        InlineAsmTemplatePiece::Placeholder {\n+                            operand_idx,\n+                            modifier,\n+                            span: _,\n+                        } => {\n+                            operand_idx.hash(&mut self.s);\n+                            modifier.hash(&mut self.s);\n+                        },\n+                    }\n+                }\n+                asm.options.hash(&mut self.s);\n+                for op in asm.operands {\n+                    match op {\n+                        InlineAsmOperand::In { reg, expr } => {\n+                            reg.hash(&mut self.s);\n+                            self.hash_expr(expr);\n+                        },\n+                        InlineAsmOperand::Out { reg, late, expr } => {\n+                            reg.hash(&mut self.s);\n+                            late.hash(&mut self.s);\n+                            if let Some(expr) = expr {\n+                                self.hash_expr(expr);\n+                            }\n+                        },\n+                        InlineAsmOperand::InOut { reg, late, expr } => {\n+                            reg.hash(&mut self.s);\n+                            late.hash(&mut self.s);\n+                            self.hash_expr(expr);\n+                        },\n+                        InlineAsmOperand::SplitInOut {\n+                            reg,\n+                            late,\n+                            in_expr,\n+                            out_expr,\n+                        } => {\n+                            reg.hash(&mut self.s);\n+                            late.hash(&mut self.s);\n+                            self.hash_expr(in_expr);\n+                            if let Some(out_expr) = out_expr {\n+                                self.hash_expr(out_expr);\n+                            }\n+                        },\n+                        InlineAsmOperand::Const { expr } | InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n+                    }\n+                }\n+            },\n             ExprKind::LlvmInlineAsm(..) | ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);"}, {"sha": "748c11fac64ff523a01ad0c454204a4e2134b159", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "patch": "@@ -1,7 +1,7 @@\n //! checks for attributes\n \n use crate::utils::get_attr;\n-use rustc_ast::ast::Attribute;\n+use rustc_ast::ast::{Attribute, InlineAsmTemplatePiece};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::Session;\n@@ -282,6 +282,31 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, e, indent + 1);\n             }\n         },\n+        hir::ExprKind::InlineAsm(ref asm) => {\n+            println!(\"{}InlineAsm\", ind);\n+            println!(\"{}template: {}\", ind, InlineAsmTemplatePiece::to_string(asm.template));\n+            println!(\"{}options: {:?}\", ind, asm.options);\n+            println!(\"{}operands:\", ind);\n+            for op in asm.operands {\n+                match op {\n+                    hir::InlineAsmOperand::In { expr, .. } => print_expr(cx, expr, indent + 1),\n+                    hir::InlineAsmOperand::Out { expr, .. } => {\n+                        if let Some(expr) = expr {\n+                            print_expr(cx, expr, indent + 1);\n+                        }\n+                    },\n+                    hir::InlineAsmOperand::InOut { expr, .. } => print_expr(cx, expr, indent + 1),\n+                    hir::InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n+                        print_expr(cx, in_expr, indent + 1);\n+                        if let Some(out_expr) = out_expr {\n+                            print_expr(cx, out_expr, indent + 1);\n+                        }\n+                    },\n+                    hir::InlineAsmOperand::Const { expr } => print_expr(cx, expr, indent + 1),\n+                    hir::InlineAsmOperand::Sym { expr } => print_expr(cx, expr, indent + 1),\n+                }\n+            }\n+        },\n         hir::ExprKind::LlvmInlineAsm(ref asm) => {\n             let inputs = &asm.inputs_exprs;\n             let outputs = &asm.outputs_exprs;"}, {"sha": "4ebe2e2852fb4445492161c8bfd693db4dc4fed1", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "patch": "@@ -108,6 +108,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n+            | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n@@ -150,6 +151,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Field(..)\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n+            | ast::ExprKind::InlineAsm(..)\n             | ast::ExprKind::LlvmInlineAsm(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::Loop(..)"}, {"sha": "dfa6223f1b9dd104c4ec32cedbac186205f2f362", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b25610b1ced7dda9c61c3ee7f6281be247bd7/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=d25b25610b1ced7dda9c61c3ee7f6281be247bd7", "patch": "@@ -353,7 +353,8 @@ impl Write {\n         is_write: bool,\n     ) -> (Option<StrLit>, Option<Expr>) {\n         use fmt_macros::{\n-            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec, Parser, Piece,\n+            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec, ParseMode, Parser,\n+            Piece,\n         };\n         let tts = tts.clone();\n \n@@ -376,7 +377,7 @@ impl Write {\n         };\n         let tmp = fmtstr.symbol.as_str();\n         let mut args = vec![];\n-        let mut fmt_parser = Parser::new(&tmp, None, Vec::new(), false);\n+        let mut fmt_parser = Parser::new(&tmp, None, None, false, ParseMode::Format);\n         while let Some(piece) = fmt_parser.next() {\n             if !fmt_parser.errors.is_empty() {\n                 return (None, expr);"}]}