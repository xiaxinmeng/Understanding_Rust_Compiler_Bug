{"sha": "a593728fc753f85df575b54aadc64c3fd2c06d11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OTM3MjhmYzc1M2Y4NWRmNTc1YjU0YWFkYzY0YzNmZDJjMDZkMTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-22T09:07:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-22T09:07:39Z"}, "message": "make layout check a mere sanity check", "tree": {"sha": "4f0b577f6188a60918a2fd87abe70cd8d5e2816d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0b577f6188a60918a2fd87abe70cd8d5e2816d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a593728fc753f85df575b54aadc64c3fd2c06d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a593728fc753f85df575b54aadc64c3fd2c06d11", "html_url": "https://github.com/rust-lang/rust/commit/a593728fc753f85df575b54aadc64c3fd2c06d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a593728fc753f85df575b54aadc64c3fd2c06d11/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e5ae8b0875ce70b1a729bef442e753bb3d2502f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5ae8b0875ce70b1a729bef442e753bb3d2502f", "html_url": "https://github.com/rust-lang/rust/commit/5e5ae8b0875ce70b1a729bef442e753bb3d2502f"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "25860c43add414058e72d5bd4dfde931c1444ff7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a593728fc753f85df575b54aadc64c3fd2c06d11/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a593728fc753f85df575b54aadc64c3fd2c06d11/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a593728fc753f85df575b54aadc64c3fd2c06d11", "patch": "@@ -225,28 +225,17 @@ pub(super) fn mir_assign_valid_types<'tcx>(\n     src: TyAndLayout<'tcx>,\n     dest: TyAndLayout<'tcx>,\n ) -> bool {\n-    if src.ty == dest.ty {\n-        // Equal types, all is good. Layout will also be equal.\n-        // (Enum variants would be an exception here as they have the type of the enum but different layout.\n-        // However, those are never the type of an assignment.)\n-        return true;\n-    }\n-    if src.layout != dest.layout {\n-        // Layout differs, definitely not equal.\n-        // We do this here because Miri would *do the wrong thing* if we allowed layout-changing\n-        // assignments.\n-        return false;\n-    }\n-\n     // Type-changing assignments can happen when subtyping is used. While\n     // all normal lifetimes are erased, higher-ranked types with their\n     // late-bound lifetimes are still around and can lead to type\n     // differences. So we compare ignoring lifetimes.\n-    //\n-    // Note that this is not fully correct (FIXME):\n-    // lifetimes in invariant positions could matter (e.g. through associated types).\n-    // We rely on the fact that layout was confirmed to be equal above.\n-    equal_up_to_regions(tcx, param_env, src.ty, dest.ty)\n+    if equal_up_to_regions(tcx, param_env, src.ty, dest.ty) {\n+        // Make sure the layout is equal, too -- just to be safe. Miri really needs layout equality.\n+        assert_eq!(src.layout, dest.layout);\n+        true\n+    } else {\n+        false\n+    }\n }\n \n /// Use the already known layout if given (but sanity check in debug mode),"}, {"sha": "a293751d5b276c064fe5f19715481909ce457648", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a593728fc753f85df575b54aadc64c3fd2c06d11/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a593728fc753f85df575b54aadc64c3fd2c06d11/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=a593728fc753f85df575b54aadc64c3fd2c06d11", "patch": "@@ -44,6 +44,11 @@ pub fn equal_up_to_regions(\n     src: Ty<'tcx>,\n     dest: Ty<'tcx>,\n ) -> bool {\n+    // Fast path.\n+    if src == dest {\n+        return true;\n+    }\n+\n     struct LifetimeIgnoreRelation<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -176,6 +181,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     /// Check if src can be assigned into dest.\n     /// This is not precise, it will accept some incorrect assignments.\n     fn mir_assign_valid_types(&self, src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n+        // Fast path before we normalize.\n         if src == dest {\n             // Equal types, all is good.\n             return true;\n@@ -186,10 +192,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let param_env = self.param_env.with_reveal_all();\n         let src = self.tcx.normalize_erasing_regions(param_env, src);\n         let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n-        // It's worth checking equality again.\n-        if src == dest {\n-            return true;\n-        }\n \n         // Type-changing assignments can happen when subtyping is used. While\n         // all normal lifetimes are erased, higher-ranked types with their"}]}