{"sha": "d2a3c24a9582492d98652a7d88140c34e03c717e", "node_id": "C_kwDOAAsO6NoAKGQyYTNjMjRhOTU4MjQ5MmQ5ODY1MmE3ZDg4MTQwYzM0ZTAzYzcxN2U", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-01T20:44:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-10T16:35:42Z"}, "message": "Update more rustc/libtest things for wasm64\n\n* Add wasm64 variants for inline assembly along the same lines as wasm32\n* Update a few directives in libtest to check for `target_family`\n  instead of `target_arch`\n* Update some rustc codegen and typechecks specialized for wasm32 to\n  also work for wasm64.", "tree": {"sha": "30892c1ebaca1323e42606838eb6a642abfc71bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30892c1ebaca1323e42606838eb6a642abfc71bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2a3c24a9582492d98652a7d88140c34e03c717e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a3c24a9582492d98652a7d88140c34e03c717e", "html_url": "https://github.com/rust-lang/rust/commit/d2a3c24a9582492d98652a7d88140c34e03c717e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2a3c24a9582492d98652a7d88140c34e03c717e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d208e1943bd94f0646dbb6fdc1a14d1973bf63a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d208e1943bd94f0646dbb6fdc1a14d1973bf63a5", "html_url": "https://github.com/rust-lang/rust/commit/d208e1943bd94f0646dbb6fdc1a14d1973bf63a5"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "02096f4abfa5f60d48ef115a1287c27edfb6d321", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -320,7 +320,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::S390x => {}\n                 InlineAsmArch::SpirV => {}\n-                InlineAsmArch::Wasm32 => {}\n+                InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {}\n                 InlineAsmArch::Bpf => {}\n             }\n         }"}, {"sha": "0041a44a4d8b89c05e8420bf03897a673963b71a", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -769,7 +769,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // we like. To ensure that LLVM picks the right instruction we choose\n         // the raw wasm intrinsic functions which avoid LLVM inserting all the\n         // other control flow automatically.\n-        if self.sess().target.arch == \"wasm32\" {\n+        if self.sess().target.arch.starts_with(\"wasm32\") {\n             let src_ty = self.cx.val_ty(val);\n             if self.cx.type_kind(src_ty) != TypeKind::Vector {\n                 let float_width = self.cx.float_width(src_ty);\n@@ -791,7 +791,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn fptosi(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n         // see `fptoui` above for why wasm is different here\n-        if self.sess().target.arch == \"wasm32\" {\n+        if self.sess().target.arch.starts_with(\"wasm\") {\n             let src_ty = self.cx.val_ty(val);\n             if self.cx.type_kind(src_ty) != TypeKind::Vector {\n                 let float_width = self.cx.float_width(src_ty);"}, {"sha": "cbdc76c55e466323c2d5c74d116da01ab7d6ee56", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -490,7 +490,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n \n             // Wasm statics with custom link sections get special treatment as they\n             // go into custom sections of the wasm executable.\n-            if self.tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+            if self.tcx.sess.opts.target_triple.triple().starts_with(\"wasm\") {\n                 if let Some(section) = attrs.link_section {\n                     let section = llvm::LLVMMDStringInContext(\n                         self.llcx,"}, {"sha": "bff132465215eda9d247eb56cd68e7546532725c", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -189,6 +189,7 @@ pub enum InlineAsmArch {\n     S390x,\n     SpirV,\n     Wasm32,\n+    Wasm64,\n     Bpf,\n }\n \n@@ -212,6 +213,7 @@ impl FromStr for InlineAsmArch {\n             \"s390x\" => Ok(Self::S390x),\n             \"spirv\" => Ok(Self::SpirV),\n             \"wasm32\" => Ok(Self::Wasm32),\n+            \"wasm64\" => Ok(Self::Wasm64),\n             \"bpf\" => Ok(Self::Bpf),\n             _ => Err(()),\n         }\n@@ -318,7 +320,7 @@ impl InlineAsmReg {\n             InlineAsmArch::SpirV => {\n                 Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-            InlineAsmArch::Wasm32 => {\n+            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n                 Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::Bpf => {\n@@ -529,7 +531,9 @@ impl InlineAsmRegClass {\n             }\n             InlineAsmArch::S390x => Self::S390x(S390xInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n-            InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n+                Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?)\n+            }\n             InlineAsmArch::Bpf => Self::Bpf(BpfInlineAsmRegClass::parse(arch, name)?),\n         })\n     }\n@@ -725,7 +729,7 @@ pub fn allocatable_registers(\n             spirv::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n-        InlineAsmArch::Wasm32 => {\n+        InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n             let mut map = wasm::regclass_map();\n             wasm::fill_reg_map(arch, has_feature, target, &mut map);\n             map"}, {"sha": "1404a55bcaace36055557bb6889d56b3d83396b6", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -537,7 +537,7 @@ fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {\n \n fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: Span) {\n     // Only restricted on wasm32 target for now\n-    if !tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+    if !tcx.sess.opts.target_triple.triple().starts_with(\"wasm\") {\n         return;\n     }\n "}, {"sha": "9c261e8cc8effcc707744698bf64f9bb10977d84", "filename": "library/test/src/console.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -284,7 +284,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n     // Prevent the usage of `Instant` in some cases:\n     // - It's currently not supported for wasm targets.\n     // - We disable it for miri because it's not available when isolation is enabled.\n-    let is_instant_supported = !cfg!(target_arch = \"wasm32\") && !cfg!(miri);\n+    let is_instant_supported = !cfg!(target_family = \"wasm\") && !cfg!(miri);\n \n     let start_time = is_instant_supported.then(Instant::now);\n     run_tests(opts, tests, |x| on_test_event(&x, &mut st, &mut *out))?;"}, {"sha": "2516f3452b186a4ba8f54ede65c3fe4d608249a1", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -470,7 +470,7 @@ pub fn run_test(\n \n     // Emscripten can catch panics but other wasm targets cannot\n     let ignore_because_no_process_support = desc.should_panic != ShouldPanic::No\n-        && cfg!(target_arch = \"wasm32\")\n+        && cfg!(target_family = \"wasm\")\n         && !cfg!(target_os = \"emscripten\");\n \n     if force_ignore || desc.ignore || ignore_because_no_process_support {\n@@ -519,7 +519,7 @@ pub fn run_test(\n         // If the platform is single-threaded we're just going to run\n         // the test synchronously, regardless of the concurrency\n         // level.\n-        let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\n+        let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_family = \"wasm\");\n         if concurrency == Concurrent::Yes && supports_threads {\n             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n             let mut runtest = Arc::new(Mutex::new(Some(runtest)));"}, {"sha": "cb1b0ebf8db4ac883eda6ef61d489fbe4d126ff8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a3c24a9582492d98652a7d88140c34e03c717e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a3c24a9582492d98652a7d88140c34e03c717e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d2a3c24a9582492d98652a7d88140c34e03c717e", "patch": "@@ -1276,7 +1276,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         builder.ensure(native::TestHelpers { target: compiler.host });\n \n         // As well as the target, except for plain wasm32, which can't build it\n-        if !target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n+        if !target.contains(\"wasm\") || target.contains(\"emscripten\") {\n             builder.ensure(native::TestHelpers { target });\n         }\n "}]}