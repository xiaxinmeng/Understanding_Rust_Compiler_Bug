{"sha": "3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjZlNTZhNzlhZTMzZGZjOGYyZjRkMDEyM2I1MDgwZmQwYTc4NTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-30T17:28:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-02T17:45:13Z"}, "message": "rustc_trans: Disable landing pads on 32-bit MSVC\n\nThis is currently quite buggy in LLVM from what I can tell, so just disable it\nentirely. This commit also adds preliminary support, however, to actually\ntarget 32-bit MSVC by making sure the `rust_try_msvc_32.ll` file exists and\nwiring up exceptions to `_except_handler3` instead of `__C_specific_handler`\n(which doesn't exist on 32-bit).", "tree": {"sha": "597c940aec7675d6a84159ec14fc2ac760184c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/597c940aec7675d6a84159ec14fc2ac760184c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853", "html_url": "https://github.com/rust-lang/rust/commit/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ee47b054deb5939be20d7d6ce03ad33d005424", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ee47b054deb5939be20d7d6ce03ad33d005424", "html_url": "https://github.com/rust-lang/rust/commit/83ee47b054deb5939be20d7d6ce03ad33d005424"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "079cd9c3757e52fc1b9ef20b905cb3e23cbc56e0", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853", "patch": "@@ -752,7 +752,14 @@ pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n pub fn need_invoke(bcx: Block) -> bool {\n     if bcx.sess().no_landing_pads() {\n-        return false;\n+        return false\n+    }\n+\n+    // Currently 32-bit MSVC unwinding is not super well implemented in LLVM, so\n+    // we avoid it entirely.\n+    if bcx.sess().target.target.options.is_like_msvc &&\n+       bcx.sess().target.target.arch == \"x86\" {\n+        return false\n     }\n \n     // Avoid using invoke if we are already inside a landing pad."}, {"sha": "1891320313a851f562a8ffb89e21083cdebfa786", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853", "patch": "@@ -851,8 +851,8 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n         // an \"exception\", but for MSVC we want to force SEH. This means that we\n         // can't actually have the personality function be our standard\n         // `rust_eh_personality` function, but rather we wired it up to the\n-        // CRT's custom `__C_specific_handler` personality funciton, which\n-        // forces LLVM to consider landing pads as \"landing pads for SEH\".\n+        // CRT's custom personality function, which forces LLVM to consider\n+        // landing pads as \"landing pads for SEH\".\n         let target = &self.ccx.sess().target.target;\n         let llpersonality = match pad_bcx.tcx().lang_items.eh_personality() {\n             Some(def_id) if !target.options.is_like_msvc => {\n@@ -864,10 +864,12 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n                 match *personality {\n                     Some(llpersonality) => llpersonality,\n                     None => {\n-                        let name = if target.options.is_like_msvc {\n-                            \"__C_specific_handler\"\n-                        } else {\n+                        let name = if !target.options.is_like_msvc {\n                             \"rust_eh_personality\"\n+                        } else if target.arch == \"x86\" {\n+                            \"_except_handler3\"\n+                        } else {\n+                            \"__C_specific_handler\"\n                         };\n                         let fty = Type::variadic_func(&[], &Type::i32(self.ccx));\n                         let f = declare::declare_cfn(self.ccx, name, fty,"}, {"sha": "bdee53b136e103b5f91050ccc79ab1a01c0c42e1", "filename": "src/rt/rust_try_msvc_32.ll", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853/src%2Frt%2Frust_try_msvc_32.ll", "raw_url": "https://github.com/rust-lang/rust/raw/3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853/src%2Frt%2Frust_try_msvc_32.ll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_try_msvc_32.ll?ref=3e26e56a79ae33dfc8f2f4d0123b5080fd0a7853", "patch": "@@ -0,0 +1,42 @@\n+; Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+; file at the top-level directory of this distribution and at\n+; http://rust-lang.org/COPYRIGHT.\n+;\n+; Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+; http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+; <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+; option. This file may not be copied, modified, or distributed\n+; except according to those terms.\n+\n+; For more comments about what's going on here see rust_try_msvc_64.ll. The only\n+; difference between that and this file is the personality function used as it's\n+; different for 32-bit MSVC than it is for 64-bit.\n+\n+define i8* @rust_try(void (i8*)* %f, i8* %env)\n+    personality i8* bitcast (i32 (...)* @_except_handler3 to i8*)\n+{\n+    invoke void %f(i8* %env)\n+        to label %normal\n+        unwind label %catch\n+\n+normal:\n+    ret i8* null\n+catch:\n+    %vals = landingpad { i8*, i32 }\n+              catch i8* bitcast (i32 (i8*, i8*)* @__rust_try_filter to i8*)\n+    %ehptr = extractvalue { i8*, i32 } %vals, 0\n+    %sel = extractvalue { i8*, i32 } %vals, 1\n+    %filter_sel = call i32 @llvm.eh.typeid.for(i8* bitcast (i32 (i8*, i8*)* @__rust_try_filter to i8*))\n+    %is_filter = icmp eq i32 %sel, %filter_sel\n+    br i1 %is_filter, label %catch-return, label %catch-resume\n+\n+catch-return:\n+    ret i8* %ehptr\n+\n+catch-resume:\n+    resume { i8*, i32 } %vals\n+}\n+\n+declare i32 @_except_handler3(...)\n+declare i32 @__rust_try_filter(i8*, i8*)\n+declare i32 @llvm.eh.typeid.for(i8*) readnone nounwind"}]}