{"sha": "b8cbce8e6aea52f694efe058df546e8028b224ef", "node_id": "C_kwDOAAsO6NoAKGI4Y2JjZThlNmFlYTUyZjY5NGVmZTA1OGRmNTQ2ZTgwMjhiMjI0ZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T07:39:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T07:39:11Z"}, "message": "Auto merge of #10601 - schubart:manual_slice_size_calculation, r=llogiq\n\nAdd [`manual_slice_size_calculation`]\n\nFixes: #10518\n\n---\n\nchangelog: new lint [`manual_slice_size_calculation`]", "tree": {"sha": "e3da6e0c1c334e8d2f0b71abad782b8723ce2ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3da6e0c1c334e8d2f0b71abad782b8723ce2ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8cbce8e6aea52f694efe058df546e8028b224ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cbce8e6aea52f694efe058df546e8028b224ef", "html_url": "https://github.com/rust-lang/rust/commit/b8cbce8e6aea52f694efe058df546e8028b224ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8cbce8e6aea52f694efe058df546e8028b224ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9408d013e3902c4d268a02e3205df6d0f8289e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/9408d013e3902c4d268a02e3205df6d0f8289e65", "html_url": "https://github.com/rust-lang/rust/commit/9408d013e3902c4d268a02e3205df6d0f8289e65"}, {"sha": "b1c784d31f3361b3093466d61b8e62c997b1d086", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c784d31f3361b3093466d61b8e62c997b1d086", "html_url": "https://github.com/rust-lang/rust/commit/b1c784d31f3361b3093466d61b8e62c997b1d086"}], "stats": {"total": 184, "additions": 184, "deletions": 0}, "files": [{"sha": "f615b27bf6883f45d7e08837d20e5e32c45d9034", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbce8e6aea52f694efe058df546e8028b224ef/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbce8e6aea52f694efe058df546e8028b224ef/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b8cbce8e6aea52f694efe058df546e8028b224ef", "patch": "@@ -4674,6 +4674,7 @@ Released 2018-09-13\n [`manual_rem_euclid`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_rem_euclid\n [`manual_retain`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_retain\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n+[`manual_slice_size_calculation`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n [`manual_split_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once\n [`manual_str_repeat`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat\n [`manual_string_new`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_string_new"}, {"sha": "09ae6b8ee571eae17ce1b8c110de3df6c0aafed5", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbce8e6aea52f694efe058df546e8028b224ef/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbce8e6aea52f694efe058df546e8028b224ef/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=b8cbce8e6aea52f694efe058df546e8028b224ef", "patch": "@@ -269,6 +269,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE_INFO,\n     crate::manual_rem_euclid::MANUAL_REM_EUCLID_INFO,\n     crate::manual_retain::MANUAL_RETAIN_INFO,\n+    crate::manual_slice_size_calculation::MANUAL_SLICE_SIZE_CALCULATION_INFO,\n     crate::manual_string_new::MANUAL_STRING_NEW_INFO,\n     crate::manual_strip::MANUAL_STRIP_INFO,\n     crate::map_unit_fn::OPTION_MAP_UNIT_FN_INFO,"}, {"sha": "2a0f219331e25accbe8b02dd1e7f61bf22c67b2d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbce8e6aea52f694efe058df546e8028b224ef/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbce8e6aea52f694efe058df546e8028b224ef/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b8cbce8e6aea52f694efe058df546e8028b224ef", "patch": "@@ -185,6 +185,7 @@ mod manual_main_separator_str;\n mod manual_non_exhaustive;\n mod manual_rem_euclid;\n mod manual_retain;\n+mod manual_slice_size_calculation;\n mod manual_string_new;\n mod manual_strip;\n mod map_unit_fn;\n@@ -956,6 +957,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_late_pass(|_| Box::new(lines_filter_map_ok::LinesFilterMapOk));\n     store.register_late_pass(|_| Box::new(tests_outside_test_module::TestsOutsideTestModule));\n+    store.register_late_pass(|_| Box::new(manual_slice_size_calculation::ManualSliceSizeCalculation));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "92ee79453a3b8698ada615e20561e8a6e6464c7b", "filename": "clippy_lints/src/manual_slice_size_calculation.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbce8e6aea52f694efe058df546e8028b224ef/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbce8e6aea52f694efe058df546e8028b224ef/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs?ref=b8cbce8e6aea52f694efe058df546e8028b224ef", "patch": "@@ -0,0 +1,93 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{expr_or_init, in_constant};\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// When `a` is `&[T]`, detect `a.len() * size_of::<T>()` and suggest `size_of_val(a)`\n+    /// instead.\n+    ///\n+    /// ### Why is this better?\n+    /// * Shorter to write\n+    /// * Removes the need for the human and the compiler to worry about overflow in the\n+    ///   multiplication\n+    /// * Potentially faster at runtime as rust emits special no-wrapping flags when it\n+    ///   calculates the byte length\n+    /// * Less turbofishing\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let data : &[i32] = &[1, 2, 3];\n+    /// let newlen = data.len() * std::mem::size_of::<i32>();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let data : &[i32] = &[1, 2, 3];\n+    /// let newlen = std::mem::size_of_val(data);\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub MANUAL_SLICE_SIZE_CALCULATION,\n+    complexity,\n+    \"manual slice size calculation\"\n+}\n+declare_lint_pass!(ManualSliceSizeCalculation => [MANUAL_SLICE_SIZE_CALCULATION]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ManualSliceSizeCalculation {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        // Does not apply inside const because size_of_value is not cost in stable.\n+        if !in_constant(cx, expr.hir_id)\n+            && let ExprKind::Binary(ref op, left, right) = expr.kind\n+            && BinOpKind::Mul == op.node\n+            && let Some(_receiver) = simplify(cx, left, right)\n+        {\n+            span_lint_and_help(\n+                cx,\n+                MANUAL_SLICE_SIZE_CALCULATION,\n+                expr.span,\n+                \"manual slice size calculation\",\n+                None,\n+                \"consider using std::mem::size_of_value instead\");\n+        }\n+    }\n+}\n+\n+fn simplify<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr1: &'tcx Expr<'tcx>,\n+    expr2: &'tcx Expr<'tcx>,\n+) -> Option<&'tcx Expr<'tcx>> {\n+    let expr1 = expr_or_init(cx, expr1);\n+    let expr2 = expr_or_init(cx, expr2);\n+\n+    simplify_half(cx, expr1, expr2).or_else(|| simplify_half(cx, expr2, expr1))\n+}\n+\n+fn simplify_half<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr1: &'tcx Expr<'tcx>,\n+    expr2: &'tcx Expr<'tcx>,\n+) -> Option<&'tcx Expr<'tcx>> {\n+    if\n+        // expr1 is `[T1].len()`?\n+        let ExprKind::MethodCall(method_path, receiver, _, _) = expr1.kind\n+        && method_path.ident.name == sym::len\n+        && let receiver_ty = cx.typeck_results().expr_ty(receiver)\n+        && let ty::Slice(ty1) = receiver_ty.peel_refs().kind()\n+        // expr2 is `size_of::<T2>()`?\n+        && let ExprKind::Call(func, _) = expr2.kind\n+        && let ExprKind::Path(ref func_qpath) = func.kind\n+        && let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id()\n+        && cx.tcx.is_diagnostic_item(sym::mem_size_of, def_id)\n+        && let Some(ty2) = cx.typeck_results().node_substs(func.hir_id).types().next()\n+        // T1 == T2?\n+        && *ty1 == ty2\n+    {\n+        Some(receiver)\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "5082f931f3c2b0ff1beb75059af1506e90df9124", "filename": "tests/ui/manual_slice_size_calculation.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbce8e6aea52f694efe058df546e8028b224ef/tests%2Fui%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbce8e6aea52f694efe058df546e8028b224ef/tests%2Fui%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.rs?ref=b8cbce8e6aea52f694efe058df546e8028b224ef", "patch": "@@ -0,0 +1,36 @@\n+#![allow(unused)]\n+#![warn(clippy::manual_slice_size_calculation)]\n+\n+use core::mem::{align_of, size_of};\n+\n+fn main() {\n+    let v_i32 = Vec::<i32>::new();\n+    let s_i32 = v_i32.as_slice();\n+\n+    // True positives:\n+    let _ = s_i32.len() * size_of::<i32>(); // WARNING\n+    let _ = size_of::<i32>() * s_i32.len(); // WARNING\n+    let _ = size_of::<i32>() * s_i32.len() * 5; // WARNING\n+\n+    let len = s_i32.len();\n+    let size = size_of::<i32>();\n+    let _ = len * size_of::<i32>(); // WARNING\n+    let _ = s_i32.len() * size; // WARNING\n+    let _ = len * size; // WARNING\n+\n+    // True negatives:\n+    let _ = size_of::<i32>() + s_i32.len(); // Ok, not a multiplication\n+    let _ = size_of::<i32>() * s_i32.partition_point(|_| true); // Ok, not len()\n+    let _ = size_of::<i32>() * v_i32.len(); // Ok, not a slice\n+    let _ = align_of::<i32>() * s_i32.len(); // Ok, not size_of()\n+    let _ = size_of::<u32>() * s_i32.len(); // Ok, different types\n+\n+    // False negatives:\n+    let _ = 5 * size_of::<i32>() * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n+    let _ = size_of::<i32>() * 5 * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n+}\n+\n+const fn _const(s_i32: &[i32]) {\n+    // True negative:\n+    let _ = s_i32.len() * size_of::<i32>(); // Ok, can't use size_of_val in const\n+}"}, {"sha": "4a24fc60a0fafcad4e0ddbaba374777e33a554a9", "filename": "tests/ui/manual_slice_size_calculation.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbce8e6aea52f694efe058df546e8028b224ef/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbce8e6aea52f694efe058df546e8028b224ef/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.stderr?ref=b8cbce8e6aea52f694efe058df546e8028b224ef", "patch": "@@ -0,0 +1,51 @@\n+error: manual slice size calculation\n+  --> $DIR/manual_slice_size_calculation.rs:11:13\n+   |\n+LL |     let _ = s_i32.len() * size_of::<i32>(); // WARNING\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using std::mem::size_of_value instead\n+   = note: `-D clippy::manual-slice-size-calculation` implied by `-D warnings`\n+\n+error: manual slice size calculation\n+  --> $DIR/manual_slice_size_calculation.rs:12:13\n+   |\n+LL |     let _ = size_of::<i32>() * s_i32.len(); // WARNING\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using std::mem::size_of_value instead\n+\n+error: manual slice size calculation\n+  --> $DIR/manual_slice_size_calculation.rs:13:13\n+   |\n+LL |     let _ = size_of::<i32>() * s_i32.len() * 5; // WARNING\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using std::mem::size_of_value instead\n+\n+error: manual slice size calculation\n+  --> $DIR/manual_slice_size_calculation.rs:17:13\n+   |\n+LL |     let _ = len * size_of::<i32>(); // WARNING\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using std::mem::size_of_value instead\n+\n+error: manual slice size calculation\n+  --> $DIR/manual_slice_size_calculation.rs:18:13\n+   |\n+LL |     let _ = s_i32.len() * size; // WARNING\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using std::mem::size_of_value instead\n+\n+error: manual slice size calculation\n+  --> $DIR/manual_slice_size_calculation.rs:19:13\n+   |\n+LL |     let _ = len * size; // WARNING\n+   |             ^^^^^^^^^^\n+   |\n+   = help: consider using std::mem::size_of_value instead\n+\n+error: aborting due to 6 previous errors\n+"}]}