{"sha": "9a9988a4b04622805ae5060dcafc123964da2c3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOTk4OGE0YjA0NjIyODA1YWU1MDYwZGNhZmMxMjM5NjRkYTJjM2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-08T08:01:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:29:19Z"}, "message": "update docs, and also use MIRIFLAGS for the test suite", "tree": {"sha": "0057c7f1cc7d44e97da12519f2133549cde10264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0057c7f1cc7d44e97da12519f2133549cde10264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9988a4b04622805ae5060dcafc123964da2c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9988a4b04622805ae5060dcafc123964da2c3d", "html_url": "https://github.com/rust-lang/rust/commit/9a9988a4b04622805ae5060dcafc123964da2c3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9988a4b04622805ae5060dcafc123964da2c3d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee7d5895302d621fdef40590f072cbed940d204e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7d5895302d621fdef40590f072cbed940d204e", "html_url": "https://github.com/rust-lang/rust/commit/ee7d5895302d621fdef40590f072cbed940d204e"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "67161974b184315a88475e7e89b76c580d1e3aa4", "filename": "README.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a9988a4b04622805ae5060dcafc123964da2c3d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a9988a4b04622805ae5060dcafc123964da2c3d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9a9988a4b04622805ae5060dcafc123964da2c3d", "patch": "@@ -83,11 +83,10 @@ Now you can run your project in Miri:\n The first time you run Miri, it will perform some extra setup and install some\n dependencies.  It will ask you for confirmation before installing anything.\n \n-You can pass arguments to Miri after the first `--`, and pass arguments to the\n-interpreted program or test suite after the second `--`.  For example, `cargo\n-miri run -- -Zmiri-disable-stacked-borrows` runs the program without checking\n-the aliasing of references.  To filter the tests being run, use `cargo miri test\n--- -- filter`.\n+`cargo miri run/test` supports the exact same flags as `cargo run/test`.  You\n+can pass arguments to Miri via `MIRIFLAGS`. For example,\n+`MIRIFLAGS=\"-Zmiri-disable-stacked-borrows\" cargo miri run` runs the program\n+without checking the aliasing of references.\n \n Miri supports cross-execution: if you want to run the program as if it was a\n Linux program, you can do `cargo miri run --target x86_64-unknown-linux-gnu`.\n@@ -163,7 +162,8 @@ up the sysroot.  If you are using `miri` (the Miri driver) directly, see the\n ## Miri `-Z` flags and environment variables\n [miri-flags]: #miri--z-flags-and-environment-variables\n \n-Miri adds its own set of `-Z` flags:\n+Miri adds its own set of `-Z` flags, which are usually set via the `MIRIFLAGS`\n+environment variable:\n \n * `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you\n   can focus on other failures, but it means Miri can miss bugs in your program.\n@@ -229,14 +229,14 @@ Moreover, Miri recognizes some environment variables:\n \n * `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during\n   Miri executions, also [see above][testing-miri].\n+* `MIRIFLAGS` (recognized by `cargo miri` and the test suite) defines extra\n+  flags to be passed to Miri.\n * `MIRI_SYSROOT` (recognized by `cargo miri` and the test suite)\n   indicates the sysroot to use.  To do the same thing with `miri`\n   directly, use the `--sysroot` flag.\n * `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target`\n   flag for the same purpose.\n-* `MIRI_TEST_FLAGS` (recognized by the test suite) defines extra flags to be\n-  passed to Miri.\n \n The following environment variables are internal, but used to communicate between\n different Miri binaries, and as such worth documenting:"}, {"sha": "12683a2fccbec7c5bb9f2515ef7142789da24bc4", "filename": "ci.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a9988a4b04622805ae5060dcafc123964da2c3d/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9a9988a4b04622805ae5060dcafc123964da2c3d/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=9a9988a4b04622805ae5060dcafc123964da2c3d", "patch": "@@ -26,7 +26,7 @@ function run_tests {\n   if ! [ -n \"${MIRI_TEST_TARGET+exists}\" ]; then\n     # Only for host architecture: tests with MIR optimizations\n     # FIXME: only testing level 2 because of <https://github.com/rust-lang/rust/issues/76432>.\n-    MIRI_TEST_FLAGS=\"-Z mir-opt-level=2\" ./miri test --locked\n+    MIRIFLAGS=\"-Z mir-opt-level=2\" ./miri test --locked\n   fi\n   # \"miri test\" has built the sysroot for us, now this should pass without\n   # any interactive questions."}, {"sha": "35c1de3399c02ef51ca8a691fe3bc5a9de622cfe", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a9988a4b04622805ae5060dcafc123964da2c3d/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9988a4b04622805ae5060dcafc123964da2c3d/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=9a9988a4b04622805ae5060dcafc123964da2c3d", "patch": "@@ -27,7 +27,7 @@ fn run_tests(mode: &str, path: &str, target: &str) {\n     if let Ok(sysroot) = std::env::var(\"MIRI_SYSROOT\") {\n         flags.push(format!(\"--sysroot {}\", sysroot));\n     }\n-    if let Ok(extra_flags) = std::env::var(\"MIRI_TEST_FLAGS\") {\n+    if let Ok(extra_flags) = std::env::var(\"MIRIFLAGS\") {\n         flags.push(extra_flags);\n     }\n "}]}