{"sha": "ff8ea69d8f52935345f74241bb524383a47bd1d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOGVhNjlkOGY1MjkzNTM0NWY3NDI0MWJiNTI0MzgzYTQ3YmQxZDc=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-10-02T17:39:43Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-10-06T15:44:50Z"}, "message": "mir-borrowck: Add tests for `describe_lvalue()`", "tree": {"sha": "197391852dab3a041bbe8e41c0adce3f0fd84e52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197391852dab3a041bbe8e41c0adce3f0fd84e52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff8ea69d8f52935345f74241bb524383a47bd1d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8ea69d8f52935345f74241bb524383a47bd1d7", "html_url": "https://github.com/rust-lang/rust/commit/ff8ea69d8f52935345f74241bb524383a47bd1d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff8ea69d8f52935345f74241bb524383a47bd1d7/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa78919733264bfd07e49c7ed8e82f5a5a9eed11", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa78919733264bfd07e49c7ed8e82f5a5a9eed11", "html_url": "https://github.com/rust-lang/rust/commit/aa78919733264bfd07e49c7ed8e82f5a5a9eed11"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "6de8bda9276af0a152657b1a9845c63f4e3a5dcc", "filename": "src/test/compile-fail/borrowck/borrowck-describe-lvalue.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/ff8ea69d8f52935345f74241bb524383a47bd1d7/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff8ea69d8f52935345f74241bb524383a47bd1d7/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=ff8ea69d8f52935345f74241bb524383a47bd1d7", "patch": "@@ -0,0 +1,166 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+pub struct Foo {\n+  x: u32\n+}\n+\n+pub struct Bar(u32);\n+\n+pub enum Baz {\n+    X(u32)\n+}\n+\n+union U {\n+    a: u8,\n+    b: u64,\n+}\n+\n+impl Foo {\n+  fn x(&mut self) -> &mut u32 { &mut self.x }\n+}\n+\n+impl Bar {\n+    fn x(&mut self) -> &mut u32 { &mut self.0 }\n+}\n+\n+impl Baz {\n+    fn x(&mut self) -> &mut u32 {\n+        match *self {\n+            Baz::X(ref mut value) => value\n+        }\n+    }\n+}\n+\n+static mut sfoo : Foo = Foo{x: 23 };\n+static mut sbar : Bar = Bar(23);\n+static mut stuple : (i32, i32) = (24, 25);\n+static mut senum : Baz = Baz::X(26);\n+static mut sunion : U = U { a: 0 };\n+\n+fn main() {\n+    // Local and field from struct\n+    {\n+        let mut f = Foo { x: 22 };\n+        let _x = f.x();\n+        f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `f.x` because it was mutably borrowed (Mir)\n+    }\n+    // Local and field from tuple-struct\n+    {\n+        let mut g = Bar(22);\n+        let _0 = g.x();\n+        g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `g.0` because it was mutably borrowed (Mir)\n+    }\n+    // Local and field from tuple\n+    {\n+        let mut h = (22, 23);\n+        let _0 = &mut h.0;\n+        h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `h.0` because it was mutably borrowed (Mir)\n+    }\n+    // Local and field from enum\n+    {\n+        let mut e = Baz::X(2);\n+        let _e0 = e.x();\n+        match e {\n+            Baz::X(value) => value\n+            //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n+            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed (Ast)\n+            //[mir]~| ERROR cannot use `e.0` because it was mutably borrowed (Mir)\n+        };\n+    }\n+    // Local and field from union\n+    unsafe {\n+        let mut u = U { b: 0 };\n+        let _ra = &mut u.a;\n+        u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `u.a` because it was mutably borrowed (Mir)\n+    }\n+    // Static and field from struct\n+    unsafe {\n+        let _x = sfoo.x();\n+        sfoo.x; //[mir]~ ERROR cannot use `sfoo.x` because it was mutably borrowed (Mir)\n+    }\n+    // Static and field from tuple-struct\n+    unsafe {\n+        let _0 = sbar.x();\n+        sbar.0; //[mir]~ ERROR cannot use `sbar.0` because it was mutably borrowed (Mir)\n+    }\n+    // Static and field from tuple\n+    unsafe {\n+        let _0 = &mut stuple.0;\n+        stuple.0; //[mir]~ ERROR cannot use `stuple.0` because it was mutably borrowed (Mir)\n+    }\n+    // Static and field from enum\n+    unsafe {\n+        let _e0 = senum.x();\n+        match senum {\n+            Baz::X(value) => value\n+            //[mir]~^ ERROR cannot use `senum.0` because it was mutably borrowed (Mir)\n+        };\n+    }\n+    // Static and field from union\n+    unsafe {\n+        let _ra = &mut sunion.a;\n+        sunion.a; //[mir]~ ERROR cannot use `sunion.a` because it was mutably borrowed (Mir)\n+    }\n+    // Deref and field from struct\n+    {\n+        let mut f = Box::new(Foo { x: 22 });\n+        let _x = f.x();\n+        f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `f.x` because it was mutably borrowed (Mir)\n+    }\n+    // Deref and field from tuple-struct\n+    {\n+        let mut g = Box::new(Bar(22));\n+        let _0 = g.x();\n+        g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `g.0` because it was mutably borrowed (Mir)\n+    }\n+    // Deref and field from tuple\n+    {\n+        let mut h = Box::new((22, 23));\n+        let _0 = &mut h.0;\n+        h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `h.0` because it was mutably borrowed (Mir)\n+    }\n+    // Deref and field from enum\n+    {\n+        let mut e = Box::new(Baz::X(3));\n+        let _e0 = e.x();\n+        match *e {\n+            Baz::X(value) => value\n+            //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n+            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed (Ast)\n+            //[mir]~| ERROR cannot use `e.0` because it was mutably borrowed (Mir)\n+        };\n+    }\n+    // Deref and field from union\n+    unsafe {\n+        let mut u = Box::new(U { b: 0 });\n+        let _ra = &mut u.a;\n+        u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n+             //[mir]~| ERROR cannot use `u.a` because it was mutably borrowed (Mir)\n+    }\n+}"}]}