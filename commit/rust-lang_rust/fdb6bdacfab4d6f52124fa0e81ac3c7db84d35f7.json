{"sha": "fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7", "node_id": "C_kwDOAAsO6NoAKGZkYjZiZGFjZmFiNGQ2ZjUyMTI0ZmEwZTgxYWMzYzdkYjg0ZDM1Zjc", "commit": {"author": {"name": "Smittyvb", "email": "me@smitop.com", "date": "2021-11-03T13:24:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-03T13:24:50Z"}, "message": "Add note about x86 instruction prefixes in asm!\n\nSince rustc doesn't do the assembly parsing itself, it is unable\r\nto detect when inline assembly ends with an instruction prefix,\r\nwhich doesn't make sense since it would apply to instructions from\r\nthe compiler. This fixes #82314 by mentioning that x86 instruction\r\nprefixes must not be used in inline assembly.", "tree": {"sha": "cbb3005d6a2c3e8419b139ea172e7fe83356096b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb3005d6a2c3e8419b139ea172e7fe83356096b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhgo2iCRBK7hj4Ov3rIwAABH4IAApeVeR6H4Khgfav9rp9SoTi\nvN214kSlpb6/gN6EGLYUPJ7sLbiQTqXpwI+b0ZmCtV2kQK8fuIFf2JOsCxd+w/DC\nGgzdY2A/xZ43wBdiTrP7g2AbSwmuCRflYRxA8PUkuriIHIl7/8JcAjmXssKfnuW7\nuC8GnpChQT3QUNAjZcEG9zln5EDxn4OLRh+38HfWqIj2V6Y0Eb3aaMemQv2blbtL\n6T10MibPiMTSB0WUYKX6yuIx0L0FxetT2iqvGGWQr5T46rO4YhKg/8EY0mluWgfg\nJY4RAWE+/ht8xLQzAseqsR6EF9c93RW7/5C8mLKGmepaS57cEaBt09+hXXHM0Go=\n=dbCt\n-----END PGP SIGNATURE-----\n", "payload": "tree cbb3005d6a2c3e8419b139ea172e7fe83356096b\nparent 3831aaa13c740e20a97c5aa4b8c760da30bff726\nauthor Smittyvb <me@smitop.com> 1635945890 -0400\ncommitter GitHub <noreply@github.com> 1635945890 -0400\n\nAdd note about x86 instruction prefixes in asm!\n\nSince rustc doesn't do the assembly parsing itself, it is unable\r\nto detect when inline assembly ends with an instruction prefix,\r\nwhich doesn't make sense since it would apply to instructions from\r\nthe compiler. This fixes #82314 by mentioning that x86 instruction\r\nprefixes must not be used in inline assembly."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7", "html_url": "https://github.com/rust-lang/rust/commit/fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3831aaa13c740e20a97c5aa4b8c760da30bff726", "url": "https://api.github.com/repos/rust-lang/rust/commits/3831aaa13c740e20a97c5aa4b8c760da30bff726", "html_url": "https://github.com/rust-lang/rust/commit/3831aaa13c740e20a97c5aa4b8c760da30bff726"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "6e4164626103ec344f20bed0f9b6f4dfa84cf3b5", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=fdb6bdacfab4d6f52124fa0e81ac3c7db84d35f7", "patch": "@@ -885,5 +885,7 @@ The compiler performs some additional checks on options:\n     - You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n     - The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n - You cannot assume that an `asm!` block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the `asm!` block, for example when the function containing it is inlined in multiple places.\n+- On x86, inline assembly must not end with an instruction prefix (such as `LOCK`) that would apply to instructions generated by the compiler.\n+  - The compiler is currently unable to detect this due to the way inline assembly is compiled.\n \n > **Note**: As a general rule, the flags covered by `preserves_flags` are those which are *not* preserved when performing a function call."}]}