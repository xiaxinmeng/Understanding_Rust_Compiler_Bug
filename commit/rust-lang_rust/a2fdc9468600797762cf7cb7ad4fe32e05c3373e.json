{"sha": "a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZmRjOTQ2ODYwMDc5Nzc2MmNmN2NiN2FkNGZlMzJlMDVjMzM3M2U=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-25T09:01:43Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-27T13:16:12Z"}, "message": "Emit basic block ids for statements and terminators in MIR only in -Zverbose mode", "tree": {"sha": "c14bc3743160b2088f92018d56f0c6d3aa057ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c14bc3743160b2088f92018d56f0c6d3aa057ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "html_url": "https://github.com/rust-lang/rust/commit/a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81f5597ac081707346ac68f6938ad6282fc2fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81f5597ac081707346ac68f6938ad6282fc2fee", "html_url": "https://github.com/rust-lang/rust/commit/d81f5597ac081707346ac68f6938ad6282fc2fee"}], "stats": {"total": 6071, "additions": 3004, "deletions": 3067}, "files": [{"sha": "33542fb5d236e0acf312982de802f63fcc7489b3", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -305,9 +305,9 @@ where\n         let indented_body = format!(\"{0}{0}{1:?};\", INDENT, statement);\n         writeln!(\n             w,\n-            \"{:A$} // {:?}: {}\",\n+            \"{:A$} // {}{}\",\n             indented_body,\n-            current_location,\n+            if tcx.sess.verbose() { format!(\"{:?}: \", current_location) } else { String::new() },\n             comment(tcx, statement.source_info),\n             A = ALIGN,\n         )?;\n@@ -326,9 +326,9 @@ where\n     let indented_terminator = format!(\"{0}{0}{1:?};\", INDENT, data.terminator().kind);\n     writeln!(\n         w,\n-        \"{:A$} // {:?}: {}\",\n+        \"{:A$} // {}{}\",\n         indented_terminator,\n-        current_location,\n+        if tcx.sess.verbose() { format!(\"{:?}: \", current_location) } else { String::new() },\n         comment(tcx, data.terminator().source_info),\n         A = ALIGN,\n     )?;\n@@ -455,7 +455,7 @@ fn write_scope_tree(\n         )?;\n     }\n \n-    // Local variable types (including the user's name in a comment).\n+    // Local variable types.\n     for (local, local_decl) in body.local_decls.iter_enumerated() {\n         if (1..body.arg_count + 1).contains(&local.index()) {\n             // Skip over argument locals, they're printed in the signature."}, {"sha": "9742530bd812fef1f0cbf20becfc29cf1153a110", "filename": "src/test/mir-opt/address-of/rustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 178, "deletions": 178, "changes": 356, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -126,201 +126,201 @@ fn address_of_reborrow() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/address-of.rs:4:9: 4:10\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/address-of.rs:4:14: 4:21\n-        _2 = [const 0i32; 10];           // bb0[2]: scope 0 at $DIR/address-of.rs:4:14: 4:21\n+        StorageLive(_1);                 // scope 0 at $DIR/address-of.rs:4:9: 4:10\n+        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:4:14: 4:21\n+        _2 = [const 0i32; 10];           // scope 0 at $DIR/address-of.rs:4:14: 4:21\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/address-of.rs:4:15: 4:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        _1 = &_2;                        // bb0[3]: scope 0 at $DIR/address-of.rs:4:13: 4:21\n-        FakeRead(ForLet, _1);            // bb0[4]: scope 0 at $DIR/address-of.rs:4:9: 4:10\n-        StorageLive(_3);                 // bb0[5]: scope 1 at $DIR/address-of.rs:5:9: 5:14\n-        StorageLive(_4);                 // bb0[6]: scope 1 at $DIR/address-of.rs:5:22: 5:29\n-        _4 = [const 0i32; 10];           // bb0[7]: scope 1 at $DIR/address-of.rs:5:22: 5:29\n+        _1 = &_2;                        // scope 0 at $DIR/address-of.rs:4:13: 4:21\n+        FakeRead(ForLet, _1);            // scope 0 at $DIR/address-of.rs:4:9: 4:10\n+        StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:5:22: 5:29\n+        _4 = [const 0i32; 10];           // scope 1 at $DIR/address-of.rs:5:22: 5:29\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/address-of.rs:5:23: 5:24\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        _3 = &mut _4;                    // bb0[8]: scope 1 at $DIR/address-of.rs:5:17: 5:29\n-        FakeRead(ForLet, _3);            // bb0[9]: scope 1 at $DIR/address-of.rs:5:9: 5:14\n-        StorageLive(_5);                 // bb0[10]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        StorageLive(_6);                 // bb0[11]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        _6 = &raw const (*_1);           // bb0[12]: scope 2 at $DIR/address-of.rs:7:5: 7:6\n-        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // bb0[13]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        _5 = _6;                         // bb0[14]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        StorageDead(_6);                 // bb0[15]: scope 2 at $DIR/address-of.rs:7:18: 7:19\n-        StorageDead(_5);                 // bb0[16]: scope 2 at $DIR/address-of.rs:7:18: 7:19\n-        StorageLive(_7);                 // bb0[17]: scope 2 at $DIR/address-of.rs:8:5: 8:26\n-        _7 = &raw const (*_1);           // bb0[18]: scope 2 at $DIR/address-of.rs:8:5: 8:6\n-        StorageDead(_7);                 // bb0[19]: scope 2 at $DIR/address-of.rs:8:26: 8:27\n-        StorageLive(_8);                 // bb0[20]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        StorageLive(_9);                 // bb0[21]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        StorageLive(_10);                // bb0[22]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        _10 = &raw const (*_1);          // bb0[23]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[24]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        StorageDead(_10);                // bb0[25]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // bb0[26]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        _8 = _9;                         // bb0[27]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        StorageDead(_9);                 // bb0[28]: scope 2 at $DIR/address-of.rs:9:25: 9:26\n-        StorageDead(_8);                 // bb0[29]: scope 2 at $DIR/address-of.rs:9:25: 9:26\n-        StorageLive(_11);                // bb0[30]: scope 2 at $DIR/address-of.rs:10:5: 10:22\n-        StorageLive(_12);                // bb0[31]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        _12 = &raw const (*_1);          // bb0[32]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        _11 = move _12 as *const [i32] (Pointer(Unsize)); // bb0[33]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        StorageDead(_12);                // bb0[34]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        StorageDead(_11);                // bb0[35]: scope 2 at $DIR/address-of.rs:10:22: 10:23\n-        StorageLive(_13);                // bb0[36]: scope 2 at $DIR/address-of.rs:11:5: 11:20\n-        StorageLive(_14);                // bb0[37]: scope 2 at $DIR/address-of.rs:11:5: 11:6\n-        _14 = &raw const (*_1);          // bb0[38]: scope 2 at $DIR/address-of.rs:11:5: 11:6\n-        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // bb0[39]: scope 2 at $DIR/address-of.rs:11:5: 11:20\n-        StorageDead(_14);                // bb0[40]: scope 2 at $DIR/address-of.rs:11:19: 11:20\n-        StorageDead(_13);                // bb0[41]: scope 2 at $DIR/address-of.rs:11:20: 11:21\n-        StorageLive(_15);                // bb0[42]: scope 2 at $DIR/address-of.rs:13:9: 13:10\n-        _15 = &raw const (*_1);          // bb0[43]: scope 2 at $DIR/address-of.rs:13:23: 13:24\n-        FakeRead(ForLet, _15);           // bb0[44]: scope 2 at $DIR/address-of.rs:13:9: 13:10\n-        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // bb0[45]: scope 2 at $DIR/address-of.rs:13:12: 13:20\n-        StorageLive(_16);                // bb0[46]: scope 3 at $DIR/address-of.rs:14:9: 14:10\n-        _16 = &raw const (*_1);          // bb0[47]: scope 3 at $DIR/address-of.rs:14:31: 14:32\n-        FakeRead(ForLet, _16);           // bb0[48]: scope 3 at $DIR/address-of.rs:14:9: 14:10\n-        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // bb0[49]: scope 3 at $DIR/address-of.rs:14:12: 14:28\n-        StorageLive(_17);                // bb0[50]: scope 4 at $DIR/address-of.rs:15:9: 15:10\n-        StorageLive(_18);                // bb0[51]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        _18 = &raw const (*_1);          // bb0[52]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[53]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        StorageDead(_18);                // bb0[54]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        FakeRead(ForLet, _17);           // bb0[55]: scope 4 at $DIR/address-of.rs:15:9: 15:10\n-        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // bb0[56]: scope 4 at $DIR/address-of.rs:15:12: 15:27\n-        StorageLive(_19);                // bb0[57]: scope 5 at $DIR/address-of.rs:16:9: 16:10\n-        StorageLive(_20);                // bb0[58]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        _20 = &raw const (*_1);          // bb0[59]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        _19 = move _20 as *const [i32] (Pointer(Unsize)); // bb0[60]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        StorageDead(_20);                // bb0[61]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        FakeRead(ForLet, _19);           // bb0[62]: scope 5 at $DIR/address-of.rs:16:9: 16:10\n-        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // bb0[63]: scope 5 at $DIR/address-of.rs:16:12: 16:24\n-        StorageLive(_21);                // bb0[64]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        StorageLive(_22);                // bb0[65]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        _22 = &raw const (*_3);          // bb0[66]: scope 6 at $DIR/address-of.rs:18:5: 18:6\n-        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // bb0[67]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        _21 = _22;                       // bb0[68]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        StorageDead(_22);                // bb0[69]: scope 6 at $DIR/address-of.rs:18:18: 18:19\n-        StorageDead(_21);                // bb0[70]: scope 6 at $DIR/address-of.rs:18:18: 18:19\n-        StorageLive(_23);                // bb0[71]: scope 6 at $DIR/address-of.rs:19:5: 19:26\n-        _23 = &raw const (*_3);          // bb0[72]: scope 6 at $DIR/address-of.rs:19:5: 19:6\n-        StorageDead(_23);                // bb0[73]: scope 6 at $DIR/address-of.rs:19:26: 19:27\n-        StorageLive(_24);                // bb0[74]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        StorageLive(_25);                // bb0[75]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        StorageLive(_26);                // bb0[76]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        _26 = &raw const (*_3);          // bb0[77]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[78]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        StorageDead(_26);                // bb0[79]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // bb0[80]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        _24 = _25;                       // bb0[81]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        StorageDead(_25);                // bb0[82]: scope 6 at $DIR/address-of.rs:20:25: 20:26\n-        StorageDead(_24);                // bb0[83]: scope 6 at $DIR/address-of.rs:20:25: 20:26\n-        StorageLive(_27);                // bb0[84]: scope 6 at $DIR/address-of.rs:21:5: 21:22\n-        StorageLive(_28);                // bb0[85]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        _28 = &raw const (*_3);          // bb0[86]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        _27 = move _28 as *const [i32] (Pointer(Unsize)); // bb0[87]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        StorageDead(_28);                // bb0[88]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        StorageDead(_27);                // bb0[89]: scope 6 at $DIR/address-of.rs:21:22: 21:23\n-        StorageLive(_29);                // bb0[90]: scope 6 at $DIR/address-of.rs:23:9: 23:10\n-        _29 = &raw const (*_3);          // bb0[91]: scope 6 at $DIR/address-of.rs:23:23: 23:24\n-        FakeRead(ForLet, _29);           // bb0[92]: scope 6 at $DIR/address-of.rs:23:9: 23:10\n-        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // bb0[93]: scope 6 at $DIR/address-of.rs:23:12: 23:20\n-        StorageLive(_30);                // bb0[94]: scope 7 at $DIR/address-of.rs:24:9: 24:10\n-        _30 = &raw const (*_3);          // bb0[95]: scope 7 at $DIR/address-of.rs:24:31: 24:32\n-        FakeRead(ForLet, _30);           // bb0[96]: scope 7 at $DIR/address-of.rs:24:9: 24:10\n-        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // bb0[97]: scope 7 at $DIR/address-of.rs:24:12: 24:28\n-        StorageLive(_31);                // bb0[98]: scope 8 at $DIR/address-of.rs:25:9: 25:10\n-        StorageLive(_32);                // bb0[99]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        _32 = &raw const (*_3);          // bb0[100]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[101]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        StorageDead(_32);                // bb0[102]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        FakeRead(ForLet, _31);           // bb0[103]: scope 8 at $DIR/address-of.rs:25:9: 25:10\n-        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // bb0[104]: scope 8 at $DIR/address-of.rs:25:12: 25:27\n-        StorageLive(_33);                // bb0[105]: scope 9 at $DIR/address-of.rs:26:9: 26:10\n-        StorageLive(_34);                // bb0[106]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        _34 = &raw const (*_3);          // bb0[107]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        _33 = move _34 as *const [i32] (Pointer(Unsize)); // bb0[108]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        StorageDead(_34);                // bb0[109]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        FakeRead(ForLet, _33);           // bb0[110]: scope 9 at $DIR/address-of.rs:26:9: 26:10\n-        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // bb0[111]: scope 9 at $DIR/address-of.rs:26:12: 26:24\n-        StorageLive(_35);                // bb0[112]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        StorageLive(_36);                // bb0[113]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        _36 = &raw mut (*_3);            // bb0[114]: scope 10 at $DIR/address-of.rs:28:5: 28:6\n-        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // bb0[115]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        _35 = _36;                       // bb0[116]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        StorageDead(_36);                // bb0[117]: scope 10 at $DIR/address-of.rs:28:16: 28:17\n-        StorageDead(_35);                // bb0[118]: scope 10 at $DIR/address-of.rs:28:16: 28:17\n-        StorageLive(_37);                // bb0[119]: scope 10 at $DIR/address-of.rs:29:5: 29:24\n-        _37 = &raw mut (*_3);            // bb0[120]: scope 10 at $DIR/address-of.rs:29:5: 29:6\n-        StorageDead(_37);                // bb0[121]: scope 10 at $DIR/address-of.rs:29:24: 29:25\n-        StorageLive(_38);                // bb0[122]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        StorageLive(_39);                // bb0[123]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        StorageLive(_40);                // bb0[124]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        _40 = &raw mut (*_3);            // bb0[125]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // bb0[126]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        StorageDead(_40);                // bb0[127]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // bb0[128]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        _38 = _39;                       // bb0[129]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        StorageDead(_39);                // bb0[130]: scope 10 at $DIR/address-of.rs:30:23: 30:24\n-        StorageDead(_38);                // bb0[131]: scope 10 at $DIR/address-of.rs:30:23: 30:24\n-        StorageLive(_41);                // bb0[132]: scope 10 at $DIR/address-of.rs:31:5: 31:20\n-        StorageLive(_42);                // bb0[133]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        _42 = &raw mut (*_3);            // bb0[134]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // bb0[135]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        StorageDead(_42);                // bb0[136]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        StorageDead(_41);                // bb0[137]: scope 10 at $DIR/address-of.rs:31:20: 31:21\n-        StorageLive(_43);                // bb0[138]: scope 10 at $DIR/address-of.rs:33:9: 33:10\n-        _43 = &raw mut (*_3);            // bb0[139]: scope 10 at $DIR/address-of.rs:33:21: 33:22\n-        FakeRead(ForLet, _43);           // bb0[140]: scope 10 at $DIR/address-of.rs:33:9: 33:10\n-        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // bb0[141]: scope 10 at $DIR/address-of.rs:33:12: 33:18\n-        StorageLive(_44);                // bb0[142]: scope 11 at $DIR/address-of.rs:34:9: 34:10\n-        _44 = &raw mut (*_3);            // bb0[143]: scope 11 at $DIR/address-of.rs:34:29: 34:30\n-        FakeRead(ForLet, _44);           // bb0[144]: scope 11 at $DIR/address-of.rs:34:9: 34:10\n-        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // bb0[145]: scope 11 at $DIR/address-of.rs:34:12: 34:26\n-        StorageLive(_45);                // bb0[146]: scope 12 at $DIR/address-of.rs:35:9: 35:10\n-        StorageLive(_46);                // bb0[147]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        _46 = &raw mut (*_3);            // bb0[148]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // bb0[149]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        StorageDead(_46);                // bb0[150]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        FakeRead(ForLet, _45);           // bb0[151]: scope 12 at $DIR/address-of.rs:35:9: 35:10\n-        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // bb0[152]: scope 12 at $DIR/address-of.rs:35:12: 35:25\n-        StorageLive(_47);                // bb0[153]: scope 13 at $DIR/address-of.rs:36:9: 36:10\n-        StorageLive(_48);                // bb0[154]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        _48 = &raw mut (*_3);            // bb0[155]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // bb0[156]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        StorageDead(_48);                // bb0[157]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        FakeRead(ForLet, _47);           // bb0[158]: scope 13 at $DIR/address-of.rs:36:9: 36:10\n-        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // bb0[159]: scope 13 at $DIR/address-of.rs:36:12: 36:22\n-        _0 = const ();                   // bb0[160]: scope 0 at $DIR/address-of.rs:3:26: 37:2\n+        _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:5:17: 5:29\n+        FakeRead(ForLet, _3);            // scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        _6 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:7:5: 7:6\n+        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        _5 = _6;                         // scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:7:18: 7:19\n+        StorageDead(_5);                 // scope 2 at $DIR/address-of.rs:7:18: 7:19\n+        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:8:5: 8:26\n+        _7 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:8:5: 8:6\n+        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:8:26: 8:27\n+        StorageLive(_8);                 // scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        StorageLive(_9);                 // scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        StorageLive(_10);                // scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        _10 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        StorageDead(_10);                // scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        _8 = _9;                         // scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        StorageDead(_9);                 // scope 2 at $DIR/address-of.rs:9:25: 9:26\n+        StorageDead(_8);                 // scope 2 at $DIR/address-of.rs:9:25: 9:26\n+        StorageLive(_11);                // scope 2 at $DIR/address-of.rs:10:5: 10:22\n+        StorageLive(_12);                // scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        _12 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        _11 = move _12 as *const [i32] (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        StorageDead(_12);                // scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        StorageDead(_11);                // scope 2 at $DIR/address-of.rs:10:22: 10:23\n+        StorageLive(_13);                // scope 2 at $DIR/address-of.rs:11:5: 11:20\n+        StorageLive(_14);                // scope 2 at $DIR/address-of.rs:11:5: 11:6\n+        _14 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:11:5: 11:6\n+        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // scope 2 at $DIR/address-of.rs:11:5: 11:20\n+        StorageDead(_14);                // scope 2 at $DIR/address-of.rs:11:19: 11:20\n+        StorageDead(_13);                // scope 2 at $DIR/address-of.rs:11:20: 11:21\n+        StorageLive(_15);                // scope 2 at $DIR/address-of.rs:13:9: 13:10\n+        _15 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:13:23: 13:24\n+        FakeRead(ForLet, _15);           // scope 2 at $DIR/address-of.rs:13:9: 13:10\n+        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address-of.rs:13:12: 13:20\n+        StorageLive(_16);                // scope 3 at $DIR/address-of.rs:14:9: 14:10\n+        _16 = &raw const (*_1);          // scope 3 at $DIR/address-of.rs:14:31: 14:32\n+        FakeRead(ForLet, _16);           // scope 3 at $DIR/address-of.rs:14:9: 14:10\n+        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address-of.rs:14:12: 14:28\n+        StorageLive(_17);                // scope 4 at $DIR/address-of.rs:15:9: 15:10\n+        StorageLive(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        _18 = &raw const (*_1);          // scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        StorageDead(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        FakeRead(ForLet, _17);           // scope 4 at $DIR/address-of.rs:15:9: 15:10\n+        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address-of.rs:15:12: 15:27\n+        StorageLive(_19);                // scope 5 at $DIR/address-of.rs:16:9: 16:10\n+        StorageLive(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        _20 = &raw const (*_1);          // scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        StorageDead(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        FakeRead(ForLet, _19);           // scope 5 at $DIR/address-of.rs:16:9: 16:10\n+        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address-of.rs:16:12: 16:24\n+        StorageLive(_21);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        StorageLive(_22);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        _22 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:18:5: 18:6\n+        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        _21 = _22;                       // scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        StorageDead(_22);                // scope 6 at $DIR/address-of.rs:18:18: 18:19\n+        StorageDead(_21);                // scope 6 at $DIR/address-of.rs:18:18: 18:19\n+        StorageLive(_23);                // scope 6 at $DIR/address-of.rs:19:5: 19:26\n+        _23 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:19:5: 19:6\n+        StorageDead(_23);                // scope 6 at $DIR/address-of.rs:19:26: 19:27\n+        StorageLive(_24);                // scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        StorageLive(_25);                // scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        StorageLive(_26);                // scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        _26 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        StorageDead(_26);                // scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        _24 = _25;                       // scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        StorageDead(_25);                // scope 6 at $DIR/address-of.rs:20:25: 20:26\n+        StorageDead(_24);                // scope 6 at $DIR/address-of.rs:20:25: 20:26\n+        StorageLive(_27);                // scope 6 at $DIR/address-of.rs:21:5: 21:22\n+        StorageLive(_28);                // scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        _28 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        _27 = move _28 as *const [i32] (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        StorageDead(_28);                // scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        StorageDead(_27);                // scope 6 at $DIR/address-of.rs:21:22: 21:23\n+        StorageLive(_29);                // scope 6 at $DIR/address-of.rs:23:9: 23:10\n+        _29 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:23:23: 23:24\n+        FakeRead(ForLet, _29);           // scope 6 at $DIR/address-of.rs:23:9: 23:10\n+        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address-of.rs:23:12: 23:20\n+        StorageLive(_30);                // scope 7 at $DIR/address-of.rs:24:9: 24:10\n+        _30 = &raw const (*_3);          // scope 7 at $DIR/address-of.rs:24:31: 24:32\n+        FakeRead(ForLet, _30);           // scope 7 at $DIR/address-of.rs:24:9: 24:10\n+        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address-of.rs:24:12: 24:28\n+        StorageLive(_31);                // scope 8 at $DIR/address-of.rs:25:9: 25:10\n+        StorageLive(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        _32 = &raw const (*_3);          // scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        StorageDead(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        FakeRead(ForLet, _31);           // scope 8 at $DIR/address-of.rs:25:9: 25:10\n+        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address-of.rs:25:12: 25:27\n+        StorageLive(_33);                // scope 9 at $DIR/address-of.rs:26:9: 26:10\n+        StorageLive(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        _34 = &raw const (*_3);          // scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        StorageDead(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        FakeRead(ForLet, _33);           // scope 9 at $DIR/address-of.rs:26:9: 26:10\n+        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address-of.rs:26:12: 26:24\n+        StorageLive(_35);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        StorageLive(_36);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        _36 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:28:5: 28:6\n+        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        _35 = _36;                       // scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        StorageDead(_36);                // scope 10 at $DIR/address-of.rs:28:16: 28:17\n+        StorageDead(_35);                // scope 10 at $DIR/address-of.rs:28:16: 28:17\n+        StorageLive(_37);                // scope 10 at $DIR/address-of.rs:29:5: 29:24\n+        _37 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:29:5: 29:6\n+        StorageDead(_37);                // scope 10 at $DIR/address-of.rs:29:24: 29:25\n+        StorageLive(_38);                // scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        StorageLive(_39);                // scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        StorageLive(_40);                // scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        _40 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        StorageDead(_40);                // scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        _38 = _39;                       // scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        StorageDead(_39);                // scope 10 at $DIR/address-of.rs:30:23: 30:24\n+        StorageDead(_38);                // scope 10 at $DIR/address-of.rs:30:23: 30:24\n+        StorageLive(_41);                // scope 10 at $DIR/address-of.rs:31:5: 31:20\n+        StorageLive(_42);                // scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        _42 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        StorageDead(_42);                // scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        StorageDead(_41);                // scope 10 at $DIR/address-of.rs:31:20: 31:21\n+        StorageLive(_43);                // scope 10 at $DIR/address-of.rs:33:9: 33:10\n+        _43 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:33:21: 33:22\n+        FakeRead(ForLet, _43);           // scope 10 at $DIR/address-of.rs:33:9: 33:10\n+        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address-of.rs:33:12: 33:18\n+        StorageLive(_44);                // scope 11 at $DIR/address-of.rs:34:9: 34:10\n+        _44 = &raw mut (*_3);            // scope 11 at $DIR/address-of.rs:34:29: 34:30\n+        FakeRead(ForLet, _44);           // scope 11 at $DIR/address-of.rs:34:9: 34:10\n+        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address-of.rs:34:12: 34:26\n+        StorageLive(_45);                // scope 12 at $DIR/address-of.rs:35:9: 35:10\n+        StorageLive(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        _46 = &raw mut (*_3);            // scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        StorageDead(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        FakeRead(ForLet, _45);           // scope 12 at $DIR/address-of.rs:35:9: 35:10\n+        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address-of.rs:35:12: 35:25\n+        StorageLive(_47);                // scope 13 at $DIR/address-of.rs:36:9: 36:10\n+        StorageLive(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        _48 = &raw mut (*_3);            // scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        StorageDead(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        FakeRead(ForLet, _47);           // scope 13 at $DIR/address-of.rs:36:9: 36:10\n+        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:36:12: 36:22\n+        _0 = const ();                   // scope 0 at $DIR/address-of.rs:3:26: 37:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/address-of.rs:3:26: 37:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_47);                // bb0[161]: scope 13 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_45);                // bb0[162]: scope 12 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_44);                // bb0[163]: scope 11 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_43);                // bb0[164]: scope 10 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_33);                // bb0[165]: scope 9 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_31);                // bb0[166]: scope 8 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_30);                // bb0[167]: scope 7 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_29);                // bb0[168]: scope 6 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_19);                // bb0[169]: scope 5 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_17);                // bb0[170]: scope 4 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_16);                // bb0[171]: scope 3 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_15);                // bb0[172]: scope 2 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_4);                 // bb0[173]: scope 1 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_3);                 // bb0[174]: scope 1 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_2);                 // bb0[175]: scope 0 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_1);                 // bb0[176]: scope 0 at $DIR/address-of.rs:37:1: 37:2\n-        return;                          // bb0[177]: scope 0 at $DIR/address-of.rs:37:2: 37:2\n+        StorageDead(_47);                // scope 13 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_45);                // scope 12 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_44);                // scope 11 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_43);                // scope 10 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_33);                // scope 9 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_31);                // scope 8 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_30);                // scope 7 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_29);                // scope 6 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_19);                // scope 5 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_17);                // scope 4 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_16);                // scope 3 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_15);                // scope 2 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_3);                 // scope 1 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_1);                 // scope 0 at $DIR/address-of.rs:37:1: 37:2\n+        return;                          // scope 0 at $DIR/address-of.rs:37:2: 37:2\n     }\n }"}, {"sha": "4a7e8de29ec226854a55158fa0cbeae25402f863", "filename": "src/test/mir-opt/address-of/rustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -20,34 +20,34 @@ fn borrow_and_cast(_1: i32) -> () {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/address-of.rs:42:9: 42:10\n-        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        _3 = &_1;                        // bb0[2]: scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        _2 = &raw const (*_3);           // bb0[3]: scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        FakeRead(ForLet, _2);            // bb0[4]: scope 0 at $DIR/address-of.rs:42:9: 42:10\n-        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/address-of.rs:42:29: 42:30\n-        StorageLive(_4);                 // bb0[6]: scope 1 at $DIR/address-of.rs:43:9: 43:10\n-        StorageLive(_5);                 // bb0[7]: scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        _5 = &mut _1;                    // bb0[8]: scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        _4 = &raw const (*_5);           // bb0[9]: scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        FakeRead(ForLet, _4);            // bb0[10]: scope 1 at $DIR/address-of.rs:43:9: 43:10\n-        StorageDead(_5);                 // bb0[11]: scope 1 at $DIR/address-of.rs:43:33: 43:34\n-        StorageLive(_6);                 // bb0[12]: scope 2 at $DIR/address-of.rs:44:9: 44:10\n-        StorageLive(_7);                 // bb0[13]: scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        _7 = &mut _1;                    // bb0[14]: scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        _6 = &raw mut (*_7);             // bb0[15]: scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        FakeRead(ForLet, _6);            // bb0[16]: scope 2 at $DIR/address-of.rs:44:9: 44:10\n-        StorageDead(_7);                 // bb0[17]: scope 2 at $DIR/address-of.rs:44:31: 44:32\n-        _0 = const ();                   // bb0[18]: scope 0 at $DIR/address-of.rs:41:32: 45:2\n+        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:42:9: 42:10\n+        StorageLive(_3);                 // scope 0 at $DIR/address-of.rs:42:13: 42:15\n+        _3 = &_1;                        // scope 0 at $DIR/address-of.rs:42:13: 42:15\n+        _2 = &raw const (*_3);           // scope 0 at $DIR/address-of.rs:42:13: 42:15\n+        FakeRead(ForLet, _2);            // scope 0 at $DIR/address-of.rs:42:9: 42:10\n+        StorageDead(_3);                 // scope 0 at $DIR/address-of.rs:42:29: 42:30\n+        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        StorageLive(_5);                 // scope 1 at $DIR/address-of.rs:43:13: 43:19\n+        _5 = &mut _1;                    // scope 1 at $DIR/address-of.rs:43:13: 43:19\n+        _4 = &raw const (*_5);           // scope 1 at $DIR/address-of.rs:43:13: 43:19\n+        FakeRead(ForLet, _4);            // scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        StorageDead(_5);                 // scope 1 at $DIR/address-of.rs:43:33: 43:34\n+        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:44:9: 44:10\n+        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:44:13: 44:19\n+        _7 = &mut _1;                    // scope 2 at $DIR/address-of.rs:44:13: 44:19\n+        _6 = &raw mut (*_7);             // scope 2 at $DIR/address-of.rs:44:13: 44:19\n+        FakeRead(ForLet, _6);            // scope 2 at $DIR/address-of.rs:44:9: 44:10\n+        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:44:31: 44:32\n+        _0 = const ();                   // scope 0 at $DIR/address-of.rs:41:32: 45:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/address-of.rs:41:32: 45:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_6);                 // bb0[19]: scope 2 at $DIR/address-of.rs:45:1: 45:2\n-        StorageDead(_4);                 // bb0[20]: scope 1 at $DIR/address-of.rs:45:1: 45:2\n-        StorageDead(_2);                 // bb0[21]: scope 0 at $DIR/address-of.rs:45:1: 45:2\n-        return;                          // bb0[22]: scope 0 at $DIR/address-of.rs:45:2: 45:2\n+        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:45:1: 45:2\n+        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:45:1: 45:2\n+        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:45:1: 45:2\n+        return;                          // scope 0 at $DIR/address-of.rs:45:2: 45:2\n     }\n }"}, {"sha": "c42d5adce4f2b3121c7854dd9c0b59611e93b195", "filename": "src/test/mir-opt/array-index-is-temporary/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -24,8 +24,8 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        _1 = [const 42u32, const 43u32, const 44u32]; // bb0[1]: scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n+        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        _1 = [const 42u32, const 43u32, const 44u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n@@ -44,23 +44,23 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-        _2 = const 1usize;               // bb0[3]: scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n+        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+        _2 = const 1usize;               // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n-        StorageLive(_4);                 // bb0[5]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _4 = &mut _2;                    // bb0[6]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _3 = &raw mut (*_4);             // bb0[7]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        StorageDead(_4);                 // bb0[8]: scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n-        StorageLive(_5);                 // bb0[9]: scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n-        StorageLive(_6);                 // bb0[10]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _6 = _3;                         // bb0[11]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _5 = const foo(move _6) -> bb1;  // bb0[12]: scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n+        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n+        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n+        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _5 = const foo(move _6) -> bb1;  // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n                                          // ty::Const\n                                          // + ty: unsafe fn(*mut usize) -> u32 {foo}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -70,28 +70,28 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // bb1[0]: scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n-        StorageLive(_7);                 // bb1[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n+        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n-        StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n-        StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n-        _0 = const ();                   // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n+        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n+        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n+        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:12:11: 17:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        return;                          // bb2[7]: scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n+        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n     }\n }"}, {"sha": "05d9b3b9b6f777c88bdfaa3cc9de7e31caee9216", "filename": "src/test/mir-opt/array-index-is-temporary/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -24,8 +24,8 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        _1 = [const 42u32, const 43u32, const 44u32]; // bb0[1]: scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n+        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        _1 = [const 42u32, const 43u32, const 44u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n@@ -44,23 +44,23 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-        _2 = const 1usize;               // bb0[3]: scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n+        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+        _2 = const 1usize;               // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n-        StorageLive(_4);                 // bb0[5]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _4 = &mut _2;                    // bb0[6]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _3 = &raw mut (*_4);             // bb0[7]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        StorageDead(_4);                 // bb0[8]: scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n-        StorageLive(_5);                 // bb0[9]: scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n-        StorageLive(_6);                 // bb0[10]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _6 = _3;                         // bb0[11]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _5 = const foo(move _6) -> bb1;  // bb0[12]: scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n+        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n+        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n+        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _5 = const foo(move _6) -> bb1;  // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n                                          // ty::Const\n                                          // + ty: unsafe fn(*mut usize) -> u32 {foo}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -70,28 +70,28 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // bb1[0]: scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n-        StorageLive(_7);                 // bb1[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n+        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n-        StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n-        StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n-        _0 = const ();                   // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n+        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n+        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n+        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:12:11: 17:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        return;                          // bb2[7]: scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n+        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n     }\n }"}, {"sha": "de423cd907afee058a8732b9eba7accf64663372", "filename": "src/test/mir-opt/basic_assignment/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -26,71 +26,71 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n-        _1 = const false;                // bb0[1]: scope 0 at $DIR/basic_assignment.rs:11:20: 11:25\n+        StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n+        _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:11:20: 11:25\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/basic_assignment.rs:11:20: 11:25\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n-        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n-        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n-        _3 = _1;                         // bb0[5]: scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n-        _2 = move _3;                    // bb0[6]: scope 2 at $DIR/basic_assignment.rs:16:5: 16:24\n-        StorageDead(_3);                 // bb0[7]: scope 2 at $DIR/basic_assignment.rs:16:23: 16:24\n-        StorageLive(_4);                 // bb0[8]: scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n-        _4 = std::option::Option::<std::boxed::Box<u32>>::None; // bb0[9]: scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n-        FakeRead(ForLet, _4);            // bb0[10]: scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n-        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // bb0[11]: scope 2 at $DIR/basic_assignment.rs:18:17: 18:33\n-        StorageLive(_5);                 // bb0[12]: scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n-        StorageLive(_6);                 // bb0[13]: scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        _6 = move _4;                    // bb0[14]: scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb2, unwind: bb5]; // bb0[15]: scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        FakeRead(ForLet, _1);            // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n+        StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n+        StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n+        _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n+        _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:16:5: 16:24\n+        StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:23: 16:24\n+        StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n+        _4 = std::option::Option::<std::boxed::Box<u32>>::None; // scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n+        FakeRead(ForLet, _4);            // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n+        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:18:17: 18:33\n+        StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n+        StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n+        _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n+        replace(_5 <- move _6) -> [return: bb2, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n+        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n     }\n \n     bb2: {\n-        drop(_6) -> [return: bb6, unwind: bb4]; // bb2[0]: scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        drop(_6) -> [return: bb6, unwind: bb4]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n     }\n \n     bb3 (cleanup): {\n-        drop(_4) -> bb1;                 // bb3[0]: scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> bb1;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n     bb4 (cleanup): {\n-        drop(_5) -> bb3;                 // bb4[0]: scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_5) -> bb3;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n     bb5 (cleanup): {\n-        drop(_6) -> bb4;                 // bb5[0]: scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        drop(_6) -> bb4;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n     }\n \n     bb6: {\n-        StorageDead(_6);                 // bb6[0]: scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-        _0 = const ();                   // bb6[1]: scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n+        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/basic_assignment.rs:10:11: 24:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_5) -> [return: bb7, unwind: bb3]; // bb6[2]: scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_5) -> [return: bb7, unwind: bb3]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n     bb7: {\n-        StorageDead(_5);                 // bb7[0]: scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb8, unwind: bb1]; // bb7[1]: scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> [return: bb8, unwind: bb1]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n     bb8: {\n-        StorageDead(_4);                 // bb8[0]: scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_2);                 // bb8[1]: scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_1);                 // bb8[2]: scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n-        return;                          // bb8[3]: scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n+        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n+        return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n     }\n }"}, {"sha": "259501c7de9515ede3c8d67f10bb532dfeb659f7", "filename": "src/test/mir-opt/box_expr/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,10 +11,10 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/box_expr.rs:7:9: 7:10\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        _2 = Box(S);                     // bb0[2]: scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = const S::new() -> [return: bb2, unwind: bb3]; // bb0[3]: scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n+        StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        (*_2) = const S::new() -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // ty::Const\n                                          // + ty: fn() -> S {S::new}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -24,24 +24,24 @@ fn main() -> () {\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/box_expr.rs:6:1: 9:2\n+        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n \n     bb2: {\n-        _1 = move _2;                    // bb2[0]: scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb4;                 // bb2[1]: scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        drop(_2) -> bb4;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n     }\n \n     bb3 (cleanup): {\n-        drop(_2) -> bb1;                 // bb3[0]: scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n     }\n \n     bb4: {\n-        StorageDead(_2);                 // bb4[0]: scope 0 at $DIR/box_expr.rs:7:24: 7:25\n-        StorageLive(_3);                 // bb4[1]: scope 1 at $DIR/box_expr.rs:8:5: 8:12\n-        StorageLive(_4);                 // bb4[2]: scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _4 = move _1;                    // bb4[3]: scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // bb4[4]: scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // ty::Const\n                                          // + ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -51,28 +51,28 @@ fn main() -> () {\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // bb5[0]: scope 1 at $DIR/box_expr.rs:8:11: 8:12\n-        StorageDead(_3);                 // bb5[1]: scope 1 at $DIR/box_expr.rs:8:12: 8:13\n-        _0 = const ();                   // bb5[2]: scope 0 at $DIR/box_expr.rs:6:11: 9:2\n+        StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n+        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:6:11: 9:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> bb8;                 // bb5[3]: scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb6 (cleanup): {\n-        drop(_1) -> bb1;                 // bb6[0]: scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_4) -> bb6;                 // bb7[0]: scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n     }\n \n     bb8: {\n-        StorageDead(_1);                 // bb8[0]: scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-        return;                          // bb8[1]: scope 0 at $DIR/box_expr.rs:9:2: 9:2\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n     }\n }"}, {"sha": "b8ecaf787fe72f4a9a4dee4ea59c0fec8621be5a", "filename": "src/test/mir-opt/byte_slice/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -12,16 +12,16 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/byte_slice.rs:5:9: 5:10\n-        _1 = const b\"foo\";               // bb0[1]: scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n+        StorageLive(_1);                 // scope 0 at $DIR/byte_slice.rs:5:9: 5:10\n+        _1 = const b\"foo\";               // scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n                                          // ty::Const\n                                          // + ty: &[u8; 3]\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:5:13: 5:19\n                                          // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0+0x0)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n-        _2 = [const 5u8, const 120u8];   // bb0[3]: scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n+        StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n+        _2 = [const 5u8, const 120u8];   // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n                                          // ty::Const\n                                          // + ty: u8\n                                          // + val: Value(Scalar(0x05))\n@@ -34,16 +34,16 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:6:19: 6:23\n                                          // + literal: Const { ty: u8, val: Value(Scalar(0x78)) }\n-        _0 = const ();                   // bb0[4]: scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n+        _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:4:11: 7:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_2);                 // bb0[5]: scope 1 at $DIR/byte_slice.rs:7:1: 7:2\n-        StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/byte_slice.rs:7:1: 7:2\n-        return;                          // bb0[7]: scope 0 at $DIR/byte_slice.rs:7:2: 7:2\n+        StorageDead(_2);                 // scope 1 at $DIR/byte_slice.rs:7:1: 7:2\n+        StorageDead(_1);                 // scope 0 at $DIR/byte_slice.rs:7:1: 7:2\n+        return;                          // scope 0 at $DIR/byte_slice.rs:7:2: 7:2\n     }\n }\n "}, {"sha": "e11619cf0cd0eb14da1cee8ab0fc74bce3faf5e3", "filename": "src/test/mir-opt/combine_array_len/32bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -26,76 +26,76 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n-          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-          _3 = const 0usize;               // bb0[2]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _3 = const 0usize;               // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:5:15: 5:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n--         _4 = Len(_1);                    // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+         _4 = const 2usize;               // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+-         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n++         _4 = const 2usize;               // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n-          _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n-          _2 = _1[_3];                     // bb1[0]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n-          StorageLive(_6);                 // bb1[2]: scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n-          StorageLive(_7);                 // bb1[3]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-          _7 = const 1usize;               // bb1[4]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n+          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n+          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _7 = const 1usize;               // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:6:15: 6:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n--         _8 = Len(_1);                    // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+         _8 = const 2usize;               // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+-         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n++         _8 = const 2usize;               // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n-          _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {\n-          _6 = _1[_7];                     // bb2[0]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          StorageDead(_7);                 // bb2[1]: scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n-          StorageLive(_10);                // bb2[2]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageLive(_11);                // bb2[3]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          _11 = _2;                        // bb2[4]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          StorageLive(_12);                // bb2[5]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _12 = _2;                        // bb2[6]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _10 = Mul(move _11, move _12);   // bb2[7]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageDead(_12);                // bb2[8]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageDead(_11);                // bb2[9]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageLive(_13);                // bb2[10]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageLive(_14);                // bb2[11]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          _14 = _6;                        // bb2[12]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          StorageLive(_15);                // bb2[13]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _15 = _6;                        // bb2[14]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _13 = Mul(move _14, move _15);   // bb2[15]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageDead(_15);                // bb2[16]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_14);                // bb2[17]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _0 = Add(move _10, move _13);    // bb2[18]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n-          StorageDead(_13);                // bb2[19]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_10);                // bb2[20]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_6);                 // bb2[21]: scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n-          StorageDead(_2);                 // bb2[22]: scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n-          return;                          // bb2[23]: scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n+          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n+          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n+          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "050cfe359a17513e3c9ff7c36353b90f3178b985", "filename": "src/test/mir-opt/combine_array_len/64bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -26,76 +26,76 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n-          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-          _3 = const 0usize;               // bb0[2]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _3 = const 0usize;               // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000000))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:5:15: 5:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n--         _4 = Len(_1);                    // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+         _4 = const 2usize;               // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+-         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n++         _4 = const 2usize;               // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n-          _2 = _1[_3];                     // bb1[0]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n-          StorageLive(_6);                 // bb1[2]: scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n-          StorageLive(_7);                 // bb1[3]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-          _7 = const 1usize;               // bb1[4]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n+          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n+          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _7 = const 1usize;               // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000001))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:6:15: 6:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n--         _8 = Len(_1);                    // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+         _8 = const 2usize;               // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+-         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n++         _8 = const 2usize;               // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {\n-          _6 = _1[_7];                     // bb2[0]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          StorageDead(_7);                 // bb2[1]: scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n-          StorageLive(_10);                // bb2[2]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageLive(_11);                // bb2[3]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          _11 = _2;                        // bb2[4]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          StorageLive(_12);                // bb2[5]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _12 = _2;                        // bb2[6]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _10 = Mul(move _11, move _12);   // bb2[7]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageDead(_12);                // bb2[8]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageDead(_11);                // bb2[9]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageLive(_13);                // bb2[10]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageLive(_14);                // bb2[11]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          _14 = _6;                        // bb2[12]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          StorageLive(_15);                // bb2[13]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _15 = _6;                        // bb2[14]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _13 = Mul(move _14, move _15);   // bb2[15]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageDead(_15);                // bb2[16]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_14);                // bb2[17]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _0 = Add(move _10, move _13);    // bb2[18]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n-          StorageDead(_13);                // bb2[19]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_10);                // bb2[20]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_6);                 // bb2[21]: scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n-          StorageDead(_2);                 // bb2[22]: scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n-          return;                          // bb2[23]: scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n+          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n+          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n+          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "d202531c7ab6357f2af62f7928e41f77426d8e65", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -7,17 +7,17 @@ promoted[0] in BAR: &[&i32; 1] = {\n     let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n \n     bb0: {\n-        _3 = const {alloc0+0x0: &i32};   // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+        _3 = const {alloc0+0x0: &i32};   // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // ty::Const\n                                          // + ty: &i32\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0x0)) }\n-        _2 = _3;                         // bb0[1]: scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n-        _1 = [move _2];                  // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-        _0 = &_1;                        // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-        return;                          // bb0[4]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+        _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n+        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n     }\n }\n "}, {"sha": "5b98830c629035fb5582cbafac10a45cb9892385", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR.PromoteTemps.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,13 +11,13 @@\n +     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n--         StorageLive(_5);                 // bb0[4]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--         _5 = const {alloc0+0x0: &i32};   // bb0[5]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-+         _6 = const BAR::promoted[0];     // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+-         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+-         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n+-         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+-         _5 = const {alloc0+0x0: &i32};   // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n++         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n                                            // ty::Const\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc0+0x0))\n@@ -26,16 +26,14 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0x0)) }\n--         _4 = &(*_5);                     // bb0[6]: scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n--         _3 = [move _4];                  // bb0[7]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         _2 = &_3;                        // bb0[8]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         _1 = move _2 as &[&i32] (Pointer(Unsize)); // bb0[9]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // bb0[10]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+-         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n+-         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+-         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:35\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+         _1 = move _2 as &[&i32] (Pointer(Unsize)); // bb0[4]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+         _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // bb0[5]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n++         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // ty::Const\n                                            // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -45,14 +43,13 @@\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // bb1[0]: scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n       }\n   \n       bb2: {\n--         StorageDead(_5);                 // bb2[0]: scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n--         StorageDead(_3);                 // bb2[1]: scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n--         return;                          // bb2[2]: scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n-+         return;                          // bb2[0]: scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+-         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n+-         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n       }\n - }\n - "}, {"sha": "b49c1aaa86669b9941dced4cdbf60378ead14e20", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -9,17 +9,17 @@ promoted[0] in FOO: &[&i32; 1] = {\n     }\n \n     bb0: {\n-        _3 = const {alloc2+0x0: &i32};   // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc2+0x0: &i32};   // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // ty::Const\n                                          // + ty: &i32\n                                          // + val: Value(Scalar(alloc2+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0x0)) }\n-        _2 = _3;                         // bb0[1]: scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n-        _1 = [move _2];                  // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-        _0 = &_1;                        // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-        return;                          // bb0[4]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+        _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n+        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     }\n }\n "}, {"sha": "0724575b9d23b90e64953e335863903f47170c14", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO.PromoteTemps.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,13 +13,13 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n--         StorageLive(_5);                 // bb0[4]: scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc2+0x0: &i32};   // bb0[5]: scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-+         _6 = const FOO::promoted[0];     // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+-         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+-         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n+-         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-         _5 = const {alloc2+0x0: &i32};   // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n++         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n                                            // ty::Const\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc2+0x0))\n@@ -28,16 +28,14 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0x0)) }\n--         _4 = &(*_5);                     // bb0[6]: scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n--         _3 = [move _4];                  // bb0[7]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         _2 = &_3;                        // bb0[8]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         _1 = move _2 as &[&i32] (Pointer(Unsize)); // bb0[9]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // bb0[10]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+-         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n+-         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+-         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:46\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+         _1 = move _2 as &[&i32] (Pointer(Unsize)); // bb0[4]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+         _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // bb0[5]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n++         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // ty::Const\n                                            // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -47,14 +45,13 @@\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // bb1[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n       }\n   \n       bb2: {\n--         StorageDead(_5);                 // bb2[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n--         StorageDead(_3);                 // bb2[1]: scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n--         return;                          // bb2[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n-+         return;                          // bb2[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+-         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n+-         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n       }\n   }\n - "}, {"sha": "3883bba42a3ab17c22bdea5905d030551a6c6346", "filename": "src/test/mir-opt/const_allocation/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,26 +6,26 @@ fn main() -> () {\n     let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // bb0[2]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n                                          // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0x0)) }\n-        _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n+        _0 = const ();                   // scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:7:11: 9:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb0[7]: scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n+        return;                          // scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n     }\n }\n "}, {"sha": "54a6483f4696ee3202067c63ef0973b03eef0b03", "filename": "src/test/mir-opt/const_allocation/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,26 +6,26 @@ fn main() -> () {\n     let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // bb0[2]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n                                          // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0x0)) }\n-        _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n+        _0 = const ();                   // scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:7:11: 9:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb0[7]: scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n+        return;                          // scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n     }\n }\n "}, {"sha": "e11a2090c5a8ac195b9d042870a8a0b3189ed97e", "filename": "src/test/mir-opt/const_allocation2/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,26 +6,26 @@ fn main() -> () {\n     let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // bb0[2]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0x0)) }\n-        _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n+        _0 = const ();                   // scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:4:11: 6:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb0[7]: scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n+        return;                          // scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n     }\n }\n "}, {"sha": "a56534a7690cedab53250e4b25d8b5761c813c1b", "filename": "src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,26 +6,26 @@ fn main() -> () {\n     let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // bb0[2]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0x0)) }\n-        _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n+        _0 = const ();                   // scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:4:11: 6:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb0[7]: scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n+        return;                          // scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n     }\n }\n "}, {"sha": "e69ff17149b24ef48ddf436d687dfa850305ce6e", "filename": "src/test/mir-opt/const_allocation3/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,26 +6,26 @@ fn main() -> () {\n     let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&Packed}; // bb0[2]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&Packed}; // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0x0)) }\n-        _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n+        _0 = const ();                   // scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:4:11: 6:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb0[7]: scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n+        return;                          // scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n     }\n }\n "}, {"sha": "ad669b25a79350050aa24d17ed74942fa4892436", "filename": "src/test/mir-opt/const_allocation3/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,26 +6,26 @@ fn main() -> () {\n     let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&Packed}; // bb0[2]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&Packed}; // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n                                          // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0x0)) }\n-        _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n+        _0 = const ();                   // scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:4:11: 6:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb0[7]: scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n+        return;                          // scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n     }\n }\n "}, {"sha": "f4b6c7db444e5a11c52c2a15cbfc5d5919f5cbb2", "filename": "src/test/mir-opt/const_prop/aggregate/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,10 +11,10 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/aggregate.rs:5:9: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/aggregate.rs:5:13: 5:24\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-          _3 = (const 0i32, const 1i32, const 2i32); // bb0[3]: scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:5:9: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+          _3 = (const 0i32, const 1i32, const 2i32); // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -33,9 +33,9 @@\n                                            // mir::Constant\n                                            // + span: $DIR/aggregate.rs:5:20: 5:21\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n--         _2 = (_3.1: i32);                // bb0[4]: scope 0 at $DIR/aggregate.rs:5:13: 5:24\n--         _1 = Add(move _2, const 0i32);   // bb0[5]: scope 0 at $DIR/aggregate.rs:5:13: 5:28\n-+         _2 = const 1i32;                 // bb0[4]: scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+-         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+-         _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n++         _2 = const 1i32;                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n                                            // ty::Const\n                                            // + ty: i32\n -                                          // + val: Value(Scalar(0x00000000))\n@@ -45,24 +45,24 @@\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n +                                          // + span: $DIR/aggregate.rs:5:13: 5:24\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+         _1 = const 1i32;                 // bb0[5]: scope 0 at $DIR/aggregate.rs:5:13: 5:28\n++         _1 = const 1i32;                 // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/aggregate.rs:5:13: 5:28\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-          StorageDead(_2);                 // bb0[6]: scope 0 at $DIR/aggregate.rs:5:27: 5:28\n-          StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/aggregate.rs:5:28: 5:29\n-          _0 = const ();                   // bb0[8]: scope 0 at $DIR/aggregate.rs:4:11: 6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:5:27: 5:28\n+          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:5:28: 5:29\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/aggregate.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/aggregate.rs:6:1: 6:2\n-          return;                          // bb0[10]: scope 0 at $DIR/aggregate.rs:6:2: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "e24751d39a7df8868ebfa67e56b30b6a0188f748", "filename": "src/test/mir-opt/const_prop/array_index/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,9 +13,9 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array_index.rs:5:9: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // bb0[2]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -40,31 +40,31 @@\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:28: 5:29\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _3 = const 2usize;               // bb0[4]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          _3 = const 2usize;               // scope 0 at $DIR/array_index.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n-          _4 = const 4usize;               // bb0[5]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+          _4 = const 4usize;               // scope 0 at $DIR/array_index.rs:5:18: 5:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000004))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:18: 5:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000004)) }\n--         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -74,25 +74,25 @@\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _1 = const 2u32;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          _0 = const ();                   // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          _0 = const ();                   // scope 0 at $DIR/array_index.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:6:1: 6:2\n-          return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:6:2: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/array_index.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "ad9992bb94905d690b3043547d6e507984af5bb4", "filename": "src/test/mir-opt/const_prop/array_index/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,9 +13,9 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array_index.rs:5:9: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // bb0[2]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -40,31 +40,31 @@\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:28: 5:29\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _3 = const 2usize;               // bb0[4]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          _3 = const 2usize;               // scope 0 at $DIR/array_index.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000002))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _4 = const 4usize;               // bb0[5]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+          _4 = const 4usize;               // scope 0 at $DIR/array_index.rs:5:18: 5:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000004))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:18: 5:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n--         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -74,25 +74,25 @@\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _1 = const 2u32;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          _0 = const ();                   // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          _0 = const ();                   // scope 0 at $DIR/array_index.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:6:1: 6:2\n-          return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:6:2: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/array_index.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "16f937f3e7b5efd7fb33f0a787d50fadcb3bc130", "filename": "src/test/mir-opt/const_prop/boxes/rustc.main.ConstProp.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -12,47 +12,47 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/boxes.rs:12:9: 12:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/boxes.rs:12:13: 12:22\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          _4 = Box(i32);                   // bb0[4]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          (*_4) = const 42i32;             // bb0[5]: scope 0 at $DIR/boxes.rs:12:19: 12:21\n+          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:12:9: 12:10\n+          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:12:13: 12:22\n+          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          StorageLive(_4);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          _4 = Box(i32);                   // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          (*_4) = const 42i32;             // scope 0 at $DIR/boxes.rs:12:19: 12:21\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/boxes.rs:12:19: 12:21\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          _3 = move _4;                    // bb0[6]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageDead(_4);                 // bb0[7]: scope 0 at $DIR/boxes.rs:12:21: 12:22\n-          _2 = (*_3);                      // bb0[8]: scope 0 at $DIR/boxes.rs:12:13: 12:22\n-          _1 = Add(move _2, const 0i32);   // bb0[9]: scope 0 at $DIR/boxes.rs:12:13: 12:26\n+          _3 = move _4;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          StorageDead(_4);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n+          _2 = (*_3);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n+          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/boxes.rs:12:13: 12:26\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/boxes.rs:12:25: 12:26\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // bb0[10]: scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb2, unwind: bb1]; // bb0[11]: scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n+          drop(_3) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // bb1[0]: scope 0 at $DIR/boxes.rs:11:1: 13:2\n+          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n       }\n   \n       bb2: {\n-          StorageDead(_3);                 // bb2[0]: scope 0 at $DIR/boxes.rs:12:26: 12:27\n-          _0 = const ();                   // bb2[1]: scope 0 at $DIR/boxes.rs:11:11: 13:2\n+          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          _0 = const ();                   // scope 0 at $DIR/boxes.rs:11:11: 13:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/boxes.rs:11:11: 13:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb2[2]: scope 0 at $DIR/boxes.rs:13:1: 13:2\n-          return;                          // bb2[3]: scope 0 at $DIR/boxes.rs:13:2: 13:2\n+          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n+          return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }\n   }\n   "}, {"sha": "58c27c5a20f8cfc93b022be478420be10a546fd7", "filename": "src/test/mir-opt/const_prop/cast/rustc.main.ConstProp.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,42 +13,42 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/cast.rs:4:9: 4:10\n--         _1 = const 42u8 as u32 (Misc);   // bb0[1]: scope 0 at $DIR/cast.rs:4:13: 4:24\n-+         _1 = const 42u32;                // bb0[1]: scope 0 at $DIR/cast.rs:4:13: 4:24\n+          StorageLive(_1);                 // scope 0 at $DIR/cast.rs:4:9: 4:10\n+-         _1 = const 42u8 as u32 (Misc);   // scope 0 at $DIR/cast.rs:4:13: 4:24\n++         _1 = const 42u32;                // scope 0 at $DIR/cast.rs:4:13: 4:24\n                                            // ty::Const\n -                                          // + ty: u8\n -                                          // + val: Value(Scalar(0x2a))\n -                                          // mir::Constant\n -                                          // + span: $DIR/cast.rs:4:13: 4:17\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n--         StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/cast.rs:6:9: 6:10\n--         _2 = const 42u32 as u8 (Misc);   // bb0[3]: scope 1 at $DIR/cast.rs:6:13: 6:24\n+-         StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n+-         _2 = const 42u32 as u8 (Misc);   // scope 1 at $DIR/cast.rs:6:13: 6:24\n -                                          // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n -                                          // + span: $DIR/cast.rs:6:13: 6:18\n +                                          // + span: $DIR/cast.rs:4:13: 4:24\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-+         StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/cast.rs:6:9: 6:10\n-+         _2 = const 42u8;                 // bb0[3]: scope 1 at $DIR/cast.rs:6:13: 6:24\n++         StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n++         _2 = const 42u8;                 // scope 1 at $DIR/cast.rs:6:13: 6:24\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x2a))\n +                                          // mir::Constant\n +                                          // + span: $DIR/cast.rs:6:13: 6:24\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n-          _0 = const ();                   // bb0[4]: scope 0 at $DIR/cast.rs:3:11: 7:2\n+          _0 = const ();                   // scope 0 at $DIR/cast.rs:3:11: 7:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/cast.rs:3:11: 7:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_2);                 // bb0[5]: scope 1 at $DIR/cast.rs:7:1: 7:2\n-          StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/cast.rs:7:1: 7:2\n-          return;                          // bb0[7]: scope 0 at $DIR/cast.rs:7:2: 7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/cast.rs:7:1: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cast.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/cast.rs:7:2: 7:2\n       }\n   }\n   "}, {"sha": "92add8bafdc0363f92a8c2d841f32580a0e0e55f", "filename": "src/test/mir-opt/const_prop/checked_add/rustc.main.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,9 +10,9 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/checked_add.rs:5:9: 5:10\n--         _2 = CheckedAdd(const 1u32, const 1u32); // bb0[1]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         _2 = (const 2u32, const false);  // bb0[1]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:5:9: 5:10\n+-         _2 = CheckedAdd(const 1u32, const 1u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         _2 = (const 2u32, const false);  // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000001))\n@@ -30,10 +30,10 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/checked_add.rs:5:22: 5:23\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n--         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+-         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n@@ -43,23 +43,23 @@\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: u32);           // bb1[0]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+-         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         _1 = const 2u32;                 // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          _0 = const ();                   // bb1[1]: scope 0 at $DIR/checked_add.rs:4:11: 6:2\n+          _0 = const ();                   // scope 0 at $DIR/checked_add.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/checked_add.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[2]: scope 0 at $DIR/checked_add.rs:6:1: 6:2\n-          return;                          // bb1[3]: scope 0 at $DIR/checked_add.rs:6:2: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/checked_add.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "6c5fe7454b4edbd8f2d23e45ff5fd2644bf99219", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully/rustc.main.ConstProp.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,24 +13,24 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-          _3 = const main::FOO;            // bb0[3]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n+          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n+          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+          _3 = const main::FOO;            // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), [], None) }\n-          _2 = &raw const (*_3);           // bb0[4]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-          _1 = move _2 as usize (Misc);    // bb0[5]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n-          StorageDead(_2);                 // bb0[6]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39\n-          StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:39: 7:40\n-          StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n-          StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n-          _5 = _1;                         // bb0[10]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n-          _4 = const read(move _5) -> bb1; // bb0[11]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+          _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n+          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39\n+          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:39: 7:40\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n+          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n+          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n+          _4 = const read(move _5) -> bb1; // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n                                            // ty::Const\n                                            // + ty: fn(usize) {read}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -40,17 +40,17 @@\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // bb1[0]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:11: 8:12\n-          StorageDead(_4);                 // bb1[1]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:12: 8:13\n-          _0 = const ();                   // bb1[2]: scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n+          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:11: 8:12\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:12: 8:13\n+          _0 = const ();                   // scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[3]: scope 0 at $DIR/const_prop_fails_gracefully.rs:9:1: 9:2\n-          return;                          // bb1[4]: scope 0 at $DIR/const_prop_fails_gracefully.rs:9:2: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "07a144942caa985d8fe2bd63991035fb07d39944", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -7,19 +7,19 @@\n       let mut _2: !;                       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n--         _1 = const <bool as NeedsDrop>::NEEDS; // bb0[1]: scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         _1 = const false;                // bb0[1]: scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+-         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n++         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n                                            // ty::Const\n                                            // + ty: bool\n -                                          // + val: Unevaluated(DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), [bool], None)\n +                                          // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/control-flow-simplification.rs:12:8: 12:21\n -                                          // + literal: Const { ty: bool, val: Unevaluated(DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), [bool], None) }\n--         switchInt(_1) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+-         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         switchInt(const false) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n++         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n@@ -29,20 +29,20 @@\n       }\n   \n       bb1: {\n-          _0 = const ();                   // bb1[0]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+          _0 = const ();                   // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/control-flow-simplification.rs:15:1: 15:2\n-          return;                          // bb1[2]: scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:15:1: 15:2\n+          return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n       }\n   \n       bb2: {\n-          StorageLive(_2);                 // bb2[0]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n-          const std::rt::begin_panic::<&str>(const \"explicit panic\"); // bb2[1]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n                                            // + val: Value(Scalar(<ZST>))"}, {"sha": "3569b9897f96cad1a573dd736488e9582b0bad00", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.PreCodegen.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,13 +4,13 @@ fn hello() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n \n     bb0: {\n-        _0 = const ();                   // bb0[0]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+        _0 = const ();                   // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+        return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n     }\n }"}, {"sha": "9979ea9549891202df9d3e56b9f8279b497e0fdf", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -12,30 +12,30 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:6:9: 6:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n -                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         _4 = discriminant(_3);           // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+-         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n@@ -45,19 +45,19 @@\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // bb1[0]: scope 0 at $DIR/discriminant.rs:6:59: 6:61\n+          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:6:59: 6:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:6:59: 6:61\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n+-         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n++         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -67,35 +67,35 @@\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // bb3[0]: scope 0 at $DIR/discriminant.rs:6:47: 6:49\n+          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:6:47: 6:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:6:47: 6:49\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          goto -> bb4;                     // bb3[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // bb4[0]: scope 0 at $DIR/discriminant.rs:6:13: 6:68\n+          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:6:13: 6:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:6:67: 6:68\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:6:67: 6:68\n-          StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = const ();                   // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:6:67: 6:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:6:68: 6:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:5:11: 7:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:5:11: 7:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:7:1: 7:2\n-          return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:7:2: 7:2\n       }\n   }\n   "}, {"sha": "ec0341e3de251e9768232f65683a6a604d3ad5d4", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -12,30 +12,30 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:6:9: 6:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n -                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         _4 = discriminant(_3);           // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+-         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -45,19 +45,19 @@\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // bb1[0]: scope 0 at $DIR/discriminant.rs:6:59: 6:61\n+          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:6:59: 6:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:6:59: 6:61\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n+-         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n++         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -67,35 +67,35 @@\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // bb3[0]: scope 0 at $DIR/discriminant.rs:6:47: 6:49\n+          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:6:47: 6:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:6:47: 6:49\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          goto -> bb4;                     // bb3[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // bb4[0]: scope 0 at $DIR/discriminant.rs:6:13: 6:68\n+          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:6:13: 6:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:6:67: 6:68\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:6:67: 6:68\n-          StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = const ();                   // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:6:67: 6:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:6:68: 6:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:5:11: 7:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/discriminant.rs:5:11: 7:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:7:1: 7:2\n-          return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:7:2: 7:2\n       }\n   }\n   "}, {"sha": "941cde9172a6f5356ec4421e803685d3004ae5c9", "filename": "src/test/mir-opt/const_prop/indirect/rustc.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,10 +11,10 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/indirect.rs:5:9: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/indirect.rs:5:13: 5:25\n--         _2 = const 2u32 as u8 (Misc);    // bb0[2]: scope 0 at $DIR/indirect.rs:5:13: 5:25\n-+         _2 = const 2u8;                  // bb0[2]: scope 0 at $DIR/indirect.rs:5:13: 5:25\n+          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:5:9: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n+-         _2 = const 2u32 as u8 (Misc);    // scope 0 at $DIR/indirect.rs:5:13: 5:25\n++         _2 = const 2u8;                  // scope 0 at $DIR/indirect.rs:5:13: 5:25\n                                            // ty::Const\n -                                          // + ty: u32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -23,18 +23,18 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/indirect.rs:5:14: 5:18\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n--         _3 = CheckedAdd(move _2, const 1u8); // bb0[3]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n+-         _3 = CheckedAdd(move _2, const 1u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // + span: $DIR/indirect.rs:5:13: 5:25\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-+         _3 = (const 3u8, const false);   // bb0[3]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         _3 = (const 3u8, const false);   // scope 0 at $DIR/indirect.rs:5:13: 5:29\n                                            // ty::Const\n                                            // + ty: u8\n -                                          // + val: Value(Scalar(0x01))\n +                                          // + val: Value(Scalar(0x03))\n                                            // mir::Constant\n -                                          // + span: $DIR/indirect.rs:5:28: 5:29\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n--         assert(!move (_3.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[4]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n+-         assert(!move (_3.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n +                                          // ty::Const\n@@ -43,7 +43,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[4]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n@@ -53,24 +53,24 @@\n       }\n   \n       bb1: {\n--         _1 = move (_3.0: u8);            // bb1[0]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+         _1 = const 3u8;                  // bb1[0]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n+-         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         _1 = const 3u8;                  // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x03))\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n-          StorageDead(_2);                 // bb1[1]: scope 0 at $DIR/indirect.rs:5:28: 5:29\n-          _0 = const ();                   // bb1[2]: scope 0 at $DIR/indirect.rs:4:11: 6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:5:28: 5:29\n+          _0 = const ();                   // scope 0 at $DIR/indirect.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/indirect.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[3]: scope 0 at $DIR/indirect.rs:6:1: 6:2\n-          return;                          // bb1[4]: scope 0 at $DIR/indirect.rs:6:2: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/indirect.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "c26494bdc1042959b0905e47d91170cb6d85db3d", "filename": "src/test/mir-opt/const_prop/issue-66971/rustc.main.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -8,18 +8,18 @@\n       let mut _3: ();                      // in scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n--         _3 = ();                         // bb0[3]: scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n-+         _3 = const ();                   // bb0[3]: scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+-         _3 = ();                         // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n++         _3 = const ();                   // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n +                                          // ty::Const\n +                                          // + ty: ()\n +                                          // + val: Value(Scalar(<ZST>))\n +                                          // mir::Constant\n +                                          // + span: $DIR/issue-66971.rs:16:13: 16:15\n +                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          _2 = (move _3, const 0u8, const 0u8); // bb0[4]: scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n+          _2 = (move _3, const 0u8, const 0u8); // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n@@ -32,8 +32,8 @@\n                                            // mir::Constant\n                                            // + span: $DIR/issue-66971.rs:16:20: 16:21\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/issue-66971.rs:16:21: 16:22\n-          _1 = const encode(move _2) -> bb1; // bb0[6]: scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:16:21: 16:22\n+          _1 = const encode(move _2) -> bb1; // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n                                            // ty::Const\n                                            // + ty: fn(((), u8, u8)) {encode}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -43,16 +43,16 @@\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/issue-66971.rs:16:22: 16:23\n-          StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/issue-66971.rs:16:23: 16:24\n-          _0 = const ();                   // bb1[2]: scope 0 at $DIR/issue-66971.rs:15:11: 17:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-66971.rs:16:22: 16:23\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-66971.rs:16:23: 16:24\n+          _0 = const ();                   // scope 0 at $DIR/issue-66971.rs:15:11: 17:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-66971.rs:15:11: 17:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb1[3]: scope 0 at $DIR/issue-66971.rs:17:2: 17:2\n+          return;                          // scope 0 at $DIR/issue-66971.rs:17:2: 17:2\n       }\n   }\n   "}, {"sha": "e328febb407ae4805b9be02c3dbc09821d5183b8", "filename": "src/test/mir-opt/const_prop/issue-67019/rustc.main.ConstProp.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -8,10 +8,10 @@\n       let mut _3: (u8, u8);                // in scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-          _3 = (const 1u8, const 2u8);     // bb0[3]: scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          _3 = (const 1u8, const 2u8);     // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x01))\n@@ -26,9 +26,9 @@\n -                                          // + span: $DIR/issue-67019.rs:11:15: 11:16\n +                                          // + span: $DIR/issue-67019.rs:11:11: 11:17\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-          _2 = (move _3,);                 // bb0[4]: scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-          StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n-          _1 = const test(move _2) -> bb1; // bb0[6]: scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n+          _2 = (move _3,);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n+          _1 = const test(move _2) -> bb1; // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n                                            // ty::Const\n                                            // + ty: fn(((u8, u8),)) {test}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -38,16 +38,16 @@\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/issue-67019.rs:11:19: 11:20\n-          StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/issue-67019.rs:11:20: 11:21\n-          _0 = const ();                   // bb1[2]: scope 0 at $DIR/issue-67019.rs:10:11: 12:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-67019.rs:11:19: 11:20\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-67019.rs:11:20: 11:21\n+          _0 = const ();                   // scope 0 at $DIR/issue-67019.rs:10:11: 12:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-67019.rs:10:11: 12:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb1[3]: scope 0 at $DIR/issue-67019.rs:12:2: 12:2\n+          return;                          // scope 0 at $DIR/issue-67019.rs:12:2: 12:2\n       }\n   }\n   "}, {"sha": "9bd9bfa9f27968d9ab1045d625ff32c8bae367d3", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -23,9 +23,9 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n--         _2 = CheckedAdd(const 2i32, const 2i32); // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = (const 4i32, const false);  // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+-         _2 = CheckedAdd(const 2i32, const 2i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _2 = (const 4i32, const false);  // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                            // ty::Const\n                                            // + ty: i32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -43,10 +43,10 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n--         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n@@ -56,17 +56,17 @@\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: i32);           // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _1 = const 4i32;                 // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-          StorageLive(_3);                 // bb1[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-          StorageLive(_4);                 // bb1[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb1[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -103,31 +103,31 @@\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-          StorageLive(_5);                 // bb1[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _5 = const 3usize;               // bb1[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          _5 = const 3usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000003))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n-          _6 = const 6usize;               // bb1[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+          _6 = const 6usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000006))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000006)) }\n--         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -137,19 +137,19 @@\n       }\n   \n       bb2: {\n--         _3 = _4[_5];                     // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _3 = const 3i32;                 // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _3 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000003))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-          StorageDead(_5);                 // bb2[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-          StorageLive(_9);                 // bb2[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          _9 = Point { x: const 12u32, y: const 42u32 }; // bb2[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          _9 = Point { x: const 12u32, y: const 42u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000000c))\n@@ -162,26 +162,26 @@\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n--         _8 = (_9.1: u32);                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+         _8 = const 42u32;                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n++         _8 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n-          _0 = const ();                   // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n+          _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          return;                          // bb2[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n       }\n   }\n   "}, {"sha": "8ea9316c7d49b60416b2862244574e9494280e0e", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -16,40 +16,40 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4i32;                 // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3i32;                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        _2 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42u32;                // bb0[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _3 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+        _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_3);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[8]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[10]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "1da763ec9558aac38c46fe15c6750a8fec68e523", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -23,9 +23,9 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n--         _2 = CheckedAdd(const 2i32, const 2i32); // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = (const 4i32, const false);  // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+-         _2 = CheckedAdd(const 2i32, const 2i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _2 = (const 4i32, const false);  // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                            // ty::Const\n                                            // + ty: i32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -43,10 +43,10 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n--         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n@@ -56,17 +56,17 @@\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: i32);           // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _1 = const 4i32;                 // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-          StorageLive(_3);                 // bb1[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-          StorageLive(_4);                 // bb1[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb1[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -103,31 +103,31 @@\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-          StorageLive(_5);                 // bb1[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _5 = const 3usize;               // bb1[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          _5 = const 3usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000003))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-          _6 = const 6usize;               // bb1[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+          _6 = const 6usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000006))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n--         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -137,19 +137,19 @@\n       }\n   \n       bb2: {\n--         _3 = _4[_5];                     // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _3 = const 3i32;                 // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _3 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000003))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-          StorageDead(_5);                 // bb2[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-          StorageLive(_9);                 // bb2[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          _9 = Point { x: const 12u32, y: const 42u32 }; // bb2[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          _9 = Point { x: const 12u32, y: const 42u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000000c))\n@@ -162,26 +162,26 @@\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n--         _8 = (_9.1: u32);                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+         _8 = const 42u32;                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n++         _8 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n-          _0 = const ();                   // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n+          _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          return;                          // bb2[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n       }\n   }\n   "}, {"sha": "8ea9316c7d49b60416b2862244574e9494280e0e", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -16,40 +16,40 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4i32;                 // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3i32;                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        _2 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42u32;                // bb0[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _3 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        _0 = const ();                   // bb0[6]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+        _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_3);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[8]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[10]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "bbe0d106011473e6d99ff3f6b18a1f9803bcb287", "filename": "src/test/mir-opt/const_prop/read_immutable_static/rustc.main.ConstProp.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,62 +13,62 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          _3 = const {alloc0+0x0: &u8};    // bb0[3]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n+          StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          _3 = const {alloc0+0x0: &u8};    // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &u8\n                                            // + val: Value(Scalar(alloc0+0x0))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0x0)) }\n--         _2 = (*_3);                      // bb0[4]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-+         _2 = const 2u8;                  // bb0[4]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+-         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n++         _2 = const 2u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x02))\n +                                          // mir::Constant\n +                                          // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-          StorageLive(_4);                 // bb0[5]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-          StorageLive(_5);                 // bb0[6]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-          _5 = const {alloc0+0x0: &u8};    // bb0[7]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          _5 = const {alloc0+0x0: &u8};    // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // ty::Const\n                                            // + ty: &u8\n                                            // + val: Value(Scalar(alloc0+0x0))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0x0)) }\n--         _4 = (*_5);                      // bb0[8]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n--         _1 = Add(move _2, move _4);      // bb0[9]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n-+         _4 = const 2u8;                  // bb0[8]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+-         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+-         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n++         _4 = const 2u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x02))\n +                                          // mir::Constant\n +                                          // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-+         _1 = const 4u8;                  // bb0[9]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n++         _1 = const 4u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x04))\n +                                          // mir::Constant\n +                                          // + span: $DIR/read_immutable_static.rs:7:13: 7:22\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x04)) }\n-          StorageDead(_4);                 // bb0[10]: scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n-          StorageDead(_2);                 // bb0[11]: scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n-          StorageDead(_5);                 // bb0[12]: scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n-          StorageDead(_3);                 // bb0[13]: scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n-          _0 = const ();                   // bb0[14]: scope 0 at $DIR/read_immutable_static.rs:6:11: 8:2\n+          StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n+          StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n+          StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n+          StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n+          _0 = const ();                   // scope 0 at $DIR/read_immutable_static.rs:6:11: 8:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:6:11: 8:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb0[15]: scope 0 at $DIR/read_immutable_static.rs:8:1: 8:2\n-          return;                          // bb0[16]: scope 0 at $DIR/read_immutable_static.rs:8:2: 8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/read_immutable_static.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "dcd3d4019811ee16f493bcfd9d415df8479231b3", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -9,34 +9,34 @@\n       let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-          _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n-          _2 = _4;                         // bb0[3]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n--         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-+         _1 = const 4i32;                 // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+          _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+-         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n++         _1 = const 4i32;                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:5: 5:10\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-          StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb0[8]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n+          return;                          // scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "ef696f1ab8052a137f583829b41af9865aff10a2", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -9,11 +9,11 @@\n +     let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n--         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n--         _3 = const 4i32;                 // bb0[3]: scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n-+         _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n+-         _3 = const 4i32;                 // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n++         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000004))\n@@ -22,27 +22,22 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/ref_deref.rs:5:8: 5:9\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n--         _2 = &_3;                        // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n--         _1 = (*_2);                      // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n--         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n--         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n--         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n--         _0 = const ();                   // bb0[9]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n+-         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n-+         _2 = &(*_4);                     // bb0[3]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-+         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-+         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-+         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-+         _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n++         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         return;                          // bb0[10]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n-+         return;                          // bb0[8]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n+          return;                          // scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "dd2f5bd90642856262166d96a0ba80792b071f13", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -9,27 +9,27 @@\n       let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-          _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n                                            // + ty: &(i32, i32)\n                                            // + val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n-          _2 = &((*_4).1: i32);            // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-          _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-          StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+          _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n+          return;                          // scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "7f23f5ea7a69a8e456f7feafe86f056bd2e26b2a", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -9,11 +9,11 @@\n +     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n--         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n--         _3 = (const 4i32, const 5i32);   // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n-+         _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+-         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n+-         _3 = (const 4i32, const 5i32);   // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n++         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000004))\n@@ -22,33 +22,28 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/ref_deref_project.rs:5:9: 5:10\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-+                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n-+         _2 = &((*_4).1: i32);            // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-+         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-+         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-+         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-+         _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n-                                           // ty::Const\n+-                                          // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000005))\n -                                          // mir::Constant\n -                                          // + span: $DIR/ref_deref_project.rs:5:12: 5:13\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n--         _2 = &(_3.1: i32);               // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n--         _1 = (*_2);                      // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n--         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n--         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n--         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n--         _0 = const ();                   // bb0[9]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n--                                          // ty::Const\n+-         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n++                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n++         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+-         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+                                           // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         return;                          // bb0[10]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n-+         return;                          // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n+          return;                          // scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "93fe856c8e81d2c9c565368bc8f881c5a5f5956e", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr/rustc.main.ConstProp.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,29 +10,29 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n-          _3 = const main as fn() (Pointer(ReifyFnPointer)); // bb0[3]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n+          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n+          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n+          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n+          _3 = const main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // ty::Const\n                                            // + ty: fn() {main}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n-          _2 = move _3 as usize (Misc);    // bb0[4]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n-          StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n-          _1 = move _2 as *const fn() (Misc); // bb0[6]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n-          StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n-          StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n-          _0 = const ();                   // bb0[9]: scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2\n+          _2 = move _3 as usize (Misc);    // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n+          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n+          _1 = move _2 as *const fn() (Misc); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n+          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n+          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n+          _0 = const ();                   // scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:3:11: 5:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb0[10]: scope 0 at $DIR/reify_fn_ptr.rs:5:2: 5:2\n+          return;                          // scope 0 at $DIR/reify_fn_ptr.rs:5:2: 5:2\n       }\n   }\n   "}, {"sha": "4ccfe1838d9cceca5f089ac72481ccc6cc7654c6", "filename": "src/test/mir-opt/const_prop/repeat/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,41 +14,41 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/repeat.rs:6:9: 6:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          _3 = [const 42u32; 8];           // bb0[3]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:6:9: 6:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          _3 = [const 42u32; 8];           // scope 0 at $DIR/repeat.rs:6:18: 6:25\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:19: 6:21\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _4 = const 2usize;               // bb0[5]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          _4 = const 2usize;               // scope 0 at $DIR/repeat.rs:6:26: 6:27\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:26: 6:27\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n-          _5 = const 8usize;               // bb0[6]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          _5 = const 8usize;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000008))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:18: 6:28\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000008)) }\n--         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -58,9 +58,9 @@\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _1 = Add(move _2, const 0u32);   // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+         _2 = const 42u32;                // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _1 = Add(move _2, const 0u32);   // scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _2 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000000))\n@@ -70,25 +70,25 @@\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-+         _1 = const 42u32;                // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _1 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:32\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:32\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:6:31: 6:32\n-          StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          _0 = const ();                   // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:6:31: 6:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:5:11: 7:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:5:11: 7:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:7:1: 7:2\n-          return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/repeat.rs:7:2: 7:2\n       }\n   }\n   "}, {"sha": "fe9d16c4ffabb91b851979226413f5c0335402f3", "filename": "src/test/mir-opt/const_prop/repeat/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,41 +14,41 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/repeat.rs:6:9: 6:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          _3 = [const 42u32; 8];           // bb0[3]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:6:9: 6:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          _3 = [const 42u32; 8];           // scope 0 at $DIR/repeat.rs:6:18: 6:25\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:19: 6:21\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _4 = const 2usize;               // bb0[5]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          _4 = const 2usize;               // scope 0 at $DIR/repeat.rs:6:26: 6:27\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000002))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:26: 6:27\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _5 = const 8usize;               // bb0[6]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          _5 = const 8usize;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000008))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:18: 6:28\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n--         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -58,9 +58,9 @@\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _1 = Add(move _2, const 0u32);   // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+         _2 = const 42u32;                // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _1 = Add(move _2, const 0u32);   // scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _2 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000000))\n@@ -70,25 +70,25 @@\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-+         _1 = const 42u32;                // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _1 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:32\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:32\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:6:31: 6:32\n-          StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          _0 = const ();                   // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:6:31: 6:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:5:11: 7:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:5:11: 7:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:7:1: 7:2\n-          return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/repeat.rs:7:2: 7:2\n       }\n   }\n   "}, {"sha": "fc7d028277bd9ad18a156e596668bf7512db4217", "filename": "src/test/mir-opt/const_prop/return_place/rustc.add.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,8 +6,8 @@\n       let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:6:5: 6:10\n   \n       bb0: {\n--         _1 = CheckedAdd(const 2u32, const 2u32); // bb0[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         _1 = (const 4u32, const false);  // bb0[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         _1 = CheckedAdd(const 2u32, const 2u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         _1 = (const 4u32, const false);  // scope 0 at $DIR/return_place.rs:6:5: 6:10\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -25,10 +25,10 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/return_place.rs:6:9: 6:10\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n--         assert(!move (_1.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[1]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         assert(!move (_1.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[1]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n@@ -38,15 +38,15 @@\n       }\n   \n       bb1: {\n--         _0 = move (_1.0: u32);           // bb1[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         _0 = const 4u32;                 // bb1[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         _0 = const 4u32;                 // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n-          return;                          // bb1[1]: scope 0 at $DIR/return_place.rs:7:2: 7:2\n+          return;                          // scope 0 at $DIR/return_place.rs:7:2: 7:2\n       }\n   }\n   "}, {"sha": "b741c786fb394321fdeec5c09fabd698638983d6", "filename": "src/test/mir-opt/const_prop/return_place/rustc.add.PreCodegen.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,13 +4,13 @@ fn add() -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:5:13: 5:16\n \n     bb0: {\n-        _0 = const 4u32;                 // bb0[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n+        _0 = const 4u32;                 // scope 0 at $DIR/return_place.rs:6:5: 6:10\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/return_place.rs:6:5: 6:10\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/return_place.rs:7:2: 7:2\n+        return;                          // scope 0 at $DIR/return_place.rs:7:2: 7:2\n     }\n }"}, {"sha": "9471dbef410d1624347514ec7a355a7ce9d32718", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,47 +14,47 @@\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/slice_len.rs:5:5: 5:30\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _9 = const main::promoted[0];    // bb0[4]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n                                            // + val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0])) }\n-          _4 = _9;                         // bb0[5]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _3 = _4;                         // bb0[6]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // bb0[7]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageDead(_3);                 // bb0[8]: scope 0 at $DIR/slice_len.rs:5:18: 5:19\n-          StorageLive(_6);                 // bb0[9]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _6 = const 1usize;               // bb0[10]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _6 = const 1usize;               // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n--         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _7 = const 3usize;               // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000003))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n-+         _8 = const true;                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -64,26 +64,26 @@\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _1 = const 2u32;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          StorageDead(_6);                 // bb1[1]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          _0 = const ();                   // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:6:2: 6:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "3ae88e0d7986351d7025e7e1dd5fb9d874e4f2b6", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,47 +14,47 @@\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/slice_len.rs:5:5: 5:30\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _9 = const main::promoted[0];    // bb0[4]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n                                            // + val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0])) }\n-          _4 = _9;                         // bb0[5]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _3 = _4;                         // bb0[6]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // bb0[7]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageDead(_3);                 // bb0[8]: scope 0 at $DIR/slice_len.rs:5:18: 5:19\n-          StorageLive(_6);                 // bb0[9]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _6 = const 1usize;               // bb0[10]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _6 = const 1usize;               // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000001))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n--         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _7 = const 3usize;               // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000003))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-+         _8 = const true;                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n@@ -64,26 +64,26 @@\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _1 = const 2u32;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          StorageDead(_6);                 // bb1[1]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          _0 = const ();                   // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:6:2: 6:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "8072424729ab043c410a0afa19962287e965612f", "filename": "src/test/mir-opt/const_prop/switch_int/rustc.main.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,16 +6,16 @@\n       let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:7:11: 7:12\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-          _1 = const 1i32;                 // bb0[1]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          _1 = const 1i32;                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:7:11: 7:12\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n--         switchInt(_1) -> [1i32: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n-+         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+-         switchInt(_1) -> [1i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n++         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000001))\n@@ -25,7 +25,7 @@\n       }\n   \n       bb1: {\n-          _0 = const foo(const -1i32) -> bb3; // bb1[0]: scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+          _0 = const foo(const -1i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -41,7 +41,7 @@\n       }\n   \n       bb2: {\n-          _0 = const foo(const 0i32) -> bb3; // bb2[0]: scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+          _0 = const foo(const 0i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -57,8 +57,8 @@\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/switch_int.rs:11:1: 11:2\n-          return;                          // bb3[1]: scope 0 at $DIR/switch_int.rs:11:2: 11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:11:1: 11:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:11:2: 11:2\n       }\n   }\n   "}, {"sha": "51f3bf20c1aea36277d07f4f97c9a3e7c11330c3", "filename": "src/test/mir-opt/const_prop/switch_int/rustc.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,26 +6,26 @@\n       let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:7:11: 7:12\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-          _1 = const 1i32;                 // bb0[1]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          _1 = const 1i32;                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:7:11: 7:12\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n--         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+-         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n -                                          // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000001))\n -                                          // mir::Constant\n -                                          // + span: $DIR/switch_int.rs:8:9: 8:10\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+         goto -> bb2;                     // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n++         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n       }\n   \n       bb1: {\n-          _0 = const foo(const -1i32) -> bb3; // bb1[0]: scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+          _0 = const foo(const -1i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -41,7 +41,7 @@\n       }\n   \n       bb2: {\n-          _0 = const foo(const 0i32) -> bb3; // bb2[0]: scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+          _0 = const foo(const 0i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -57,8 +57,8 @@\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/switch_int.rs:11:1: 11:2\n-          return;                          // bb3[1]: scope 0 at $DIR/switch_int.rs:11:2: 11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:11:1: 11:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:11:2: 11:2\n       }\n   }\n   "}, {"sha": "f2838638aca0e3c936f8b532402bfc1a13e30946", "filename": "src/test/mir-opt/copy_propagation/rustc.test.CopyPropagation.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation%2Frustc.test.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation%2Frustc.test.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation%2Frustc.test.CopyPropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,15 +11,15 @@\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n--         _2 = _1;                         // bb0[1]: scope 0 at $DIR/copy_propagation.rs:4:13: 4:14\n--         _0 = _2;                         // bb0[2]: scope 1 at $DIR/copy_propagation.rs:5:5: 5:6\n--         StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/copy_propagation.rs:6:1: 6:2\n-+         nop;                             // bb0[0]: scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n-+         nop;                             // bb0[1]: scope 0 at $DIR/copy_propagation.rs:4:13: 4:14\n-+         _0 = _1;                         // bb0[2]: scope 1 at $DIR/copy_propagation.rs:5:5: 5:6\n-+         nop;                             // bb0[3]: scope 0 at $DIR/copy_propagation.rs:6:1: 6:2\n-          return;                          // bb0[4]: scope 0 at $DIR/copy_propagation.rs:6:2: 6:2\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation.rs:4:13: 4:14\n+-         _0 = _2;                         // scope 1 at $DIR/copy_propagation.rs:5:5: 5:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation.rs:6:1: 6:2\n++         nop;                             // scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n++         nop;                             // scope 0 at $DIR/copy_propagation.rs:4:13: 4:14\n++         _0 = _1;                         // scope 1 at $DIR/copy_propagation.rs:5:5: 5:6\n++         nop;                             // scope 0 at $DIR/copy_propagation.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/copy_propagation.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "b976449ca6d32789d2d6a4b096bade0b00e87306", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.arg_src.CopyPropagation.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,18 +10,18 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n-          _2 = _1;                         // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n-          _1 = const 123i32;               // bb0[2]: scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n+          _1 = const 123i32;               // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000007b))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:29:5: 29:12\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000007b)) }\n-          _0 = _2;                         // bb0[3]: scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n-          StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n-          return;                          // bb0[5]: scope 0 at $DIR/copy_propagation_arg.rs:31:2: 31:2\n+          _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:31:2: 31:2\n       }\n   }\n   "}, {"sha": "26f8068f674eff492bc73415257a030508450097", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.bar.CopyPropagation.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -8,10 +8,10 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n-          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n-          _3 = _1;                         // bb0[2]: scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n-          _2 = const dummy(move _3) -> bb1; // bb0[3]: scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n+          _2 = const dummy(move _3) -> bb1; // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n                                            // ty::Const\n                                            // + ty: fn(u8) -> u8 {dummy}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -21,23 +21,23 @@\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n-          StorageDead(_2);                 // bb1[1]: scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n-          _1 = const 5u8;                  // bb1[2]: scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n+          _1 = const 5u8;                  // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x05))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x05)) }\n-          _0 = const ();                   // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:15:19: 18:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb1[4]: scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n       }\n   }\n   "}, {"sha": "ee20553f7cc3fbfbda7670996acf0e033ed858de", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.baz.CopyPropagation.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -7,18 +7,18 @@\n       let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          _2 = _1;                         // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          _1 = move _2;                    // bb0[2]: scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n-          StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          _0 = const ();                   // bb0[4]: scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:21:20: 24:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb0[5]: scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n       }\n   }\n   "}, {"sha": "33aaa7486787dd4131dee22b91a88146a58cb9d5", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.foo.CopyPropagation.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -8,10 +8,10 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n-          _3 = _1;                         // bb0[2]: scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n-          _2 = const dummy(move _3) -> bb1; // bb0[3]: scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n+          _2 = const dummy(move _3) -> bb1; // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n                                            // ty::Const\n                                            // + ty: fn(u8) -> u8 {dummy}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -21,17 +21,17 @@\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-          _1 = move _2;                    // bb1[1]: scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n-          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-          _0 = const ();                   // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:9:19: 12:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb1[4]: scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n       }\n   }\n   "}, {"sha": "524156e0b929d170e73dce36b6e11fca090e1322", "filename": "src/test/mir-opt/deaggregator_test/rustc.bar.Deaggregator.diff", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test%2Frustc.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test%2Frustc.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test%2Frustc.bar.Deaggregator.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -7,28 +7,26 @@\n       let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n-          _2 = _1;                         // bb0[1]: scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n--         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // bb0[2]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-+         (_0.0: usize) = move _2;         // bb0[2]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-+         (_0.1: f32) = const 0f32;        // bb0[3]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n+          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n+          _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n+-         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n++         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n++         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n                                            // ty::Const\n                                            // + ty: f32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/deaggregator_test.rs:9:20: 9:23\n                                            // + literal: Const { ty: f32, val: Value(Scalar(0x00000000)) }\n-+         (_0.2: bool) = const false;      // bb0[4]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n++         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n                                            // ty::Const\n                                            // + ty: bool\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/deaggregator_test.rs:9:28: 9:33\n                                            // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n--         StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35\n--         return;                          // bb0[4]: scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2\n-+         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35\n-+         return;                          // bb0[6]: scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2\n+          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35\n+          return;                          // scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2\n       }\n   }\n   "}, {"sha": "5af9a536693791883a2a1d7a526d060e315c4bdc", "filename": "src/test/mir-opt/deaggregator_test_enum/rustc.bar.Deaggregator.diff", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum%2Frustc.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum%2Frustc.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum%2Frustc.bar.Deaggregator.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -7,15 +7,13 @@\n       let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n-          _2 = _1;                         // bb0[1]: scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n--         _0 = Baz::Foo { x: move _2 };    // bb0[2]: scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n--         StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22\n--         return;                          // bb0[4]: scope 0 at $DIR/deaggregator_test_enum.rs:9:2: 9:2\n-+         ((_0 as Foo).0: usize) = move _2; // bb0[2]: scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n-+         discriminant(_0) = 1;            // bb0[3]: scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n-+         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22\n-+         return;                          // bb0[5]: scope 0 at $DIR/deaggregator_test_enum.rs:9:2: 9:2\n+          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n+          _2 = _1;                         // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n+-         _0 = Baz::Foo { x: move _2 };    // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n++         ((_0 as Foo).0: usize) = move _2; // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n++         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n+          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22\n+          return;                          // scope 0 at $DIR/deaggregator_test_enum.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "bf99f7efb4dd66f11898fa7aa087ea4ea85523a0", "filename": "src/test/mir-opt/deaggregator_test_enum_2/rustc.test1.Deaggregator.diff", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,38 +10,34 @@\n       let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n   \n       bb0: {\n-          StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          _3 = _1;                         // bb0[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          switchInt(_3) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          switchInt(_3) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // bb1[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n-          _5 = _2;                         // bb1[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n--         _0 = Foo::B(move _5);            // bb1[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n--         StorageDead(_5);                 // bb1[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n--         goto -> bb3;                     // bb1[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n-+         ((_0 as B).0: i32) = move _5;    // bb1[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-+         discriminant(_0) = 1;            // bb1[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-+         StorageDead(_5);                 // bb1[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n-+         goto -> bb3;                     // bb1[5]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+          _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+-         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n+          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n+          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n       }\n   \n       bb2: {\n-          StorageLive(_4);                 // bb2[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n-          _4 = _2;                         // bb2[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n--         _0 = Foo::A(move _4);            // bb2[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n--         StorageDead(_4);                 // bb2[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n--         goto -> bb3;                     // bb2[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n-+         ((_0 as A).0: i32) = move _4;    // bb2[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         discriminant(_0) = 0;            // bb2[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         StorageDead(_4);                 // bb2[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n-+         goto -> bb3;                     // bb2[5]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n+          _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n+-         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n+          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n+          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // bb3[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:15:1: 15:2\n-          return;                          // bb3[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:15:2: 15:2\n+          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:15:1: 15:2\n+          return;                          // scope 0 at $DIR/deaggregator_test_enum_2.rs:15:2: 15:2\n       }\n   }\n   "}, {"sha": "f5d8d0607c60bc72fc3144e1f10b16a630742594", "filename": "src/test/mir-opt/deaggregator_test_multiple/rustc.test.Deaggregator.diff", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,33 +10,24 @@\n       let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n-          _3 = _1;                         // bb0[2]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n--         _2 = Foo::A(move _3);            // bb0[3]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n--         StorageDead(_3);                 // bb0[4]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n--         StorageLive(_4);                 // bb0[5]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n--         StorageLive(_5);                 // bb0[6]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n--         _5 = _1;                         // bb0[7]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n--         _4 = Foo::A(move _5);            // bb0[8]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n--         StorageDead(_5);                 // bb0[9]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26\n--         _0 = [move _2, move _4];         // bb0[10]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:5: 10:27\n--         StorageDead(_4);                 // bb0[11]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n--         StorageDead(_2);                 // bb0[12]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n--         return;                          // bb0[13]: scope 0 at $DIR/deaggregator_test_multiple.rs:11:2: 11:2\n-+         ((_2 as A).0: i32) = move _3;    // bb0[3]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-+         discriminant(_2) = 0;            // bb0[4]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-+         StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n-+         StorageLive(_4);                 // bb0[6]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-+         StorageLive(_5);                 // bb0[7]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n-+         _5 = _1;                         // bb0[8]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n-+         ((_4 as A).0: i32) = move _5;    // bb0[9]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-+         discriminant(_4) = 0;            // bb0[10]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-+         StorageDead(_5);                 // bb0[11]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26\n-+         _0 = [move _2, move _4];         // bb0[12]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:5: 10:27\n-+         StorageDead(_4);                 // bb0[13]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n-+         StorageDead(_2);                 // bb0[14]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n-+         return;                          // bb0[15]: scope 0 at $DIR/deaggregator_test_multiple.rs:11:2: 11:2\n+          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n+          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n+          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n+-         _2 = Foo::A(move _3);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n++         ((_2 as A).0: i32) = move _3;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n++         discriminant(_2) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n+          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n+          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n+          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n+          _5 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n+-         _4 = Foo::A(move _5);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n++         ((_4 as A).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n++         discriminant(_4) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n+          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26\n+          _0 = [move _2, move _4];         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:5: 10:27\n+          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n+          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n+          return;                          // scope 0 at $DIR/deaggregator_test_multiple.rs:11:2: 11:2\n       }\n   }\n   "}, {"sha": "03d258d8f728910388adf2afc5a79a43a9649911", "filename": "src/test/mir-opt/exponential-or/rustc.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -18,96 +18,96 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/exponential-or.rs:7:11: 7:12\n-        switchInt((_1.0: u32)) -> [1u32: bb2, 4u32: bb2, otherwise: bb1]; // bb0[1]: scope 0 at $DIR/exponential-or.rs:8:15: 8:16\n+        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/exponential-or.rs:7:11: 7:12\n+        switchInt((_1.0: u32)) -> [1u32: bb2, 4u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:15: 8:16\n     }\n \n     bb1: {\n-        _0 = const 0u32;                 // bb1[0]: scope 0 at $DIR/exponential-or.rs:9:14: 9:15\n+        _0 = const 0u32;                 // scope 0 at $DIR/exponential-or.rs:9:14: 9:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/exponential-or.rs:9:14: 9:15\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-        goto -> bb10;                    // bb1[1]: scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n     }\n \n     bb2: {\n-        _2 = discriminant((_1.2: std::option::Option<i32>)); // bb2[0]: scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n-        switchInt(move _2) -> [0isize: bb4, 1isize: bb3, otherwise: bb1]; // bb2[1]: scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n+        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n+        switchInt(move _2) -> [0isize: bb4, 1isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n     }\n \n     bb3: {\n-        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1i32: bb4, 8i32: bb4, otherwise: bb1]; // bb3[0]: scope 0 at $DIR/exponential-or.rs:8:42: 8:43\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1i32: bb4, 8i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:42: 8:43\n     }\n \n     bb4: {\n-        _5 = Le(const 6u32, (_1.3: u32)); // bb4[0]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        _5 = Le(const 6u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000006))\n                                          // mir::Constant\n                                          // + span: $DIR/exponential-or.rs:8:62: 8:67\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000006)) }\n-        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // bb4[1]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n     }\n \n     bb5: {\n-        _6 = Le((_1.3: u32), const 9u32); // bb5[0]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        _6 = Le((_1.3: u32), const 9u32); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000009))\n                                          // mir::Constant\n                                          // + span: $DIR/exponential-or.rs:8:62: 8:67\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000009)) }\n-        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // bb5[1]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n     }\n \n     bb6: {\n-        _3 = Le(const 13u32, (_1.3: u32)); // bb6[0]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        _3 = Le(const 13u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000000d))\n                                          // mir::Constant\n                                          // + span: $DIR/exponential-or.rs:8:70: 8:77\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000000d)) }\n-        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // bb6[1]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n     }\n \n     bb7: {\n-        _4 = Le((_1.3: u32), const 16u32); // bb7[0]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        _4 = Le((_1.3: u32), const 16u32); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000010))\n                                          // mir::Constant\n                                          // + span: $DIR/exponential-or.rs:8:70: 8:77\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000010)) }\n-        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // bb7[1]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n     }\n \n     bb8: {\n-        falseEdges -> [real: bb9, imaginary: bb1]; // bb8[0]: scope 0 at $DIR/exponential-or.rs:8:9: 8:79\n+        falseEdges -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:8:9: 8:79\n     }\n \n     bb9: {\n-        StorageLive(_7);                 // bb9[0]: scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n-        _7 = (_1.0: u32);                // bb9[1]: scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n-        StorageLive(_8);                 // bb9[2]: scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n-        _8 = (_1.3: u32);                // bb9[3]: scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n-        StorageLive(_9);                 // bb9[4]: scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n-        _9 = _7;                         // bb9[5]: scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n-        StorageLive(_10);                // bb9[6]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        _10 = _8;                        // bb9[7]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        _0 = BitXor(move _9, move _10);  // bb9[8]: scope 1 at $DIR/exponential-or.rs:8:83: 8:88\n-        StorageDead(_10);                // bb9[9]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        StorageDead(_9);                 // bb9[10]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        StorageDead(_8);                 // bb9[11]: scope 0 at $DIR/exponential-or.rs:8:88: 8:89\n-        StorageDead(_7);                 // bb9[12]: scope 0 at $DIR/exponential-or.rs:8:88: 8:89\n-        goto -> bb10;                    // bb9[13]: scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n+        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n+        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n+        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n+        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n+        StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n+        _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n+        StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        _10 = _8;                        // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential-or.rs:8:83: 8:88\n+        StorageDead(_10);                // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:8:88: 8:89\n+        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:8:88: 8:89\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n     }\n \n     bb10: {\n-        return;                          // bb10[0]: scope 0 at $DIR/exponential-or.rs:11:2: 11:2\n+        return;                          // scope 0 at $DIR/exponential-or.rs:11:2: 11:2\n     }\n }"}, {"sha": "c88b142428a3f6851a2985a78a2c42937f9b65a4", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -20,61 +20,61 @@ fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15:\n     }\n \n     bb0: {\n-        _9 = discriminant((*_1));        // bb0[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _9) -> [0u32: bb7, 3u32: bb11, otherwise: bb12]; // bb0[1]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        _9 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _9) -> [0u32: bb7, 3u32: bb11, otherwise: bb12]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb2 (cleanup): {\n-        nop;                             // bb2[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb8;                     // bb2[1]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // bb3[0]: scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // bb3[1]: scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb2]; // bb3[2]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb4: {\n-        nop;                             // bb4[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb9;                     // bb4[1]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb5: {\n-        return;                          // bb5[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb6: {\n-        return;                          // bb6[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb7: {\n-        goto -> bb10;                    // bb7[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb10;                    // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb8 (cleanup): {\n-        goto -> bb1;                     // bb8[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb9: {\n-        goto -> bb5;                     // bb9[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb5;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb10: {\n-        goto -> bb6;                     // bb10[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb11: {\n-        StorageLive(_4);                 // bb11[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        StorageLive(_5);                 // bb11[1]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        goto -> bb3;                     // bb11[2]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb12: {\n-        return;                          // bb12[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n }"}, {"sha": "06645860d842dbcaab8e808ebb65929fa601097e", "filename": "src/test/mir-opt/generator-storage-dead-unwind/rustc.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -20,39 +20,39 @@ yields ()\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        _3 = Foo(const 5i32);            // bb0[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n+        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+        _3 = Foo(const 5i32);            // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000005))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:23:21: 23:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-        StorageLive(_4);                 // bb0[2]: scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n-        _4 = Bar(const 6i32);            // bb0[3]: scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        _4 = Bar(const 6i32);            // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000006))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:24:21: 24:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000006)) }\n-        StorageLive(_5);                 // bb0[4]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        StorageLive(_6);                 // bb0[5]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _6 = ();                         // bb0[6]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // bb0[7]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n     bb2: {\n-        StorageDead(_6);                 // bb2[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // bb2[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageLive(_7);                 // bb2[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-        StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _8 = move _3;                    // bb2[4]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // bb2[5]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+        _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n                                          // ty::Const\n                                          // + ty: fn(Foo) {take::<Foo>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -62,33 +62,33 @@ yields ()\n     }\n \n     bb3 (cleanup): {\n-        StorageDead(_3);                 // bb3[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb4: {\n-        StorageDead(_6);                 // bb4[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // bb4[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb5, unwind: bb3]; // bb4[3]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_3) -> [return: bb5, unwind: bb3]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb5: {\n-        StorageDead(_3);                 // bb5[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb6, unwind: bb1]; // bb5[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb6, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb6: {\n-        generator_drop;                  // bb6[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n     bb7: {\n-        StorageDead(_8);                 // bb7[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // bb7[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // bb7[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // bb7[3]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // bb7[4]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // bb7[5]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n                                          // ty::Const\n                                          // + ty: fn(Bar) {take::<Bar>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -98,39 +98,39 @@ yields ()\n     }\n \n     bb8 (cleanup): {\n-        StorageDead(_4);                 // bb8[0]: scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        StorageDead(_3);                 // bb8[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb1;                 // bb8[2]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb9 (cleanup): {\n-        StorageDead(_8);                 // bb9[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // bb9[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        goto -> bb8;                     // bb9[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n     bb10: {\n-        StorageDead(_10);                // bb10[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // bb10[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // bb10[2]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb10[3]: scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        StorageDead(_3);                 // bb10[4]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb12, unwind: bb1]; // bb10[5]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb11 (cleanup): {\n-        StorageDead(_10);                // bb11[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // bb11[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        goto -> bb8;                     // bb11[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n     bb12: {\n-        return;                          // bb12[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n     }\n }"}, {"sha": "84b8af5d6b7bcad88994f0fa85e5e28226b38eb0", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -18,32 +18,32 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n     }\n \n     bb0: {\n-        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))); // bb0[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6]; // bb0[1]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))); // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n     }\n \n     bb1: {\n-        _10 = move _2;                   // bb1[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        nop;                             // bb1[1]: scope 0 at $DIR/generator-tiny.rs:19:13: 19:15\n-        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop) = HasDrop; // bb1[2]: scope 0 at $DIR/generator-tiny.rs:19:18: 19:25\n-        StorageLive(_4);                 // bb1[3]: scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n-        goto -> bb2;                     // bb1[4]: scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:19:13: 19:15\n+        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:19:18: 19:25\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // bb2[0]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        StorageLive(_7);                 // bb2[1]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        _7 = ();                         // bb2[2]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7); // bb2[3]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))) = 3; // bb2[4]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        return;                          // bb2[5]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7); // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))) = 3; // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        return;                          // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // bb3[0]: scope 1 at $DIR/generator-tiny.rs:21:17: 21:18\n-        StorageDead(_6);                 // bb3[1]: scope 1 at $DIR/generator-tiny.rs:21:18: 21:19\n-        StorageLive(_8);                 // bb3[2]: scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n-        _8 = const callee() -> bb4;      // bb3[3]: scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n+        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:21:17: 21:18\n+        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:21:18: 21:19\n+        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n+        _8 = const callee() -> bb4;      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n                                          // ty::Const\n                                          // + ty: fn() {callee}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -53,26 +53,26 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // bb4[0]: scope 1 at $DIR/generator-tiny.rs:22:21: 22:22\n-        _5 = const ();                   // bb4[1]: scope 1 at $DIR/generator-tiny.rs:20:14: 23:10\n+        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:22:21: 22:22\n+        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:20:14: 23:10\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:20:14: 23:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb2;                     // bb4[2]: scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n     }\n \n     bb5: {\n-        StorageLive(_4);                 // bb5[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        StorageLive(_6);                 // bb5[1]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        StorageLive(_7);                 // bb5[2]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        _6 = move _2;                    // bb5[3]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        goto -> bb3;                     // bb5[4]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n     }\n \n     bb6: {\n-        unreachable;                     // bb6[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n     }\n }"}, {"sha": "19748d52ec7e2f2e7e035a2f2b0ce8637fb220d3", "filename": "src/test/mir-opt/inline/inline-any-operand/rustc.bar.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -15,33 +15,33 @@ fn bar() -> bool {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n-        _1 = const foo;                  // bb0[1]: scope 0 at $DIR/inline-any-operand.rs:11:13: 11:16\n+        StorageLive(_1);                 // scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n+        _1 = const foo;                  // scope 0 at $DIR/inline-any-operand.rs:11:13: 11:16\n                                          // ty::Const\n                                          // + ty: fn(i32, i32) -> bool {foo}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:11:13: 11:16\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n-        _2 = _1;                         // bb0[3]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n-        _3 = const 1i32;                 // bb0[4]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n+        _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n+        _3 = const 1i32;                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:12:7: 12:8\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        _4 = const -1i32;                // bb0[5]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _4 = const -1i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0xffffffff))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:12:10: 12:12\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n-        _0 = Eq(move _3, move _4);       // bb0[6]: scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n-        StorageDead(_2);                 // bb0[7]: scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n-        StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2\n-        return;                          // bb0[9]: scope 0 at $DIR/inline-any-operand.rs:13:2: 13:2\n+        _0 = Eq(move _3, move _4);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n+        StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n+        StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2\n+        return;                          // scope 0 at $DIR/inline-any-operand.rs:13:2: 13:2\n     }\n }"}, {"sha": "cea3c59a3e4794e2d9a0c98c7c2bcc726ff9db9a", "filename": "src/test/mir-opt/inline/inline-closure-borrows-arg/rustc.foo.Inline.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg%2Frustc.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg%2Frustc.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg%2Frustc.foo.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -23,8 +23,8 @@ fn foo(_1: T, _2: &i32) -> i32 {\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n-        _3 = [closure@foo::<T>::{{closure}}#0]; // bb0[1]: scope 0 at $DIR/inline-closure-borrows-arg.rs:12:13: 15:6\n+        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+        _3 = [closure@foo::<T>::{{closure}}#0]; // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:13: 15:6\n                                          // closure\n                                          // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[317d]::foo[0]::{{closure}}[0])\n                                          // + substs: [\n@@ -33,22 +33,22 @@ fn foo(_1: T, _2: &i32) -> i32 {\n                                          //     for<'r, 's> extern \"rust-call\" fn((&'r i32, &'s i32)) -> i32,\n                                          //     (),\n                                          // ]\n-        StorageLive(_4);                 // bb0[2]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n-        _4 = &_3;                        // bb0[3]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n-        StorageLive(_5);                 // bb0[4]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_6);                 // bb0[5]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n-        _6 = &(*_2);                     // bb0[6]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n-        StorageLive(_7);                 // bb0[7]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n-        _7 = &(*_2);                     // bb0[8]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n-        _5 = (move _6, move _7);         // bb0[9]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _8 = move (_5.0: &i32);          // bb0[10]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _9 = move (_5.1: &i32);          // bb0[11]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _0 = (*_8);                      // bb0[12]: scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n-        StorageDead(_7);                 // bb0[13]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_6);                 // bb0[14]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_5);                 // bb0[15]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_4);                 // bb0[16]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_3);                 // bb0[17]: scope 0 at $DIR/inline-closure-borrows-arg.rs:17:1: 17:2\n-        return;                          // bb0[18]: scope 0 at $DIR/inline-closure-borrows-arg.rs:17:2: 17:2\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n+        _4 = &_3;                        // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n+        _6 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n+        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+        _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+        _5 = (move _6, move _7);         // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _0 = (*_8);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n+        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:17:1: 17:2\n+        return;                          // scope 0 at $DIR/inline-closure-borrows-arg.rs:17:2: 17:2\n     }\n }"}, {"sha": "eeff914ccffb978036a300f68c5c713213c34723", "filename": "src/test/mir-opt/inline/inline-closure-captures/rustc.foo.Inline.after.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures%2Frustc.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures%2Frustc.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures%2Frustc.foo.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -23,12 +23,12 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n-        StorageLive(_4);                 // bb0[1]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        _4 = &_2;                        // bb0[2]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        StorageLive(_5);                 // bb0[3]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        _5 = &_1;                        // bb0[4]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        _3 = [closure@foo::<T>::{{closure}}#0] { q: move _4, t: move _5 }; // bb0[5]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n+        StorageLive(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        _4 = &_2;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        StorageLive(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        _5 = &_1;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        _3 = [closure@foo::<T>::{{closure}}#0] { q: move _4, t: move _5 }; // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n                                          // closure\n                                          // + def_id: DefId(0:6 ~ inline_closure_captures[317d]::foo[0]::{{closure}}[0])\n                                          // + substs: [\n@@ -37,27 +37,27 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n                                          //     extern \"rust-call\" fn((i32,)) -> (i32, T),\n                                          //     (&i32, &T),\n                                          // ]\n-        StorageDead(_5);                 // bb0[6]: scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageDead(_4);                 // bb0[7]: scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageLive(_6);                 // bb0[8]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n-        _6 = &_3;                        // bb0[9]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n-        StorageLive(_7);                 // bb0[10]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_8);                 // bb0[11]: scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n-        _8 = _2;                         // bb0[12]: scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n-        _7 = (move _8,);                 // bb0[13]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        _11 = move (_7.0: i32);          // bb0[14]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_9);                 // bb0[15]: scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        _9 = (*((*_6).0: &i32));         // bb0[16]: scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        StorageLive(_10);                // bb0[17]: scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        _10 = (*((*_6).1: &T));          // bb0[18]: scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        (_0.0: i32) = move _9;           // bb0[19]: scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        (_0.1: T) = move _10;            // bb0[20]: scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        StorageDead(_10);                // bb0[21]: scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageDead(_9);                 // bb0[22]: scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageDead(_8);                 // bb0[23]: scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n-        StorageDead(_7);                 // bb0[24]: scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n-        StorageDead(_6);                 // bb0[25]: scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n-        StorageDead(_3);                 // bb0[26]: scope 0 at $DIR/inline-closure-captures.rs:13:1: 13:2\n-        return;                          // bb0[27]: scope 0 at $DIR/inline-closure-captures.rs:13:2: 13:2\n+        StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n+        _6 = &_3;                        // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n+        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n+        _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n+        _7 = (move _8,);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        _11 = move (_7.0: i32);          // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_9);                 // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+        _9 = (*((*_6).0: &i32));         // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        _10 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        (_0.0: i32) = move _9;           // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n+        (_0.1: T) = move _10;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_9);                 // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n+        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n+        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:13:1: 13:2\n+        return;                          // scope 0 at $DIR/inline-closure-captures.rs:13:2: 13:2\n     }\n }"}, {"sha": "bd0ec8c7ddbd5ea96aab3f821d6e92c11b89a4ec", "filename": "src/test/mir-opt/inline/inline-closure/rustc.foo.Inline.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure%2Frustc.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure%2Frustc.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure%2Frustc.foo.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -20,8 +20,8 @@ fn foo(_1: T, _2: i32) -> i32 {\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n-        _3 = [closure@foo::<T>::{{closure}}#0]; // bb0[1]: scope 0 at $DIR/inline-closure.rs:11:13: 11:24\n+        StorageLive(_3);                 // scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n+        _3 = [closure@foo::<T>::{{closure}}#0]; // scope 0 at $DIR/inline-closure.rs:11:13: 11:24\n                                          // closure\n                                          // + def_id: DefId(0:6 ~ inline_closure[317d]::foo[0]::{{closure}}[0])\n                                          // + substs: [\n@@ -30,22 +30,22 @@ fn foo(_1: T, _2: i32) -> i32 {\n                                          //     extern \"rust-call\" fn((i32, i32)) -> i32,\n                                          //     (),\n                                          // ]\n-        StorageLive(_4);                 // bb0[2]: scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n-        _4 = &_3;                        // bb0[3]: scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n-        StorageLive(_5);                 // bb0[4]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        StorageLive(_6);                 // bb0[5]: scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n-        _6 = _2;                         // bb0[6]: scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n-        StorageLive(_7);                 // bb0[7]: scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n-        _7 = _2;                         // bb0[8]: scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n-        _5 = (move _6, move _7);         // bb0[9]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _8 = move (_5.0: i32);           // bb0[10]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _9 = move (_5.1: i32);           // bb0[11]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _0 = _8;                         // bb0[12]: scope 2 at $DIR/inline-closure.rs:11:22: 11:24\n-        StorageDead(_7);                 // bb0[13]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_6);                 // bb0[14]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_5);                 // bb0[15]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_4);                 // bb0[16]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_3);                 // bb0[17]: scope 0 at $DIR/inline-closure.rs:13:1: 13:2\n-        return;                          // bb0[18]: scope 0 at $DIR/inline-closure.rs:13:2: 13:2\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n+        _4 = &_3;                        // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n+        _6 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n+        StorageLive(_7);                 // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n+        _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n+        _5 = (move _6, move _7);         // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:11:22: 11:24\n+        StorageDead(_7);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_3);                 // scope 0 at $DIR/inline-closure.rs:13:1: 13:2\n+        return;                          // scope 0 at $DIR/inline-closure.rs:13:2: 13:2\n     }\n }"}, {"sha": "eca7ae0f549abbf86a09c5bbc137d3fc0c4652c7", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,12 +14,12 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -32,54 +32,51 @@\n -     }\n - \n -     bb1 (cleanup): {\n--         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n -     bb2: {\n--         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = const ();                   // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0usize; // bb0[5]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n-                                           // ty::Const\n++         ((*_4).1: usize) = const 0usize; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n-+         _1 = move _2;                    // bb0[6]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = const ();                   // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-+                                          // ty::Const\n+          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+                                           // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb1]; // bb0[9]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n -     bb3: {\n--         StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--         return;                          // bb3[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n +     bb1 (cleanup): {\n-+         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n++         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n -     bb4 (cleanup): {\n--         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // bb4[0]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n -                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n +     bb2: {\n-+         StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         return;                          // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n++         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "a371fa214f2c31517c5c3b5950bff0b500a88752", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,12 +14,12 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -32,54 +32,51 @@\n -     }\n - \n -     bb1 (cleanup): {\n--         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n -     bb2: {\n--         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = const ();                   // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0usize; // bb0[5]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n-                                           // ty::Const\n++         ((*_4).1: usize) = const 0usize; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000000))\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-+         _1 = move _2;                    // bb0[6]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = const ();                   // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-+                                          // ty::Const\n+          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+                                           // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb1]; // bb0[9]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n -     bb3: {\n--         StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--         return;                          // bb3[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n +     bb1 (cleanup): {\n-+         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n++         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n -     bb4 (cleanup): {\n--         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // bb4[0]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n -                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n +     bb2: {\n-+         StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         return;                          // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n++         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "e83cc92eb43efceded364813b464c37d783d7bf0", "filename": "src/test/mir-opt/inline/inline-retag/rustc.bar.Inline.after.mir", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -23,59 +23,59 @@ fn bar() -> bool {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-retag.rs:11:9: 11:10\n-        _1 = const foo;                  // bb0[1]: scope 0 at $DIR/inline-retag.rs:11:13: 11:16\n+        StorageLive(_1);                 // scope 0 at $DIR/inline-retag.rs:11:9: 11:10\n+        _1 = const foo;                  // scope 0 at $DIR/inline-retag.rs:11:13: 11:16\n                                          // ty::Const\n                                          // + ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:11:13: 11:16\n                                          // + literal: Const { ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n-        _2 = _1;                         // bb0[3]: scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n-        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        StorageLive(_4);                 // bb0[5]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        _10 = const bar::promoted[1];    // bb0[6]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        StorageLive(_2);                 // scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n+        _2 = _1;                         // scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n                                          // ty::Const\n                                          // + ty: &i32\n                                          // + val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n                                          // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[1])) }\n-        Retag(_10);                      // bb0[7]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        _4 = &(*_10);                    // bb0[8]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        Retag(_4);                       // bb0[9]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        _3 = &(*_4);                     // bb0[10]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        Retag(_3);                       // bb0[11]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        StorageLive(_6);                 // bb0[12]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        StorageLive(_7);                 // bb0[13]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        _9 = const bar::promoted[0];     // bb0[14]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        _3 = &(*_4);                     // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        Retag(_3);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        StorageLive(_7);                 // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n                                          // ty::Const\n                                          // + ty: &i32\n                                          // + val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n                                          // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[0])) }\n-        Retag(_9);                       // bb0[15]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        _7 = &(*_9);                     // bb0[16]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        Retag(_7);                       // bb0[17]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        _6 = &(*_7);                     // bb0[18]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        Retag(_6);                       // bb0[19]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        Retag(_3);                       // bb0[20]: scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n-        Retag(_6);                       // bb0[21]: scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n-        StorageLive(_11);                // bb0[22]: scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-        _11 = (*_3);                     // bb0[23]: scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-        StorageLive(_12);                // bb0[24]: scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n-        _12 = (*_6);                     // bb0[25]: scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n-        _0 = Eq(move _11, move _12);     // bb0[26]: scope 2 at $DIR/inline-retag.rs:17:5: 17:13\n-        StorageDead(_12);                // bb0[27]: scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n-        StorageDead(_11);                // bb0[28]: scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n-        StorageDead(_6);                 // bb0[29]: scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n-        StorageDead(_3);                 // bb0[30]: scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n-        StorageDead(_2);                 // bb0[31]: scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n-        StorageDead(_1);                 // bb0[32]: scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n-        StorageDead(_7);                 // bb0[33]: scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n-        StorageDead(_4);                 // bb0[34]: scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n-        return;                          // bb0[35]: scope 0 at $DIR/inline-retag.rs:13:2: 13:2\n+        Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        _6 = &(*_7);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        Retag(_6);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:17:5: 17:13\n+        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n+        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n+        StorageDead(_2);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n+        StorageDead(_1);                 // scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n+        StorageDead(_7);                 // scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n+        StorageDead(_4);                 // scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n+        return;                          // scope 0 at $DIR/inline-retag.rs:13:2: 13:2\n     }\n }"}, {"sha": "a3e0d0a57a7c3af60f6127c9708d1326d238fde7", "filename": "src/test/mir-opt/inline/inline-specialization/rustc.main.Inline.diff", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,9 +11,9 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n--         _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1; // bb0[1]: scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n-+         _1 = const 123u32;               // bb0[1]: scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n+-         _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n++         _1 = const 123u32;               // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n                                            // ty::Const\n -                                          // + ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -25,20 +25,17 @@\n -     }\n - \n -     bb1: {\n--         _0 = const ();                   // bb1[0]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n +                                          // + span: $DIR/inline-specialization.rs:14:31: 14:34\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000007b)) }\n-+         _0 = const ();                   // bb0[2]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n+          _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/inline-specialization.rs:4:11: 6:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n--         return;                          // bb1[2]: scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n-+         StorageDead(_1);                 // bb0[3]: scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n-+         return;                          // bb0[4]: scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "8acc5ad5c0935654ce190deb636008a01e196ee3", "filename": "src/test/mir-opt/inline/inline-trait-method/rustc.test.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method%2Frustc.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method%2Frustc.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method%2Frustc.test.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,9 +6,9 @@ fn test(_1: &dyn X) -> u32 {\n     let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n-        _2 = &(*_1);                     // bb0[1]: scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n-        _0 = const <dyn X as X>::y(move _2) -> bb1; // bb0[2]: scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n+        StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n+        _2 = &(*_1);                     // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n+        _0 = const <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -18,7 +18,7 @@ fn test(_1: &dyn X) -> u32 {\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/inline-trait-method.rs:9:9: 9:10\n-        return;                          // bb1[1]: scope 0 at $DIR/inline-trait-method.rs:10:2: 10:2\n+        StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method.rs:9:9: 9:10\n+        return;                          // scope 0 at $DIR/inline-trait-method.rs:10:2: 10:2\n     }\n }"}, {"sha": "afea1d5ebffa22b80cacec276f2734bc3b5e2a8c", "filename": "src/test/mir-opt/inline/inline-trait-method_2/rustc.test2.Inline.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2%2Frustc.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2%2Frustc.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2%2Frustc.test2.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,12 +10,12 @@ fn test2(_1: &dyn X) -> bool {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        _3 = &(*_1);                     // bb0[2]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        _2 = move _3 as &dyn X (Pointer(Unsize)); // bb0[3]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        StorageDead(_3);                 // bb0[4]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        _0 = const <dyn X as X>::y(move _2) -> bb1; // bb0[5]: scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        StorageLive(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        _3 = &(*_1);                     // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        _0 = const <dyn X as X>::y(move _2) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -25,7 +25,7 @@ fn test2(_1: &dyn X) -> bool {\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/inline-trait-method_2.rs:5:11: 5:12\n-        return;                          // bb1[1]: scope 0 at $DIR/inline-trait-method_2.rs:6:2: 6:2\n+        StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:11: 5:12\n+        return;                          // scope 0 at $DIR/inline-trait-method_2.rs:6:2: 6:2\n     }\n }"}, {"sha": "d6c5220e28f5fee533ec09a4d990ea0f9ecfc39f", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.a.Inline.after.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -12,19 +12,19 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageLive(_4);                 // bb0[2]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-        _4 = &mut (*_1);                 // bb0[3]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-        StorageLive(_5);                 // bb0[4]: scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-        _5 = _4;                         // bb0[5]: scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-        _3 = _5;                         // bb0[6]: scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-        StorageDead(_5);                 // bb0[7]: scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-        _2 = &mut (*_3);                 // bb0[8]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageDead(_4);                 // bb0[9]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n-        _0 = &mut (*_2);                 // bb0[10]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageDead(_3);                 // bb0[11]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:1: 4:2\n-        StorageDead(_2);                 // bb0[12]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:1: 4:2\n-        return;                          // bb0[13]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:2: 4:2\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n+        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _5 = _4;                         // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _3 = _5;                         // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:1: 4:2\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:1: 4:2\n+        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:2: 4:2\n     }\n }"}, {"sha": "2270abc288d861ec559e237c7fa9be4226c66644", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.b.Inline.after.mir", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,22 +13,22 @@ fn b(_1: &mut std::boxed::Box<T>) -> &mut T {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageLive(_4);                 // bb0[2]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n-        _4 = &mut (*_1);                 // bb0[3]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n-        StorageLive(_5);                 // bb0[4]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        StorageLive(_6);                 // bb0[5]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _6 = &mut (*(*_4));              // bb0[6]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _5 = _6;                         // bb0[7]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _3 = _5;                         // bb0[8]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        StorageDead(_6);                 // bb0[9]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        StorageDead(_5);                 // bb0[10]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _2 = &mut (*_3);                 // bb0[11]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageDead(_4);                 // bb0[12]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15\n-        _0 = &mut (*_2);                 // bb0[13]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageDead(_3);                 // bb0[14]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:1: 9:2\n-        StorageDead(_2);                 // bb0[15]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:1: 9:2\n-        return;                          // bb0[16]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:2: 9:2\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n+        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        StorageLive(_6);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _6 = &mut (*(*_4));              // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _5 = _6;                         // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _3 = _5;                         // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        StorageDead(_6);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:1: 9:2\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:2: 9:2\n     }\n }"}, {"sha": "67aea63bd9558f73f740868c5f95b9600a276881", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.c.Inline.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.c.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,13 +10,13 @@ fn c(_1: &[T]) -> &[T] {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n-        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n-        _3 = &(*_1);                     // bb0[2]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n-        _2 = _3;                         // bb0[3]: scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-        _0 = &(*_2);                     // bb0[4]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n-        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:14: 13:15\n-        StorageDead(_2);                 // bb0[6]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:14:1: 14:2\n-        return;                          // bb0[7]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:14:2: 14:2\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n+        _2 = _3;                         // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:14: 13:15\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:14:1: 14:2\n+        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:14:2: 14:2\n     }\n }"}, {"sha": "a929cb1c2fb343c93b086a083ec68dc0b2cb1cac", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.d.Inline.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.d.Inline.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,16 +11,16 @@ fn d(_1: &std::boxed::Box<T>) -> &T {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n-        _3 = &(*_1);                     // bb0[2]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n-        StorageLive(_4);                 // bb0[3]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _4 = &(*(*_3));                  // bb0[4]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _2 = _4;                         // bb0[5]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        StorageDead(_4);                 // bb0[6]: scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _0 = &(*_2);                     // bb0[7]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        StorageDead(_3);                 // bb0[8]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n-        StorageDead(_2);                 // bb0[9]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2\n-        return;                          // bb0[10]: scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:2: 19:2\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n+        StorageLive(_4);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _4 = &(*(*_3));                  // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _2 = _4;                         // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        StorageDead(_4);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2\n+        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:2: 19:2\n     }\n }"}, {"sha": "fa7bd2563ae44d71c1740334e9eaa3c77e922d70", "filename": "src/test/mir-opt/issue-38669/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -12,76 +12,76 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n-        _1 = const false;                // bb0[1]: scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+        _1 = const false;                // scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:5:28: 5:33\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n-        goto -> bb2;                     // bb0[3]: scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n+        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n     }\n \n     bb2: {\n-        falseUnwind -> [real: bb3, cleanup: bb1]; // bb2[0]: scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        falseUnwind -> [real: bb3, cleanup: bb1]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb3: {\n-        StorageLive(_3);                 // bb3[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n-        StorageLive(_4);                 // bb3[1]: scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        _4 = _1;                         // bb3[2]: scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        FakeRead(ForMatchedPlace, _4);   // bb3[3]: scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(_4) -> [false: bb5, otherwise: bb4]; // bb3[4]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n+        _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n+        FakeRead(ForMatchedPlace, _4);   // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n+        switchInt(_4) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n     bb4: {\n-        falseEdges -> [real: bb6, imaginary: bb5]; // bb4[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        falseEdges -> [real: bb6, imaginary: bb5]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n     bb5: {\n-        _3 = const ();                   // bb5[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        _3 = const ();                   // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:7:9: 9:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb5[1]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n-        StorageDead(_3);                 // bb5[2]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n-        _1 = const true;                 // bb5[3]: scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        _1 = const true;                 // scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:10:24: 10:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _2 = const ();                   // bb5[4]: scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n+        _2 = const ();                   // scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:6:10: 11:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb2;                     // bb5[5]: scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb6: {\n-        _0 = const ();                   // bb6[0]: scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n+        _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:8:13: 8:18\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb6[1]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n-        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n-        StorageDead(_1);                 // bb6[3]: scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n-        return;                          // bb6[4]: scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n+        return;                          // scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n     }\n }"}, {"sha": "77763f2d3a0d1b3588ef16b6df064255201e030b", "filename": "src/test/mir-opt/issue-41110/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -12,27 +12,27 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        _5 = const false;                // bb0[0]: scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:9: 8:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        StorageLive(_1);                 // bb0[1]: scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n-        StorageLive(_2);                 // bb0[2]: scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n-        _5 = const true;                 // bb0[3]: scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n+        _5 = const true;                 // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:13: 8:14\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _2 = S;                          // bb0[4]: scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n-        StorageLive(_3);                 // bb0[5]: scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n-        StorageLive(_4);                 // bb0[6]: scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-        _4 = S;                          // bb0[7]: scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-        _3 = const S::id(move _4) -> [return: bb2, unwind: bb4]; // bb0[8]: scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        _2 = S;                          // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n+        _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n+        _3 = const S::id(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n                                          // ty::Const\n                                          // + ty: fn(S) -> S {S::id}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -42,19 +42,19 @@ fn main() -> () {\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n     }\n \n     bb2: {\n-        StorageDead(_4);                 // bb2[0]: scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n-        _5 = const false;                // bb2[1]: scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:13: 8:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // bb2[2]: scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+        _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // ty::Const\n                                          // + ty: fn(S, S) {S::other}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -64,54 +64,54 @@ fn main() -> () {\n     }\n \n     bb3 (cleanup): {\n-        goto -> bb9;                     // bb3[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        goto -> bb9;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb3;                     // bb4[0]: scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n     }\n \n     bb5 (cleanup): {\n-        goto -> bb3;                     // bb5[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb6: {\n-        StorageDead(_3);                 // bb6[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _5 = const false;                // bb6[1]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:27: 8:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        StorageDead(_2);                 // bb6[2]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _0 = const ();                   // bb6[3]: scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:7:11: 9:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n-        return;                          // bb6[5]: scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb1;                 // bb7[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb8 (cleanup): {\n-        _5 = const false;                // bb8[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:27: 8:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        goto -> bb7;                     // bb8[1]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        goto -> bb7;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb9 (cleanup): {\n-        switchInt(_5) -> [false: bb1, otherwise: bb8]; // bb9[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        switchInt(_5) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n }"}, {"sha": "a99846bd15daf4a76bd6bf385c1930b72dce4141", "filename": "src/test/mir-opt/issue-41110/rustc.test.ElaborateDrops.after.mir", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -16,28 +16,28 @@ fn test() -> () {\n     }\n \n     bb0: {\n-        _6 = const false;                // bb0[0]: scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n+        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:15:9: 15:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        StorageLive(_1);                 // bb0[1]: scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n-        _6 = const true;                 // bb0[2]: scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n+        _6 = const true;                 // scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:15:13: 15:14\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _1 = S;                          // bb0[3]: scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n-        StorageLive(_2);                 // bb0[4]: scope 1 at $DIR/issue-41110.rs:16:9: 16:14\n-        _2 = S;                          // bb0[5]: scope 1 at $DIR/issue-41110.rs:16:17: 16:18\n-        StorageLive(_3);                 // bb0[6]: scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n-        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _4 = move _2;                    // bb0[8]: scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _3 = const std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // bb0[9]: scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        _1 = S;                          // scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-41110.rs:16:9: 16:14\n+        _2 = S;                          // scope 1 at $DIR/issue-41110.rs:16:17: 16:18\n+        StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n+        _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n+        _3 = const std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // ty::Const\n                                          // + ty: fn(S) {std::mem::drop::<S>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -47,99 +47,99 @@ fn test() -> () {\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n     }\n \n     bb2: {\n-        StorageDead(_4);                 // bb2[0]: scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n-        StorageDead(_3);                 // bb2[1]: scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n-        StorageLive(_5);                 // bb2[2]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        _6 = const false;                // bb2[3]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        StorageDead(_4);                 // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+        StorageDead(_3);                 // scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n+        StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        _6 = const false;                // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:18:9: 18:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _5 = move _1;                    // bb2[4]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        goto -> bb12;                    // bb2[5]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        _5 = move _1;                    // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb3 (cleanup): {\n-        goto -> bb15;                    // bb3[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb15;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb3;                     // bb4[0]: scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb3;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb5 (cleanup): {\n-        goto -> bb4;                     // bb5[0]: scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n     }\n \n     bb6: {\n-        goto -> bb8;                     // bb6[0]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n     bb7 (cleanup): {\n-        goto -> bb4;                     // bb7[0]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n     bb8: {\n-        StorageDead(_5);                 // bb8[0]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        _0 = const ();                   // bb8[1]: scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:14:15: 19:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_2) -> [return: bb9, unwind: bb3]; // bb8[2]: scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_2) -> [return: bb9, unwind: bb3]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb9: {\n-        StorageDead(_2);                 // bb9[0]: scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb10;                    // bb9[1]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb10: {\n-        _6 = const false;                // bb10[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:19:1: 19:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        StorageDead(_1);                 // bb10[1]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-        return;                          // bb10[2]: scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n \n     bb11 (cleanup): {\n-        _2 = move _5;                    // bb11[0]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb7;                     // bb11[1]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb7;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb12: {\n-        _2 = move _5;                    // bb12[0]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb6;                     // bb12[1]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb13 (cleanup): {\n-        drop(_1) -> bb1;                 // bb13[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb14 (cleanup): {\n-        _6 = const false;                // bb14[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:19:1: 19:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        goto -> bb13;                    // bb14[1]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb13;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb15 (cleanup): {\n-        switchInt(_6) -> [false: bb1, otherwise: bb14]; // bb15[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        switchInt(_6) -> [false: bb1, otherwise: bb14]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n }"}, {"sha": "d263b2515f17a5267e9b449c814378961751f389", "filename": "src/test/mir-opt/issue-41697/32bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -5,7 +5,7 @@\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n \n     bb0: {\n-        _1 = CheckedAdd(const 1usize, const 1usize); // bb0[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        _1 = CheckedAdd(const 1usize, const 1usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n@@ -18,15 +18,15 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // bb0[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb2: {\n-        _0 = move (_1.0: usize);         // bb2[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        return;                          // bb2[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n }"}, {"sha": "6c00f49fb75b1590f697e5f8aa88bffcc8d150d9", "filename": "src/test/mir-opt/issue-41697/64bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -5,7 +5,7 @@\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n \n     bb0: {\n-        _1 = CheckedAdd(const 1usize, const 1usize); // bb0[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        _1 = CheckedAdd(const 1usize, const 1usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -18,15 +18,15 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // bb0[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb2: {\n-        _0 = move (_1.0: usize);         // bb2[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        return;                          // bb2[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n }"}, {"sha": "ce940273c3ef5e1474927133a82a06e06bd84b67", "filename": "src/test/mir-opt/issue-41888/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -21,30 +21,30 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        _9 = const false;                // bb0[0]: scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n+        _9 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:7:9: 7:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _7 = const false;                // bb0[1]: scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n+        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:7:9: 7:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _8 = const false;                // bb0[2]: scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n+        _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:7:9: 7:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        StorageLive(_1);                 // bb0[3]: scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n-        StorageLive(_2);                 // bb0[4]: scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = const cond() -> [return: bb2, unwind: bb3]; // bb0[5]: scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = const cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // ty::Const\n                                          // + ty: fn() -> bool {cond}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -54,215 +54,215 @@ fn main() -> () {\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n+        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n     }\n \n     bb2: {\n-        switchInt(_2) -> [false: bb4, otherwise: bb5]; // bb2[0]: scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb3 (cleanup): {\n-        goto -> bb1;                     // bb3[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb4: {\n-        _0 = const ();                   // bb4[0]: scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:5: 14:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb11;                    // bb4[1]: scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb5: {\n-        StorageLive(_3);                 // bb5[0]: scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n-        StorageLive(_4);                 // bb5[1]: scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n-        _4 = K;                          // bb5[2]: scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n-        _3 = E::F(move _4);              // bb5[3]: scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n-        StorageDead(_4);                 // bb5[4]: scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        goto -> bb14;                    // bb5[5]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n+        _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n+        _3 = E::F(move _4);              // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb6: {\n-        goto -> bb8;                     // bb6[0]: scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n     bb7 (cleanup): {\n-        goto -> bb3;                     // bb7[0]: scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n     bb8: {\n-        StorageDead(_3);                 // bb8[0]: scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        _5 = discriminant(_1);           // bb8[1]: scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0isize: bb10, otherwise: bb9]; // bb8[2]: scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0isize: bb10, otherwise: bb9]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n     bb9: {\n-        _0 = const ();                   // bb9[0]: scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:10:9: 13:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb11;                    // bb9[1]: scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n     bb10: {\n-        StorageLive(_6);                 // bb10[0]: scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _9 = const false;                // bb10[1]: scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n+        StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n+        _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:10:21: 10:23\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _6 = move ((_1 as F).0: K);      // bb10[2]: scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _0 = const ();                   // bb10[3]: scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n+        _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n+        _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:10:29: 13:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_6);                 // bb10[4]: scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb11;                    // bb10[5]: scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n     bb11: {\n-        goto -> bb21;                    // bb11[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb21;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb12: {\n-        _7 = const false;                // bb12[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:15:1: 15:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _8 = const false;                // bb12[1]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:15:1: 15:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _9 = const false;                // bb12[2]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:15:1: 15:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        StorageDead(_1);                 // bb12[3]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb12[4]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        return;                          // bb12[5]: scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n     bb13 (cleanup): {\n-        _7 = const true;                 // bb13[0]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _8 = const true;                 // bb13[1]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _9 = const true;                 // bb13[2]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _1 = move _3;                    // bb13[3]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb7;                     // bb13[4]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb14: {\n-        _7 = const true;                 // bb14[0]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _8 = const true;                 // bb14[1]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _9 = const true;                 // bb14[2]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _1 = move _3;                    // bb14[3]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb6;                     // bb14[4]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb6;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb15: {\n-        _7 = const false;                // bb15[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:15:1: 15:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        goto -> bb12;                    // bb15[1]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb16 (cleanup): {\n-        _7 = const false;                // bb16[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x00))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:15:1: 15:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        goto -> bb1;                     // bb16[1]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb17 (cleanup): {\n-        goto -> bb16;                    // bb17[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb16;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb18: {\n-        drop(_1) -> [return: bb15, unwind: bb16]; // bb18[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        drop(_1) -> [return: bb15, unwind: bb16]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb19 (cleanup): {\n-        drop(_1) -> bb16;                // bb19[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        drop(_1) -> bb16;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb20: {\n-        _10 = discriminant(_1);          // bb20[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0isize: bb15, otherwise: bb18]; // bb20[1]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0isize: bb15, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb21: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb20]; // bb21[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(_7) -> [false: bb15, otherwise: bb20]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb22 (cleanup): {\n-        _11 = discriminant(_1);          // bb22[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0isize: bb17, otherwise: bb19]; // bb22[1]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb23 (cleanup): {\n-        switchInt(_7) -> [false: bb16, otherwise: bb22]; // bb23[0]: scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(_7) -> [false: bb16, otherwise: bb22]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "abf33cce133dd9947eadd3dc1fda6a36dfe77723", "filename": "src/test/mir-opt/issue-49232/rustc.main.mir_map.0.mir", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,93 +13,93 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        goto -> bb1;                     // bb0[0]: scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+        goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb3, cleanup: bb4]; // bb1[0]: scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+        falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n     bb2: {\n-        goto -> bb14;                    // bb2[0]: scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n+        goto -> bb14;                    // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n     }\n \n     bb3: {\n-        StorageLive(_2);                 // bb3[0]: scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n-        StorageLive(_3);                 // bb3[1]: scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        _3 = const true;                 // bb3[2]: scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:8:19: 8:23\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _3);   // bb3[3]: scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        switchInt(_3) -> [false: bb5, otherwise: bb6]; // bb3[4]: scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+        FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        switchInt(_3) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // bb4[0]: scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n     }\n \n     bb5: {\n-        falseEdges -> [real: bb7, imaginary: bb6]; // bb5[0]: scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+        falseEdges -> [real: bb7, imaginary: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n     bb6: {\n-        _0 = const ();                   // bb6[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        _0 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:10:25: 10:30\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb8;                     // bb6[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n     bb7: {\n-        _2 = const 4i32;                 // bb7[0]: scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n+        _2 = const 4i32;                 // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:9:26: 9:27\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-        goto -> bb12;                    // bb7[1]: scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n     bb8: {\n-        StorageDead(_3);                 // bb8[0]: scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n-        goto -> bb9;                     // bb8[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        goto -> bb9;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n     bb9: {\n-        StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n-        goto -> bb2;                     // bb9[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+        goto -> bb2;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n     bb10: {\n-        _4 = const ();                   // bb10[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        _4 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:10:25: 10:30\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        unreachable;                     // bb10[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        unreachable;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n     bb11: {\n-        goto -> bb12;                    // bb11[0]: scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n     bb12: {\n-        FakeRead(ForLet, _2);            // bb12[0]: scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n-        StorageDead(_3);                 // bb12[1]: scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n-        StorageLive(_5);                 // bb12[2]: scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n-        StorageLive(_6);                 // bb12[3]: scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n-        _6 = &_2;                        // bb12[4]: scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n-        _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // bb12[5]: scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+        StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n+        _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n+        _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n                                          // ty::Const\n                                          // + ty: fn(&i32) {std::mem::drop::<&i32>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -109,20 +109,20 @@ fn main() -> () {\n     }\n \n     bb13: {\n-        StorageDead(_6);                 // bb13[0]: scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n-        StorageDead(_5);                 // bb13[1]: scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n-        _1 = const ();                   // bb13[2]: scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n+        StorageDead(_6);                 // scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n+        StorageDead(_5);                 // scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n+        _1 = const ();                   // scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:6:10: 14:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_2);                 // bb13[3]: scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n-        goto -> bb1;                     // bb13[4]: scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+        goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n     bb14: {\n-        return;                          // bb14[0]: scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n+        return;                          // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n     }\n }"}, {"sha": "0b8b03961f2a013e6f5d7edd9e43f22922a079fc", "filename": "src/test/mir-opt/issue-62289/rustc.test.ElaborateDrops.before.mir", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -24,13 +24,13 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        _2 = Box(u32);                   // bb0[2]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _4 = std::option::Option::<u32>::None; // bb0[5]: scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // bb0[6]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        _2 = Box(u32);                   // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _4 = std::option::Option::<u32>::None; // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // ty::Const\n                                          // + ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -40,39 +40,39 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n+        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n \n     bb2: {\n-        StorageDead(_4);                 // bb2[0]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _5 = discriminant(_3);           // bb2[1]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // bb2[2]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n     bb3 (cleanup): {\n-        drop(_2) -> bb1;                 // bb3[0]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        _10 = ((_3 as Ok).0: u32);       // bb4[1]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        (*_2) = _10;                     // bb4[2]: scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageDead(_10);                // bb4[3]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _1 = move _2;                    // bb4[4]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb12, unwind: bb11]; // bb4[5]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageLive(_10);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        drop(_2) -> [return: bb12, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb5: {\n-        unreachable;                     // bb5[0]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n     bb6: {\n-        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _6 = ((_3 as Err).0: std::option::NoneError); // bb6[1]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageLive(_8);                 // bb6[2]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageLive(_9);                 // bb6[3]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _9 = _6;                         // bb6[4]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // bb6[5]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _6 = ((_3 as Err).0: std::option::NoneError); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // ty::Const\n                                          // + ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -82,12 +82,12 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n     }\n \n     bb7: {\n-        return;                          // bb7[0]: scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n     bb8: {\n-        StorageDead(_9);                 // bb8[0]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // bb8[1]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // ty::Const\n                                          // + ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -97,31 +97,31 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n     }\n \n     bb9: {\n-        StorageDead(_8);                 // bb9[0]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageDead(_6);                 // bb9[1]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb10;                // bb9[2]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        drop(_2) -> bb10;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb10: {\n-        StorageDead(_2);                 // bb10[0]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        StorageDead(_1);                 // bb10[1]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // bb10[2]: scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb7;                     // bb10[3]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb1;                 // bb11[0]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n     bb12: {\n-        StorageDead(_2);                 // bb12[0]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // bb12[1]: scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb13;                // bb12[2]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n     bb13: {\n-        StorageDead(_1);                 // bb13[0]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // bb13[1]: scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb7;                     // bb13[2]: scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n }"}, {"sha": "38e04a6399fc239edc2ef7b03f0fd8a3c715e06e", "filename": "src/test/mir-opt/loop_test/rustc.main.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,69 +13,69 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        _2 = const true;                 // bb0[2]: scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+        StorageLive(_1);                 // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+        _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/loop_test.rs:10:8: 10:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(_2) -> [false: bb3, otherwise: bb2]; // bb0[4]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+        switchInt(_2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/loop_test.rs:6:1: 17:2\n+        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n     bb3: {\n-        _1 = const ();                   // bb3[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        _1 = const ();                   // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/loop_test.rs:10:5: 12:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_2);                 // bb3[1]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n-        StorageDead(_1);                 // bb3[2]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n-        StorageLive(_4);                 // bb3[3]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n-        goto -> bb5;                     // bb3[4]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n     bb4: {\n-        _0 = const ();                   // bb4[0]: scope 0 at $DIR/loop_test.rs:11:9: 11:15\n+        _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/loop_test.rs:11:9: 11:15\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n-        StorageDead(_1);                 // bb4[2]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n-        return;                          // bb4[3]: scope 0 at $DIR/loop_test.rs:17:2: 17:2\n+        StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2\n     }\n \n     bb5: {\n-        falseUnwind -> [real: bb6, cleanup: bb1]; // bb5[0]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        falseUnwind -> [real: bb6, cleanup: bb1]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n     bb6: {\n-        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/loop_test.rs:14:13: 14:14\n-        _6 = const 1i32;                 // bb6[1]: scope 0 at $DIR/loop_test.rs:14:17: 14:18\n+        StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        _6 = const 1i32;                 // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/loop_test.rs:14:17: 14:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        FakeRead(ForLet, _6);            // bb6[2]: scope 0 at $DIR/loop_test.rs:14:13: 14:14\n-        StorageDead(_6);                 // bb6[3]: scope 0 at $DIR/loop_test.rs:16:5: 16:6\n-        goto -> bb5;                     // bb6[4]: scope 0 at $DIR/loop_test.rs:15:9: 15:17\n+        FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n+        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:15:9: 15:17\n     }\n }"}, {"sha": "856248e90d495dac63e2b23d4e4823657cf76fc8", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.ElaborateDrops.after.mir", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -30,206 +30,206 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb0: {\n-        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // bb0[0]: scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n+        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n+        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n     }\n \n     bb2: {\n-        switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n+        switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n     }\n \n     bb3: {\n-        switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // bb3[0]: scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+        switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n     }\n \n     bb4: {\n-        StorageLive(_15);                // bb4[0]: scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        _15 = (_2.1: bool);              // bb4[1]: scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        StorageLive(_16);                // bb4[2]: scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        _16 = move (_2.2: std::string::String); // bb4[3]: scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb20;                    // bb4[4]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n+        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n+        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n+        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n+        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb5: {\n-        _0 = const 1i32;                 // bb5[0]: scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n+        _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb19, unwind: bb10]; // bb5[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n     }\n \n     bb6: {\n-        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _6 = &(_2.1: bool);              // bb6[1]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_8);                 // bb6[2]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _8 = &(_2.2: std::string::String); // bb6[3]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        StorageLive(_9);                 // bb6[4]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_10);                // bb6[5]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _10 = _1;                        // bb6[6]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb7, otherwise: bb8]; // bb6[7]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        switchInt(_10) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb7: {\n-        _9 = (*_6);                      // bb7[0]: scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_10);                // bb7[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // bb7[2]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n+        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb8: {\n-        _0 = const 3i32;                 // bb8[0]: scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_10);                // bb8[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_9);                 // bb8[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb8[3]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb8[4]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb11;                    // bb8[5]: scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n+        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n     bb9: {\n-        return;                          // bb9[0]: scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n+        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n     }\n \n     bb10 (cleanup): {\n-        goto -> bb25;                    // bb10[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb11: {\n-        drop(_2) -> [return: bb9, unwind: bb1]; // bb11[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb12: {\n-        StorageDead(_9);                 // bb12[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageLive(_5);                 // bb12[1]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _5 = (_2.1: bool);               // bb12[2]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_7);                 // bb12[3]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _7 = move (_2.2: std::string::String); // bb12[4]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb5;                     // bb12[5]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb13: {\n-        StorageDead(_9);                 // bb13[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb13[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb13[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb2;                     // bb13[3]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb14: {\n-        StorageLive(_6);                 // bb14[0]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _6 = &(_2.0: bool);              // bb14[1]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_8);                 // bb14[2]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _8 = &(_2.2: std::string::String); // bb14[3]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        StorageLive(_12);                // bb14[4]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_13);                // bb14[5]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _13 = _1;                        // bb14[6]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb15, otherwise: bb16]; // bb14[7]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        switchInt(_13) -> [false: bb15, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb15: {\n-        _12 = (*_6);                     // bb15[0]: scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_13);                // bb15[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb18, otherwise: bb17]; // bb15[2]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n+        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        switchInt(move _12) -> [false: bb18, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb16: {\n-        _0 = const 3i32;                 // bb16[0]: scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_13);                // bb16[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_12);                // bb16[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb16[3]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb16[4]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb11;                    // bb16[5]: scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n+        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n     bb17: {\n-        StorageDead(_12);                // bb17[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageLive(_5);                 // bb17[1]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _5 = (_2.0: bool);               // bb17[2]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_7);                 // bb17[3]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _7 = move (_2.2: std::string::String); // bb17[4]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb5;                     // bb17[5]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb18: {\n-        StorageDead(_12);                // bb18[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb18[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb18[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb3;                     // bb18[3]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb3;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb19: {\n-        StorageDead(_7);                 // bb19[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_5);                 // bb19[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb19[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb19[3]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb23;                    // bb19[4]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb20: {\n-        _0 = const 2i32;                 // bb20[0]: scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n+        _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb22, unwind: bb10]; // bb20[1]: scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n     }\n \n     bb21: {\n-        StorageLive(_15);                // bb21[0]: scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        _15 = (_2.1: bool);              // bb21[1]: scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        StorageLive(_16);                // bb21[2]: scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        _16 = move (_2.2: std::string::String); // bb21[3]: scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb20;                    // bb21[4]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n+        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n+        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n+        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n+        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb22: {\n-        StorageDead(_16);                // bb22[0]: scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        StorageDead(_15);                // bb22[1]: scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        goto -> bb23;                    // bb22[2]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb23: {\n-        goto -> bb29;                    // bb23[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb29;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb24 (cleanup): {\n-        goto -> bb1;                     // bb24[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb25 (cleanup): {\n-        goto -> bb24;                    // bb25[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb26: {\n-        goto -> bb9;                     // bb26[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb9;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb27 (cleanup): {\n-        goto -> bb1;                     // bb27[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb28 (cleanup): {\n-        goto -> bb27;                    // bb28[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb29: {\n-        goto -> bb26;                    // bb29[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n }"}, {"sha": "63974bda26038f97c8072734c6c2846a798f7992", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 104, "deletions": 104, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -30,217 +30,217 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _2);   // bb0[0]: scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // bb0[1]: scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n+        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n+        switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n+        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb9, imaginary: bb4]; // bb2[0]: scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n+        falseEdges -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n     }\n \n     bb3: {\n-        switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // bb3[0]: scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n+        switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n     }\n \n     bb4: {\n-        falseEdges -> [real: bb18, imaginary: bb6]; // bb4[0]: scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n+        falseEdges -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n     }\n \n     bb5: {\n-        switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // bb5[0]: scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+        switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n     }\n \n     bb6: {\n-        falseEdges -> [real: bb26, imaginary: bb7]; // bb6[0]: scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n+        falseEdges -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n     }\n \n     bb7: {\n-        StorageLive(_15);                // bb7[0]: scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        _15 = (_2.1: bool);              // bb7[1]: scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        StorageLive(_16);                // bb7[2]: scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        _16 = move (_2.2: std::string::String); // bb7[3]: scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb25;                    // bb7[4]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n+        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n+        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n+        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb8: {\n-        _0 = const 1i32;                 // bb8[0]: scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n+        _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb24, unwind: bb14]; // bb8[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n     }\n \n     bb9: {\n-        StorageLive(_6);                 // bb9[0]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _6 = &(_2.1: bool);              // bb9[1]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_8);                 // bb9[2]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _8 = &(_2.2: std::string::String); // bb9[3]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _3 = &shallow (_2.0: bool);      // bb9[4]: scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        _4 = &shallow (_2.1: bool);      // bb9[5]: scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        StorageLive(_9);                 // bb9[6]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_10);                // bb9[7]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _10 = _1;                        // bb9[8]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        FakeRead(ForMatchedPlace, _10);  // bb9[9]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb11, otherwise: bb10]; // bb9[10]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n+        _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n+        StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        switchInt(_10) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb10: {\n-        falseEdges -> [real: bb12, imaginary: bb11]; // bb10[0]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdges -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb11: {\n-        _9 = (*_6);                      // bb11[0]: scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_10);                // bb11[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb17, otherwise: bb16]; // bb11[2]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n+        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        switchInt(move _9) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb12: {\n-        _0 = const 3i32;                 // bb12[0]: scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_10);                // bb12[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_9);                 // bb12[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb12[3]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb12[4]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb15;                    // bb12[5]: scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n+        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n     bb13: {\n-        return;                          // bb13[0]: scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n+        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n     }\n \n     bb14 (cleanup): {\n-        drop(_2) -> bb1;                 // bb14[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb15: {\n-        drop(_2) -> [return: bb13, unwind: bb1]; // bb15[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n     bb16: {\n-        StorageDead(_9);                 // bb16[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        FakeRead(ForMatchGuard, _3);     // bb16[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForMatchGuard, _4);     // bb16[2]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _6);   // bb16[3]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _8);   // bb16[4]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageLive(_5);                 // bb16[5]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _5 = (_2.1: bool);               // bb16[6]: scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_7);                 // bb16[7]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _7 = move (_2.2: std::string::String); // bb16[8]: scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb8;                     // bb16[9]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n+        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n+        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb17: {\n-        StorageDead(_9);                 // bb17[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb17[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb17[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb3, imaginary: bb4]; // bb17[3]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        falseEdges -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb18: {\n-        StorageLive(_6);                 // bb18[0]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _6 = &(_2.0: bool);              // bb18[1]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_8);                 // bb18[2]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _8 = &(_2.2: std::string::String); // bb18[3]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _3 = &shallow (_2.0: bool);      // bb18[4]: scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        _4 = &shallow (_2.1: bool);      // bb18[5]: scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        StorageLive(_12);                // bb18[6]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_13);                // bb18[7]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _13 = _1;                        // bb18[8]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        FakeRead(ForMatchedPlace, _13);  // bb18[9]: scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb20, otherwise: bb19]; // bb18[10]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n+        _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n+        StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n+        switchInt(_13) -> [false: bb20, otherwise: bb19]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb19: {\n-        falseEdges -> [real: bb21, imaginary: bb20]; // bb19[0]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdges -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb20: {\n-        _12 = (*_6);                     // bb20[0]: scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_13);                // bb20[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb23, otherwise: bb22]; // bb20[2]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n+        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        switchInt(move _12) -> [false: bb23, otherwise: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb21: {\n-        _0 = const 3i32;                 // bb21[0]: scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_13);                // bb21[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_12);                // bb21[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb21[3]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb21[4]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb15;                    // bb21[5]: scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n+        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n     bb22: {\n-        StorageDead(_12);                // bb22[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        FakeRead(ForMatchGuard, _3);     // bb22[1]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForMatchGuard, _4);     // bb22[2]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _6);   // bb22[3]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _8);   // bb22[4]: scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageLive(_5);                 // bb22[5]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _5 = (_2.0: bool);               // bb22[6]: scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_7);                 // bb22[7]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _7 = move (_2.2: std::string::String); // bb22[8]: scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb8;                     // bb22[9]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n+        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n+        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n+        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb23: {\n-        StorageDead(_12);                // bb23[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb23[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb23[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb5, imaginary: bb6]; // bb23[3]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        falseEdges -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n     bb24: {\n-        StorageDead(_7);                 // bb24[0]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_5);                 // bb24[1]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_8);                 // bb24[2]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // bb24[3]: scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb28;                    // bb24[4]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb25: {\n-        _0 = const 2i32;                 // bb25[0]: scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n+        _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb27, unwind: bb14]; // bb25[1]: scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n     }\n \n     bb26: {\n-        StorageLive(_15);                // bb26[0]: scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        _15 = (_2.1: bool);              // bb26[1]: scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        StorageLive(_16);                // bb26[2]: scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        _16 = move (_2.2: std::string::String); // bb26[3]: scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb25;                    // bb26[4]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n+        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n+        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n+        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb27: {\n-        StorageDead(_16);                // bb27[0]: scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        StorageDead(_15);                // bb27[1]: scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        goto -> bb28;                    // bb27[2]: scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n     bb28: {\n-        drop(_2) -> [return: bb13, unwind: bb1]; // bb28[0]: scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n }"}, {"sha": "db888bc4b87b2fecc4aee5a37eff341a0e8acec7", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -24,26 +24,26 @@ fn full_tested_match() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _2 = std::option::Option::<i32>::Some(const 42i32); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        _2 = std::option::Option::<i32>::Some(const 42i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:15:24: 15:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _3 = discriminant(_2);           // bb0[4]: scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // bb0[5]: scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n     }\n \n     bb2: {\n-        _1 = (const 3i32, const 3i32);   // bb2[0]: scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n+        _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -56,34 +56,34 @@ fn full_tested_match() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:18:21: 18:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        goto -> bb11;                    // bb2[1]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb6, imaginary: bb4]; // bb3[0]: scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        falseEdges -> [real: bb6, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb4: {\n-        falseEdges -> [real: bb10, imaginary: bb2]; // bb4[0]: scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n+        falseEdges -> [real: bb10, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n     }\n \n     bb5: {\n-        unreachable;                     // bb5[0]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n     }\n \n     bb6: {\n-        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        _11 = const full_tested_match::promoted[0]; // bb6[1]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: &std::option::Option<i32>\n                                          // + val: Unevaluated(DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n                                          // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), [], Some(promoted[0])) }\n-        _6 = &(((*_11) as Some).0: i32); // bb6[2]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        _4 = &shallow _2;                // bb6[3]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        StorageLive(_7);                 // bb6[4]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-        _7 = const guard() -> [return: bb7, unwind: bb1]; // bb6[5]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -93,63 +93,63 @@ fn full_tested_match() -> () {\n     }\n \n     bb7: {\n-        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // bb7[0]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n     bb8: {\n-        StorageDead(_7);                 // bb8[0]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        FakeRead(ForMatchGuard, _4);     // bb8[1]: scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n-        FakeRead(ForGuardBinding, _6);   // bb8[2]: scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n-        StorageLive(_5);                 // bb8[3]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        _5 = ((_2 as Some).0: i32);      // bb8[4]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        StorageLive(_8);                 // bb8[5]: scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n-        _8 = _5;                         // bb8[6]: scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n-        _1 = (const 1i32, move _8);      // bb8[7]: scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n+        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n+        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n+        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n+        _1 = (const 1i32, move _8);      // scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:32: 16:33\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        StorageDead(_8);                 // bb8[8]: scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n-        StorageDead(_5);                 // bb8[9]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        StorageDead(_6);                 // bb8[10]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        goto -> bb11;                    // bb8[11]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n+        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n     bb9: {\n-        StorageDead(_7);                 // bb9[0]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        StorageDead(_6);                 // bb9[1]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        goto -> bb4;                     // bb9[2]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        goto -> bb4;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n     bb10: {\n-        StorageLive(_9);                 // bb10[0]: scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n-        _9 = ((_2 as Some).0: i32);      // bb10[1]: scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n-        StorageLive(_10);                // bb10[2]: scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n-        _10 = _9;                        // bb10[3]: scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n-        _1 = (const 2i32, move _10);     // bb10[4]: scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n+        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n+        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n+        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n+        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n+        _1 = (const 2i32, move _10);     // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:17:21: 17:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        StorageDead(_10);                // bb10[5]: scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n-        StorageDead(_9);                 // bb10[6]: scope 0 at $DIR/match_false_edges.rs:17:26: 17:27\n-        goto -> bb11;                    // bb10[7]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n+        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:26: 17:27\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n     bb11: {\n-        StorageDead(_2);                 // bb11[0]: scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n-        StorageDead(_1);                 // bb11[1]: scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n-        _0 = const ();                   // bb11[2]: scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n+        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n+        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n+        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:14:28: 20:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb11[3]: scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n+        return;                          // scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n     }\n }"}, {"sha": "96aa9e828d7842d6f1e87b09dc76ace575e99080", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -23,59 +23,59 @@ fn full_tested_match2() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _2 = std::option::Option::<i32>::Some(const 42i32); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        _2 = std::option::Option::<i32>::Some(const 42i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:26:24: 26:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _3 = discriminant(_2);           // bb0[4]: scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // bb0[5]: scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb10, imaginary: bb4]; // bb2[0]: scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+        falseEdges -> [real: bb10, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb6, imaginary: bb2]; // bb3[0]: scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n     bb4: {\n-        StorageLive(_9);                 // bb4[0]: scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n-        _9 = ((_2 as Some).0: i32);      // bb4[1]: scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n-        StorageLive(_10);                // bb4[2]: scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n-        _10 = _9;                        // bb4[3]: scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n-        _1 = (const 2i32, move _10);     // bb4[4]: scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n+        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n+        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n+        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n+        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n+        _1 = (const 2i32, move _10);     // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:29:21: 29:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        StorageDead(_10);                // bb4[5]: scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n-        StorageDead(_9);                 // bb4[6]: scope 0 at $DIR/match_false_edges.rs:29:26: 29:27\n-        goto -> bb11;                    // bb4[7]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n+        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:26: 29:27\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n     bb5: {\n-        unreachable;                     // bb5[0]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n     }\n \n     bb6: {\n-        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        _6 = &((_2 as Some).0: i32);     // bb6[1]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        _4 = &shallow _2;                // bb6[2]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        StorageLive(_7);                 // bb6[3]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-        _7 = const guard() -> [return: bb7, unwind: bb1]; // bb6[4]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -85,38 +85,38 @@ fn full_tested_match2() -> () {\n     }\n \n     bb7: {\n-        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // bb7[0]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n     bb8: {\n-        StorageDead(_7);                 // bb8[0]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        FakeRead(ForMatchGuard, _4);     // bb8[1]: scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n-        FakeRead(ForGuardBinding, _6);   // bb8[2]: scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n-        StorageLive(_5);                 // bb8[3]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        _5 = ((_2 as Some).0: i32);      // bb8[4]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        StorageLive(_8);                 // bb8[5]: scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n-        _8 = _5;                         // bb8[6]: scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n-        _1 = (const 1i32, move _8);      // bb8[7]: scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n+        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n+        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n+        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n+        _1 = (const 1i32, move _8);      // scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:27:32: 27:33\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        StorageDead(_8);                 // bb8[8]: scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n-        StorageDead(_5);                 // bb8[9]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        StorageDead(_6);                 // bb8[10]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        goto -> bb11;                    // bb8[11]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n+        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n     bb9: {\n-        StorageDead(_7);                 // bb9[0]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        StorageDead(_6);                 // bb9[1]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        falseEdges -> [real: bb4, imaginary: bb2]; // bb9[2]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        falseEdges -> [real: bb4, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n     bb10: {\n-        _1 = (const 3i32, const 3i32);   // bb10[0]: scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n+        _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -129,19 +129,19 @@ fn full_tested_match2() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:28:21: 28:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        goto -> bb11;                    // bb10[1]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n     bb11: {\n-        StorageDead(_2);                 // bb11[0]: scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n-        StorageDead(_1);                 // bb11[1]: scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n-        _0 = const ();                   // bb11[2]: scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n+        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n+        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n+        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:25:29: 31:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb11[3]: scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n+        return;                          // scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n     }\n }"}, {"sha": "63a7c4bc43d7ad57e4183959570e37b6b686b20d", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -34,56 +34,56 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _2 = std::option::Option::<i32>::Some(const 1i32); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        _2 = std::option::Option::<i32>::Some(const 1i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:35:24: 35:25\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _4 = discriminant(_2);           // bb0[4]: scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-        switchInt(move _4) -> [1isize: bb3, otherwise: bb2]; // bb0[5]: scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        switchInt(move _4) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb10, imaginary: bb5]; // bb2[0]: scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        falseEdges -> [real: bb10, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb6, imaginary: bb2]; // bb3[0]: scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n     bb4: {\n-        StorageLive(_14);                // bb4[0]: scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n-        _14 = _2;                        // bb4[1]: scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n-        _1 = const 4i32;                 // bb4[2]: scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n+        StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n+        _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n+        _1 = const 4i32;                 // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:39:15: 39:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-        StorageDead(_14);                // bb4[3]: scope 0 at $DIR/match_false_edges.rs:39:16: 39:17\n-        goto -> bb15;                    // bb4[4]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:16: 39:17\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n     bb5: {\n-        falseEdges -> [real: bb11, imaginary: bb4]; // bb5[0]: scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+        falseEdges -> [real: bb11, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n     }\n \n     bb6: {\n-        StorageLive(_7);                 // bb6[0]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _7 = &((_2 as Some).0: i32);     // bb6[1]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _5 = &shallow _2;                // bb6[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        StorageLive(_8);                 // bb6[3]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-        _8 = const guard() -> [return: bb7, unwind: bb1]; // bb6[4]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        _8 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -93,55 +93,55 @@ fn main() -> () {\n     }\n \n     bb7: {\n-        switchInt(move _8) -> [false: bb9, otherwise: bb8]; // bb7[0]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        switchInt(move _8) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n     bb8: {\n-        StorageDead(_8);                 // bb8[0]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        FakeRead(ForMatchGuard, _5);     // bb8[1]: scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n-        FakeRead(ForGuardBinding, _7);   // bb8[2]: scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n-        StorageLive(_6);                 // bb8[3]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _6 = ((_2 as Some).0: i32);      // bb8[4]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _1 = const 1i32;                 // bb8[5]: scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n+        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n+        FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n+        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _6 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _1 = const 1i32;                 // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:32: 36:33\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        StorageDead(_6);                 // bb8[6]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        StorageDead(_7);                 // bb8[7]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        goto -> bb15;                    // bb8[8]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n     bb9: {\n-        StorageDead(_8);                 // bb9[0]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        StorageDead(_7);                 // bb9[1]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        falseEdges -> [real: bb2, imaginary: bb2]; // bb9[2]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        falseEdges -> [real: bb2, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n     bb10: {\n-        StorageLive(_9);                 // bb10[0]: scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n-        _9 = _2;                         // bb10[1]: scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n-        _1 = const 2i32;                 // bb10[2]: scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n+        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        _1 = const 2i32;                 // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:37:15: 37:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        StorageDead(_9);                 // bb10[3]: scope 0 at $DIR/match_false_edges.rs:37:16: 37:17\n-        goto -> bb15;                    // bb10[4]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:16: 37:17\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n     bb11: {\n-        StorageLive(_11);                // bb11[0]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _11 = &((_2 as Some).0: i32);    // bb11[1]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _5 = &shallow _2;                // bb11[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        StorageLive(_12);                // bb11[3]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n-        StorageLive(_13);                // bb11[4]: scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _13 = (*_11);                    // bb11[5]: scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _12 = const guard2(move _13) -> [return: bb12, unwind: bb1]; // bb11[6]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n+        _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n+        _12 = const guard2(move _13) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n                                          // ty::Const\n                                          // + ty: fn(i32) -> bool {guard2}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -151,44 +151,44 @@ fn main() -> () {\n     }\n \n     bb12: {\n-        StorageDead(_13);                // bb12[0]: scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // bb12[1]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n+        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n     bb13: {\n-        StorageDead(_12);                // bb13[0]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        FakeRead(ForMatchGuard, _5);     // bb13[1]: scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        FakeRead(ForGuardBinding, _11);  // bb13[2]: scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        StorageLive(_10);                // bb13[3]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _10 = ((_2 as Some).0: i32);     // bb13[4]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _1 = const 3i32;                 // bb13[5]: scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n+        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n+        FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n+        StorageLive(_10);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _10 = ((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _1 = const 3i32;                 // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:38:33: 38:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_10);                // bb13[6]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        StorageDead(_11);                // bb13[7]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        goto -> bb15;                    // bb13[8]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n     bb14: {\n-        StorageDead(_12);                // bb14[0]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        StorageDead(_11);                // bb14[1]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        falseEdges -> [real: bb4, imaginary: bb4]; // bb14[2]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        falseEdges -> [real: bb4, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n     bb15: {\n-        StorageDead(_2);                 // bb15[0]: scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n-        StorageDead(_1);                 // bb15[1]: scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n-        _0 = const ();                   // bb15[2]: scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n+        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n+        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n+        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:34:11: 41:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb15[3]: scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n+        return;                          // scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n     }\n }"}, {"sha": "9408248b25dd39253c79f0d3116536f49a0da390", "filename": "src/test/mir-opt/match_test/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -19,154 +19,154 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_test.rs:7:9: 7:10\n-        _1 = const 3i32;                 // bb0[1]: scope 0 at $DIR/match_test.rs:7:13: 7:14\n+        StorageLive(_1);                 // scope 0 at $DIR/match_test.rs:7:9: 7:10\n+        _1 = const 3i32;                 // scope 0 at $DIR/match_test.rs:7:13: 7:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:7:13: 7:14\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/match_test.rs:7:9: 7:10\n-        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/match_test.rs:8:9: 8:10\n-        _2 = const true;                 // bb0[4]: scope 1 at $DIR/match_test.rs:8:13: 8:17\n+        FakeRead(ForLet, _1);            // scope 0 at $DIR/match_test.rs:7:9: 7:10\n+        StorageLive(_2);                 // scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        _2 = const true;                 // scope 1 at $DIR/match_test.rs:8:13: 8:17\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:8:13: 8:17\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForLet, _2);            // bb0[5]: scope 1 at $DIR/match_test.rs:8:9: 8:10\n-        StorageLive(_3);                 // bb0[6]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n-        FakeRead(ForMatchedPlace, _1);   // bb0[7]: scope 2 at $DIR/match_test.rs:12:11: 12:12\n-        _6 = Le(const 0i32, _1);         // bb0[8]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        FakeRead(ForLet, _2);            // scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        StorageLive(_3);                 // scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        FakeRead(ForMatchedPlace, _1);   // scope 2 at $DIR/match_test.rs:12:11: 12:12\n+        _6 = Le(const 0i32, _1);         // scope 2 at $DIR/match_test.rs:13:9: 13:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:13:9: 13:14\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        switchInt(move _6) -> [false: bb4, otherwise: bb1]; // bb0[9]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        switchInt(move _6) -> [false: bb4, otherwise: bb1]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }\n \n     bb1: {\n-        _7 = Lt(_1, const 10i32);        // bb1[0]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        _7 = Lt(_1, const 10i32);        // scope 2 at $DIR/match_test.rs:13:9: 13:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:13:9: 13:14\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-        switchInt(move _7) -> [false: bb4, otherwise: bb2]; // bb1[1]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        switchInt(move _7) -> [false: bb4, otherwise: bb2]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb9, imaginary: bb6]; // bb2[0]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        falseEdges -> [real: bb9, imaginary: bb6]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }\n \n     bb3: {\n-        _3 = const 3i32;                 // bb3[0]: scope 2 at $DIR/match_test.rs:16:14: 16:15\n+        _3 = const 3i32;                 // scope 2 at $DIR/match_test.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:16:14: 16:15\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        goto -> bb14;                    // bb3[1]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n \n     bb4: {\n-        _4 = Le(const 10i32, _1);        // bb4[0]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        _4 = Le(const 10i32, _1);        // scope 2 at $DIR/match_test.rs:14:9: 14:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:14:9: 14:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-        switchInt(move _4) -> [false: bb7, otherwise: bb5]; // bb4[1]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        switchInt(move _4) -> [false: bb7, otherwise: bb5]; // scope 2 at $DIR/match_test.rs:14:9: 14:16\n     }\n \n     bb5: {\n-        _5 = Le(_1, const 20i32);        // bb5[0]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        _5 = Le(_1, const 20i32);        // scope 2 at $DIR/match_test.rs:14:9: 14:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000014))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:14:9: 14:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000014)) }\n-        switchInt(move _5) -> [false: bb7, otherwise: bb6]; // bb5[1]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        switchInt(move _5) -> [false: bb7, otherwise: bb6]; // scope 2 at $DIR/match_test.rs:14:9: 14:16\n     }\n \n     bb6: {\n-        falseEdges -> [real: bb12, imaginary: bb8]; // bb6[0]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        falseEdges -> [real: bb12, imaginary: bb8]; // scope 2 at $DIR/match_test.rs:14:9: 14:16\n     }\n \n     bb7: {\n-        switchInt(_1) -> [-1i32: bb8, otherwise: bb3]; // bb7[0]: scope 2 at $DIR/match_test.rs:15:9: 15:11\n+        switchInt(_1) -> [-1i32: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n     }\n \n     bb8: {\n-        falseEdges -> [real: bb13, imaginary: bb3]; // bb8[0]: scope 2 at $DIR/match_test.rs:15:9: 15:11\n+        falseEdges -> [real: bb13, imaginary: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n     }\n \n     bb9: {\n-        _8 = &shallow _1;                // bb9[0]: scope 2 at $DIR/match_test.rs:12:11: 12:12\n-        StorageLive(_9);                 // bb9[1]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n-        _9 = _2;                         // bb9[2]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n-        switchInt(move _9) -> [false: bb11, otherwise: bb10]; // bb9[3]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        _8 = &shallow _1;                // scope 2 at $DIR/match_test.rs:12:11: 12:12\n+        StorageLive(_9);                 // scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        _9 = _2;                         // scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        switchInt(move _9) -> [false: bb11, otherwise: bb10]; // scope 2 at $DIR/match_test.rs:13:18: 13:19\n     }\n \n     bb10: {\n-        StorageDead(_9);                 // bb10[0]: scope 2 at $DIR/match_test.rs:13:24: 13:25\n-        FakeRead(ForMatchGuard, _8);     // bb10[1]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n-        _3 = const 0i32;                 // bb10[2]: scope 2 at $DIR/match_test.rs:13:23: 13:24\n+        StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:24: 13:25\n+        FakeRead(ForMatchGuard, _8);     // scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        _3 = const 0i32;                 // scope 2 at $DIR/match_test.rs:13:23: 13:24\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:13:23: 13:24\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        goto -> bb14;                    // bb10[3]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n \n     bb11: {\n-        StorageDead(_9);                 // bb11[0]: scope 2 at $DIR/match_test.rs:13:24: 13:25\n-        falseEdges -> [real: bb3, imaginary: bb6]; // bb11[1]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:24: 13:25\n+        falseEdges -> [real: bb3, imaginary: bb6]; // scope 2 at $DIR/match_test.rs:13:18: 13:19\n     }\n \n     bb12: {\n-        _3 = const 1i32;                 // bb12[0]: scope 2 at $DIR/match_test.rs:14:20: 14:21\n+        _3 = const 1i32;                 // scope 2 at $DIR/match_test.rs:14:20: 14:21\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:14:20: 14:21\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        goto -> bb14;                    // bb12[1]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n \n     bb13: {\n-        _3 = const 2i32;                 // bb13[0]: scope 2 at $DIR/match_test.rs:15:15: 15:16\n+        _3 = const 2i32;                 // scope 2 at $DIR/match_test.rs:15:15: 15:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:15:15: 15:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        goto -> bb14;                    // bb13[1]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n \n     bb14: {\n-        StorageDead(_3);                 // bb14[0]: scope 2 at $DIR/match_test.rs:17:6: 17:7\n-        _0 = const ();                   // bb14[1]: scope 0 at $DIR/match_test.rs:6:11: 18:2\n+        StorageDead(_3);                 // scope 2 at $DIR/match_test.rs:17:6: 17:7\n+        _0 = const ();                   // scope 0 at $DIR/match_test.rs:6:11: 18:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_test.rs:6:11: 18:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_2);                 // bb14[2]: scope 1 at $DIR/match_test.rs:18:1: 18:2\n-        StorageDead(_1);                 // bb14[3]: scope 0 at $DIR/match_test.rs:18:1: 18:2\n-        return;                          // bb14[4]: scope 0 at $DIR/match_test.rs:18:2: 18:2\n+        StorageDead(_2);                 // scope 1 at $DIR/match_test.rs:18:1: 18:2\n+        StorageDead(_1);                 // scope 0 at $DIR/match_test.rs:18:1: 18:2\n+        return;                          // scope 0 at $DIR/match_test.rs:18:2: 18:2\n     }\n }"}, {"sha": "a20a3c0e603e94d3c5b8b0988fda70a481f34f6e", "filename": "src/test/mir-opt/no-drop-for-inactive-variant/rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,17 +13,17 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n     }\n \n     bb0: {\n-        _2 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n-        switchInt(move _2) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // bb0[1]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        switchInt(move _2) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n+        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n     }\n \n     bb2: {\n-        StorageLive(_4);                 // bb2[0]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n-        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5; // bb2[1]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5; // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -39,19 +39,19 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n     }\n \n     bb3: {\n-        unreachable;                     // bb3[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:11: 8:14\n+        unreachable;                     // scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:11: 8:14\n     }\n \n     bb4: {\n-        StorageLive(_3);                 // bb4[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n-        _3 = move ((_1 as Some).0: T);   // bb4[1]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n-        _0 = move _3;                    // bb4[2]: scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n-        StorageDead(_3);                 // bb4[3]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:21: 9:22\n-        _5 = discriminant(_1);           // bb4[4]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n-        return;                          // bb4[5]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n+        StorageLive(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n+        _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n+        _0 = move _3;                    // scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n+        StorageDead(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:21: 9:22\n+        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        return;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n     }\n \n     bb5 (cleanup): {\n-        drop(_1) -> bb1;                 // bb5[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n     }\n }"}, {"sha": "e1ab6cc0b942309e8fea29c9921f66679868d8d7", "filename": "src/test/mir-opt/no-spurious-drop-after-call/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -8,19 +8,19 @@ fn main() -> () {\n     let _4: &str;                        // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        _4 = const \"\";                   // bb0[4]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        StorageLive(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        StorageLive(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        StorageLive(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        StorageLive(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        _4 = const \"\";                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // ty::Const\n                                          // + ty: &str\n                                          // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n-        _3 = &(*_4);                     // bb0[5]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        _2 = const <str as std::string::ToString>::to_string(move _3) -> bb2; // bb0[6]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        _2 = const <str as std::string::ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -30,12 +30,12 @@ fn main() -> () {\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n+        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // bb2[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n-        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // bb2[1]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n+        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // ty::Const\n                                          // + ty: fn(std::string::String) {std::mem::drop::<std::string::String>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -45,20 +45,20 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        StorageDead(_2);                 // bb3[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n-        StorageDead(_4);                 // bb3[1]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n-        StorageDead(_1);                 // bb3[2]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n-        _0 = const ();                   // bb3[3]: scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n+        StorageDead(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+        StorageDead(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n+        StorageDead(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n+        _0 = const ();                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb3[4]: scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n+        return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n \n     bb4 (cleanup): {\n-        drop(_2) -> bb1;                 // bb4[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n     }\n }"}, {"sha": "21dab9ab923946c9a7110c7e65e23796d052ee54", "filename": "src/test/mir-opt/packed-struct-drop-aligned/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,61 +13,61 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-        _3 = Droppy(const 0usize);       // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        StorageLive(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n+        StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0usize);       // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n-        _2 = Aligned(move _3);           // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n-        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n-        _1 = Packed(move _2);            // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n-        StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n-        StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n-        StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-        _5 = Droppy(const 0usize);       // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _2 = Aligned(move _3);           // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageDead(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n+        _1 = Packed(move _2);            // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n+        StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n+        StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0usize);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n-        _4 = Aligned(move _5);           // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n-        StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n-        StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_6) -> [return: bb4, unwind: bb3]; // bb0[15]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        _4 = Aligned(move _5);           // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageDead(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        StorageLive(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        _6 = move (_1.0: Aligned);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n     }\n \n     bb2: {\n-        StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n-        return;                          // bb2[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n+        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n     bb3 (cleanup): {\n-        (_1.0: Aligned) = move _4;       // bb3[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n-        StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n-        _0 = const ();                   // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+        StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "cf46f74c16df35b2d999f0cc99c151dc63cc4bac", "filename": "src/test/mir-opt/packed-struct-drop-aligned/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,61 +13,61 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-        _3 = Droppy(const 0usize);       // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        StorageLive(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n+        StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0usize);       // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _2 = Aligned(move _3);           // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n-        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n-        _1 = Packed(move _2);            // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n-        StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n-        StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n-        StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-        _5 = Droppy(const 0usize);       // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _2 = Aligned(move _3);           // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageDead(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n+        _1 = Packed(move _2);            // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n+        StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n+        StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0usize);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _4 = Aligned(move _5);           // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n-        StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n-        StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_6) -> [return: bb4, unwind: bb3]; // bb0[15]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        _4 = Aligned(move _5);           // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageDead(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        StorageLive(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        _6 = move (_1.0: Aligned);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n     }\n \n     bb2: {\n-        StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n-        return;                          // bb2[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n+        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n     bb3 (cleanup): {\n-        (_1.0: Aligned) = move _4;       // bb3[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n-        StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n-        _0 = const ();                   // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+        StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "6f4a024d20f93b9cc73079edc01c100d054b3913", "filename": "src/test/mir-opt/remove-never-const/rustc.no_codegen.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fremove-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fremove-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove-never-const%2Frustc.no_codegen.PreCodegen.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,6 +6,6 @@ fn no_codegen() -> () {\n     }\n \n     bb0: {\n-        unreachable;                     // bb0[0]: scope 0 at $DIR/remove-never-const.rs:20:13: 20:33\n+        unreachable;                     // scope 0 at $DIR/remove-never-const.rs:20:13: 20:33\n     }\n }"}, {"sha": "4e626b1384afc1702da4163730603edcaabd3aa4", "filename": "src/test/mir-opt/remove_fake_borrows/rustc.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,76 +13,76 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-+         nop;                             // bb0[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-          _3 = discriminant(_1);           // bb0[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n-          switchInt(move _3) -> [1isize: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+-         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+          _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+          switchInt(move _3) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n       }\n   \n       bb1: {\n-          _0 = const 1i32;                 // bb1[0]: scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n+          _0 = const 1i32;                 // scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/remove_fake_borrows.rs:9:14: 9:15\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-          goto -> bb7;                     // bb1[1]: scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n+          goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n       }\n   \n       bb2: {\n-          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1]; // bb2[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:14: 8:15\n+          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:14: 8:15\n       }\n   \n       bb3: {\n-          goto -> bb4;                     // bb3[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+          goto -> bb4;                     // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n       }\n   \n       bb4: {\n--         _4 = &shallow _1;                // bb4[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n--         _5 = &shallow ((_1 as Some).0: &&i32); // bb4[1]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n--         _6 = &shallow (*((_1 as Some).0: &&i32)); // bb4[2]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n--         _7 = &shallow (*(*((_1 as Some).0: &&i32))); // bb4[3]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-+         nop;                             // bb4[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-+         nop;                             // bb4[1]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-+         nop;                             // bb4[2]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-+         nop;                             // bb4[3]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-          StorageLive(_8);                 // bb4[4]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-          _8 = _2;                         // bb4[5]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-          switchInt(move _8) -> [false: bb6, otherwise: bb5]; // bb4[6]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+-         _4 = &shallow _1;                // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _5 = &shallow ((_1 as Some).0: &&i32); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _6 = &shallow (*((_1 as Some).0: &&i32)); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _7 = &shallow (*(*((_1 as Some).0: &&i32))); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+          StorageLive(_8);                 // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+          _8 = _2;                         // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+          switchInt(move _8) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n       }\n   \n       bb5: {\n-          StorageDead(_8);                 // bb5[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:26: 8:27\n--         FakeRead(ForMatchGuard, _4);     // bb5[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n--         FakeRead(ForMatchGuard, _5);     // bb5[2]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n--         FakeRead(ForMatchGuard, _6);     // bb5[3]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n--         FakeRead(ForMatchGuard, _7);     // bb5[4]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-+         nop;                             // bb5[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-+         nop;                             // bb5[2]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-+         nop;                             // bb5[3]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-+         nop;                             // bb5[4]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-          _0 = const 0i32;                 // bb5[5]: scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n+          StorageDead(_8);                 // scope 0 at $DIR/remove_fake_borrows.rs:8:26: 8:27\n+-         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+-         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+-         FakeRead(ForMatchGuard, _6);     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+-         FakeRead(ForMatchGuard, _7);     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+          _0 = const 0i32;                 // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/remove_fake_borrows.rs:8:25: 8:26\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          goto -> bb7;                     // bb5[6]: scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n+          goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n       }\n   \n       bb6: {\n-          StorageDead(_8);                 // bb6[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:26: 8:27\n-          goto -> bb1;                     // bb6[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+          StorageDead(_8);                 // scope 0 at $DIR/remove_fake_borrows.rs:8:26: 8:27\n+          goto -> bb1;                     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n       }\n   \n       bb7: {\n-          return;                          // bb7[0]: scope 0 at $DIR/remove_fake_borrows.rs:11:2: 11:2\n+          return;                          // scope 0 at $DIR/remove_fake_borrows.rs:11:2: 11:2\n       }\n   \n       bb8 (cleanup): {\n-          resume;                          // bb8[0]: scope 0 at $DIR/remove_fake_borrows.rs:6:1: 11:2\n+          resume;                          // scope 0 at $DIR/remove_fake_borrows.rs:6:1: 11:2\n       }\n   }\n   "}, {"sha": "01f5fbb7d236c52e561be67bb8511ca0c4011b3d", "filename": "src/test/mir-opt/retag/rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main-%7B%7Bclosure%7D%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main-%7B%7Bclosure%7D%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main-%7B%7Bclosure%7D%7D.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -9,14 +9,14 @@ fn main::{{closure}}#0(_1: &[closure@main::{{closure}}#0], _2: &i32) -> &i32 {\n     }\n \n     bb0: {\n-        Retag([fn entry] _1);            // bb0[0]: scope 0 at $DIR/retag.rs:40:31: 43:6\n-        Retag([fn entry] _2);            // bb0[1]: scope 0 at $DIR/retag.rs:40:31: 43:6\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/retag.rs:41:13: 41:15\n-        _3 = _2;                         // bb0[3]: scope 0 at $DIR/retag.rs:41:18: 41:19\n-        Retag(_3);                       // bb0[4]: scope 0 at $DIR/retag.rs:41:18: 41:19\n-        _0 = _2;                         // bb0[5]: scope 1 at $DIR/retag.rs:42:9: 42:10\n-        Retag(_0);                       // bb0[6]: scope 1 at $DIR/retag.rs:42:9: 42:10\n-        StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/retag.rs:43:5: 43:6\n-        return;                          // bb0[8]: scope 0 at $DIR/retag.rs:43:6: 43:6\n+        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:40:31: 43:6\n+        Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:40:31: 43:6\n+        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:41:13: 41:15\n+        _3 = _2;                         // scope 0 at $DIR/retag.rs:41:18: 41:19\n+        Retag(_3);                       // scope 0 at $DIR/retag.rs:41:18: 41:19\n+        _0 = _2;                         // scope 1 at $DIR/retag.rs:42:9: 42:10\n+        Retag(_0);                       // scope 1 at $DIR/retag.rs:42:9: 42:10\n+        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:43:5: 43:6\n+        return;                          // scope 0 at $DIR/retag.rs:43:6: 43:6\n     }\n }"}, {"sha": "7484d209d1b6f40acbcd3a2c8f728450fedbe767", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -55,34 +55,34 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/retag.rs:30:9: 30:14\n-        _1 = const 0i32;                 // bb0[1]: scope 0 at $DIR/retag.rs:30:17: 30:18\n+        StorageLive(_1);                 // scope 0 at $DIR/retag.rs:30:9: 30:14\n+        _1 = const 0i32;                 // scope 0 at $DIR/retag.rs:30:17: 30:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:30:17: 30:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/retag.rs:31:5: 37:6\n-        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/retag.rs:32:13: 32:14\n-        StorageLive(_4);                 // bb0[4]: scope 1 at $DIR/retag.rs:32:17: 32:24\n-        StorageLive(_5);                 // bb0[5]: scope 1 at $DIR/retag.rs:32:17: 32:24\n-        _5 = Test(const 0i32);           // bb0[6]: scope 1 at $DIR/retag.rs:32:17: 32:24\n+        StorageLive(_2);                 // scope 1 at $DIR/retag.rs:31:5: 37:6\n+        StorageLive(_3);                 // scope 1 at $DIR/retag.rs:32:13: 32:14\n+        StorageLive(_4);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n+        StorageLive(_5);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n+        _5 = Test(const 0i32);           // scope 1 at $DIR/retag.rs:32:17: 32:24\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:32:22: 32:23\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        _4 = &_5;                        // bb0[7]: scope 1 at $DIR/retag.rs:32:17: 32:24\n-        Retag(_4);                       // bb0[8]: scope 1 at $DIR/retag.rs:32:17: 32:24\n-        StorageLive(_6);                 // bb0[9]: scope 1 at $DIR/retag.rs:32:29: 32:35\n-        StorageLive(_7);                 // bb0[10]: scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _7 = &mut _1;                    // bb0[11]: scope 1 at $DIR/retag.rs:32:29: 32:35\n-        Retag(_7);                       // bb0[12]: scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _6 = &mut (*_7);                 // bb0[13]: scope 1 at $DIR/retag.rs:32:29: 32:35\n-        Retag([2phase] _6);              // bb0[14]: scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // bb0[15]: scope 1 at $DIR/retag.rs:32:17: 32:36\n+        _4 = &_5;                        // scope 1 at $DIR/retag.rs:32:17: 32:24\n+        Retag(_4);                       // scope 1 at $DIR/retag.rs:32:17: 32:24\n+        StorageLive(_6);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n+        StorageLive(_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n+        _7 = &mut _1;                    // scope 1 at $DIR/retag.rs:32:29: 32:35\n+        Retag(_7);                       // scope 1 at $DIR/retag.rs:32:29: 32:35\n+        _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n+        Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n+        _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n                                          // ty::Const\n                                          // + ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -92,108 +92,108 @@ fn main() -> () {\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/retag.rs:29:1: 51:2\n+        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n     }\n \n     bb2: {\n-        Retag(_3);                       // bb2[0]: scope 1 at $DIR/retag.rs:32:17: 32:36\n-        StorageDead(_6);                 // bb2[1]: scope 1 at $DIR/retag.rs:32:35: 32:36\n-        StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/retag.rs:32:35: 32:36\n-        StorageDead(_7);                 // bb2[3]: scope 1 at $DIR/retag.rs:32:36: 32:37\n-        drop(_5) -> [return: bb4, unwind: bb1]; // bb2[4]: scope 1 at $DIR/retag.rs:32:36: 32:37\n+        Retag(_3);                       // scope 1 at $DIR/retag.rs:32:17: 32:36\n+        StorageDead(_6);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n+        StorageDead(_4);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n+        StorageDead(_7);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> [return: bb4, unwind: bb1]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n     }\n \n     bb3 (cleanup): {\n-        drop(_5) -> bb1;                 // bb3[0]: scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> bb1;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // bb4[0]: scope 1 at $DIR/retag.rs:32:36: 32:37\n-        StorageLive(_8);                 // bb4[1]: scope 2 at $DIR/retag.rs:33:13: 33:14\n-        StorageLive(_9);                 // bb4[2]: scope 2 at $DIR/retag.rs:33:19: 33:20\n-        _9 = move _3;                    // bb4[3]: scope 2 at $DIR/retag.rs:33:19: 33:20\n-        Retag(_9);                       // bb4[4]: scope 2 at $DIR/retag.rs:33:19: 33:20\n-        _8 = &mut (*_9);                 // bb4[5]: scope 2 at $DIR/retag.rs:33:19: 33:20\n-        Retag(_8);                       // bb4[6]: scope 2 at $DIR/retag.rs:33:19: 33:20\n-        StorageDead(_9);                 // bb4[7]: scope 2 at $DIR/retag.rs:33:22: 33:23\n-        StorageLive(_10);                // bb4[8]: scope 3 at $DIR/retag.rs:34:13: 34:14\n-        _10 = move _8;                   // bb4[9]: scope 3 at $DIR/retag.rs:34:17: 34:18\n-        Retag(_10);                      // bb4[10]: scope 3 at $DIR/retag.rs:34:17: 34:18\n-        StorageLive(_11);                // bb4[11]: scope 4 at $DIR/retag.rs:36:13: 36:15\n-        StorageLive(_12);                // bb4[12]: scope 4 at $DIR/retag.rs:36:18: 36:29\n-        _12 = &raw mut (*_10);           // bb4[13]: scope 4 at $DIR/retag.rs:36:18: 36:19\n-        Retag([raw] _12);                // bb4[14]: scope 4 at $DIR/retag.rs:36:18: 36:19\n-        _11 = _12;                       // bb4[15]: scope 4 at $DIR/retag.rs:36:18: 36:29\n-        StorageDead(_12);                // bb4[16]: scope 4 at $DIR/retag.rs:36:29: 36:30\n-        _2 = const ();                   // bb4[17]: scope 1 at $DIR/retag.rs:31:5: 37:6\n+        StorageDead(_5);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        StorageLive(_8);                 // scope 2 at $DIR/retag.rs:33:13: 33:14\n+        StorageLive(_9);                 // scope 2 at $DIR/retag.rs:33:19: 33:20\n+        _9 = move _3;                    // scope 2 at $DIR/retag.rs:33:19: 33:20\n+        Retag(_9);                       // scope 2 at $DIR/retag.rs:33:19: 33:20\n+        _8 = &mut (*_9);                 // scope 2 at $DIR/retag.rs:33:19: 33:20\n+        Retag(_8);                       // scope 2 at $DIR/retag.rs:33:19: 33:20\n+        StorageDead(_9);                 // scope 2 at $DIR/retag.rs:33:22: 33:23\n+        StorageLive(_10);                // scope 3 at $DIR/retag.rs:34:13: 34:14\n+        _10 = move _8;                   // scope 3 at $DIR/retag.rs:34:17: 34:18\n+        Retag(_10);                      // scope 3 at $DIR/retag.rs:34:17: 34:18\n+        StorageLive(_11);                // scope 4 at $DIR/retag.rs:36:13: 36:15\n+        StorageLive(_12);                // scope 4 at $DIR/retag.rs:36:18: 36:29\n+        _12 = &raw mut (*_10);           // scope 4 at $DIR/retag.rs:36:18: 36:19\n+        Retag([raw] _12);                // scope 4 at $DIR/retag.rs:36:18: 36:19\n+        _11 = _12;                       // scope 4 at $DIR/retag.rs:36:18: 36:29\n+        StorageDead(_12);                // scope 4 at $DIR/retag.rs:36:29: 36:30\n+        _2 = const ();                   // scope 1 at $DIR/retag.rs:31:5: 37:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:31:5: 37:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_11);                // bb4[18]: scope 4 at $DIR/retag.rs:37:5: 37:6\n-        StorageDead(_10);                // bb4[19]: scope 3 at $DIR/retag.rs:37:5: 37:6\n-        StorageDead(_8);                 // bb4[20]: scope 2 at $DIR/retag.rs:37:5: 37:6\n-        StorageDead(_3);                 // bb4[21]: scope 1 at $DIR/retag.rs:37:5: 37:6\n-        StorageDead(_2);                 // bb4[22]: scope 1 at $DIR/retag.rs:37:5: 37:6\n-        StorageLive(_13);                // bb4[23]: scope 1 at $DIR/retag.rs:40:9: 40:10\n-        StorageLive(_14);                // bb4[24]: scope 1 at $DIR/retag.rs:40:31: 43:6\n-        _14 = [closure@main::{{closure}}#0]; // bb4[25]: scope 1 at $DIR/retag.rs:40:31: 43:6\n+        StorageDead(_11);                // scope 4 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_10);                // scope 3 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_8);                 // scope 2 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_3);                 // scope 1 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_2);                 // scope 1 at $DIR/retag.rs:37:5: 37:6\n+        StorageLive(_13);                // scope 1 at $DIR/retag.rs:40:9: 40:10\n+        StorageLive(_14);                // scope 1 at $DIR/retag.rs:40:31: 43:6\n+        _14 = [closure@main::{{closure}}#0]; // scope 1 at $DIR/retag.rs:40:31: 43:6\n                                          // closure\n                                          // + def_id: DefId(0:14 ~ retag[317d]::main[0]::{{closure}}[0])\n                                          // + substs: [\n                                          //     i8,\n                                          //     for<'r> extern \"rust-call\" fn((&'r i32,)) -> &'r i32,\n                                          //     (),\n                                          // ]\n-        Retag(_14);                      // bb4[26]: scope 1 at $DIR/retag.rs:40:31: 43:6\n-        _13 = move _14 as for<'r> fn(&'r i32) -> &'r i32 (Pointer(ClosureFnPointer(Normal))); // bb4[27]: scope 1 at $DIR/retag.rs:40:31: 43:6\n-        StorageDead(_14);                // bb4[28]: scope 1 at $DIR/retag.rs:43:5: 43:6\n-        StorageLive(_15);                // bb4[29]: scope 6 at $DIR/retag.rs:44:9: 44:11\n-        StorageLive(_16);                // bb4[30]: scope 6 at $DIR/retag.rs:44:14: 44:15\n-        _16 = _13;                       // bb4[31]: scope 6 at $DIR/retag.rs:44:14: 44:15\n-        StorageLive(_17);                // bb4[32]: scope 6 at $DIR/retag.rs:44:16: 44:18\n-        StorageLive(_18);                // bb4[33]: scope 6 at $DIR/retag.rs:44:16: 44:18\n-        _18 = &_1;                       // bb4[34]: scope 6 at $DIR/retag.rs:44:16: 44:18\n-        Retag(_18);                      // bb4[35]: scope 6 at $DIR/retag.rs:44:16: 44:18\n-        _17 = &(*_18);                   // bb4[36]: scope 6 at $DIR/retag.rs:44:16: 44:18\n-        Retag(_17);                      // bb4[37]: scope 6 at $DIR/retag.rs:44:16: 44:18\n-        _15 = move _16(move _17) -> bb5; // bb4[38]: scope 6 at $DIR/retag.rs:44:14: 44:19\n+        Retag(_14);                      // scope 1 at $DIR/retag.rs:40:31: 43:6\n+        _13 = move _14 as for<'r> fn(&'r i32) -> &'r i32 (Pointer(ClosureFnPointer(Normal))); // scope 1 at $DIR/retag.rs:40:31: 43:6\n+        StorageDead(_14);                // scope 1 at $DIR/retag.rs:43:5: 43:6\n+        StorageLive(_15);                // scope 6 at $DIR/retag.rs:44:9: 44:11\n+        StorageLive(_16);                // scope 6 at $DIR/retag.rs:44:14: 44:15\n+        _16 = _13;                       // scope 6 at $DIR/retag.rs:44:14: 44:15\n+        StorageLive(_17);                // scope 6 at $DIR/retag.rs:44:16: 44:18\n+        StorageLive(_18);                // scope 6 at $DIR/retag.rs:44:16: 44:18\n+        _18 = &_1;                       // scope 6 at $DIR/retag.rs:44:16: 44:18\n+        Retag(_18);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n+        _17 = &(*_18);                   // scope 6 at $DIR/retag.rs:44:16: 44:18\n+        Retag(_17);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n+        _15 = move _16(move _17) -> bb5; // scope 6 at $DIR/retag.rs:44:14: 44:19\n     }\n \n     bb5: {\n-        Retag(_15);                      // bb5[0]: scope 6 at $DIR/retag.rs:44:14: 44:19\n-        StorageDead(_17);                // bb5[1]: scope 6 at $DIR/retag.rs:44:18: 44:19\n-        StorageDead(_16);                // bb5[2]: scope 6 at $DIR/retag.rs:44:18: 44:19\n-        StorageDead(_18);                // bb5[3]: scope 6 at $DIR/retag.rs:44:19: 44:20\n-        StorageLive(_19);                // bb5[4]: scope 7 at $DIR/retag.rs:47:5: 47:24\n-        StorageLive(_20);                // bb5[5]: scope 7 at $DIR/retag.rs:47:5: 47:12\n-        StorageLive(_21);                // bb5[6]: scope 7 at $DIR/retag.rs:47:5: 47:12\n-        _21 = Test(const 0i32);          // bb5[7]: scope 7 at $DIR/retag.rs:47:5: 47:12\n+        Retag(_15);                      // scope 6 at $DIR/retag.rs:44:14: 44:19\n+        StorageDead(_17);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n+        StorageDead(_16);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n+        StorageDead(_18);                // scope 6 at $DIR/retag.rs:44:19: 44:20\n+        StorageLive(_19);                // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        StorageLive(_20);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n+        StorageLive(_21);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n+        _21 = Test(const 0i32);          // scope 7 at $DIR/retag.rs:47:5: 47:12\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:10: 47:11\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        _20 = &_21;                      // bb5[8]: scope 7 at $DIR/retag.rs:47:5: 47:12\n-        Retag(_20);                      // bb5[9]: scope 7 at $DIR/retag.rs:47:5: 47:12\n-        StorageLive(_22);                // bb5[10]: scope 7 at $DIR/retag.rs:47:21: 47:23\n-        StorageLive(_23);                // bb5[11]: scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _27 = const main::promoted[0];   // bb5[12]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _20 = &_21;                      // scope 7 at $DIR/retag.rs:47:5: 47:12\n+        Retag(_20);                      // scope 7 at $DIR/retag.rs:47:5: 47:12\n+        StorageLive(_22);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        StorageLive(_23);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _27 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n                                          // ty::Const\n                                          // + ty: &i32\n                                          // + val: Unevaluated(DefId(0:13 ~ retag[317d]::main[0]), [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n                                          // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:13 ~ retag[317d]::main[0]), [], Some(promoted[0])) }\n-        Retag(_27);                      // bb5[13]: scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _23 = &(*_27);                   // bb5[14]: scope 7 at $DIR/retag.rs:47:21: 47:23\n-        Retag(_23);                      // bb5[15]: scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _22 = &(*_23);                   // bb5[16]: scope 7 at $DIR/retag.rs:47:21: 47:23\n-        Retag(_22);                      // bb5[17]: scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // bb5[18]: scope 7 at $DIR/retag.rs:47:5: 47:24\n+        Retag(_27);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _23 = &(*_27);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n                                          // ty::Const\n                                          // + ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -203,37 +203,37 @@ fn main() -> () {\n     }\n \n     bb6: {\n-        Retag(_19);                      // bb6[0]: scope 7 at $DIR/retag.rs:47:5: 47:24\n-        StorageDead(_22);                // bb6[1]: scope 7 at $DIR/retag.rs:47:23: 47:24\n-        StorageDead(_20);                // bb6[2]: scope 7 at $DIR/retag.rs:47:23: 47:24\n-        StorageDead(_23);                // bb6[3]: scope 7 at $DIR/retag.rs:47:24: 47:25\n-        drop(_21) -> [return: bb8, unwind: bb1]; // bb6[4]: scope 7 at $DIR/retag.rs:47:24: 47:25\n+        Retag(_19);                      // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        StorageDead(_22);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n+        StorageDead(_20);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n+        StorageDead(_23);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> [return: bb8, unwind: bb1]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n     bb7 (cleanup): {\n-        drop(_21) -> bb1;                // bb7[0]: scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> bb1;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n     bb8: {\n-        StorageDead(_21);                // bb8[0]: scope 7 at $DIR/retag.rs:47:24: 47:25\n-        StorageDead(_19);                // bb8[1]: scope 7 at $DIR/retag.rs:47:24: 47:25\n-        StorageLive(_25);                // bb8[2]: scope 7 at $DIR/retag.rs:50:9: 50:11\n-        StorageLive(_26);                // bb8[3]: scope 7 at $DIR/retag.rs:50:14: 50:28\n-        _26 = &raw const (*_15);         // bb8[4]: scope 7 at $DIR/retag.rs:50:14: 50:16\n-        Retag([raw] _26);                // bb8[5]: scope 7 at $DIR/retag.rs:50:14: 50:16\n-        _25 = _26;                       // bb8[6]: scope 7 at $DIR/retag.rs:50:14: 50:28\n-        StorageDead(_26);                // bb8[7]: scope 7 at $DIR/retag.rs:50:28: 50:29\n-        _0 = const ();                   // bb8[8]: scope 0 at $DIR/retag.rs:29:11: 51:2\n+        StorageDead(_21);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        StorageDead(_19);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        StorageLive(_25);                // scope 7 at $DIR/retag.rs:50:9: 50:11\n+        StorageLive(_26);                // scope 7 at $DIR/retag.rs:50:14: 50:28\n+        _26 = &raw const (*_15);         // scope 7 at $DIR/retag.rs:50:14: 50:16\n+        Retag([raw] _26);                // scope 7 at $DIR/retag.rs:50:14: 50:16\n+        _25 = _26;                       // scope 7 at $DIR/retag.rs:50:14: 50:28\n+        StorageDead(_26);                // scope 7 at $DIR/retag.rs:50:28: 50:29\n+        _0 = const ();                   // scope 0 at $DIR/retag.rs:29:11: 51:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:29:11: 51:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_25);                // bb8[9]: scope 7 at $DIR/retag.rs:51:1: 51:2\n-        StorageDead(_15);                // bb8[10]: scope 6 at $DIR/retag.rs:51:1: 51:2\n-        StorageDead(_13);                // bb8[11]: scope 1 at $DIR/retag.rs:51:1: 51:2\n-        StorageDead(_1);                 // bb8[12]: scope 0 at $DIR/retag.rs:51:1: 51:2\n-        return;                          // bb8[13]: scope 0 at $DIR/retag.rs:51:2: 51:2\n+        StorageDead(_25);                // scope 7 at $DIR/retag.rs:51:1: 51:2\n+        StorageDead(_15);                // scope 6 at $DIR/retag.rs:51:1: 51:2\n+        StorageDead(_13);                // scope 1 at $DIR/retag.rs:51:1: 51:2\n+        StorageDead(_1);                 // scope 0 at $DIR/retag.rs:51:1: 51:2\n+        return;                          // scope 0 at $DIR/retag.rs:51:2: 51:2\n     }\n }"}, {"sha": "995c8c141c66f3c8849cf06af27f42057986bd11", "filename": "src/test/mir-opt/retag/rustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,9 +6,9 @@ fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        Retag([raw] _1);                 // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _2 = &mut (*_1);                 // bb0[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = const <Test as std::ops::Drop>::drop(move _2) -> bb1; // bb0[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        Retag([raw] _1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = const <Test as std::ops::Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -18,6 +18,6 @@ fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n     }\n \n     bb1: {\n-        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        return;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n }"}, {"sha": "f9ed3932d33356399aecaff84c1c2ee7a9d6f251", "filename": "src/test/mir-opt/retag/rustc.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -7,14 +7,14 @@ fn <impl at $DIR/retag.rs:11:1: 19:2>::foo(_1: &Test, _2: &mut i32) -> &mut i32\n     let mut _3: &mut i32;                // in scope 0 at $DIR/retag.rs:14:9: 14:10\n \n     bb0: {\n-        Retag([fn entry] _1);            // bb0[0]: scope 0 at $DIR/retag.rs:13:5: 15:6\n-        Retag([fn entry] _2);            // bb0[1]: scope 0 at $DIR/retag.rs:13:5: 15:6\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/retag.rs:14:9: 14:10\n-        _3 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/retag.rs:14:9: 14:10\n-        Retag(_3);                       // bb0[4]: scope 0 at $DIR/retag.rs:14:9: 14:10\n-        _0 = &mut (*_3);                 // bb0[5]: scope 0 at $DIR/retag.rs:14:9: 14:10\n-        Retag(_0);                       // bb0[6]: scope 0 at $DIR/retag.rs:14:9: 14:10\n-        StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/retag.rs:15:5: 15:6\n-        return;                          // bb0[8]: scope 0 at $DIR/retag.rs:15:6: 15:6\n+        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:13:5: 15:6\n+        Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:13:5: 15:6\n+        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:14:9: 14:10\n+        _3 = &mut (*_2);                 // scope 0 at $DIR/retag.rs:14:9: 14:10\n+        Retag(_3);                       // scope 0 at $DIR/retag.rs:14:9: 14:10\n+        _0 = &mut (*_3);                 // scope 0 at $DIR/retag.rs:14:9: 14:10\n+        Retag(_0);                       // scope 0 at $DIR/retag.rs:14:9: 14:10\n+        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:15:5: 15:6\n+        return;                          // scope 0 at $DIR/retag.rs:15:6: 15:6\n     }\n }"}, {"sha": "87a8603a931da0ea4892abe8e876aa3ff9ff620b", "filename": "src/test/mir-opt/retag/rustc.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,10 +6,10 @@ fn <impl at $DIR/retag.rs:11:1: 19:2>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:16:42: 16:49\n \n     bb0: {\n-        Retag([fn entry] _1);            // bb0[0]: scope 0 at $DIR/retag.rs:16:5: 18:6\n-        Retag([fn entry] _2);            // bb0[1]: scope 0 at $DIR/retag.rs:16:5: 18:6\n-        _0 = _2;                         // bb0[2]: scope 0 at $DIR/retag.rs:17:9: 17:10\n-        Retag(_0);                       // bb0[3]: scope 0 at $DIR/retag.rs:17:9: 17:10\n-        return;                          // bb0[4]: scope 0 at $DIR/retag.rs:18:6: 18:6\n+        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:16:5: 18:6\n+        Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:16:5: 18:6\n+        _0 = _2;                         // scope 0 at $DIR/retag.rs:17:9: 17:10\n+        Retag(_0);                       // scope 0 at $DIR/retag.rs:17:9: 17:10\n+        return;                          // scope 0 at $DIR/retag.rs:18:6: 18:6\n     }\n }"}, {"sha": "3a7d6a7ca3c6159c541bc234ecd9e5034914398c", "filename": "src/test/mir-opt/simple-match/32bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -5,45 +5,45 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb3, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/simple-match.rs:5:1: 10:2\n+        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb3: {\n-        _0 = const 20usize;              // bb3[0]: scope 0 at $DIR/simple-match.rs:8:14: 8:16\n+        _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000014))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:8:14: 8:16\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000014)) }\n-        goto -> bb5;                     // bb3[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb4: {\n-        _0 = const 10usize;              // bb4[0]: scope 0 at $DIR/simple-match.rs:7:17: 7:19\n+        _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:7:17: 7:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000a)) }\n-        goto -> bb5;                     // bb4[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb5: {\n-        goto -> bb6;                     // bb5[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n \n     bb6: {\n-        return;                          // bb6[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "170181177b26adf812afc274d4876e1d36d9c6e8", "filename": "src/test/mir-opt/simple-match/64bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -5,45 +5,45 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb3, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/simple-match.rs:5:1: 10:2\n+        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb3: {\n-        _0 = const 20usize;              // bb3[0]: scope 0 at $DIR/simple-match.rs:8:14: 8:16\n+        _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000014))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:8:14: 8:16\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000014)) }\n-        goto -> bb5;                     // bb3[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb4: {\n-        _0 = const 10usize;              // bb4[0]: scope 0 at $DIR/simple-match.rs:7:17: 7:19\n+        _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x000000000000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:7:17: 7:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x000000000000000a)) }\n-        goto -> bb5;                     // bb4[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb5: {\n-        goto -> bb6;                     // bb5[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n \n     bb6: {\n-        return;                          // bb6[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "b2517cb7012b488869e7f3404f87fd9046292f57", "filename": "src/test/mir-opt/simplify-arm-identity/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -18,54 +18,54 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify-arm-identity.rs:17:9: 17:10\n-          ((_1 as Foo).0: u8) = const 0u8; // bb0[1]: scope 0 at $DIR/simplify-arm-identity.rs:17:18: 17:29\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:17:9: 17:10\n+          ((_1 as Foo).0: u8) = const 0u8; // scope 0 at $DIR/simplify-arm-identity.rs:17:18: 17:29\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-arm-identity.rs:17:27: 17:28\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_1) = 0;            // bb0[2]: scope 0 at $DIR/simplify-arm-identity.rs:17:18: 17:29\n-          StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n-          _3 = discriminant(_1);           // bb0[4]: scope 1 at $DIR/simplify-arm-identity.rs:19:9: 19:20\n-          switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // bb0[5]: scope 1 at $DIR/simplify-arm-identity.rs:19:9: 19:20\n+          discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:17:18: 17:29\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+          _3 = discriminant(_1);           // scope 1 at $DIR/simplify-arm-identity.rs:19:9: 19:20\n+          switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // scope 1 at $DIR/simplify-arm-identity.rs:19:9: 19:20\n       }\n   \n       bb1: {\n-          ((_2 as Foo).0: u8) = const 0u8; // bb1[0]: scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n+          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-arm-identity.rs:20:30: 20:31\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_2) = 0;            // bb1[1]: scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n-          goto -> bb4;                     // bb1[2]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n       }\n   \n       bb2: {\n-          unreachable;                     // bb2[0]: scope 1 at $DIR/simplify-arm-identity.rs:18:24: 18:25\n+          unreachable;                     // scope 1 at $DIR/simplify-arm-identity.rs:18:24: 18:25\n       }\n   \n       bb3: {\n-          _4 = ((_1 as Foo).0: u8);        // bb3[0]: scope 1 at $DIR/simplify-arm-identity.rs:19:18: 19:19\n-          ((_2 as Foo).0: u8) = move _4;   // bb3[1]: scope 3 at $DIR/simplify-arm-identity.rs:19:24: 19:35\n-          discriminant(_2) = 0;            // bb3[2]: scope 3 at $DIR/simplify-arm-identity.rs:19:24: 19:35\n-          goto -> bb4;                     // bb3[3]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+          _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 19:19\n+          ((_2 as Foo).0: u8) = move _4;   // scope 3 at $DIR/simplify-arm-identity.rs:19:24: 19:35\n+          discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:19:24: 19:35\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n       }\n   \n       bb4: {\n-          StorageDead(_2);                 // bb4[0]: scope 1 at $DIR/simplify-arm-identity.rs:21:6: 21:7\n-          _0 = const ();                   // bb4[1]: scope 0 at $DIR/simplify-arm-identity.rs:16:11: 22:2\n+          StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:21:6: 21:7\n+          _0 = const ();                   // scope 0 at $DIR/simplify-arm-identity.rs:16:11: 22:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-arm-identity.rs:16:11: 22:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb4[2]: scope 0 at $DIR/simplify-arm-identity.rs:22:1: 22:2\n-          return;                          // bb4[3]: scope 0 at $DIR/simplify-arm-identity.rs:22:2: 22:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:22:1: 22:2\n+          return;                          // scope 0 at $DIR/simplify-arm-identity.rs:22:2: 22:2\n       }\n   }\n   "}, {"sha": "f7db14e716526924401a40794ae4a1281e428434", "filename": "src/test/mir-opt/simplify-locals-fixedpoint/rustc.foo.SimplifyLocals.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -16,87 +16,87 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          discriminant(_2) = 0;            // bb0[2]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          discriminant(_3) = 0;            // bb0[4]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          (_1.0: std::option::Option<u8>) = move _2; // bb0[5]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          (_1.1: std::option::Option<T>) = move _3; // bb0[6]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n-          StorageDead(_2);                 // bb0[8]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n-          _5 = discriminant((_1.0: std::option::Option<u8>)); // bb0[9]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n-          switchInt(move _5) -> [1isize: bb2, otherwise: bb1]; // bb0[10]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          discriminant(_2) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          (_1.0: std::option::Option<u8>) = move _2; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          (_1.1: std::option::Option<T>) = move _3; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+          switchInt(move _5) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n       }\n   \n       bb1: {\n-          _0 = const ();                   // bb1[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb7;                     // bb1[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+          goto -> bb7;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }\n   \n       bb2: {\n-          _4 = discriminant((_1.1: std::option::Option<T>)); // bb2[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n-          switchInt(move _4) -> [0isize: bb3, otherwise: bb1]; // bb2[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+          switchInt(move _4) -> [0isize: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n       }\n   \n       bb3: {\n-          StorageLive(_6);                 // bb3[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n-          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // bb3[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n-          StorageLive(_7);                 // bb3[2]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n-          StorageLive(_8);                 // bb3[3]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n-          _8 = _6;                         // bb3[4]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n-          _7 = Gt(move _8, const 42u8);    // bb3[5]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+          StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+          _8 = _6;                         // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+          _7 = Gt(move _8, const 42u8);    // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x2a))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-fixedpoint.rs:5:16: 5:20\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n-          StorageDead(_8);                 // bb3[6]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n-          switchInt(_7) -> [false: bb4, otherwise: bb5]; // bb3[7]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+          StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n+          switchInt(_7) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n       bb4: {\n-          _0 = const ();                   // bb4[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+          _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb6;                     // bb4[1]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+          goto -> bb6;                     // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n       bb5: {\n-          _0 = const ();                   // bb5[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n+          _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb6;                     // bb5[1]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+          goto -> bb6;                     // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n       bb6: {\n-          StorageDead(_7);                 // bb6[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n-          StorageDead(_6);                 // bb6[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n-          goto -> bb7;                     // bb6[2]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+          StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n+          goto -> bb7;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }\n   \n       bb7: {\n-          drop(_1) -> bb8;                 // bb7[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n+          drop(_1) -> bb8;                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n       }\n   \n       bb8: {\n-          StorageDead(_1);                 // bb8[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n-          return;                          // bb8[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:2: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "0742f655730c51aa277365ba9fc8d29534dba540", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -20,55 +20,55 @@\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n--         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n--         _2 = const ();                   // bb0[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n-+         StorageLive(_1);                 // bb0[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-+         _1 = const use_zst(const ((), ())) -> bb1; // bb0[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n+-         _2 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n++         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++         _1 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n--         _3 = const ();                   // bb0[4]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-         _3 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n -                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         _1 = const ((), ());             // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-         _1 = const ((), ());             // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -                                          // ty::Const\n -                                          // + ty: ((), ())\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -                                          // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n--         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n--         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n--         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:28: 13:29\n--         StorageLive(_4);                 // bb0[9]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n--         StorageLive(_6);                 // bb0[10]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n--         _6 = const ();                   // bb0[11]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:28: 13:29\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n+-         _6 = const ();                   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n -                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         StorageLive(_7);                 // bb0[12]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n--         _7 = const ();                   // bb0[13]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-         _7 = const ();                   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n -                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         StorageDead(_7);                 // bb0[14]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n--         StorageDead(_6);                 // bb0[15]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n--         _4 = const use_zst(const ((), ())) -> bb1; // bb0[16]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n+-         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n+-         _4 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n -                                          // ty::Const\n                                            // + ty: fn(((), ())) {use_zst}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -84,29 +84,29 @@\n       }\n   \n       bb1: {\n--         StorageDead(_4);                 // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n--         StorageLive(_8);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n--         StorageLive(_10);                // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n--         StorageLive(_11);                // bb1[3]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         _11 = const Temp { x: 40u8 };    // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n-+         StorageDead(_1);                 // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n-+         StorageLive(_2);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-+         _2 = const use_u8(const 42u8) -> bb2; // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n+-         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         _11 = const Temp { x: 40u8 };    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n++         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n++         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++         _2 = const use_u8(const 42u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n                                            // ty::Const\n -                                          // + ty: Temp\n -                                          // + val: Value(Scalar(0x28))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -                                          // + literal: Const { ty: Temp, val: Value(Scalar(0x28)) }\n--         _10 = const 40u8;                // bb1[5]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n+-         _10 = const 40u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -                                          // ty::Const\n -                                          // + ty: u8\n -                                          // + val: Value(Scalar(0x28))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n--         StorageDead(_10);                // bb1[6]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n--         _8 = const use_u8(const 42u8) -> bb2; // bb1[7]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n+-         _8 = const use_u8(const 42u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n -                                          // ty::Const\n                                            // + ty: fn(u8) {use_u8}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -122,19 +122,17 @@\n       }\n   \n       bb2: {\n--         StorageDead(_11);                // bb2[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n--         StorageDead(_8);                 // bb2[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n--         _0 = const ();                   // bb2[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n-+         StorageDead(_2);                 // bb2[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n-+         _0 = const ();                   // bb2[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n+-         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n++         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         return;                          // bb2[3]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n-+         return;                          // bb2[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n       }\n   }\n   "}, {"sha": "0ca54af85e3b6c5d9eaeaf5fe48ab96f7d8ab83a", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,24 +14,23 @@\n       }\n   \n       bb0: {\n-          _2 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          switchInt(move _2) -> [0isize: bb2, otherwise: bb1]; // bb0[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          switchInt(move _2) -> [0isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n       }\n   \n       bb1: {\n-          _0 = move _1;                    // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n-          goto -> bb3;                     // bb1[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   \n       bb2: {\n-          discriminant(_0) = 0;            // bb2[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n-          goto -> bb3;                     // bb2[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   \n       bb3: {\n--         _5 = discriminant(_1);           // bb3[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--         return;                          // bb3[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n-+         return;                          // bb3[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+-         _5 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "3b472ed3a0376a99d99cc469e216345578337a99", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -8,14 +8,13 @@\n       let mut _3: !;                       // in scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n   \n       bb0: {\n--         goto -> bb1;                     // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb1: {\n--         StorageLive(_2);                 // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = const bar() -> bb3;         // bb1[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         _2 = const bar() -> bb1;         // bb0[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> bb3;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = const bar() -> bb1;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // ty::Const\n                                            // + ty: fn() -> bool {bar}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -25,50 +24,44 @@\n       }\n   \n -     bb2 (cleanup): {\n--         resume;                          // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+-         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n +     bb1: {\n-+         switchInt(_2) -> [false: bb2, otherwise: bb3]; // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb3: {\n--         nop;                             // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb5, otherwise: bb4]; // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb4: {\n--         goto -> bb6;                     // bb4[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb6;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb5: {\n--         _1 = const ();                   // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb2: {\n-+         _1 = const ();                   // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+          _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n--         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-+         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-+         goto -> bb0;                     // bb2[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+          goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n -     bb6: {\n--         _0 = const ();                   // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n +     bb3: {\n-+         _0 = const ();                   // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         StorageDead(_2);                 // bb6[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n--         return;                          // bb6[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n-+         StorageDead(_2);                 // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-+         return;                          // bb3[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+          return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n   }\n   "}, {"sha": "0cc2258f46364dcdb4fd3b0ddf7c2c0a9f8e0b4e", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -8,23 +8,22 @@\n       let mut _3: !;                       // in scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n   \n       bb0: {\n--         goto -> bb1;                     // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-+         falseUnwind -> [real: bb1, cleanup: bb2]; // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n++         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb3, cleanup: bb4]; // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb2: {\n--         goto -> bb13;                    // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+-         goto -> bb13;                    // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n -     }\n - \n -     bb3: {\n--         StorageLive(_2);                 // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = const bar() -> [return: bb5, unwind: bb4]; // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         StorageLive(_2);                 // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         _2 = const bar() -> [return: bb3, unwind: bb2]; // bb1[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> [return: bb5, unwind: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // ty::Const\n                                            // + ty: fn() -> bool {bar}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -34,75 +33,69 @@\n       }\n   \n -     bb4 (cleanup): {\n--         resume;                          // bb4[0]: scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n +     bb2 (cleanup): {\n-+         resume;                          // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   \n -     bb5: {\n--         FakeRead(ForMatchedPlace, _2);   // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb7, otherwise: bb6]; // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb3: {\n-+         FakeRead(ForMatchedPlace, _2);   // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         switchInt(_2) -> [false: bb5, otherwise: bb4]; // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb6: {\n--         falseEdges -> [real: bb8, imaginary: bb7]; // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         falseEdges -> [real: bb8, imaginary: bb7]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb4: {\n-+         falseEdges -> [real: bb6, imaginary: bb5]; // bb4[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         falseEdges -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb7: {\n--         _1 = const ();                   // bb7[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb5: {\n-+         _1 = const ();                   // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+          _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb12;                    // bb7[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-+         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n++         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n -     bb8: {\n--         _0 = const ();                   // bb8[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n +     bb6: {\n-+         _0 = const ();                   // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb9;                     // bb8[1]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - \n -     bb9: {\n--         StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n--         goto -> bb2;                     // bb9[1]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         goto -> bb2;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - \n -     bb10: {\n--         unreachable;                     // bb10[0]: scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n+-         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n -     }\n - \n -     bb11: {\n--         goto -> bb12;                    // bb11[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb12: {\n--         StorageDead(_2);                 // bb12[0]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n--         goto -> bb1;                     // bb12[1]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb13: {\n--         return;                          // bb13[0]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n-+         StorageDead(_2);                 // bb6[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-+         return;                          // bb6[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+          return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n   }\n   "}, {"sha": "e94e49bf0cb4fca56b5c7750e0d7ab57a36caa2b", "filename": "src/test/mir-opt/simplify_if/rustc.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -7,38 +7,38 @@\n       let _2: ();                          // in scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n-          _1 = const false;                // bb0[1]: scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n+          _1 = const false;                // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n                                            // ty::Const\n                                            // + ty: bool\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:6:8: 6:13\n                                            // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n--         switchInt(const false) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+-         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n -                                          // ty::Const\n -                                          // + ty: bool\n -                                          // + val: Value(Scalar(0x00))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify_if.rs:6:5: 8:6\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         goto -> bb1;                     // bb0[2]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n++         goto -> bb1;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n       bb1: {\n-          _0 = const ();                   // bb1[0]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+          _0 = const ();                   // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:6:5: 8:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+          goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n       bb2: {\n-          StorageLive(_2);                 // bb2[0]: scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n-          _2 = const noop() -> bb3;        // bb2[1]: scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+          _2 = const noop() -> bb3;        // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n                                            // ty::Const\n                                            // + ty: fn() {noop}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -48,20 +48,20 @@\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // bb3[0]: scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n-          _0 = const ();                   // bb3[1]: scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n+          _0 = const ();                   // scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:6:14: 8:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb4;                     // bb3[2]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+          goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n       bb4: {\n-          StorageDead(_1);                 // bb4[0]: scope 0 at $DIR/simplify_if.rs:9:1: 9:2\n-          return;                          // bb4[1]: scope 0 at $DIR/simplify_if.rs:9:2: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify_if.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/simplify_if.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "68b1b70c52a80ade71f7bbaab2a3353f1a15bb4a", "filename": "src/test/mir-opt/simplify_match/rustc.main.SimplifyBranches-after-copy-prop.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -10,34 +10,34 @@\n       }\n   \n       bb0: {\n-          nop;                             // bb0[0]: scope 0 at $DIR/simplify_match.rs:6:11: 6:31\n-          nop;                             // bb0[1]: scope 0 at $DIR/simplify_match.rs:6:17: 6:18\n-          nop;                             // bb0[2]: scope 0 at $DIR/simplify_match.rs:6:21: 6:26\n-          nop;                             // bb0[3]: scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n-          nop;                             // bb0[4]: scope 0 at $DIR/simplify_match.rs:6:30: 6:31\n--         switchInt(const false) -> [false: bb1, otherwise: bb2]; // bb0[5]: scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n+          nop;                             // scope 0 at $DIR/simplify_match.rs:6:11: 6:31\n+          nop;                             // scope 0 at $DIR/simplify_match.rs:6:17: 6:18\n+          nop;                             // scope 0 at $DIR/simplify_match.rs:6:21: 6:26\n+          nop;                             // scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n+          nop;                             // scope 0 at $DIR/simplify_match.rs:6:30: 6:31\n+-         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n -                                          // ty::Const\n -                                          // + ty: bool\n -                                          // + val: Value(Scalar(0x00))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify_match.rs:6:21: 6:26\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         goto -> bb1;                     // bb0[5]: scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n++         goto -> bb1;                     // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n       }\n   \n       bb1: {\n-          _0 = const ();                   // bb1[0]: scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n+          _0 = const ();                   // scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_match.rs:8:18: 8:20\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb3;                     // bb1[1]: scope 0 at $DIR/simplify_match.rs:6:5: 9:6\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_match.rs:6:5: 9:6\n       }\n   \n       bb2: {\n-          _0 = const noop() -> bb3;        // bb2[0]: scope 0 at $DIR/simplify_match.rs:7:17: 7:23\n+          _0 = const noop() -> bb3;        // scope 0 at $DIR/simplify_match.rs:7:17: 7:23\n                                            // ty::Const\n                                            // + ty: fn() {noop}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -47,8 +47,8 @@\n       }\n   \n       bb3: {\n-          nop;                             // bb3[0]: scope 0 at $DIR/simplify_match.rs:10:1: 10:2\n-          return;                          // bb3[1]: scope 0 at $DIR/simplify_match.rs:10:2: 10:2\n+          nop;                             // scope 0 at $DIR/simplify_match.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/simplify_match.rs:10:2: 10:2\n       }\n   }\n   "}, {"sha": "20520f7db368e569b9a1ca423e53c9bd5d9af307", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -39,32 +39,32 @@\n       }\n   \n       bb0: {\n-          _5 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-          switchInt(move _5) -> [0isize: bb1, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          _5 = discriminant(_1);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          switchInt(move _5) -> [0isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n       }\n   \n       bb1: {\n--         _10 = ((_1 as Ok).0: u32);       // bb1[0]: scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n--         ((_0 as Ok).0: u32) = move _10;  // bb1[1]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n--         discriminant(_0) = 0;            // bb1[2]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-+         _0 = move _1;                    // bb1[0]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-+         nop;                             // bb1[1]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-+         nop;                             // bb1[2]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-          goto -> bb3;                     // bb1[3]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+-         _10 = ((_1 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+-         ((_0 as Ok).0: u32) = move _10;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n++         _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n       }\n   \n       bb2: {\n--         _6 = ((_1 as Err).0: i32);       // bb2[0]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n--         ((_0 as Err).0: i32) = move _6;  // bb2[1]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n--         discriminant(_0) = 1;            // bb2[2]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         _0 = move _1;                    // bb2[0]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         nop;                             // bb2[1]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         nop;                             // bb2[2]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-          goto -> bb3;                     // bb2[3]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         _6 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         ((_0 as Err).0: i32) = move _6;  // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n++         _0 = move _1;                    // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n++         nop;                             // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n++         nop;                             // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n       }\n   \n       bb3: {\n-          return;                          // bb3[0]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "e5661a47201d908ecc515cbf60d9ba1204ad2cb6", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -38,18 +38,18 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        _5 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        goto -> bb1;                     // bb0[1]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        _5 = discriminant(_1);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n     }\n \n     bb1: {\n-        _0 = move _1;                    // bb1[0]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        nop;                             // bb1[1]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        nop;                             // bb1[2]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        goto -> bb2;                     // bb1[3]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+        _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n \n     bb2: {\n-        return;                          // bb2[0]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}, {"sha": "989931ed0eaf755b9b94375c9df5ef8328625bde", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -29,7 +29,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        _0 = move _1;                    // bb0[0]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        return;                          // bb0[1]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+        _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}, {"sha": "e79dcba13b00b78424963297f8043abf0557854f", "filename": "src/test/mir-opt/slice-drop-shim/32bit/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -18,114 +18,114 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     let mut _15: *mut [std::string::String]; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb15;                    // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb15;                    // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n-        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        return;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        resume;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb3 (cleanup): {\n-        _5 = &raw mut (*_1)[_4];         // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // bb3[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        drop((*_5)) -> bb4;              // bb3[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_5)) -> bb4;              // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb4 (cleanup): {\n-        _6 = Eq(_4, _3);                 // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // bb4[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _6 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb5: {\n-        _7 = &raw mut (*_1)[_4];         // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // bb5[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        drop((*_7)) -> [return: bb6, unwind: bb4]; // bb5[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_7)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        _8 = Eq(_4, _3);                 // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // bb6[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _8 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb7: {\n-        _4 = const 0usize;               // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = const 0usize;               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n-        goto -> bb6;                     // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb6;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb8: {\n-        goto -> bb7;                     // bb8[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb9 (cleanup): {\n-        _11 = _9;                        // bb9[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // bb9[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _11 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        drop((*_11)) -> bb10;            // bb9[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_11)) -> bb10;            // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb10 (cleanup): {\n-        _12 = Eq(_9, _10);               // bb10[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // bb10[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _12 = Eq(_9, _10);               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb11: {\n-        _13 = _9;                        // bb11[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // bb11[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _13 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        drop((*_13)) -> [return: bb12, unwind: bb10]; // bb11[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_13)) -> [return: bb12, unwind: bb10]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb12: {\n-        _14 = Eq(_9, _10);               // bb12[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // bb12[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _14 = Eq(_9, _10);               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb13: {\n-        _15 = &raw mut (*_1);            // bb13[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = move _15 as *mut std::string::String (Misc); // bb13[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _10 = Offset(_9, move _3);       // bb13[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        goto -> bb12;                    // bb13[3]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _15 = &raw mut (*_1);            // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = move _15 as *mut std::string::String (Misc); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _10 = Offset(_9, move _3);       // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb12;                    // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb14: {\n-        goto -> bb13;                    // bb14[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb13;                    // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb15: {\n-        _2 = SizeOf(std::string::String); // bb15[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = Len((*_1));                 // bb15[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // bb15[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = Len((*_1));                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n }"}, {"sha": "604a0228f63cf0e5ffe7fa37afae3014a6f35027", "filename": "src/test/mir-opt/slice-drop-shim/64bit/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -18,114 +18,114 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     let mut _15: *mut [std::string::String]; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb15;                    // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb15;                    // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n-        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        return;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        resume;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb3 (cleanup): {\n-        _5 = &raw mut (*_1)[_4];         // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // bb3[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        drop((*_5)) -> bb4;              // bb3[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_5)) -> bb4;              // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb4 (cleanup): {\n-        _6 = Eq(_4, _3);                 // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // bb4[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _6 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb5: {\n-        _7 = &raw mut (*_1)[_4];         // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // bb5[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        drop((*_7)) -> [return: bb6, unwind: bb4]; // bb5[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_7)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        _8 = Eq(_4, _3);                 // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // bb6[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _8 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb7: {\n-        _4 = const 0usize;               // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = const 0usize;               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        goto -> bb6;                     // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb6;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb8: {\n-        goto -> bb7;                     // bb8[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb9 (cleanup): {\n-        _11 = _9;                        // bb9[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // bb9[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _11 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        drop((*_11)) -> bb10;            // bb9[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_11)) -> bb10;            // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb10 (cleanup): {\n-        _12 = Eq(_9, _10);               // bb10[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // bb10[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _12 = Eq(_9, _10);               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb11: {\n-        _13 = _9;                        // bb11[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // bb11[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _13 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        drop((*_13)) -> [return: bb12, unwind: bb10]; // bb11[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop((*_13)) -> [return: bb12, unwind: bb10]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb12: {\n-        _14 = Eq(_9, _10);               // bb12[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // bb12[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _14 = Eq(_9, _10);               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb13: {\n-        _15 = &raw mut (*_1);            // bb13[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = move _15 as *mut std::string::String (Misc); // bb13[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _10 = Offset(_9, move _3);       // bb13[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        goto -> bb12;                    // bb13[3]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _15 = &raw mut (*_1);            // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = move _15 as *mut std::string::String (Misc); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _10 = Offset(_9, move _3);       // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb12;                    // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb14: {\n-        goto -> bb13;                    // bb14[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb13;                    // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb15: {\n-        _2 = SizeOf(std::string::String); // bb15[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = Len((*_1));                 // bb15[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // bb15[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = Len((*_1));                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n }"}, {"sha": "e7815da73aa151dd2151ae867532aa0c10d351ac", "filename": "src/test/mir-opt/storage_live_dead_in_statics/rustc.XXX.mir_map.0.mir", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -52,14 +52,14 @@ static XXX: &Foo = {\n     let mut _48: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n-        StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n-        StorageLive(_5);                 // bb0[4]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n-        StorageLive(_6);                 // bb0[5]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n-        StorageLive(_7);                 // bb0[6]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n-        _7 = (const 0u32, const 1u32);   // bb0[7]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n+        StorageLive(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n+        StorageLive(_2);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n+        StorageLive(_3);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        StorageLive(_4);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        StorageLive(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        StorageLive(_6);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n+        StorageLive(_7);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n+        _7 = (const 0u32, const 1u32);   // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -72,8 +72,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:8:13: 8:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_8);                 // bb0[8]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n-        _8 = (const 0u32, const 2u32);   // bb0[9]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n+        StorageLive(_8);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n+        _8 = (const 0u32, const 2u32);   // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -86,8 +86,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:8:21: 8:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_9);                 // bb0[10]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n-        _9 = (const 0u32, const 3u32);   // bb0[11]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n+        StorageLive(_9);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n+        _9 = (const 0u32, const 3u32);   // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -100,8 +100,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:8:29: 8:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_10);                // bb0[12]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n-        _10 = (const 0u32, const 1u32);  // bb0[13]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n+        StorageLive(_10);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n+        _10 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -114,8 +114,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:9:13: 9:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_11);                // bb0[14]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n-        _11 = (const 0u32, const 2u32);  // bb0[15]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n+        StorageLive(_11);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n+        _11 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -128,8 +128,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:9:21: 9:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_12);                // bb0[16]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n-        _12 = (const 0u32, const 3u32);  // bb0[17]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n+        StorageLive(_12);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n+        _12 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -142,8 +142,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:9:29: 9:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_13);                // bb0[18]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n-        _13 = (const 0u32, const 1u32);  // bb0[19]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n+        StorageLive(_13);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n+        _13 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -156,8 +156,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:10:13: 10:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_14);                // bb0[20]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n-        _14 = (const 0u32, const 2u32);  // bb0[21]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n+        StorageLive(_14);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n+        _14 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -170,8 +170,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:10:21: 10:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_15);                // bb0[22]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n-        _15 = (const 0u32, const 3u32);  // bb0[23]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n+        StorageLive(_15);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n+        _15 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -184,8 +184,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:10:29: 10:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_16);                // bb0[24]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n-        _16 = (const 0u32, const 1u32);  // bb0[25]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n+        StorageLive(_16);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n+        _16 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -198,8 +198,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:11:13: 11:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_17);                // bb0[26]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n-        _17 = (const 0u32, const 2u32);  // bb0[27]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n+        StorageLive(_17);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n+        _17 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -212,8 +212,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:11:21: 11:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_18);                // bb0[28]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n-        _18 = (const 0u32, const 3u32);  // bb0[29]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n+        StorageLive(_18);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n+        _18 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -226,8 +226,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:11:29: 11:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_19);                // bb0[30]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n-        _19 = (const 0u32, const 1u32);  // bb0[31]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n+        StorageLive(_19);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n+        _19 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -240,8 +240,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:12:13: 12:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_20);                // bb0[32]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n-        _20 = (const 0u32, const 2u32);  // bb0[33]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n+        StorageLive(_20);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n+        _20 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -254,8 +254,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:12:21: 12:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_21);                // bb0[34]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n-        _21 = (const 0u32, const 3u32);  // bb0[35]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n+        StorageLive(_21);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n+        _21 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -268,8 +268,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:12:29: 12:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_22);                // bb0[36]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n-        _22 = (const 0u32, const 1u32);  // bb0[37]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n+        StorageLive(_22);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n+        _22 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -282,8 +282,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:13:13: 13:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_23);                // bb0[38]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n-        _23 = (const 0u32, const 2u32);  // bb0[39]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n+        StorageLive(_23);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n+        _23 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -296,8 +296,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:13:21: 13:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_24);                // bb0[40]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n-        _24 = (const 0u32, const 3u32);  // bb0[41]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n+        StorageLive(_24);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n+        _24 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -310,8 +310,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:13:29: 13:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_25);                // bb0[42]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n-        _25 = (const 0u32, const 1u32);  // bb0[43]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n+        StorageLive(_25);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n+        _25 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -324,8 +324,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:14:13: 14:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_26);                // bb0[44]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n-        _26 = (const 0u32, const 2u32);  // bb0[45]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n+        StorageLive(_26);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n+        _26 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -338,8 +338,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:14:21: 14:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_27);                // bb0[46]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n-        _27 = (const 0u32, const 3u32);  // bb0[47]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n+        StorageLive(_27);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n+        _27 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -352,8 +352,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:14:29: 14:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_28);                // bb0[48]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n-        _28 = (const 0u32, const 1u32);  // bb0[49]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n+        StorageLive(_28);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n+        _28 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -366,8 +366,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:15:13: 15:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_29);                // bb0[50]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n-        _29 = (const 0u32, const 2u32);  // bb0[51]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n+        StorageLive(_29);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n+        _29 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -380,8 +380,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:15:21: 15:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_30);                // bb0[52]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n-        _30 = (const 0u32, const 3u32);  // bb0[53]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n+        StorageLive(_30);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n+        _30 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -394,8 +394,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:15:29: 15:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_31);                // bb0[54]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n-        _31 = (const 0u32, const 1u32);  // bb0[55]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n+        StorageLive(_31);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n+        _31 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -408,8 +408,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:16:13: 16:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_32);                // bb0[56]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n-        _32 = (const 0u32, const 2u32);  // bb0[57]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n+        StorageLive(_32);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n+        _32 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -422,8 +422,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:16:21: 16:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_33);                // bb0[58]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n-        _33 = (const 0u32, const 3u32);  // bb0[59]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n+        StorageLive(_33);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n+        _33 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -436,8 +436,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:16:29: 16:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_34);                // bb0[60]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n-        _34 = (const 0u32, const 1u32);  // bb0[61]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n+        StorageLive(_34);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n+        _34 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -450,8 +450,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:17:13: 17:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_35);                // bb0[62]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n-        _35 = (const 0u32, const 2u32);  // bb0[63]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n+        StorageLive(_35);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n+        _35 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -464,8 +464,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:17:21: 17:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_36);                // bb0[64]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n-        _36 = (const 0u32, const 3u32);  // bb0[65]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n+        StorageLive(_36);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n+        _36 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -478,8 +478,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:17:29: 17:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_37);                // bb0[66]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n-        _37 = (const 0u32, const 1u32);  // bb0[67]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n+        StorageLive(_37);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n+        _37 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -492,8 +492,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:18:13: 18:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_38);                // bb0[68]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n-        _38 = (const 0u32, const 2u32);  // bb0[69]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n+        StorageLive(_38);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n+        _38 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -506,8 +506,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:18:21: 18:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_39);                // bb0[70]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n-        _39 = (const 0u32, const 3u32);  // bb0[71]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n+        StorageLive(_39);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n+        _39 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -520,8 +520,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:18:29: 18:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_40);                // bb0[72]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n-        _40 = (const 0u32, const 1u32);  // bb0[73]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n+        StorageLive(_40);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n+        _40 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -534,8 +534,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:19:13: 19:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_41);                // bb0[74]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n-        _41 = (const 0u32, const 2u32);  // bb0[75]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n+        StorageLive(_41);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n+        _41 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -548,8 +548,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:19:21: 19:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_42);                // bb0[76]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n-        _42 = (const 0u32, const 3u32);  // bb0[77]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n+        StorageLive(_42);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n+        _42 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -562,8 +562,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:19:29: 19:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_43);                // bb0[78]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n-        _43 = (const 0u32, const 1u32);  // bb0[79]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n+        StorageLive(_43);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n+        _43 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -576,8 +576,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:20:13: 20:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_44);                // bb0[80]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n-        _44 = (const 0u32, const 2u32);  // bb0[81]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n+        StorageLive(_44);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n+        _44 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -590,8 +590,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:20:21: 20:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_45);                // bb0[82]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n-        _45 = (const 0u32, const 3u32);  // bb0[83]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n+        StorageLive(_45);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n+        _45 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -604,8 +604,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:20:29: 20:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        StorageLive(_46);                // bb0[84]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n-        _46 = (const 0u32, const 1u32);  // bb0[85]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n+        StorageLive(_46);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n+        _46 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -618,8 +618,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:21:13: 21:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-        StorageLive(_47);                // bb0[86]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n-        _47 = (const 0u32, const 2u32);  // bb0[87]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n+        StorageLive(_47);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n+        _47 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -632,8 +632,8 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:21:21: 21:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-        StorageLive(_48);                // bb0[88]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n-        _48 = (const 0u32, const 3u32);  // bb0[89]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n+        StorageLive(_48);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n+        _48 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -646,25 +646,25 @@ static XXX: &Foo = {\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:21:29: 21:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48]; // bb0[90]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n-        _5 = &_6;                        // bb0[91]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n-        _4 = &(*_5);                     // bb0[92]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n-        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize)); // bb0[93]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n-        _2 = Foo { tup: const \"hi\", data: move _3 }; // bb0[94]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n+        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48]; // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n+        _5 = &_6;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        _4 = &(*_5);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize)); // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        _2 = Foo { tup: const \"hi\", data: move _3 }; // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n                                          // ty::Const\n                                          // + ty: &str\n                                          // + val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n-        _1 = &_2;                        // bb0[95]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n-        _0 = &(*_1);                     // bb0[96]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n-        StorageDead(_5);                 // bb0[97]: scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n-        StorageDead(_1);                 // bb0[98]: scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n-        return;                          // bb0[99]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n+        _1 = &_2;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n+        _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n+        StorageDead(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n+        StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n+        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n+        resume;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n     }\n }"}, {"sha": "5ffc83158ead2949e9d808c34e9f4a9af18c16ea", "filename": "src/test/mir-opt/storage_ranges/rustc.main.nll.0.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -36,52 +36,52 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n-        _1 = const 0i32;                 // bb0[1]: scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n+        StorageLive(_1);                 // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+        _1 = const 0i32;                 // scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/storage_ranges.rs:4:13: 4:14\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n-        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n-        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n-        StorageLive(_4);                 // bb0[5]: scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n-        StorageLive(_5);                 // bb0[6]: scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n-        _5 = _1;                         // bb0[7]: scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n-        _4 = std::option::Option::<i32>::Some(move _5); // bb0[8]: scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n-        StorageDead(_5);                 // bb0[9]: scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n-        _3 = &_4;                        // bb0[10]: scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n-        FakeRead(ForLet, _3);            // bb0[11]: scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n-        _2 = const ();                   // bb0[12]: scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n+        FakeRead(ForLet, _1);            // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+        StorageLive(_2);                 // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n+        StorageLive(_3);                 // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        StorageLive(_4);                 // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n+        StorageLive(_5);                 // scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n+        _5 = _1;                         // scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n+        _4 = std::option::Option::<i32>::Some(move _5); // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n+        StorageDead(_5);                 // scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n+        _3 = &_4;                        // scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n+        FakeRead(ForLet, _3);            // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        _2 = const ();                   // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/storage_ranges.rs:5:5: 7:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb0[13]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n-        StorageDead(_3);                 // bb0[14]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n-        StorageDead(_2);                 // bb0[15]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n-        StorageLive(_6);                 // bb0[16]: scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n-        _6 = const 1i32;                 // bb0[17]: scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n+        StorageDead(_4);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n+        StorageDead(_3);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n+        StorageDead(_2);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n+        StorageLive(_6);                 // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        _6 = const 1i32;                 // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/storage_ranges.rs:8:13: 8:14\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        FakeRead(ForLet, _6);            // bb0[18]: scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n-        _0 = const ();                   // bb0[19]: scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n+        FakeRead(ForLet, _6);            // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        _0 = const ();                   // scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/storage_ranges.rs:3:11: 9:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_6);                 // bb0[20]: scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n-        StorageDead(_1);                 // bb0[21]: scope 0 at $DIR/storage_ranges.rs:9:1: 9:2\n-        return;                          // bb0[22]: scope 0 at $DIR/storage_ranges.rs:9:2: 9:2\n+        StorageDead(_6);                 // scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n+        StorageDead(_1);                 // scope 0 at $DIR/storage_ranges.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/storage_ranges.rs:9:2: 9:2\n     }\n }"}, {"sha": "de29cd61019f11f6929287f5217f2eddc82cd3dc", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -16,102 +16,102 @@ fn move_out_by_subslice() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        _3 = Box(i32);                   // bb0[3]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        (*_3) = const 1i32;              // bb0[4]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        (*_3) = const 1i32;              // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:11:18: 11:19\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        _2 = move _3;                    // bb0[5]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb4, unwind: bb2]; // bb0[6]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n     }\n \n     bb2 (cleanup): {\n-        drop(_2) -> bb1;                 // bb2[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n     bb3 (cleanup): {\n-        drop(_3) -> bb2;                 // bb3[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n     bb4: {\n-        StorageDead(_3);                 // bb4[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-        StorageLive(_4);                 // bb4[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        StorageLive(_5);                 // bb4[2]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        _5 = Box(i32);                   // bb4[3]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        (*_5) = const 2i32;              // bb4[4]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        (*_5) = const 2i32;              // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:11:25: 11:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        _4 = move _5;                    // bb4[5]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb7, unwind: bb5]; // bb4[6]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n     bb5 (cleanup): {\n-        drop(_4) -> bb2;                 // bb5[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n     bb6 (cleanup): {\n-        drop(_5) -> bb5;                 // bb6[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n     bb7: {\n-        StorageDead(_5);                 // bb7[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-        _1 = [move _2, move _4];         // bb7[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb8, unwind: bb2]; // bb7[2]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n     bb8: {\n-        StorageDead(_4);                 // bb8[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb9, unwind: bb1]; // bb8[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n     bb9: {\n-        StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        FakeRead(ForLet, _1);            // bb9[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n-        StorageLive(_6);                 // bb9[2]: scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n-        _6 = move _1[0..2];              // bb9[3]: scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n-        _0 = const ();                   // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n+        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:10:27: 13:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_6) -> [return: bb12, unwind: bb10]; // bb9[5]: scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_1) -> bb1;                 // bb10[0]: scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n     bb11 (cleanup): {\n-        drop(_6) -> bb10;                // bb11[0]: scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n     bb12: {\n-        StorageDead(_6);                 // bb12[0]: scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb13, unwind: bb1]; // bb12[1]: scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n     bb13: {\n-        StorageDead(_1);                 // bb13[0]: scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        goto -> bb14;                    // bb13[1]: scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n     bb14: {\n-        return;                          // bb14[0]: scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n }"}, {"sha": "aeab0e892ae8b8725c6bfa59dcb782fdc0d5f5b4", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -16,102 +16,102 @@ fn move_out_from_end() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        _3 = Box(i32);                   // bb0[3]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        (*_3) = const 1i32;              // bb0[4]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        (*_3) = const 1i32;              // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:5:18: 5:19\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        _2 = move _3;                    // bb0[5]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb4, unwind: bb2]; // bb0[6]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n     }\n \n     bb2 (cleanup): {\n-        drop(_2) -> bb1;                 // bb2[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n     bb3 (cleanup): {\n-        drop(_3) -> bb2;                 // bb3[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n     bb4: {\n-        StorageDead(_3);                 // bb4[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-        StorageLive(_4);                 // bb4[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        StorageLive(_5);                 // bb4[2]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        _5 = Box(i32);                   // bb4[3]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        (*_5) = const 2i32;              // bb4[4]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        (*_5) = const 2i32;              // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:5:25: 5:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        _4 = move _5;                    // bb4[5]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb7, unwind: bb5]; // bb4[6]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n     bb5 (cleanup): {\n-        drop(_4) -> bb2;                 // bb5[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n     bb6 (cleanup): {\n-        drop(_5) -> bb5;                 // bb6[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n     bb7: {\n-        StorageDead(_5);                 // bb7[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-        _1 = [move _2, move _4];         // bb7[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb8, unwind: bb2]; // bb7[2]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n     bb8: {\n-        StorageDead(_4);                 // bb8[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb9, unwind: bb1]; // bb8[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n     bb9: {\n-        StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        FakeRead(ForLet, _1);            // bb9[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n-        StorageLive(_6);                 // bb9[2]: scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n-        _6 = move _1[1 of 2];            // bb9[3]: scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n-        _0 = const ();                   // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n+        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:4:24: 7:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_6) -> [return: bb12, unwind: bb10]; // bb9[5]: scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_1) -> bb1;                 // bb10[0]: scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n     bb11 (cleanup): {\n-        drop(_6) -> bb10;                // bb11[0]: scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n     bb12: {\n-        StorageDead(_6);                 // bb12[0]: scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb13, unwind: bb1]; // bb12[1]: scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n     bb13: {\n-        StorageDead(_1);                 // bb13[0]: scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        goto -> bb14;                    // bb13[1]: scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n     bb14: {\n-        return;                          // bb14[0]: scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n }"}, {"sha": "c17fe3bb757575195e4880e2312a579449ce294a", "filename": "src/test/mir-opt/uninhabited-enum/rustc.process_never.SimplifyLocals.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_never.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_never.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_never.SimplifyLocals.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,9 +11,9 @@ fn process_never(_1: *const !) -> () {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/uninhabited-enum.rs:8:8: 8:14\n-        _2 = &(*_1);                     // bb0[1]: scope 2 at $DIR/uninhabited-enum.rs:8:26: 8:33\n-        StorageDead(_2);                 // bb0[2]: scope 0 at $DIR/uninhabited-enum.rs:9:1: 9:2\n-        unreachable;                     // bb0[3]: scope 0 at $DIR/uninhabited-enum.rs:7:39: 9:2\n+        StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:8:8: 8:14\n+        _2 = &(*_1);                     // scope 2 at $DIR/uninhabited-enum.rs:8:26: 8:33\n+        StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:9:1: 9:2\n+        unreachable;                     // scope 0 at $DIR/uninhabited-enum.rs:7:39: 9:2\n     }\n }"}, {"sha": "8cfcd64a70f7d0f3053d6b8c0f703f7d1293d5ef", "filename": "src/test/mir-opt/uninhabited-enum/rustc.process_void.SimplifyLocals.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -11,16 +11,16 @@ fn process_void(_1: *const Void) -> () {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n-        _2 = &(*_1);                     // bb0[1]: scope 2 at $DIR/uninhabited-enum.rs:14:26: 14:33\n-        _0 = const ();                   // bb0[2]: scope 0 at $DIR/uninhabited-enum.rs:13:41: 17:2\n+        StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n+        _2 = &(*_1);                     // scope 2 at $DIR/uninhabited-enum.rs:14:26: 14:33\n+        _0 = const ();                   // scope 0 at $DIR/uninhabited-enum.rs:13:41: 17:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited-enum.rs:13:41: 17:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n-        return;                          // bb0[4]: scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n+        StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n+        return;                          // scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n     }\n }"}, {"sha": "4d65f8d10471df1dbd409e32f1895fbc85cd0589", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -13,64 +13,64 @@ fn main() -> () {\n     let _9: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-        _2 = Test1::C;                   // bb0[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-        _3 = discriminant(_2);           // bb0[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n-        StorageLive(_5);                 // bb0[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-        _5 = const \"C\";                  // bb0[5]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+        StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+        StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+        _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+        _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+        StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+        _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                          // ty::Const\n                                          // + ty: &str\n                                          // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-        _1 = &(*_5);                     // bb0[6]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-        StorageDead(_5);                 // bb0[7]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n-        StorageDead(_2);                 // bb0[8]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n-        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n-        StorageLive(_6);                 // bb0[10]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n-        StorageLive(_7);                 // bb0[11]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-        _7 = Test2::D;                   // bb0[12]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-        _8 = discriminant(_7);           // bb0[13]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n-        switchInt(move _8) -> [4isize: bb2, otherwise: bb1]; // bb0[14]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+        _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+        StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n+        StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+        StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+        StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+        StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+        switchInt(move _8) -> [4isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n     }\n \n     bb1: {\n-        StorageLive(_9);                 // bb1[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-        _9 = const \"E\";                  // bb1[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+        StorageLive(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+        _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                          // ty::Const\n                                          // + ty: &str\n                                          // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-        _6 = &(*_9);                     // bb1[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-        StorageDead(_9);                 // bb1[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n-        goto -> bb3;                     // bb1[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+        _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+        StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n+        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n     }\n \n     bb2: {\n-        _6 = const \"D\";                  // bb2[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n+        _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // ty::Const\n                                          // + ty: &str\n                                          // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-        goto -> bb3;                     // bb2[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // bb3[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n-        StorageDead(_6);                 // bb3[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n-        _0 = const ();                   // bb3[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+        StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+        StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+        _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        return;                          // bb3[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n+        return;                          // scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n     }\n }"}, {"sha": "da9dd8b0963117f6db6ca8ca98738fa8c1dd9316", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -14,99 +14,99 @@\n       let _9: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-          _2 = Test1::C;                   // bb0[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-          _3 = discriminant(_2);           // bb0[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n--         switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb1]; // bb0[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n-+         switchInt(move _3) -> bb1;       // bb0[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+          StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+          _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+          _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+-         switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n++         switchInt(move _3) -> bb1;       // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // bb1[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-          _5 = const \"C\";                  // bb1[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+          StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+          _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-          _1 = &(*_5);                     // bb1[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-          StorageDead(_5);                 // bb1[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n-          goto -> bb4;                     // bb1[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+          StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n+          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n       }\n   \n       bb2: {\n-          _1 = const \"A(Empty)\";           // bb2[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n+          _1 = const \"A(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-          goto -> bb4;                     // bb2[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n       }\n   \n       bb3: {\n-          StorageLive(_4);                 // bb3[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n-          _4 = const \"B(Empty)\";           // bb3[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+          StorageLive(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+          _4 = const \"B(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-          _1 = &(*_4);                     // bb3[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n-          StorageDead(_4);                 // bb3[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n-          goto -> bb4;                     // bb3[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          _1 = &(*_4);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+          StorageDead(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n+          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n       }\n   \n       bb4: {\n-          StorageDead(_2);                 // bb4[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n-          StorageDead(_1);                 // bb4[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n-          StorageLive(_6);                 // bb4[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n-          StorageLive(_7);                 // bb4[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-          _7 = Test2::D;                   // bb4[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-          _8 = discriminant(_7);           // bb4[5]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n-          switchInt(move _8) -> [4isize: bb6, otherwise: bb5]; // bb4[6]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+          StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+          StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+          StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+          StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+          switchInt(move _8) -> [4isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n       }\n   \n       bb5: {\n-          StorageLive(_9);                 // bb5[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-          _9 = const \"E\";                  // bb5[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+          StorageLive(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+          _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-          _6 = &(*_9);                     // bb5[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-          StorageDead(_9);                 // bb5[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n-          goto -> bb7;                     // bb5[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+          _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+          StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n+          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n       }\n   \n       bb6: {\n-          _6 = const \"D\";                  // bb6[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n+          _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-          goto -> bb7;                     // bb6[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n       }\n   \n       bb7: {\n-          StorageDead(_7);                 // bb7[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n-          StorageDead(_6);                 // bb7[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n-          _0 = const ();                   // bb7[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+          StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+          StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+          _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          return;                          // bb7[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n+          return;                          // scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n       }\n   }\n   "}, {"sha": "ccd9612caddd45f60d0f76b261a8afa1991ca279", "filename": "src/test/mir-opt/unreachable/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -18,8 +18,8 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable.rs:9:23: 9:30\n-          _1 = const empty() -> bb1;       // bb0[1]: scope 0 at $DIR/unreachable.rs:9:23: 9:30\n+          StorageLive(_1);                 // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n+          _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n                                            // ty::Const\n                                            // + ty: fn() -> std::option::Option<Empty> {empty}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -29,80 +29,80 @@\n       }\n   \n       bb1: {\n-          _2 = discriminant(_1);           // bb1[0]: scope 0 at $DIR/unreachable.rs:9:12: 9:20\n--         switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/unreachable.rs:9:12: 9:20\n-+         goto -> bb2;                     // bb1[1]: scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+          _2 = discriminant(_1);           // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+-         switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n++         goto -> bb2;                     // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n       }\n   \n       bb2: {\n-          _0 = const ();                   // bb2[0]: scope 0 at $DIR/unreachable.rs:9:5: 19:6\n+          _0 = const ();                   // scope 0 at $DIR/unreachable.rs:9:5: 19:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable.rs:9:5: 19:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable.rs:20:1: 20:2\n-          return;                          // bb2[2]: scope 0 at $DIR/unreachable.rs:20:2: 20:2\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable.rs:20:1: 20:2\n+          return;                          // scope 0 at $DIR/unreachable.rs:20:2: 20:2\n -     }\n - \n -     bb3: {\n--         StorageLive(_3);                 // bb3[0]: scope 0 at $DIR/unreachable.rs:9:17: 9:19\n--         _3 = move ((_1 as Some).0: Empty); // bb3[1]: scope 0 at $DIR/unreachable.rs:9:17: 9:19\n--         StorageLive(_4);                 // bb3[2]: scope 1 at $DIR/unreachable.rs:10:13: 10:19\n--         StorageLive(_5);                 // bb3[3]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n--         StorageLive(_6);                 // bb3[4]: scope 2 at $DIR/unreachable.rs:12:12: 12:16\n--         _6 = const true;                 // bb3[5]: scope 2 at $DIR/unreachable.rs:12:12: 12:16\n+-         StorageLive(_3);                 // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n+-         _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n+-         StorageLive(_4);                 // scope 1 at $DIR/unreachable.rs:10:13: 10:19\n+-         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n+-         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n -                                          // ty::Const\n -                                          // + ty: bool\n -                                          // + val: Value(Scalar(0x01))\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable.rs:12:12: 12:16\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[6]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n -     bb4: {\n--         _4 = const 42i32;                // bb4[0]: scope 2 at $DIR/unreachable.rs:15:13: 15:20\n+-         _4 = const 42i32;                // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n -                                          // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x0000002a))\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable.rs:15:18: 15:20\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n--         _5 = const ();                   // bb4[1]: scope 2 at $DIR/unreachable.rs:14:16: 16:10\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:14:16: 16:10\n -                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable.rs:14:16: 16:10\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb6;                     // bb4[2]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n -     bb5: {\n--         _4 = const 21i32;                // bb5[0]: scope 2 at $DIR/unreachable.rs:13:13: 13:20\n+-         _4 = const 21i32;                // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n -                                          // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000015))\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable.rs:13:18: 13:20\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n--         _5 = const ();                   // bb5[1]: scope 2 at $DIR/unreachable.rs:12:17: 14:10\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:12:17: 14:10\n -                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable.rs:12:17: 14:10\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb6;                     // bb5[2]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n -     bb6: {\n--         StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable.rs:16:9: 16:10\n--         StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable.rs:16:9: 16:10\n--         StorageLive(_7);                 // bb6[2]: scope 2 at $DIR/unreachable.rs:18:9: 18:21\n--         unreachable;                     // bb6[3]: scope 2 at $DIR/unreachable.rs:18:15: 18:17\n+-         StorageDead(_6);                 // scope 2 at $DIR/unreachable.rs:16:9: 16:10\n+-         StorageDead(_5);                 // scope 2 at $DIR/unreachable.rs:16:9: 16:10\n+-         StorageLive(_7);                 // scope 2 at $DIR/unreachable.rs:18:9: 18:21\n+-         unreachable;                     // scope 2 at $DIR/unreachable.rs:18:15: 18:17\n       }\n   }\n   "}, {"sha": "449bea06207d9a43497fccd310099aa7340fc8df", "filename": "src/test/mir-opt/unreachable_asm/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -21,8 +21,8 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n-          _1 = const empty() -> bb1;       // bb0[1]: scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n+          StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n+          _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n                                            // ty::Const\n                                            // + ty: fn() -> std::option::Option<Empty> {empty}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -32,89 +32,89 @@\n       }\n   \n       bb1: {\n-          _2 = discriminant(_1);           // bb1[0]: scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n-          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n+          _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n+          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n       }\n   \n       bb2: {\n-          _0 = const ();                   // bb2[0]: scope 0 at $DIR/unreachable_asm.rs:11:5: 23:6\n+          _0 = const ();                   // scope 0 at $DIR/unreachable_asm.rs:11:5: 23:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:11:5: 23:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n-          return;                          // bb2[2]: scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n+          return;                          // scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n       }\n   \n       bb3: {\n-          StorageLive(_3);                 // bb3[0]: scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n-          _3 = move ((_1 as Some).0: Empty); // bb3[1]: scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n-          StorageLive(_4);                 // bb3[2]: scope 1 at $DIR/unreachable_asm.rs:12:13: 12:19\n-          StorageLive(_5);                 // bb3[3]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n-          StorageLive(_6);                 // bb3[4]: scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n-          _6 = const true;                 // bb3[5]: scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n+          StorageLive(_3);                 // scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n+          _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n+          StorageLive(_4);                 // scope 1 at $DIR/unreachable_asm.rs:12:13: 12:19\n+          StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n+          _6 = const true;                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n                                            // ty::Const\n                                            // + ty: bool\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:14:12: 14:16\n                                            // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[6]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n       bb4: {\n-          _4 = const 42i32;                // bb4[0]: scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n+          _4 = const 42i32;                // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:17:18: 17:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          _5 = const ();                   // bb4[1]: scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n+          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:16:16: 18:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb6;                     // bb4[2]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n       bb5: {\n-          _4 = const 21i32;                // bb5[0]: scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n+          _4 = const 21i32;                // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000015))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:15:18: 15:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n-          _5 = const ();                   // bb5[1]: scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n+          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:14:17: 16:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          goto -> bb6;                     // bb5[2]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n       bb6: {\n-          StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n-          StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n-          StorageLive(_7);                 // bb6[2]: scope 2 at $DIR/unreachable_asm.rs:21:9: 21:37\n-          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb6[3]: scope 3 at $DIR/unreachable_asm.rs:21:18: 21:35\n-          _7 = const ();                   // bb6[4]: scope 3 at $DIR/unreachable_asm.rs:21:9: 21:37\n+          StorageDead(_6);                 // scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n+          StorageDead(_5);                 // scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n+          StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm.rs:21:9: 21:37\n+          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm.rs:21:18: 21:35\n+          _7 = const ();                   // scope 3 at $DIR/unreachable_asm.rs:21:9: 21:37\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:21:9: 21:37\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_7);                 // bb6[5]: scope 2 at $DIR/unreachable_asm.rs:21:36: 21:37\n-          StorageLive(_8);                 // bb6[6]: scope 2 at $DIR/unreachable_asm.rs:22:9: 22:21\n-          unreachable;                     // bb6[7]: scope 2 at $DIR/unreachable_asm.rs:22:15: 22:17\n+          StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm.rs:21:36: 21:37\n+          StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm.rs:22:9: 22:21\n+          unreachable;                     // scope 2 at $DIR/unreachable_asm.rs:22:15: 22:17\n       }\n   }\n   "}, {"sha": "a152e1dbe892fc18d66007afd11daf7ade3cbb7a", "filename": "src/test/mir-opt/unreachable_asm_2/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -24,8 +24,8 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n-          _1 = const empty() -> bb1;       // bb0[1]: scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n+          StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n+          _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n                                            // ty::Const\n                                            // + ty: fn() -> std::option::Option<Empty> {empty}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -35,101 +35,101 @@\n       }\n   \n       bb1: {\n-          _2 = discriminant(_1);           // bb1[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n-          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n+          _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n+          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n       }\n   \n       bb2: {\n-          _0 = const ();                   // bb2[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:5: 25:6\n+          _0 = const ();                   // scope 0 at $DIR/unreachable_asm_2.rs:11:5: 25:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:11:5: 25:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n-          return;                          // bb2[2]: scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n       }\n   \n       bb3: {\n-          StorageLive(_3);                 // bb3[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n-          _3 = move ((_1 as Some).0: Empty); // bb3[1]: scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n-          StorageLive(_4);                 // bb3[2]: scope 1 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n-          StorageLive(_5);                 // bb3[3]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-          StorageLive(_6);                 // bb3[4]: scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-          _6 = const true;                 // bb3[5]: scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n+          StorageLive(_3);                 // scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n+          _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n+          StorageLive(_4);                 // scope 1 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n+          StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+          StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n+          _6 = const true;                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n                                            // ty::Const\n                                            // + ty: bool\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:14:12: 14:16\n                                            // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+          switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n   \n       bb4: {\n-          StorageLive(_8);                 // bb4[0]: scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n-          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb4[1]: scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n-          _8 = const ();                   // bb4[2]: scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+          StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n+          _8 = const ();                   // scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:20:13: 20:41\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_8);                 // bb4[3]: scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n-          _4 = const 42i32;                // bb4[4]: scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n+          StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n+          _4 = const 42i32;                // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:21:18: 21:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          _5 = const ();                   // bb4[5]: scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n+          _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:18:16: 22:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb6;                     // bb4[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-+         unreachable;                     // bb4[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+-         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n++         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n   \n       bb5: {\n-          StorageLive(_7);                 // bb5[0]: scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n-          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb5[1]: scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:39\n-          _7 = const ();                   // bb5[2]: scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n+          StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n+          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:39\n+          _7 = const ();                   // scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:16:13: 16:41\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_7);                 // bb5[3]: scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n-          _4 = const 21i32;                // bb5[4]: scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n+          StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n+          _4 = const 21i32;                // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000015))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:17:18: 17:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n-          _5 = const ();                   // bb5[5]: scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n+          _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:14:17: 18:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb6;                     // bb5[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+-         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n -     }\n - \n -     bb6: {\n--         StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n--         StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n--         StorageLive(_9);                 // bb6[2]: scope 2 at $DIR/unreachable_asm_2.rs:24:9: 24:21\n--         unreachable;                     // bb6[3]: scope 2 at $DIR/unreachable_asm_2.rs:24:15: 24:17\n-+         unreachable;                     // bb5[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+-         StorageDead(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n+-         StorageDead(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n+-         StorageLive(_9);                 // scope 2 at $DIR/unreachable_asm_2.rs:24:9: 24:21\n+-         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:24:15: 24:17\n++         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n   }\n   "}, {"sha": "ff23baf0b4e9ff70cd5057b772aa2f5b26a434de", "filename": "src/test/mir-opt/unreachable_diverging/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -18,16 +18,16 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable_diverging.rs:13:9: 13:10\n-          _1 = const true;                 // bb0[1]: scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n+          StorageLive(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:13:9: 13:10\n+          _1 = const true;                 // scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n                                            // ty::Const\n                                            // + ty: bool\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:13:13: 13:17\n                                            // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n-          _2 = const empty() -> bb1;       // bb0[3]: scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+          StorageLive(_2);                 // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+          _2 = const empty() -> bb1;       // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n                                            // ty::Const\n                                            // + ty: fn() -> std::option::Option<Empty> {empty}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -37,47 +37,47 @@\n       }\n   \n       bb1: {\n-          _3 = discriminant(_2);           // bb1[0]: scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n-          switchInt(move _3) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+          _3 = discriminant(_2);           // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+          switchInt(move _3) -> [1isize: bb3, otherwise: bb2]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n       }\n   \n       bb2: {\n-          _0 = const ();                   // bb2[0]: scope 1 at $DIR/unreachable_diverging.rs:14:5: 19:6\n+          _0 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:14:5: 19:6\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:14:5: 19:6\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n-          StorageDead(_2);                 // bb2[2]: scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n-          return;                          // bb2[3]: scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n+          StorageDead(_2);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n+          return;                          // scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n       }\n   \n       bb3: {\n-          StorageLive(_4);                 // bb3[0]: scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n-          _4 = move ((_2 as Some).0: Empty); // bb3[1]: scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n-          StorageLive(_5);                 // bb3[2]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-          StorageLive(_6);                 // bb3[3]: scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n-          _6 = _1;                         // bb3[4]: scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n--         switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[5]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-+         goto -> bb4;                     // bb3[5]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+          StorageLive(_4);                 // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          _4 = move ((_2 as Some).0: Empty); // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          StorageLive(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+          StorageLive(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+          _6 = _1;                         // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+-         switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n++         goto -> bb4;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n       }\n   \n       bb4: {\n--         _5 = const ();                   // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-+         _5 = const loop_forever() -> bb5; // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n++         _5 = const loop_forever() -> bb5; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n                                            // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable_diverging.rs:15:9: 17:10\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb6;                     // bb4[1]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         goto -> bb6;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n -     }\n - \n -     bb5: {\n--         _5 = const loop_forever() -> bb6; // bb5[0]: scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+-         _5 = const loop_forever() -> bb6; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n -                                          // ty::Const\n                                            // + ty: fn() {loop_forever}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -87,15 +87,11 @@\n       }\n   \n -     bb6: {\n--         StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n--         StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n--         StorageLive(_7);                 // bb6[2]: scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22\n--         unreachable;                     // bb6[3]: scope 2 at $DIR/unreachable_diverging.rs:18:15: 18:19\n +     bb5: {\n-+         StorageDead(_6);                 // bb5[0]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n-+         StorageDead(_5);                 // bb5[1]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n-+         StorageLive(_7);                 // bb5[2]: scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22\n-+         unreachable;                     // bb5[3]: scope 2 at $DIR/unreachable_diverging.rs:18:15: 18:19\n+          StorageDead(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+          StorageDead(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+          StorageLive(_7);                 // scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22\n+          unreachable;                     // scope 2 at $DIR/unreachable_diverging.rs:18:15: 18:19\n       }\n   }\n   "}, {"sha": "c800ccb1ae51f698db8d7a5fcd773be2dfca4672", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,17 +4,17 @@ E::V::{{constant}}#0: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n \n     bb0: {\n-        _0 = const 5isize;               // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        _0 = const 5isize;               // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // ty::Const\n                                          // + ty: isize\n                                          // + val: Value(Scalar(0x00000005))\n                                          // mir::Constant\n                                          // + span: $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000005)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n }"}, {"sha": "832f18e14c25d288b14c6690804824d44a97b84a", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.Test-X-{{constructor}}.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,8 +4,8 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n \n     bb0: {\n-        ((_0 as X).0: usize) = move _1;  // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n-        discriminant(_0) = 0;            // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n-        return;                          // bb0[2]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n     }\n }"}, {"sha": "28f14399a630995e51e5338bf3e09b9897d216c2", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,36 +6,36 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb7;                     // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n-        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        return;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        resume;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb3: {\n-        goto -> bb1;                     // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb1;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb2;                     // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb2;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb5 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb7: {\n-        _2 = &mut (*_1);                 // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "f4a5cc0b3279a5136106ae8df95aa0dd0939fc0d", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,17 +4,17 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n \n     bb0: {\n-        _0 = const 2i32;                 // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n+        _0 = const 2i32;                 // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n }"}, {"sha": "e635cd2b01bbd79fb97d6e08f40e69e95fafa81d", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,17 +4,17 @@ E::V::{{constant}}#0: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n \n     bb0: {\n-        _0 = const 5isize;               // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        _0 = const 5isize;               // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // ty::Const\n                                          // + ty: isize\n                                          // + val: Value(Scalar(0x0000000000000005))\n                                          // mir::Constant\n                                          // + span: $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000005)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n }"}, {"sha": "832f18e14c25d288b14c6690804824d44a97b84a", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.Test-X-{{constructor}}.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,8 +4,8 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n \n     bb0: {\n-        ((_0 as X).0: usize) = move _1;  // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n-        discriminant(_0) = 0;            // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n-        return;                          // bb0[2]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n     }\n }"}, {"sha": "28f14399a630995e51e5338bf3e09b9897d216c2", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -6,36 +6,36 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb7;                     // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n-        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        return;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        resume;                          // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb3: {\n-        goto -> bb1;                     // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb1;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb2;                     // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb2;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb5 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb7: {\n-        _2 = &mut (*_1);                 // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "f4a5cc0b3279a5136106ae8df95aa0dd0939fc0d", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -4,17 +4,17 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n \n     bb0: {\n-        _0 = const 2i32;                 // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n+        _0 = const 2i32;                 // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n }"}, {"sha": "3ddf82c2fb2c9d6384c6a7317d3130d09a4ba6d7", "filename": "src/test/mir-opt/while-storage/rustc.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdc9468600797762cf7cb7ad4fe32e05c3373e/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir?ref=a2fdc9468600797762cf7cb7ad4fe32e05c3373e", "patch": "@@ -9,10 +9,10 @@ fn while_loop(_1: bool) -> () {\n     let mut _5: bool;                    // in scope 0 at $DIR/while-storage.rs:11:21: 11:22\n \n     bb0: {\n-        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/while-storage.rs:10:11: 10:22\n-        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/while-storage.rs:10:20: 10:21\n-        _3 = _1;                         // bb0[2]: scope 0 at $DIR/while-storage.rs:10:20: 10:21\n-        _2 = const get_bool(move _3) -> bb1; // bb0[3]: scope 0 at $DIR/while-storage.rs:10:11: 10:22\n+        StorageLive(_2);                 // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n+        StorageLive(_3);                 // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n+        _3 = _1;                         // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n+        _2 = const get_bool(move _3) -> bb1; // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n                                          // ty::Const\n                                          // + ty: fn(bool) -> bool {get_bool}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -22,26 +22,26 @@ fn while_loop(_1: bool) -> () {\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n-        switchInt(_2) -> [false: bb2, otherwise: bb3]; // bb1[1]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        StorageDead(_3);                 // scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb2: {\n-        _0 = const ();                   // bb2[0]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        _0 = const ();                   // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:10:5: 14:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb2[1]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb3: {\n-        StorageLive(_4);                 // bb3[0]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n-        StorageLive(_5);                 // bb3[1]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n-        _5 = _1;                         // bb3[2]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n-        _4 = const get_bool(move _5) -> bb4; // bb3[3]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        StorageLive(_4);                 // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        StorageLive(_5);                 // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+        _5 = _1;                         // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+        _4 = const get_bool(move _5) -> bb4; // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n                                          // ty::Const\n                                          // + ty: fn(bool) -> bool {get_bool}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -51,30 +51,30 @@ fn while_loop(_1: bool) -> () {\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // bb4[0]: scope 0 at $DIR/while-storage.rs:11:22: 11:23\n-        switchInt(_4) -> [false: bb5, otherwise: bb6]; // bb4[1]: scope 0 at $DIR/while-storage.rs:11:9: 13:10\n+        StorageDead(_5);                 // scope 0 at $DIR/while-storage.rs:11:22: 11:23\n+        switchInt(_4) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/while-storage.rs:11:9: 13:10\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // bb5[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb0;                     // bb5[2]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        goto -> bb0;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb6: {\n-        _0 = const ();                   // bb6[0]: scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+        _0 = const ();                   // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:12:13: 12:18\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb6[1]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb7;                     // bb6[2]: scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n     }\n \n     bb7: {\n-        StorageDead(_2);                 // bb7[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        return;                          // bb7[1]: scope 0 at $DIR/while-storage.rs:15:2: 15:2\n+        StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        return;                          // scope 0 at $DIR/while-storage.rs:15:2: 15:2\n     }\n }"}]}