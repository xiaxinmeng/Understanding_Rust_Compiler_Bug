{"sha": "cd4b468e07ab27eef87aa8757220d6439defc699", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNGI0NjhlMDdhYjI3ZWVmODdhYTg3NTcyMjBkNjQzOWRlZmM2OTk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-09-18T23:07:39Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-09-18T23:19:55Z"}, "message": "Make note better when all arms in a `match` diverge", "tree": {"sha": "786bc5159088fda38076a922661f5c83c1ed4060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/786bc5159088fda38076a922661f5c83c1ed4060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4b468e07ab27eef87aa8757220d6439defc699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl2Cu5wACgkQtAh+UQ6Y\nsWTSVA/+OCmdW4ahClYCw2tdkXk41ySMYodBY72JNLDfrcr2qXWHtcDvn9ZjCs58\nDjOC4ZYkMlxf8T4VgF0oMaVYcRLt7iVcX7MQS/cqs5156k1kXhF9YDyR0sjcW3yA\nv5vpB9QEBmXlza8YBXZnJrZfrsy63gNGSC2paoRQEI82HkJIj/s+KFdWjmQWhIw8\nIduua1zqlM8Z/v9dCsCAOcI1yTJmmwgouUoMxZfQWfEg1oId5bbKulsR7rr68DmZ\nrvTnQ+/XHVz14lRubvCZEg0DvYHj+lu3qPftv6tNw9B/g3HR9223J6UqbatjqsYo\niK9mXNWDh4rdFEcM4pEcdyOkEmmidnCcV4doyYOQzQj6YAJV72vBLaKs5dghTVdl\nTOzTuzlt4YkwQzi7p/LzldrbHXTPg/Yo/LxaPVn/GjJsVDyiLnEYEsRCX6+vEWt9\n+PzH8p0IZ9zJOZUIGI8H2lrefzReQZCXmLqt7VM3Fow8h4kPwEjFY0qfhHRtK5Sg\nDvo4CAAcsY+RVuxN73DUMzVN+ODoixPNY1JnuyWGwMojtYp29dKmALJ+RPeno6L2\nT6Oc+1zOkjYOIX47L7lAqDbSuP4VEZybgneF5oJQRx9y/ChqNf1an6fYVMTsAul9\nj0wX67S8AappFEJuFYNZ3Rf+AzUDojFOwHvQJ8czUJN2ydHopsM=\n=44Bn\n-----END PGP SIGNATURE-----", "payload": "tree 786bc5159088fda38076a922661f5c83c1ed4060\nparent 822393d690eb7c238c18c1bb0b1e7831c4776cd3\nauthor Aaron Hill <aa1ronham@gmail.com> 1568848059 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1568848795 -0400\n\nMake note better when all arms in a `match` diverge\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4b468e07ab27eef87aa8757220d6439defc699", "html_url": "https://github.com/rust-lang/rust/commit/cd4b468e07ab27eef87aa8757220d6439defc699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4b468e07ab27eef87aa8757220d6439defc699/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822393d690eb7c238c18c1bb0b1e7831c4776cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/822393d690eb7c238c18c1bb0b1e7831c4776cd3", "html_url": "https://github.com/rust-lang/rust/commit/822393d690eb7c238c18c1bb0b1e7831c4776cd3"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "86774466ba586a249d58eb69d3a8914acf56da85", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=cd4b468e07ab27eef87aa8757220d6439defc699", "patch": "@@ -43,7 +43,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If there are no arms, that is a diverging match; a special case.\n         if arms.is_empty() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always(expr.span));\n+            self.diverges.set(self.diverges.get() | Diverges::Always {\n+                span: expr.span,\n+                custom_note: None\n+            });\n             return tcx.types.never;\n         }\n \n@@ -69,7 +72,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // warnings).\n             match all_pats_diverge {\n                 Diverges::Maybe => Diverges::Maybe,\n-                Diverges::Always(..) | Diverges::WarnedAlways => Diverges::WarnedAlways,\n+                Diverges::Always { .. } | Diverges::WarnedAlways => Diverges::WarnedAlways,\n             }\n         }).collect();\n \n@@ -167,6 +170,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             prior_arm_ty = Some(arm_ty);\n         }\n \n+        // If all of the arms in the 'match' diverge,\n+        // and we're dealing with an actual 'match' block\n+        // (as opposed to a 'match' desugared from something else'),\n+        // we can emit a better note. Rather than pointing\n+        // at a diverging expression in an arbitrary arm,\n+        // we can point at the entire 'match' expression\n+        match (all_arms_diverge, match_src) {\n+            (Diverges::Always { .. }, hir::MatchSource::Normal) => {\n+                all_arms_diverge = Diverges::Always {\n+                    span: expr.span,\n+                    custom_note: Some(\n+                        \"any code following this `match` expression is unreachable, \\\n+                        as all arms diverge\"\n+                    )\n+                };\n+            },\n+            _ => {}\n+        }\n+\n         // We won't diverge unless the discriminant or all arms diverge.\n         self.diverges.set(discrim_diverges | all_arms_diverge);\n "}, {"sha": "5733b8d1db13e8dc027c13acbf11a9da37d1dbb4", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=cd4b468e07ab27eef87aa8757220d6439defc699", "patch": "@@ -170,7 +170,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Any expression that produces a value of type `!` must have diverged\n         if ty.is_never() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always(expr.span));\n+            self.diverges.set(self.diverges.get() | Diverges::Always {\n+                span: expr.span,\n+                custom_note: None\n+            });\n         }\n \n         // Record the type, which applies it effects."}, {"sha": "c44648bb9df8591acd41bc3170b9ed5651219a2e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cd4b468e07ab27eef87aa8757220d6439defc699", "patch": "@@ -450,10 +450,20 @@ pub enum Diverges {\n \n     /// Definitely known to diverge and therefore\n     /// not reach the next sibling or its parent.\n-    /// The `Span` points to the expression\n-    /// that caused us to diverge\n-    /// (e.g. `return`, `break`, etc)\n-    Always(Span),\n+    Always {\n+        /// The `Span` points to the expression\n+        /// that caused us to diverge\n+        /// (e.g. `return`, `break`, etc)\n+        span: Span,\n+        /// In some cases (e.g. a 'match' expression\n+        /// where all arms diverge), we may be\n+        /// able to provide a more informative\n+        /// message to the user.\n+        /// If this is None, a default messsage\n+        /// will be generated, which is suitable\n+        /// for most cases\n+        custom_note: Option<&'static str>\n+    },\n \n     /// Same as `Always` but with a reachability\n     /// warning already emitted.\n@@ -490,7 +500,13 @@ impl ops::BitOrAssign for Diverges {\n \n impl Diverges {\n     fn always(self) -> bool {\n-        self >= Diverges::Always(DUMMY_SP)\n+        // Enum comparison ignores the\n+        // contents of fields, so we just\n+        // fill them in with garbage here\n+        self >= Diverges::Always {\n+            span: DUMMY_SP,\n+            custom_note: None\n+        }\n     }\n }\n \n@@ -2312,7 +2328,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn warn_if_unreachable(&self, id: hir::HirId, span: Span, kind: &str) {\n         // FIXME: Combine these two 'if' expressions into one once\n         // let chains are implemented\n-        if let Diverges::Always(orig_span) = self.diverges.get() {\n+        if let Diverges::Always { span: orig_span, custom_note } = self.diverges.get() {\n             // If span arose from a desugaring of `if` or `while`, then it is the condition itself,\n             // which diverges, that we are about to lint on. This gives suboptimal diagnostics.\n             // Instead, stop here so that the `if`- or `while`-expression's block is linted instead.\n@@ -2324,7 +2340,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let msg = format!(\"unreachable {}\", kind);\n                 let mut err = self.tcx().struct_span_lint_hir(lint::builtin::UNREACHABLE_CODE,\n                                                               id, span, &msg);\n-                err.span_note(orig_span, \"any code following this expression is unreachable\");\n+                err.span_note(\n+                    orig_span,\n+                    custom_note.unwrap_or(\"any code following this expression is unreachable\")\n+                );\n                 err.emit();\n             }\n         }"}, {"sha": "f587e524d350dfbdcf8bc817251fb34ce8f31806", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd4b468e07ab27eef87aa8757220d6439defc699/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=cd4b468e07ab27eef87aa8757220d6439defc699", "patch": "@@ -9,11 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_match.rs:7:22\n+note: any code following this `match` expression is unreachable, as all arms diverge\n+  --> $DIR/expr_match.rs:7:5\n    |\n LL |     match () { () => return }\n-   |                      ^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n@@ -22,11 +22,11 @@ error: unreachable statement\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_match.rs:18:31\n+note: any code following this `match` expression is unreachable, as all arms diverge\n+  --> $DIR/expr_match.rs:18:5\n    |\n LL |     match () { () if false => return, () => return }\n-   |                               ^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}]}