{"sha": "1acf4043616c9b330f079b83ebbaf6eff8c636fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhY2Y0MDQzNjE2YzliMzMwZjA3OWI4M2ViYmFmNmVmZjhjNjM2ZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T21:59:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T22:01:07Z"}, "message": "rustc: First steps to determine whether tydescs escape", "tree": {"sha": "58cfc6c1bd77a0899f9809f402f329ce133f8cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58cfc6c1bd77a0899f9809f402f329ce133f8cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1acf4043616c9b330f079b83ebbaf6eff8c636fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1acf4043616c9b330f079b83ebbaf6eff8c636fa", "html_url": "https://github.com/rust-lang/rust/commit/1acf4043616c9b330f079b83ebbaf6eff8c636fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1acf4043616c9b330f079b83ebbaf6eff8c636fa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b95b5c033435e0b8902c3f3afb14c80e04fee83", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b95b5c033435e0b8902c3f3afb14c80e04fee83", "html_url": "https://github.com/rust-lang/rust/commit/7b95b5c033435e0b8902c3f3afb14c80e04fee83"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "beb86e17416aab3e6fa0227a4a57830bfa0a4880", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1acf4043616c9b330f079b83ebbaf6eff8c636fa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acf4043616c9b330f079b83ebbaf6eff8c636fa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1acf4043616c9b330f079b83ebbaf6eff8c636fa", "patch": "@@ -1253,7 +1253,7 @@ fn dynamic_size_of(@block_ctxt cx, ty.t t) -> result {\n \n     alt (ty.struct(cx.fcx.lcx.ccx.tcx, t)) {\n         case (ty.ty_param(?p)) {\n-            auto szptr = field_of_tydesc(cx, t, abi.tydesc_field_size);\n+            auto szptr = field_of_tydesc(cx, t, false, abi.tydesc_field_size);\n             ret res(szptr.bcx, szptr.bcx.build.Load(szptr.val));\n         }\n         case (ty.ty_tup(?elts)) {\n@@ -1307,7 +1307,7 @@ fn dynamic_size_of(@block_ctxt cx, ty.t t) -> result {\n fn dynamic_align_of(@block_ctxt cx, ty.t t) -> result {\n     alt (ty.struct(cx.fcx.lcx.ccx.tcx, t)) {\n         case (ty.ty_param(?p)) {\n-            auto aptr = field_of_tydesc(cx, t, abi.tydesc_field_align);\n+            auto aptr = field_of_tydesc(cx, t, false, abi.tydesc_field_align);\n             ret res(aptr.bcx, aptr.bcx.build.Load(aptr.val));\n         }\n         case (ty.ty_tup(?elts)) {\n@@ -1525,8 +1525,9 @@ fn trans_malloc_boxed(@block_ctxt cx, ty.t t) -> result {\n // Given a type and a field index into its corresponding type descriptor,\n // returns an LLVM ValueRef of that field from the tydesc, generating the\n // tydesc if necessary.\n-fn field_of_tydesc(@block_ctxt cx, ty.t t, int field) -> result {\n-    auto tydesc = get_tydesc(cx, t);\n+fn field_of_tydesc(@block_ctxt cx, ty.t t, bool escapes, int field)\n+        -> result {\n+    auto tydesc = get_tydesc(cx, t, escapes);\n     ret res(tydesc.bcx,\n             tydesc.bcx.build.GEP(tydesc.val, vec(C_int(0), C_int(field))));\n }\n@@ -1572,7 +1573,7 @@ fn linearize_ty_params(@block_ctxt cx, ty.t t) ->\n     ret tup(x.defs, x.vals);\n }\n \n-fn get_tydesc(&@block_ctxt cx, ty.t t) -> result {\n+fn get_tydesc(&@block_ctxt cx, ty.t t, bool escapes) -> result {\n     // Is the supplied type a type param? If so, return the passed-in tydesc.\n     alt (ty.type_param(cx.fcx.lcx.ccx.tcx, t)) {\n         case (some[uint](?id)) { ret res(cx, cx.fcx.lltydescs.(id)); }\n@@ -2703,8 +2704,8 @@ fn call_tydesc_glue_full(@block_ctxt cx, ValueRef v,\n }\n \n fn call_tydesc_glue(@block_ctxt cx, ValueRef v,\n-                    ty.t t, int field) -> result {\n-    auto td = get_tydesc(cx, t);\n+                    ty.t t, bool escapes, int field) -> result {\n+    auto td = get_tydesc(cx, t, escapes);\n     call_tydesc_glue_full(td.bcx,\n                           spill_if_immediate(td.bcx, v, t),\n                           td.val, field);\n@@ -2732,7 +2733,10 @@ fn maybe_call_dtor(@block_ctxt cx, ValueRef v) -> @block_ctxt {\n     ret after_cx;\n }\n \n-fn call_cmp_glue(@block_ctxt cx, ValueRef lhs, ValueRef rhs, ty.t t,\n+fn call_cmp_glue(@block_ctxt cx,\n+                 ValueRef lhs,\n+                 ValueRef rhs,\n+                 ty.t t,\n                  ValueRef llop) -> result {\n     // We can't use call_tydesc_glue_full() and friends here because compare\n     // glue has a special signature.\n@@ -2743,7 +2747,7 @@ fn call_cmp_glue(@block_ctxt cx, ValueRef lhs, ValueRef rhs, ty.t t,\n     auto llrawlhsptr = cx.build.BitCast(lllhs, T_ptr(T_i8()));\n     auto llrawrhsptr = cx.build.BitCast(llrhs, T_ptr(T_i8()));\n \n-    auto r = get_tydesc(cx, t);\n+    auto r = get_tydesc(cx, t, false);\n     auto lltydescs =\n         r.bcx.build.GEP(r.val, vec(C_int(0),\n                                    C_int(abi.tydesc_field_first_param)));\n@@ -2770,7 +2774,7 @@ fn call_cmp_glue(@block_ctxt cx, ValueRef lhs, ValueRef rhs, ty.t t,\n \n fn take_ty(@block_ctxt cx, ValueRef v, ty.t t) -> result {\n     if (!ty.type_is_scalar(cx.fcx.lcx.ccx.tcx, t)) {\n-        ret call_tydesc_glue(cx, v, t, abi.tydesc_field_take_glue);\n+        ret call_tydesc_glue(cx, v, t, false, abi.tydesc_field_take_glue);\n     }\n     ret res(cx, C_nil());\n }\n@@ -2792,7 +2796,7 @@ fn drop_ty(@block_ctxt cx,\n            ty.t t) -> result {\n \n     if (!ty.type_is_scalar(cx.fcx.lcx.ccx.tcx, t)) {\n-        ret call_tydesc_glue(cx, v, t, abi.tydesc_field_drop_glue);\n+        ret call_tydesc_glue(cx, v, t, false, abi.tydesc_field_drop_glue);\n     }\n     ret res(cx, C_nil());\n }\n@@ -2822,7 +2826,7 @@ fn memcpy_ty(@block_ctxt cx,\n              ValueRef src,\n              ty.t t) -> result {\n     if (ty.type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, t)) {\n-        auto llszptr = field_of_tydesc(cx, t, abi.tydesc_field_size);\n+        auto llszptr = field_of_tydesc(cx, t, false, abi.tydesc_field_size);\n         auto llsz = llszptr.bcx.build.Load(llszptr.val);\n         ret call_memcpy(llszptr.bcx, dst, src, llsz);\n \n@@ -3084,10 +3088,10 @@ fn trans_vec_append(@block_ctxt cx, ty.t t,\n \n     auto bcx = cx;\n \n-    auto llvec_tydesc = get_tydesc(bcx, t);\n+    auto llvec_tydesc = get_tydesc(bcx, t, false);\n     bcx = llvec_tydesc.bcx;\n \n-    auto llelt_tydesc = get_tydesc(bcx, elt_ty);\n+    auto llelt_tydesc = get_tydesc(bcx, elt_ty, false);\n     bcx = llelt_tydesc.bcx;\n \n     auto dst = bcx.build.PointerCast(lhs, T_ptr(T_opaque_vec_ptr()));\n@@ -3976,7 +3980,8 @@ fn lval_generic_fn(@block_ctxt cx,\n         auto bcx = lv.res.bcx;\n         let vec[ValueRef] tydescs = vec();\n         for (ty.t t in tys) {\n-            auto td = get_tydesc(bcx, t);\n+            // TODO: Doesn't always escape.\n+            auto td = get_tydesc(bcx, t, true);\n             bcx = td.bcx;\n             _vec.push[ValueRef](tydescs, td.val);\n         }\n@@ -4542,7 +4547,7 @@ fn trans_bind(@block_ctxt cx, @ast.expr f,\n                 bcx.build.GEP(closure,\n                               vec(C_int(0),\n                                   C_int(abi.closure_elt_tydesc)));\n-            auto bindings_tydesc = get_tydesc(bcx, bindings_ty);\n+            auto bindings_tydesc = get_tydesc(bcx, bindings_ty, true);\n             bcx = bindings_tydesc.bcx;\n             bcx.build.Store(bindings_tydesc.val, bound_tydesc);\n \n@@ -6329,7 +6334,15 @@ fn trans_obj(@local_ctxt cx, &ast._obj ob, ast.def_id oid,\n                          vec(0, abi.obj_body_elt_tydesc));\n         bcx = body_tydesc.bcx;\n \n-        auto body_td = get_tydesc(bcx, body_ty);\n+        auto body_td = get_tydesc(bcx, body_ty, true);\n+        auto dtor = C_null(T_ptr(T_glue_fn(ccx.tn)));\n+        alt (ob.dtor) {\n+            case (some[@ast.method](?d)) {\n+                dtor = trans_dtor(cx, llself_ty, self_ty, ty_params, d);\n+            }\n+            case (none[@ast.method]) {}\n+        }\n+\n         bcx = body_td.bcx;\n         bcx.build.Store(body_td.val, body_tydesc.val);\n "}]}