{"sha": "89efb7d9810643eb1b25c04e63203b591915448f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZWZiN2Q5ODEwNjQzZWIxYjI1YzA0ZTYzMjAzYjU5MTkxNTQ0OGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-06T21:58:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-06T21:58:54Z"}, "message": "libstd: Update docs", "tree": {"sha": "7762465e4fe6b96b99e47636eef7077b55ee89fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7762465e4fe6b96b99e47636eef7077b55ee89fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89efb7d9810643eb1b25c04e63203b591915448f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89efb7d9810643eb1b25c04e63203b591915448f", "html_url": "https://github.com/rust-lang/rust/commit/89efb7d9810643eb1b25c04e63203b591915448f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89efb7d9810643eb1b25c04e63203b591915448f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf3de4733d834c5e515aa222ae0e6bdc9cb6ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf3de4733d834c5e515aa222ae0e6bdc9cb6ea8", "html_url": "https://github.com/rust-lang/rust/commit/baf3de4733d834c5e515aa222ae0e6bdc9cb6ea8"}], "stats": {"total": 191, "additions": 178, "deletions": 13}, "files": [{"sha": "565e4c27109f0056dc22ab6fbecc737d079991b6", "filename": "doc/Languages.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/doc%2FLanguages.txt", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/doc%2FLanguages.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2FLanguages.txt?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -120,6 +120,7 @@ Language: Rust\n    Block Comment: /* */\n    Package Separator: ::\n    Function Prototype Enders: ; {\n+   Predicate Prototype Enders: ; {\n    Type Prototype Enders: ; }\n    Class Prototype Enders: {\n    Variant Prototype Enders: ;"}, {"sha": "7c2f1be70840847f2684f5e1dc9c88c126391ae8", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -57,13 +57,36 @@ resource dtor_res(dtor: option::t<fn@()>) {\n  Section: Introduction forms\n  */\n \n+/*\n+Function: create\n+\n+Create a c_vec::t from a native buffer with a given size.\n+\n+Parameters:\n+\n+base - A native pointer to a buffer\n+size - The number of elements in the buffer\n+*/\n unsafe fn create<T>(base: *mutable T, size: uint) -> t<T> {\n     ret t({base: base,\n            size: size,\n            rsrc: @dtor_res(option::none)\n           });\n }\n \n+/*\n+Function: create_with_dtor\n+\n+Create a c_vec::t from a native buffer, with a given size,\n+and a function to run upon destruction.\n+\n+Parameters:\n+\n+base - A native pointer to a buffer\n+size - The number of elements in the buffer\n+dtor - A function to run when the value is destructed, useful\n+       for freeing the buffer, etc.\n+*/\n unsafe fn create_with_dtor<T>(base: *mutable T, size: uint, dtor: fn@())\n   -> t<T> {\n     ret t({base: base,\n@@ -76,11 +99,29 @@ unsafe fn create_with_dtor<T>(base: *mutable T, size: uint, dtor: fn@())\n  Section: Operations\n  */\n \n+/*\n+Function: get\n+\n+Retrieves an element at a given index\n+\n+Failure:\n+\n+If `ofs` is greater or equal to the length of the vector\n+*/\n fn get<copy T>(t: t<T>, ofs: uint) -> T {\n     assert ofs < (*t).size;\n     ret unsafe { *ptr::mut_offset((*t).base, ofs) };\n }\n \n+/*\n+Function: set\n+\n+Sets the value of an element at a given index\n+\n+Failure:\n+\n+If `ofs` is greater or equal to the length of the vector\n+*/\n fn set<copy T>(t: t<T>, ofs: uint, v: T) {\n     assert ofs < (*t).size;\n     unsafe { *ptr::mut_offset((*t).base, ofs) = v };\n@@ -90,10 +131,21 @@ fn set<copy T>(t: t<T>, ofs: uint, v: T) {\n  Section: Elimination forms\n  */\n \n+// FIXME: Rename to len\n+/*\n+Function: size\n+\n+Returns the length of the vector\n+*/\n fn size<T>(t: t<T>) -> uint {\n     ret (*t).size;\n }\n \n+/*\n+Function: ptr\n+\n+Returns a pointer to the first element of the vector\n+*/\n unsafe fn ptr<T>(t: t<T>) -> *mutable T {\n     ret (*t).base;\n }"}, {"sha": "509eb3ef05762a61d6609216672713d9dc7656d2", "filename": "src/libstd/ctypes.rs", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fctypes.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -4,39 +4,143 @@ Module: ctypes\n Definitions useful for C interop\n */\n \n+/*\n+FIXME: Add a test that uses some native code to verify these sizes,\n+which are not obviously correct for all potential platforms.\n+*/\n+\n+/*\n+Type: c_int\n+\n+A signed integer with the same size as a C `int`\n+*/\n type c_int = i32;\n+\n+/*\n+Type: c_uint\n+\n+An unsigned integer with the same size as a C `unsigned int`\n+*/\n type c_uint = u32;\n \n-type void = int; // Not really the same as C\n+/*\n+Type: long\n+\n+A signed integer with the same size as a C `long`\n+*/\n type long = int;\n+\n+/*\n+Type: unsigned\n+\n+An unsigned integer with the same size as a C `unsigned int`\n+*/\n type unsigned = u32;\n+\n+/*\n+Type: ulong\n+\n+An unsigned integer with the same size as a C `unsigned long`\n+*/\n type ulong = uint;\n \n-type intptr_t = uint;\n+/*\n+Type: intptr_t\n+\n+A signed integer with the same size as a pointer. This is\n+guaranteed to always be the same type as a Rust `int`\n+*/\n+type intptr_t = uint; // FIXME: int\n+\n+/*\n+Type: uintptr_t\n+\n+An unsigned integer with the same size as a pointer. This is\n+guaranteed to always be the same type as a Rust `uint`.\n+*/\n type uintptr_t = uint;\n type uint32_t = u32;\n \n+/*\n+Type: void\n+\n+A type, a pointer to which can be used as C `void *`\n+\n+Note that this does not directly correspond to the C `void` type,\n+which is an incomplete type. Using pointers to this type\n+when interoperating with C void pointers can help in documentation.\n+*/\n+type void = int;\n+\n // machine type equivalents of rust int, uint, float\n \n+/*\n+Type: m_int\n+\n+FIXME: What C type does this represent?\n+*/\n #[cfg(target_arch=\"x86\")]\n type m_int = i32;\n #[cfg(target_arch=\"x86_64\")]\n type m_int = i64;\n \n+/*\n+Type: m_uint\n+\n+FIXME: What C type does this represent?\n+*/\n #[cfg(target_arch=\"x86\")]\n type m_uint = u32;\n #[cfg(target_arch=\"x86_64\")]\n type m_uint = u64;\n \n // This *must* match with \"import m_float = fXX\" in std::math per arch\n+/*\n+Type: m_float\n+\n+FIXME: What C type does this represent?\n+*/\n type m_float = f64;\n \n+/*\n+Type: size_t\n+\n+An unsigned integer corresponding to the C `size_t`\n+*/\n type size_t = uint;\n+\n+/*\n+Type: ssize_t\n+\n+A signed integer correpsonding to the C `ssize_t`\n+*/\n type ssize_t = int;\n+\n+/*\n+Type: off_t\n+\n+An unsigned integer corresponding to the C `off_t`\n+*/\n type off_t = uint;\n \n+/*\n+Type: fd_t\n+\n+A type that can be used for C file descriptors\n+*/\n type fd_t = i32;      // not actually a C type, but should be.\n+\n+/*\n+Type: pid_t\n+\n+A type for representing process ID's, corresponding to C `pid_t`\n+*/\n type pid_t = i32;\n \n // enum is implementation-defined, but is 32-bits in practice\n+/*\n+Type: enum\n+\n+An unsigned integer with the same size as a C enum\n+*/\n type enum = u32;"}, {"sha": "015dceb1dc1c0caf3c30229c40228447ddf60837", "filename": "src/libstd/float.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffloat.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -253,25 +253,18 @@ fn pow_uint_to_uint_as_float(x: uint, pow: uint) -> float {\n }\n \n \n-/**\n- * Section: Constants\n- */\n-\n-//TODO: Once this is possible, replace the body of these functions\n-//by an actual constant.\n-\n /* Const: NaN */\n const NaN: float = 0./0.;\n \n-/* Predicate: isNaN */\n-pure fn isNaN(f: float) -> bool { f != f }\n-\n /* Const: infinity */\n const infinity: float = 1./0.;\n \n /* Const: neg_infinity */\n const neg_infinity: float = -1./0.;\n \n+/* Predicate: isNaN */\n+pure fn isNaN(f: float) -> bool { f != f }\n+\n /* Function: add */\n pure fn add(x: float, y: float) -> float { ret x + y; }\n "}, {"sha": "06e1be2fc4b4ab674803160e8f217ad40949e427", "filename": "src/libstd/io.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -1,3 +1,9 @@\n+/*\n+Module: io\n+\n+Basic input/output\n+*/\n+\n import ctypes::fd_t;\n import ctypes::c_int;\n "}, {"sha": "31bfe2ba3a64a4ea25f768be359890780c86fc87", "filename": "src/libstd/math.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -23,6 +23,9 @@ import ctypes::c_int;\n import m_float = math_f64;\n \n // FIXME replace with redirect to m_float::consts::FOO as soon as it works\n+/*\n+Module: consts\n+*/\n mod consts {\n     /*\n     Const: pi"}, {"sha": "6c36db51a67c1ef255802bde17f655d9aa4a1244", "filename": "src/libstd/math_f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fmath_f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fmath_f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath_f32.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -17,6 +17,7 @@ export\n \n export consts;\n \n+/* Module: consts */\n mod consts {\n \n     /*"}, {"sha": "cc8fad9f665268f707ad6db4d0cabadc367c8c7f", "filename": "src/libstd/math_f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fmath_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fmath_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath_f64.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -17,6 +17,7 @@ export\n \n export consts;\n \n+/* Module: consts */\n mod consts {\n \n     /*"}, {"sha": "2bae8d699a5ca7bb57cde5695cd87a61555d97aa", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -174,7 +174,8 @@ fn byte_len_range(s: str, byte_offset: uint, char_len: uint) -> uint {\n /*\n Function: bytes\n \n-Converts a string to a vector of bytes\n+Converts a string to a vector of bytes. The result vector is not\n+null-terminated.\n */\n fn bytes(s: str) -> [u8] unsafe {\n     let v = unsafe::reinterpret_cast(s);"}, {"sha": "ee7d5e3b2d92053f13f8365766ee487567aefc5e", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89efb7d9810643eb1b25c04e63203b591915448f/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=89efb7d9810643eb1b25c04e63203b591915448f", "patch": "@@ -9,6 +9,9 @@ import option;\n import option::{none, some};\n import rand;\n \n+/*\n+Function: mkdtemp\n+*/\n fn mkdtemp(prefix: str, suffix: str) -> option::t<str> {\n     let r = rand::mk_rng();\n     let i = 0u;"}]}