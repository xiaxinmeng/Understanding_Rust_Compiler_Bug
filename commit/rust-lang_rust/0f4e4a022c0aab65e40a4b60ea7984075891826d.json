{"sha": "0f4e4a022c0aab65e40a4b60ea7984075891826d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNGU0YTAyMmMwYWFiNjVlNDBhNGI2MGVhNzk4NDA3NTg5MTgyNmQ=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-15T10:55:40Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-15T10:55:40Z"}, "message": "rustdoc: Rename internal API fns to `into_string`\n\nto avoid surprising listed in API guidelines.", "tree": {"sha": "63677f2f023d191c0acddcc81446acb0be169fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63677f2f023d191c0acddcc81446acb0be169fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f4e4a022c0aab65e40a4b60ea7984075891826d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4e4a022c0aab65e40a4b60ea7984075891826d", "html_url": "https://github.com/rust-lang/rust/commit/0f4e4a022c0aab65e40a4b60ea7984075891826d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f4e4a022c0aab65e40a4b60ea7984075891826d/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "html_url": "https://github.com/rust-lang/rust/commit/567ad7455d5f25f6b38d2fded1cb621e0c34a48b"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "c8121d39d0f8f5dc67c1bfaf4bae3f6da587ddd2", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=0f4e4a022c0aab65e40a4b60ea7984075891826d", "patch": "@@ -37,14 +37,14 @@ impl ExternalHtml {\n         let bc = format!(\n             \"{}{}\",\n             bc,\n-            Markdown(&m_bc, &[], id_map, codes, edition, playground).to_string()\n+            Markdown(&m_bc, &[], id_map, codes, edition, playground).into_string()\n         );\n         let ac = load_external_files(after_content, diag)?;\n         let m_ac = load_external_files(md_after_content, diag)?;\n         let ac = format!(\n             \"{}{}\",\n             ac,\n-            Markdown(&m_ac, &[], id_map, codes, edition, playground).to_string()\n+            Markdown(&m_ac, &[], id_map, codes, edition, playground).into_string()\n         );\n         Some(ExternalHtml { in_header: ih, before_content: bc, after_content: ac })\n     }"}, {"sha": "8847f2bca36e9b5ace460658123f3537100fb7dd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0f4e4a022c0aab65e40a4b60ea7984075891826d", "patch": "@@ -13,7 +13,7 @@\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n //! let md = Markdown(s, &[], &mut id_map, ErrorCodes::Yes, Edition::Edition2015, &None);\n-//! let html = md.to_string();\n+//! let html = md.into_string();\n //! // ... something using html\n //! ```\n \n@@ -848,7 +848,7 @@ impl LangString {\n }\n \n impl Markdown<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let Markdown(md, links, mut ids, codes, edition, playground) = self;\n \n         // This is actually common enough to special-case\n@@ -878,7 +878,7 @@ impl Markdown<'_> {\n }\n \n impl MarkdownWithToc<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let MarkdownWithToc(md, mut ids, codes, edition, playground) = self;\n \n         let p = Parser::new_ext(md, opts());\n@@ -899,7 +899,7 @@ impl MarkdownWithToc<'_> {\n }\n \n impl MarkdownHtml<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let MarkdownHtml(md, mut ids, codes, edition, playground) = self;\n \n         // This is actually common enough to special-case\n@@ -926,7 +926,7 @@ impl MarkdownHtml<'_> {\n }\n \n impl MarkdownSummaryLine<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let MarkdownSummaryLine(md, links) = self;\n         // This is actually common enough to special-case\n         if md.is_empty() {"}, {"sha": "783977d285dc466d0c9007b36a9f95330a25dbf4", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=0f4e4a022c0aab65e40a4b60ea7984075891826d", "patch": "@@ -134,7 +134,7 @@ fn test_header() {\n     fn t(input: &str, expect: &str) {\n         let mut map = IdMap::new();\n         let output =\n-            Markdown(input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n+            Markdown(input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -166,7 +166,8 @@ fn test_header() {\n fn test_header_ids_multiple_blocks() {\n     let mut map = IdMap::new();\n     fn t(map: &mut IdMap, input: &str, expect: &str) {\n-        let output = Markdown(input, &[], map, ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n+        let output =\n+            Markdown(input, &[], map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -228,7 +229,7 @@ fn test_markdown_html_escape() {\n     fn t(input: &str, expect: &str) {\n         let mut idmap = IdMap::new();\n         let output =\n-            MarkdownHtml(input, &mut idmap, ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n+            MarkdownHtml(input, &mut idmap, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n "}, {"sha": "efeece536ffb459eca27ebb91d7ef472c99444b5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0f4e4a022c0aab65e40a4b60ea7984075891826d", "patch": "@@ -1894,7 +1894,7 @@ fn render_markdown(\n             cx.shared.edition,\n             &cx.shared.playground\n         )\n-        .to_string()\n+        .into_string()\n     )\n }\n \n@@ -2184,7 +2184,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                        </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n                     stab_tags = stability_tags(myitem),\n-                    docs = MarkdownSummaryLine(doc_value, &myitem.links()).to_string(),\n+                    docs = MarkdownSummaryLine(doc_value, &myitem.links()).into_string(),\n                     class = myitem.type_(),\n                     add = add,\n                     stab = stab.unwrap_or_else(String::new),\n@@ -2277,7 +2277,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                 cx.shared.edition,\n                 &cx.shared.playground,\n             );\n-            message.push_str(&format!(\": {}\", html.to_string()));\n+            message.push_str(&format!(\": {}\", html.into_string()));\n         }\n         stability.push(format!(\n             \"<div class='stab deprecated'><span class='emoji'>\ud83d\udc4e</span> {}</div>\",\n@@ -2331,7 +2331,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                     cx.shared.edition,\n                     &cx.shared.playground,\n                 )\n-                .to_string()\n+                .into_string()\n             );\n         }\n \n@@ -3631,7 +3631,7 @@ fn render_impl(\n                     cx.shared.edition,\n                     &cx.shared.playground\n                 )\n-                .to_string()\n+                .into_string()\n             );\n         }\n     }"}, {"sha": "89d184e35cb064a177c3a81a3961a97add895e12", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=0f4e4a022c0aab65e40a4b60ea7984075891826d", "patch": "@@ -68,9 +68,9 @@ pub fn render<P: AsRef<Path>>(\n     let mut ids = IdMap::new();\n     let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let text = if !options.markdown_no_toc {\n-        MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).to_string()\n+        MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).into_string()\n     } else {\n-        Markdown(text, &[], &mut ids, error_codes, edition, &playground).to_string()\n+        Markdown(text, &[], &mut ids, error_codes, edition, &playground).into_string()\n     };\n \n     let err = write!("}, {"sha": "c4292d041d0511db7711167e0185196e0b42a9b1", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4e4a022c0aab65e40a4b60ea7984075891826d/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=0f4e4a022c0aab65e40a4b60ea7984075891826d", "patch": "@@ -127,7 +127,7 @@ impl Formatter for HTMLFormatter {\n                         DEFAULT_EDITION,\n                         &Some(playground)\n                     )\n-                    .to_string()\n+                    .into_string()\n                 )?\n             }\n             None => write!(output, \"<p>No description.</p>\\n\")?,"}]}