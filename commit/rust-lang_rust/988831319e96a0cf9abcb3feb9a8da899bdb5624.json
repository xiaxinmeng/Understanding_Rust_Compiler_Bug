{"sha": "988831319e96a0cf9abcb3feb9a8da899bdb5624", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODgzMTMxOWU5NmEwY2Y5YWJjYjNmZWI5YThkYTg5OWJkYjU2MjQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-19T05:00:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-19T05:00:04Z"}, "message": "Rollup merge of #37265 - brson:bootstrap, r=alexcrichton\n\nAllow bootstrapping without a key. Fixes #36548\n\nThis will make it easier for packagers to bootstrap rustc when they happen\nto have a bootstrap compiler with a slightly different version number.\n\nIt's not ok for anything other than the build system to set this environment variable.\n\nr? @alexcrichton", "tree": {"sha": "bd0decf1632e08a2f996ce1acad9366e9d42a783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0decf1632e08a2f996ce1acad9366e9d42a783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988831319e96a0cf9abcb3feb9a8da899bdb5624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988831319e96a0cf9abcb3feb9a8da899bdb5624", "html_url": "https://github.com/rust-lang/rust/commit/988831319e96a0cf9abcb3feb9a8da899bdb5624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988831319e96a0cf9abcb3feb9a8da899bdb5624/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903e1f96575085608407590227084430ee068d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/903e1f96575085608407590227084430ee068d51", "html_url": "https://github.com/rust-lang/rust/commit/903e1f96575085608407590227084430ee068d51"}, {"sha": "d3c5905772d0ae1f251a5918fdaa52dbfd7519f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c5905772d0ae1f251a5918fdaa52dbfd7519f2", "html_url": "https://github.com/rust-lang/rust/commit/d3c5905772d0ae1f251a5918fdaa52dbfd7519f2"}], "stats": {"total": 85, "additions": 19, "deletions": 66}, "files": [{"sha": "d4efee90361b7862195c7e6c6739480e73123114", "filename": "mk/main.mk", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/988831319e96a0cf9abcb3feb9a8da899bdb5624/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/988831319e96a0cf9abcb3feb9a8da899bdb5624/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=988831319e96a0cf9abcb3feb9a8da899bdb5624", "patch": "@@ -53,17 +53,6 @@ endif\n # versions in the same place\n CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(CFG_HASH_COMMAND))\n \n-# A magic value that allows the compiler to use unstable features during the\n-# bootstrap even when doing so would normally be an error because of feature\n-# staging or because the build turns on warnings-as-errors and unstable features\n-# default to warnings. The build has to match this key in an env var.\n-#\n-# This value is keyed off the release to ensure that all compilers for one\n-# particular release have the same bootstrap key. Note that this is\n-# intentionally not \"secure\" by any definition, this is largely just a deterrent\n-# from users enabling unstable features on the stable compiler.\n-CFG_BOOTSTRAP_KEY=$(CFG_FILENAME_EXTRA)\n-\n # If local-rust is the same as the current version, then force a local-rebuild\n ifdef CFG_ENABLE_LOCAL_RUST\n ifeq ($(CFG_RELEASE),\\\n@@ -73,14 +62,6 @@ ifeq ($(CFG_RELEASE),\\\n endif\n endif\n \n-# The stage0 compiler needs to use the previous key recorded in src/stage0.txt,\n-# except for local-rebuild when it just uses the same current key.\n-ifdef CFG_ENABLE_LOCAL_REBUILD\n-CFG_BOOTSTRAP_KEY_STAGE0=$(CFG_BOOTSTRAP_KEY)\n-else\n-CFG_BOOTSTRAP_KEY_STAGE0=$(shell sed -ne 's/^rustc_key: //p' $(S)src/stage0.txt)\n-endif\n-\n # The name of the package to use for creating tarballs, installers etc.\n CFG_PACKAGE_NAME=rustc-$(CFG_PACKAGE_VERS)\n \n@@ -387,13 +368,16 @@ CFG_INFO := $(info cfg: disabling unstable features (CFG_DISABLE_UNSTABLE_FEATUR\n # Turn on feature-staging\n export CFG_DISABLE_UNSTABLE_FEATURES\n # Subvert unstable feature lints to do the self-build\n-export RUSTC_BOOTSTRAP_KEY:=$(CFG_BOOTSTRAP_KEY)\n+export RUSTC_BOOTSTRAP\n endif\n-export CFG_BOOTSTRAP_KEY\n ifdef CFG_MUSL_ROOT\n export CFG_MUSL_ROOT\n endif\n \n+# FIXME: Transitionary measure to bootstrap using the old bootstrap logic.\n+# Remove this once the bootstrap compiler uses the new login in Issue #36548.\n+export RUSTC_BOOTSTRAP_KEY=62b3e239\n+\n ######################################################################\n # Per-stage targets and runner\n ######################################################################"}, {"sha": "1b139909ab458587e6398629275c2245183fca77", "filename": "mk/target.mk", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/988831319e96a0cf9abcb3feb9a8da899bdb5624/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/988831319e96a0cf9abcb3feb9a8da899bdb5624/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=988831319e96a0cf9abcb3feb9a8da899bdb5624", "patch": "@@ -42,23 +42,6 @@ $(foreach host,$(CFG_HOST), \\\n    $(foreach crate,$(CRATES), \\\n     $(eval $(call RUST_CRATE_FULLDEPS,$(stage),$(target),$(host),$(crate)))))))\n \n-# $(1) stage\n-# $(2) target\n-# $(3) host\n-define DEFINE_BOOTSTRAP_KEY\n-BOOTSTRAP_KEY$(1)_T_$(2)_H_$(3) := $$(CFG_BOOTSTRAP_KEY)\n-ifeq ($(1),0)\n-ifeq ($(3),$$(CFG_BUILD))\n-BOOTSTRAP_KEY$(1)_T_$(2)_H_$(3) := $$(CFG_BOOTSTRAP_KEY_STAGE0)\n-endif\n-endif\n-endef\n-\n-$(foreach host,$(CFG_TARGET), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEFINE_BOOTSTRAP_KEY,$(stage),$(target),$(host))))))\n-\n # RUST_TARGET_STAGE_N template: This defines how target artifacts are built\n # for all stage/target architecture combinations. This is one giant rule which\n # works as follows:\n@@ -83,8 +66,6 @@ $(foreach host,$(CFG_TARGET), \\\n define RUST_TARGET_STAGE_N\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): CFG_COMPILER_HOST_TRIPLE = $(2)\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n-\texport RUSTC_BOOTSTRAP_KEY := $$(BOOTSTRAP_KEY$(1)_T_$(2)_H_$(3))\n $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n \t\t$$(CRATEFILE_$(4)) \\\n \t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n@@ -132,8 +113,6 @@ endef\n # $(4) - name of the tool being built\n define TARGET_TOOL\n \n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n-\texport RUSTC_BOOTSTRAP_KEY := $$(BOOTSTRAP_KEY$(1)_T_$(2)_H_$(3))\n $$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n \t\t$$(TOOL_SOURCE_$(4)) \\\n \t\t$$(TOOL_INPUTS_$(4)) \\"}, {"sha": "af76a49fed0455bbf5028b5a67b7da39cba445c2", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=988831319e96a0cf9abcb3feb9a8da899bdb5624", "patch": "@@ -214,7 +214,7 @@ pub fn compiletest(build: &Build,\n             }\n         }\n     }\n-    build.add_bootstrap_key(compiler, &mut cmd);\n+    build.add_bootstrap_key(&mut cmd);\n \n     cmd.arg(\"--adb-path\").arg(\"adb\");\n     cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);"}, {"sha": "ff8e4757bd1f140aceb274f70734a7b8309ca998", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=988831319e96a0cf9abcb3feb9a8da899bdb5624", "patch": "@@ -119,7 +119,7 @@ fn build_startup_objects(build: &Build, target: &str, into: &Path) {\n     for file in t!(fs::read_dir(build.src.join(\"src/rtstartup\"))) {\n         let file = t!(file);\n         let mut cmd = Command::new(&compiler_path);\n-        build.add_bootstrap_key(&compiler, &mut cmd);\n+        build.add_bootstrap_key(&mut cmd);\n         build.run(cmd.arg(\"--target\").arg(target)\n                      .arg(\"--emit=obj\")\n                      .arg(\"--out-dir\").arg(into)\n@@ -185,7 +185,6 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     cargo.env(\"CFG_RELEASE\", &build.release)\n          .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n          .env(\"CFG_VERSION\", &build.version)\n-         .env(\"CFG_BOOTSTRAP_KEY\", &build.bootstrap_key)\n          .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or(String::new()))\n          .env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n "}, {"sha": "a63c23b46212d0e68d9a081f135d488ce0f77843", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=988831319e96a0cf9abcb3feb9a8da899bdb5624", "patch": "@@ -662,7 +662,7 @@ impl Build {\n              .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n-        self.add_bootstrap_key(compiler, &mut cargo);\n+        self.add_bootstrap_key(&mut cargo);\n \n         // Specify some various options for build scripts used throughout\n         // the build.\n@@ -871,16 +871,11 @@ impl Build {\n     }\n \n     /// Adds the compiler's bootstrap key to the environment of `cmd`.\n-    fn add_bootstrap_key(&self, compiler: &Compiler, cmd: &mut Command) {\n-        // In stage0 we're using a previously released stable compiler, so we\n-        // use the stage0 bootstrap key. Otherwise we use our own build's\n-        // bootstrap key.\n-        let bootstrap_key = if compiler.is_snapshot(self) && !self.local_rebuild {\n-            &self.bootstrap_key_stage0\n-        } else {\n-            &self.bootstrap_key\n-        };\n-        cmd.env(\"RUSTC_BOOTSTRAP_KEY\", bootstrap_key);\n+    fn add_bootstrap_key(&self, cmd: &mut Command) {\n+        cmd.env(\"RUSTC_BOOTSTRAP\", \"\");\n+        // FIXME: Transitionary measure to bootstrap using the old bootstrap logic.\n+        // Remove this once the bootstrap compiler uses the new login in Issue #36548.\n+        cmd.env(\"RUSTC_BOOTSTRAP_KEY\", \"62b3e239\");\n     }\n \n     /// Returns the compiler's libdir where it stores the dynamic libraries that"}, {"sha": "954fe330b54cae28613e5478a1896bde0b1239ad", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=988831319e96a0cf9abcb3feb9a8da899bdb5624", "patch": "@@ -1330,15 +1330,12 @@ impl UnstableFeatures {\n     pub fn from_environment() -> UnstableFeatures {\n         // Whether this is a feature-staged build, i.e. on the beta or stable channel\n         let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n-        // The secret key needed to get through the rustc build itself by\n-        // subverting the unstable features lints\n-        let bootstrap_secret_key = option_env!(\"CFG_BOOTSTRAP_KEY\");\n-        // The matching key to the above, only known by the build system\n-        let bootstrap_provided_key = env::var(\"RUSTC_BOOTSTRAP_KEY\").ok();\n-        match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n-            (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n-            (true, _, _) => UnstableFeatures::Disallow,\n-            (false, _, _) => UnstableFeatures::Allow\n+        // Whether we should enable unstable features for bootstrapping\n+        let bootstrap = env::var(\"RUSTC_BOOTSTRAP\").is_ok();\n+        match (disable_unstable_features, bootstrap) {\n+            (_, true) => UnstableFeatures::Cheat,\n+            (true, _) => UnstableFeatures::Disallow,\n+            (false, _) => UnstableFeatures::Allow\n         }\n     }\n "}, {"sha": "ac2050a6fc8f1e318b5454d3f7990f675af21d63", "filename": "src/stage0.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/988831319e96a0cf9abcb3feb9a8da899bdb5624/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=988831319e96a0cf9abcb3feb9a8da899bdb5624", "patch": "@@ -13,5 +13,4 @@\n # released on `$date`\n \n rustc: beta-2016-09-28\n-rustc_key: 62b3e239\n cargo: nightly-2016-09-26"}]}