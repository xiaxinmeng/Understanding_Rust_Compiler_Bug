{"sha": "697d3bee96c8e385cea9cf2a01325f033ae160fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5N2QzYmVlOTZjOGUzODVjZWE5Y2YyYTAxMzI1ZjAzM2FlMTYwZmE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-14T19:11:23Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-17T22:01:54Z"}, "message": "Replace Rc with Lrc", "tree": {"sha": "23016ac6af505893bd21b14fb0748e5980956db7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23016ac6af505893bd21b14fb0748e5980956db7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/697d3bee96c8e385cea9cf2a01325f033ae160fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/697d3bee96c8e385cea9cf2a01325f033ae160fa", "html_url": "https://github.com/rust-lang/rust/commit/697d3bee96c8e385cea9cf2a01325f033ae160fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/697d3bee96c8e385cea9cf2a01325f033ae160fa/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1551ef181267ea1e5db534b247148aba6bd14970", "url": "https://api.github.com/repos/rust-lang/rust/commits/1551ef181267ea1e5db534b247148aba6bd14970", "html_url": "https://github.com/rust-lang/rust/commit/1551ef181267ea1e5db534b247148aba6bd14970"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "19a7576b7ceac4ed1abd99d739a9c89751ebb46b", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=697d3bee96c8e385cea9cf2a01325f033ae160fa", "patch": "@@ -19,7 +19,7 @@ use graphviz::IntoCow;\n use syntax_pos::Span;\n \n use std::borrow::Cow;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ConstEvalErr<'tcx>>;\n \n@@ -52,7 +52,7 @@ impl<'tcx> ConstVal<'tcx> {\n #[derive(Clone, Debug)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub kind: Rc<ErrKind<'tcx>>,\n+    pub kind: Lrc<ErrKind<'tcx>>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "e16a1082214f7db04f40d8af322305c2657790a5", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=697d3bee96c8e385cea9cf2a01325f033ae160fa", "patch": "@@ -15,7 +15,7 @@ use std::iter::FromIterator;\n use traits::query::CanonicalTyGoal;\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Kind;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n@@ -182,13 +182,13 @@ impl_stable_hash_for!(struct DropckOutlivesResult<'tcx> {\n \n impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, DropckOutlivesResult<'tcx>> {\n     // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Rc<Canonical<'gcx, QueryResult<'gcx, DropckOutlivesResult<'gcx>>>>;\n+    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, DropckOutlivesResult<'gcx>>>>;\n \n     fn intern(\n         _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n         value: Canonical<'gcx, Self::Lifted>,\n     ) -> Self::Canonicalized {\n-        Rc::new(value)\n+        Lrc::new(value)\n     }\n }\n "}, {"sha": "63f50cff4c2ad2c01a37626d52bfe00d9a5e8b25", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=697d3bee96c8e385cea9cf2a01325f033ae160fa", "patch": "@@ -17,7 +17,7 @@ use infer::at::At;\n use infer::canonical::{Canonical, Canonicalize, QueryResult};\n use middle::const_val::ConstVal;\n use mir::interpret::GlobalId;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use traits::query::CanonicalProjectionGoal;\n use traits::project::Normalized;\n@@ -259,13 +259,13 @@ impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ty::ParamEnvAnd<'tcx, ty::Pr\n \n impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, NormalizationResult<'tcx>> {\n     // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Rc<Canonical<'gcx, QueryResult<'gcx, NormalizationResult<'gcx>>>>;\n+    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, NormalizationResult<'gcx>>>>;\n \n     fn intern(\n         _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n         value: Canonical<'gcx, Self::Lifted>,\n     ) -> Self::Canonicalized {\n-        Rc::new(value)\n+        Lrc::new(value)\n     }\n }\n "}, {"sha": "3fc20508ad7ee0d901f064752870cdffaed364a2", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=697d3bee96c8e385cea9cf2a01325f033ae160fa", "patch": "@@ -18,6 +18,7 @@ use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::sync::Lrc;\n use mir::interpret;\n \n use std::rc::Rc;\n@@ -465,7 +466,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n         tcx.lift(&*self.kind).map(|kind| {\n             ConstEvalErr {\n                 span: self.span,\n-                kind: Rc::new(kind),\n+                kind: Lrc::new(kind),\n             }\n         })\n     }"}, {"sha": "50997089a5764fddc45e2fe46081723301a9e643", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=697d3bee96c8e385cea9cf2a01325f033ae160fa", "patch": "@@ -14,7 +14,7 @@ use super::{Place, EvalContext, StackPopCleanup, ValTy, PlaceExtra, Memory};\n \n use std::fmt;\n use std::error::Error;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -477,7 +477,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n             return Err(ConstEvalErr {\n-                kind: Rc::new(CheckMatchError),\n+                kind: Lrc::new(CheckMatchError),\n                 span,\n             });\n         }\n@@ -489,7 +489,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do not continue into miri if typeck errors occurred; it will fail horribly\n         if tables.tainted_by_errors {\n             return Err(ConstEvalErr {\n-                kind: Rc::new(TypeckError),\n+                kind: Lrc::new(TypeckError),\n                 span,\n             });\n         }"}, {"sha": "1fe2f87128abddcb099554aefea8df2fe6acb03b", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=697d3bee96c8e385cea9cf2a01325f033ae160fa", "patch": "@@ -16,14 +16,14 @@ use rustc::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResu\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::ty::subst::Subst;\n use rustc::util::nodemap::FxHashSet;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use syntax::codemap::{Span, DUMMY_SP};\n use util;\n \n crate fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n-) -> Result<Rc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n     debug!(\"dropck_outlives(goal={:#?})\", goal);\n \n     tcx.infer_ctxt().enter(|ref infcx| {"}, {"sha": "62d5ef11551c0a044f3da4c499957bd51c911fac", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697d3bee96c8e385cea9cf2a01325f033ae160fa/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=697d3bee96c8e385cea9cf2a01325f033ae160fa", "patch": "@@ -14,15 +14,15 @@ use rustc::traits::{self, FulfillmentContext, Normalized, ObligationCause,\n use rustc::traits::query::{CanonicalProjectionGoal, NoSolution, normalize::NormalizationResult};\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use rustc::util::common::CellUsizeExt;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::DUMMY_SP;\n use util;\n \n crate fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n-) -> Result<Rc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n     tcx.sess.perf_stats.normalize_projection_ty.increment();"}]}