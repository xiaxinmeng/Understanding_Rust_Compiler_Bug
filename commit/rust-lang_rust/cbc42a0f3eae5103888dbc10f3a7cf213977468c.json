{"sha": "cbc42a0f3eae5103888dbc10f3a7cf213977468c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYzQyYTBmM2VhZTUxMDM4ODhkYmMxMGYzYTdjZjIxMzk3NzQ2OGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-18T00:19:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-18T00:19:24Z"}, "message": "Auto merge of #77956 - JohnTitor:more-tests, r=nagisa\n\nAdd some more regression tests\n\nThis is another round of #77741. Tested with `debug-assertions=true` and it passed on my local.\nCloses #70877\nCloses #70944\nCloses #71659\nCloses #74816\nCloses #75707\nCloses #75983\n(Skipped #63355 because I'm not sure about the error.)", "tree": {"sha": "e6eae8f58ce23d4d6accf4adb896aa665334d84d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6eae8f58ce23d4d6accf4adb896aa665334d84d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc42a0f3eae5103888dbc10f3a7cf213977468c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc42a0f3eae5103888dbc10f3a7cf213977468c", "html_url": "https://github.com/rust-lang/rust/commit/cbc42a0f3eae5103888dbc10f3a7cf213977468c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc42a0f3eae5103888dbc10f3a7cf213977468c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0ef34f64c5e97cd485b0f8a4103438ca160a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0ef34f64c5e97cd485b0f8a4103438ca160a51", "html_url": "https://github.com/rust-lang/rust/commit/3b0ef34f64c5e97cd485b0f8a4103438ca160a51"}, {"sha": "d80f93d507406375e302d9583e02bf19d1565cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80f93d507406375e302d9583e02bf19d1565cfe", "html_url": "https://github.com/rust-lang/rust/commit/d80f93d507406375e302d9583e02bf19d1565cfe"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "754397229a6883f1946cca481a45933bffe7f3b7", "filename": "src/test/ui/generic-associated-types/issue-74816.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,23 @@\n+#![feature(associated_type_defaults)]\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+trait Trait1 {\n+    fn foo();\n+}\n+\n+trait Trait2 {\n+    type Associated: Trait1 = Self;\n+    //~^ ERROR: the trait bound `Self: Trait1` is not satisfied\n+    //~| the size for values of type `Self` cannot be known\n+}\n+\n+impl Trait2 for () {}\n+\n+fn call_foo<T: Trait2>() {\n+    T::Associated::foo()\n+}\n+\n+fn main() {\n+    call_foo::<()>()\n+}"}, {"sha": "64bc94d601b7838d3848231e5ceba327903804b1", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,31 @@\n+error[E0277]: the trait bound `Self: Trait1` is not satisfied\n+  --> $DIR/issue-74816.rs:10:5\n+   |\n+LL |     type Associated: Trait1 = Self;\n+   |     ^^^^^^^^^^^^^^^^^------^^^^^^^^\n+   |     |                |\n+   |     |                required by this bound in `Trait2::Associated`\n+   |     the trait `Trait1` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Trait2: Trait1 {\n+   |             ^^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/issue-74816.rs:10:5\n+   |\n+LL |     type Associated: Trait1 = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     doesn't have a size known at compile-time\n+   |     required by this bound in `Trait2::Associated`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Trait2: Sized {\n+   |             ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a4a59f98fd83f4de70d05e84cd8699d002afb54c", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,38 @@\n+#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_bindings)]\n+#![allow(incomplete_features)]\n+\n+type FooArg<'a> = &'a dyn ToString;\n+type FooRet = impl std::fmt::Debug;\n+\n+type FooItem = Box<dyn Fn(FooArg) -> FooRet>;\n+type Foo = impl Iterator<Item = FooItem>; //~ ERROR: type mismatch\n+\n+#[repr(C)]\n+struct Bar(u8);\n+\n+impl Iterator for Bar {\n+    type Item = FooItem;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        Some(Box::new(quux))\n+    }\n+}\n+\n+fn quux(st: FooArg) -> FooRet {\n+    Some(st.to_string())\n+}\n+\n+fn ham() -> Foo {\n+    Bar(1)\n+}\n+\n+fn oof() -> impl std::fmt::Debug {\n+    let mut bar = ham();\n+    let func = bar.next().unwrap();\n+    return func(&\"oof\");\n+}\n+\n+fn main() {\n+    let _ = oof();\n+}"}, {"sha": "3ef7087b08a10f39230ba3a1059c3a8f5ca55503", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,15 @@\n+error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+  --> $DIR/issue-70877.rs:9:12\n+   |\n+LL | type FooRet = impl std::fmt::Debug;\n+   |               -------------------- the expected opaque type\n+...\n+LL | type Foo = impl Iterator<Item = FooItem>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found enum `Option`\n+   |\n+   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n+              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "3286de9d5b8e0442379dcc3b1b18894202b7758f", "filename": "src/test/ui/traits/issue-70944.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Ftraits%2Fissue-70944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Ftraits%2Fissue-70944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-70944.rs?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// Regression test of #70944, should compile fine.\n+\n+use std::ops::Index;\n+\n+pub struct KeyA;\n+pub struct KeyB;\n+pub struct KeyC;\n+\n+pub trait Foo: Index<KeyA> + Index<KeyB> + Index<KeyC> {}\n+pub trait FooBuilder {\n+    type Inner: Foo;\n+    fn inner(&self) -> &Self::Inner;\n+}\n+\n+pub fn do_stuff(foo: &impl FooBuilder) {\n+    let inner = foo.inner();\n+    &inner[KeyA];\n+    &inner[KeyB];\n+    &inner[KeyC];\n+}\n+\n+fn main() {}"}, {"sha": "f9a7f36de43f1fd09ba38e1a9c3b7bc928fbb56d", "filename": "src/test/ui/traits/trait-alias/issue-75983.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-75983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-75983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-75983.rs?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![feature(trait_alias)]\n+\n+struct Bar;\n+trait Foo {}\n+impl Foo for Bar {}\n+\n+trait Baz = Foo where Bar: Foo;\n+\n+fn new() -> impl Baz {\n+    Bar\n+}\n+\n+fn main() {\n+    let _ = new();\n+}"}, {"sha": "3524ca02bbf87289d229a766244f71d3d5c30e89", "filename": "src/test/ui/unsized/issue-71659.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-71659.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-71659.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-71659.rs?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,32 @@\n+#![feature(unsize)]\n+\n+use std::marker::Unsize;\n+\n+pub trait CastTo<T: ?Sized>: Unsize<T> {\n+    fn cast_to(&self) -> &T;\n+}\n+\n+impl<T: ?Sized, U: ?Sized + Unsize<T>> CastTo<T> for U {\n+    fn cast_to(&self) -> &T {\n+        self\n+    }\n+}\n+\n+impl<T: ?Sized> Cast for T {}\n+pub trait Cast {\n+    fn cast<T: ?Sized>(&self) -> &T\n+    where\n+        Self: CastTo<T>,\n+    {\n+        self\n+    }\n+}\n+\n+pub trait Foo: CastTo<[i32]> {}\n+impl Foo for [i32; 0] {}\n+\n+fn main() {\n+    let x: &dyn Foo = &[];\n+    let x = x.cast::<[i32]>();\n+    //~^ ERROR: the trait bound `dyn Foo: CastTo<[i32]>` is not satisfied\n+}"}, {"sha": "be2df8c85e1afba96520b64d76497120fd4d0b83", "filename": "src/test/ui/unsized/issue-71659.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `dyn Foo: CastTo<[i32]>` is not satisfied\n+  --> $DIR/issue-71659.rs:30:15\n+   |\n+LL |     let x = x.cast::<[i32]>();\n+   |               ^^^^ the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9f04cdbb92211fa994b81d75cc6e24cf4082ec4a", "filename": "src/test/ui/unsized/issue-75707.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-75707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-75707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-75707.rs?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,17 @@\n+pub trait Callback {\n+    fn cb();\n+}\n+\n+pub trait Processing {\n+    type Call: Callback;\n+}\n+\n+fn f<P: Processing + ?Sized>() {\n+    P::Call::cb();\n+}\n+\n+fn main() {\n+    struct MyCall;\n+    f::<dyn Processing<Call = MyCall>>();\n+    //~^ ERROR: the trait bound `MyCall: Callback` is not satisfied\n+}"}, {"sha": "6e557a25f955df4cf64cfa7e3bc0975c462cd692", "filename": "src/test/ui/unsized/issue-75707.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc42a0f3eae5103888dbc10f3a7cf213977468c/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr?ref=cbc42a0f3eae5103888dbc10f3a7cf213977468c", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `MyCall: Callback` is not satisfied\n+  --> $DIR/issue-75707.rs:15:5\n+   |\n+LL | fn f<P: Processing + ?Sized>() {\n+   |         ---------- required by this bound in `f`\n+...\n+LL |     f::<dyn Processing<Call = MyCall>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Callback` is not implemented for `MyCall`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}