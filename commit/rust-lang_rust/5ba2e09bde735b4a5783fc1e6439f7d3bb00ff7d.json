{"sha": "5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "node_id": "C_kwDOAAsO6NoAKDViYTJlMDliZGU3MzViNGE1NzgzZmMxZTY0MzlmN2QzYmIwMGZmN2Q", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-05-05T18:59:45Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-05-10T20:43:51Z"}, "message": "Fix addassign-yield.rs by implementing fake_read", "tree": {"sha": "1306b67eb92ca2ec6247f3bc31bcf8c5daffa3a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1306b67eb92ca2ec6247f3bc31bcf8c5daffa3a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "html_url": "https://github.com/rust-lang/rust/commit/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125326e4ed6c4752cd7fdea75128379cb24847f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/125326e4ed6c4752cd7fdea75128379cb24847f6", "html_url": "https://github.com/rust-lang/rust/commit/125326e4ed6c4752cd7fdea75128379cb24847f6"}], "stats": {"total": 151, "additions": 88, "deletions": 63}, "files": [{"sha": "20269a67c72b6ee8a563d2556a0ca3244da0e498", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "patch": "@@ -77,38 +77,8 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n         }\n         self.places.consumed.get_mut(&consumer).map(|places| places.insert(target));\n     }\n-}\n-\n-impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n-    fn consume(\n-        &mut self,\n-        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        diag_expr_id: HirId,\n-    ) {\n-        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n-            Some(parent) => parent,\n-            None => place_with_id.hir_id,\n-        };\n-        debug!(\n-            \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n-            place_with_id, diag_expr_id, parent\n-        );\n-        place_with_id\n-            .try_into()\n-            .map_or((), |tracked_value| self.mark_consumed(parent, tracked_value));\n-    }\n-\n-    fn borrow(\n-        &mut self,\n-        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        diag_expr_id: HirId,\n-        bk: rustc_middle::ty::BorrowKind,\n-    ) {\n-        debug!(\n-            \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n-            borrow_kind={bk:?}\"\n-        );\n \n+    fn borrow_place(&mut self, place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>) {\n         self.places\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n@@ -158,6 +128,40 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n             self.places.borrowed_temporaries.insert(place_with_id.hir_id);\n         }\n     }\n+}\n+\n+impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n+    fn consume(\n+        &mut self,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n+    ) {\n+        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n+            Some(parent) => parent,\n+            None => place_with_id.hir_id,\n+        };\n+        debug!(\n+            \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n+            place_with_id, diag_expr_id, parent\n+        );\n+        place_with_id\n+            .try_into()\n+            .map_or((), |tracked_value| self.mark_consumed(parent, tracked_value));\n+    }\n+\n+    fn borrow(\n+        &mut self,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n+        bk: rustc_middle::ty::BorrowKind,\n+    ) {\n+        debug!(\n+            \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n+            borrow_kind={bk:?}\"\n+        );\n+\n+        self.borrow_place(place_with_id);\n+    }\n \n     fn copy(\n         &mut self,\n@@ -199,9 +203,16 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n \n     fn fake_read(\n         &mut self,\n-        _place: expr_use_visitor::Place<'tcx>,\n-        _cause: rustc_middle::mir::FakeReadCause,\n-        _diag_expr_id: HirId,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        cause: rustc_middle::mir::FakeReadCause,\n+        diag_expr_id: HirId,\n     ) {\n+        debug!(\n+            \"fake_read place_with_id={place_with_id:?}; cause={cause:?}; diag_expr_id={diag_expr_id:?}\"\n+        );\n+\n+        // fake reads happen in places like the scrutinee of a match expression, so we can treat\n+        // these as a borrow.\n+        self.borrow_place(place_with_id);\n     }\n }"}, {"sha": "f57d57610518599e69220a04bb5b255c63086273", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "patch": "@@ -1755,14 +1755,19 @@ struct InferBorrowKind<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n-    fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId) {\n-        let PlaceBase::Upvar(_) = place.base else { return };\n+    fn fake_read(\n+        &mut self,\n+        place: &PlaceWithHirId<'tcx>,\n+        cause: FakeReadCause,\n+        diag_expr_id: hir::HirId,\n+    ) {\n+        let PlaceBase::Upvar(_) = place.place.base else { return };\n \n         // We need to restrict Fake Read precision to avoid fake reading unsafe code,\n         // such as deref of a raw pointer.\n         let dummy_capture_kind = ty::UpvarCapture::ByRef(ty::BorrowKind::ImmBorrow);\n \n-        let (place, _) = restrict_capture_precision(place, dummy_capture_kind);\n+        let (place, _) = restrict_capture_precision(place.place.clone(), dummy_capture_kind);\n \n         let (place, _) = restrict_repr_packed_field_ref_capture(\n             self.fcx.tcx,"}, {"sha": "aa902ad72622099a964ef2b3ae605c2646490371", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "patch": "@@ -69,7 +69,12 @@ pub trait Delegate<'tcx> {\n     }\n \n     /// The `place` should be a fake read because of specified `cause`.\n-    fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId);\n+    fn fake_read(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        cause: FakeReadCause,\n+        diag_expr_id: hir::HirId,\n+    );\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -327,7 +332,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     };\n \n                     self.delegate.fake_read(\n-                        discr_place.place.clone(),\n+                        &discr_place,\n                         FakeReadCause::ForMatchedPlace(closure_def_id),\n                         discr_place.hir_id,\n                     );\n@@ -617,7 +622,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         };\n \n         self.delegate.fake_read(\n-            discr_place.place.clone(),\n+            discr_place,\n             FakeReadCause::ForMatchedPlace(closure_def_id),\n             discr_place.hir_id,\n         );\n@@ -641,7 +646,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         };\n \n         self.delegate.fake_read(\n-            discr_place.place.clone(),\n+            discr_place,\n             FakeReadCause::ForLet(closure_def_id),\n             discr_place.hir_id,\n         );\n@@ -764,7 +769,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         );\n                     }\n                 };\n-                self.delegate.fake_read(fake_read.clone(), *cause, *hir_id);\n+                self.delegate.fake_read(\n+                    &PlaceWithHirId { place: fake_read.clone(), hir_id: *hir_id },\n+                    *cause,\n+                    *hir_id,\n+                );\n             }\n         }\n "}, {"sha": "86481edf76b0d392e5d0402788f556fcc6d41b27", "filename": "src/test/ui/generator/yielding-in-match-guards.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs?ref=5ba2e09bde735b4a5783fc1e6439f7d3bb00ff7d", "patch": "@@ -15,21 +15,21 @@\n async fn f() -> u8 { 1 }\n async fn foo() -> [bool; 10] { [false; 10] }\n \n-pub async fn g(x: u8) {\n-    match x {\n-        y if f().await == y => (),\n-        _ => (),\n-    }\n-}\n+// pub async fn g(x: u8) {\n+//     match x {\n+//         y if f().await == y => (),\n+//         _ => (),\n+//     }\n+// }\n \n // #78366: check the reference to the binding is recorded even if the binding is not autorefed\n \n-async fn h(x: usize) {\n-    match x {\n-        y if foo().await[y] => (),\n-        _ => (),\n-    }\n-}\n+// async fn h(x: usize) {\n+//     match x {\n+//         y if foo().await[y] => (),\n+//         _ => (),\n+//     }\n+// }\n \n async fn i(x: u8) {\n     match x {\n@@ -38,16 +38,16 @@ async fn i(x: u8) {\n     }\n }\n \n-async fn j(x: u8) {\n-    match x {\n-        y if let (1, 42) = (f().await, y) => (),\n-        _ => (),\n-    }\n-}\n+// async fn j(x: u8) {\n+//     match x {\n+//         y if let (1, 42) = (f().await, y) => (),\n+//         _ => (),\n+//     }\n+// }\n \n fn main() {\n-    let _ = g(10);\n-    let _ = h(9);\n+    // let _ = g(10);\n+    // let _ = h(9);\n     let _ = i(8);\n-    let _ = j(7);\n+    // let _ = j(7);\n }"}]}