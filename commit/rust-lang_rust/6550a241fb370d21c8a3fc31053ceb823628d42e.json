{"sha": "6550a241fb370d21c8a3fc31053ceb823628d42e", "node_id": "C_kwDOAAsO6NoAKDY1NTBhMjQxZmIzNzBkMjFjOGEzZmMzMTA1M2NlYjgyMzYyOGQ0MmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T14:11:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T14:11:26Z"}, "message": "More precise where keyword completions", "tree": {"sha": "ca1694ff7108bdc8c7d153ab5d550caee0db94e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca1694ff7108bdc8c7d153ab5d550caee0db94e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6550a241fb370d21c8a3fc31053ceb823628d42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6550a241fb370d21c8a3fc31053ceb823628d42e", "html_url": "https://github.com/rust-lang/rust/commit/6550a241fb370d21c8a3fc31053ceb823628d42e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6550a241fb370d21c8a3fc31053ceb823628d42e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c522669f00865c6bfc9160b2c810499ef8fa5552", "url": "https://api.github.com/repos/rust-lang/rust/commits/c522669f00865c6bfc9160b2c810499ef8fa5552", "html_url": "https://github.com/rust-lang/rust/commit/c522669f00865c6bfc9160b2c810499ef8fa5552"}], "stats": {"total": 184, "additions": 96, "deletions": 88}, "files": [{"sha": "aa0d04cf6cd06bc35e9d3fd13bca72da1d02a60a", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=6550a241fb370d21c8a3fc31053ceb823628d42e", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n     let in_block = matches!(kind, None);\n \n     'block: loop {\n-        if path_qualifier.is_some() {\n+        if ctx.is_non_trivial_path() {\n             break 'block;\n         }\n         if !in_trait_impl {"}, {"sha": "d6df5002f5dc8942af9e6fdd20f4d92d90b661b5", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=6550a241fb370d21c8a3fc31053ceb823628d42e", "patch": "@@ -2,35 +2,40 @@\n //! - `self`, `super` and `crate`, as these are considered part of path completions.\n //! - `await`, as this is a postfix completion we handle this in the postfix completions.\n \n+use syntax::ast::Item;\n+\n use crate::{\n-    context::{NameRefContext, PathKind},\n-    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+    context::NameRefContext, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n };\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n-    if matches!(ctx.nameref_ctx(), Some(NameRefContext { record_expr: Some(_), .. })) {\n-        cov_mark::hit!(no_keyword_completion_in_record_lit);\n-        return;\n-    }\n-    if ctx.is_non_trivial_path() {\n-        cov_mark::hit!(no_keyword_completion_in_non_trivial_path);\n-        return;\n-    }\n-    if ctx.pattern_ctx.is_some() {\n-        return;\n-    }\n+    let item = match ctx.nameref_ctx() {\n+        Some(NameRefContext { keyword: Some(item), record_expr: None, .. })\n+            if !ctx.is_non_trivial_path() =>\n+        {\n+            item\n+        }\n+        _ => return,\n+    };\n \n     let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n \n-    if let Some(PathKind::Vis { .. }) = ctx.path_kind() {\n-        return;\n-    }\n-    if ctx.has_unfinished_impl_or_trait_prev_sibling() {\n-        add_keyword(\"where\", \"where\");\n-        if ctx.has_impl_prev_sibling() {\n-            add_keyword(\"for\", \"for\");\n+    match item {\n+        Item::Impl(it) => {\n+            if it.for_token().is_none() && it.trait_().is_none() && it.self_ty().is_some() {\n+                add_keyword(\"for\", \"for\");\n+            }\n+            add_keyword(\"where\", \"where\");\n+        }\n+        Item::Enum(_)\n+        | Item::Fn(_)\n+        | Item::Struct(_)\n+        | Item::Trait(_)\n+        | Item::TypeAlias(_)\n+        | Item::Union(_) => {\n+            add_keyword(\"where\", \"where\");\n         }\n-        return;\n+        _ => (),\n     }\n }\n "}, {"sha": "ccc7c107468f7a9c5707ec77048e11659b0c7e6b", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=6550a241fb370d21c8a3fc31053ceb823628d42e", "patch": "@@ -185,6 +185,8 @@ pub(super) struct NameRefContext {\n     // FIXME: these fields are actually disjoint -> enum\n     pub(super) dot_access: Option<DotAccess>,\n     pub(super) path_ctx: Option<PathCompletionCtx>,\n+    /// Position where we are only interested in keyword completions\n+    pub(super) keyword: Option<ast::Item>,\n     /// The record expression this nameref is a field of\n     pub(super) record_expr: Option<(ast::RecordExpr, bool)>,\n }\n@@ -343,21 +345,6 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::RefExpr))\n     }\n \n-    /// Whether the cursor is right after a trait or impl header.\n-    /// trait Foo ident$0\n-    // FIXME: This probably shouldn't exist\n-    pub(crate) fn has_unfinished_impl_or_trait_prev_sibling(&self) -> bool {\n-        matches!(\n-            self.prev_sibling,\n-            Some(ImmediatePrevSibling::ImplDefType | ImmediatePrevSibling::TraitDefName)\n-        )\n-    }\n-\n-    // FIXME: This probably shouldn't exist\n-    pub(crate) fn has_impl_prev_sibling(&self) -> bool {\n-        matches!(self.prev_sibling, Some(ImmediatePrevSibling::ImplDefType))\n-    }\n-\n     pub(crate) fn after_if(&self) -> bool {\n         matches!(self.prev_sibling, Some(ImmediatePrevSibling::IfExpr))\n     }\n@@ -1092,8 +1079,13 @@ impl<'a> CompletionContext<'a> {\n     ) -> (NameRefContext, Option<PatternContext>) {\n         let nameref = find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n \n-        let mut nameref_ctx =\n-            NameRefContext { dot_access: None, path_ctx: None, nameref, record_expr: None };\n+        let mut nameref_ctx = NameRefContext {\n+            dot_access: None,\n+            path_ctx: None,\n+            nameref,\n+            record_expr: None,\n+            keyword: None,\n+        };\n \n         if let Some(record_field) = ast::RecordExprField::for_field_name(&name_ref) {\n             nameref_ctx.record_expr =\n@@ -1190,7 +1182,7 @@ impl<'a> CompletionContext<'a> {\n                 syntax::algo::non_trivia_sibling(node.into(), syntax::Direction::Prev)\n             {\n                 if let Some(item) = ast::Item::cast(n) {\n-                    match item {\n+                    let is_inbetween = match &item {\n                         ast::Item::Const(it) => it.body().is_none(),\n                         ast::Item::Enum(it) => it.variant_list().is_none(),\n                         ast::Item::ExternBlock(it) => it.extern_item_list().is_none(),\n@@ -1203,13 +1195,13 @@ impl<'a> CompletionContext<'a> {\n                         ast::Item::TypeAlias(it) => it.ty().is_none(),\n                         ast::Item::Union(it) => it.record_field_list().is_none(),\n                         _ => false,\n+                    };\n+                    if is_inbetween {\n+                        return Some(item);\n                     }\n-                } else {\n-                    false\n                 }\n-            } else {\n-                false\n             }\n+            None\n         };\n \n         let kind = path.syntax().ancestors().find_map(|it| {\n@@ -1222,7 +1214,8 @@ impl<'a> CompletionContext<'a> {\n                     ast::PathExpr(it) => {\n                         if let Some(p) = it.syntax().parent() {\n                             if ast::ExprStmt::can_cast(p.kind()) {\n-                                if inbetween_body_and_decl_check(p) {\n+                                if let Some(kind) = inbetween_body_and_decl_check(p) {\n+                                    nameref_ctx.keyword = Some(kind);\n                                     return Some(None);\n                                 }\n                             }\n@@ -1250,7 +1243,8 @@ impl<'a> CompletionContext<'a> {\n                         Some(PathKind::Pat)\n                     },\n                     ast::MacroCall(it) => {\n-                        if inbetween_body_and_decl_check(it.syntax().clone()) {\n+                        if let Some(kind) = inbetween_body_and_decl_check(it.syntax().clone()) {\n+                            nameref_ctx.keyword = Some(kind);\n                             return Some(None);\n                         }\n "}, {"sha": "34bfa4517cf970b801ebc68e3bb7a8fce18e56ec", "filename": "crates/ide-completion/src/patterns.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fpatterns.rs?ref=6550a241fb370d21c8a3fc31053ceb823628d42e", "patch": "@@ -21,8 +21,6 @@ use crate::tests::check_pattern_is_applicable;\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediatePrevSibling {\n     IfExpr,\n-    TraitDefName,\n-    ImplDefType,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -81,17 +79,6 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n                     }\n                 }\n             },\n-            ast::Trait(it) => if it.assoc_item_list().is_none() {\n-                    ImmediatePrevSibling::TraitDefName\n-                } else {\n-                    return None\n-            },\n-            ast::Impl(it) => if it.assoc_item_list().is_none()\n-                && (it.for_token().is_none() || it.self_ty().is_some()) {\n-                    ImmediatePrevSibling::ImplDefType\n-                } else {\n-                    return None\n-            },\n             _ => return None,\n         }\n     };\n@@ -342,22 +329,6 @@ mod tests {\n         check_location(r\"fn my_fn() { let x = &m$0 foo; }\", ImmediateLocation::RefExpr);\n     }\n \n-    #[test]\n-    fn test_impl_prev_sibling() {\n-        check_prev_sibling(r\"impl A w$0 \", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A w$0 {}\", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A for A w$0 \", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A for A w$0 {}\", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A for w$0 {}\", None);\n-        check_prev_sibling(r\"impl A for w$0\", None);\n-    }\n-\n-    #[test]\n-    fn test_trait_prev_sibling() {\n-        check_prev_sibling(r\"trait A w$0 \", ImmediatePrevSibling::TraitDefName);\n-        check_prev_sibling(r\"trait A w$0 {}\", ImmediatePrevSibling::TraitDefName);\n-    }\n-\n     #[test]\n     fn test_if_expr_prev_sibling() {\n         check_prev_sibling(r\"fn foo() { if true {} w$0\", ImmediatePrevSibling::IfExpr);"}, {"sha": "81303eb38f436b34d5c38f0a1a7faa647bcd67d9", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=6550a241fb370d21c8a3fc31053ceb823628d42e", "patch": "@@ -76,26 +76,66 @@ fn after_target_name_in_impl() {\n             kw where\n         \"#]],\n     );\n-    // FIXME: This should not emit `kw for`\n     check(\n-        r\"impl Trait for Type $0\",\n+        r\"impl Trait f$0\",\n         expect![[r#\"\n             kw for\n             kw where\n         \"#]],\n     );\n+    check(\n+        r\"impl Trait for Type $0\",\n+        expect![[r#\"\n+            kw where\n+        \"#]],\n+    );\n }\n \n #[test]\n-fn after_struct_name() {\n-    // FIXME: This should emit `kw where`\n-    check(r\"struct Struct $0\", expect![[r#\"\"#]]);\n-}\n-\n-#[test]\n-fn after_fn_name() {\n-    // FIXME: This should emit `kw where`\n-    check(r\"fn func() $0\", expect![[r#\"\"#]]);\n+fn completes_where() {\n+    check(\n+        r\"struct Struct $0\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"struct Struct $0 {}\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    // FIXME: This shouldn't be completed here\n+    check(\n+        r\"struct Struct $0 ()\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"fn func() $0\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"enum Enum $0\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"enum Enum $0 {}\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"trait Trait $0 {}\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n }\n \n #[test]"}, {"sha": "09ea78a3d504f8e5ee4c3119307ab82243a8526b", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=6550a241fb370d21c8a3fc31053ceb823628d42e", "patch": "@@ -108,7 +108,6 @@ fn in_item_list_after_attr() {\n \n #[test]\n fn in_qualified_path() {\n-    cov_mark::check!(no_keyword_completion_in_non_trivial_path);\n     check(\n         r#\"crate::$0\"#,\n         expect![[r#\""}, {"sha": "9369034cc629be0367e0e2d92170650fcabc8648", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6550a241fb370d21c8a3fc31053ceb823628d42e/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=6550a241fb370d21c8a3fc31053ceb823628d42e", "patch": "@@ -9,7 +9,6 @@ fn check(ra_fixture: &str, expect: Expect) {\n \n #[test]\n fn without_default_impl() {\n-    cov_mark::check!(no_keyword_completion_in_record_lit);\n     check(\n         r#\"\n struct Struct { foo: u32, bar: usize }"}]}