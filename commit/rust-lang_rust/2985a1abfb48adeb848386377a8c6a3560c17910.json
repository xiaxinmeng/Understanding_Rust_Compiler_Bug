{"sha": "2985a1abfb48adeb848386377a8c6a3560c17910", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODVhMWFiZmI0OGFkZWI4NDgzODYzNzdhOGM2YTM1NjBjMTc5MTA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-02-16T11:10:06Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-02-23T17:58:14Z"}, "message": "Report non-standard compile flags on ICE", "tree": {"sha": "4484fabc539f69ba17c3209599f86796a95fd490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4484fabc539f69ba17c3209599f86796a95fd490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2985a1abfb48adeb848386377a8c6a3560c17910", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJakFY4AAoJEOjBBC3RYkUZ1MgH/02g47EwKeWuKQgHcRJTh6jc\n+Gp+2hO9oIBE6HNVaooGf+EOzfNSunfLe0bB3FUQlbYcDX3ggKMNZVgY6TdJV+hT\nmuxipa3HxibEawCJfI4ea3FUHfHCLOl66YJJyxg9NiEMULI/i9jSAA6vjgW/4lgX\nDUYFM8ox991yLPLxThZxt818am1XTXq+Zhd1pDS6FmjOLTz5+8UHWxYyd2+4DyO5\n84g6HqMtqTb8vn1//fbH6uzUnGAWjfAu936lBeRD+EMPdvRQlA3Hqmm7oIdAuZ74\n1vVrfz4tnDzbGx666fy4vFbjN5loXcLTu1J2jKp2IlXMcX/s07SdzLrOyG3SQkc=\n=AM+p\n-----END PGP SIGNATURE-----", "payload": "tree 4484fabc539f69ba17c3209599f86796a95fd490\nparent 1670a532dd769763f1d6ad9e5d624ec31361a098\nauthor Pietro Albini <pietro@pietroalbini.org> 1518779406 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1519408694 +0100\n\nReport non-standard compile flags on ICE\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2985a1abfb48adeb848386377a8c6a3560c17910", "html_url": "https://github.com/rust-lang/rust/commit/2985a1abfb48adeb848386377a8c6a3560c17910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2985a1abfb48adeb848386377a8c6a3560c17910/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1670a532dd769763f1d6ad9e5d624ec31361a098", "url": "https://api.github.com/repos/rust-lang/rust/commits/1670a532dd769763f1d6ad9e5d624ec31361a098", "html_url": "https://github.com/rust-lang/rust/commit/1670a532dd769763f1d6ad9e5d624ec31361a098"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "8171d135cae38f871dc6e06f197e7ef00505ac26", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 80, "deletions": 5, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2985a1abfb48adeb848386377a8c6a3560c17910/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2985a1abfb48adeb848386377a8c6a3560c17910/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2985a1abfb48adeb848386377a8c6a3560c17910", "patch": "@@ -139,6 +139,19 @@ pub mod target_features {\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n+const ICE_REPORT_COMPILER_FLAGS: &'static [&'static str] = &[\n+    \"Z\",\n+    \"C\",\n+    \"crate-type\",\n+];\n+const ICE_REPORT_COMPILER_FLAGS_EXCLUDE: &'static [&'static str] = &[\n+    \"metadata\",\n+    \"extra-filename\",\n+];\n+const ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE: &'static [&'static str] = &[\n+    \"incremental\",\n+];\n+\n pub fn abort_on_err<T>(result: Result<T, CompileIncomplete>, sess: &Session) -> T {\n     match result {\n         Err(CompileIncomplete::Errored(ErrorReported)) => {\n@@ -1431,6 +1444,57 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n     thread.unwrap().join()\n }\n \n+/// Get a list of extra command-line flags provided by the user, as strings.\n+///\n+/// This function is used during ICEs to show more information useful for\n+/// debugging, since some ICEs only happens with non-default compiler flags\n+/// (and the users don't always report them).\n+fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n+    let mut args = Vec::new();\n+    for arg in env::args_os() {\n+        args.push(arg.to_string_lossy().to_string());\n+    }\n+\n+    let matches = if let Some(matches) = handle_options(&args) {\n+        matches\n+    } else {\n+        return None;\n+    };\n+\n+    let mut result = Vec::new();\n+    let mut excluded_cargo_defaults = false;\n+    for flag in ICE_REPORT_COMPILER_FLAGS {\n+        let prefix = if flag.len() == 1 { \"-\" } else { \"--\" };\n+\n+        for content in &matches.opt_strs(flag) {\n+            // Split always returns the first element\n+            let name = if let Some(first) = content.split('=').next() {\n+                first\n+            } else {\n+                &content\n+            };\n+\n+            let content = if ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.contains(&name) {\n+                name\n+            } else {\n+                content\n+            };\n+\n+            if !ICE_REPORT_COMPILER_FLAGS_EXCLUDE.contains(&name) {\n+                result.push(format!(\"{}{} {}\", prefix, flag, content));\n+            } else {\n+                excluded_cargo_defaults = true;\n+            }\n+        }\n+    }\n+\n+    if result.len() > 0 {\n+        Some((result, excluded_cargo_defaults))\n+    } else {\n+        None\n+    }\n+}\n+\n /// Run a procedure which will detect panics in the compiler and print nicer\n /// error messages rather than just failing the test.\n ///\n@@ -1462,11 +1526,22 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                              errors::Level::Bug);\n             }\n \n-            let xs = [\"the compiler unexpectedly panicked. this is a bug.\".to_string(),\n-                      format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL),\n-                      format!(\"rustc {} running on {}\",\n-                              option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n-                              config::host_triple())];\n+            let mut xs = vec![\n+                \"the compiler unexpectedly panicked. this is a bug.\".to_string(),\n+                format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL),\n+                format!(\"rustc {} running on {}\",\n+                        option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n+                        config::host_triple()),\n+            ];\n+\n+            if let Some((flags, excluded_cargo_defaults)) = extra_compiler_flags() {\n+                xs.push(format!(\"compiler flags: {}\", flags.join(\" \")));\n+\n+                if excluded_cargo_defaults {\n+                    xs.push(\"some of the compiler flags provided by cargo are hidden\".to_string());\n+                }\n+            }\n+\n             for note in &xs {\n                 handler.emit(&MultiSpan::new(),\n                              &note,"}]}