{"sha": "e8acf49088f90d8d4439c4034696bc4e5f8b4ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YWNmNDkwODhmOTBkOGQ0NDM5YzQwMzQ2OTZiYzRlNWY4YjRlZDk=", "commit": {"author": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-11T18:09:31Z"}, "committer": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-19T17:34:40Z"}, "message": "Fix a corner case when printing unaccounted time\n\nPreviously `ra_prof` wouldn't actually print the unaccounted time in\nsome cases.\n\nWe would print, for instance, this:\n```\n    5ms - foo\n        2ms - bar\n```\ninstead of:\n```\n    5ms - foo\n        2ms - bar\n        3ms - ???\n```\n\nThe fix is to properly handle the case when an entry has 0 children\ninstead of using the `last` variable.\n\nSigned-off-by: Michal Terepeta <michal.terepeta@gmail.com>", "tree": {"sha": "c88da3a3b0aa95f16c5a82c7c43f75c72792ab78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c88da3a3b0aa95f16c5a82c7c43f75c72792ab78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8acf49088f90d8d4439c4034696bc4e5f8b4ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8acf49088f90d8d4439c4034696bc4e5f8b4ed9", "html_url": "https://github.com/rust-lang/rust/commit/e8acf49088f90d8d4439c4034696bc4e5f8b4ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8acf49088f90d8d4439c4034696bc4e5f8b4ed9/comments", "author": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7724e44181ccd5c248589538bd82458b5a9407", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7724e44181ccd5c248589538bd82458b5a9407", "html_url": "https://github.com/rust-lang/rust/commit/3a7724e44181ccd5c248589538bd82458b5a9407"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "da541005a1bb2dc0567d2a35fd320bebbe1a72ba", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e8acf49088f90d8d4439c4034696bc4e5f8b4ed9/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8acf49088f90d8d4439c4034696bc4e5f8b4ed9/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=e8acf49088f90d8d4439c4034696bc4e5f8b4ed9", "patch": "@@ -219,7 +219,11 @@ fn print(\n     longer_than: Duration,\n     total: Option<Duration>,\n ) {\n-    let mut last = 0;\n+    if msgs.is_empty() {\n+        return;\n+    }\n+    // The index of the first element that will be included in the slice when we recurse.\n+    let mut next_start = 0;\n     let indent = repeat(\"    \").take(lvl).collect::<String>();\n     // We output hierarchy for long calls, but sum up all short calls\n     let mut short = Vec::new();\n@@ -233,12 +237,12 @@ fn print(\n             writeln!(out, \"{}{:5}ms - {}\", indent, duration.as_millis(), msg)\n                 .expect(\"printing profiling info to stdout\");\n \n-            print(lvl + 1, &msgs[last..i], out, longer_than, Some(duration));\n+            print(lvl + 1, &msgs[next_start..i], out, longer_than, Some(duration));\n         } else {\n             short.push((msg, duration))\n         }\n \n-        last = i;\n+        next_start = i + 1;\n     }\n     short.sort_by_key(|(msg, _time)| *msg);\n     for (msg, entires) in short.iter().group_by(|(msg, _time)| msg).into_iter() {\n@@ -255,7 +259,7 @@ fn print(\n     if let Some(total) = total {\n         if let Some(unaccounted) = total.checked_sub(accounted_for) {\n             let unaccounted_millis = unaccounted.as_millis();\n-            if unaccounted_millis > longer_than.as_millis() && unaccounted_millis > 0 && last > 0 {\n+            if unaccounted_millis > longer_than.as_millis() && unaccounted_millis > 0 {\n                 writeln!(out, \"{}{:5}ms - ???\", indent, unaccounted_millis)\n                     .expect(\"printing profiling info to stdout\");\n             }\n@@ -377,4 +381,48 @@ mod tests {\n             \"    1ms - foo\\n        0ms - bar (2 calls)\\n\"\n         );\n     }\n+\n+    #[test]\n+    fn test_unaccounted_for_topmost() {\n+        let mut result = vec![];\n+        let msgs = vec![\n+            Message { level: 1, duration: Duration::from_millis(2), message: \"bar\".to_owned() },\n+            Message { level: 0, duration: Duration::from_millis(5), message: \"foo\".to_owned() },\n+        ];\n+        print(0, &msgs, &mut result, Duration::from_millis(0), Some(Duration::from_millis(1)));\n+        assert_eq!(\n+            std::str::from_utf8(&result).unwrap().lines().collect::<Vec<_>>(),\n+            vec![\n+                \"    5ms - foo\",\n+                \"        2ms - bar\",\n+                \"        3ms - ???\",\n+                // Dummy comment to improve formatting\n+            ]\n+        );\n+    }\n+\n+    #[test]\n+    fn test_unaccounted_for_multiple_levels() {\n+        let mut result = vec![];\n+        let msgs = vec![\n+            Message { level: 2, duration: Duration::from_millis(3), message: \"baz\".to_owned() },\n+            Message { level: 1, duration: Duration::from_millis(5), message: \"bar\".to_owned() },\n+            Message { level: 2, duration: Duration::from_millis(2), message: \"baz\".to_owned() },\n+            Message { level: 1, duration: Duration::from_millis(4), message: \"bar\".to_owned() },\n+            Message { level: 0, duration: Duration::from_millis(9), message: \"foo\".to_owned() },\n+        ];\n+        print(0, &msgs, &mut result, Duration::from_millis(0), None);\n+        assert_eq!(\n+            std::str::from_utf8(&result).unwrap().lines().collect::<Vec<_>>(),\n+            vec![\n+                \"    9ms - foo\",\n+                \"        5ms - bar\",\n+                \"            3ms - baz\",\n+                \"            2ms - ???\",\n+                \"        4ms - bar\",\n+                \"            2ms - baz\",\n+                \"            2ms - ???\",\n+            ]\n+        );\n+    }\n }"}]}