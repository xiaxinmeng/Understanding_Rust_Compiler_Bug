{"sha": "bbfec7ca41887af04abb4510677c4539a95f03a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZmVjN2NhNDE4ODdhZjA0YWJiNDUxMDY3N2M0NTM5YTk1ZjAzYTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-29T01:16:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T01:16:24Z"}, "message": "Rollup merge of #69567 - matthiaskrgr:useless_fmt, r=nagisa\n\nuse .to_string() instead of format!() macro to create strings\n\nhandles what is left after https://github.com/rust-lang/rust/pull/69541", "tree": {"sha": "beca90f2df096a812f1015ada4f9d9638cd73849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beca90f2df096a812f1015ada4f9d9638cd73849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbfec7ca41887af04abb4510677c4539a95f03a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWbtoCRBK7hj4Ov3rIwAAdHIIAIzYp+0IR7W+4vBzR9HMFZKR\nS2rLc86REo44U+y0TVXW6wKxn7GV76nlxHu3oBLVBFL3JvgXba2b65sYXewusW6d\n5hZ2PLGTwdyeJ4n0qyymAkuef/5yPI74GNW6QpARvjlBL65Ue1M13W6DrE1vWxAI\nNvrCQiLqkSJ2NSw2GXQinilY0sQSOfma7LOjaJbEAs4t+j3qxOV2boiCUqP0rmsp\nF4XmV24VtPj6j8RI0sg3/ecsD+K+bhR3r//U6ysoQFIkiL7mkhVZd7RTV80FnluO\nPmi/XqW3Z7IXrxLpXwLoHcdPHqr9B/WDcGRdwJzeV2Q5Wd+hEtwYFJzRrPKnpKw=\n=3pys\n-----END PGP SIGNATURE-----\n", "payload": "tree beca90f2df096a812f1015ada4f9d9638cd73849\nparent 1bb6760968b92acee0a1f9f7d84fa10805157b59\nparent 85e59b7664734b3fb0122aa8d341ed7e878569c1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582938984 +0100\ncommitter GitHub <noreply@github.com> 1582938984 +0100\n\nRollup merge of #69567 - matthiaskrgr:useless_fmt, r=nagisa\n\nuse .to_string() instead of format!() macro to create strings\n\nhandles what is left after https://github.com/rust-lang/rust/pull/69541\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbfec7ca41887af04abb4510677c4539a95f03a2", "html_url": "https://github.com/rust-lang/rust/commit/bbfec7ca41887af04abb4510677c4539a95f03a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbfec7ca41887af04abb4510677c4539a95f03a2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb6760968b92acee0a1f9f7d84fa10805157b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb6760968b92acee0a1f9f7d84fa10805157b59", "html_url": "https://github.com/rust-lang/rust/commit/1bb6760968b92acee0a1f9f7d84fa10805157b59"}, {"sha": "85e59b7664734b3fb0122aa8d341ed7e878569c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e59b7664734b3fb0122aa8d341ed7e878569c1", "html_url": "https://github.com/rust-lang/rust/commit/85e59b7664734b3fb0122aa8d341ed7e878569c1"}], "stats": {"total": 89, "additions": 44, "deletions": 45}, "files": [{"sha": "f3249f5014d5a4bfee2ea785f21b409c97726b7a", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -18,7 +18,7 @@ use std::borrow::Cow;\n \n fn describe_as_module(def_id: DefId, tcx: TyCtxt<'_>) -> String {\n     if def_id.is_top_level_module() {\n-        format!(\"top-level module\")\n+        \"top-level module\".to_string()\n     } else {\n         format!(\"module `{}`\", tcx.def_path_str(def_id))\n     }"}, {"sha": "e8deee5b1f322628d015a3cadb64b08403a8040e", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -53,7 +53,7 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n                     err.span_suggestion(\n                         span,\n                         \"consider removing the prefix\",\n-                        format!(\"{}\", &lint_str[1..]),\n+                        lint_str[1..].to_string(),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}, {"sha": "1cc5daafed14ebdd19a35e0bf21ff07da1c9c0fe", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -167,17 +167,17 @@ impl Diagnostic {\n         found: DiagnosticStyledString,\n     ) -> &mut Self {\n         let mut msg: Vec<_> =\n-            vec![(format!(\"required when trying to coerce from type `\"), Style::NoStyle)];\n+            vec![(\"required when trying to coerce from type `\".to_string(), Style::NoStyle)];\n         msg.extend(expected.0.iter().map(|x| match *x {\n             StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n             StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n         }));\n-        msg.push((format!(\"` to type '\"), Style::NoStyle));\n+        msg.push((\"` to type '\".to_string(), Style::NoStyle));\n         msg.extend(found.0.iter().map(|x| match *x {\n             StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n             StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n         }));\n-        msg.push((format!(\"`\"), Style::NoStyle));\n+        msg.push((\"`\".to_string(), Style::NoStyle));\n \n         // For now, just attach these as notes\n         self.highlighted_note(msg);"}, {"sha": "bd133738db7ab153a49ab8202d492dffcad6ee45", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -143,7 +143,7 @@ pub(super) fn note_and_explain_region(\n         // uh oh, hope no user ever sees THIS\n         ty::ReEmpty(ui) => (format!(\"the empty lifetime in universe {:?}\", ui), None),\n \n-        ty::RePlaceholder(_) => (format!(\"any other region\"), None),\n+        ty::RePlaceholder(_) => (\"any other region\".to_string(), None),\n \n         // FIXME(#13998) RePlaceholder should probably print like\n         // ReFree rather than dumping Debug output on the user."}, {"sha": "4d03f4579fd2e617c0f146c847038bf8db1c8e30", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -1919,21 +1919,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n             use rustc::ty::TyKind::*;\n             match ty.kind {\n                 // Primitive types that don't like 0 as a value.\n-                Ref(..) => Some((format!(\"references must be non-null\"), None)),\n-                Adt(..) if ty.is_box() => Some((format!(\"`Box` must be non-null\"), None)),\n-                FnPtr(..) => Some((format!(\"function pointers must be non-null\"), None)),\n-                Never => Some((format!(\"the `!` type has no valid value\"), None)),\n+                Ref(..) => Some((\"references must be non-null\".to_string(), None)),\n+                Adt(..) if ty.is_box() => Some((\"`Box` must be non-null\".to_string(), None)),\n+                FnPtr(..) => Some((\"function pointers must be non-null\".to_string(), None)),\n+                Never => Some((\"the `!` type has no valid value\".to_string(), None)),\n                 RawPtr(tm) if matches!(tm.ty.kind, Dynamic(..)) =>\n                 // raw ptr to dyn Trait\n                 {\n-                    Some((format!(\"the vtable of a wide raw pointer must be non-null\"), None))\n+                    Some((\"the vtable of a wide raw pointer must be non-null\".to_string(), None))\n                 }\n                 // Primitive types with other constraints.\n                 Bool if init == InitKind::Uninit => {\n-                    Some((format!(\"booleans must be either `true` or `false`\"), None))\n+                    Some((\"booleans must be either `true` or `false`\".to_string(), None))\n                 }\n                 Char if init == InitKind::Uninit => {\n-                    Some((format!(\"characters must be a valid Unicode codepoint\"), None))\n+                    Some((\"characters must be a valid Unicode codepoint\".to_string(), None))\n                 }\n                 // Recurse and checks for some compound types.\n                 Adt(adt_def, substs) if !adt_def.is_union() => {\n@@ -1961,7 +1961,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                     }\n                     // Now, recurse.\n                     match adt_def.variants.len() {\n-                        0 => Some((format!(\"enums with no variants have no valid value\"), None)),\n+                        0 => Some((\"enums with no variants have no valid value\".to_string(), None)),\n                         1 => {\n                             // Struct, or enum with exactly one variant.\n                             // Proceed recursively, check all fields."}, {"sha": "6901a66b1ce5c93b5617f1d049c06c5e47e7887a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -83,9 +83,9 @@ fn lint_overflowing_range_endpoint<'a, 'tcx>(\n                     // We need to preserve the literal's suffix,\n                     // as it may determine typing information.\n                     let suffix = match lit.node {\n-                        LitKind::Int(_, LitIntType::Signed(s)) => format!(\"{}\", s.name_str()),\n-                        LitKind::Int(_, LitIntType::Unsigned(s)) => format!(\"{}\", s.name_str()),\n-                        LitKind::Int(_, LitIntType::Unsuffixed) => \"\".to_owned(),\n+                        LitKind::Int(_, LitIntType::Signed(s)) => s.name_str().to_string(),\n+                        LitKind::Int(_, LitIntType::Unsigned(s)) => s.name_str().to_string(),\n+                        LitKind::Int(_, LitIntType::Unsuffixed) => \"\".to_string(),\n                         _ => bug!(),\n                     };\n                     let suggestion = format!(\"{}..={}{}\", start, lit_val - 1, suffix);"}, {"sha": "cd6834a5a4d00b10ecfaf358c506e2fab2337bb5", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -619,14 +619,14 @@ pub(super) enum BorrowedContentSource<'tcx> {\n impl BorrowedContentSource<'tcx> {\n     pub(super) fn describe_for_unnamed_place(&self) -> String {\n         match *self {\n-            BorrowedContentSource::DerefRawPointer => format!(\"a raw pointer\"),\n-            BorrowedContentSource::DerefSharedRef => format!(\"a shared reference\"),\n-            BorrowedContentSource::DerefMutableRef => format!(\"a mutable reference\"),\n+            BorrowedContentSource::DerefRawPointer => \"a raw pointer\".to_string(),\n+            BorrowedContentSource::DerefSharedRef => \"a shared reference\".to_string(),\n+            BorrowedContentSource::DerefMutableRef => \"a mutable reference\".to_string(),\n             BorrowedContentSource::OverloadedDeref(ty) => {\n                 if ty.is_rc() {\n-                    format!(\"an `Rc`\")\n+                    \"an `Rc`\".to_string()\n                 } else if ty.is_arc() {\n-                    format!(\"an `Arc`\")\n+                    \"an `Arc`\".to_string()\n                 } else {\n                     format!(\"dereference of `{}`\", ty)\n                 }\n@@ -649,16 +649,16 @@ impl BorrowedContentSource<'tcx> {\n \n     pub(super) fn describe_for_immutable_place(&self) -> String {\n         match *self {\n-            BorrowedContentSource::DerefRawPointer => format!(\"a `*const` pointer\"),\n-            BorrowedContentSource::DerefSharedRef => format!(\"a `&` reference\"),\n+            BorrowedContentSource::DerefRawPointer => \"a `*const` pointer\".to_string(),\n+            BorrowedContentSource::DerefSharedRef => \"a `&` reference\".to_string(),\n             BorrowedContentSource::DerefMutableRef => {\n                 bug!(\"describe_for_immutable_place: DerefMutableRef isn't immutable\")\n             }\n             BorrowedContentSource::OverloadedDeref(ty) => {\n                 if ty.is_rc() {\n-                    format!(\"an `Rc`\")\n+                    \"an `Rc`\".to_string()\n                 } else if ty.is_arc() {\n-                    format!(\"an `Arc`\")\n+                    \"an `Arc`\".to_string()\n                 } else {\n                     format!(\"a dereference of `{}`\", ty)\n                 }"}, {"sha": "27f0c0f1e472a188cb372331656973d2ce4f3c42", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let place_ty = move_from.ty(*self.body, self.infcx.tcx).ty;\n                     let place_desc = match self.describe_place(move_from.as_ref()) {\n                         Some(desc) => format!(\"`{}`\", desc),\n-                        None => format!(\"value\"),\n+                        None => \"value\".to_string(),\n                     };\n \n                     self.note_type_does_not_implement_copy(err, &place_desc, place_ty, Some(span));\n@@ -466,7 +466,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let place_ty = original_path.ty(*self.body, self.infcx.tcx).ty;\n                 let place_desc = match self.describe_place(original_path.as_ref()) {\n                     Some(desc) => format!(\"`{}`\", desc),\n-                    None => format!(\"value\"),\n+                    None => \"value\".to_string(),\n                 };\n                 self.note_type_does_not_implement_copy(err, &place_desc, place_ty, Some(span));\n "}, {"sha": "6fd8f06fe8f25c4ba35ec39ea4cf8b892dc3ec49", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -477,7 +477,7 @@ fn write_scope_tree(\n         indented_decl.push_str(\";\");\n \n         let local_name =\n-            if local == RETURN_PLACE { format!(\" return place\") } else { String::new() };\n+            if local == RETURN_PLACE { \" return place\".to_string() } else { String::new() };\n \n         writeln!(\n             w,"}, {"sha": "4dc2f77517321da8bdf5287e46c62dd00fc7fdb0", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -216,7 +216,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 seq_span,\n                 \"...or a vertical bar to match on multiple alternatives\",\n-                format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n+                seq_snippet.replace(\",\", \" |\"),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "d713a82fd887e4a9b53b5e8d27bddf4675f527ab", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -35,7 +35,7 @@ impl NonConstExpr {\n         match self {\n             Self::Loop(src) => format!(\"`{}`\", src.name()),\n             Self::Match(src) => format!(\"`{}`\", src.name()),\n-            Self::OrPattern => format!(\"or-pattern\"),\n+            Self::OrPattern => \"or-pattern\".to_string(),\n         }\n     }\n "}, {"sha": "d08ae3040bda7410783f3476be7313cc3cdd7d6d", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -98,7 +98,7 @@ impl<'a> Resolver<'a> {\n                     E0401,\n                     \"can't use generic parameters from outer function\",\n                 );\n-                err.span_label(span, format!(\"use of generic parameter from outer function\"));\n+                err.span_label(span, \"use of generic parameter from outer function\".to_string());\n \n                 let sm = self.session.source_map();\n                 match outer_res {\n@@ -155,7 +155,8 @@ impl<'a> Resolver<'a> {\n                     } else if let Some(sp) = sm.generate_fn_name_span(span) {\n                         err.span_label(\n                             sp,\n-                            format!(\"try adding a local generic parameter in this method instead\"),\n+                            \"try adding a local generic parameter in this method instead\"\n+                                .to_string(),\n                         );\n                     } else {\n                         err.help(\"try using a local generic parameter instead\");"}, {"sha": "b7ac8fbe4eba700e72c5659309cdb89c69bd8616", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -177,7 +177,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n             err.code(rustc_errors::error_code!(E0411));\n             err.span_label(\n                 span,\n-                format!(\"`Self` is only available in impls, traits, and type definitions\"),\n+                \"`Self` is only available in impls, traits, and type definitions\".to_string(),\n             );\n             return (err, Vec::new());\n         }\n@@ -186,12 +186,10 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n             err.code(rustc_errors::error_code!(E0424));\n             err.span_label(span, match source {\n-                PathSource::Pat => format!(\n-                    \"`self` value is a keyword and may not be bound to variables or shadowed\",\n-                ),\n-                _ => format!(\n-                    \"`self` value is a keyword only available in methods with a `self` parameter\",\n-                ),\n+                PathSource::Pat => \"`self` value is a keyword and may not be bound to variables or shadowed\"\n+                                   .to_string(),\n+                _ => \"`self` value is a keyword only available in methods with a `self` parameter\"\n+                     .to_string(),\n             });\n             if let Some(span) = &self.diagnostic_metadata.current_function {\n                 err.span_label(*span, \"this function doesn't have a `self` parameter\");\n@@ -558,7 +556,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     if is_expected(ctor_def) && !accessible_ctor {\n                         err.span_label(\n                             span,\n-                            format!(\"constructor is not visible here due to private fields\"),\n+                            \"constructor is not visible here due to private fields\".to_string(),\n                         );\n                     }\n                 } else {"}, {"sha": "b2db02d53c4978a934d01ff5ec1b9dbd1e1fde54", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -605,7 +605,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 if lstring.starts_with('&') {\n                                     // let a = String::new();\n                                     // let _ = &a + \"bar\";\n-                                    format!(\"{}\", &lstring[1..])\n+                                    lstring[1..].to_string()\n                                 } else {\n                                     format!(\"{}.to_owned()\", lstring)\n                                 },\n@@ -633,7 +633,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let to_string = if l.starts_with('&') {\n                             // let a = String::new(); let b = String::new();\n                             // let _ = &a + b;\n-                            format!(\"{}\", &l[1..])\n+                            l[1..].to_string()\n                         } else {\n                             format!(\"{}.to_owned()\", l)\n                         };"}, {"sha": "252abaee747f540541c41f041701388d5373f3c5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfec7ca41887af04abb4510677c4539a95f03a2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bbfec7ca41887af04abb4510677c4539a95f03a2", "patch": "@@ -160,7 +160,7 @@ crate fn placeholder_type_error(\n     }) {\n         // Account for `_` already present in cases like `struct S<_>(_);` and suggest\n         // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n-        sugg.push((arg.span, format!(\"{}\", type_name)));\n+        sugg.push((arg.span, type_name.to_string()));\n     } else {\n         sugg.push((\n             generics.iter().last().unwrap().span.shrink_to_hi(),\n@@ -475,7 +475,7 @@ fn get_new_lifetime_name<'tcx>(\n \n     let a_to_z_repeat_n = |n| {\n         (b'a'..=b'z').map(move |c| {\n-            let mut s = format!(\"'\");\n+            let mut s = '\\''.to_string();\n             s.extend(std::iter::repeat(char::from(c)).take(n));\n             s\n         })"}]}