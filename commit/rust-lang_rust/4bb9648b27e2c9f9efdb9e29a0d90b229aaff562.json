{"sha": "4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjk2NDhiMjdlMmM5ZjllZmRiOWUyOWEwZDkwYjIyOWFhZmY1NjI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-25T18:53:02Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-28T09:04:25Z"}, "message": "Merge `ConstVal` and `ConstValue`", "tree": {"sha": "396538df8e178c1d5ddc1359a399651fc1373c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/396538df8e178c1d5ddc1359a399651fc1373c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "html_url": "https://github.com/rust-lang/rust/commit/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "221a499bf111c02f0d2cffa3ffa520d842d1877d", "url": "https://api.github.com/repos/rust-lang/rust/commits/221a499bf111c02f0d2cffa3ffa520d842d1877d", "html_url": "https://github.com/rust-lang/rust/commit/221a499bf111c02f0d2cffa3ffa520d842d1877d"}], "stats": {"total": 539, "additions": 201, "deletions": 338}, "files": [{"sha": "6cc61d748001a191f9bf4428080f1881dc2f285e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -60,7 +60,7 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use mir::interpret::{GlobalId, ConstValue};\n+use mir::interpret::GlobalId;\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use hir::map::DefPathHash;\n use hir::{HirId, ItemLocalId};\n@@ -75,7 +75,7 @@ use traits::query::{\n     CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n-         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n+         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty, self};\n use ty::subst::Substs;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n@@ -632,7 +632,7 @@ define_dep_nodes!( <'tcx>\n     // queries). Making them anonymous avoids hashing the result, which\n     // may save a bit of time.\n     [anon] EraseRegionsTy { ty: Ty<'tcx> },\n-    [anon] ConstValueToAllocation { val: ConstValue<'tcx>, ty: Ty<'tcx> },\n+    [anon] ConstValueToAllocation { val: &'tcx ty::Const<'tcx> },\n \n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),"}, {"sha": "4eb677732c2a2d66378b5eea581904ff29ac9377", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -370,11 +370,11 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::FieldDef {\n }\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::mir::interpret::ConstVal<'gcx> {\n+for ::mir::interpret::ConstValue<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use mir::interpret::ConstVal::*;\n+        use mir::interpret::ConstValue::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n@@ -383,23 +383,6 @@ for ::mir::interpret::ConstVal<'gcx> {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n-            Value(ref value) => {\n-                value.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::mir::interpret::ConstValue<'gcx> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        use mir::interpret::ConstValue::*;\n-\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n             Scalar(val) => {\n                 val.hash_stable(hcx, hasher);\n             }"}, {"sha": "3291d6bf1521f43b6a81bde9701be78a022effb4", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -11,25 +11,15 @@ use super::{\n \n use backtrace::Backtrace;\n \n-\n-use hir::def_id::DefId;\n use ty;\n-use ty::subst::Substs;\n use ty::query::TyCtxtAt;\n-use mir::interpret::ConstValue;\n use errors::DiagnosticBuilder;\n \n use syntax_pos::Span;\n use syntax::ast;\n \n pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>;\n \n-#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n-pub enum ConstVal<'tcx> {\n-    Unevaluated(DefId, &'tcx Substs<'tcx>),\n-    Value(ConstValue<'tcx>),\n-}\n-\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,"}, {"sha": "018c2446054be5080f2870d1804f3a32be31d171", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -9,7 +9,7 @@ mod error;\n mod value;\n \n pub use self::error::{\n-    EvalError, EvalResult, EvalErrorKind, AssertMessage, ConstVal, ConstEvalErr, struct_error,\n+    EvalError, EvalResult, EvalErrorKind, AssertMessage, ConstEvalErr, struct_error,\n     FrameInfo, ConstEvalResult,\n };\n "}, {"sha": "24595c9328208a2a1183e1b11baad07ec9f11f17", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -2,13 +2,19 @@\n \n use ty::layout::{Align, HasDataLayout, Size};\n use ty;\n+use ty::subst::Substs;\n+use hir::def_id::DefId;\n \n use super::{EvalResult, Pointer, PointerArithmetic, Allocation};\n \n /// Represents a constant value in Rust. ByVal and ScalarPair are optimizations which\n /// matches Value's optimizations for easy conversions between these two types\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n+    /// Never returned from the `const_eval` query, but the HIR contains these frequently in order\n+    /// to allow HIR creation to happen for everything before needing to be able to run constant\n+    /// evaluation\n+    Unevaluated(DefId, &'tcx Substs<'tcx>),\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs which use Scalar::undef()\n     Scalar(Scalar),\n     /// Used only for types with layout::abi::ScalarPair\n@@ -30,6 +36,7 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn to_byval_value(&self) -> Option<Value> {\n         match *self {\n+            ConstValue::Unevaluated(..) |\n             ConstValue::ByRef(..) => None,\n             ConstValue::ScalarPair(a, b) => Some(Value::ScalarPair(a, b)),\n             ConstValue::Scalar(val) => Some(Value::Scalar(val)),\n@@ -44,7 +51,8 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn to_scalar(&self) -> Option<Scalar> {\n         match *self {\n-            ConstValue::ByRef(..) => None,\n+            ConstValue::Unevaluated(..) |\n+            ConstValue::ByRef(..) |\n             ConstValue::ScalarPair(..) => None,\n             ConstValue::Scalar(val) => Some(val),\n         }"}, {"sha": "2198e3f6b318ef1c60f2f4af577a818eff50bd41", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -2162,18 +2162,12 @@ impl<'tcx> Debug for Literal<'tcx> {\n     }\n }\n \n-/// Write a `ConstVal` in a way closer to the original source code than the `Debug` output.\n+/// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ty::Const) -> fmt::Result {\n-    use mir::interpret::ConstVal;\n-    match const_val.val {\n-        ConstVal::Unevaluated(..) => write!(fmt, \"{:?}\", const_val),\n-        ConstVal::Value(val) => {\n-            if let Some(value) = val.to_byval_value() {\n-                print_miri_value(value, const_val.ty, fmt)\n-            } else {\n-                write!(fmt, \"{:?}:{}\", val, const_val.ty)\n-            }\n-        }\n+    if let Some(value) = const_val.to_byval_value() {\n+        print_miri_value(value, const_val.ty, fmt)\n+    } else {\n+        write!(fmt, \"{:?}:{}\", const_val.val, const_val.ty)\n     }\n }\n "}, {"sha": "c49bcbf8f03163ed828571cda76cb25fdac8e618", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -28,7 +28,7 @@ use super::util;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use infer::type_variable::TypeVariableOrigin;\n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::symbol::Symbol;\n@@ -426,7 +426,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n+        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.selcx.tcx().global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_skol() {"}, {"sha": "bc2f1b7f6c7c8e13cc8f29479dff2df72ca0a8f6", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -194,7 +194,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n+        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.infcx.tcx.global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_skol() {"}, {"sha": "3718c436b3a0019fa5d42321449c0b1debabf39c", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use ty::subst::Substs;\n use ty::{self, Ty, TypeFlags, TypeFoldable};\n \n@@ -233,12 +233,9 @@ impl FlagComputation {\n \n     fn add_const(&mut self, constant: &ty::Const) {\n         self.add_ty(constant.ty);\n-        match constant.val {\n-            ConstVal::Value(_) => {}\n-            ConstVal::Unevaluated(_, substs) => {\n-                self.add_flags(TypeFlags::HAS_PROJECTION);\n-                self.add_substs(substs);\n-            }\n+        if let ConstValue::Unevaluated(_, substs) = constant.val {\n+            self.add_flags(TypeFlags::HAS_PROJECTION);\n+            self.add_substs(substs);\n         }\n     }\n "}, {"sha": "f55a512908499a4b7817bea0b576ec1414d8dabc", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -39,7 +39,7 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use hir::def_id::DefId;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n@@ -685,7 +685,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n-        if let ConstVal::Unevaluated(..) = c.val {\n+        if let ConstValue::Unevaluated(..) = c.val {\n             let projection_flags = TypeFlags::HAS_NORMALIZABLE_PROJECTION |\n                 TypeFlags::HAS_PROJECTION;\n             if projection_flags.intersects(self.flags) {"}, {"sha": "229caeb95d62105d77a15051c6edacfeac18ef2e", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -11,7 +11,7 @@\n use dep_graph::SerializedDepNodeIndex;\n use dep_graph::DepNode;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n-use mir::interpret::{GlobalId, ConstValue};\n+use mir::interpret::GlobalId;\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n     CanonicalTypeOpNormalizeGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n@@ -191,8 +191,8 @@ impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_value_to_allocation<'tcx> {\n-    fn describe(_tcx: TyCtxt, (val, ty): (ConstValue<'tcx>, Ty<'tcx>)) -> String {\n-        format!(\"converting value `{:?}` ({}) to an allocation\", val, ty)\n+    fn describe(_tcx: TyCtxt, val: &'tcx ty::Const<'tcx>) -> String {\n+        format!(\"converting value `{:?}` to an allocation\", val)\n     }\n }\n "}, {"sha": "8423b02ee7582d2e73f74f30ba285592aeffba3b", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     }\n }\n \n-impl<'tcx> Key for (mir::interpret::ConstValue<'tcx>, Ty<'tcx>) {\n+impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "77644cdf02b116d63e173a9d5c9f97916da3941c", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -29,7 +29,7 @@ use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n use mir::interpret::ConstEvalResult;\n use mir::mono::{CodegenUnit, Stats};\n use mir;\n-use mir::interpret::{GlobalId, Allocation, ConstValue};\n+use mir::interpret::{GlobalId, Allocation};\n use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n@@ -234,7 +234,7 @@ define_queries! { <'tcx>\n \n     /// Converts a constant value to an constant allocation\n     [] fn const_value_to_allocation: const_value_to_allocation(\n-        (ConstValue<'tcx>, Ty<'tcx>)\n+        &'tcx ty::Const<'tcx>\n     ) -> &'tcx Allocation,\n \n     [] fn check_match: CheckMatch(DefId)\n@@ -570,9 +570,9 @@ fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n }\n \n fn const_value_to_allocation<'tcx>(\n-    (val, ty): (ConstValue<'tcx>, Ty<'tcx>)\n+    val: &'tcx ty::Const<'tcx>,\n ) -> DepConstructor<'tcx> {\n-    DepConstructor::ConstValueToAllocation { val, ty }\n+    DepConstructor::ConstValueToAllocation { val }\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "265c6aee397266a298e134c19063f4b7719db234", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -14,7 +14,7 @@\n //! type equality, etc.\n \n use hir::def_id::DefId;\n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use ty::subst::{Kind, UnpackedKind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n@@ -474,7 +474,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                     return Ok(s);\n                 }\n                 match x.val {\n-                    ConstVal::Unevaluated(def_id, substs) => {\n+                    ConstValue::Unevaluated(def_id, substs) => {\n                         // FIXME(eddyb) get the right param_env.\n                         let param_env = ty::ParamEnv::empty();\n                         match tcx.lift_to_global(&substs) {"}, {"sha": "a648dc6e7e7880a166b002760c3b6d4604c2ee2b", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -13,7 +13,7 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use mir::interpret::{ConstVal, ConstEvalErr};\n+use mir::interpret::{ConstValue, ConstEvalErr};\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n@@ -1127,20 +1127,24 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ConstVal<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n-            ConstVal::Value(v) => ConstVal::Value(v),\n-            ConstVal::Unevaluated(def_id, substs) => {\n-                ConstVal::Unevaluated(def_id, substs.fold_with(folder))\n+            ConstValue::Scalar(v) => ConstValue::Scalar(v),\n+            ConstValue::ScalarPair(a, b) => ConstValue::ScalarPair(a, b),\n+            ConstValue::ByRef(alloc, offset) => ConstValue::ByRef(alloc, offset),\n+            ConstValue::Unevaluated(def_id, substs) => {\n+                ConstValue::Unevaluated(def_id, substs.fold_with(folder))\n             }\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n-            ConstVal::Value(_) => false,\n-            ConstVal::Unevaluated(_, substs) => substs.visit_with(visitor),\n+            ConstValue::Scalar(_) |\n+            ConstValue::ScalarPair(_, _) |\n+            ConstValue::ByRef(_, _) => false,\n+            ConstValue::Unevaluated(_, substs) => substs.visit_with(visitor),\n         }\n     }\n }"}, {"sha": "b9446621eae6ca7a7ce14eb63fbca0fc83e623af", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -12,15 +12,15 @@\n \n use hir::def_id::DefId;\n \n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use middle::region;\n use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n use ty::subst::{Substs, Subst, Kind, UnpackedKind};\n use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use ty::{Slice, TyS, ParamEnvAnd, ParamEnv};\n use util::captures::Captures;\n-use mir::interpret::{Scalar, Pointer, Value, ConstValue};\n+use mir::interpret::{Scalar, Pointer, Value};\n \n use std::iter;\n use std::cmp::Ordering;\n@@ -1859,7 +1859,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n pub struct Const<'tcx> {\n     pub ty: Ty<'tcx>,\n \n-    pub val: ConstVal<'tcx>,\n+    pub val: ConstValue<'tcx>,\n }\n \n impl<'tcx> Const<'tcx> {\n@@ -1870,15 +1870,15 @@ impl<'tcx> Const<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> &'tcx Self {\n         tcx.mk_const(Const {\n-            val: ConstVal::Unevaluated(def_id, substs),\n+            val: ConstValue::Unevaluated(def_id, substs),\n             ty,\n         })\n     }\n \n     #[inline]\n-    pub fn from_const_val(\n+    pub fn from_const_value(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        val: ConstVal<'tcx>,\n+        val: ConstValue<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> &'tcx Self {\n         tcx.mk_const(Const {\n@@ -1887,15 +1887,6 @@ impl<'tcx> Const<'tcx> {\n         })\n     }\n \n-    #[inline]\n-    pub fn from_const_value(\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        val: ConstValue<'tcx>,\n-        ty: Ty<'tcx>,\n-    ) -> &'tcx Self {\n-        Self::from_const_val(tcx, ConstVal::Value(val), ty)\n-    }\n-\n     #[inline]\n     pub fn from_byval_value(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n@@ -1956,34 +1947,22 @@ impl<'tcx> Const<'tcx> {\n         }\n         let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).ok()?.size;\n-        match self.val {\n-            ConstVal::Value(val) => val.to_bits(size),\n-            _ => None,\n-        }\n+        self.val.to_bits(size)\n     }\n \n     #[inline]\n     pub fn to_ptr(&self) -> Option<Pointer> {\n-        match self.val {\n-            ConstVal::Value(val) => val.to_ptr(),\n-            _ => None,\n-        }\n+        self.val.to_ptr()\n     }\n \n     #[inline]\n     pub fn to_byval_value(&self) -> Option<Value> {\n-        match self.val {\n-            ConstVal::Value(val) => val.to_byval_value(),\n-            _ => None,\n-        }\n+        self.val.to_byval_value()\n     }\n \n     #[inline]\n     pub fn to_scalar(&self) -> Option<Scalar> {\n-        match self.val {\n-            ConstVal::Value(val) => val.to_scalar(),\n-            _ => None,\n-        }\n+        self.val.to_scalar()\n     }\n \n     #[inline]\n@@ -1995,10 +1974,7 @@ impl<'tcx> Const<'tcx> {\n         assert_eq!(self.ty, ty.value);\n         let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).ok()?.size;\n-        match self.val {\n-            ConstVal::Value(val) => val.to_bits(size),\n-            _ => None,\n-        }\n+        self.val.to_bits(size)\n     }\n \n     #[inline]"}, {"sha": "d12f73144269bf7e87676fb038526149b34d2008", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -11,7 +11,7 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use ty::{self, Ty};\n use rustc_data_structures::small_vec::SmallVec;\n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n@@ -141,11 +141,8 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n }\n \n fn push_const<'tcx>(stack: &mut TypeWalkerStack<'tcx>, constant: &'tcx ty::Const<'tcx>) {\n-    match constant.val {\n-        ConstVal::Value(_) => {}\n-        ConstVal::Unevaluated(_, substs) => {\n-            stack.extend(substs.types().rev());\n-        }\n+    if let ConstValue::Unevaluated(_, substs) = constant.val {\n+        stack.extend(substs.types().rev());\n     }\n     stack.push(constant.ty);\n }"}, {"sha": "5376acca0d8cdabf5402fc13631a2731f63abfb9", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use infer::InferCtxt;\n use ty::subst::Substs;\n use traits;\n@@ -216,18 +216,15 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n     /// into `self.out`.\n     fn compute_const(&mut self, constant: &'tcx ty::Const<'tcx>) {\n         self.require_sized(constant.ty, traits::ConstSized);\n-        match constant.val {\n-            ConstVal::Value(_) => {}\n-            ConstVal::Unevaluated(def_id, substs) => {\n-                let obligations = self.nominal_obligations(def_id, substs);\n-                self.out.extend(obligations);\n-\n-                let predicate = ty::Predicate::ConstEvaluatable(def_id, substs);\n-                let cause = self.cause(traits::MiscObligation);\n-                self.out.push(traits::Obligation::new(cause,\n-                                                      self.param_env,\n-                                                      predicate));\n-            }\n+        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n+            let obligations = self.nominal_obligations(def_id, substs);\n+            self.out.extend(obligations);\n+\n+            let predicate = ty::Predicate::ConstEvaluatable(def_id, substs);\n+            let cause = self.cause(traits::MiscObligation);\n+            self.out.push(traits::Obligation::new(cause,\n+                                                    self.param_env,\n+                                                    predicate));\n         }\n     }\n "}, {"sha": "343f72980463102753029e4a6c03864441b11cbf", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use hir::map::definitions::DefPathData;\n-use mir::interpret::ConstVal;\n+use mir::interpret::ConstValue;\n use middle::region::{self, BlockRemainder};\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n@@ -1195,12 +1195,12 @@ define_print! {\n                 TyArray(ty, sz) => {\n                     print!(f, cx, write(\"[\"), print(ty), write(\"; \"))?;\n                     match sz.val {\n-                        ConstVal::Value(..) => ty::tls::with(|tcx| {\n-                            write!(f, \"{}\", sz.unwrap_usize(tcx))\n-                        })?,\n-                        ConstVal::Unevaluated(_def_id, _substs) => {\n+                        ConstValue::Unevaluated(_def_id, _substs) => {\n                             write!(f, \"_\")?;\n                         }\n+                        _ => ty::tls::with(|tcx| {\n+                            write!(f, \"{}\", sz.unwrap_usize(tcx))\n+                        })?,\n                     }\n                     write!(f, \"]\")\n                 }"}, {"sha": "a4709739a23ddabcbb587813975a407d82fe9af3", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -1381,7 +1381,6 @@ mod temp_stable_hash_impls {\n \n fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n     use rustc::mir::interpret::GlobalId;\n-    use rustc::mir::interpret::ConstVal;\n \n     info!(\"loading wasm section {:?}\", id);\n \n@@ -1399,12 +1398,6 @@ fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     let val = tcx.const_eval(param_env.and(cid)).unwrap();\n-\n-    let const_val = match val.val {\n-        ConstVal::Value(val) => val,\n-        ConstVal::Unevaluated(..) => bug!(\"should be evaluated\"),\n-    };\n-\n-    let alloc = tcx.const_value_to_allocation((const_val, val.ty));\n+    let alloc = tcx.const_value_to_allocation(val);\n     (section.to_string(), alloc.bytes.clone())\n }"}, {"sha": "bbe0e34b48f2642bb1754c9b801b7c17de0250d2", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{self, ValueRef};\n-use rustc::mir::interpret::{ConstVal, ConstEvalErr};\n+use rustc::mir::interpret::ConstEvalErr;\n use rustc_mir::interpret::{read_target_uint, const_val_field};\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n@@ -129,39 +129,38 @@ pub fn codegen_static_initializer<'a, 'tcx>(\n     let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n \n     let alloc = match static_.val {\n-        ConstVal::Value(ConstValue::ByRef(alloc, n)) if n.bytes() == 0 => alloc,\n+        ConstValue::ByRef(alloc, n) if n.bytes() == 0 => alloc,\n         _ => bug!(\"static const eval returned {:#?}\", static_),\n     };\n     Ok(const_alloc_to_llvm(cx, alloc))\n }\n \n impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n-    fn const_to_const_value(\n+    fn fully_evaluate(\n         &mut self,\n         bx: &Builder<'a, 'tcx>,\n         constant: &'tcx ty::Const<'tcx>,\n-    ) -> Result<ConstValue<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n+    ) -> Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n         match constant.val {\n-            ConstVal::Unevaluated(def_id, ref substs) => {\n+            ConstValue::Unevaluated(def_id, ref substs) => {\n                 let tcx = bx.tcx();\n                 let param_env = ty::ParamEnv::reveal_all();\n                 let instance = ty::Instance::resolve(tcx, param_env, def_id, substs).unwrap();\n                 let cid = GlobalId {\n                     instance,\n                     promoted: None,\n                 };\n-                let c = tcx.const_eval(param_env.and(cid))?;\n-                self.const_to_const_value(bx, c)\n+                tcx.const_eval(param_env.and(cid))\n             },\n-            ConstVal::Value(val) => Ok(val),\n+            _ => Ok(constant),\n         }\n     }\n \n-    pub fn mir_constant_to_const_value(\n+    pub fn eval_mir_constant(\n         &mut self,\n         bx: &Builder<'a, 'tcx>,\n         constant: &mir::Constant<'tcx>,\n-    ) -> Result<ConstValue<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n+    ) -> Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n         match constant.literal {\n             mir::Literal::Promoted { index } => {\n                 let param_env = ty::ParamEnv::reveal_all();\n@@ -174,7 +173,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n             mir::Literal::Value { value } => {\n                 Ok(self.monomorphize(&value))\n             }\n-        }.and_then(|c| self.const_to_const_value(bx, c))\n+        }.and_then(|c| self.fully_evaluate(bx, c))\n     }\n \n     /// process constant containing SIMD shuffle indices\n@@ -183,10 +182,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         bx: &Builder<'a, 'tcx>,\n         constant: &mir::Constant<'tcx>,\n     ) -> (ValueRef, Ty<'tcx>) {\n-        self.mir_constant_to_const_value(bx, constant)\n+        self.eval_mir_constant(bx, constant)\n             .and_then(|c| {\n-                let field_ty = constant.ty.builtin_index().unwrap();\n-                let fields = match constant.ty.sty {\n+                let field_ty = c.ty.builtin_index().unwrap();\n+                let fields = match c.ty.sty {\n                     ty::TyArray(_, n) => n.unwrap_usize(bx.tcx()),\n                     ref other => bug!(\"invalid simd shuffle type: {}\", other),\n                 };\n@@ -198,7 +197,6 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         None,\n                         mir::Field::new(field as usize),\n                         c,\n-                        constant.ty,\n                     )?;\n                     if let Some(prim) = field.to_scalar() {\n                         let layout = bx.cx.layout_of(field_ty);\n@@ -215,7 +213,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     }\n                 }).collect();\n                 let llval = C_struct(bx.cx, &values?, false);\n-                Ok((llval, constant.ty))\n+                Ok((llval, c.ty))\n             })\n             .unwrap_or_else(|e| {\n                 e.report_as_error("}, {"sha": "3d3a4400bd8108abca11973e5693f839dbc5fc32", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -96,16 +96,16 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n     }\n \n     pub fn from_const(bx: &Builder<'a, 'tcx>,\n-                      val: ConstValue<'tcx>,\n-                      ty: ty::Ty<'tcx>)\n+                      val: &'tcx ty::Const<'tcx>)\n                       -> Result<OperandRef<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n-        let layout = bx.cx.layout_of(ty);\n+        let layout = bx.cx.layout_of(val.ty);\n \n         if layout.is_zst() {\n             return Ok(OperandRef::new_zst(bx.cx, layout));\n         }\n \n-        let val = match val {\n+        let val = match val.val {\n+            ConstValue::Unevaluated(..) => bug!(),\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n                     layout::Abi::Scalar(ref x) => x,\n@@ -409,8 +409,8 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n \n             mir::Operand::Constant(ref constant) => {\n                 let ty = self.monomorphize(&constant.ty);\n-                self.mir_constant_to_const_value(bx, constant)\n-                    .and_then(|c| OperandRef::from_const(bx, c, ty))\n+                self.eval_mir_constant(bx, constant)\n+                    .and_then(|c| OperandRef::from_const(bx, c))\n                     .unwrap_or_else(|err| {\n                         match constant.literal {\n                             mir::Literal::Promoted { .. } => {"}, {"sha": "83361ea57c371e49aac538747b06130ed0351874", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -12,8 +12,6 @@ use self::Constructor::*;\n use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n-use rustc::mir::interpret::ConstVal;\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -544,14 +542,9 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n \n     for row in patterns {\n         match *row.kind {\n-            PatternKind::Constant {\n-                value: const_val @ &ty::Const {\n-                    val: ConstVal::Value(..),\n-                    ..\n-                }\n-            } => {\n-                if let Some(ptr) = const_val.to_ptr() {\n-                    let is_array_ptr = const_val.ty\n+            PatternKind::Constant { value } => {\n+                if let Some(ptr) = value.to_ptr() {\n+                    let is_array_ptr = value.ty\n                         .builtin_deref(true)\n                         .and_then(|t| t.ty.builtin_index())\n                         .map_or(false, |t| t == cx.tcx.types.u8);\n@@ -933,13 +926,14 @@ fn slice_pat_covered_by_constructor<'tcx>(\n     suffix: &[Pattern<'tcx>]\n ) -> Result<bool, ErrorReported> {\n     let data: &[u8] = match *ctor {\n-        ConstantValue(&ty::Const { val: ConstVal::Value(const_val), ty }) => {\n-            let val = match const_val {\n-                ConstValue::ByRef(..) => bug!(\"unexpected ConstValue::ByRef\"),\n+        ConstantValue(const_val) => {\n+            let val = match const_val.val {\n+                ConstValue::Unevaluated(..) |\n+                ConstValue::ByRef(..) => bug!(\"unexpected ConstValue: {:?}\", const_val),\n                 ConstValue::Scalar(val) | ConstValue::ScalarPair(val, _) => val,\n             };\n             if let Ok(ptr) = val.to_ptr() {\n-                let is_array_ptr = ty\n+                let is_array_ptr = const_val.ty\n                     .builtin_deref(true)\n                     .and_then(|t| t.ty.builtin_index())\n                     .map_or(false, |t| t == tcx.types.u8);"}, {"sha": "6e736e9284ee37e567c9e68f0a8165bb5b6f5a9e", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -18,7 +18,6 @@ pub(crate) use self::check_match::check_match;\n \n use interpret::{const_val_field, const_variant_index, self};\n \n-use rustc::mir::interpret::ConstVal;\n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, Value};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, Region};\n@@ -122,13 +121,6 @@ pub enum PatternKind<'tcx> {\n     },\n }\n \n-fn print_const_val(value: &ty::Const, f: &mut fmt::Formatter) -> fmt::Result {\n-    match value.val {\n-        ConstVal::Value(..) => fmt_const_val(f, value),\n-        ConstVal::Unevaluated(..) => bug!(\"{:?} not printable in a pattern\", value)\n-    }\n-}\n-\n impl<'tcx> fmt::Display for Pattern<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.kind {\n@@ -236,15 +228,15 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                 write!(f, \"{}\", subpattern)\n             }\n             PatternKind::Constant { value } => {\n-                print_const_val(value, f)\n+                fmt_const_val(f, value)\n             }\n             PatternKind::Range { lo, hi, end } => {\n-                print_const_val(lo, f)?;\n+                fmt_const_val(f, lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"...\")?,\n                     RangeEnd::Excluded => write!(f, \"..\")?,\n                 }\n-                print_const_val(hi, f)\n+                fmt_const_val(f, hi)\n             }\n             PatternKind::Slice { ref prefix, ref slice, ref suffix } |\n             PatternKind::Array { ref prefix, ref slice, ref suffix } => {\n@@ -795,13 +787,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         debug!(\"const_to_pat: cv={:#?}\", cv);\n         let adt_subpattern = |i, variant_opt| {\n             let field = Field::new(i);\n-            let val = match cv.val {\n-                ConstVal::Value(miri) => const_val_field(\n-                    self.tcx, self.param_env, instance,\n-                    variant_opt, field, miri, cv.ty,\n-                ).expect(\"field access failed\"),\n-                _ => bug!(\"{:#?} is not a valid adt\", cv),\n-            };\n+            let val = const_val_field(\n+                self.tcx, self.param_env, instance,\n+                variant_opt, field, cv,\n+            ).expect(\"field access failed\");\n             self.const_to_pat(instance, val, id, span)\n         };\n         let adt_subpatterns = |n, variant_opt| {\n@@ -840,24 +829,18 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternKind::Wild\n             },\n             ty::TyAdt(adt_def, substs) if adt_def.is_enum() => {\n-                match cv.val {\n-                    ConstVal::Value(val) => {\n-                        let variant_index = const_variant_index(\n-                            self.tcx, self.param_env, instance, val, cv.ty\n-                        ).expect(\"const_variant_index failed\");\n-                        let subpatterns = adt_subpatterns(\n-                            adt_def.variants[variant_index].fields.len(),\n-                            Some(variant_index),\n-                        );\n-                        PatternKind::Variant {\n-                            adt_def,\n-                            substs,\n-                            variant_index,\n-                            subpatterns,\n-                        }\n-                    },\n-                    ConstVal::Unevaluated(..) =>\n-                        span_bug!(span, \"{:#?} is not a valid enum constant\", cv),\n+                let variant_index = const_variant_index(\n+                    self.tcx, self.param_env, instance, cv\n+                ).expect(\"const_variant_index failed\");\n+                let subpatterns = adt_subpatterns(\n+                    adt_def.variants[variant_index].fields.len(),\n+                    Some(variant_index),\n+                );\n+                PatternKind::Variant {\n+                    adt_def,\n+                    substs,\n+                    variant_index,\n+                    subpatterns,\n                 }\n             },\n             ty::TyAdt(adt_def, _) => {"}, {"sha": "35422b11bd733714524b7aa9c24289079b654a0c", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -425,13 +425,13 @@ pub fn const_val_field<'a, 'tcx>(\n     instance: ty::Instance<'tcx>,\n     variant: Option<usize>,\n     field: mir::Field,\n-    value: ConstValue<'tcx>,\n-    ty: Ty<'tcx>,\n+    value: &'tcx ty::Const<'tcx>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n-    trace!(\"const_val_field: {:?}, {:?}, {:?}, {:?}\", instance, field, value, ty);\n+    trace!(\"const_val_field: {:?}, {:?}, {:?}\", instance, field, value);\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let result = (|| {\n-        let value = ecx.const_value_to_value(value, ty)?;\n+        let ty = value.ty;\n+        let value = ecx.const_to_value(value.val)?;\n         let layout = ecx.layout_of(ty)?;\n         let (ptr, align) = match value {\n             Value::ByRef(ptr, align) => (ptr, align),\n@@ -478,30 +478,29 @@ pub fn const_variant_index<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n-    val: ConstValue<'tcx>,\n-    ty: Ty<'tcx>,\n+    val: &'tcx ty::Const<'tcx>,\n ) -> EvalResult<'tcx, usize> {\n-    trace!(\"const_variant_index: {:?}, {:?}, {:?}\", instance, val, ty);\n+    trace!(\"const_variant_index: {:?}, {:?}\", instance, val);\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n-    let value = ecx.const_value_to_value(val, ty)?;\n+    let value = ecx.const_to_value(val.val)?;\n     let (ptr, align) = match value {\n         Value::ScalarPair(..) | Value::Scalar(_) => {\n-            let layout = ecx.layout_of(ty)?;\n+            let layout = ecx.layout_of(val.ty)?;\n             let ptr = ecx.memory.allocate(layout.size, layout.align, Some(MemoryKind::Stack))?.into();\n-            ecx.write_value_to_ptr(value, ptr, layout.align, ty)?;\n+            ecx.write_value_to_ptr(value, ptr, layout.align, val.ty)?;\n             (ptr, layout.align)\n         },\n         Value::ByRef(ptr, align) => (ptr, align),\n     };\n     let place = Place::from_scalar_ptr(ptr, align);\n-    ecx.read_discriminant_as_variant_index(place, ty)\n+    ecx.read_discriminant_as_variant_index(place, val.ty)\n }\n \n pub fn const_value_to_allocation_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    (val, ty): (ConstValue<'tcx>, Ty<'tcx>),\n+    val: &'tcx ty::Const<'tcx>,\n ) -> &'tcx Allocation {\n-    match val {\n+    match val.val {\n         ConstValue::ByRef(alloc, offset) => {\n             assert_eq!(offset.bytes(), 0);\n             return alloc;\n@@ -514,14 +513,14 @@ pub fn const_value_to_allocation_provider<'a, 'tcx>(\n             ty::ParamEnv::reveal_all(),\n             CompileTimeEvaluator,\n             ());\n-        let value = ecx.const_value_to_value(val, ty)?;\n-        let layout = ecx.layout_of(ty)?;\n+        let value = ecx.const_to_value(val.val)?;\n+        let layout = ecx.layout_of(val.ty)?;\n         let ptr = ecx.memory.allocate(layout.size, layout.align, Some(MemoryKind::Stack))?;\n-        ecx.write_value_to_ptr(value, ptr.into(), layout.align, ty)?;\n+        ecx.write_value_to_ptr(value, ptr.into(), layout.align, val.ty)?;\n         let alloc = ecx.memory.get(ptr.alloc_id)?;\n         Ok(tcx.intern_const_alloc(alloc.clone()))\n     };\n-    result().expect(\"unable to convert ConstVal to Allocation\")\n+    result().expect(\"unable to convert ConstValue to Allocation\")\n }\n \n pub fn const_eval_provider<'a, 'tcx>("}, {"sha": "6dc65a2404d11ab9d0c947ffb05181856cbcffe4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -3,7 +3,6 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::hir::map::definitions::DefPathData;\n-use rustc::mir::interpret::ConstVal;\n use rustc::mir;\n use rustc::ty::layout::{self, Size, Align, HasDataLayout, IntegerExt, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n@@ -233,12 +232,18 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(Scalar::Ptr(ptr).to_value_with_len(s.len() as u64, self.tcx.tcx))\n     }\n \n-    pub fn const_value_to_value(\n+    pub fn const_to_value(\n         &mut self,\n         val: ConstValue<'tcx>,\n-        _ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Value> {\n         match val {\n+            ConstValue::Unevaluated(def_id, substs) => {\n+                let instance = self.resolve(def_id, substs)?;\n+                self.read_global_as_value(GlobalId {\n+                    instance,\n+                    promoted: None,\n+                })\n+            }\n             ConstValue::ByRef(alloc, offset) => {\n                 // FIXME: Allocate new AllocId for all constants inside\n                 let id = self.memory.allocate_value(alloc.clone(), Some(MemoryKind::Stack))?;\n@@ -249,23 +254,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    pub(super) fn const_to_value(\n-        &mut self,\n-        const_val: &ConstVal<'tcx>,\n-        ty: Ty<'tcx>\n-    ) -> EvalResult<'tcx, Value> {\n-        match *const_val {\n-            ConstVal::Unevaluated(def_id, substs) => {\n-                let instance = self.resolve(def_id, substs)?;\n-                self.read_global_as_value(GlobalId {\n-                    instance,\n-                    promoted: None,\n-                }, ty)\n-            }\n-            ConstVal::Value(val) => self.const_value_to_value(val, ty)\n-        }\n-    }\n-\n     pub(super) fn resolve(&self, def_id: DefId, substs: &'tcx Substs<'tcx>) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"substs: {:#?}\", self.substs());\n@@ -849,14 +837,14 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 use rustc::mir::Literal;\n                 let mir::Constant { ref literal, .. } = **constant;\n                 let value = match *literal {\n-                    Literal::Value { ref value } => self.const_to_value(&value.val, ty)?,\n+                    Literal::Value { ref value } => self.const_to_value(value.val)?,\n \n                     Literal::Promoted { index } => {\n                         let instance = self.frame().instance;\n                         self.read_global_as_value(GlobalId {\n                             instance,\n                             promoted: Some(index),\n-                        }, ty)?\n+                        })?\n                     }\n                 };\n \n@@ -1036,18 +1024,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(())\n     }\n \n-    pub fn read_global_as_value(&mut self, gid: GlobalId<'tcx>, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n-        if self.tcx.is_static(gid.instance.def_id()).is_some() {\n-            let alloc_id = self\n-                .tcx\n-                .alloc_map\n-                .lock()\n-                .intern_static(gid.instance.def_id());\n-            let layout = self.layout_of(ty)?;\n-            return Ok(Value::ByRef(Scalar::Ptr(alloc_id.into()), layout.align))\n-        }\n+    pub fn read_global_as_value(&mut self, gid: GlobalId<'tcx>) -> EvalResult<'tcx, Value> {\n         let cv = self.const_eval(gid)?;\n-        self.const_to_value(&cv.val, ty)\n+        self.const_to_value(cv.val)\n     }\n \n     pub fn const_eval(&self, gid: GlobalId<'tcx>) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {"}, {"sha": "9e5b6be3e9122eff1ff95d39bcf8e458002e7fb6", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -7,7 +7,6 @@ use rustc::ty::ParamEnv;\n use rustc::ty::query::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size};\n use syntax::ast::Mutability;\n-use rustc::mir::interpret::ConstVal;\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::{Pointer, AllocId, Allocation, AccessKind, Value,\n@@ -290,11 +289,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             assert!(self.tcx.is_static(def_id).is_some());\n             EvalErrorKind::ReferencedConstant(err).into()\n         }).map(|val| {\n-            let const_val = match val.val {\n-                ConstVal::Value(val) => val,\n-                ConstVal::Unevaluated(..) => bug!(\"should be evaluated\"),\n-            };\n-            self.tcx.const_value_to_allocation((const_val, val.ty))\n+            self.tcx.const_value_to_allocation(val)\n         })\n     }\n "}, {"sha": "744c65a05a71660151f1029d0dc3205a55d6a800", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -193,7 +193,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::interpret::ConstVal;\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n@@ -1239,7 +1238,7 @@ fn collect_const<'a, 'tcx>(\n     debug!(\"visiting const {:?}\", *constant);\n \n     let val = match constant.val {\n-        ConstVal::Unevaluated(def_id, substs) => {\n+        ConstValue::Unevaluated(def_id, substs) => {\n             let param_env = ty::ParamEnv::reveal_all();\n             let substs = tcx.subst_and_normalize_erasing_regions(\n                 param_substs,\n@@ -1270,16 +1269,16 @@ fn collect_const<'a, 'tcx>(\n         _ => constant.val,\n     };\n     match val {\n-        ConstVal::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n-        ConstVal::Value(ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b))) => {\n+        ConstValue::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n+        ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {\n             collect_miri(tcx, a.alloc_id, output);\n             collect_miri(tcx, b.alloc_id, output);\n         }\n-        ConstVal::Value(ConstValue::ScalarPair(_, Scalar::Ptr(ptr))) |\n-        ConstVal::Value(ConstValue::ScalarPair(Scalar::Ptr(ptr), _)) |\n-        ConstVal::Value(ConstValue::Scalar(Scalar::Ptr(ptr))) =>\n+        ConstValue::ScalarPair(_, Scalar::Ptr(ptr)) |\n+        ConstValue::ScalarPair(Scalar::Ptr(ptr), _) |\n+        ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n-        ConstVal::Value(ConstValue::ByRef(alloc, _offset)) => {\n+        ConstValue::ByRef(alloc, _offset) => {\n             for &id in alloc.relocations.values() {\n                 collect_miri(tcx, id, output);\n             }"}, {"sha": "649309c4eb4ff6eadb2274ea2b3ac94879d08587", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 43, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n-use rustc::mir::interpret::{ConstVal, ConstEvalErr};\n+use rustc::mir::interpret::ConstEvalErr;\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, Scalar, GlobalId, EvalResult};\n use interpret::EvalContext;\n@@ -160,54 +160,17 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         r\n     }\n \n-    fn const_eval(&mut self, cid: GlobalId<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n-        let value = match self.tcx.const_eval(self.param_env.and(cid)) {\n-            Ok(val) => val,\n-            Err(err) => {\n-                err.report_as_error(\n-                    self.tcx.at(err.span),\n-                    \"constant evaluation error\",\n-                );\n-                return None;\n-            },\n-        };\n-        let val = match value.val {\n-            ConstVal::Value(v) => {\n-                self.use_ecx(source_info, |this| this.ecx.const_value_to_value(v, value.ty))?\n-            },\n-            _ => bug!(\"eval produced: {:?}\", value),\n-        };\n-        let val = (val, value.ty, source_info.span);\n-        trace!(\"evaluated {:?} to {:?}\", cid, val);\n-        Some(val)\n-    }\n-\n     fn eval_constant(\n         &mut self,\n         c: &Constant<'tcx>,\n         source_info: SourceInfo,\n     ) -> Option<Const<'tcx>> {\n         match c.literal {\n-            Literal::Value { value } => match value.val {\n-                ConstVal::Value(v) => {\n-                    let v = self.use_ecx(source_info, |this| {\n-                        this.ecx.const_value_to_value(v, value.ty)\n-                    })?;\n-                    Some((v, value.ty, c.span))\n-                },\n-                ConstVal::Unevaluated(did, substs) => {\n-                    let instance = Instance::resolve(\n-                        self.tcx,\n-                        self.param_env,\n-                        did,\n-                        substs,\n-                    )?;\n-                    let cid = GlobalId {\n-                        instance,\n-                        promoted: None,\n-                    };\n-                    self.const_eval(cid, source_info)\n-                },\n+            Literal::Value { value } => {\n+                let v = self.use_ecx(source_info, |this| {\n+                    this.ecx.const_to_value(value.val)\n+                })?;\n+                Some((v, value.ty, c.span))\n             },\n             // evaluate the promoted and replace the constant with the evaluated result\n             Literal::Promoted { index } => {"}, {"sha": "144ebce76e14cbe01f5137a041c4d77249ae76c1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::interpret::ConstVal;\n+use rustc::mir::interpret::ConstValue;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n@@ -611,7 +611,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n             Operand::Constant(ref constant) => {\n                 if let Literal::Value {\n-                    value: &ty::Const { val: ConstVal::Unevaluated(def_id, _), ty, .. }\n+                    value: &ty::Const { val: ConstValue::Unevaluated(def_id, _), ty, .. }\n                 } = constant.literal {\n                     // Don't peek inside trait associated constants.\n                     if self.tcx.trait_of_item(def_id).is_some() {"}, {"sha": "4d7fc7fb1c4878568ea3049545062f0fb9e4bb1e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -29,7 +29,7 @@ use syntax::symbol::keywords::{self, Keyword};\n use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{self, DUMMY_SP, Pos, FileName};\n \n-use rustc::mir::interpret::ConstVal;\n+use rustc::mir::interpret::ConstValue;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::resolve_lifetime as rl;\n use rustc::ty::fold::TypeFolder;\n@@ -3014,7 +3014,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::TySlice(ty) => Slice(box ty.clean(cx)),\n             ty::TyArray(ty, n) => {\n                 let mut n = cx.tcx.lift(&n).unwrap();\n-                if let ConstVal::Unevaluated(def_id, substs) = n.val {\n+                if let ConstValue::Unevaluated(def_id, substs) = n.val {\n                     let param_env = cx.tcx.param_env(def_id);\n                     let cid = GlobalId {\n                         instance: ty::Instance::new(def_id, substs),\n@@ -4096,14 +4096,14 @@ fn name_from_pat(p: &hir::Pat) -> String {\n \n fn print_const(cx: &DocContext, n: &ty::Const) -> String {\n     match n.val {\n-        ConstVal::Unevaluated(def_id, _) => {\n+        ConstValue::Unevaluated(def_id, _) => {\n             if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n                 print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n             } else {\n                 inline::print_inlined_const(cx, def_id)\n             }\n         },\n-        ConstVal::Value(..) => {\n+        _ => {\n             let mut s = String::new();\n             ::rustc::mir::fmt_const_val(&mut s, n).unwrap();\n             // array lengths are obviously usize"}, {"sha": "9405b4134bcaafaa54283efe97bd5860fb5e8a1f", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -11,19 +11,24 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN;\n-//~^ ERROR E0080\n-//~| ERROR attempt to negate with overflow\n+//~^ ERROR attempt to negate with overflow\n //~| ERROR this expression will panic at runtime\n //~| ERROR this constant cannot be used\n pub const B: i8 = A;\n //~^ ERROR const_err\n //~| ERROR const_err\n+//~| ERROR const_err\n+//~| ERROR const_err\n pub const C: u8 = A as u8;\n //~^ ERROR const_err\n //~| ERROR const_err\n+//~| ERROR const_err\n+//~| ERROR const_err\n pub const D: i8 = 50 - A;\n //~^ ERROR const_err\n //~| ERROR const_err\n+//~| ERROR const_err\n+//~| ERROR const_err\n \n fn main() {\n     let _ = (A, B, C, D);"}, {"sha": "f6a64bcba21c3a6b15f0ce0eeafa3dacc49350d0", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -23,7 +23,6 @@ fn black_box<T>(_: T) {\n // Make sure that the two uses get two errors.\n const FOO: u8 = [5u8][1];\n //~^ ERROR constant evaluation error\n-//~| ERROR constant evaluation error\n //~| index out of bounds: the len is 1 but the index is 1\n \n fn main() {"}, {"sha": "3d299988a960c97c996343ea77f3afdc127c2566", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -15,11 +15,12 @@\n const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n-//~^ ERROR E0080\n-//~| ERROR attempt to subtract with overflow\n+//~^ ERROR attempt to subtract with overflow\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n //~^ ERROR E0080\n //~| ERROR E0080\n+//~| ERROR const_err\n+//~| ERROR const_err\n }"}, {"sha": "cc851624e0e68a4194b2db1c5a43c843fcc4dd32", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9648b27e2c9f9efdb9e29a0d90b229aaff562/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=4bb9648b27e2c9f9efdb9e29a0d90b229aaff562", "patch": "@@ -6,14 +6,23 @@ LL | const LEN: usize = ONE - TWO;\n    |\n    = note: #[deny(const_err)] on by default\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+error: referenced constant\n+  --> $DIR/const-len-underflow-separate-spans.rs:21:17\n    |\n LL | const LEN: usize = ONE - TWO;\n-   |                    ^^^^^^^^^ attempt to subtract with overflow\n+   |                    --------- attempt to subtract with overflow\n+...\n+LL |     let a: [i8; LEN] = unimplemented!();\n+   |                 ^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/const-len-underflow-separate-spans.rs:21:17\n+   |\n+LL |     let a: [i8; LEN] = unimplemented!();\n+   |                 ^^^ referenced constant has errors\n \n error[E0080]: referenced constant\n-  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+  --> $DIR/const-len-underflow-separate-spans.rs:21:12\n    |\n LL | const LEN: usize = ONE - TWO;\n    |                    --------- attempt to subtract with overflow\n@@ -22,13 +31,13 @@ LL |     let a: [i8; LEN] = unimplemented!();\n    |            ^^^^^^^^^\n \n error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+  --> $DIR/const-len-underflow-separate-spans.rs:21:12\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n    |            ^^^^^---^\n    |                 |\n    |                 referenced constant has errors\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}