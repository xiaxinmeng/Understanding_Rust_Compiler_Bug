{"sha": "de8e0ae22cd10aac86acbfedd8d1f411117de93e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOGUwYWUyMmNkMTBhYWM4NmFjYmZlZGQ4ZDFmNDExMTE3ZGU5M2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-29T21:32:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:36:23Z"}, "message": "Remove the AssocSpace", "tree": {"sha": "87048054091b0ac265a476bb846335f90c83bd8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87048054091b0ac265a476bb846335f90c83bd8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de8e0ae22cd10aac86acbfedd8d1f411117de93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de8e0ae22cd10aac86acbfedd8d1f411117de93e", "html_url": "https://github.com/rust-lang/rust/commit/de8e0ae22cd10aac86acbfedd8d1f411117de93e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de8e0ae22cd10aac86acbfedd8d1f411117de93e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42e645ca9acb7166623bee25dd4143dd266ae4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e645ca9acb7166623bee25dd4143dd266ae4a7", "html_url": "https://github.com/rust-lang/rust/commit/42e645ca9acb7166623bee25dd4143dd266ae4a7"}], "stats": {"total": 137, "additions": 41, "deletions": 96}, "files": [{"sha": "6efc80ed8d343f4ed295afdd671890977352a026", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -707,9 +707,8 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     {\n         let types = self.read_to_vec(|this| Ok(f(this))).unwrap();\n         let selfs = self.read_to_vec(|this| Ok(f(this))).unwrap();\n-        let assocs = self.read_to_vec(|this| Ok(f(this))).unwrap();\n         let fns = self.read_to_vec(|this| Ok(f(this))).unwrap();\n-        VecPerParamSpace::new(types, selfs, assocs, fns)\n+        VecPerParamSpace::new(types, selfs, fns)\n     }\n \n     fn read_vtable_res_with_key(&mut self,"}, {"sha": "386768bd9d6f75e402735290a90f2544d4d77689", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -864,10 +864,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let region_param_defs = generics.regions.get_slice(subst::TypeSpace);\n         let regions = self.region_vars_for_defs(span, region_param_defs);\n \n-        let assoc_type_parameter_count = generics.types.len(subst::AssocSpace);\n-        let assoc_type_parameters = self.next_ty_vars(assoc_type_parameter_count);\n-\n-        subst::Substs::new_trait(type_parameters, regions, assoc_type_parameters, self_ty)\n+        subst::Substs::new_trait(type_parameters, regions, self_ty)\n     }\n \n     pub fn fresh_bound_region(&self, debruijn: ty::DebruijnIndex) -> ty::Region {"}, {"sha": "3066ae5b479ef7aeaa03ea51b3ea78af1210bb69", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 19, "deletions": 46, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -55,18 +55,17 @@ impl<'tcx> Substs<'tcx> {\n                     r: Vec<ty::Region>)\n                     -> Substs<'tcx>\n     {\n-        Substs::new(VecPerParamSpace::new(t, Vec::new(), Vec::new(), Vec::new()),\n-                    VecPerParamSpace::new(r, Vec::new(), Vec::new(), Vec::new()))\n+        Substs::new(VecPerParamSpace::new(t, Vec::new(), Vec::new()),\n+                    VecPerParamSpace::new(r, Vec::new(), Vec::new()))\n     }\n \n     pub fn new_trait(t: Vec<Ty<'tcx>>,\n                      r: Vec<ty::Region>,\n-                     a: Vec<Ty<'tcx>>,\n                      s: Ty<'tcx>)\n                     -> Substs<'tcx>\n     {\n-        Substs::new(VecPerParamSpace::new(t, vec!(s), a, Vec::new()),\n-                    VecPerParamSpace::new(r, Vec::new(), Vec::new(), Vec::new()))\n+        Substs::new(VecPerParamSpace::new(t, vec!(s), Vec::new()),\n+                    VecPerParamSpace::new(r, Vec::new(), Vec::new()))\n     }\n \n     pub fn erased(t: VecPerParamSpace<Ty<'tcx>>) -> Substs<'tcx>\n@@ -123,13 +122,6 @@ impl<'tcx> Substs<'tcx> {\n         s\n     }\n \n-    pub fn with_assoc_tys(&self, assoc_tys: Vec<Ty<'tcx>>) -> Substs<'tcx> {\n-        assert!(self.types.is_empty_in(AssocSpace));\n-        let mut s = (*self).clone();\n-        s.types.replace(AssocSpace, assoc_tys);\n-        s\n-    }\n-\n     pub fn erase_regions(self) -> Substs<'tcx> {\n         let Substs { types, regions: _ } = self;\n         Substs { types: types, regions: ErasedRegions }\n@@ -192,30 +184,27 @@ impl RegionSubsts {\n pub enum ParamSpace {\n     TypeSpace,  // Type parameters attached to a type definition, trait, or impl\n     SelfSpace,  // Self parameter on a trait\n-    AssocSpace, // Assoc types defined in a trait/impl\n     FnSpace,    // Type parameters attached to a method or fn\n }\n \n impl ParamSpace {\n-    pub fn all() -> [ParamSpace, ..4] {\n-        [TypeSpace, SelfSpace, AssocSpace, FnSpace]\n+    pub fn all() -> [ParamSpace, ..3] {\n+        [TypeSpace, SelfSpace, FnSpace]\n     }\n \n     pub fn to_uint(self) -> uint {\n         match self {\n             TypeSpace => 0,\n             SelfSpace => 1,\n-            AssocSpace => 2,\n-            FnSpace => 3,\n+            FnSpace => 2,\n         }\n     }\n \n     pub fn from_uint(u: uint) -> ParamSpace {\n         match u {\n             0 => TypeSpace,\n             1 => SelfSpace,\n-            2 => AssocSpace,\n-            3 => FnSpace,\n+            2 => FnSpace,\n             _ => panic!(\"Invalid ParamSpace: {}\", u)\n         }\n     }\n@@ -235,11 +224,9 @@ pub struct VecPerParamSpace<T> {\n     //\n     // AF(self) = (self.content[..self.type_limit],\n     //             self.content[self.type_limit..self.self_limit],\n-    //             self.content[self.self_limit..self.assoc_limit],\n-    //             self.content[self.assoc_limit..])\n+    //             self.content[self.self_limit..])\n     type_limit: uint,\n     self_limit: uint,\n-    assoc_limit: uint,\n     content: Vec<T>,\n }\n \n@@ -248,7 +235,6 @@ pub struct VecPerParamSpace<T> {\n pub struct SeparateVecsPerParamSpace<T> {\n     pub types: Vec<T>,\n     pub selfs: Vec<T>,\n-    pub assocs: Vec<T>,\n     pub fns: Vec<T>,\n }\n \n@@ -268,16 +254,14 @@ impl<T> VecPerParamSpace<T> {\n         match space {\n             TypeSpace => (0, self.type_limit),\n             SelfSpace => (self.type_limit, self.self_limit),\n-            AssocSpace => (self.self_limit, self.assoc_limit),\n-            FnSpace => (self.assoc_limit, self.content.len()),\n+            FnSpace => (self.self_limit, self.content.len()),\n         }\n     }\n \n     pub fn empty() -> VecPerParamSpace<T> {\n         VecPerParamSpace {\n             type_limit: 0,\n             self_limit: 0,\n-            assoc_limit: 0,\n             content: Vec::new()\n         }\n     }\n@@ -290,31 +274,27 @@ impl<T> VecPerParamSpace<T> {\n     /// `s` is the self space.\n     /// `a` is the assoc space.\n     /// `f` is the fn space.\n-    pub fn new(t: Vec<T>, s: Vec<T>, a: Vec<T>, f: Vec<T>) -> VecPerParamSpace<T> {\n+    pub fn new(t: Vec<T>, s: Vec<T>, f: Vec<T>) -> VecPerParamSpace<T> {\n         let type_limit = t.len();\n         let self_limit = type_limit + s.len();\n-        let assoc_limit = self_limit + a.len();\n \n         let mut content = t;\n         content.extend(s.into_iter());\n-        content.extend(a.into_iter());\n         content.extend(f.into_iter());\n \n         VecPerParamSpace {\n             type_limit: type_limit,\n             self_limit: self_limit,\n-            assoc_limit: assoc_limit,\n             content: content,\n         }\n     }\n \n-    fn new_internal(content: Vec<T>, type_limit: uint, self_limit: uint, assoc_limit: uint)\n+    fn new_internal(content: Vec<T>, type_limit: uint, self_limit: uint)\n                     -> VecPerParamSpace<T>\n     {\n         VecPerParamSpace {\n             type_limit: type_limit,\n             self_limit: self_limit,\n-            assoc_limit: assoc_limit,\n             content: content,\n         }\n     }\n@@ -326,9 +306,8 @@ impl<T> VecPerParamSpace<T> {\n     pub fn push(&mut self, space: ParamSpace, value: T) {\n         let (_, limit) = self.limits(space);\n         match space {\n-            TypeSpace => { self.type_limit += 1; self.self_limit += 1; self.assoc_limit += 1; }\n-            SelfSpace => { self.self_limit += 1; self.assoc_limit += 1; }\n-            AssocSpace => { self.assoc_limit += 1; }\n+            TypeSpace => { self.type_limit += 1; self.self_limit += 1; }\n+            SelfSpace => { self.self_limit += 1; }\n             FnSpace => { }\n         }\n         self.content.insert(limit, value);\n@@ -340,9 +319,8 @@ impl<T> VecPerParamSpace<T> {\n             None\n         } else {\n             match space {\n-                TypeSpace => { self.type_limit -= 1; self.self_limit -= 1; self.assoc_limit -= 1; }\n-                SelfSpace => { self.self_limit -= 1; self.assoc_limit -= 1; }\n-                AssocSpace => { self.assoc_limit -= 1; }\n+                TypeSpace => { self.type_limit -= 1; self.self_limit -= 1; }\n+                SelfSpace => { self.self_limit -= 1; }\n                 FnSpace => {}\n             }\n             self.content.remove(limit - 1)\n@@ -439,8 +417,7 @@ impl<T> VecPerParamSpace<T> {\n         let result = self.iter().map(pred).collect();\n         VecPerParamSpace::new_internal(result,\n                                        self.type_limit,\n-                                       self.self_limit,\n-                                       self.assoc_limit)\n+                                       self.self_limit)\n     }\n \n     pub fn map_enumerated<U, P>(&self, pred: P) -> VecPerParamSpace<U> where\n@@ -449,8 +426,7 @@ impl<T> VecPerParamSpace<T> {\n         let result = self.iter_enumerated().map(pred).collect();\n         VecPerParamSpace::new_internal(result,\n                                        self.type_limit,\n-                                       self.self_limit,\n-                                       self.assoc_limit)\n+                                       self.self_limit)\n     }\n \n     pub fn map_move<U, F>(self, mut pred: F) -> VecPerParamSpace<U> where\n@@ -459,25 +435,22 @@ impl<T> VecPerParamSpace<T> {\n         let SeparateVecsPerParamSpace {\n             types: t,\n             selfs: s,\n-            assocs: a,\n             fns: f\n         } = self.split();\n \n         VecPerParamSpace::new(t.into_iter().map(|p| pred(p)).collect(),\n                               s.into_iter().map(|p| pred(p)).collect(),\n-                              a.into_iter().map(|p| pred(p)).collect(),\n                               f.into_iter().map(|p| pred(p)).collect())\n     }\n \n     pub fn split(self) -> SeparateVecsPerParamSpace<T> {\n-        let VecPerParamSpace { type_limit, self_limit, assoc_limit, content } = self;\n+        let VecPerParamSpace { type_limit, self_limit, content } = self;\n \n         let mut content_iter = content.into_iter();\n \n         SeparateVecsPerParamSpace {\n             types: content_iter.by_ref().take(type_limit).collect(),\n             selfs: content_iter.by_ref().take(self_limit - type_limit).collect(),\n-            assocs: content_iter.by_ref().take(assoc_limit - self_limit).collect(),\n             fns: content_iter.collect()\n         }\n     }"}, {"sha": "755e50f13275edbda20c7f7abd95ac51109ed6cb", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -1674,8 +1674,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             });\n         }\n \n-        let obligations = VecPerParamSpace::new(obligations, Vec::new(),\n-                                                Vec::new(), Vec::new());\n+        let obligations = VecPerParamSpace::new(obligations, Vec::new(), Vec::new());\n \n         debug!(\"vtable_builtin_data: obligations={}\",\n                obligations.repr(self.tcx()));\n@@ -1769,7 +1768,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             Substs::new_trait(\n                 vec![arguments_tuple, output_type],\n                 vec![],\n-                vec![],\n                 self_ty);\n         let trait_ref = ty::Binder(Rc::new(ty::TraitRef {\n             def_id: obligation.predicate.def_id(),\n@@ -1810,7 +1808,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 vec![arguments_tuple.subst(self.tcx(), substs),\n                      closure_sig.0.output.unwrap().subst(self.tcx(), substs)],\n                 vec![],\n-                vec![],\n                 obligation.self_ty());\n         let trait_ref = ty::Binder(Rc::new(ty::TraitRef {\n             def_id: obligation.predicate.def_id(),"}, {"sha": "ddf2c9d87fee235d5a7291313cfe6f5a27277c3d", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::subst::{Subst, Substs, VecPerParamSpace};\n+use middle::subst::{Substs, VecPerParamSpace};\n use middle::infer::InferCtxt;\n use middle::ty::{mod, Ty, AsPredicate, ToPolyTraitRef};\n use std::collections::HashSet;\n@@ -229,18 +229,7 @@ pub fn fresh_substs_for_impl<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n {\n     let tcx = infcx.tcx;\n     let impl_generics = ty::lookup_item_type(tcx, impl_def_id).generics;\n-    let input_substs = infcx.fresh_substs_for_generics(span, &impl_generics);\n-\n-    // Add substs for the associated types bound in the impl.\n-    let ref items = tcx.impl_items.borrow()[impl_def_id];\n-    let mut assoc_tys = Vec::new();\n-    for item in items.iter() {\n-        if let &ty::ImplOrTraitItemId::TypeTraitItemId(id) = item {\n-            assoc_tys.push(tcx.tcache.borrow()[id].ty.subst(tcx, &input_substs));\n-        }\n-    }\n-\n-    input_substs.with_assoc_tys(assoc_tys)\n+    infcx.fresh_substs_for_generics(span, &impl_generics)\n }\n \n impl<'tcx, N> fmt::Show for VtableImplData<'tcx, N> {"}, {"sha": "9639af5ca1cd53ec49789ac81ed9f31d5fd64d6e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -701,10 +701,9 @@ impl<'tcx> Repr<'tcx> for subst::Substs<'tcx> {\n \n impl<'tcx, T:Repr<'tcx>> Repr<'tcx> for subst::VecPerParamSpace<T> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"[{};{};{};{}]\",\n+        format!(\"[{};{};{}]\",\n                 self.get_slice(subst::TypeSpace).repr(tcx),\n                 self.get_slice(subst::SelfSpace).repr(tcx),\n-                self.get_slice(subst::AssocSpace).repr(tcx),\n                 self.get_slice(subst::FnSpace).repr(tcx))\n     }\n }"}, {"sha": "9535ffaec0e6a182b9b925387ac4ac4dd68bccc9", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -209,7 +209,6 @@ pub fn trans_static_method_callee(bcx: Block,\n     let subst::SeparateVecsPerParamSpace {\n         types: rcvr_type,\n         selfs: rcvr_self,\n-        assocs: rcvr_assoc,\n         fns: rcvr_method\n     } = rcvr_substs.types.split();\n \n@@ -238,7 +237,6 @@ pub fn trans_static_method_callee(bcx: Block,\n     let trait_substs =\n         Substs::erased(VecPerParamSpace::new(rcvr_type,\n                                              rcvr_self,\n-                                             rcvr_assoc,\n                                              Vec::new()));\n     let trait_substs = bcx.tcx().mk_substs(trait_substs);\n     debug!(\"trait_substs={}\", trait_substs.repr(bcx.tcx()));\n@@ -276,13 +274,11 @@ pub fn trans_static_method_callee(bcx: Block,\n             let subst::SeparateVecsPerParamSpace {\n                 types: impl_type,\n                 selfs: impl_self,\n-                assocs: impl_assoc,\n                 fns: _\n             } = impl_substs.types.split();\n             let callee_substs =\n                 Substs::erased(VecPerParamSpace::new(impl_type,\n                                                      impl_self,\n-                                                     impl_assoc,\n                                                      rcvr_method));\n \n             let mth_id = method_with_name(ccx, impl_did, mname);\n@@ -411,13 +407,12 @@ fn combine_impl_and_methods_tps<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let subst::SeparateVecsPerParamSpace {\n         types: rcvr_type,\n         selfs: rcvr_self,\n-        assocs: rcvr_assoc,\n         fns: rcvr_method\n     } = rcvr_substs.types.clone().split();\n     assert!(rcvr_method.is_empty());\n     subst::Substs {\n         regions: subst::ErasedRegions,\n-        types: subst::VecPerParamSpace::new(rcvr_type, rcvr_self, rcvr_assoc, node_method)\n+        types: subst::VecPerParamSpace::new(rcvr_type, rcvr_self, node_method)\n     }\n }\n "}, {"sha": "1971be117605c4655213053dba716baa32de7b19", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -155,14 +155,11 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n         }\n     };\n \n-    let number_assoc_types = trait_def.generics.types.len(subst::AssocSpace);\n-    let assoc_types = fcx.inh.infcx.next_ty_vars(number_assoc_types);\n-\n     assert_eq!(trait_def.generics.types.len(subst::FnSpace), 0);\n     assert!(trait_def.generics.regions.is_empty());\n \n     // Construct a trait-reference `self_ty : Trait<input_tys>`\n-    let substs = subst::Substs::new_trait(input_types, Vec::new(), assoc_types, self_ty);\n+    let substs = subst::Substs::new_trait(input_types, Vec::new(), self_ty);\n     let trait_ref = Rc::new(ty::TraitRef::new(trait_def_id, fcx.tcx().mk_substs(substs)));\n \n     // Construct an obligation"}, {"sha": "7929a005af2c8a937795c4be93239af6bded9cd9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -5430,7 +5430,6 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             span_err!(fcx.tcx().sess, data.bindings[0].span, E0182,\n                       \"unexpected binding of associated item in expression path \\\n                        (only allowed in type paths)\");\n-            substs.types.truncate(subst::ParamSpace::AssocSpace, 0);\n         }\n \n         {"}, {"sha": "8f70966dd14c433145a8428557fc94fa65c1ac8d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -898,7 +898,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         // ...and also create the `Self` parameter.\n         let self_ty = ty::mk_self_type(ccx.tcx);\n \n-        subst::Substs::new_trait(types, regions, Vec::new(), self_ty)\n+        subst::Substs::new_trait(types, regions, self_ty)\n     }\n }\n "}, {"sha": "6d2392c124b30170f239832200d833c3cd78d0e1", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/42e645ca9acb7166623bee25dd4143dd266ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn", "raw_url": "https://github.com/rust-lang/rust/raw/42e645ca9acb7166623bee25dd4143dd266ae4a7/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn?ref=42e645ca9acb7166623bee25dd4143dd266ae4a7"}, {"sha": "fa38482b21c50eea054a66293810fa16c7fcc37c", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -14,7 +14,7 @@\n // Regions that just appear in normal spots are contravariant:\n \n #[rustc_variance]\n-struct Test2<'a, 'b, 'c> { //~ ERROR regions=[[-, -, -];[];[];[]]\n+struct Test2<'a, 'b, 'c> { //~ ERROR regions=[[-, -, -];[];[]]\n     x: &'a int,\n     y: &'b [int],\n     c: &'c str\n@@ -23,7 +23,7 @@ struct Test2<'a, 'b, 'c> { //~ ERROR regions=[[-, -, -];[];[];[]]\n // Those same annotations in function arguments become covariant:\n \n #[rustc_variance]\n-struct Test3<'a, 'b, 'c> { //~ ERROR regions=[[+, +, +];[];[];[]]\n+struct Test3<'a, 'b, 'c> { //~ ERROR regions=[[+, +, +];[];[]]\n     x: extern \"Rust\" fn(&'a int),\n     y: extern \"Rust\" fn(&'b [int]),\n     c: extern \"Rust\" fn(&'c str),\n@@ -32,15 +32,15 @@ struct Test3<'a, 'b, 'c> { //~ ERROR regions=[[+, +, +];[];[];[]]\n // Mutability induces invariance:\n \n #[rustc_variance]\n-struct Test4<'a, 'b:'a> { //~ ERROR regions=[[-, o];[];[];[]]\n+struct Test4<'a, 'b:'a> { //~ ERROR regions=[[-, o];[];[]]\n     x: &'a mut &'b int,\n }\n \n // Mutability induces invariance, even when in a\n // contravariant context:\n \n #[rustc_variance]\n-struct Test5<'a, 'b> { //~ ERROR regions=[[+, o];[];[];[]]\n+struct Test5<'a, 'b> { //~ ERROR regions=[[+, o];[];[]]\n     x: extern \"Rust\" fn(&'a mut &'b int),\n }\n \n@@ -50,21 +50,21 @@ struct Test5<'a, 'b> { //~ ERROR regions=[[+, o];[];[];[]]\n // argument list occurs in an invariant context.\n \n #[rustc_variance]\n-struct Test6<'a, 'b> { //~ ERROR regions=[[-, o];[];[];[]]\n+struct Test6<'a, 'b> { //~ ERROR regions=[[-, o];[];[]]\n     x: &'a mut extern \"Rust\" fn(&'b int),\n }\n \n // No uses at all is bivariant:\n \n #[rustc_variance]\n-struct Test7<'a> { //~ ERROR regions=[[*];[];[];[]]\n+struct Test7<'a> { //~ ERROR regions=[[*];[];[]]\n     x: int\n }\n \n // Try enums too.\n \n #[rustc_variance]\n-enum Test8<'a, 'b, 'c:'b> { //~ ERROR regions=[[+, -, o];[];[];[]]\n+enum Test8<'a, 'b, 'c:'b> { //~ ERROR regions=[[+, -, o];[];[]]\n     Test8A(extern \"Rust\" fn(&'a int)),\n     Test8B(&'b [int]),\n     Test8C(&'b mut &'c str),"}, {"sha": "c049fbc0fedbc758ca213476087b234949c06e72", "filename": "src/test/compile-fail/variance-regions-indirect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -13,29 +13,29 @@\n // Try enums too.\n \n #[rustc_variance]\n-enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR regions=[[+, -, o, *];[];[];[]]\n+enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR regions=[[+, -, o, *];[];[]]\n     Test8A(extern \"Rust\" fn(&'a int)),\n     Test8B(&'b [int]),\n     Test8C(&'b mut &'c str),\n }\n \n #[rustc_variance]\n-struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR regions=[[*, o, -, +];[];[];[]]\n+struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR regions=[[*, o, -, +];[];[]]\n     f: Base<'z, 'y, 'x, 'w>\n }\n \n #[rustc_variance] // Combine - and + to yield o\n-struct Derived2<'a, 'b:'a, 'c> { //~ ERROR regions=[[o, o, *];[];[];[]]\n+struct Derived2<'a, 'b:'a, 'c> { //~ ERROR regions=[[o, o, *];[];[]]\n     f: Base<'a, 'a, 'b, 'c>\n }\n \n #[rustc_variance] // Combine + and o to yield o (just pay attention to 'a here)\n-struct Derived3<'a:'b, 'b, 'c> { //~ ERROR regions=[[o, -, *];[];[];[]]\n+struct Derived3<'a:'b, 'b, 'c> { //~ ERROR regions=[[o, -, *];[];[]]\n     f: Base<'a, 'b, 'a, 'c>\n }\n \n #[rustc_variance] // Combine + and * to yield + (just pay attention to 'a here)\n-struct Derived4<'a, 'b, 'c:'b> { //~ ERROR regions=[[+, -, o];[];[];[]]\n+struct Derived4<'a, 'b, 'c:'b> { //~ ERROR regions=[[+, -, o];[];[]]\n     f: Base<'a, 'b, 'c, 'a>\n }\n "}, {"sha": "c61f2ff79c0192b5120796fd23e291c0acef6c92", "filename": "src/test/compile-fail/variance-trait-object-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8e0ae22cd10aac86acbfedd8d1f411117de93e/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs?ref=de8e0ae22cd10aac86acbfedd8d1f411117de93e", "patch": "@@ -19,7 +19,7 @@ use std::mem;\n trait T { fn foo(); }\n \n #[rustc_variance]\n-struct TOption<'a> { //~ ERROR regions=[[-];[];[];[]]\n+struct TOption<'a> { //~ ERROR regions=[[-];[];[]]\n     v: Option<Box<T + 'a>>,\n }\n "}]}