{"sha": "953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1M2Q3YTY0YTU4NDNiMzVlOWUyN2JhMWM4ZjcyNWZmM2NkZTM1ZDA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-16T22:37:54Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-27T17:45:28Z"}, "message": "Add unsized_locals to INCOMPLETE_FEATURES list", "tree": {"sha": "20416518561f9e18102241c19335fab924176401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20416518561f9e18102241c19335fab924176401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+YXLoACgkQgTGiTgx5\n768HsQ/+O4YBNbU3Xh+u8IoxmbUa9wgtiX55VlqVoPgUgre5yEt0S1R7U280Bf7k\nESqzGGEUxJvUCyEABcA8nu20zWXr8WTn/zA587paGuQS9rMGVS3vTK63Odlj1918\n4ln5c1x8O0oA3ETlMQVtbirkhkCUqW07NyVUAL+3lHACfvOYzaRRMVPNQ/m9T9FM\nnyQVVE60IjZnit5nCidEM0tONMWKi2dqIow6QQQ6iwyZ8NQdT7lZC2tOzsdnJJi2\nD1hs7QcaE+GAI6d0tl50rYSa6rCA5Q+2r5Rm+YTGUm0h52OrWSPC0YNa877+q3l+\nvWNct77FFZs9LLYZCan3SWYUxLv/hNkohGKKunWuaIpTOqA7xlEiT3jNJSpKAqlc\nbWTgsZ+W4pMTDcGtXLWCTq6K5NSkaSsEx2xJv3SCGpnOkecWs3nydEr85aMgzlnz\n+UBiYEWCM52+QJhM7XJ52YCKJfF06D/WW0jaZ3kszT1QBxvAMhVsSM7hx1Grsrij\nuLpxYQ8un2fF1yh+Pxx499gjnuAFJ8LM6m2bkUfHOgEzrc7IECkOPXzvfl68rsTp\ndaAhdyHrmCd/W7f8df57/QaV+CmdwLm5SV8KoWeFsklYJYHdw7qRoUhJ1u18Kict\n/oXSlUr6c1ldO40AxxoYN7GiCTFlJ50vfx4VWuJS5q2WjQ3H+fc=\n=RXkr\n-----END PGP SIGNATURE-----", "payload": "tree 20416518561f9e18102241c19335fab924176401\nparent 708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8\nauthor Santiago Pastorino <spastorino@gmail.com> 1602887874 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1603820728 -0300\n\nAdd unsized_locals to INCOMPLETE_FEATURES list\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "html_url": "https://github.com/rust-lang/rust/commit/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "html_url": "https://github.com/rust-lang/rust/commit/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8"}], "stats": {"total": 212, "additions": 155, "deletions": 57}, "files": [{"sha": "ad926a810e6bfc87b38ef71469880dab9e16bc1d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -632,6 +632,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::specialization,\n     sym::inline_const,\n     sym::repr128,\n+    sym::unsized_locals,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "e0f5776424e0951a2b37b39ae94fc0def7bd2410", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -9,13 +9,13 @@\n //[zflagsul]compile-flags: -Z borrowck=migrate\n //[editionul]edition:2018\n \n+#![allow(incomplete_features)]\n #![cfg_attr(nll, feature(nll))]\n #![cfg_attr(nllul, feature(nll))]\n #![cfg_attr(migrateul, feature(unsized_locals))]\n #![cfg_attr(zflagsul, feature(unsized_locals))]\n #![cfg_attr(nllul, feature(unsized_locals))]\n #![cfg_attr(editionul, feature(unsized_locals))]\n-\n #![feature(box_syntax)]\n \n fn foo(x: Box<[i32]>) {"}, {"sha": "4ea0a609af4c49811e1771399c6aea4c94ce97ec", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize, unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n // This tests a few edge-cases around `arbitrary_self_types`. Most specifically,\n // it checks that the `ObjectCandidate` you get from method matching can't"}, {"sha": "4a06a95120ac719260b32afcb89920efbdac118f", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,37 +1,46 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:1:77\n+   |\n+LL | #![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize, unsized_locals, unsized_fn_params)]\n+   |                                                                             ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:85:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:86:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:102:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:103:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u64`\n    |                   |\n    |                   expected due to this\n \n error[E0034]: multiple applicable items in scope\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:120:15\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:121:15\n    |\n LL |     let z = x.foo();\n    |               ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `X` for the type `T`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:43:9\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:44:9\n    |\n LL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: candidate #2 is defined in an impl of the trait `NuisanceFoo` for the type `T`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:70:9\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:71:9\n    |\n LL |         fn foo(self) {}\n    |         ^^^^^^^^^^^^\n note: candidate #3 is defined in the trait `FinalFoo`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:57:5\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:58:5\n    |\n LL |     fn foo(&self) -> u8;\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -49,30 +58,30 @@ LL |     let z = FinalFoo::foo(x);\n    |             ^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:137:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:138:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u8`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:155:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:156:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:172:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:173:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0034, E0308.\n For more information about an error, try `rustc --explain E0034`."}, {"sha": "d91be023ed79429fdc238469118adfeeeffa7346", "filename": "src/test/ui/moves/move-out-of-slice-2.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_locals)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n struct A;\n #[derive(Clone, Copy)]\n@@ -8,27 +9,27 @@ fn main() {\n     let a: Box<[A]> = Box::new([A]);\n     match *a {\n         //~^ ERROR cannot move out of type `[A]`, a non-copy slice\n-        [a @ ..] => {},\n+        [a @ ..] => {}\n         _ => {}\n     }\n     let b: Box<[A]> = Box::new([A, A, A]);\n     match *b {\n         //~^ ERROR cannot move out of type `[A]`, a non-copy slice\n-        [_, _, b @ .., _] => {},\n+        [_, _, b @ .., _] => {}\n         _ => {}\n     }\n \n     // `[C]` isn't `Copy`, even if `C` is.\n     let c: Box<[C]> = Box::new([C]);\n     match *c {\n         //~^ ERROR cannot move out of type `[C]`, a non-copy slice\n-        [c @ ..] => {},\n+        [c @ ..] => {}\n         _ => {}\n     }\n     let d: Box<[C]> = Box::new([C, C, C]);\n     match *d {\n         //~^ ERROR cannot move out of type `[C]`, a non-copy slice\n-        [_, _, d @ .., _] => {},\n+        [_, _, d @ .., _] => {}\n         _ => {}\n     }\n }"}, {"sha": "9a863bf31a7fb79d0735cd725038bfb03944ce0a", "filename": "src/test/ui/moves/move-out-of-slice-2.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,51 +1,60 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/move-out-of-slice-2.rs:1:12\n+   |\n+LL | #![feature(unsized_locals)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:9:11\n+  --> $DIR/move-out-of-slice-2.rs:10:11\n    |\n LL |     match *a {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [a @ ..] => {},\n+LL |         [a @ ..] => {}\n    |          ------\n    |          |\n    |          data moved here\n    |          move occurs because `a` has type `[A]`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:15:11\n+  --> $DIR/move-out-of-slice-2.rs:16:11\n    |\n LL |     match *b {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [_, _, b @ .., _] => {},\n+LL |         [_, _, b @ .., _] => {}\n    |                ------\n    |                |\n    |                data moved here\n    |                move occurs because `b` has type `[A]`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:23:11\n+  --> $DIR/move-out-of-slice-2.rs:24:11\n    |\n LL |     match *c {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [c @ ..] => {},\n+LL |         [c @ ..] => {}\n    |          ------\n    |          |\n    |          data moved here\n    |          move occurs because `c` has type `[C]`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:29:11\n+  --> $DIR/move-out-of-slice-2.rs:30:11\n    |\n LL |     match *d {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [_, _, d @ .., _] => {},\n+LL |         [_, _, d @ .., _] => {}\n    |                ------\n    |                |\n    |                data moved here\n    |                move occurs because `d` has type `[C]`, which does not implement the `Copy` trait\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0508`."}, {"sha": "5dd5898c12e5c2d44979fb44ebe9772cfebdc09b", "filename": "src/test/ui/unsized-locals/autoderef.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {"}, {"sha": "bf305a318d84223204f856da3dbd0628b8ae6c94", "filename": "src/test/ui/unsized-locals/borrow-after-move.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "5934276cc1dda525e1e387031d5c44d576e9d578", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/borrow-after-move.rs:1:12\n+   |\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrow-after-move.rs:20:24\n+  --> $DIR/borrow-after-move.rs:21:24\n    |\n LL |         let y = *x;\n    |                 -- value moved here\n@@ -10,7 +19,7 @@ LL |         println!(\"{}\", &x);\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n-  --> $DIR/borrow-after-move.rs:22:24\n+  --> $DIR/borrow-after-move.rs:23:24\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -21,7 +30,7 @@ LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrow-after-move.rs:30:24\n+  --> $DIR/borrow-after-move.rs:31:24\n    |\n LL |         let y = *x;\n    |                 -- value moved here\n@@ -32,7 +41,7 @@ LL |         println!(\"{}\", &x);\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n-  --> $DIR/borrow-after-move.rs:32:24\n+  --> $DIR/borrow-after-move.rs:33:24\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -43,13 +52,13 @@ LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n-  --> $DIR/borrow-after-move.rs:4:12\n+  --> $DIR/borrow-after-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;\n    |            ^^^^\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrow-after-move.rs:39:24\n+  --> $DIR/borrow-after-move.rs:40:24\n    |\n LL |         let x = \"hello\".to_owned().into_boxed_str();\n    |             - move occurs because `x` has type `Box<str>`, which does not implement the `Copy` trait\n@@ -58,6 +67,6 @@ LL |         x.foo();\n LL |         println!(\"{}\", &x);\n    |                        ^^ value borrowed here after move\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "b9881defac39a180a30198d43d7445c763315e5f", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-rpass.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals)]\n \n pub trait Foo {\n@@ -14,7 +15,6 @@ impl Foo for A {\n     }\n }\n \n-\n fn main() {\n     let x = *(Box::new(A) as Box<dyn Foo>);\n     assert_eq!(x.foo(), format!(\"hello\"));"}, {"sha": "957991f853b2d9dd3ea95f1c3feffd0df80e8587", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety-withdefault.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {"}, {"sha": "d29854254174849e39aa2d0c6a55137b2775309c", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,7 +1,10 @@\n #![feature(unsized_locals)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n pub trait Foo {\n-    fn foo(self) -> String where Self: Sized;\n+    fn foo(self) -> String\n+    where\n+        Self: Sized;\n }\n \n struct A;\n@@ -12,7 +15,6 @@ impl Foo for A {\n     }\n }\n \n-\n fn main() {\n     let x = *(Box::new(A) as Box<dyn Foo>);\n     x.foo();"}, {"sha": "59d91bc0cfd3d5ba405520d1a23162c5984eedda", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,11 +1,20 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/by-value-trait-object-safety.rs:1:12\n+   |\n+LL | #![feature(unsized_locals)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error: the `foo` method cannot be invoked on a trait object\n-  --> $DIR/by-value-trait-object-safety.rs:18:7\n+  --> $DIR/by-value-trait-object-safety.rs:20:7\n    |\n-LL |     fn foo(self) -> String where Self: Sized;\n-   |                                        ----- this has a `Sized` requirement\n+LL |         Self: Sized;\n+   |               ----- this has a `Sized` requirement\n ...\n LL |     x.foo();\n    |       ^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "35d95232f346f1f16e215fb65f4f15d30bedabc4", "filename": "src/test/ui/unsized-locals/double-move.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "b897dbbc9a3aac4547f05eb34444fbec2a6164f5", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/double-move.rs:1:12\n+   |\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0382]: use of moved value: `y`\n-  --> $DIR/double-move.rs:20:22\n+  --> $DIR/double-move.rs:21:22\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -9,7 +18,7 @@ LL |         drop_unsized(y);\n    |                      ^ value used here after move\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/double-move.rs:26:22\n+  --> $DIR/double-move.rs:27:22\n    |\n LL |         let _y = *x;\n    |                  -- value moved here\n@@ -19,7 +28,7 @@ LL |         drop_unsized(x);\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `*x`\n-  --> $DIR/double-move.rs:32:18\n+  --> $DIR/double-move.rs:33:18\n    |\n LL |         let x = \"hello\".to_owned().into_boxed_str();\n    |             - move occurs because `x` has type `Box<str>`, which does not implement the `Copy` trait\n@@ -29,7 +38,7 @@ LL |         let _y = *x;\n    |                  ^^ value used here after move\n \n error[E0382]: use of moved value: `y`\n-  --> $DIR/double-move.rs:39:9\n+  --> $DIR/double-move.rs:40:9\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -39,13 +48,13 @@ LL |         y.foo();\n    |         ^ value used here after move\n    |\n note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n-  --> $DIR/double-move.rs:4:12\n+  --> $DIR/double-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;\n    |            ^^^^\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/double-move.rs:45:9\n+  --> $DIR/double-move.rs:46:9\n    |\n LL |         let _y = *x;\n    |                  -- value moved here\n@@ -55,7 +64,7 @@ LL |         x.foo();\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `*x`\n-  --> $DIR/double-move.rs:51:18\n+  --> $DIR/double-move.rs:52:18\n    |\n LL |         let x = \"hello\".to_owned().into_boxed_str();\n    |             - move occurs because `x` has type `Box<str>`, which does not implement the `Copy` trait\n@@ -64,6 +73,6 @@ LL |         x.foo();\n LL |         let _y = *x;\n    |                  ^^ value used here after move\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "3b08225c880ae9fff98e39197fcc0636273e9d93", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_locals)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n struct Test([i32]);\n "}, {"sha": "0f0ff5793776fe69736d84561e2680d22d2c4906", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-30276-feature-flagged.rs:1:12\n+   |\n+LL | #![feature(unsized_locals)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/issue-30276-feature-flagged.rs:6:29\n+  --> $DIR/issue-30276-feature-flagged.rs:7:29\n    |\n LL |     let _x: fn(_) -> Test = Test;\n    |                             ^^^^ doesn't have a size known at compile-time\n@@ -8,6 +17,6 @@ LL |     let _x: fn(_) -> Test = Test;\n    = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c8b78c4ac556ffcf13b8119fb11a4f4e91ebc193", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n fn main() {\n     struct A<X: ?Sized>(X);"}, {"sha": "1b1a584a01ff1bc24e4b3872339d2b0bc1fee63a", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-50940-with-feature.rs:1:12\n+   |\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/issue-50940-with-feature.rs:5:5\n+  --> $DIR/issue-50940-with-feature.rs:6:5\n    |\n LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n@@ -8,6 +17,6 @@ LL |     A as fn(str) -> A<str>;\n    = note: required because it appears within the type `A<str>`\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4e887f32753f1ea15da3fb823bae4232752d5ae5", "filename": "src/test/ui/unsized-locals/reference-unsized-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Freference-unsized-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Freference-unsized-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Freference-unsized-locals.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals)]\n \n fn main() {"}, {"sha": "02b7c299aa40a35f1be9e424e21cf40d37cd1b89", "filename": "src/test/ui/unsized-locals/simple-unsized-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fsimple-unsized-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Fsimple-unsized-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fsimple-unsized-locals.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals)]\n \n fn main() {"}, {"sha": "8fcb6d93d391cd4686e2a613e572c1ae332cebbd", "filename": "src/test/ui/unsized-locals/unsized-exprs-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(unused_braces, unused_parens)]\n+#![allow(incomplete_features, unused_braces, unused_parens)]\n #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n \n struct A<X: ?Sized>(X);"}, {"sha": "348629c0ff367c4ded9bb85ed4dc590735347c10", "filename": "src/test/ui/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n struct A<X: ?Sized>(X);\n "}, {"sha": "493a5425e5dce3934a73d560074842c3f705b7cd", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/unsized-exprs.rs:1:36\n+   |\n+LL | #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n+   |                                    ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/unsized-exprs.rs:22:26\n+  --> $DIR/unsized-exprs.rs:23:26\n    |\n LL |     udrop::<(i32, [u8])>((42, *foo()));\n    |                          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -9,7 +18,7 @@ LL |     udrop::<(i32, [u8])>((42, *foo()));\n    = note: tuples must have a statically known size to be initialized\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/unsized-exprs.rs:24:22\n+  --> $DIR/unsized-exprs.rs:25:22\n    |\n LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -19,7 +28,7 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    = note: structs must have a statically known size to be initialized\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/unsized-exprs.rs:26:22\n+  --> $DIR/unsized-exprs.rs:27:22\n    |\n LL |     udrop::<A<[u8]>>(A(*foo()));\n    |                      ^ doesn't have a size known at compile-time\n@@ -28,6 +37,6 @@ LL |     udrop::<A<[u8]>>(A(*foo()));\n    = note: required because it appears within the type `A<[u8]>`\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "1d0f39881b700ec6958c1970589cf3d0f19a5303", "filename": "src/test/ui/unsized-locals/unsized-exprs2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n \n struct A<X: ?Sized>(X);\n "}, {"sha": "fac16b8e07ee2714b56081a390d06d040c405a11", "filename": "src/test/ui/unsized-locals/unsized-exprs2.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,12 +1,21 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/unsized-exprs2.rs:1:36\n+   |\n+LL | #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n+   |                                    ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n-  --> $DIR/unsized-exprs2.rs:22:5\n+  --> $DIR/unsized-exprs2.rs:23:5\n    |\n LL |     udrop::<[u8]>(foo()[..]);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     cannot move out of here\n    |     move occurs because value has type `[u8]`, which does not implement the `Copy` trait\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0508`."}, {"sha": "c8b502b271d9898a04441f85c34c002bb8d4759c", "filename": "src/test/ui/unsized-locals/unsized-index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -5,6 +5,7 @@\n // Tightening the bound now could be a breaking change. Although no crater\n // regression were observed (https://github.com/rust-lang/rust/pull/59527),\n // let's be conservative and just add a test for this.\n+#![allow(incomplete_features)]\n #![feature(unsized_locals, unsized_fn_params)]\n \n use std::ops;"}, {"sha": "15eeeb930333935baec43494f1c8acaada207c43", "filename": "src/test/ui/unsized-locals/unsized-parameters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d7a64a5843b35e9e27ba1c8f725ff3cde35d0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs?ref=953d7a64a5843b35e9e27ba1c8f725ff3cde35d0", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals, unsized_fn_params)]\n \n pub fn f0(_f: dyn FnOnce()) {}"}]}