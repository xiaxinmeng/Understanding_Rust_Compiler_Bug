{"sha": "9d995d283289165278761a278bf5530e2336d348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOTk1ZDI4MzI4OTE2NTI3ODc2MWEyNzhiZjU1MzBlMjMzNmQzNDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-02T08:29:24Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-02T14:48:50Z"}, "message": "Rollup merge of #47942 - estebank:macro-spans, r=nikomatsakis Minimize weird spans involving macro context Sometimes the parser attempts to synthesize spans from within a macro context with the span for the captured argument, leading to non-sensical spans with very bad output. Given that an incorrect span is worse than a partially incomplete span, when detecting this situation return only one of the spans without merging them. Fix #32072, #47778. CC #23480.", "tree": {"sha": "de93d75b82814593ba358f28699234643bcd8b36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de93d75b82814593ba358f28699234643bcd8b36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d995d283289165278761a278bf5530e2336d348", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlp0elIACgkQ/vbIBR0O\nATy8qA/7B2R+CQB618BWJSw4+kAtM8re832JwHR+TKLMqcfthHwFG9/lg/XNhxlB\nLU1a5pQCY4+8t0S+wU+2F+2i4D4q5Zh90KwnAWqH1NAacUxf1Ihp69Yqg+0m+UkV\nr+o2oKJa+6us5eobakAei6W3VAJaaZYRF9dEA/vXKNT7IlNKe4Wuz0jCoW+nMQBP\nut2udjytZ2OU8wI8hlvKyCKym+scfxc3hHUArIGC6ROMzLh3cyPwaqRchbpoz3oe\nu2UpIeMSVo6SjvYt6AA12wLE4kHb+EoK1eLO+HucITy/2upq70pGljseUad+eb1k\nTnx5iv3fsCYfeCNF90LCAiY4IjghsfgH1tjZ3IjlaDeujNuEffBpFyQ9EpKFwKHc\nEn3hl5+c1A42ePMZx0h8jztj+epKZyJhtQfFNpZxsOUz/5VfGyGlvCGQAcNh8YI2\nCmiPYroDsPpNAY7SmoQXe5DGFdSuF22Hwd6qEOWFN0ab60ulc6SRQSxrZ/VLyBgG\nKcnwwr2VYDTYttAFBYLqnH8CzetQyMqSbYXixcl6EWA8/HKBqvQo8S/vf36wXzjj\nxTQab0ftc5WEUBZ6/9rfBa3jmOFsDc7QBQcsSFEZuVYFm/6dURP6OFV8WYU4uLIF\nx+BNU+GPORK42vvVGbnNqsutSrWjiawoH9S0ectZQBKW8w8Dc/c=\n=5HS5\n-----END PGP SIGNATURE-----", "payload": "tree de93d75b82814593ba358f28699234643bcd8b36\nparent 7c6380cdcf60269bd11457eb00e8d18f4f6955f6\nparent aaec60836761da35a8d0cf6179769eb9bc9f63c3\nauthor kennytm <kennytm@gmail.com> 1517560164 +0800\ncommitter kennytm <kennytm@gmail.com> 1517582930 +0800\n\nRollup merge of #47942 - estebank:macro-spans, r=nikomatsakis Minimize weird spans involving macro context Sometimes the parser attempts to synthesize spans from within a macro context with the span for the captured argument, leading to non-sensical spans with very bad output. Given that an incorrect span is worse than a partially incomplete span, when detecting this situation return only one of the spans without merging them. Fix #32072, #47778. CC #23480.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d995d283289165278761a278bf5530e2336d348", "html_url": "https://github.com/rust-lang/rust/commit/9d995d283289165278761a278bf5530e2336d348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d995d283289165278761a278bf5530e2336d348/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "html_url": "https://github.com/rust-lang/rust/commit/7c6380cdcf60269bd11457eb00e8d18f4f6955f6"}, {"sha": "aaec60836761da35a8d0cf6179769eb9bc9f63c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaec60836761da35a8d0cf6179769eb9bc9f63c3", "html_url": "https://github.com/rust-lang/rust/commit/aaec60836761da35a8d0cf6179769eb9bc9f63c3"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "294506625bc05bc1c07f9ae6f3b3816630821b66", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9d995d283289165278761a278bf5530e2336d348/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d995d283289165278761a278bf5530e2336d348/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=9d995d283289165278761a278bf5530e2336d348", "patch": "@@ -347,13 +347,24 @@ impl Span {\n \n     /// Return a `Span` that would enclose both `self` and `end`.\n     pub fn to(self, end: Span) -> Span {\n-        let span = self.data();\n-        let end = end.data();\n+        let span_data = self.data();\n+        let end_data = end.data();\n+        // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n+        // Return the macro span on its own to avoid weird diagnostic output. It is preferable to\n+        // have an incomplete span than a completely nonsensical one.\n+        if span_data.ctxt != end_data.ctxt {\n+            if span_data.ctxt == SyntaxContext::empty() {\n+                return end;\n+            } else if end_data.ctxt == SyntaxContext::empty() {\n+                return self;\n+            }\n+            // both span fall within a macro\n+            // FIXME(estebank) check if it is the *same* macro\n+        }\n         Span::new(\n-            cmp::min(span.lo, end.lo),\n-            cmp::max(span.hi, end.hi),\n-            // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n-            if span.ctxt == SyntaxContext::empty() { end.ctxt } else { span.ctxt },\n+            cmp::min(span_data.lo, end_data.lo),\n+            cmp::max(span_data.hi, end_data.hi),\n+            if span_data.ctxt == SyntaxContext::empty() { end_data.ctxt } else { span_data.ctxt },\n         )\n     }\n "}, {"sha": "bfc137fc7b26d3cccf9f18fa4b9cfbd9c6d693ef", "filename": "src/test/ui/macros/span-covering-argument-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9d995d283289165278761a278bf5530e2336d348/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d995d283289165278761a278bf5530e2336d348/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs?ref=9d995d283289165278761a278bf5530e2336d348", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! bad {\n+    ($s:ident whatever) => {\n+        {\n+            let $s = 0;\n+            *&mut $s = 0;\n+            //~^ ERROR cannot borrow immutable local variable `foo` as mutable [E0596]\n+        }\n+    }\n+}\n+\n+fn main() {\n+    bad!(foo whatever);\n+}"}, {"sha": "677d2f10fd6c9dfdcdca2330526be0a1514a6875", "filename": "src/test/ui/macros/span-covering-argument-1.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d995d283289165278761a278bf5530e2336d348/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d995d283289165278761a278bf5530e2336d348/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr?ref=9d995d283289165278761a278bf5530e2336d348", "patch": "@@ -0,0 +1,13 @@\n+error[E0596]: cannot borrow immutable local variable `foo` as mutable\n+  --> $DIR/span-covering-argument-1.rs:15:19\n+   |\n+14 |             let $s = 0;\n+   |                 -- consider changing this to `mut $s`\n+15 |             *&mut $s = 0;\n+   |                   ^^ cannot borrow mutably\n+...\n+22 |     bad!(foo whatever);\n+   |     ------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "728cd12e2c6855c8648e8592244db856a4ffc5f7", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d995d283289165278761a278bf5530e2336d348/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d995d283289165278761a278bf5530e2336d348/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=9d995d283289165278761a278bf5530e2336d348", "patch": "@@ -1,8 +1,8 @@\n warning: struct is never used: `S`\n-  --> $DIR/macro-span-replacement.rs:17:9\n+  --> $DIR/macro-span-replacement.rs:17:14\n    |\n 17 |         $b $a; //~ WARN struct is never used\n-   |         ^^^^^^\n+   |              ^\n ...\n 22 |     m!(S struct);\n    |     ------------- in this macro invocation"}]}