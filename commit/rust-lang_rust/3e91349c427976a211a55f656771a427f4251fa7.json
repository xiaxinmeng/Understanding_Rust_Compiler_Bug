{"sha": "3e91349c427976a211a55f656771a427f4251fa7", "node_id": "C_kwDOAAsO6NoAKDNlOTEzNDljNDI3OTc2YTIxMWE1NWY2NTY3NzFhNDI3ZjQyNTFmYTc", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-20T21:05:09Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-06-10T09:12:55Z"}, "message": "Uplift improved version of `clippy::cmp_nan` to rustc", "tree": {"sha": "70919d5685d28e62dd3bb4eacf4a662c0b620f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70919d5685d28e62dd3bb4eacf4a662c0b620f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e91349c427976a211a55f656771a427f4251fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e91349c427976a211a55f656771a427f4251fa7", "html_url": "https://github.com/rust-lang/rust/commit/3e91349c427976a211a55f656771a427f4251fa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e91349c427976a211a55f656771a427f4251fa7/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3681285df77af155fe0f34c64226f4ea89c7150b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3681285df77af155fe0f34c64226f4ea89c7150b", "html_url": "https://github.com/rust-lang/rust/commit/3681285df77af155fe0f34c64226f4ea89c7150b"}], "stats": {"total": 537, "additions": 530, "deletions": 7}, "files": [{"sha": "5e13ee7b8a41d4d64d057bd2f0867a9d43c5cf9a", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -314,6 +314,11 @@ lint_invalid_from_utf8_checked = calls to `{$method}` with a invalid literal alw\n lint_invalid_from_utf8_unchecked = calls to `{$method}` with a invalid literal are undefined behavior\n     .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n \n+lint_invalid_nan_comparisons_eq_ne = incorrect NaN comparison, NaN cannot be directly compared to itself\n+    .suggestion = use `f32::is_nan()` or `f64::is_nan()` instead\n+\n+lint_invalid_nan_comparisons_lt_le_gt_ge = incorrect NaN comparison, NaN is not orderable\n+\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n "}, {"sha": "e990c771bdf50cd5180dd4ae0e5005f789b677f6", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -1434,6 +1434,36 @@ pub struct OverflowingLiteral<'a> {\n #[diag(lint_unused_comparisons)]\n pub struct UnusedComparisons;\n \n+#[derive(LintDiagnostic)]\n+pub enum InvalidNanComparisons {\n+    #[diag(lint_invalid_nan_comparisons_eq_ne)]\n+    EqNe {\n+        #[subdiagnostic]\n+        suggestion: InvalidNanComparisonsSuggestion,\n+    },\n+    #[diag(lint_invalid_nan_comparisons_lt_le_gt_ge)]\n+    LtLeGtGe,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum InvalidNanComparisonsSuggestion {\n+    #[multipart_suggestion(\n+        lint_suggestion,\n+        style = \"verbose\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    Spanful {\n+        #[suggestion_part(code = \"!\")]\n+        neg: Option<Span>,\n+        #[suggestion_part(code = \".is_nan()\")]\n+        float: Span,\n+        #[suggestion_part(code = \"\")]\n+        nan_plus_binop: Span,\n+    },\n+    #[help(lint_suggestion)]\n+    Spanless,\n+}\n+\n pub struct ImproperCTypes<'a> {\n     pub ty: Ty<'a>,\n     pub desc: &'a str,"}, {"sha": "264a59c5585a0811f89dfafdb5844e019e8bbddf", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 95, "deletions": 7, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -2,10 +2,10 @@ use crate::{\n     fluent_generated as fluent,\n     lints::{\n         AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n-        InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n-        OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n-        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange,\n-        VariantSizeDifferencesDiag,\n+        InvalidAtomicOrderingDiag, InvalidNanComparisons, InvalidNanComparisonsSuggestion,\n+        OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign, OverflowingBinHexSub,\n+        OverflowingInt, OverflowingIntHelp, OverflowingLiteral, OverflowingUInt,\n+        RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange, VariantSizeDifferencesDiag,\n     },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -113,13 +113,35 @@ declare_lint! {\n     \"detects enums with widely varying variant sizes\"\n }\n \n+declare_lint! {\n+    /// The `invalid_nan_comparisons` lint checks comparison with `f32::NAN` or `f64::NAN`\n+    /// as one of the operand.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let a = 2.3f32;\n+    /// if a == f32::NAN {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// NaN does not compare meaningfully to anything \u2013 not\n+    /// even itself \u2013 so those comparisons are always false.\n+    INVALID_NAN_COMPARISONS,\n+    Warn,\n+    \"detects invalid floating point NaN comparisons\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n     negated_expr_id: Option<hir::HirId>,\n }\n \n-impl_lint_pass!(TypeLimits => [UNUSED_COMPARISONS, OVERFLOWING_LITERALS]);\n+impl_lint_pass!(TypeLimits => [UNUSED_COMPARISONS, OVERFLOWING_LITERALS, INVALID_NAN_COMPARISONS]);\n \n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n@@ -486,6 +508,68 @@ fn lint_literal<'tcx>(\n     }\n }\n \n+fn lint_nan<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx hir::Expr<'tcx>,\n+    binop: hir::BinOp,\n+    l: &'tcx hir::Expr<'tcx>,\n+    r: &'tcx hir::Expr<'tcx>,\n+) {\n+    fn is_nan(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+        let expr = expr.peel_blocks().peel_borrows();\n+        match expr.kind {\n+            ExprKind::Path(qpath) => {\n+                let Some(def_id) = cx.typeck_results().qpath_res(&qpath, expr.hir_id).opt_def_id() else { return false; };\n+\n+                matches!(cx.tcx.get_diagnostic_name(def_id), Some(sym::f32_nan | sym::f64_nan))\n+            }\n+            _ => false,\n+        }\n+    }\n+\n+    fn eq_ne(\n+        e: &hir::Expr<'_>,\n+        l: &hir::Expr<'_>,\n+        r: &hir::Expr<'_>,\n+        f: impl FnOnce(Span, Span) -> InvalidNanComparisonsSuggestion,\n+    ) -> InvalidNanComparisons {\n+        let suggestion =\n+            if let Some(l_span) = l.span.find_ancestor_inside(e.span) &&\n+                let Some(r_span) = r.span.find_ancestor_inside(e.span) {\n+                f(l_span, r_span)\n+            } else {\n+                InvalidNanComparisonsSuggestion::Spanless\n+            };\n+\n+        InvalidNanComparisons::EqNe { suggestion }\n+    }\n+\n+    let lint = match binop.node {\n+        hir::BinOpKind::Eq | hir::BinOpKind::Ne if is_nan(cx, l) => {\n+            eq_ne(e, l, r, |l_span, r_span| InvalidNanComparisonsSuggestion::Spanful {\n+                nan_plus_binop: l_span.until(r_span),\n+                float: r_span.shrink_to_hi(),\n+                neg: (binop.node == hir::BinOpKind::Ne).then(|| r_span.shrink_to_lo()),\n+            })\n+        }\n+        hir::BinOpKind::Eq | hir::BinOpKind::Ne if is_nan(cx, r) => {\n+            eq_ne(e, l, r, |l_span, r_span| InvalidNanComparisonsSuggestion::Spanful {\n+                nan_plus_binop: l_span.shrink_to_hi().to(r_span),\n+                float: l_span.shrink_to_hi(),\n+                neg: (binop.node == hir::BinOpKind::Ne).then(|| l_span.shrink_to_lo()),\n+            })\n+        }\n+        hir::BinOpKind::Lt | hir::BinOpKind::Le | hir::BinOpKind::Gt | hir::BinOpKind::Ge\n+            if is_nan(cx, l) || is_nan(cx, r) =>\n+        {\n+            InvalidNanComparisons::LtLeGtGe\n+        }\n+        _ => return,\n+    };\n+\n+    cx.emit_spanned_lint(INVALID_NAN_COMPARISONS, e.span, lint);\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx hir::Expr<'tcx>) {\n         match e.kind {\n@@ -496,8 +580,12 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n                 }\n             }\n             hir::ExprKind::Binary(binop, ref l, ref r) => {\n-                if is_comparison(binop) && !check_limits(cx, binop, &l, &r) {\n-                    cx.emit_spanned_lint(UNUSED_COMPARISONS, e.span, UnusedComparisons);\n+                if is_comparison(binop) {\n+                    if !check_limits(cx, binop, &l, &r) {\n+                        cx.emit_spanned_lint(UNUSED_COMPARISONS, e.span, UnusedComparisons);\n+                    } else {\n+                        lint_nan(cx, e, binop, l, r);\n+                    }\n                 }\n             }\n             hir::ExprKind::Lit(ref lit) => lint_literal(cx, self, e, lit),"}, {"sha": "2a20e50fa45433ed6674701df1d1007a680a6a52", "filename": "tests/ui/issues/issue-50811.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Fissues%2Fissue-50811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Fissues%2Fissue-50811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-50811.rs?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(test)]\n+#![allow(invalid_nan_comparisons)]\n \n extern crate test;\n "}, {"sha": "feafc6c1b8c132843faf0ab3f403d3b689924329", "filename": "tests/ui/lint/invalid-nan-comparison-suggestion.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.fixed?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+// run-rustfix\n+\n+fn main() {\n+    let x = 5f32;\n+    let _ = x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = !x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+\n+    let x = 5f64;\n+    let _ = x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = !x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if !b.is_nan() {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if !b.is_nan() {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let _ =\n+        !b.is_nan();\n+\n+    #[allow(unused_macros)]\n+    macro_rules! nan { () => { f32::NAN }; }\n+    macro_rules! number { () => { 5f32 }; }\n+\n+    let _ = number!().is_nan();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = !number!().is_nan();\n+    //~^ WARN incorrect NaN comparison\n+}"}, {"sha": "ad5eb66e5f17dfa3db7162af475f81a07085f6e1", "filename": "tests/ui/lint/invalid-nan-comparison-suggestion.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.rs?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// run-rustfix\n+\n+fn main() {\n+    let x = 5f32;\n+    let _ = x == f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    let _ = x != f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+\n+    let x = 5f64;\n+    let _ = x == f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    let _ = x != f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if b != &f32::NAN {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if b != { &f32::NAN } {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let _ =\n+        b != {\n+    //~^ WARN incorrect NaN comparison\n+            &f32::NAN\n+        };\n+\n+    #[allow(unused_macros)]\n+    macro_rules! nan { () => { f32::NAN }; }\n+    macro_rules! number { () => { 5f32 }; }\n+\n+    let _ = nan!() == number!();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = number!() != nan!();\n+    //~^ WARN incorrect NaN comparison\n+}"}, {"sha": "c310341de07b73bc14c331eab80a19faf2957c72", "filename": "tests/ui/lint/invalid-nan-comparison-suggestion.stderr", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.stderr?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -0,0 +1,114 @@\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:6:13\n+   |\n+LL |     let _ = x == f32::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(invalid_nan_comparisons)]` on by default\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x == f32::NAN;\n+LL +     let _ = x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:8:13\n+   |\n+LL |     let _ = x != f32::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x != f32::NAN;\n+LL +     let _ = !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:12:13\n+   |\n+LL |     let _ = x == f64::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x == f64::NAN;\n+LL +     let _ = x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:14:13\n+   |\n+LL |     let _ = x != f64::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x != f64::NAN;\n+LL +     let _ = !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:18:8\n+   |\n+LL |     if b != &f32::NAN {}\n+   |        ^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     if b != &f32::NAN {}\n+LL +     if !b.is_nan() {}\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:22:8\n+   |\n+LL |     if b != { &f32::NAN } {}\n+   |        ^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     if b != { &f32::NAN } {}\n+LL +     if !b.is_nan() {}\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:26:9\n+   |\n+LL | /         b != {\n+LL | |\n+LL | |             &f32::NAN\n+LL | |         };\n+   | |_________^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -         b != {\n+LL +         !b.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:35:13\n+   |\n+LL |     let _ = nan!() == number!();\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = nan!() == number!();\n+LL +     let _ = number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:37:13\n+   |\n+LL |     let _ = number!() != nan!();\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = number!() != nan!();\n+LL +     let _ = !number!().is_nan();\n+   |\n+\n+warning: 9 warnings emitted\n+"}, {"sha": "d7e793ca58301335ab6fbeb12ecae6a6330ae18f", "filename": "tests/ui/lint/invalid-nan-comparison.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison.rs?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -0,0 +1,51 @@\n+// check-pass\n+\n+fn main() {\n+    f32();\n+    f64();\n+}\n+\n+const TEST: bool = 5f32 == f32::NAN;\n+//~^ WARN incorrect NaN comparison\n+\n+fn f32() {\n+    macro_rules! number { () => { 5f32 }; }\n+    let x = number!();\n+    x == f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x != f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x < f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x > f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x <= f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x >= f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    number!() == f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    f32::NAN != number!();\n+    //~^ WARN incorrect NaN comparison\n+}\n+\n+fn f64() {\n+    macro_rules! number { () => { 5f64 }; }\n+    let x = number!();\n+    x == f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x != f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x < f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x > f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x <= f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x >= f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    number!() == f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    f64::NAN != number!();\n+    //~^ WARN incorrect NaN comparison\n+}"}, {"sha": "054c06d38b30be60fa404d7d0c2626e973e7482b", "filename": "tests/ui/lint/invalid-nan-comparison.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e91349c427976a211a55f656771a427f4251fa7/tests%2Fui%2Flint%2Finvalid-nan-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison.stderr?ref=3e91349c427976a211a55f656771a427f4251fa7", "patch": "@@ -0,0 +1,159 @@\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:8:20\n+   |\n+LL | const TEST: bool = 5f32 == f32::NAN;\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(invalid_nan_comparisons)]` on by default\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL - const TEST: bool = 5f32 == f32::NAN;\n+LL + const TEST: bool = 5f32.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:14:5\n+   |\n+LL |     x == f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x == f32::NAN;\n+LL +     x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:16:5\n+   |\n+LL |     x != f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x != f32::NAN;\n+LL +     !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:18:5\n+   |\n+LL |     x < f32::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:20:5\n+   |\n+LL |     x > f32::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:22:5\n+   |\n+LL |     x <= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:24:5\n+   |\n+LL |     x >= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:26:5\n+   |\n+LL |     number!() == f32::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     number!() == f32::NAN;\n+LL +     number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:28:5\n+   |\n+LL |     f32::NAN != number!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     f32::NAN != number!();\n+LL +     !number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:35:5\n+   |\n+LL |     x == f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x == f64::NAN;\n+LL +     x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:37:5\n+   |\n+LL |     x != f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x != f64::NAN;\n+LL +     !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:39:5\n+   |\n+LL |     x < f64::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:41:5\n+   |\n+LL |     x > f64::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:43:5\n+   |\n+LL |     x <= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:45:5\n+   |\n+LL |     x >= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:47:5\n+   |\n+LL |     number!() == f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     number!() == f64::NAN;\n+LL +     number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:49:5\n+   |\n+LL |     f64::NAN != number!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     f64::NAN != number!();\n+LL +     !number!().is_nan();\n+   |\n+\n+warning: 17 warnings emitted\n+"}]}