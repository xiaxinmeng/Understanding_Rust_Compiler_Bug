{"sha": "07414417c58cf9e1ad1d75730007c683bd7dfae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NDE0NDE3YzU4Y2Y5ZTFhZDFkNzU3MzAwMDdjNjgzYmQ3ZGZhZTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T22:50:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T22:50:39Z"}, "message": "typeck: restructure check_field a bit", "tree": {"sha": "617adf4f1af938dc11cf619f313eba5ef5e09fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/617adf4f1af938dc11cf619f313eba5ef5e09fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07414417c58cf9e1ad1d75730007c683bd7dfae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07414417c58cf9e1ad1d75730007c683bd7dfae7", "html_url": "https://github.com/rust-lang/rust/commit/07414417c58cf9e1ad1d75730007c683bd7dfae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07414417c58cf9e1ad1d75730007c683bd7dfae7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01e96dc5832b85f87acb1a651e33d12ac9b37cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e96dc5832b85f87acb1a651e33d12ac9b37cc5", "html_url": "https://github.com/rust-lang/rust/commit/01e96dc5832b85f87acb1a651e33d12ac9b37cc5"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "57e82714150e8fc6f86a79de366e86a0364ef356", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/07414417c58cf9e1ad1d75730007c683bd7dfae7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07414417c58cf9e1ad1d75730007c683bd7dfae7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=07414417c58cf9e1ad1d75730007c683bd7dfae7", "patch": "@@ -1338,36 +1338,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Some((did, field_ty)) = private_candidate {\n             self.ban_private_field_access(expr, expr_t, field, did);\n-            field_ty\n-        } else if field.name == kw::Invalid {\n-            self.tcx().types.err\n+            return field_ty;\n+        }\n+\n+        if field.name == kw::Invalid {\n         } else if self.method_exists(field, expr_t, expr.hir_id, true) {\n             self.ban_take_value_of_method(expr, expr_t, field);\n-            self.tcx().types.err\n-        } else {\n-            if !expr_t.is_primitive_ty() {\n-                let mut err = self.no_such_field_err(field.span, field, expr_t);\n+        } else if !expr_t.is_primitive_ty() {\n+            let mut err = self.no_such_field_err(field.span, field, expr_t);\n \n-                match expr_t.sty {\n-                    ty::Adt(def, _) if !def.is_enum() => {\n-                        self.suggest_fields_on_recordish(&mut err, def, field);\n-                    }\n-                    ty::Array(_, len) => {\n-                        self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n-                    }\n-                    ty::RawPtr(..) => {\n-                        self.suggest_first_deref_field(&mut err, expr, base, field);\n-                    }\n-                    _ => {}\n+            match expr_t.sty {\n+                ty::Adt(def, _) if !def.is_enum() => {\n+                    self.suggest_fields_on_recordish(&mut err, def, field);\n                 }\n-                err\n-            } else {\n-                type_error_struct!(self.tcx().sess, field.span, expr_t, E0610,\n-                                   \"`{}` is a primitive type and therefore doesn't have fields\",\n-                                   expr_t)\n-            }.emit();\n-            self.tcx().types.err\n+                ty::Array(_, len) => {\n+                    self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n+                }\n+                ty::RawPtr(..) => {\n+                    self.suggest_first_deref_field(&mut err, expr, base, field);\n+                }\n+                _ => {}\n+            }\n+\n+            err.emit();\n+        } else {\n+            type_error_struct!(\n+                self.tcx().sess,\n+                field.span,\n+                expr_t,\n+                E0610,\n+                \"`{}` is a primitive type and therefore doesn't have fields\",\n+                expr_t\n+            )\n+            .emit();\n         }\n+\n+        self.tcx().types.err\n     }\n \n     fn ban_private_field_access("}]}