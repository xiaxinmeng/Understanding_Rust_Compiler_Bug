{"sha": "50375db36c65a1c9669e3becf428da7c6e84ce6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzc1ZGIzNmM2NWExYzk2NjllM2JlY2Y0MjhkYTdjNmU4NGNlNmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T11:59:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T11:59:34Z"}, "message": "Rustfmt", "tree": {"sha": "d6acf531c3a45879e2797244e2bc5c00e7940a75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6acf531c3a45879e2797244e2bc5c00e7940a75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50375db36c65a1c9669e3becf428da7c6e84ce6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50375db36c65a1c9669e3becf428da7c6e84ce6b", "html_url": "https://github.com/rust-lang/rust/commit/50375db36c65a1c9669e3becf428da7c6e84ce6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50375db36c65a1c9669e3becf428da7c6e84ce6b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "html_url": "https://github.com/rust-lang/rust/commit/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd"}], "stats": {"total": 94, "additions": 48, "deletions": 46}, "files": [{"sha": "238f06f26d2b3e53ac07ae73977dd8346f49635e", "filename": "src/abi.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/50375db36c65a1c9669e3becf428da7c6e84ce6b/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375db36c65a1c9669e3becf428da7c6e84ce6b/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=50375db36c65a1c9669e3becf428da7c6e84ce6b", "patch": "@@ -272,15 +272,9 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n     let ret_layout = fx.layout_of(fx.return_type());\n     let output_pass_mode = get_pass_mode(fx.tcx, fx.self_sig().abi, fx.return_type(), true);\n     let ret_param = match output_pass_mode {\n-        PassMode::NoPass => {\n-            None\n-        }\n-        PassMode::ByVal(ret_ty) => {\n-            None\n-        }\n-        PassMode::ByRef => {\n-            Some(fx.bcx.append_ebb_param(start_ebb, types::I64))\n-        }\n+        PassMode::NoPass => None,\n+        PassMode::ByVal(ret_ty) => None,\n+        PassMode::ByRef => Some(fx.bcx.append_ebb_param(start_ebb, types::I64)),\n     };\n \n     enum ArgKind {\n@@ -320,7 +314,10 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n         PassMode::NoPass => {\n             let null = fx.bcx.ins().iconst(types::I64, 0);\n             //unimplemented!(\"pass mode nopass\");\n-            fx.local_map.insert(RETURN_PLACE, CPlace::Addr(null, fx.layout_of(fx.return_type())));\n+            fx.local_map.insert(\n+                RETURN_PLACE,\n+                CPlace::Addr(null, fx.layout_of(fx.return_type())),\n+            );\n         }\n         PassMode::ByVal(ret_ty) => {\n             let var = Variable(RETURN_PLACE);\n@@ -367,20 +364,25 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n         let place = CPlace::from_stack_slot(fx, stack_slot, ty);\n \n         match arg_kind {\n-            ArgKind::Normal(ebb_param) => {\n-                match get_pass_mode(fx.tcx, fx.self_sig().abi, ty, false) {\n-                    PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n-                    PassMode::ByVal(_) => place.write_cvalue(fx, CValue::ByVal(ebb_param, place.layout())),\n-                    PassMode::ByRef => place.write_cvalue(fx, CValue::ByRef(ebb_param, place.layout())),\n+            ArgKind::Normal(ebb_param) => match get_pass_mode(fx.tcx, fx.self_sig().abi, ty, false)\n+            {\n+                PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+                PassMode::ByVal(_) => {\n+                    place.write_cvalue(fx, CValue::ByVal(ebb_param, place.layout()))\n                 }\n-            }\n+                PassMode::ByRef => place.write_cvalue(fx, CValue::ByRef(ebb_param, place.layout())),\n+            },\n             ArgKind::Spread(ebb_params) => {\n                 for (i, ebb_param) in ebb_params.into_iter().enumerate() {\n                     let sub_place = place.place_field(fx, mir::Field::new(i));\n                     match get_pass_mode(fx.tcx, fx.self_sig().abi, sub_place.layout().ty, false) {\n                         PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n-                        PassMode::ByVal(_) => sub_place.write_cvalue(fx, CValue::ByVal(ebb_param, sub_place.layout())),\n-                        PassMode::ByRef => sub_place.write_cvalue(fx, CValue::ByRef(ebb_param, sub_place.layout())),\n+                        PassMode::ByVal(_) => {\n+                            sub_place.write_cvalue(fx, CValue::ByVal(ebb_param, sub_place.layout()))\n+                        }\n+                        PassMode::ByRef => {\n+                            sub_place.write_cvalue(fx, CValue::ByRef(ebb_param, sub_place.layout()))\n+                        }\n                     }\n                 }\n             }\n@@ -450,9 +452,9 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             .collect::<Vec<_>>()\n     };\n \n-    let destination = destination.as_ref().map(|(place, bb)| {\n-        (trans_place(fx, place), *bb)\n-    });\n+    let destination = destination\n+        .as_ref()\n+        .map(|(place, bb)| (trans_place(fx, place), *bb));\n \n     if codegen_intrinsic_call(fx, fn_ty, sig, &args, destination) {\n         return;\n@@ -473,14 +475,13 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n \n     let call_args: Vec<Value> = return_ptr\n         .into_iter()\n-        .chain(\n-            args.into_iter()\n-                .map(|arg| match get_pass_mode(fx.tcx, sig.abi, arg.layout().ty, false) {\n+        .chain(args.into_iter().map(|arg| {\n+            match get_pass_mode(fx.tcx, sig.abi, arg.layout().ty, false) {\n                 PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n                 PassMode::ByVal(_) => arg.load_value(fx),\n                 PassMode::ByRef => arg.force_stack(fx),\n-            }),\n-        ).collect::<Vec<_>>();\n+            }\n+        })).collect::<Vec<_>>();\n \n     let inst = match func {\n         CValue::Func(func, _) => fx.bcx.ins().call(func, &call_args),\n@@ -513,7 +514,7 @@ pub fn codegen_return(fx: &mut FunctionCx) {\n     match get_pass_mode(fx.tcx, fx.self_sig().abi, fx.return_type(), true) {\n         PassMode::NoPass | PassMode::ByRef => {\n             fx.bcx.ins().return_(&[]);\n-        },\n+        }\n         PassMode::ByVal(_) => {\n             let place = fx.get_local_place(RETURN_PLACE);\n             let ret_val = place.to_cvalue(fx).load_value(fx);\n@@ -537,10 +538,7 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let ret = match destination {\n                 Some((place, _)) => place,\n                 None => {\n-                    println!(\n-                        \"codegen_call(fx, _, {:?}, {:?})\",\n-                        args, destination\n-                    );\n+                    println!(\"codegen_call(fx, _, {:?}, {:?})\", args, destination);\n                     // Insert non returning intrinsics here\n                     match intrinsic {\n                         \"abort\" => {"}, {"sha": "928760859134b6c95b6f3c3a0fd420670341f574", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/50375db36c65a1c9669e3becf428da7c6e84ce6b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375db36c65a1c9669e3becf428da7c6e84ce6b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=50375db36c65a1c9669e3becf428da7c6e84ce6b", "patch": "@@ -271,29 +271,33 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     }\n                 }\n             }\n-            \n+\n             std::mem::replace(&mut cx.defined_functions, Vec::new())\n         };\n \n         tcx.sess.warn(\"Compiled everything\");\n \n         // TODO: this doesn't work most of the time\n         if false {\n-            let call_instance = collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0.into_iter().find_map(|mono_item| {\n-                let inst = match mono_item {\n-                    MonoItem::Fn(inst) => inst,\n-                    _ => return None,\n-                };\n-\n-                //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n-                if tcx.absolute_item_path_str(inst.def_id()) == \"example::option_unwrap_or\" {\n-                    Some(inst)\n-                } else {\n-                    None\n-                }\n-            }).unwrap();\n+            let call_instance =\n+                collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager)\n+                    .0\n+                    .into_iter()\n+                    .find_map(|mono_item| {\n+                        let inst = match mono_item {\n+                            MonoItem::Fn(inst) => inst,\n+                            _ => return None,\n+                        };\n+\n+                        //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n+                        if tcx.absolute_item_path_str(inst.def_id()) == \"example::option_unwrap_or\"\n+                        {\n+                            Some(inst)\n+                        } else {\n+                            None\n+                        }\n+                    }).unwrap();\n \n-            \n             let fn_ty = call_instance.ty(tcx);\n             let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n             let def_path_based_names ="}]}