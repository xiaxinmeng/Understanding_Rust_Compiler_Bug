{"sha": "d3ae56d755f912471e4c36982a069317842fa495", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYWU1NmQ3NTVmOTEyNDcxZTRjMzY5ODJhMDY5MzE3ODQyZmE0OTU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-25T22:27:27Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-25T22:35:09Z"}, "message": "Rollup merge of #34403 - jonathandturner:move_liberror, r=alexcrichton\n\nThis PR refactors the 'errors' part of libsyntax into its own crate (librustc_errors).  This is the first part of a few refactorings to simplify error reporting and potentially support more output formats (like a standardized JSON output and possibly an --explain mode that can work with the user's code), though this PR stands on its own and doesn't assume further changes.\n\nAs part of separating out the errors crate, I have also refactored the code position portion of codemap into its own crate (libsyntax_pos).  While it's helpful to have the common code positions in a separate crate for the new errors crate, this may also enable further simplifications in the future.", "tree": {"sha": "b2056ff0adb5634e0793e94b98af46cd19709390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2056ff0adb5634e0793e94b98af46cd19709390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ae56d755f912471e4c36982a069317842fa495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ae56d755f912471e4c36982a069317842fa495", "html_url": "https://github.com/rust-lang/rust/commit/d3ae56d755f912471e4c36982a069317842fa495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ae56d755f912471e4c36982a069317842fa495/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e2e31c11837f244e5039165b777ddedde5dc44d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2e31c11837f244e5039165b777ddedde5dc44d", "html_url": "https://github.com/rust-lang/rust/commit/4e2e31c11837f244e5039165b777ddedde5dc44d"}, {"sha": "bc1400600be083cfb39ffdc6f6b32153e585cd3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1400600be083cfb39ffdc6f6b32153e585cd3c", "html_url": "https://github.com/rust-lang/rust/commit/bc1400600be083cfb39ffdc6f6b32153e585cd3c"}], "stats": {"total": 4394, "additions": 2325, "deletions": 2069}, "files": [{"sha": "0bd0c70bd0519bdf39fd4315d3ed82d354c9735c", "filename": "mk/crates.mk", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -57,10 +57,10 @@ TARGET_CRATES := libc std term \\\n \t\t panic_abort panic_unwind unwind\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n-                rustc_data_structures rustc_platform_intrinsics \\\n+                rustc_data_structures rustc_platform_intrinsics rustc_errors \\\n                 rustc_plugin rustc_metadata rustc_passes rustc_save_analysis \\\n                 rustc_const_eval rustc_const_math rustc_incremental\n-HOST_CRATES := syntax syntax_ext $(RUSTC_CRATES) rustdoc fmt_macros \\\n+HOST_CRATES := syntax syntax_ext syntax_pos $(RUSTC_CRATES) rustdoc fmt_macros \\\n \t\tflate arena graphviz rbml log serialize\n TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n \n@@ -98,43 +98,45 @@ DEPS_serialize := std log\n DEPS_term := std\n DEPS_test := std getopts term native:rust_test_helpers\n \n-DEPS_syntax := std term serialize log arena libc rustc_bitflags rustc_unicode\n-DEPS_syntax_ext := syntax fmt_macros\n+DEPS_syntax := std term serialize log arena libc rustc_bitflags rustc_unicode rustc_errors syntax_pos\n+DEPS_syntax_ext := syntax syntax_pos rustc_errors fmt_macros\n+DEPS_syntax_pos := serialize\n \n DEPS_rustc_const_math := std syntax log serialize\n DEPS_rustc_const_eval := rustc_const_math rustc syntax log serialize \\\n-\t\t\t\t\t     rustc_back graphviz\n+\t\t\t     rustc_back graphviz syntax_pos\n \n DEPS_rustc := syntax fmt_macros flate arena serialize getopts rbml \\\n               log graphviz rustc_llvm rustc_back rustc_data_structures\\\n-\t\t  \t  rustc_const_math\n+\t      rustc_const_math syntax_pos rustc_errors\n DEPS_rustc_back := std syntax flate log libc\n-DEPS_rustc_borrowck := rustc log graphviz syntax rustc_mir\n+DEPS_rustc_borrowck := rustc log graphviz syntax syntax_pos rustc_errors rustc_mir\n DEPS_rustc_data_structures := std log serialize\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n                      rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n \t             rustc_trans rustc_privacy rustc_lint rustc_plugin \\\n                      rustc_metadata syntax_ext rustc_passes rustc_save_analysis rustc_const_eval \\\n-                     rustc_incremental\n-DEPS_rustc_lint := rustc log syntax rustc_const_eval\n+                     rustc_incremental syntax_pos rustc_errors\n+DEPS_rustc_errors := log libc serialize syntax_pos\n+DEPS_rustc_lint := rustc log syntax syntax_pos rustc_const_eval\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n-DEPS_rustc_metadata := rustc syntax rbml rustc_const_math\n-DEPS_rustc_passes := syntax rustc core rustc_const_eval\n-DEPS_rustc_mir := rustc syntax rustc_const_math rustc_const_eval rustc_bitflags\n-DEPS_rustc_resolve := arena rustc log syntax\n+DEPS_rustc_metadata := rustc syntax syntax_pos rustc_errors rbml rustc_const_math\n+DEPS_rustc_passes := syntax syntax_pos rustc core rustc_const_eval rustc_errors\n+DEPS_rustc_mir := rustc syntax syntax_pos rustc_const_math rustc_const_eval rustc_bitflags\n+DEPS_rustc_resolve := arena rustc log syntax syntax_pos rustc_errors\n DEPS_rustc_platform_intrinsics := std\n-DEPS_rustc_plugin := rustc rustc_metadata syntax\n-DEPS_rustc_privacy := rustc log syntax\n+DEPS_rustc_plugin := rustc rustc_metadata syntax syntax_pos rustc_errors\n+DEPS_rustc_privacy := rustc log syntax syntax_pos\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n                     log syntax serialize rustc_llvm rustc_platform_intrinsics \\\n-                    rustc_const_math rustc_const_eval rustc_incremental\n-DEPS_rustc_incremental := rbml rustc serialize rustc_data_structures\n-DEPS_rustc_save_analysis := rustc log syntax serialize\n-DEPS_rustc_typeck := rustc syntax rustc_platform_intrinsics rustc_const_math \\\n-                     rustc_const_eval\n+                    rustc_const_math rustc_const_eval rustc_incremental rustc_errors syntax_pos\n+DEPS_rustc_incremental := rbml rustc syntax_pos serialize rustc_data_structures\n+DEPS_rustc_save_analysis := rustc log syntax syntax_pos serialize\n+DEPS_rustc_typeck := rustc syntax syntax_pos rustc_platform_intrinsics rustc_const_math \\\n+                     rustc_const_eval rustc_errors\n \n DEPS_rustdoc := rustc rustc_driver native:hoedown serialize getopts \\\n-                test rustc_lint rustc_const_eval\n+                test rustc_lint rustc_const_eval syntax_pos\n \n \n TOOL_DEPS_compiletest := test getopts log serialize"}, {"sha": "8426d5a626549b8ea22b33f3598a78090491e63f", "filename": "src/doc/book/compiler-plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcompiler-plugins.md?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -45,11 +45,11 @@ extern crate syntax;\n extern crate rustc;\n extern crate rustc_plugin;\n \n-use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::TokenTree;\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;  // trait for expr_usize\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])"}, {"sha": "884db34189240d19b1c556fc3c55988f9d1b282b", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -32,9 +32,9 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::ast::Name;\n use syntax::codemap;\n-use syntax::codemap::Pos;\n use syntax::parse::token::{self, BinOpToken, DelimToken, Lit, Token};\n use syntax::parse::lexer::TokenAndSpan;\n+use syntax_pos::Pos;\n \n fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n     fn id() -> token::Token {\n@@ -233,10 +233,10 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_\n     lo -= surrogate_pairs_pos.binary_search(&(lo as usize)).unwrap_or_else(|x| x) as u32;\n     hi -= surrogate_pairs_pos.binary_search(&(hi as usize)).unwrap_or_else(|x| x) as u32;\n \n-    let sp = codemap::Span {\n-        lo: codemap::BytePos(lo),\n-        hi: codemap::BytePos(hi),\n-        expn_id: codemap::NO_EXPANSION\n+    let sp = syntax_pos::Span {\n+        lo: syntax_pos::BytePos(lo),\n+        hi: syntax_pos::BytePos(hi),\n+        expn_id: syntax_pos::NO_EXPANSION\n     };\n \n     TokenAndSpan {"}, {"sha": "c17eadbc2ac6d53b11ee2dc8107eb36cf6bebe9d", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,6 +19,8 @@ rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "778709035bf1e406fa83253e15b2bbf35db957f7", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,7 +16,8 @@ use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, Attribute, Attribute_, MetaItem};\n use syntax::ast::MetaItemKind;\n use syntax::attr::ThinAttributesExt;\n use hir;\n-use syntax::codemap::{respan, Span, Spanned};\n+use syntax_pos::Span;\n+use syntax::codemap::{respan, Spanned};\n use syntax::ptr::P;\n use syntax::parse::token::keywords;\n use syntax::util::move_map::MoveMap;"}, {"sha": "9bb53065ec4c3d652b25c51a5e6ad86539465268", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -28,7 +28,8 @@\n use syntax::abi::Abi;\n use syntax::ast::{NodeId, CRATE_NODE_ID, Name, Attribute};\n use syntax::attr::ThinAttributesExt;\n-use syntax::codemap::{Span, Spanned};\n+use syntax::codemap::Spanned;\n+use syntax_pos::Span;\n use hir::*;\n \n use std::cmp;"}, {"sha": "aea292a76925bd138aaa0773c542e3422c13cb21", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -52,10 +52,11 @@ use std::iter;\n use syntax::ast::*;\n use syntax::attr::{ThinAttributes, ThinAttributesExt};\n use syntax::ptr::P;\n-use syntax::codemap::{respan, Spanned, Span};\n+use syntax::codemap::{respan, Spanned};\n use syntax::parse::token;\n use syntax::std_inject;\n use syntax::visit::{self, Visitor};\n+use syntax_pos::Span;\n \n pub struct LoweringContext<'a> {\n     crate_root: Option<&'static str>,"}, {"sha": "5ff3cf05187867bc2945018b02b9088feb593c46", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -29,7 +29,7 @@ use hir::{Block, FnDecl};\n use syntax::ast::{Attribute, Name, NodeId};\n use syntax::attr::ThinAttributesExt;\n use hir as ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use hir::intravisit::FnKind;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl"}, {"sha": "693d7a2edfca5cf726d366d74b3e8255bd6bdb2b", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -17,7 +17,7 @@ use hir::def_id::DefId;\n use middle::cstore::InlinedItem;\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n /// A Visitor that walks over the HIR and collects Nodes into a HIR map\n pub struct NodeCollector<'ast> {"}, {"sha": "488177e60c7414ef79c64b68781b191a31c4d7cd", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -24,8 +24,9 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID, };\n use syntax::attr::ThinAttributesExt;\n-use syntax::codemap::{Span, Spanned};\n+use syntax::codemap::Spanned;\n use syntax::visit;\n+use syntax_pos::Span;\n \n use hir::*;\n use hir::fold::Folder;"}, {"sha": "1e2144b6da8f96742d30b89258a0678ab697b162", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -36,7 +36,8 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use util::nodemap::{NodeMap, FnvHashSet};\n \n-use syntax::codemap::{self, mk_sp, respan, Span, Spanned, ExpnId};\n+use syntax_pos::{mk_sp, Span, ExpnId};\n+use syntax::codemap::{self, respan, Spanned};\n use syntax::abi::Abi;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, TokenTree, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};"}, {"sha": "3bb9b6d260255065bee28fc7986777812297d13e", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,7 +14,8 @@ use hir::{self, PatKind};\n use ty::TyCtxt;\n use util::nodemap::FnvHashMap;\n use syntax::ast;\n-use syntax::codemap::{Span, Spanned, DUMMY_SP};\n+use syntax::codemap::Spanned;\n+use syntax_pos::{Span, DUMMY_SP};\n \n use std::iter::{Enumerate, ExactSizeIterator};\n "}, {"sha": "598a2cfca1320de342cee8c50dc7d75af1c7b221", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,15 +12,16 @@ pub use self::AnnNode::*;\n \n use syntax::abi::Abi;\n use syntax::ast;\n-use syntax::codemap::{self, CodeMap, BytePos, Spanned};\n-use syntax::errors;\n+use syntax::codemap::{CodeMap, Spanned};\n use syntax::parse::token::{self, keywords, BinOpToken};\n use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, break_offset, word, space, hardbreak};\n use syntax::print::pp::{Breaks, eof};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n use syntax::print::pprust::{self as ast_pp, PrintState};\n use syntax::ptr::P;\n+use syntax_pos::{self, BytePos};\n+use errors;\n \n use hir;\n use hir::{Crate, PatKind, RegionTyParamBound, SelfKind, TraitTyParamBound, TraitBoundModifier};\n@@ -368,11 +369,11 @@ impl<'a> State<'a> {\n         self.end() // close the head-box\n     }\n \n-    pub fn bclose_(&mut self, span: codemap::Span, indented: usize) -> io::Result<()> {\n+    pub fn bclose_(&mut self, span: syntax_pos::Span, indented: usize) -> io::Result<()> {\n         self.bclose_maybe_open(span, indented, true)\n     }\n     pub fn bclose_maybe_open(&mut self,\n-                             span: codemap::Span,\n+                             span: syntax_pos::Span,\n                              indented: usize,\n                              close_box: bool)\n                              -> io::Result<()> {\n@@ -384,7 +385,7 @@ impl<'a> State<'a> {\n         }\n         Ok(())\n     }\n-    pub fn bclose(&mut self, span: codemap::Span) -> io::Result<()> {\n+    pub fn bclose(&mut self, span: syntax_pos::Span) -> io::Result<()> {\n         self.bclose_(span, indent_unit)\n     }\n \n@@ -432,7 +433,7 @@ impl<'a> State<'a> {\n                                   mut get_span: G)\n                                   -> io::Result<()>\n         where F: FnMut(&mut State, &T) -> io::Result<()>,\n-              G: FnMut(&T) -> codemap::Span\n+              G: FnMut(&T) -> syntax_pos::Span\n     {\n         self.rbox(0, b)?;\n         let len = elts.len();\n@@ -859,7 +860,7 @@ impl<'a> State<'a> {\n                           enum_definition: &hir::EnumDef,\n                           generics: &hir::Generics,\n                           name: ast::Name,\n-                          span: codemap::Span,\n+                          span: syntax_pos::Span,\n                           visibility: &hir::Visibility)\n                           -> io::Result<()> {\n         self.head(&visibility_qualified(visibility, \"enum\"))?;\n@@ -872,7 +873,7 @@ impl<'a> State<'a> {\n \n     pub fn print_variants(&mut self,\n                           variants: &[hir::Variant],\n-                          span: codemap::Span)\n+                          span: syntax_pos::Span)\n                           -> io::Result<()> {\n         self.bopen()?;\n         for v in variants {\n@@ -902,7 +903,7 @@ impl<'a> State<'a> {\n                         struct_def: &hir::VariantData,\n                         generics: &hir::Generics,\n                         name: ast::Name,\n-                        span: codemap::Span,\n+                        span: syntax_pos::Span,\n                         print_finalizer: bool)\n                         -> io::Result<()> {\n         self.print_name(name)?;\n@@ -2237,7 +2238,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn maybe_print_trailing_comment(&mut self,\n-                                        span: codemap::Span,\n+                                        span: syntax_pos::Span,\n                                         next_pos: Option<BytePos>)\n                                         -> io::Result<()> {\n         let cm = match self.cm {"}, {"sha": "c9235d063cba0981826648b5a7616d2ffd2c0998", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -49,7 +49,7 @@ use ty::relate::{RelateResult, TypeRelation};\n use traits::PredicateObligations;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n #[derive(Clone)]\n pub struct CombineFields<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {"}, {"sha": "894044296cbd6ecaf1816a3585faf7edc7424f5e", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -91,10 +91,10 @@ use std::cell::{Cell, RefCell};\n use std::char::from_u32;\n use std::fmt;\n use syntax::ast;\n-use syntax::errors::{DiagnosticBuilder, check_old_skool};\n-use syntax::codemap::{self, Pos, Span};\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_pos::{self, Pos, Span};\n+use errors::{DiagnosticBuilder, check_old_skool};\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(self,\n@@ -1933,6 +1933,6 @@ impl LifeGiver {\n \n fn name_to_dummy_lifetime(name: ast::Name) -> hir::Lifetime {\n     hir::Lifetime { id: ast::DUMMY_NODE_ID,\n-                    span: codemap::DUMMY_SP,\n+                    span: syntax_pos::DUMMY_SP,\n                     name: name }\n }"}, {"sha": "03a09917c5343bd1fce8783e2c1a524565290531", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -23,7 +23,7 @@ use super::region_inference::{TaintDirections};\n use ty::{self, TyCtxt, Binder, TypeFoldable};\n use ty::error::TypeError;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n pub struct HrMatchResult<U> {"}, {"sha": "2ea2978b2940d858a482a408b98c424a4d2394b8", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -39,9 +39,8 @@ use rustc_data_structures::unify::{self, UnificationTable};\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::fmt;\n use syntax::ast;\n-use syntax::codemap;\n-use syntax::codemap::{Span, DUMMY_SP};\n-use syntax::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n+use syntax_pos::{self, Span, DUMMY_SP};\n use util::nodemap::{FnvHashMap, FnvHashSet, NodeMap};\n \n use self::combine::CombineFields;\n@@ -1036,7 +1035,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                          -> UnitResult<'tcx>\n     {\n         self.probe(|_| {\n-            let origin = TypeOrigin::Misc(codemap::DUMMY_SP);\n+            let origin = TypeOrigin::Misc(syntax_pos::DUMMY_SP);\n             let trace = TypeTrace::types(origin, true, a, b);\n             self.sub(true, trace, &a, &b).map(|_| ())\n         })\n@@ -1813,7 +1812,7 @@ impl<'a, 'gcx, 'tcx> TypeTrace<'tcx> {\n \n     pub fn dummy(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> TypeTrace<'tcx> {\n         TypeTrace {\n-            origin: TypeOrigin::Misc(codemap::DUMMY_SP),\n+            origin: TypeOrigin::Misc(syntax_pos::DUMMY_SP),\n             values: Types(ExpectedFound {\n                 expected: tcx.types.err,\n                 found: tcx.types.err,\n@@ -1887,7 +1886,7 @@ impl RegionVariableOrigin {\n             Coercion(a) => a,\n             EarlyBoundRegion(a, _) => a,\n             LateBoundRegion(a, _, _) => a,\n-            BoundRegionInCoherence(_) => codemap::DUMMY_SP,\n+            BoundRegionInCoherence(_) => syntax_pos::DUMMY_SP,\n             UpvarRegion(_, a) => a\n         }\n     }"}, {"sha": "09ae16540c4f159666c843c18db912ddb0006ab1", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,7 +13,7 @@ use self::TypeVariableValue::*;\n use self::UndoEntry::*;\n use hir::def_id::{DefId};\n use ty::{self, Ty};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use std::cmp::min;\n use std::marker::PhantomData;"}, {"sha": "eb9dd7dfcb36f8d57818042e1c50b973f4b40ce1", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -55,8 +55,10 @@ extern crate rustc_data_structures;\n extern crate serialize;\n extern crate collections;\n extern crate rustc_const_math;\n+extern crate rustc_errors as errors;\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+#[macro_use] extern crate syntax_pos;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n \n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "207457128770da0087f06681c48ae5c7fc645131", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -40,11 +40,11 @@ use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::codemap::Span;\n-use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n use syntax::attr::ThinAttributesExt;\n+use syntax_pos::Span;\n+use errors::DiagnosticBuilder;\n use hir;\n use hir::intravisit as hir_visit;\n use hir::intravisit::{IdVisitor, IdVisitingOperation};"}, {"sha": "f92003e3bb8b7d0d484aad6c9e36886dcbca0cea", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -33,7 +33,7 @@ pub use self::LintSource::*;\n \n use std::hash;\n use std::ascii::AsciiExt;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use hir::intravisit::FnKind;\n use syntax::visit as ast_visit;\n use syntax::ast;"}, {"sha": "e856eb84ff2c3a93f33259acb9504d9dcb793fe7", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -17,7 +17,7 @@\n use hir::def::Def;\n use ty::{Ty, TyCtxt};\n \n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use hir as ast;\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "fd9463b13c055143eb208e4238b719a30ea4514f", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -39,9 +39,9 @@ use std::rc::Rc;\n use std::path::PathBuf;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::Span;\n use syntax::ptr::P;\n use syntax::parse::token::InternedString;\n+use syntax_pos::Span;\n use rustc_back::target::Target;\n use hir;\n use hir::intravisit::{IdVisitor, IdVisitingOperation, Visitor};"}, {"sha": "2b59e603cc897f7b33f80846304942b0eda1106c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -26,6 +26,7 @@ use lint;\n use std::collections::HashSet;\n use syntax::{ast, codemap};\n use syntax::attr;\n+use syntax_pos;\n \n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live NodeItem that is a\n@@ -215,7 +216,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n \n     fn visit_variant_data(&mut self, def: &hir::VariantData, _: ast::Name,\n-                        _: &hir::Generics, _: ast::NodeId, _: codemap::Span) {\n+                        _: &hir::Generics, _: ast::NodeId, _: syntax_pos::Span) {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields().iter().filter(|f| {\n@@ -478,7 +479,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n \n     fn warn_dead_code(&mut self,\n                       id: ast::NodeId,\n-                      span: codemap::Span,\n+                      span: syntax_pos::Span,\n                       name: ast::Name,\n                       node_type: &str) {\n         let name = name.as_str();"}, {"sha": "6fe98119c706088f2d68b2a645237e7d7abafe5e", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,7 +18,7 @@ use ty::{self, Ty, TyCtxt};\n use ty::MethodCall;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use hir;\n use hir::intravisit;\n use hir::intravisit::{FnKind, Visitor};"}, {"sha": "23a261400ed076690f3cddaaf93d789e916947eb", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,8 +15,8 @@ use hir::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n use syntax::ast::NodeId;\n use syntax::attr;\n-use syntax::codemap::Span;\n use syntax::entry::EntryPointType;\n+use syntax_pos::Span;\n use hir::{Item, ItemFn};\n use hir::intravisit::Visitor;\n "}, {"sha": "4e0b76365041c45530dcd99b1284b8c5919839ca", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -30,7 +30,7 @@ use hir::{self, PatKind};\n \n use syntax::ast;\n use syntax::ptr::P;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n ///////////////////////////////////////////////////////////////////////////\n // The Delegate trait"}, {"sha": "d753381d71e252eb5e9ef15f5a76414a0d581d5e", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,7 +18,7 @@ use ty::layout::{LayoutError, Pointer, SizeSkeleton};\n \n use syntax::abi::Abi::RustIntrinsic;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use hir::intravisit::{self, Visitor, FnKind};\n use hir;\n "}, {"sha": "cb2f68bb5539706ee0c8ca703a6d94eb0de0df6e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -123,9 +123,10 @@ use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n use syntax::ast::{self, NodeId};\n-use syntax::codemap::{BytePos, original_sp, Span};\n+use syntax::codemap::original_sp;\n use syntax::parse::token::keywords;\n use syntax::ptr::P;\n+use syntax_pos::{BytePos, Span};\n \n use hir::Expr;\n use hir;"}, {"sha": "a70829347f1c155deb61449e060f68efe52734bd", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -83,7 +83,7 @@ use hir::{MutImmutable, MutMutable, PatKind};\n use hir::pat_util::EnumerateAndAdjustIterator;\n use hir;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use std::fmt;\n use std::rc::Rc;"}, {"sha": "6f0ad087dc5898ad72b259f267274654ac5c467a", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,8 +27,9 @@ use std::cell::RefCell;\n use std::collections::hash_map::Entry;\n use std::fmt;\n use std::mem;\n-use syntax::codemap::{self, Span};\n+use syntax::codemap;\n use syntax::ast::{self, NodeId};\n+use syntax_pos::Span;\n \n use hir;\n use hir::intravisit::{self, Visitor, FnKind};"}, {"sha": "2ba05b4ae3212bbf81409f449b8c5ab0615a94ba", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -29,8 +29,8 @@ use ty;\n use std::fmt;\n use std::mem::replace;\n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::parse::token::keywords;\n+use syntax_pos::Span;\n use util::nodemap::NodeMap;\n \n use rustc_data_structures::fnv::FnvHashSet;"}, {"sha": "36268a9de960fcdab041ef8e44b4698332ab8170", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -23,7 +23,7 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::parse::token::InternedString;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};"}, {"sha": "20c5320fd6464f274bc5291c52ff35a39ffd5e83", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,8 +15,8 @@ use session::Session;\n use middle::lang_items;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n+use syntax_pos::Span;\n use hir::intravisit::Visitor;\n use hir::intravisit;\n use hir;"}, {"sha": "f55afc342e3f3d07e9d281cefe0fa9cc57c1494e", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -25,7 +25,7 @@ use std::fmt::{self, Debug, Formatter, Write};\n use std::{iter, u32};\n use std::ops::{Index, IndexMut};\n use syntax::ast::{self, Name};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use super::cache::Cache;\n "}, {"sha": "3f714ff4d5152b3eef0a134fc49b92232e4b0d62", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,7 +16,7 @@ use mir::repr::*;\n use rustc_const_math::ConstUsize;\n use rustc_data_structures::tuple_slice::TupleSlice;\n use rustc_data_structures::indexed_vec::Idx;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n // # The MIR Visitor\n //"}, {"sha": "a37990061920b6fa299a2de535010bb78a8490e7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -26,11 +26,12 @@ use middle::cstore;\n use syntax::ast::{self, IntTy, UintTy};\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::errors::{ColorConfig, Handler};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::feature_gate::UnstableFeatures;\n \n+use errors::{ColorConfig, Handler};\n+\n use getopts;\n use std::collections::HashMap;\n use std::env;\n@@ -1420,12 +1421,11 @@ mod tests {\n     use middle::cstore::DummyCrateStore;\n     use session::config::{build_configuration, build_session_options};\n     use session::build_session;\n-\n+    use errors;\n     use std::rc::Rc;\n     use getopts::{getopts, OptGroup};\n     use syntax::attr;\n     use syntax::attr::AttrMetaMethods;\n-    use syntax::diagnostics;\n \n     fn optgroups() -> Vec<OptGroup> {\n         super::rustc_optgroups().into_iter()\n@@ -1442,7 +1442,7 @@ mod tests {\n               Ok(m) => m,\n               Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f)\n             };\n-        let registry = diagnostics::registry::Registry::new(&[]);\n+        let registry = errors::registry::Registry::new(&[]);\n         let sessopts = build_session_options(matches);\n         let sess = build_session(sessopts, &dep_graph, None, registry, Rc::new(DummyCrateStore));\n         let cfg = build_configuration(&sess);\n@@ -1462,7 +1462,7 @@ mod tests {\n                 panic!(\"test_switch_implies_cfg_test_unless_cfg_test: {}\", f)\n               }\n             };\n-        let registry = diagnostics::registry::Registry::new(&[]);\n+        let registry = errors::registry::Registry::new(&[]);\n         let sessopts = build_session_options(matches);\n         let sess = build_session(sessopts, &dep_graph, None, registry,\n                                  Rc::new(DummyCrateStore));\n@@ -1479,7 +1479,7 @@ mod tests {\n             let matches = getopts(&[\n                 \"-Awarnings\".to_string()\n             ], &optgroups()).unwrap();\n-            let registry = diagnostics::registry::Registry::new(&[]);\n+            let registry = errors::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n@@ -1491,7 +1491,7 @@ mod tests {\n                 \"-Awarnings\".to_string(),\n                 \"-Dwarnings\".to_string()\n             ], &optgroups()).unwrap();\n-            let registry = diagnostics::registry::Registry::new(&[]);\n+            let registry = errors::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n@@ -1502,7 +1502,7 @@ mod tests {\n             let matches = getopts(&[\n                 \"-Adead_code\".to_string()\n             ], &optgroups()).unwrap();\n-            let registry = diagnostics::registry::Registry::new(&[]);\n+            let registry = errors::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));"}, {"sha": "77259cea24d28265ddac5472e72fb52bb35afe33", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,17 +21,16 @@ use util::nodemap::{NodeMap, FnvHashMap};\n use mir::transform as mir_pass;\n \n use syntax::ast::{NodeId, NodeIdAssigner, Name};\n-use syntax::codemap::{Span, MultiSpan};\n-use syntax::errors::{self, DiagnosticBuilder};\n-use syntax::errors::emitter::{Emitter, BasicEmitter, EmitterWriter};\n-use syntax::errors::json::JsonEmitter;\n-use syntax::diagnostics;\n+use errors::{self, DiagnosticBuilder};\n+use errors::emitter::{Emitter, BasicEmitter, EmitterWriter};\n+use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::parse;\n use syntax::parse::ParseSess;\n use syntax::parse::token;\n use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n+use syntax_pos::{Span, MultiSpan};\n \n use rustc_back::target::Target;\n use llvm;\n@@ -424,7 +423,7 @@ fn split_msg_into_multilines(msg: &str) -> Option<String> {\n pub fn build_session(sopts: config::Options,\n                      dep_graph: &DepGraph,\n                      local_crate_source_file: Option<PathBuf>,\n-                     registry: diagnostics::registry::Registry,\n+                     registry: errors::registry::Registry,\n                      cstore: Rc<for<'a> CrateStore<'a>>)\n                      -> Session {\n     build_session_with_codemap(sopts,\n@@ -438,7 +437,7 @@ pub fn build_session(sopts: config::Options,\n pub fn build_session_with_codemap(sopts: config::Options,\n                                   dep_graph: &DepGraph,\n                                   local_crate_source_file: Option<PathBuf>,\n-                                  registry: diagnostics::registry::Registry,\n+                                  registry: errors::registry::Registry,\n                                   cstore: Rc<for<'a> CrateStore<'a>>,\n                                   codemap: Rc<codemap::CodeMap>)\n                                   -> Session {\n@@ -455,7 +454,10 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let emitter: Box<Emitter> = match sopts.error_format {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, Some(registry), codemap.clone()))\n+            Box::new(EmitterWriter::stderr(color_config,\n+                                           Some(registry),\n+                                           codemap.clone(),\n+                                           errors::snippet::FormatMode::EnvironmentSelected))\n         }\n         config::ErrorOutputType::Json => {\n             Box::new(JsonEmitter::stderr(Some(registry), codemap.clone()))"}, {"sha": "4344eb1ebf6645faf708d6f0c55677fd10c5b004", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -17,7 +17,7 @@ use hir::def_id::DefId;\n use ty::subst::TypeSpace;\n use ty::{self, Ty, TyCtxt};\n use infer::{InferCtxt, TypeOrigin};\n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n \n #[derive(Copy, Clone)]\n struct InferIsLocal(bool);"}, {"sha": "b6591471f0eef76277f2eb60a98e304bbe706587", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -37,8 +37,8 @@ use std::cmp;\n use std::fmt;\n use syntax::ast;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n-use syntax::codemap::Span;\n-use syntax::errors::DiagnosticBuilder;\n+use syntax_pos::Span;\n+use errors::DiagnosticBuilder;\n \n #[derive(Debug, PartialEq, Eq, Hash)]\n pub struct TraitErrorKey<'tcx> {"}, {"sha": "68db5f864763964757e3680b980b6fecc2f5160c", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -23,7 +23,7 @@ use infer::InferCtxt;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n \n pub use self::error_reporting::TraitErrorKey;\n pub use self::coherence::orphan_check;"}, {"sha": "9348def1311eb01de1616d24878b3e00769a3c25", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,7 +27,7 @@ use middle::region;\n use ty::subst::{Subst, Substs};\n use traits::{self, ProjectionMode, ObligationCause, Normalized};\n use ty::{self, TyCtxt};\n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n \n pub mod specialization_graph;\n "}, {"sha": "a097c0093b2e116ec470f8f8f270b74b6f67fdd9", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,7 +12,7 @@ use hir::def_id::DefId;\n use infer::InferCtxt;\n use ty::subst::{Subst, Substs};\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use util::common::ErrorReported;\n use util::nodemap::FnvHashSet;\n "}, {"sha": "47ca7d335ab822b0c8b1a1bd40f1083c278fba3a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,7 +15,7 @@ use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFoldable};\n use ty::LvaluePreference::{NoPreference};\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use hir;\n "}, {"sha": "219cb5e383a8d00ebc3b8dc270ca48bcc1e6a593", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -862,7 +862,7 @@ pub mod tls {\n \n     use std::cell::Cell;\n     use std::fmt;\n-    use syntax::codemap;\n+    use syntax_pos;\n \n     /// Marker types used for the scoped TLS slot.\n     /// The type context cannot be used directly because the scoped TLS\n@@ -875,7 +875,7 @@ pub mod tls {\n                                      *const ThreadLocalInterners)>> = Cell::new(None)\n     }\n \n-    fn span_debug(span: codemap::Span, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn span_debug(span: syntax_pos::Span, f: &mut fmt::Formatter) -> fmt::Result {\n         with(|tcx| {\n             write!(f, \"{}\", tcx.sess.codemap().span_to_string(span))\n         })\n@@ -884,7 +884,7 @@ pub mod tls {\n     pub fn enter_global<'gcx, F, R>(gcx: GlobalCtxt<'gcx>, f: F) -> R\n         where F: for<'a> FnOnce(TyCtxt<'a, 'gcx, 'gcx>) -> R\n     {\n-        codemap::SPAN_DEBUG.with(|span_dbg| {\n+        syntax_pos::SPAN_DEBUG.with(|span_dbg| {\n             let original_span_debug = span_dbg.get();\n             span_dbg.set(span_debug);\n             let result = enter(&gcx, &gcx.global_interners, f);"}, {"sha": "bddc2dbdb7e779e63c6237837ecda20a86ce89cf", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,8 +16,8 @@ use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n use std::fmt;\n use syntax::abi;\n use syntax::ast::{self, Name};\n-use syntax::codemap::Span;\n-use syntax::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n+use syntax_pos::Span;\n \n use hir;\n "}, {"sha": "61c8aa8fcebf368688950ccbc70503f57dc1d816", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,7 +21,7 @@ use util::common::slice_pat;\n \n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::attr;\n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n \n use std::cmp;\n use std::fmt;"}, {"sha": "14db922d298101e82c941202deb7834743b9f4f4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -44,8 +44,8 @@ use std::slice;\n use std::vec::IntoIter;\n use syntax::ast::{self, CrateNum, Name, NodeId};\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n+use syntax_pos::{DUMMY_SP, Span};\n \n use rustc_const_math::ConstInt;\n "}, {"sha": "595d965ffce262eede9050e22016b4c24b4ecb7e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,7 +22,7 @@ use std::fmt;\n use std::iter::IntoIterator;\n use std::slice::Iter;\n use std::vec::{Vec, IntoIter};\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n \n ///////////////////////////////////////////////////////////////////////////\n "}, {"sha": "ee7fb5fc94b7752ea8ac31d2e8a778b319f93810", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,7 +27,7 @@ use std::cmp;\n use std::hash::{Hash, SipHasher, Hasher};\n use syntax::ast::{self, Name};\n use syntax::attr::{self, SignedInt, UnsignedInt};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use hir;\n "}, {"sha": "37ba936d2f42a73f71a6e3193cdfbf183345d6e5", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,7 +16,7 @@ use traits;\n use ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use std::iter::once;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use util::common::ErrorReported;\n \n /// Returns the set of obligations needed to make `ty` well-formed."}, {"sha": "b9c64f86182213283897922a41237e6daa124567", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,6 +12,7 @@ test = false\n [dependencies]\n log = { path = \"../liblog\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "9cae270984f0047cce5f873e6004b5c47fe6722b", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,7 +27,7 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir;\n \n use std::rc::Rc;"}, {"sha": "d3d6fa9eb52b59dc46db40f6b15d5350eb1d951b", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,8 +27,8 @@ use rustc::middle::mem_categorization as mc;\n use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n-use syntax::codemap::{Span, DUMMY_SP};\n use syntax::attr::AttrMetaMethods;\n+use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum Fragment {"}, {"sha": "9431dcdbcac8ef897f7200be332b8360ca1c4c4e", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,7 +22,7 @@ use rustc::ty;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir::{self, PatKind};\n \n struct GatherMoveInfo<'tcx> {"}, {"sha": "e34c6e567bd8ece197adcf425ef455f1e2d9eb22", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,7 +19,7 @@ use rustc::middle::region;\n use rustc::ty;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n type R = Result<(),()>;\n "}, {"sha": "c982fc091d24c0d8ddebce581190335a86635ca8", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -25,8 +25,8 @@ use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n \n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::ast::NodeId;\n+use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::Expr;\n use rustc::hir::intravisit;"}, {"sha": "fc17633d63b93b5a50d9ef1e681e528028c80dba", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,8 +14,8 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::InteriorOffsetKind as Kind;\n use rustc::ty;\n use syntax::ast;\n-use syntax::codemap;\n-use syntax::errors::DiagnosticBuilder;\n+use syntax_pos;\n+use errors::DiagnosticBuilder;\n use rustc::hir;\n \n pub struct MoveErrorCollector<'tcx> {\n@@ -56,7 +56,7 @@ impl<'tcx> MoveError<'tcx> {\n \n #[derive(Clone)]\n pub struct MoveSpanAndPath {\n-    pub span: codemap::Span,\n+    pub span: syntax_pos::Span,\n     pub name: ast::Name,\n }\n \n@@ -169,7 +169,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n }\n \n fn note_move_destination(mut err: DiagnosticBuilder,\n-                         move_to_span: codemap::Span,\n+                         move_to_span: syntax_pos::Span,\n                          pat_name: ast::Name,\n                          is_first_note: bool) -> DiagnosticBuilder {\n     if is_first_note {"}, {"sha": "3d9df4c8bd0082c2220af04904811d9d4a2a8146", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,7 +15,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use borrowck::ToInteriorKind;\n "}, {"sha": "d59bdf93f3225e4e33fb32689fd74b172e9aa238", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -10,7 +10,7 @@\n \n use syntax::abi::{Abi};\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::mir::repr::{self, Mir};"}, {"sha": "623ea60c5a6d88c508da63434985d1f01ef5ddab", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -23,7 +23,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items;\n use rustc::util::nodemap::FnvHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use std::fmt;\n use std::u32;"}, {"sha": "7481b15685e6991c62b185e00be446523a952026", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,8 +12,8 @@ use borrowck::BorrowckCtxt;\n \n use syntax::ast::{self, MetaItem};\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::{Span, DUMMY_SP};\n use syntax::ptr::P;\n+use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir;\n use rustc::hir::intravisit::{FnKind};"}, {"sha": "e86120b73bf97670bf59c2b7496ae76740bf4c2f", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -43,8 +43,8 @@ use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::{MultiSpan, Span};\n-use syntax::errors::DiagnosticBuilder;\n+use syntax_pos::{MultiSpan, Span};\n+use errors::DiagnosticBuilder;\n \n use rustc::hir;\n use rustc::hir::{FnDecl, Block};"}, {"sha": "4b8cbbffaa5efafd942300e05aed64a1d4c71fbd", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -28,7 +28,7 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use std::usize;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::intravisit::IdRange;\n "}, {"sha": "16fefee347269318b59f96f326c0f74bf847cd11", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -28,6 +28,8 @@\n #![feature(question_mark)]\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate syntax_pos;\n+extern crate rustc_errors as errors;\n \n // for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n // refers to the borrowck-specific graphviz adapter traits."}, {"sha": "01872bbe3c04996a87089b757b494c253dd42c3d", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,3 +16,4 @@ rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n syntax = { path = \"../libsyntax\" }\n graphviz = { path = \"../libgraphviz\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "173d1f513a56932747bc4692b21708e423912553", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -37,7 +37,8 @@ use rustc::hir::intravisit::{self, IdVisitor, IdVisitingOperation, Visitor, FnKi\n use rustc_back::slice;\n \n use syntax::ast::{self, DUMMY_NODE_ID, NodeId};\n-use syntax::codemap::{Span, Spanned, DUMMY_SP};\n+use syntax::codemap::Spanned;\n+use syntax_pos::{Span, DUMMY_SP};\n use rustc::hir::fold::{Folder, noop_fold_pat};\n use rustc::hir::print::pat_to_string;\n use syntax::ptr::P;"}, {"sha": "c03903515abe6885c084d915172c1656263d7f1f", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -33,10 +33,10 @@ use syntax::ast;\n use rustc::hir::{Expr, PatKind};\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n-use syntax::codemap::Span;\n use syntax::ptr::P;\n use syntax::codemap;\n use syntax::attr::IntType;\n+use syntax_pos::{self, Span};\n \n use std::borrow::Cow;\n use std::cmp::Ordering;\n@@ -301,7 +301,7 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let field_pats =\n                 try!(fields.iter()\n                            .map(|field| Ok(codemap::Spanned {\n-                               span: codemap::DUMMY_SP,\n+                               span: syntax_pos::DUMMY_SP,\n                                node: hir::FieldPat {\n                                    name: field.name.node,\n                                    pat: try!(const_expr_to_pat(tcx, &field.expr,"}, {"sha": "2da9a55f1fd441c7f1e4d58b04b9a857c7f6354d", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -38,7 +38,7 @@\n extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate graphviz;\n-\n+extern crate syntax_pos;\n extern crate serialize as rustc_serialize; // used by deriving\n \n // NB: This module needs to be declared first so diagnostics are"}, {"sha": "54c62d3665994018d0e7bc0982438b878b3780f5", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -17,6 +17,7 @@ rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_borrowck = { path = \"../librustc_borrowck\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_mir = { path = \"../librustc_mir\" }\n@@ -32,3 +33,4 @@ rustc_metadata = { path = \"../librustc_metadata\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "32eb3fdd7109232f543b8533637d568bd82c1879", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -42,6 +42,7 @@ extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_borrowck;\n extern crate rustc_const_eval;\n+extern crate rustc_errors as errors;\n extern crate rustc_passes;\n extern crate rustc_lint;\n extern crate rustc_plugin;\n@@ -60,6 +61,7 @@ extern crate log;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_ext;\n+extern crate syntax_pos;\n \n use driver::CompileController;\n use pretty::{PpMode, UserIdentifiedItem};\n@@ -92,11 +94,12 @@ use std::thread;\n \n use rustc::session::early_error;\n \n-use syntax::{ast, errors, diagnostics};\n-use syntax::codemap::{CodeMap, FileLoader, RealFileLoader, MultiSpan};\n-use syntax::errors::emitter::Emitter;\n+use syntax::{ast, json};\n+use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult, token};\n+use syntax_pos::MultiSpan;\n+use errors::emitter::Emitter;\n \n #[cfg(test)]\n pub mod test;\n@@ -290,7 +293,7 @@ pub trait CompilerCalls<'a> {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n-                      _: &diagnostics::registry::Registry,\n+                      _: &errors::registry::Registry,\n                       _: ErrorOutputType)\n                       -> Compilation {\n         Compilation::Continue\n@@ -329,7 +332,7 @@ pub trait CompilerCalls<'a> {\n                 _: &config::Options,\n                 _: &Option<PathBuf>,\n                 _: &Option<PathBuf>,\n-                _: &diagnostics::registry::Registry)\n+                _: &errors::registry::Registry)\n                 -> Option<(Input, Option<PathBuf>)> {\n         None\n     }\n@@ -344,7 +347,7 @@ pub trait CompilerCalls<'a> {\n pub struct RustcDefaultCalls;\n \n fn handle_explain(code: &str,\n-                  descriptions: &diagnostics::registry::Registry,\n+                  descriptions: &errors::registry::Registry,\n                   output: ErrorOutputType) {\n     let normalised = if code.starts_with(\"E\") {\n         code.to_string()\n@@ -374,7 +377,7 @@ fn check_cfg(sopts: &config::Options,\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(errors::emitter::BasicEmitter::stderr(color_config))\n         }\n-        config::ErrorOutputType::Json => Box::new(errors::json::JsonEmitter::basic()),\n+        config::ErrorOutputType::Json => Box::new(json::JsonEmitter::basic()),\n     };\n \n     let mut saw_invalid_predicate = false;\n@@ -401,7 +404,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n                       sopts: &config::Options,\n-                      descriptions: &diagnostics::registry::Registry,\n+                      descriptions: &errors::registry::Registry,\n                       output: ErrorOutputType)\n                       -> Compilation {\n         if let Some(ref code) = matches.opt_str(\"explain\") {\n@@ -418,7 +421,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 sopts: &config::Options,\n                 odir: &Option<PathBuf>,\n                 ofile: &Option<PathBuf>,\n-                descriptions: &diagnostics::registry::Registry)\n+                descriptions: &errors::registry::Registry)\n                 -> Option<(Input, Option<PathBuf>)> {\n         match matches.free.len() {\n             0 => {\n@@ -1081,8 +1084,8 @@ fn exit_on_err() -> ! {\n     panic!();\n }\n \n-pub fn diagnostics_registry() -> diagnostics::registry::Registry {\n-    use syntax::diagnostics::registry::Registry;\n+pub fn diagnostics_registry() -> errors::registry::Registry {\n+    use errors::registry::Registry;\n \n     let mut all_errors = Vec::new();\n     all_errors.extend_from_slice(&rustc::DIAGNOSTICS);"}, {"sha": "f7905e53101b0b9cf4d8c15894c4a951e3c81ce9", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -31,12 +31,12 @@ use rustc_mir::pretty::write_mir_pretty;\n use rustc_mir::graphviz::write_mir_graphviz;\n \n use syntax::ast::{self, BlockCheckMode};\n-use syntax::codemap;\n use syntax::fold::{self, Folder};\n use syntax::print::{pp, pprust};\n use syntax::print::pprust::PrintState;\n use syntax::ptr::P;\n use syntax::util::small_vector::SmallVector;\n+use syntax_pos;\n \n use graphviz as dot;\n \n@@ -661,7 +661,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n                 stmts: vec![],\n                 rules: rules,\n                 id: ast::DUMMY_NODE_ID,\n-                span: codemap::DUMMY_SP,\n+                span: syntax_pos::DUMMY_SP,\n             })\n         }\n \n@@ -671,7 +671,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n             let loop_expr = P(ast::Expr {\n                 node: ast::ExprKind::Loop(empty_block, None),\n                 id: ast::DUMMY_NODE_ID,\n-                span: codemap::DUMMY_SP,\n+                span: syntax_pos::DUMMY_SP,\n                 attrs: None,\n             });\n "}, {"sha": "0f5977cf06618822a0438fc935845a2502568ac3", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -31,12 +31,13 @@ use rustc::session::{self, config};\n use std::rc::Rc;\n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::codemap::{CodeMap, DUMMY_SP};\n-use syntax::errors;\n-use syntax::errors::emitter::{CoreEmitter, Emitter};\n-use syntax::errors::{Level, RenderSpan};\n+use syntax::codemap::CodeMap;\n+use errors;\n+use errors::emitter::{CoreEmitter, Emitter};\n+use errors::{Level, RenderSpan};\n use syntax::parse::token;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax_pos::DUMMY_SP;\n \n use rustc::hir;\n "}, {"sha": "128c270eb359cb6378325bc2b95944cfbb5d48d5", "filename": "src/librustc_errors/Cargo.toml", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -0,0 +1,14 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_errors\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_errors\"\n+path = \"lib.rs\"\n+crate-type = [\"dylib\"]\n+\n+[dependencies]\n+log = { path = \"../liblog\" }\n+serialize = { path = \"../libserialize\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "a7c68e3a87b318f418f41ff688894afb493ea3a9", "filename": "src/librustc_errors/emitter.rs", "status": "renamed", "additions": 45, "deletions": 281, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -10,14 +10,14 @@\n \n use self::Destination::*;\n \n-use codemap::{self, COMMAND_LINE_SP, DUMMY_SP, Span, MultiSpan};\n-use diagnostics;\n+use syntax_pos::{COMMAND_LINE_SP, DUMMY_SP, Span, MultiSpan, LineInfo};\n+use registry;\n \n-use errors::check_old_skool;\n-use errors::{Level, RenderSpan, CodeSuggestion, DiagnosticBuilder};\n-use errors::RenderSpan::*;\n-use errors::Level::*;\n-use errors::snippet::{RenderedLineKind, SnippetData, Style};\n+use check_old_skool;\n+use {Level, RenderSpan, CodeSuggestion, DiagnosticBuilder, CodeMapper};\n+use RenderSpan::*;\n+use Level::*;\n+use snippet::{RenderedLineKind, SnippetData, Style, FormatMode};\n \n use std::{cmp, fmt};\n use std::io::prelude::*;\n@@ -151,15 +151,15 @@ impl BasicEmitter {\n \n pub struct EmitterWriter {\n     dst: Destination,\n-    registry: Option<diagnostics::registry::Registry>,\n-    cm: Rc<codemap::CodeMap>,\n+    registry: Option<registry::Registry>,\n+    cm: Rc<CodeMapper>,\n \n     /// Is this the first error emitted thus far? If not, we emit a\n     /// `\\n` before the top-level errors.\n     first: bool,\n \n     // For now, allow an old-school mode while we transition\n-    old_school: bool,\n+    format_mode: FormatMode\n }\n \n impl CoreEmitter for EmitterWriter {\n@@ -193,36 +193,36 @@ macro_rules! println_maybe_styled {\n \n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n-                  registry: Option<diagnostics::registry::Registry>,\n-                  code_map: Rc<codemap::CodeMap>)\n+                  registry: Option<registry::Registry>,\n+                  code_map: Rc<CodeMapper>,\n+                  format_mode: FormatMode)\n                   -> EmitterWriter {\n-        let old_school = check_old_skool();\n         if color_config.use_color() {\n             let dst = Destination::from_stderr();\n             EmitterWriter { dst: dst,\n                             registry: registry,\n                             cm: code_map,\n                             first: true,\n-                            old_school: old_school }\n+                            format_mode: format_mode.clone() }\n         } else {\n             EmitterWriter { dst: Raw(Box::new(io::stderr())),\n                             registry: registry,\n                             cm: code_map,\n                             first: true,\n-                            old_school: old_school }\n+                            format_mode: format_mode.clone() }\n         }\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n-               registry: Option<diagnostics::registry::Registry>,\n-               code_map: Rc<codemap::CodeMap>)\n+               registry: Option<registry::Registry>,\n+               code_map: Rc<CodeMapper>,\n+               format_mode: FormatMode)\n                -> EmitterWriter {\n-        let old_school = check_old_skool();\n         EmitterWriter { dst: Raw(dst),\n                         registry: registry,\n                         cm: code_map,\n                         first: true,\n-                        old_school: old_school }\n+                        format_mode: format_mode.clone() }\n     }\n \n     fn emit_message_(&mut self,\n@@ -233,11 +233,17 @@ impl EmitterWriter {\n                      is_header: bool,\n                      show_snippet: bool)\n                      -> io::Result<()> {\n+        let old_school = match self.format_mode {\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n+\n         if is_header {\n             if self.first {\n                 self.first = false;\n             } else {\n-                if !self.old_school {\n+                if !old_school {\n                     write!(self.dst, \"\\n\")?;\n                 }\n             }\n@@ -248,7 +254,7 @@ impl EmitterWriter {\n                                        .and_then(|registry| registry.find_description(code))\n                                        .is_some() => {\n                 let code_with_explain = String::from(\"--explain \") + code;\n-                if self.old_school {\n+                if old_school {\n                     let loc = match rsp.span().primary_span() {\n                         Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n                         Some(ps) => self.cm.span_to_string(ps),\n@@ -261,7 +267,7 @@ impl EmitterWriter {\n                 }\n             }\n             _ => {\n-                if self.old_school {\n+                if old_school {\n                     let loc = match rsp.span().primary_span() {\n                         Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n                         Some(ps) => self.cm.span_to_string(ps),\n@@ -303,7 +309,7 @@ impl EmitterWriter {\n                 }\n             }\n         }\n-        if self.old_school {\n+        if old_school {\n             match code {\n                 Some(code) if self.registry.as_ref()\n                                         .and_then(|registry| registry.find_description(code))\n@@ -326,11 +332,13 @@ impl EmitterWriter {\n \n     fn highlight_suggestion(&mut self, suggestion: &CodeSuggestion) -> io::Result<()>\n     {\n+        use std::borrow::Borrow;\n+\n         let primary_span = suggestion.msp.primary_span().unwrap();\n         let lines = self.cm.span_to_lines(primary_span).unwrap();\n         assert!(!lines.lines.is_empty());\n \n-        let complete = suggestion.splice_lines(&self.cm);\n+        let complete = suggestion.splice_lines(self.cm.borrow());\n         let line_count = cmp::min(lines.lines.len(), MAX_HIGHLIGHT_LINES);\n         let display_lines = &lines.lines[..line_count];\n \n@@ -356,19 +364,27 @@ impl EmitterWriter {\n         Ok(())\n     }\n \n-    fn highlight_lines(&mut self,\n+    pub fn highlight_lines(&mut self,\n                        msp: &MultiSpan,\n                        lvl: Level)\n                        -> io::Result<()>\n     {\n+        let old_school = match self.format_mode {\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n+\n         let mut snippet_data = SnippetData::new(self.cm.clone(),\n-                                                msp.primary_span());\n-        if self.old_school {\n+                                                msp.primary_span(),\n+                                                self.format_mode.clone());\n+        if old_school {\n             let mut output_vec = vec![];\n \n             for span_label in msp.span_labels() {\n                 let mut snippet_data = SnippetData::new(self.cm.clone(),\n-                                                        Some(span_label.span));\n+                                                        Some(span_label.span),\n+                                                        self.format_mode.clone());\n \n                 snippet_data.push(span_label.span,\n                                   span_label.is_primary,\n@@ -430,7 +446,7 @@ impl EmitterWriter {\n     }\n }\n \n-fn line_num_max_digits(line: &codemap::LineInfo) -> usize {\n+fn line_num_max_digits(line: &LineInfo) -> usize {\n     let mut max_line_num = line.line_index + 1;\n     let mut digits = 0;\n     while max_line_num > 0 {\n@@ -617,255 +633,3 @@ impl Write for Destination {\n         }\n     }\n }\n-\n-\n-#[cfg(test)]\n-mod test {\n-    use errors::{Level, CodeSuggestion};\n-    use super::EmitterWriter;\n-    use codemap::{mk_sp, CodeMap, Span, MultiSpan, BytePos, NO_EXPANSION};\n-    use std::sync::{Arc, Mutex};\n-    use std::io::{self, Write};\n-    use std::str::from_utf8;\n-    use std::rc::Rc;\n-\n-    struct Sink(Arc<Mutex<Vec<u8>>>);\n-    impl Write for Sink {\n-        fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-            Write::write(&mut *self.0.lock().unwrap(), data)\n-        }\n-        fn flush(&mut self) -> io::Result<()> { Ok(()) }\n-    }\n-\n-    /// Given a string like \" ^~~~~~~~~~~~ \", produces a span\n-    /// coverting that range. The idea is that the string has the same\n-    /// length as the input, and we uncover the byte positions.  Note\n-    /// that this can span lines and so on.\n-    fn span_from_selection(input: &str, selection: &str) -> Span {\n-        assert_eq!(input.len(), selection.len());\n-        let left_index = selection.find('~').unwrap() as u32;\n-        let right_index = selection.rfind('~').map(|x|x as u32).unwrap_or(left_index);\n-        Span { lo: BytePos(left_index), hi: BytePos(right_index + 1), expn_id: NO_EXPANSION }\n-    }\n-\n-    // Diagnostic doesn't align properly in span where line number increases by one digit\n-    #[test]\n-    fn test_hilight_suggestion_issue_11715() {\n-        let data = Arc::new(Mutex::new(Vec::new()));\n-        let cm = Rc::new(CodeMap::new());\n-        let mut ew = EmitterWriter::new(Box::new(Sink(data.clone())), None, cm.clone());\n-        let content = \"abcdefg\n-        koksi\n-        line3\n-        line4\n-        cinq\n-        line6\n-        line7\n-        line8\n-        line9\n-        line10\n-        e-l\u00e4-v\u00e4n\n-        tolv\n-        dreizehn\n-        \";\n-        let file = cm.new_filemap_and_lines(\"dummy.txt\", None, content);\n-        let start = file.lines.borrow()[10];\n-        let end = file.lines.borrow()[11];\n-        let sp = mk_sp(start, end);\n-        let lvl = Level::Error;\n-        println!(\"highlight_lines\");\n-        ew.highlight_lines(&sp.into(), lvl).unwrap();\n-        println!(\"done\");\n-        let vec = data.lock().unwrap().clone();\n-        let vec: &[u8] = &vec;\n-        let str = from_utf8(vec).unwrap();\n-        println!(\"r#\\\"\\n{}\\\"#\", str);\n-        assert_eq!(str, &r#\"\n-  --> dummy.txt:11:1\n-   |>\n-11 |>         e-l\u00e4-v\u00e4n\n-   |> ^\n-\"#[1..]);\n-    }\n-\n-    #[test]\n-    fn test_single_span_splice() {\n-        // Test that a `MultiSpan` containing a single span splices a substition correctly\n-        let cm = CodeMap::new();\n-        let inputtext = \"aaaaa\\nbbbbBB\\nCCC\\nDDDDDddddd\\neee\\n\";\n-        let selection = \"     \\n    ~~\\n~~~\\n~~~~~     \\n   \\n\";\n-        cm.new_filemap_and_lines(\"blork.rs\", None, inputtext);\n-        let sp = span_from_selection(inputtext, selection);\n-        let msp: MultiSpan = sp.into();\n-\n-        // check that we are extracting the text we thought we were extracting\n-        assert_eq!(&cm.span_to_snippet(sp).unwrap(), \"BB\\nCCC\\nDDDDD\");\n-\n-        let substitute = \"ZZZZZZ\".to_owned();\n-        let expected = \"bbbbZZZZZZddddd\";\n-        let suggest = CodeSuggestion {\n-            msp: msp,\n-            substitutes: vec![substitute],\n-        };\n-        assert_eq!(suggest.splice_lines(&cm), expected);\n-    }\n-\n-    #[test]\n-    fn test_multi_span_splice() {\n-        // Test that a `MultiSpan` containing multiple spans splices a substition correctly\n-        let cm = CodeMap::new();\n-        let inputtext  = \"aaaaa\\nbbbbBB\\nCCC\\nDDDDDddddd\\neee\\n\";\n-        let selection1 = \"     \\n      \\n   \\n          \\n ~ \\n\"; // intentionally out of order\n-        let selection2 = \"     \\n    ~~\\n~~~\\n~~~~~     \\n   \\n\";\n-        cm.new_filemap_and_lines(\"blork.rs\", None, inputtext);\n-        let sp1 = span_from_selection(inputtext, selection1);\n-        let sp2 = span_from_selection(inputtext, selection2);\n-        let msp: MultiSpan = MultiSpan::from_spans(vec![sp1, sp2]);\n-\n-        let expected = \"bbbbZZZZZZddddd\\neXYZe\";\n-        let suggest = CodeSuggestion {\n-            msp: msp,\n-            substitutes: vec![\"ZZZZZZ\".to_owned(),\n-                              \"XYZ\".to_owned()]\n-        };\n-\n-        assert_eq!(suggest.splice_lines(&cm), expected);\n-    }\n-\n-    #[test]\n-    fn test_multispan_highlight() {\n-        let data = Arc::new(Mutex::new(Vec::new()));\n-        let cm = Rc::new(CodeMap::new());\n-        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())), None, cm.clone());\n-\n-        let inp =       \"_____aaaaaa____bbbbbb__cccccdd_\";\n-        let sp1 =       \"     ~~~~~~                    \";\n-        let sp2 =       \"               ~~~~~~          \";\n-        let sp3 =       \"                       ~~~~~   \";\n-        let sp4 =       \"                          ~~~~ \";\n-        let sp34 =      \"                       ~~~~~~~ \";\n-\n-        let expect_start = &r#\"\n- --> dummy.txt:1:6\n-  |>\n-1 |> _____aaaaaa____bbbbbb__cccccdd_\n-  |>      ^^^^^^    ^^^^^^  ^^^^^^^\n-\"#[1..];\n-\n-        let span = |sp, expected| {\n-            let sp = span_from_selection(inp, sp);\n-            assert_eq!(&cm.span_to_snippet(sp).unwrap(), expected);\n-            sp\n-        };\n-        cm.new_filemap_and_lines(\"dummy.txt\", None, inp);\n-        let sp1 = span(sp1, \"aaaaaa\");\n-        let sp2 = span(sp2, \"bbbbbb\");\n-        let sp3 = span(sp3, \"ccccc\");\n-        let sp4 = span(sp4, \"ccdd\");\n-        let sp34 = span(sp34, \"cccccdd\");\n-\n-        let spans = vec![sp1, sp2, sp3, sp4];\n-\n-        let test = |expected, highlight: &mut FnMut()| {\n-            data.lock().unwrap().clear();\n-            highlight();\n-            let vec = data.lock().unwrap().clone();\n-            let actual = from_utf8(&vec[..]).unwrap();\n-            println!(\"actual=\\n{}\", actual);\n-            assert_eq!(actual, expected);\n-        };\n-\n-        let msp = MultiSpan::from_spans(vec![sp1, sp2, sp34]);\n-        test(expect_start, &mut || {\n-            diag.highlight_lines(&msp, Level::Error).unwrap();\n-        });\n-        test(expect_start, &mut || {\n-            let msp = MultiSpan::from_spans(spans.clone());\n-            diag.highlight_lines(&msp, Level::Error).unwrap();\n-        });\n-    }\n-\n-    #[test]\n-    fn test_huge_multispan_highlight() {\n-        let data = Arc::new(Mutex::new(Vec::new()));\n-        let cm = Rc::new(CodeMap::new());\n-        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())), None, cm.clone());\n-\n-        let inp = \"aaaaa\\n\\\n-                   aaaaa\\n\\\n-                   aaaaa\\n\\\n-                   bbbbb\\n\\\n-                   ccccc\\n\\\n-                   xxxxx\\n\\\n-                   yyyyy\\n\\\n-                   _____\\n\\\n-                   ddd__eee_\\n\\\n-                   elided\\n\\\n-                   __f_gg\";\n-        let file = cm.new_filemap_and_lines(\"dummy.txt\", None, inp);\n-\n-        let span = |lo, hi, (off_lo, off_hi)| {\n-            let lines = file.lines.borrow();\n-            let (mut lo, mut hi): (BytePos, BytePos) = (lines[lo], lines[hi]);\n-            lo.0 += off_lo;\n-            hi.0 += off_hi;\n-            mk_sp(lo, hi)\n-        };\n-        let sp0 = span(4, 6, (0, 5));\n-        let sp1 = span(0, 6, (0, 5));\n-        let sp2 = span(8, 8, (0, 3));\n-        let sp3 = span(8, 8, (5, 8));\n-        let sp4 = span(10, 10, (2, 3));\n-        let sp5 = span(10, 10, (4, 6));\n-\n-        let expect0 = &r#\"\n-   --> dummy.txt:5:1\n-    |>\n-5   |> ccccc\n-    |> ^\n-...\n-9   |> ddd__eee_\n-    |> ^^^  ^^^\n-10  |> elided\n-11  |> __f_gg\n-    |>   ^ ^^\n-\"#[1..];\n-\n-        let expect = &r#\"\n-   --> dummy.txt:1:1\n-    |>\n-1   |> aaaaa\n-    |> ^\n-...\n-9   |> ddd__eee_\n-    |> ^^^  ^^^\n-10  |> elided\n-11  |> __f_gg\n-    |>   ^ ^^\n-\"#[1..];\n-\n-        macro_rules! test {\n-            ($expected: expr, $highlight: expr) => ({\n-                data.lock().unwrap().clear();\n-                $highlight();\n-                let vec = data.lock().unwrap().clone();\n-                let actual = from_utf8(&vec[..]).unwrap();\n-                println!(\"actual:\");\n-                println!(\"{}\", actual);\n-                println!(\"expected:\");\n-                println!(\"{}\", $expected);\n-                assert_eq!(&actual[..], &$expected[..]);\n-            });\n-        }\n-\n-        let msp0 = MultiSpan::from_spans(vec![sp0, sp2, sp3, sp4, sp5]);\n-        let msp = MultiSpan::from_spans(vec![sp1, sp2, sp3, sp4, sp5]);\n-\n-        test!(expect0, || {\n-            diag.highlight_lines(&msp0, Level::Error).unwrap();\n-        });\n-        test!(expect, || {\n-            diag.highlight_lines(&msp, Level::Error).unwrap();\n-        });\n-    }\n-}", "previous_filename": "src/libsyntax/errors/emitter.rs"}, {"sha": "18fc826f9aa4bc5840fb8e7b05c10732c07ab33b", "filename": "src/librustc_errors/lib.rs", "status": "renamed", "additions": 60, "deletions": 25, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -8,24 +8,50 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use errors::emitter::ColorConfig;\n+#![crate_name = \"rustc_errors\"]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![cfg_attr(not(stage0), deny(warnings))]\n+\n+#![feature(custom_attribute)]\n+#![allow(unused_attributes)]\n+#![feature(rustc_private)]\n+#![feature(staged_api)]\n+#![feature(question_mark)]\n+#![feature(range_contains)]\n+#![feature(libc)]\n+#![feature(unicode)]\n+\n+extern crate serialize;\n+extern crate term;\n+#[macro_use] extern crate log;\n+#[macro_use] extern crate libc;\n+extern crate rustc_unicode;\n+extern crate serialize as rustc_serialize; // used by deriving\n+extern crate syntax_pos;\n+\n+pub use emitter::ColorConfig;\n \n use self::Level::*;\n use self::RenderSpan::*;\n \n-use codemap::{self, CodeMap, MultiSpan, NO_EXPANSION, Span};\n-use diagnostics;\n-use errors::emitter::{Emitter, EmitterWriter};\n+use emitter::{Emitter, EmitterWriter};\n \n use std::cell::{RefCell, Cell};\n use std::{error, fmt};\n use std::rc::Rc;\n use std::thread::panicking;\n-use term;\n \n pub mod emitter;\n-pub mod json;\n pub mod snippet;\n+pub mod registry;\n+\n+use syntax_pos::{BytePos, Loc, FileLinesResult, FileName, MultiSpan, Span, NO_EXPANSION };\n+use syntax_pos::{MacroBacktrace};\n \n #[derive(Clone)]\n pub enum RenderSpan {\n@@ -43,8 +69,16 @@ pub enum RenderSpan {\n \n #[derive(Clone)]\n pub struct CodeSuggestion {\n-    msp: MultiSpan,\n-    substitutes: Vec<String>,\n+    pub msp: MultiSpan,\n+    pub substitutes: Vec<String>,\n+}\n+\n+pub trait CodeMapper {\n+    fn lookup_char_pos(&self, pos: BytePos) -> Loc;\n+    fn span_to_lines(&self, sp: Span) -> FileLinesResult;\n+    fn span_to_string(&self, sp: Span) -> String;\n+    fn span_to_filename(&self, sp: Span) -> FileName;\n+    fn macro_backtrace(&self, span: Span) -> Vec<MacroBacktrace>;\n }\n \n impl RenderSpan {\n@@ -59,8 +93,8 @@ impl RenderSpan {\n \n impl CodeSuggestion {\n     /// Returns the assembled code suggestion.\n-    pub fn splice_lines(&self, cm: &CodeMap) -> String {\n-        use codemap::{CharPos, Loc, Pos};\n+    pub fn splice_lines(&self, cm: &CodeMapper) -> String {\n+        use syntax_pos::{CharPos, Loc, Pos};\n \n         fn push_trailing(buf: &mut String, line_opt: Option<&str>,\n                          lo: &Loc, hi_opt: Option<&Loc>) {\n@@ -181,20 +215,20 @@ impl error::Error for ExplicitBug {\n #[derive(Clone)]\n pub struct DiagnosticBuilder<'a> {\n     handler: &'a Handler,\n-    level: Level,\n-    message: String,\n-    code: Option<String>,\n-    span: MultiSpan,\n-    children: Vec<SubDiagnostic>,\n+    pub level: Level,\n+    pub message: String,\n+    pub code: Option<String>,\n+    pub span: MultiSpan,\n+    pub children: Vec<SubDiagnostic>,\n }\n \n /// For example a note attached to an error.\n #[derive(Clone)]\n-struct SubDiagnostic {\n-    level: Level,\n-    message: String,\n-    span: MultiSpan,\n-    render_span: Option<RenderSpan>,\n+pub struct SubDiagnostic {\n+    pub level: Level,\n+    pub message: String,\n+    pub span: MultiSpan,\n+    pub render_span: Option<RenderSpan>,\n }\n \n impl<'a> DiagnosticBuilder<'a> {\n@@ -386,12 +420,13 @@ pub struct Handler {\n \n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n-                            registry: Option<diagnostics::registry::Registry>,\n+                            registry: Option<registry::Registry>,\n                             can_emit_warnings: bool,\n                             treat_err_as_bug: bool,\n-                            cm: Rc<codemap::CodeMap>)\n+                            cm: Rc<CodeMapper>)\n                             -> Handler {\n-        let emitter = Box::new(EmitterWriter::stderr(color_config, registry, cm));\n+        let emitter = Box::new(EmitterWriter::stderr(color_config, registry, cm,\n+                               snippet::FormatMode::EnvironmentSelected));\n         Handler::with_emitter(can_emit_warnings, treat_err_as_bug, emitter)\n     }\n \n@@ -662,7 +697,7 @@ impl fmt::Display for Level {\n }\n \n impl Level {\n-    fn color(self) -> term::color::Color {\n+    pub fn color(self) -> term::color::Color {\n         match self {\n             Bug | Fatal | PhaseFatal | Error => term::color::BRIGHT_RED,\n             Warning => term::color::YELLOW,\n@@ -672,7 +707,7 @@ impl Level {\n         }\n     }\n \n-    fn to_str(self) -> &'static str {\n+    pub fn to_str(self) -> &'static str {\n         match self {\n             Bug => \"error: internal compiler error\",\n             Fatal | PhaseFatal | Error => \"error\",", "previous_filename": "src/libsyntax/errors/mod.rs"}, {"sha": "a6cfd1a5a9ac3c1e612b02995457433ee344987d", "filename": "src/librustc_errors/registry.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "previous_filename": "src/libsyntax/diagnostics/registry.rs"}, {"sha": "33f40ffc71a9f69b78b965db5c2f7cb066503e4c", "filename": "src/librustc_errors/snippet.rs", "status": "renamed", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -10,18 +10,25 @@\n \n // Code for annotating snippets.\n \n-use codemap::{CharPos, CodeMap, FileMap, LineInfo, Span};\n-use errors::check_old_skool;\n+use syntax_pos::{Span, FileMap, CharPos, LineInfo};\n+use check_old_skool;\n+use CodeMapper;\n use std::cmp;\n use std::rc::Rc;\n use std::mem;\n \n-mod test;\n+#[derive(Clone)]\n+pub enum FormatMode {\n+    NewErrorFormat,\n+    OriginalErrorFormat,\n+    EnvironmentSelected\n+}\n \n #[derive(Clone)]\n pub struct SnippetData {\n-    codemap: Rc<CodeMap>,\n+    codemap: Rc<CodeMapper>,\n     files: Vec<FileInfo>,\n+    format_mode: FormatMode,\n }\n \n #[derive(Clone)]\n@@ -36,6 +43,10 @@ pub struct FileInfo {\n     primary_span: Option<Span>,\n \n     lines: Vec<Line>,\n+\n+    /// The type of error format to render.  We keep it here so that\n+    /// it's easy to configure for both tests and regular usage\n+    format_mode: FormatMode,\n }\n \n #[derive(Clone, Debug)]\n@@ -111,8 +122,9 @@ pub enum RenderedLineKind {\n }\n \n impl SnippetData {\n-    pub fn new(codemap: Rc<CodeMap>,\n-               primary_span: Option<Span>) // (*)\n+    pub fn new(codemap: Rc<CodeMapper>,\n+               primary_span: Option<Span>,\n+               format_mode: FormatMode) // (*)\n                -> Self {\n         // (*) The primary span indicates the file that must appear\n         // first, and which will have a line number etc in its\n@@ -126,7 +138,8 @@ impl SnippetData {\n \n         let mut data = SnippetData {\n             codemap: codemap.clone(),\n-            files: vec![]\n+            files: vec![],\n+            format_mode: format_mode.clone()\n         };\n         if let Some(primary_span) = primary_span {\n             let lo = codemap.lookup_char_pos(primary_span.lo);\n@@ -135,6 +148,7 @@ impl SnippetData {\n                     file: lo.file,\n                     primary_span: Some(primary_span),\n                     lines: vec![],\n+                    format_mode: format_mode.clone(),\n                 });\n         }\n         data\n@@ -167,6 +181,7 @@ impl SnippetData {\n                 file: file_map.clone(),\n                 lines: vec![],\n                 primary_span: None,\n+                format_mode: self.format_mode.clone()\n             });\n         self.files.last_mut().unwrap()\n     }\n@@ -178,7 +193,7 @@ impl SnippetData {\n             self.files.iter()\n                       .flat_map(|f| f.render_file_lines(&self.codemap))\n                       .collect();\n-        prepend_prefixes(&mut rendered_lines);\n+        prepend_prefixes(&mut rendered_lines, &self.format_mode);\n         trim_lines(&mut rendered_lines);\n         rendered_lines\n     }\n@@ -454,8 +469,12 @@ impl FileInfo {\n         return line_index - first_line_index;\n     }\n \n-    fn render_file_lines(&self, codemap: &Rc<CodeMap>) -> Vec<RenderedLine> {\n-        let old_school = check_old_skool();\n+    fn render_file_lines(&self, codemap: &Rc<CodeMapper>) -> Vec<RenderedLine> {\n+        let old_school = match self.format_mode {\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n \n         // As a first step, we elide any instance of more than one\n         // continuous unannotated line.\n@@ -591,7 +610,12 @@ impl FileInfo {\n     }\n \n     fn render_line(&self, line: &Line) -> Vec<RenderedLine> {\n-        let old_school = check_old_skool();\n+        let old_school = match self.format_mode {\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n+\n         let source_string = self.file.get_line(line.line_index)\n                                      .unwrap_or(\"\");\n         let source_kind = RenderedLineKind::SourceText {\n@@ -776,8 +800,12 @@ impl FileInfo {\n     }\n }\n \n-fn prepend_prefixes(rendered_lines: &mut [RenderedLine]) {\n-    let old_school = check_old_skool();\n+fn prepend_prefixes(rendered_lines: &mut [RenderedLine], format_mode: &FormatMode) {\n+    let old_school = match *format_mode {\n+        FormatMode::OriginalErrorFormat => true,\n+        FormatMode::NewErrorFormat => false,\n+        FormatMode::EnvironmentSelected => check_old_skool()\n+    };\n     if old_school {\n         return;\n     }", "previous_filename": "src/libsyntax/errors/snippet/mod.rs"}, {"sha": "7db1a6348b27c9cb737370f602c8eefcb4bee470", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,3 +16,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n serialize = { path = \"../libserialize\" }\n log = { path = \"../liblog\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "d38f979e33c5ac154b5277ecb0bee115dc234cc4", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -57,8 +57,8 @@ use std::fs::File;\n use std::io::Write;\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n+use syntax_pos::Span;\n \n const IF_THIS_CHANGED: &'static str = \"rustc_if_this_changed\";\n const THEN_THIS_WOULD_NEED: &'static str = \"rustc_then_this_would_need\";"}, {"sha": "cbc246ac2a11bfc6c902c72e38df0774c2557c93", "filename": "src/librustc_incremental/calculate_svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -114,8 +114,8 @@ mod svh_visitor {\n     pub use self::SawStmtComponent::*;\n     use self::SawAbiComponent::*;\n     use syntax::ast::{self, Name, NodeId};\n-    use syntax::codemap::Span;\n     use syntax::parse::token;\n+    use syntax_pos::Span;\n     use rustc::ty::TyCtxt;\n     use rustc::hir;\n     use rustc::hir::*;"}, {"sha": "ed31e0ba51056a34fe41af2e76a32b2a58b481ba", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -30,6 +30,7 @@ extern crate serialize as rustc_serialize;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate syntax_pos;\n \n mod assert_dep_graph;\n mod calculate_svh;"}, {"sha": "7e9b6f561b9846f1d0b4f09c72b31918ebd63a64", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,7 +15,7 @@ use lint::{LintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;"}, {"sha": "18f9733040e0f46b8e6f6449efb76e2efbe6f2ef", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -45,7 +45,7 @@ use std::collections::HashSet;\n \n use syntax::{ast};\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::codemap::{self, Span};\n+use syntax_pos::{self, Span};\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;\n@@ -1140,9 +1140,9 @@ impl LateLintPass for DropWithReprExtern {\n                     if hints.iter().any(|attr| *attr == attr::ReprExtern) &&\n                         self_type_def.dtor_kind().has_drop_flag() {\n                         let drop_impl_span = ctx.tcx.map.def_id_span(drop_impl_did,\n-                                                                     codemap::DUMMY_SP);\n+                                                                     syntax_pos::DUMMY_SP);\n                         let self_defn_span = ctx.tcx.map.def_id_span(self_type_did,\n-                                                                     codemap::DUMMY_SP);\n+                                                                     syntax_pos::DUMMY_SP);\n                         ctx.span_lint_note(DROP_WITH_REPR_EXTERN,\n                                            drop_impl_span,\n                                            \"implementing Drop adds hidden state to types, \\"}, {"sha": "4ae5b3afdba19f4bf1d119173c00d92d98da66cd", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -45,6 +45,7 @@ extern crate rustc;\n extern crate log;\n extern crate rustc_back;\n extern crate rustc_const_eval;\n+extern crate syntax_pos;\n \n pub use rustc::lint as lint;\n pub use rustc::middle as middle;"}, {"sha": "97f97a889edc30431de9fe399b0b4afb679fbea0", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,7 +27,8 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::ast;\n use syntax::abi::Abi;\n use syntax::attr;\n-use syntax::codemap::{self, Span};\n+use syntax_pos::Span;\n+use syntax::codemap;\n \n use rustc::hir;\n "}, {"sha": "70482a1c56b7506de4624fbf53db8b646116502d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,9 +19,9 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use syntax::ast;\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::codemap::Span;\n use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n use rustc_back::slice;\n use rustc::hir;"}, {"sha": "11896e176301b3bb00057f6167f22528af3c8a80", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,6 +16,8 @@ rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "dc37bdf6322af1b4f6a65c523e10b74aeceea4d5", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -37,9 +37,10 @@ use middle::region;\n use rustc::ty::subst;\n use rustc::ty::{self, Ty, TyCtxt};\n \n-use syntax::{ast, codemap};\n+use syntax::ast;\n use syntax::ast::NodeIdAssigner;\n use syntax::ptr::P;\n+use syntax_pos;\n \n use std::cell::Cell;\n use std::io::SeekFrom;\n@@ -115,7 +116,7 @@ impl<'a, 'b, 'c, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'c, 'tcx> {\n     fn new_def_id(&self, def_id: DefId) -> DefId {\n         self.tr_def_id(def_id)\n     }\n-    fn new_span(&self, span: codemap::Span) -> codemap::Span {\n+    fn new_span(&self, span: syntax_pos::Span) -> syntax_pos::Span {\n         self.tr_span(span)\n     }\n }\n@@ -206,7 +207,7 @@ impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n \n     /// Translates a `Span` from an extern crate to the corresponding `Span`\n     /// within the local crate's codemap.\n-    pub fn tr_span(&self, span: codemap::Span) -> codemap::Span {\n+    pub fn tr_span(&self, span: syntax_pos::Span) -> syntax_pos::Span {\n         decoder::translate_span(self.cdata,\n                                 self.tcx.sess.codemap(),\n                                 &self.last_filemap_index,\n@@ -226,8 +227,8 @@ impl tr for Option<DefId> {\n     }\n }\n \n-impl tr for codemap::Span {\n-    fn tr(&self, dcx: &DecodeContext) -> codemap::Span {\n+impl tr for syntax_pos::Span {\n+    fn tr(&self, dcx: &DecodeContext) -> syntax_pos::Span {\n         dcx.tr_span(*self)\n     }\n }\n@@ -1268,7 +1269,7 @@ fn decode_item_ast(item_doc: rbml::Doc) -> hir::Item {\n \n #[cfg(test)]\n trait FakeExtCtxt {\n-    fn call_site(&self) -> codemap::Span;\n+    fn call_site(&self) -> syntax_pos::Span;\n     fn cfg(&self) -> ast::CrateConfig;\n     fn ident_of(&self, st: &str) -> ast::Ident;\n     fn name_of(&self, st: &str) -> ast::Name;\n@@ -1277,11 +1278,11 @@ trait FakeExtCtxt {\n \n #[cfg(test)]\n impl FakeExtCtxt for parse::ParseSess {\n-    fn call_site(&self) -> codemap::Span {\n-        codemap::Span {\n-            lo: codemap::BytePos(0),\n-            hi: codemap::BytePos(0),\n-            expn_id: codemap::NO_EXPANSION,\n+    fn call_site(&self) -> syntax_pos::Span {\n+        syntax_pos::Span {\n+            lo: syntax_pos::BytePos(0),\n+            hi: syntax_pos::BytePos(0),\n+            expn_id: syntax_pos::NO_EXPANSION,\n         }\n     }\n     fn cfg(&self) -> ast::CrateConfig { Vec::new() }"}, {"sha": "07c985106a5eaf879c73d28ee9c9f842f0f82308", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -34,12 +34,13 @@ use std::fs;\n \n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::codemap::{self, Span, mk_sp, Pos};\n+use syntax::codemap;\n use syntax::parse;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n use syntax::visit;\n+use syntax_pos::{self, Span, mk_sp, Pos};\n use log;\n \n struct LocalCrateReader<'a> {\n@@ -726,7 +727,7 @@ impl<'a> CrateReader<'a> {\n         info!(\"panic runtime not found -- loading {}\", name);\n \n         let (cnum, data, _) = self.resolve_crate(&None, name, name, None,\n-                                                 codemap::DUMMY_SP,\n+                                                 syntax_pos::DUMMY_SP,\n                                                  PathKind::Crate, false);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n@@ -807,7 +808,7 @@ impl<'a> CrateReader<'a> {\n             &self.sess.target.target.options.exe_allocation_crate\n         };\n         let (cnum, data, _) = self.resolve_crate(&None, name, name, None,\n-                                                 codemap::DUMMY_SP,\n+                                                 syntax_pos::DUMMY_SP,\n                                                  PathKind::Crate, false);\n \n         // Sanity check the crate we loaded to ensure that it is indeed an\n@@ -1076,7 +1077,7 @@ pub fn import_codemap(local_codemap: &codemap::CodeMap,\n             None => {\n                 // We can't reuse an existing FileMap, so allocate a new one\n                 // containing the information we need.\n-                let codemap::FileMap {\n+                let syntax_pos::FileMap {\n                     name,\n                     abs_path,\n                     start_pos,\n@@ -1118,8 +1119,8 @@ pub fn import_codemap(local_codemap: &codemap::CodeMap,\n \n     return imported_filemaps;\n \n-    fn are_equal_modulo_startpos(fm1: &codemap::FileMap,\n-                                 fm2: &codemap::FileMap)\n+    fn are_equal_modulo_startpos(fm1: &syntax_pos::FileMap,\n+                                 fm2: &syntax_pos::FileMap)\n                                  -> bool {\n         if fm1.name != fm2.name {\n             return false;"}, {"sha": "e89f428c96f8c1953f9c4048d6da89e768a430dd", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -36,6 +36,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::codemap;\n use syntax::parse::token::IdentInterner;\n+use syntax_pos;\n \n pub use middle::cstore::{NativeLibraryKind, LinkagePreference};\n pub use middle::cstore::{NativeStatic, NativeFramework, NativeUnknown};\n@@ -52,15 +53,15 @@ pub enum MetadataBlob {\n     MetadataArchive(loader::ArchiveMetadata),\n }\n \n-/// Holds information about a codemap::FileMap imported from another crate.\n+/// Holds information about a syntax_pos::FileMap imported from another crate.\n /// See creader::import_codemap() for more information.\n pub struct ImportedFileMap {\n     /// This FileMap's byte-offset within the codemap of its original crate\n-    pub original_start_pos: codemap::BytePos,\n+    pub original_start_pos: syntax_pos::BytePos,\n     /// The end of this FileMap within the codemap of its original crate\n-    pub original_end_pos: codemap::BytePos,\n+    pub original_end_pos: syntax_pos::BytePos,\n     /// The imported FileMap's representation within the local codemap\n-    pub translated_filemap: Rc<codemap::FileMap>\n+    pub translated_filemap: Rc<syntax_pos::FileMap>\n }\n \n pub struct crate_metadata {"}, {"sha": "3efdf36acd9734673def1463563a8e2d2bc87a9f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -56,10 +56,10 @@ use syntax::attr;\n use syntax::parse::token::{self, IdentInterner};\n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::codemap::{self, Span, BytePos, NO_EXPANSION};\n+use syntax::codemap;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-\n+use syntax_pos::{self, Span, BytePos, NO_EXPANSION};\n \n pub type Cmd<'a> = &'a crate_metadata;\n \n@@ -1230,7 +1230,7 @@ fn get_attributes(md: rbml::Doc) -> Vec<ast::Attribute> {\n                         value: meta_item,\n                         is_sugared_doc: is_sugared_doc,\n                     },\n-                    span: codemap::DUMMY_SP\n+                    span: syntax_pos::DUMMY_SP\n                 }\n             }).collect()\n         },\n@@ -1380,8 +1380,8 @@ fn reverse_translate_def_id(cdata: Cmd, did: DefId) -> Option<DefId> {\n pub fn translate_span(cdata: Cmd,\n                       codemap: &codemap::CodeMap,\n                       last_filemap_index_hint: &Cell<usize>,\n-                      span: codemap::Span)\n-                      -> codemap::Span {\n+                      span: syntax_pos::Span)\n+                      -> syntax_pos::Span {\n     let span = if span.lo > span.hi {\n         // Currently macro expansion sometimes produces invalid Span values\n         // where lo > hi. In order not to crash the compiler when trying to\n@@ -1390,7 +1390,7 @@ pub fn translate_span(cdata: Cmd,\n         // least some of the time).\n         // This workaround is only necessary as long as macro expansion is\n         // not fixed. FIXME(#23480)\n-        codemap::mk_sp(span.lo, span.lo)\n+        syntax_pos::mk_sp(span.lo, span.lo)\n     } else {\n         span\n     };\n@@ -1430,7 +1430,7 @@ pub fn translate_span(cdata: Cmd,\n     let hi = (span.hi - filemap.original_start_pos) +\n               filemap.translated_filemap.start_pos;\n \n-    codemap::mk_sp(lo, hi)\n+    syntax_pos::mk_sp(lo, hi)\n }\n \n pub fn each_inherent_implementation_for_type<F>(cdata: Cmd,\n@@ -1733,7 +1733,7 @@ pub fn is_default_impl(cdata: Cmd, impl_id: DefIndex) -> bool {\n     item_family(impl_doc) == Family::DefaultImpl\n }\n \n-pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<codemap::FileMap> {\n+pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<syntax_pos::FileMap> {\n     let crate_doc = rbml::Doc::new(metadata);\n     let cm_doc = reader::get_doc(crate_doc, tag_codemap);\n "}, {"sha": "c23ad6d5f078fa2c284b8d379bedb43a15d2c794", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -44,10 +44,10 @@ use std::rc::Rc;\n use std::u32;\n use syntax::abi::Abi;\n use syntax::ast::{self, NodeId, Name, CRATE_NODE_ID, CrateNum};\n-use syntax::codemap::BytePos;\n use syntax::attr;\n-use syntax::errors::Handler;\n+use errors::Handler;\n use syntax;\n+use syntax_pos::BytePos;\n use rbml::writer::Encoder;\n \n use rustc::hir::{self, PatKind};"}, {"sha": "1cf7282e9e95fe4bce706151681e275a7ac67f33", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -28,10 +28,11 @@\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n-\n+extern crate syntax_pos;\n extern crate flate;\n extern crate rbml;\n extern crate serialize as rustc_serialize; // used by deriving\n+extern crate rustc_errors as errors;\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "56393b79980f62a75107e315267ee7556fd1df24", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -225,8 +225,8 @@ use rustc::util::common;\n use rustc_llvm as llvm;\n use rustc_llvm::{False, ObjectFile, mk_section_iter};\n use rustc_llvm::archive_ro::ArchiveRO;\n-use syntax::codemap::Span;\n-use syntax::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n+use syntax_pos::Span;\n use rustc_back::target::Target;\n \n use std::cmp;"}, {"sha": "7dadf8d108a715f5e4dbf4c0b0e64499d5fc53d1", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,12 +16,12 @@ use cstore::CStore;\n use rustc::session::Session;\n \n use std::collections::{HashSet, HashMap};\n-use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::ext;\n+use syntax_pos::Span;\n \n pub struct MacroLoader<'a> {\n     sess: &'a Session,"}, {"sha": "2b8ba107fefc6c35586c6fd7db3bc2ec2d9c4cbb", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -29,7 +29,7 @@ use rustc::hir;\n \n use syntax::abi::Abi;\n use syntax::ast;\n-use syntax::errors::Handler;\n+use errors::Handler;\n \n use rbml::leb128;\n use encoder;"}, {"sha": "f1487992cb52285365e549e458484be1765592ce", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -24,7 +24,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n use rustc::mir::repr::*;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, yielding an rvalue."}, {"sha": "8ae23c9103b02ca7c51d7925b05715724e1cda83", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,7 +13,7 @@ use build::scope::LoopScope;\n use hair::*;\n use rustc::middle::region::CodeExtent;\n use rustc::mir::repr::*;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n "}, {"sha": "a94adafa802138f1c3e7409cb6da3aad36bf9028", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,7 +21,7 @@ use rustc::ty::{AdtDef, Ty};\n use rustc::mir::repr::*;\n use hair::*;\n use syntax::ast::{Name, NodeId};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n // helper functions, broken out by category:\n mod simplify;"}, {"sha": "8c9ed53c8ab4de2794b1c5ce499af946d38d29f7", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -23,7 +23,7 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n use rustc::mir::repr::*;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use std::cmp::Ordering;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {"}, {"sha": "79a4cf73041d7c6e6d120018d37e2297d8ac1a6b", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,7 +19,7 @@ use rustc::ty::{self, Ty};\n \n use rustc::mir::repr::*;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Add a new temporary value of type `ty` storing the result of"}, {"sha": "362e1e26fdf1e4cf79c76208f7c9efbb0abdb20f", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,8 +16,8 @@ use rustc::util::nodemap::NodeMap;\n use rustc::hir;\n use syntax::abi::Abi;\n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::parse::token::keywords;\n+use syntax_pos::Span;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n "}, {"sha": "1703fee9360cc4923929001ae990ef4202401333", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -92,7 +92,7 @@ use rustc::middle::lang_items;\n use rustc::ty::subst::{Substs, Subst, VecPerParamSpace};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::repr::*;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fnv::FnvHashMap;\n "}, {"sha": "b5da50792762f17f33e4202447b0a05f44e143d6", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -17,8 +17,8 @@ use rustc::hir::pat_util::{EnumerateAndAdjustIterator, pat_is_resolved_const};\n use rustc::ty::{self, Ty};\n use rustc::mir::repr::*;\n use rustc::hir::{self, PatKind};\n-use syntax::codemap::Span;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n /// When there are multiple patterns in a single arm, each one has its\n /// own node-ids for the bindings.  References to the variables always"}, {"sha": "a2746bf30c91f7020702f6bd15f94f243c59c27a", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -23,7 +23,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtDef, ClosureSubsts, Region, Ty};\n use rustc::hir;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use self::cx::Cx;\n \n pub mod cx;"}, {"sha": "3d01d49c53472ecb57c1429a97ca57b1cea19f16", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -38,6 +38,7 @@ extern crate rustc_back;\n extern crate rustc_bitflags;\n #[macro_use]\n extern crate syntax;\n+extern crate syntax_pos;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n "}, {"sha": "b7c5f35892b0b870c20df88a70913b5a9ca30e56", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -33,7 +33,7 @@ use rustc::util::nodemap::NodeMap;\n use rustc::hir;\n use rustc::hir::intravisit::{self, FnKind, Visitor};\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use std::mem;\n "}, {"sha": "4b551d6bb083cfa85eeb1af32293f67e1b6f21c8", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -26,7 +26,7 @@ use rustc::mir::repr::*;\n use rustc::mir::visit::{LvalueContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n use rustc::ty::{self, TyCtxt};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use build::Location;\n "}, {"sha": "1d00938fb25eb3d2c636fb0097ddf906d020c77d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -30,8 +30,8 @@ use rustc::mir::transform::{Pass, MirMapPass, MirPassHook, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::util::nodemap::DefIdMap;\n use syntax::abi::Abi;\n-use syntax::codemap::Span;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax_pos::Span;\n \n use std::collections::hash_map::Entry;\n use std::fmt;"}, {"sha": "db49e1e040791803103f66e7e34742e5d4b60248", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,7 +22,7 @@ use rustc::mir::tcx::LvalueTy;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc::mir::visit::{self, Visitor};\n use std::fmt;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_data_structures::indexed_vec::Idx;\n "}, {"sha": "cc710e0ac3563772aa88214d498e9d12488f992d", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,3 +14,5 @@ rustc = { path = \"../librustc\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n\\ No newline at end of file"}, {"sha": "a337a9f94849b8995471eb741eb39a1d9e77274c", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,10 +19,10 @@\n use rustc::lint;\n use rustc::session::Session;\n use syntax::ast::*;\n-use syntax::codemap::Span;\n-use syntax::errors;\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n+use syntax_pos::Span;\n+use errors;\n \n struct AstValidator<'a> {\n     session: &'a Session,"}, {"sha": "27ce03b2d9390c8c250f921282b072a33e3961c0", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -46,7 +46,7 @@ use rustc::lint::builtin::CONST_ERR;\n \n use rustc::hir::{self, PatKind};\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir::intravisit::{self, FnKind, Visitor};\n \n use std::collections::hash_map::Entry;"}, {"sha": "650613f4844f526facb139225cc39d3a8a46e1e4", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -34,6 +34,8 @@ extern crate rustc_const_math;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate syntax_pos;\n+extern crate rustc_errors as errors;\n \n pub mod diagnostics;\n "}, {"sha": "dd0f16baaa395d524e6e91bf2abdcb3dbe5e0d65", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,7 +15,7 @@ use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n #[derive(Clone, Copy, PartialEq)]\n enum Context {"}, {"sha": "4684683f02501afe32eeb60b76cd2afbe0891827", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -20,7 +20,7 @@ use rustc::traits::ProjectionMode;\n use rustc::hir;\n use rustc::hir::intravisit;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut rvcx = RvalueContext { tcx: tcx };"}, {"sha": "d0938ad09a0da1bced4e17ef57d5c1c1096c97fe", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,8 +18,8 @@ use rustc::hir::def::{Def, DefMap};\n use rustc::util::nodemap::NodeMap;\n \n use syntax::{ast};\n-use syntax::codemap::Span;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax_pos::Span;\n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir;\n "}, {"sha": "150d2b67392d6ecf7d4a27ada38c4405c1ef8b8c", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,3 +15,4 @@ rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "ff3038c3d1175326659d82763a0361e867105436", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,8 +12,8 @@\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::Span;\n-use syntax::errors;\n+use errors;\n+use syntax_pos::Span;\n use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::Visitor;"}, {"sha": "e60a657ba193d9829e9844b586c825c3c138629f", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -70,6 +70,8 @@\n extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_metadata;\n+extern crate syntax_pos;\n+extern crate rustc_errors as errors;\n \n pub use self::registry::Registry;\n "}, {"sha": "a3cd9b5da02bc3b2df506cc166614784826529d5", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -20,9 +20,9 @@ use std::env;\n use std::mem;\n use std::path::PathBuf;\n use syntax::ast;\n-use syntax::codemap::{Span, COMMAND_LINE_SP};\n use syntax::ptr::P;\n use syntax::attr::AttrMetaMethods;\n+use syntax_pos::{Span, COMMAND_LINE_SP};\n \n /// Pointer to a registrar function.\n pub type PluginRegistrarFun ="}, {"sha": "54fa0197de4fe0fcf2ee7013308ce69a3cb45701", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,11 +18,11 @@ use rustc::mir::transform::MirMapPass;\n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroExpanderFn, MacroRulesTT};\n-use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n+use syntax_pos::Span;\n \n use std::collections::HashMap;\n use std::borrow::ToOwned;"}, {"sha": "85a6f732dd52e71716efd93395dbcd210f028a99", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -23,6 +23,7 @@\n \n extern crate rustc;\n #[macro_use] extern crate syntax;\n+extern crate syntax_pos;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n@@ -35,7 +36,7 @@ use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::NodeSet;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use std::cmp;\n use std::mem::replace;"}, {"sha": "5ce4c74e735fd6fb11015095554c5777730d2878", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,3 +14,5 @@ log = { path = \"../liblog\" }\n syntax = { path = \"../libsyntax\" }\n rustc = { path = \"../librustc\" }\n arena = { path = \"../libarena\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "b4cbef183530511daa229f7be7d05335143f38a6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -29,7 +29,6 @@ use rustc::ty::{self, VariantKind};\n use syntax::ast::Name;\n use syntax::attr;\n use syntax::parse::token;\n-use syntax::codemap::{Span, DUMMY_SP};\n \n use syntax::ast::{Block, Crate, DeclKind};\n use syntax::ast::{ForeignItem, ForeignItemKind, Item, ItemKind};\n@@ -38,6 +37,8 @@ use syntax::ast::{Stmt, StmtKind, TraitItemKind};\n use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::visit::{self, Visitor};\n \n+use syntax_pos::{Span, DUMMY_SP};\n+\n trait ToNameBinding<'a> {\n     fn to_name_binding(self) -> NameBinding<'a>;\n }"}, {"sha": "bcb14bc8335753d7478dd314ee593fa0fdf47f84", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,7 +27,7 @@ use Namespace::{TypeNS, ValueNS};\n use rustc::lint;\n use syntax::ast::{self, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::visit::{self, Visitor};\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n \n \n struct UnusedImportCheckVisitor<'a, 'b: 'a> {"}, {"sha": "444926698d636a07cabe575616533516b1577c7b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,6 +27,8 @@\n extern crate log;\n #[macro_use]\n extern crate syntax;\n+extern crate syntax_pos;\n+extern crate rustc_errors as errors;\n extern crate arena;\n #[macro_use]\n extern crate rustc;\n@@ -54,8 +56,6 @@ use rustc::util::nodemap::{NodeMap, NodeSet, FnvHashMap, FnvHashSet};\n use syntax::ext::mtwt;\n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n-use syntax::codemap::{self, Span};\n-use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::{self, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -66,6 +66,9 @@ use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{PathSegment, PathParameters, QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n \n+use syntax_pos::Span;\n+use errors::DiagnosticBuilder;\n+\n use std::collections::{HashMap, HashSet};\n use std::cell::{Cell, RefCell};\n use std::fmt;\n@@ -177,13 +180,13 @@ enum UnresolvedNameContext<'a> {\n }\n \n fn resolve_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n-                                 span: syntax::codemap::Span,\n+                                 span: syntax_pos::Span,\n                                  resolution_error: ResolutionError<'c>) {\n     resolve_struct_error(resolver, span, resolution_error).emit();\n }\n \n fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n-                                        span: syntax::codemap::Span,\n+                                        span: syntax_pos::Span,\n                                         resolution_error: ResolutionError<'c>)\n                                         -> DiagnosticBuilder<'a> {\n     if !resolver.emit_errors {\n@@ -1805,10 +1808,10 @@ impl<'a> Resolver<'a> {\n                             self.resolve_crate_relative_path(trait_path.span, segments, TypeNS)\n                         } else {\n                             self.resolve_module_relative_path(trait_path.span, segments, TypeNS)\n-                        }.map(|binding| binding.span).unwrap_or(codemap::DUMMY_SP)\n+                        }.map(|binding| binding.span).unwrap_or(syntax_pos::DUMMY_SP)\n                     };\n \n-                    if definition_site != codemap::DUMMY_SP {\n+                    if definition_site != syntax_pos::DUMMY_SP {\n                         err.span_label(definition_site,\n                                        &format!(\"type aliases cannot be used for traits\"));\n                     }\n@@ -3330,7 +3333,7 @@ impl<'a> Resolver<'a> {\n             },\n         };\n \n-        if old_binding.span != codemap::DUMMY_SP {\n+        if old_binding.span != syntax_pos::DUMMY_SP {\n             err.span_label(old_binding.span, &format!(\"previous {} of `{}` here\", noun, name));\n         }\n         err.emit();"}, {"sha": "cb308f91204046fae6b06b7a73eafbce7e7e1a8e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -25,8 +25,8 @@ use rustc::lint;\n use rustc::hir::def::*;\n \n use syntax::ast::{NodeId, Name};\n-use syntax::codemap::{Span, DUMMY_SP};\n use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax_pos::{Span, DUMMY_SP};\n \n use std::cell::{Cell, RefCell};\n "}, {"sha": "3d66e5a3007874cecbeaeeff98ddd43e33b481c7", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,3 +13,4 @@ log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n syntax = { path = \"../libsyntax\" }\n serialize = { path = \"../libserialize\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "493f7669337fe17a26cce8851220b2d313a5dc9f", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,7 +15,7 @@\n \n use rustc::hir::def_id::DefId;\n use syntax::ast::{CrateNum, NodeId};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n pub struct CrateData {\n     pub name: String,"}, {"sha": "ddd5bf8a3b96b4e346601f96bf3aab3225b0555d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -36,11 +36,12 @@ use std::collections::HashSet;\n use std::hash::*;\n \n use syntax::ast::{self, NodeId, PatKind};\n-use syntax::codemap::*;\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{path_to_string, ty_to_string, bounds_to_string, generics_to_string};\n use syntax::ptr::P;\n+use syntax::codemap::Spanned;\n+use syntax_pos::*;\n \n use super::{escape, generated_code, SaveContext, PathCollector};\n use super::data::*;"}, {"sha": "65e4f7e869b0d01f3157df9b1b1ac71ac3dc8633", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,7 +12,8 @@ use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use syntax::ast::{CrateNum, NodeId};\n-use syntax::codemap::{Span, CodeMap};\n+use syntax::codemap::CodeMap;\n+use syntax_pos::Span;\n \n use data;\n "}, {"sha": "236d26c0c90aa961286be8d4d629ffd4eb375b43", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -27,6 +27,7 @@\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n extern crate serialize as rustc_serialize;\n+extern crate syntax_pos;\n \n mod csv_dumper;\n mod json_dumper;\n@@ -49,10 +50,11 @@ use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n \n use syntax::ast::{self, NodeId, PatKind};\n-use syntax::codemap::*;\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{ty_to_string, arg_to_string};\n+use syntax::codemap::MacroAttribute;\n+use syntax_pos::*;\n \n pub use self::csv_dumper::CsvDumper;\n pub use self::json_dumper::JsonDumper;"}, {"sha": "953c65549195a9ee00739cafa6f145c7221b23c2", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -17,9 +17,9 @@ use std::env;\n use std::path::Path;\n \n use syntax::ast;\n-use syntax::codemap::*;\n use syntax::parse::lexer::{self, Reader, StringReader};\n use syntax::parse::token::{self, keywords, Token};\n+use syntax_pos::*;\n \n #[derive(Clone)]\n pub struct SpanUtils<'a> {"}, {"sha": "38f9e7ab0c51cce9537b5e3822487ef1d84cc86a", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,8 +19,10 @@ rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "15beba0d9a6eeb639bb88bf82513df3e586bec83", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -230,7 +230,7 @@ use std::fmt;\n use std::rc::Rc;\n use rustc::hir::{self, PatKind};\n use syntax::ast::{self, DUMMY_NODE_ID, NodeId};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir::fold::Folder;\n use syntax::ptr::P;\n "}, {"sha": "0ca59cfd7571b8e846712f90e8433a689fae6b0b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -42,8 +42,8 @@ use std::process::Command;\n use std::str;\n use flate;\n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::attr::AttrMetaMethods;\n+use syntax_pos::Span;\n \n // RLIB LLVM-BYTECODE OBJECT LAYOUT\n // Version 1"}, {"sha": "d644fcca3bad869022a5b9aaaa5c1ca6bb4cf12a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,9 +19,9 @@ use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleTranslation};\n use util::common::time;\n use util::common::path2cstr;\n-use syntax::codemap::MultiSpan;\n-use syntax::errors::{self, Handler, Level, RenderSpan};\n-use syntax::errors::emitter::CoreEmitter;\n+use errors::{self, Handler, Level, RenderSpan};\n+use errors::emitter::CoreEmitter;\n+use syntax_pos::MultiSpan;\n \n use std::collections::HashMap;\n use std::ffi::{CStr, CString};\n@@ -357,7 +357,7 @@ struct HandlerFreeVars<'a> {\n unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext<'a>,\n                                                msg: &'b str,\n                                                cookie: c_uint) {\n-    use syntax::codemap::ExpnId;\n+    use syntax_pos::ExpnId;\n \n     match cgcx.lto_ctxt {\n         Some((sess, _)) => {"}, {"sha": "2998c834aca7a870d4f62011b3c1d13dee6cb4e0", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -101,7 +101,7 @@ use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::str;\n use std::{i8, i16, i32, i64};\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n use syntax::parse::token::InternedString;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;"}, {"sha": "4a7a5736b13a6fd4c49ccd1bc0e1e7d8fb085d27", "filename": "src/librustc_trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuild.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,7 +16,7 @@ use llvm::{AtomicBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{Opcode, IntPredicate, RealPredicate};\n use llvm::{ValueRef, BasicBlockRef};\n use common::*;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use builder::Builder;\n use type_::Type;"}, {"sha": "d415698660000c229a0c1c44c6439e5c0e6f7b9d", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -24,7 +24,7 @@ use libc::{c_uint, c_char};\n \n use std::ffi::CString;\n use std::ptr;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n pub struct Builder<'a, 'tcx: 'a> {\n     pub llbuilder: BuilderRef,"}, {"sha": "9ea65532b35b61c8c3a1cd35deda4ca89861ad34", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -53,8 +53,8 @@ use Disr;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::hir;\n \n-use syntax::codemap::DUMMY_SP;\n-use syntax::errors;\n+use syntax_pos::DUMMY_SP;\n+use errors;\n use syntax::ptr::P;\n \n #[derive(Debug)]"}, {"sha": "eea6aec37260e9e918ed8417a43e850919871494", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -203,8 +203,8 @@ use rustc::mir::visit as mir_visit;\n use rustc::mir::visit::Visitor as MirVisitor;\n \n use syntax::abi::Abi;\n-use syntax::codemap::DUMMY_SP;\n-use syntax::errors;\n+use errors;\n+use syntax_pos::DUMMY_SP;\n use base::custom_coerce_unsize_info;\n use context::SharedCrateContext;\n use common::{fulfill_obligation, normalize_and_test_predicates, type_is_sized};"}, {"sha": "d057f623383d3587b59b0e0b77c813c5b0334fca", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -52,9 +52,9 @@ use std::ffi::CString;\n use std::cell::{Cell, RefCell};\n \n use syntax::ast;\n-use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n+use syntax_pos::{DUMMY_SP, Span};\n \n pub use context::{CrateContext, SharedCrateContext};\n "}, {"sha": "4e12d3d5d82310120897b93bd06d89a99300f65f", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -49,9 +49,9 @@ use std::borrow::Cow;\n use libc::c_uint;\n use syntax::ast::{self, LitKind};\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub type FnArgMap<'a> = Option<&'a NodeMap<ValueRef>>;\n "}, {"sha": "875f88e37c916d623d8e9024be1aa7506a0b7d07", "filename": "src/librustc_trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdatum.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -106,7 +106,7 @@ use rustc::ty::Ty;\n \n use std::fmt;\n use syntax::ast;\n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n \n /// A `Datum` encapsulates the result of evaluating an expression.  It\n /// describes where the value is stored, what Rust type the value has,"}, {"sha": "2b079e7dcc8d9cd483c5db3786435f2750a2dae0", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,7 +22,7 @@ use rustc::util::nodemap::NodeMap;\n use libc::c_uint;\n use std::ptr;\n \n-use syntax::codemap::{Span, Pos};\n+use syntax_pos::{Span, Pos};\n use syntax::{ast, codemap};\n \n use rustc_data_structures::bitvec::BitVector;"}, {"sha": "34dedeede98e0c6ef480df93c2374cad40164e05", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -44,9 +44,9 @@ use std::ptr;\n use std::rc::Rc;\n use syntax;\n use syntax::util::interner::Interner;\n-use syntax::codemap::Span;\n-use syntax::{ast, codemap};\n+use syntax::ast;\n use syntax::parse::token;\n+use syntax_pos::{self, Span};\n \n \n // From DWARF 5.\n@@ -660,7 +660,7 @@ fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                             &[],\n                             containing_scope,\n                             NO_FILE_METADATA,\n-                            codemap::DUMMY_SP)\n+                            syntax_pos::DUMMY_SP)\n }\n \n pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n@@ -1385,7 +1385,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                                             &[sole_struct_member_description],\n                                             self.containing_scope,\n                                             self.file_metadata,\n-                                            codemap::DUMMY_SP);\n+                                            syntax_pos::DUMMY_SP);\n \n                 // Encode the information about the null variant in the union\n                 // member's name.\n@@ -1615,7 +1615,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 let discriminant_base_type_metadata =\n                     type_metadata(cx,\n                                   adt::ty_of_inttype(cx.tcx(), inttype),\n-                                  codemap::DUMMY_SP);\n+                                  syntax_pos::DUMMY_SP);\n                 let discriminant_name = get_enum_discriminant_name(cx, enum_def_id);\n \n                 let name = CString::new(discriminant_name.as_bytes()).unwrap();\n@@ -1849,7 +1849,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     let node_def_id = cx.tcx().map.local_def_id(node_id);\n     let (var_scope, span) = get_namespace_and_span_for_item(cx, node_def_id);\n \n-    let (file_metadata, line_number) = if span != codemap::DUMMY_SP {\n+    let (file_metadata, line_number) = if span != syntax_pos::DUMMY_SP {\n         let loc = span_start(cx, span);\n         (file_metadata(cx, &loc.file.name, &loc.file.abs_path), loc.line as c_uint)\n     } else {"}, {"sha": "8c5b3ed54c2f58e04acf399a12b0171084154842", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -42,8 +42,8 @@ use std::cell::{Cell, RefCell};\n use std::ffi::CString;\n use std::ptr;\n \n-use syntax::codemap::{Span, Pos};\n-use syntax::{ast, codemap};\n+use syntax_pos::{self, Span, Pos};\n+use syntax::ast;\n use syntax::attr::IntType;\n \n pub mod gdb;\n@@ -242,7 +242,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let (containing_scope, span) = get_containing_scope_and_span(cx, instance);\n \n     // This can be the case for functions inlined from another crate\n-    if span == codemap::DUMMY_SP {\n+    if span == syntax_pos::DUMMY_SP {\n         return FunctionDebugContext::FunctionWithoutDebugInfo;\n     }\n \n@@ -327,7 +327,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         signature.push(match sig.output {\n             ty::FnConverging(ret_ty) => match ret_ty.sty {\n                 ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n-                _ => type_metadata(cx, ret_ty, codemap::DUMMY_SP)\n+                _ => type_metadata(cx, ret_ty, syntax_pos::DUMMY_SP)\n             },\n             ty::FnDiverging => diverging_type_metadata(cx)\n         });\n@@ -340,13 +340,13 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n         // Arguments types\n         for &argument_type in inputs {\n-            signature.push(type_metadata(cx, argument_type, codemap::DUMMY_SP));\n+            signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n         }\n \n         if abi == Abi::RustCall && !sig.inputs.is_empty() {\n             if let ty::TyTuple(args) = sig.inputs[sig.inputs.len() - 1].sty {\n                 for &argument_type in args {\n-                    signature.push(type_metadata(cx, argument_type, codemap::DUMMY_SP));\n+                    signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n                 }\n             }\n         }\n@@ -386,7 +386,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n             generics.types.as_slice().iter().enumerate().map(|(i, param)| {\n                 let actual_type = cx.tcx().normalize_associated_type(&actual_types[i]);\n-                let actual_type_metadata = type_metadata(cx, actual_type, codemap::DUMMY_SP);\n+                let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                 let name = CString::new(param.name.as_str().as_bytes()).unwrap();\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n@@ -420,7 +420,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 let impl_self_ty = monomorphize::apply_param_substs(cx.tcx(),\n                                                                     instance.substs,\n                                                                     &impl_self_ty);\n-                Some(type_metadata(cx, impl_self_ty, codemap::DUMMY_SP))\n+                Some(type_metadata(cx, impl_self_ty, syntax_pos::DUMMY_SP))\n             } else {\n                 // For trait method impls we still use the \"parallel namespace\"\n                 // strategy\n@@ -441,7 +441,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         // Try to get some span information, if we have an inlined item.\n         let definition_span = match cx.external().borrow().get(&instance.def) {\n             Some(&Some(node_id)) => cx.tcx().map.span(node_id),\n-            _ => cx.tcx().map.def_id_span(instance.def, codemap::DUMMY_SP)\n+            _ => cx.tcx().map.def_id_span(instance.def, syntax_pos::DUMMY_SP)\n         };\n \n         (containing_scope, definition_span)"}, {"sha": "167229ddfd9856eb24b5f9c42165ec7fd00e888a", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,7 +22,7 @@ use common::CrateContext;\n use libc::c_uint;\n use std::ffi::CString;\n use std::ptr;\n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n \n pub fn mangled_name_of_item(ccx: &CrateContext, def_id: DefId, extra: &str) -> String {\n     fn fill_nested(ccx: &CrateContext, def_id: DefId, extra: &str, output: &mut String) {"}, {"sha": "9726001b4d42b71828a51298eee9127a817eff9d", "filename": "src/librustc_trans/debuginfo/source_loc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,8 +21,8 @@ use common::{NodeIdAndSpan, CrateContext, FunctionContext};\n \n use libc::c_uint;\n use std::ptr;\n-use syntax::codemap::{Span, Pos};\n-use syntax::{ast, codemap};\n+use syntax_pos::{self, Span, Pos};\n+use syntax::ast;\n \n pub fn get_cleanup_debug_loc_for_ast_node<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                     node_id: ast::NodeId,\n@@ -70,7 +70,7 @@ pub fn get_cleanup_debug_loc_for_ast_node<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             if !bytes.is_empty() && &bytes[bytes.len()-1..] == b\"}\" {\n                 cleanup_span = Span {\n-                    lo: node_span.hi - codemap::BytePos(1),\n+                    lo: node_span.hi - syntax_pos::BytePos(1),\n                     hi: node_span.hi,\n                     expn_id: node_span.expn_id\n                 };"}, {"sha": "1e0afa4534b15f5f71803582e62031bf4cfede69", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,8 +21,8 @@ use machine;\n use common::{CrateContext, FunctionContext};\n use type_::Type;\n \n-use syntax::codemap::Span;\n-use syntax::{ast, codemap};\n+use syntax_pos::{self, Span};\n+use syntax::ast;\n \n pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n {\n@@ -44,8 +44,8 @@ pub fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n     };\n }\n \n-/// Return codemap::Loc corresponding to the beginning of the span\n-pub fn span_start(cx: &CrateContext, span: Span) -> codemap::Loc {\n+/// Return syntax_pos::Loc corresponding to the beginning of the span\n+pub fn span_start(cx: &CrateContext, span: Span) -> syntax_pos::Loc {\n     cx.sess().codemap().lookup_char_pos(span.lo)\n }\n \n@@ -88,7 +88,7 @@ pub fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: DefId)\n     // Try to get some span information, if we have an inlined item.\n     let definition_span = match cx.external().borrow().get(&def_id) {\n         Some(&Some(node_id)) => cx.tcx().map.span(node_id),\n-        _ => cx.tcx().map.def_id_span(def_id, codemap::DUMMY_SP)\n+        _ => cx.tcx().map.def_id_span(def_id, syntax_pos::DUMMY_SP)\n     };\n \n     (containing_scope, definition_span)"}, {"sha": "71c6cba9cc22a6866aa221368c44cf21950a94ff", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -81,8 +81,9 @@ use type_::Type;\n \n use rustc::hir;\n \n-use syntax::{ast, codemap};\n+use syntax::ast;\n use syntax::parse::token::InternedString;\n+use syntax_pos;\n use std::fmt;\n use std::mem;\n \n@@ -454,7 +455,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n }\n \n fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                              span: codemap::Span,\n+                              span: syntax_pos::Span,\n                               source: Datum<'tcx, Rvalue>,\n                               target: Datum<'tcx, Rvalue>)\n                               -> Block<'blk, 'tcx> {\n@@ -1265,7 +1266,7 @@ fn trans_def_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn trans_struct<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                             fields: &[hir::Field],\n                             base: Option<&hir::Expr>,\n-                            expr_span: codemap::Span,\n+                            expr_span: syntax_pos::Span,\n                             expr_id: ast::NodeId,\n                             ty: Ty<'tcx>,\n                             dest: Dest) -> Block<'blk, 'tcx> {"}, {"sha": "ac23d713d2727936f91b8cdc042b656363920960", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -43,7 +43,7 @@ use type_::Type;\n use value::Value;\n \n use arena::TypedArena;\n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n \n pub fn trans_exchange_free_dyn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                            v: ValueRef,"}, {"sha": "bd24647edf00b4b0f349c7e60f90bbab479a2dbe", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -44,7 +44,7 @@ use syntax::ptr::P;\n use syntax::parse::token;\n \n use rustc::session::Session;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n \n use std::cmp::Ordering;\n "}, {"sha": "c369858556d3a454c823b2862d636b6226afdcdd", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -55,6 +55,8 @@ extern crate rustc_const_eval;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate syntax_pos;\n+extern crate rustc_errors as errors;\n \n pub use rustc::session;\n pub use rustc::middle;"}, {"sha": "ac6af8d66e19ff55b24c84ce9e099147071c4506", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -36,7 +36,7 @@ use value::Value;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n use syntax::ast::Name;\n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n \n // drop_glue pointer, size, align.\n const VTABLE_OFFSET: usize = 3;"}, {"sha": "da72793abf6dab869a558e9993e7362c342ef916", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -34,7 +34,7 @@ use type_of;\n use type_::Type;\n use value::Value;\n \n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n \n use std::ptr;\n "}, {"sha": "0221232a77df5275a89754b15c3e39e5104ce411", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,7 +21,7 @@ use debuginfo::{self, declare_local, DebugLoc, VariableAccess, VariableKind};\n use machine;\n use type_of;\n \n-use syntax::codemap::DUMMY_SP;\n+use syntax_pos::DUMMY_SP;\n use syntax::parse::token::keywords;\n \n use std::ops::Deref;"}, {"sha": "28bcd8a633c1c96fa792da00036a55ac8f24d953", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -133,8 +133,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         if let mir::AggregateKind::Closure(def_id, substs) = *kind {\n                             use rustc::hir;\n                             use syntax::ast::DUMMY_NODE_ID;\n-                            use syntax::codemap::DUMMY_SP;\n                             use syntax::ptr::P;\n+                            use syntax_pos::DUMMY_SP;\n                             use closure;\n \n                             closure::trans_closure_expr(closure::Dest::Ignore(bcx.ccx()),"}, {"sha": "fa00ea1e7801bb4a7cf31a2b30fba1fc867077b9", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -28,7 +28,7 @@ use rustc::util::ppaux;\n use rustc::hir;\n \n use syntax::attr;\n-use syntax::errors;\n+use errors;\n \n use std::fmt;\n "}, {"sha": "088ac1aac1a4016926e9507b8790a43d6e3eb335", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -73,10 +73,10 @@ use util::nodemap::{NodeMap, FnvHashSet};\n use rustc_const_math::ConstInt;\n use std::cell::RefCell;\n use syntax::{abi, ast};\n-use syntax::codemap::{Span, Pos};\n-use syntax::errors::DiagnosticBuilder;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token::{self, keywords};\n+use syntax_pos::{Span, Pos};\n+use errors::DiagnosticBuilder;\n \n pub trait AstConv<'gcx, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx>;"}, {"sha": "069a09183a738e7fd8cb6cd26fa871f1bbb6ef43", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,8 +21,9 @@ use session::Session;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n use syntax::ast;\n-use syntax::codemap::{Span, Spanned};\n+use syntax::codemap::Spanned;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::print as pprust;"}, {"sha": "41f34b9040e832b3d580cba853fe9d575d2495eb", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,7 +13,7 @@ use rustc::traits::{self, FulfillmentContext, Normalized, MiscObligation,\n                      SelectionContext, ObligationCause};\n use rustc::ty::fold::TypeFoldable;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n //FIXME(@jroesch): Ideally we should be able to drop the fulfillment_cx argument.\n pub fn normalize_associated_types_in<'a, 'gcx, 'tcx, T>("}, {"sha": "3c176744fca592b0dd766a9a3db378223bd0cfc4", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n use rustc::hir;\n \n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use syntax::parse::token;\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "2c7e7d284fa160250de1ba5b9e7b71c37be092b7", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -17,9 +17,9 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::{self, LvaluePreference, Ty};\n-use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n use rustc::hir;\n "}, {"sha": "22ac8bc56907bfd9578e94134ea0ea1ad3117c50", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -47,7 +47,7 @@ use rustc::traits;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::cast::{CastKind, CastTy};\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use util::common::ErrorReported;\n \n /// Reifies a cast check to be checked once we have full type information for"}, {"sha": "35a5bc9c60967d69512b3b573d26b903e59ce187", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,7 +15,7 @@ use rustc::traits::{self, ProjectionMode};\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace};\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use CrateCtxt;\n use super::assoc;"}, {"sha": "eeebd6a7f626b74160e7c2d4c27d1844cc3bd5db", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,7 +13,7 @@ use check::FnCtxt;\n use rustc::ty::Ty;\n use rustc::infer::{InferOk, TypeOrigin};\n \n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir;\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "56e4108153e1e669f0a2db85a67657be56cf2801", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,7 +21,7 @@ use rustc::traits::{self, ProjectionMode};\n use util::nodemap::FnvHashSet;\n \n use syntax::ast;\n-use syntax::codemap::{self, Span};\n+use syntax_pos::{self, Span};\n \n /// check_drop_impl confirms that the Drop implementation identfied by\n /// `drop_impl_did` is not any more specialized than the type it is\n@@ -62,7 +62,7 @@ pub fn check_drop_impl(ccx: &CrateCtxt, drop_impl_did: DefId) -> Result<(), ()>\n         _ => {\n             // Destructors only work on nominal types.  This was\n             // already checked by coherence, so we can panic here.\n-            let span = ccx.tcx.map.def_id_span(drop_impl_did, codemap::DUMMY_SP);\n+            let span = ccx.tcx.map.def_id_span(drop_impl_did, syntax_pos::DUMMY_SP);\n             span_bug!(span,\n                       \"should have been rejected by coherence check: {}\",\n                       dtor_self_type);\n@@ -91,7 +91,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         let named_type = tcx.lookup_item_type(self_type_did).ty;\n         let named_type = named_type.subst(tcx, &infcx.parameter_environment.free_substs);\n \n-        let drop_impl_span = tcx.map.def_id_span(drop_impl_did, codemap::DUMMY_SP);\n+        let drop_impl_span = tcx.map.def_id_span(drop_impl_did, syntax_pos::DUMMY_SP);\n         let fresh_impl_substs =\n             infcx.fresh_substs_for_generics(drop_impl_span, drop_impl_generics);\n         let fresh_impl_self_ty = drop_impl_ty.subst(tcx, &fresh_impl_substs);\n@@ -172,7 +172,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n \n     let self_type_node_id = tcx.map.as_local_node_id(self_type_did).unwrap();\n \n-    let drop_impl_span = tcx.map.def_id_span(drop_impl_did, codemap::DUMMY_SP);\n+    let drop_impl_span = tcx.map.def_id_span(drop_impl_did, syntax_pos::DUMMY_SP);\n \n     // We can assume the predicates attached to struct/enum definition\n     // hold."}, {"sha": "0fb08ec9855de006bebaa15071f41af6dc453d43", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -20,8 +20,8 @@ use {CrateCtxt, require_same_types};\n use std::collections::{HashMap};\n use syntax::abi::Abi;\n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::parse::token;\n+use syntax_pos::Span;\n \n use rustc::hir;\n "}, {"sha": "5fac65bbfd6552d365eab1b611a55c93994aff70", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::{self, LvaluePreference, NoPreference, PreferMutLvalue, Ty};\n use rustc::ty::adjustment::{AdjustDerefRef, AutoDerefRef, AutoPtr};\n use rustc::ty::fold::TypeFoldable;\n use rustc::infer::{self, InferOk, TypeOrigin};\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir;\n \n use std::ops::Deref;"}, {"sha": "e6401be5b3ef655f9b78785448932ee0a92e525e", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::adjustment::{AdjustDerefRef, AutoDerefRef, AutoPtr};\n use rustc::infer;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use rustc::hir;\n "}, {"sha": "373fc83fa7444c1c8cf1f0f5b5e545dbe6939f4e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,7 +22,7 @@ use rustc::traits;\n use rustc::ty::{self, Ty, ToPolyTraitRef, TraitRef, TypeFoldable};\n use rustc::infer::{InferOk, TypeOrigin};\n use syntax::ast;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n use rustc::hir;\n use std::collections::HashSet;\n use std::mem;"}, {"sha": "f20dcdc35aea5c7af46ded13c2b84800a42ddc63", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -24,10 +24,10 @@ use rustc::ty::subst::Substs;\n use rustc::traits::{Obligation, SelectionContext};\n use util::nodemap::{FnvHashSet};\n \n-\n use syntax::ast;\n-use syntax::codemap::Span;\n-use syntax::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n+use syntax_pos::Span;\n+\n use rustc::hir::print as pprust;\n use rustc::hir;\n use rustc::hir::Expr_;"}, {"sha": "83b5ab71cc2246f5285041e5c1a2005bbba719a7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -115,11 +115,12 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::{self, Span, Spanned};\n-use syntax::errors::DiagnosticBuilder;\n+use syntax::codemap::{self, Spanned};\n use syntax::parse::token::{self, InternedString, keywords};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax_pos::{self, Span};\n+use errors::DiagnosticBuilder;\n \n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::{self, PatKind};\n@@ -1908,7 +1909,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for ty in &self.unsolved_variables() {\n                 if let ty::TyInfer(_) = self.shallow_resolve(ty).sty {\n                     debug!(\"default_type_parameters: defaulting `{:?}` to error\", ty);\n-                    self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx().types.err);\n+                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx().types.err);\n                 }\n             }\n             return;\n@@ -1919,18 +1920,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if self.type_var_diverges(resolved) {\n                 debug!(\"default_type_parameters: defaulting `{:?}` to `()` because it diverges\",\n                        resolved);\n-                self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.mk_nil());\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_nil());\n             } else {\n                 match self.type_is_unconstrained_numeric(resolved) {\n                     UnconstrainedInt => {\n                         debug!(\"default_type_parameters: defaulting `{:?}` to `i32`\",\n                                resolved);\n-                        self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.types.i32)\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.i32)\n                     },\n                     UnconstrainedFloat => {\n                         debug!(\"default_type_parameters: defaulting `{:?}` to `f32`\",\n                                resolved);\n-                        self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.types.f64)\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.f64)\n                     }\n                     Neither => { }\n                 }\n@@ -1993,7 +1994,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for ty in &unsolved_variables {\n                 let resolved = self.resolve_type_vars_if_possible(ty);\n                 if self.type_var_diverges(resolved) {\n-                    self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.mk_nil());\n+                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_nil());\n                 } else {\n                     match self.type_is_unconstrained_numeric(resolved) {\n                         UnconstrainedInt | UnconstrainedFloat => {\n@@ -2051,14 +2052,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let _ = self.commit_if_ok(|_: &infer::CombinedSnapshot| {\n                 for ty in &unbound_tyvars {\n                     if self.type_var_diverges(ty) {\n-                        self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.mk_nil());\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_nil());\n                     } else {\n                         match self.type_is_unconstrained_numeric(ty) {\n                             UnconstrainedInt => {\n-                                self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.types.i32)\n+                                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.i32)\n                             },\n                             UnconstrainedFloat => {\n-                                self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.types.f64)\n+                                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.f64)\n                             }\n                             Neither => {\n                                 if let Some(default) = default_map.get(ty) {\n@@ -2096,7 +2097,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.find_conflicting_default(&unbound_tyvars, &default_map, conflict)\n                             .unwrap_or(type_variable::Default {\n                                 ty: self.next_ty_var(),\n-                                origin_span: codemap::DUMMY_SP,\n+                                origin_span: syntax_pos::DUMMY_SP,\n                                 def_id: self.tcx.map.local_def_id(0) // what do I put here?\n                             });\n \n@@ -2147,14 +2148,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // reporting for more then one conflict.\n         for ty in &unbound_tyvars {\n             if self.type_var_diverges(ty) {\n-                self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.mk_nil());\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_nil());\n             } else {\n                 match self.type_is_unconstrained_numeric(ty) {\n                     UnconstrainedInt => {\n-                        self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.types.i32)\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.i32)\n                     },\n                     UnconstrainedFloat => {\n-                        self.demand_eqtype(codemap::DUMMY_SP, *ty, self.tcx.types.f64)\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.f64)\n                     },\n                     Neither => {\n                         if let Some(default) = default_map.get(ty) {"}, {"sha": "5a7038a056982cc390709acb49a14c1beebd1f75", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -99,7 +99,7 @@ use rustc::ty::wf::ImpliedBound;\n use std::mem;\n use std::ops::Deref;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::{self, PatKind};\n "}, {"sha": "702dd5f8de58a3060cc3430206d119f6a7c09226", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -49,7 +49,7 @@ use rustc::ty::{self, Ty};\n use rustc::infer::UpvarRegion;\n use std::collections::HashSet;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n "}, {"sha": "d101381e2565c72823332aefc602e721c228bfb8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,9 +19,10 @@ use rustc::ty::{self, Ty, TyCtxt};\n \n use std::collections::HashSet;\n use syntax::ast;\n-use syntax::codemap::{Span};\n-use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::keywords;\n+use syntax_pos::Span;\n+use errors::DiagnosticBuilder;\n+\n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir;\n "}, {"sha": "7f5f3ae120b7a0cad09a8bd9ca6dac5cb1629180", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -25,7 +25,8 @@ use write_ty_to_tcx;\n use std::cell::Cell;\n \n use syntax::ast;\n-use syntax::codemap::{DUMMY_SP, Span};\n+use syntax_pos::{DUMMY_SP, Span};\n+\n use rustc::hir::print::pat_to_string;\n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::{self, PatKind};"}, {"sha": "2ee0927f3c8ea44e5d8d945aab7fabf0a1c0bff5", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,7 +13,7 @@ use rustc::dep_graph::DepNode;\n use rustc::ty::TyCtxt;\n \n use syntax::ast;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir;\n use rustc::hir::intravisit::Visitor;"}, {"sha": "ade7806e71d12fab312019cc21ad2e7d843216e6", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -34,7 +34,7 @@ use CrateCtxt;\n use rustc::infer::{self, InferCtxt, TypeOrigin};\n use std::cell::RefCell;\n use std::rc::Rc;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;"}, {"sha": "15d4026254fa57ec1c8f2ee03cb25e99c81916a9", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,7 +16,7 @@ use hir::def_id::DefId;\n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n use rustc::dep_graph::DepNode;\n use rustc::hir::intravisit;\n use rustc::hir;"}, {"sha": "2c33d1a81556eb9f28cae32520627a8aefa6d822", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -88,9 +88,10 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::rc::Rc;\n \n use syntax::{abi, ast, attr};\n-use syntax::codemap::Span;\n use syntax::parse::token::keywords;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n+\n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit;\n use rustc::hir::print as pprust;"}, {"sha": "7ccff7ad3d87c06da57c00a6d79561a5b6e2e17e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -85,6 +85,7 @@ This API is completely unstable and subject to change.\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate syntax_pos;\n \n extern crate arena;\n extern crate fmt_macros;\n@@ -93,6 +94,7 @@ extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n+extern crate rustc_errors as errors;\n \n pub use rustc::dep_graph;\n pub use rustc::hir;\n@@ -110,9 +112,9 @@ use rustc::traits::ProjectionMode;\n use session::{config, CompileResult};\n use util::common::time;\n \n-use syntax::codemap::Span;\n use syntax::ast;\n use syntax::abi::Abi;\n+use syntax_pos::Span;\n \n use std::cell::RefCell;\n use util::nodemap::NodeMap;"}, {"sha": "336a61708683e0d6b05bea15cc3b490a54d67632", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,7 +12,7 @@\n use rustc::ty;\n \n use std::cell::Cell;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n #[derive(Clone)]\n pub struct ElisionFailureInfo {"}, {"sha": "cf87aabdfdb5e6c572a637569d6ed8176da35cc6", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,12 +15,14 @@ rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_driver = { path = \"../librustc_driver\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n rustc_trans = { path = \"../librustc_trans\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n log = { path = \"../liblog\" }\n \n [build-dependencies]"}, {"sha": "659022053128ecb48f9cea7ddbadb51c6ced8663", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -24,15 +24,14 @@ pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n pub use self::Visibility::*;\n \n-use syntax;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n-use syntax::codemap;\n-use syntax::codemap::{DUMMY_SP, Pos, Spanned};\n+use syntax::codemap::Spanned;\n use syntax::parse::token::{self, InternedString, keywords};\n use syntax::ptr::P;\n+use syntax_pos::{self, DUMMY_SP, Pos};\n \n use rustc_trans::back::link;\n use rustc::middle::cstore;\n@@ -533,7 +532,7 @@ impl attr::AttrMetaMethods for Attribute {\n         }\n     }\n     fn meta_item_list<'a>(&'a self) -> Option<&'a [P<ast::MetaItem>]> { None }\n-    fn span(&self) -> codemap::Span { unimplemented!() }\n+    fn span(&self) -> syntax_pos::Span { unimplemented!() }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n@@ -1977,7 +1976,7 @@ impl Span {\n     }\n }\n \n-impl Clean<Span> for syntax::codemap::Span {\n+impl Clean<Span> for syntax_pos::Span {\n     fn clean(&self, cx: &DocContext) -> Span {\n         if *self == DUMMY_SP {\n             return Span::empty();\n@@ -2543,7 +2542,7 @@ trait ToSource {\n     fn to_src(&self, cx: &DocContext) -> String;\n }\n \n-impl ToSource for syntax::codemap::Span {\n+impl ToSource for syntax_pos::Span {\n     fn to_src(&self, cx: &DocContext) -> String {\n         debug!(\"converting span {:?} to snippet\", self.clean(cx));\n         let sn = match cx.sess().codemap().span_to_snippet(*self) {"}, {"sha": "f4da8167ea28640fe4f9c8b64a5f9ee9303d267e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,10 +22,11 @@ use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n \n-use syntax::{ast, codemap, errors};\n-use syntax::errors::emitter::ColorConfig;\n+use syntax::{ast, codemap};\n use syntax::feature_gate::UnstableFeatures;\n use syntax::parse::token;\n+use errors;\n+use errors::emitter::ColorConfig;\n \n use std::cell::{RefCell, Cell};\n use std::collections::{HashMap, HashSet};"}, {"sha": "04d176c36c8cf3c7c0eb7d17ae5261803b5658cb", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,13 +13,13 @@\n pub use self::StructType::*;\n pub use self::TypeBound::*;\n \n-use syntax;\n-use syntax::codemap::Span;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast::{Name, NodeId};\n use syntax::attr;\n use syntax::ptr::P;\n+use syntax_pos::{self, Span};\n+\n use rustc::hir;\n \n pub struct Module {\n@@ -56,8 +56,8 @@ impl Module {\n             vis: hir::Inherited,\n             stab: None,\n             depr: None,\n-            where_outer: syntax::codemap::DUMMY_SP,\n-            where_inner: syntax::codemap::DUMMY_SP,\n+            where_outer: syntax_pos::DUMMY_SP,\n+            where_inner: syntax_pos::DUMMY_SP,\n             attrs      : hir::HirVec::new(),\n             extern_crates: Vec::new(),\n             imports    : Vec::new(),"}, {"sha": "2e2f99897733dc3947b9323217f3227867357b87", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -26,10 +26,11 @@ use std::fmt::Display;\n use std::io;\n use std::io::prelude::*;\n \n-use syntax::codemap::{CodeMap, Span};\n+use syntax::codemap::CodeMap;\n use syntax::parse::lexer::{self, Reader, TokenAndSpan};\n use syntax::parse::token;\n use syntax::parse;\n+use syntax_pos::Span;\n \n /// Highlights `src`, returning the HTML output.\n pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>) -> String {"}, {"sha": "2015bb295eabd7be1f04f7b14bcd4008a61988f4", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -42,9 +42,11 @@ extern crate rustc_back;\n extern crate rustc_metadata;\n extern crate serialize;\n #[macro_use] extern crate syntax;\n+extern crate syntax_pos;\n extern crate test as testing;\n extern crate rustc_unicode;\n #[macro_use] extern crate log;\n+extern crate rustc_errors as errors;\n \n extern crate serialize as rustc_serialize; // used by deriving\n "}, {"sha": "95d02d6ce4bee33135aae9a295aaf593965bbd6d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -35,8 +35,8 @@ use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use syntax::codemap::CodeMap;\n-use syntax::errors;\n-use syntax::errors::emitter::ColorConfig;\n+use errors;\n+use errors::emitter::ColorConfig;\n use syntax::parse::token;\n \n use core;\n@@ -229,8 +229,9 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let data = Arc::new(Mutex::new(Vec::new()));\n     let codemap = Rc::new(CodeMap::new());\n     let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n-                                                      None,\n-                                                      codemap.clone());\n+                                                None,\n+                                                codemap.clone(),\n+                                                errors::snippet::FormatMode::EnvironmentSelected);\n     let old = io::set_panic(box Sink(data.clone()));\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n "}, {"sha": "92424f113f987e806693e759028c9200db9d5ebb", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,7 +18,7 @@ use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::Span;\n+use syntax_pos::Span;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def::Def;"}, {"sha": "723bb63cfe5187631d99162b4f6b43ae586677b2", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,3 +12,4 @@ crate-type = [\"dylib\"]\n serialize = { path = \"../libserialize\" }\n log = { path = \"../liblog\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "ca5e9231a30686b1779f2bd5dd68b4f4ec078287", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,7 +16,8 @@ pub use self::ViewPath_::*;\n pub use self::PathParameters::*;\n \n use attr::{ThinAttributes, HasAttrs};\n-use codemap::{mk_sp, respan, Span, Spanned, DUMMY_SP, ExpnId};\n+use syntax_pos::{mk_sp, Span, DUMMY_SP, ExpnId};\n+use codemap::{respan, Spanned};\n use abi::Abi;\n use errors;\n use ext::base;"}, {"sha": "9f2566a381c9198395487d426ac8cc44787c693d", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,8 +18,8 @@ use ast;\n use ast::{AttrId, Attribute, Attribute_, MetaItem, MetaItemKind};\n use ast::{Stmt, StmtKind, DeclKind};\n use ast::{Expr, Item, Local, Decl};\n-use codemap::{Span, Spanned, spanned, dummy_spanned};\n-use codemap::BytePos;\n+use codemap::{spanned, dummy_spanned, Spanned};\n+use syntax_pos::{Span, BytePos};\n use errors::Handler;\n use feature_gate::{Features, GatedCfg};\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};"}, {"sha": "743f96d737e2da8fe3a179befb42eacb40d3c0ae", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 864, "deletions": 655, "changes": 1519, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,269 +19,18 @@\n \n pub use self::ExpnFormat::*;\n \n-use std::cell::{Cell, RefCell};\n-use std::ops::{Add, Sub};\n+use std::cell::RefCell;\n use std::path::{Path,PathBuf};\n use std::rc::Rc;\n-use std::cmp;\n \n use std::env;\n-use std::{fmt, fs};\n+use std::fs;\n use std::io::{self, Read};\n-\n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+pub use syntax_pos::*;\n+use errors::CodeMapper;\n \n use ast::Name;\n \n-// _____________________________________________________________________________\n-// Pos, BytePos, CharPos\n-//\n-\n-pub trait Pos {\n-    fn from_usize(n: usize) -> Self;\n-    fn to_usize(&self) -> usize;\n-}\n-\n-/// A byte offset. Keep this small (currently 32-bits), as AST contains\n-/// a lot of them.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n-pub struct BytePos(pub u32);\n-\n-/// A character offset. Because of multibyte utf8 characters, a byte offset\n-/// is not equivalent to a character offset. The CodeMap will convert BytePos\n-/// values to CharPos values as necessary.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n-pub struct CharPos(pub usize);\n-\n-// FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n-// have been unsuccessful\n-\n-impl Pos for BytePos {\n-    fn from_usize(n: usize) -> BytePos { BytePos(n as u32) }\n-    fn to_usize(&self) -> usize { let BytePos(n) = *self; n as usize }\n-}\n-\n-impl Add for BytePos {\n-    type Output = BytePos;\n-\n-    fn add(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_usize() + rhs.to_usize()) as u32)\n-    }\n-}\n-\n-impl Sub for BytePos {\n-    type Output = BytePos;\n-\n-    fn sub(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_usize() - rhs.to_usize()) as u32)\n-    }\n-}\n-\n-impl Encodable for BytePos {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.0)\n-    }\n-}\n-\n-impl Decodable for BytePos {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<BytePos, D::Error> {\n-        Ok(BytePos(d.read_u32()?))\n-    }\n-}\n-\n-impl Pos for CharPos {\n-    fn from_usize(n: usize) -> CharPos { CharPos(n) }\n-    fn to_usize(&self) -> usize { let CharPos(n) = *self; n }\n-}\n-\n-impl Add for CharPos {\n-    type Output = CharPos;\n-\n-    fn add(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_usize() + rhs.to_usize())\n-    }\n-}\n-\n-impl Sub for CharPos {\n-    type Output = CharPos;\n-\n-    fn sub(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_usize() - rhs.to_usize())\n-    }\n-}\n-\n-// _____________________________________________________________________________\n-// Span, MultiSpan, Spanned\n-//\n-\n-/// Spans represent a region of code, used for error reporting. Positions in spans\n-/// are *absolute* positions from the beginning of the codemap, not positions\n-/// relative to FileMaps. Methods on the CodeMap can be used to relate spans back\n-/// to the original source.\n-/// You must be careful if the span crosses more than one file - you will not be\n-/// able to use many of the functions on spans in codemap and you cannot assume\n-/// that the length of the span = hi - lo; there may be space in the BytePos\n-/// range between files.\n-#[derive(Clone, Copy, Hash, PartialEq, Eq)]\n-pub struct Span {\n-    pub lo: BytePos,\n-    pub hi: BytePos,\n-    /// Information about where the macro came from, if this piece of\n-    /// code was created by a macro expansion.\n-    pub expn_id: ExpnId\n-}\n-\n-/// A collection of spans. Spans have two orthogonal attributes:\n-///\n-/// - they can be *primary spans*. In this case they are the locus of\n-///   the error, and would be rendered with `^^^`.\n-/// - they can have a *label*. In this case, the label is written next\n-///   to the mark in the snippet when we render.\n-#[derive(Clone)]\n-pub struct MultiSpan {\n-    primary_spans: Vec<Span>,\n-    span_labels: Vec<(Span, String)>,\n-}\n-\n-#[derive(Clone, Debug)]\n-pub struct SpanLabel {\n-    /// The span we are going to include in the final snippet.\n-    pub span: Span,\n-\n-    /// Is this a primary span? This is the \"locus\" of the message,\n-    /// and is indicated with a `^^^^` underline, versus `----`.\n-    pub is_primary: bool,\n-\n-    /// What label should we attach to this span (if any)?\n-    pub label: Option<String>,\n-}\n-\n-pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n-\n-// Generic span to be used for code originating from the command line\n-pub const COMMAND_LINE_SP: Span = Span { lo: BytePos(0),\n-                                         hi: BytePos(0),\n-                                         expn_id: COMMAND_LINE_EXPN };\n-\n-impl Span {\n-    /// Returns a new span representing just the end-point of this span\n-    pub fn end_point(self) -> Span {\n-        let lo = cmp::max(self.hi.0 - 1, self.lo.0);\n-        Span { lo: BytePos(lo), hi: self.hi, expn_id: self.expn_id}\n-    }\n-\n-    /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n-    pub fn substitute_dummy(self, other: Span) -> Span {\n-        if self.source_equal(&DUMMY_SP) { other } else { self }\n-    }\n-\n-    pub fn contains(self, other: Span) -> bool {\n-        self.lo <= other.lo && other.hi <= self.hi\n-    }\n-\n-    /// Return true if the spans are equal with regards to the source text.\n-    ///\n-    /// Use this instead of `==` when either span could be generated code,\n-    /// and you only care that they point to the same bytes of source text.\n-    pub fn source_equal(&self, other: &Span) -> bool {\n-        self.lo == other.lo && self.hi == other.hi\n-    }\n-\n-    /// Returns `Some(span)`, a union of `self` and `other`, on overlap.\n-    pub fn merge(self, other: Span) -> Option<Span> {\n-        if self.expn_id != other.expn_id {\n-            return None;\n-        }\n-\n-        if (self.lo <= other.lo && self.hi > other.lo) ||\n-           (self.lo >= other.lo && self.lo < other.hi) {\n-            Some(Span {\n-                lo: cmp::min(self.lo, other.lo),\n-                hi: cmp::max(self.hi, other.hi),\n-                expn_id: self.expn_id,\n-            })\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Returns `Some(span)`, where the start is trimmed by the end of `other`\n-    pub fn trim_start(self, other: Span) -> Option<Span> {\n-        if self.hi > other.hi {\n-            Some(Span { lo: cmp::max(self.lo, other.hi), .. self })\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub struct Spanned<T> {\n-    pub node: T,\n-    pub span: Span,\n-}\n-\n-impl Encodable for Span {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_struct(\"Span\", 2, |s| {\n-            s.emit_struct_field(\"lo\", 0, |s| {\n-                self.lo.encode(s)\n-            })?;\n-\n-            s.emit_struct_field(\"hi\", 1, |s| {\n-                self.hi.encode(s)\n-            })\n-        })\n-    }\n-}\n-\n-impl Decodable for Span {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Span, D::Error> {\n-        d.read_struct(\"Span\", 2, |d| {\n-            let lo = d.read_struct_field(\"lo\", 0, |d| {\n-                BytePos::decode(d)\n-            })?;\n-\n-            let hi = d.read_struct_field(\"hi\", 1, |d| {\n-                BytePos::decode(d)\n-            })?;\n-\n-            Ok(mk_sp(lo, hi))\n-        })\n-    }\n-}\n-\n-fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n-    write!(f, \"Span {{ lo: {:?}, hi: {:?}, expn_id: {:?} }}\",\n-           span.lo, span.hi, span.expn_id)\n-}\n-\n-thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter) -> fmt::Result> =\n-                Cell::new(default_span_debug));\n-\n-impl fmt::Debug for Span {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        SPAN_DEBUG.with(|span_debug| span_debug.get()(*self, f))\n-    }\n-}\n-\n-pub fn spanned<T>(lo: BytePos, hi: BytePos, t: T) -> Spanned<T> {\n-    respan(mk_sp(lo, hi), t)\n-}\n-\n-pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {\n-    Spanned {node: t, span: sp}\n-}\n-\n-pub fn dummy_spanned<T>(t: T) -> Spanned<T> {\n-    respan(DUMMY_SP, t)\n-}\n-\n-/* assuming that we're not in macro expansion */\n-pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n-    Span {lo: lo, hi: hi, expn_id: NO_EXPANSION}\n-}\n-\n /// Return the span itself if it doesn't come from a macro expansion,\n /// otherwise return the call site span up to the `enclosing_sp` by\n /// following the `expn_info` chain.\n@@ -295,123 +44,31 @@ pub fn original_sp(cm: &CodeMap, sp: Span, enclosing_sp: Span) -> Span {\n     }\n }\n \n-impl MultiSpan {\n-    pub fn new() -> MultiSpan {\n-        MultiSpan {\n-            primary_spans: vec![],\n-            span_labels: vec![]\n-        }\n-    }\n-\n-    pub fn from_span(primary_span: Span) -> MultiSpan {\n-        MultiSpan {\n-            primary_spans: vec![primary_span],\n-            span_labels: vec![]\n-        }\n-    }\n-\n-    pub fn from_spans(vec: Vec<Span>) -> MultiSpan {\n-        MultiSpan {\n-            primary_spans: vec,\n-            span_labels: vec![]\n-        }\n-    }\n-\n-    pub fn push_span_label(&mut self, span: Span, label: String) {\n-        self.span_labels.push((span, label));\n-    }\n-\n-    /// Selects the first primary span (if any)\n-    pub fn primary_span(&self) -> Option<Span> {\n-        self.primary_spans.first().cloned()\n-    }\n-\n-    /// Returns all primary spans.\n-    pub fn primary_spans(&self) -> &[Span] {\n-        &self.primary_spans\n-    }\n-\n-    /// Returns the strings to highlight. We always ensure that there\n-    /// is an entry for each of the primary spans -- for each primary\n-    /// span P, if there is at least one label with span P, we return\n-    /// those labels (marked as primary). But otherwise we return\n-    /// `SpanLabel` instances with empty labels.\n-    pub fn span_labels(&self) -> Vec<SpanLabel> {\n-        let is_primary = |span| self.primary_spans.contains(&span);\n-        let mut span_labels = vec![];\n-\n-        for &(span, ref label) in &self.span_labels {\n-            span_labels.push(SpanLabel {\n-                span: span,\n-                is_primary: is_primary(span),\n-                label: Some(label.clone())\n-            });\n-        }\n-\n-        for &span in &self.primary_spans {\n-            if !span_labels.iter().any(|sl| sl.span == span) {\n-                span_labels.push(SpanLabel {\n-                    span: span,\n-                    is_primary: true,\n-                    label: None\n-                });\n-            }\n-        }\n-\n-        span_labels\n-    }\n+/// The source of expansion.\n+#[derive(Clone, Hash, Debug, PartialEq, Eq)]\n+pub enum ExpnFormat {\n+    /// e.g. #[derive(...)] <item>\n+    MacroAttribute(Name),\n+    /// e.g. `format!()`\n+    MacroBang(Name),\n }\n \n-impl From<Span> for MultiSpan {\n-    fn from(span: Span) -> MultiSpan {\n-        MultiSpan::from_span(span)\n-    }\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+pub struct Spanned<T> {\n+    pub node: T,\n+    pub span: Span,\n }\n \n-// _____________________________________________________________________________\n-// Loc, LocWithOpt, FileMapAndLine, FileMapAndBytePos\n-//\n-\n-/// A source code location used for error reporting\n-#[derive(Debug)]\n-pub struct Loc {\n-    /// Information about the original source\n-    pub file: Rc<FileMap>,\n-    /// The (1-based) line number\n-    pub line: usize,\n-    /// The (0-based) column offset\n-    pub col: CharPos\n+pub fn spanned<T>(lo: BytePos, hi: BytePos, t: T) -> Spanned<T> {\n+    respan(mk_sp(lo, hi), t)\n }\n \n-/// A source code location used as the result of lookup_char_pos_adj\n-// Actually, *none* of the clients use the filename *or* file field;\n-// perhaps they should just be removed.\n-#[derive(Debug)]\n-pub struct LocWithOpt {\n-    pub filename: FileName,\n-    pub line: usize,\n-    pub col: CharPos,\n-    pub file: Option<Rc<FileMap>>,\n+pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {\n+    Spanned {node: t, span: sp}\n }\n \n-// used to be structural records. Better names, anyone?\n-#[derive(Debug)]\n-pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: usize }\n-#[derive(Debug)]\n-pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n-\n-\n-// _____________________________________________________________________________\n-// ExpnFormat, NameAndSpan, ExpnInfo, ExpnId\n-//\n-\n-/// The source of expansion.\n-#[derive(Clone, Hash, Debug, PartialEq, Eq)]\n-pub enum ExpnFormat {\n-    /// e.g. #[derive(...)] <item>\n-    MacroAttribute(Name),\n-    /// e.g. `format!()`\n-    MacroBang(Name),\n+pub fn dummy_spanned<T>(t: T) -> Spanned<T> {\n+    respan(DUMMY_SP, t)\n }\n \n #[derive(Clone, Hash, Debug)]\n@@ -454,257 +111,10 @@ pub struct ExpnInfo {\n     pub callee: NameAndSpan\n }\n \n-#[derive(PartialEq, Eq, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Copy)]\n-pub struct ExpnId(u32);\n-\n-pub const NO_EXPANSION: ExpnId = ExpnId(!0);\n-// For code appearing from the command line\n-pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(!1);\n-\n-impl ExpnId {\n-    pub fn from_u32(id: u32) -> ExpnId {\n-        ExpnId(id)\n-    }\n-\n-    pub fn into_u32(self) -> u32 {\n-        self.0\n-    }\n-}\n-\n // _____________________________________________________________________________\n // FileMap, MultiByteChar, FileName, FileLines\n //\n \n-pub type FileName = String;\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub struct LineInfo {\n-    /// Index of line, starting from 0.\n-    pub line_index: usize,\n-\n-    /// Column in line where span begins, starting from 0.\n-    pub start_col: CharPos,\n-\n-    /// Column in line where span ends, starting from 0, exclusive.\n-    pub end_col: CharPos,\n-}\n-\n-pub struct FileLines {\n-    pub file: Rc<FileMap>,\n-    pub lines: Vec<LineInfo>\n-}\n-\n-/// Identifies an offset of a multi-byte character in a FileMap\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n-pub struct MultiByteChar {\n-    /// The absolute offset of the character in the CodeMap\n-    pub pos: BytePos,\n-    /// The number of bytes, >=2\n-    pub bytes: usize,\n-}\n-\n-/// A single source in the CodeMap.\n-pub struct FileMap {\n-    /// The name of the file that the source came from, source that doesn't\n-    /// originate from files has names between angle brackets by convention,\n-    /// e.g. `<anon>`\n-    pub name: FileName,\n-    /// The absolute path of the file that the source came from.\n-    pub abs_path: Option<FileName>,\n-    /// The complete source code\n-    pub src: Option<Rc<String>>,\n-    /// The start position of this source in the CodeMap\n-    pub start_pos: BytePos,\n-    /// The end position of this source in the CodeMap\n-    pub end_pos: BytePos,\n-    /// Locations of lines beginnings in the source code\n-    pub lines: RefCell<Vec<BytePos>>,\n-    /// Locations of multi-byte characters in the source code\n-    pub multibyte_chars: RefCell<Vec<MultiByteChar>>,\n-}\n-\n-impl Encodable for FileMap {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_struct(\"FileMap\", 6, |s| {\n-            s.emit_struct_field(\"name\", 0, |s| self.name.encode(s))?;\n-            s.emit_struct_field(\"abs_path\", 1, |s| self.abs_path.encode(s))?;\n-            s.emit_struct_field(\"start_pos\", 2, |s| self.start_pos.encode(s))?;\n-            s.emit_struct_field(\"end_pos\", 3, |s| self.end_pos.encode(s))?;\n-            s.emit_struct_field(\"lines\", 4, |s| {\n-                let lines = self.lines.borrow();\n-                // store the length\n-                s.emit_u32(lines.len() as u32)?;\n-\n-                if !lines.is_empty() {\n-                    // In order to preserve some space, we exploit the fact that\n-                    // the lines list is sorted and individual lines are\n-                    // probably not that long. Because of that we can store lines\n-                    // as a difference list, using as little space as possible\n-                    // for the differences.\n-                    let max_line_length = if lines.len() == 1 {\n-                        0\n-                    } else {\n-                        lines.windows(2)\n-                             .map(|w| w[1] - w[0])\n-                             .map(|bp| bp.to_usize())\n-                             .max()\n-                             .unwrap()\n-                    };\n-\n-                    let bytes_per_diff: u8 = match max_line_length {\n-                        0 ... 0xFF => 1,\n-                        0x100 ... 0xFFFF => 2,\n-                        _ => 4\n-                    };\n-\n-                    // Encode the number of bytes used per diff.\n-                    bytes_per_diff.encode(s)?;\n-\n-                    // Encode the first element.\n-                    lines[0].encode(s)?;\n-\n-                    let diff_iter = (&lines[..]).windows(2)\n-                                                .map(|w| (w[1] - w[0]));\n-\n-                    match bytes_per_diff {\n-                        1 => for diff in diff_iter { (diff.0 as u8).encode(s)? },\n-                        2 => for diff in diff_iter { (diff.0 as u16).encode(s)? },\n-                        4 => for diff in diff_iter { diff.0.encode(s)? },\n-                        _ => unreachable!()\n-                    }\n-                }\n-\n-                Ok(())\n-            })?;\n-            s.emit_struct_field(\"multibyte_chars\", 5, |s| {\n-                (*self.multibyte_chars.borrow()).encode(s)\n-            })\n-        })\n-    }\n-}\n-\n-impl Decodable for FileMap {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<FileMap, D::Error> {\n-\n-        d.read_struct(\"FileMap\", 6, |d| {\n-            let name: String = d.read_struct_field(\"name\", 0, |d| Decodable::decode(d))?;\n-            let abs_path: Option<String> =\n-                d.read_struct_field(\"abs_path\", 1, |d| Decodable::decode(d))?;\n-            let start_pos: BytePos = d.read_struct_field(\"start_pos\", 2, |d| Decodable::decode(d))?;\n-            let end_pos: BytePos = d.read_struct_field(\"end_pos\", 3, |d| Decodable::decode(d))?;\n-            let lines: Vec<BytePos> = d.read_struct_field(\"lines\", 4, |d| {\n-                let num_lines: u32 = Decodable::decode(d)?;\n-                let mut lines = Vec::with_capacity(num_lines as usize);\n-\n-                if num_lines > 0 {\n-                    // Read the number of bytes used per diff.\n-                    let bytes_per_diff: u8 = Decodable::decode(d)?;\n-\n-                    // Read the first element.\n-                    let mut line_start: BytePos = Decodable::decode(d)?;\n-                    lines.push(line_start);\n-\n-                    for _ in 1..num_lines {\n-                        let diff = match bytes_per_diff {\n-                            1 => d.read_u8()? as u32,\n-                            2 => d.read_u16()? as u32,\n-                            4 => d.read_u32()?,\n-                            _ => unreachable!()\n-                        };\n-\n-                        line_start = line_start + BytePos(diff);\n-\n-                        lines.push(line_start);\n-                    }\n-                }\n-\n-                Ok(lines)\n-            })?;\n-            let multibyte_chars: Vec<MultiByteChar> =\n-                d.read_struct_field(\"multibyte_chars\", 5, |d| Decodable::decode(d))?;\n-            Ok(FileMap {\n-                name: name,\n-                abs_path: abs_path,\n-                start_pos: start_pos,\n-                end_pos: end_pos,\n-                src: None,\n-                lines: RefCell::new(lines),\n-                multibyte_chars: RefCell::new(multibyte_chars)\n-            })\n-        })\n-    }\n-}\n-\n-impl fmt::Debug for FileMap {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"FileMap({})\", self.name)\n-    }\n-}\n-\n-impl FileMap {\n-    /// EFFECT: register a start-of-line offset in the\n-    /// table of line-beginnings.\n-    /// UNCHECKED INVARIANT: these offsets must be added in the right\n-    /// order and must be in the right places; there is shared knowledge\n-    /// about what ends a line between this file and parse.rs\n-    /// WARNING: pos param here is the offset relative to start of CodeMap,\n-    /// and CodeMap will append a newline when adding a filemap without a newline at the end,\n-    /// so the safe way to call this is with value calculated as\n-    /// filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.\n-    pub fn next_line(&self, pos: BytePos) {\n-        // the new charpos must be > the last one (or it's the first one).\n-        let mut lines = self.lines.borrow_mut();\n-        let line_len = lines.len();\n-        assert!(line_len == 0 || ((*lines)[line_len - 1] < pos));\n-        lines.push(pos);\n-    }\n-\n-    /// get a line from the list of pre-computed line-beginnings.\n-    /// line-number here is 0-based.\n-    pub fn get_line(&self, line_number: usize) -> Option<&str> {\n-        match self.src {\n-            Some(ref src) => {\n-                let lines = self.lines.borrow();\n-                lines.get(line_number).map(|&line| {\n-                    let begin: BytePos = line - self.start_pos;\n-                    let begin = begin.to_usize();\n-                    // We can't use `lines.get(line_number+1)` because we might\n-                    // be parsing when we call this function and thus the current\n-                    // line is the last one we have line info for.\n-                    let slice = &src[begin..];\n-                    match slice.find('\\n') {\n-                        Some(e) => &slice[..e],\n-                        None => slice\n-                    }\n-                })\n-            }\n-            None => None\n-        }\n-    }\n-\n-    pub fn record_multibyte_char(&self, pos: BytePos, bytes: usize) {\n-        assert!(bytes >=2 && bytes <= 4);\n-        let mbc = MultiByteChar {\n-            pos: pos,\n-            bytes: bytes,\n-        };\n-        self.multibyte_chars.borrow_mut().push(mbc);\n-    }\n-\n-    pub fn is_real_file(&self) -> bool {\n-        !(self.name.starts_with(\"<\") &&\n-          self.name.ends_with(\">\"))\n-    }\n-\n-    pub fn is_imported(&self) -> bool {\n-        self.src.is_none()\n-    }\n-\n-    fn count_lines(&self) -> usize {\n-        self.lines.borrow().len()\n-    }\n-}\n-\n /// An abstraction over the fs operations used by the Parser.\n pub trait FileLoader {\n     /// Query the existence of a file.\n@@ -1392,59 +802,38 @@ impl CodeMap {\n     }\n }\n \n-pub struct MacroBacktrace {\n-    /// span where macro was applied to generate this code\n-    pub call_site: Span,\n-\n-    /// name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")\n-    pub macro_decl_name: String,\n-\n-    /// span where macro was defined (if known)\n-    pub def_site_span: Option<Span>,\n-}\n-\n-// _____________________________________________________________________________\n-// SpanLinesError, SpanSnippetError, DistinctSources, MalformedCodemapPositions\n-//\n-\n-pub type FileLinesResult = Result<FileLines, SpanLinesError>;\n-\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-pub enum SpanLinesError {\n-    IllFormedSpan(Span),\n-    DistinctSources(DistinctSources),\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-pub enum SpanSnippetError {\n-    IllFormedSpan(Span),\n-    DistinctSources(DistinctSources),\n-    MalformedForCodemap(MalformedCodemapPositions),\n-    SourceNotAvailable { filename: String }\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct DistinctSources {\n-    begin: (String, BytePos),\n-    end: (String, BytePos)\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct MalformedCodemapPositions {\n-    name: String,\n-    source_len: usize,\n-    begin_pos: BytePos,\n-    end_pos: BytePos\n+impl CodeMapper for CodeMap {\n+    fn lookup_char_pos(&self, pos: BytePos) -> Loc {\n+        self.lookup_char_pos(pos)\n+    }\n+    fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n+        self.span_to_lines(sp)\n+    }\n+    fn span_to_string(&self, sp: Span) -> String {\n+        self.span_to_string(sp)\n+    }\n+    fn span_to_filename(&self, sp: Span) -> FileName {\n+        self.span_to_filename(sp)\n+    }\n+    fn macro_backtrace(&self, span: Span) -> Vec<MacroBacktrace> {\n+        self.macro_backtrace(span)\n+    }\n }\n \n-\n // _____________________________________________________________________________\n // Tests\n //\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use errors::{Level, CodeSuggestion};\n+    use errors::emitter::EmitterWriter;\n+    use errors::snippet::{SnippetData, RenderedLine, FormatMode};\n+    use std::sync::{Arc, Mutex};\n+    use std::io::{self, Write};\n+    use std::str::from_utf8;\n+    use std::rc::Rc;\n \n     #[test]\n     fn t1 () {\n@@ -1688,6 +1077,69 @@ mod tests {\n                     blork.rs:1:1: 1:12\\n  `first line.`\\n\");\n     }\n \n+    /// Returns the span corresponding to the `n`th occurrence of\n+    /// `substring` in `source_text`.\n+    trait CodeMapExtension {\n+        fn span_substr(&self,\n+                    file: &Rc<FileMap>,\n+                    source_text: &str,\n+                    substring: &str,\n+                    n: usize)\n+                    -> Span;\n+    }\n+\n+    impl CodeMapExtension for CodeMap {\n+        fn span_substr(&self,\n+                    file: &Rc<FileMap>,\n+                    source_text: &str,\n+                    substring: &str,\n+                    n: usize)\n+                    -> Span\n+        {\n+            println!(\"span_substr(file={:?}/{:?}, substring={:?}, n={})\",\n+                    file.name, file.start_pos, substring, n);\n+            let mut i = 0;\n+            let mut hi = 0;\n+            loop {\n+                let offset = source_text[hi..].find(substring).unwrap_or_else(|| {\n+                    panic!(\"source_text `{}` does not have {} occurrences of `{}`, only {}\",\n+                        source_text, n, substring, i);\n+                });\n+                let lo = hi + offset;\n+                hi = lo + substring.len();\n+                if i == n {\n+                    let span = Span {\n+                        lo: BytePos(lo as u32 + file.start_pos.0),\n+                        hi: BytePos(hi as u32 + file.start_pos.0),\n+                        expn_id: NO_EXPANSION,\n+                    };\n+                    assert_eq!(&self.span_to_snippet(span).unwrap()[..],\n+                            substring);\n+                    return span;\n+                }\n+                i += 1;\n+            }\n+        }\n+    }\n+\n+    fn splice(start: Span, end: Span) -> Span {\n+        Span {\n+            lo: start.lo,\n+            hi: end.hi,\n+            expn_id: NO_EXPANSION,\n+        }\n+    }\n+\n+    fn make_string(lines: &[RenderedLine]) -> String {\n+        lines.iter()\n+            .flat_map(|rl| {\n+                rl.text.iter()\n+                        .map(|s| &s.text[..])\n+                        .chain(Some(\"\\n\"))\n+            })\n+            .collect()\n+    }\n+\n     fn init_expansion_chain(cm: &CodeMap) -> Span {\n         // Creates an expansion chain containing two recursive calls\n         // root -> expA -> expA -> expB -> expB -> end\n@@ -1767,4 +1219,761 @@ r\"blork2.rs:2:1: 2:12\n \";\n         assert_eq!(sstr, res_str);\n     }\n+\n+    struct Sink(Arc<Mutex<Vec<u8>>>);\n+    impl Write for Sink {\n+        fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n+            Write::write(&mut *self.0.lock().unwrap(), data)\n+        }\n+        fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+    }\n+\n+    // Diagnostic doesn't align properly in span where line number increases by one digit\n+    #[test]\n+    fn test_hilight_suggestion_issue_11715() {\n+        let data = Arc::new(Mutex::new(Vec::new()));\n+        let cm = Rc::new(CodeMap::new());\n+        let mut ew = EmitterWriter::new(Box::new(Sink(data.clone())),\n+                                        None,\n+                                        cm.clone(),\n+                                        FormatMode::NewErrorFormat);\n+        let content = \"abcdefg\n+        koksi\n+        line3\n+        line4\n+        cinq\n+        line6\n+        line7\n+        line8\n+        line9\n+        line10\n+        e-l\u00e4-v\u00e4n\n+        tolv\n+        dreizehn\n+        \";\n+        let file = cm.new_filemap_and_lines(\"dummy.txt\", None, content);\n+        let start = file.lines.borrow()[10];\n+        let end = file.lines.borrow()[11];\n+        let sp = mk_sp(start, end);\n+        let lvl = Level::Error;\n+        println!(\"highlight_lines\");\n+        ew.highlight_lines(&sp.into(), lvl).unwrap();\n+        println!(\"done\");\n+        let vec = data.lock().unwrap().clone();\n+        let vec: &[u8] = &vec;\n+        let str = from_utf8(vec).unwrap();\n+        println!(\"r#\\\"\\n{}\\\"#\", str);\n+        assert_eq!(str, &r#\"\n+  --> dummy.txt:11:1\n+   |>\n+11 |>         e-l\u00e4-v\u00e4n\n+   |> ^\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn test_single_span_splice() {\n+        // Test that a `MultiSpan` containing a single span splices a substition correctly\n+        let cm = CodeMap::new();\n+        let inputtext = \"aaaaa\\nbbbbBB\\nCCC\\nDDDDDddddd\\neee\\n\";\n+        let selection = \"     \\n    ~~\\n~~~\\n~~~~~     \\n   \\n\";\n+        cm.new_filemap_and_lines(\"blork.rs\", None, inputtext);\n+        let sp = span_from_selection(inputtext, selection);\n+        let msp: MultiSpan = sp.into();\n+\n+        // check that we are extracting the text we thought we were extracting\n+        assert_eq!(&cm.span_to_snippet(sp).unwrap(), \"BB\\nCCC\\nDDDDD\");\n+\n+        let substitute = \"ZZZZZZ\".to_owned();\n+        let expected = \"bbbbZZZZZZddddd\";\n+        let suggest = CodeSuggestion {\n+            msp: msp,\n+            substitutes: vec![substitute],\n+        };\n+        assert_eq!(suggest.splice_lines(&cm), expected);\n+    }\n+\n+    #[test]\n+    fn test_multi_span_splice() {\n+        // Test that a `MultiSpan` containing multiple spans splices a substition correctly\n+        let cm = CodeMap::new();\n+        let inputtext  = \"aaaaa\\nbbbbBB\\nCCC\\nDDDDDddddd\\neee\\n\";\n+        let selection1 = \"     \\n      \\n   \\n          \\n ~ \\n\"; // intentionally out of order\n+        let selection2 = \"     \\n    ~~\\n~~~\\n~~~~~     \\n   \\n\";\n+        cm.new_filemap_and_lines(\"blork.rs\", None, inputtext);\n+        let sp1 = span_from_selection(inputtext, selection1);\n+        let sp2 = span_from_selection(inputtext, selection2);\n+        let msp: MultiSpan = MultiSpan::from_spans(vec![sp1, sp2]);\n+\n+        let expected = \"bbbbZZZZZZddddd\\neXYZe\";\n+        let suggest = CodeSuggestion {\n+            msp: msp,\n+            substitutes: vec![\"ZZZZZZ\".to_owned(),\n+                              \"XYZ\".to_owned()]\n+        };\n+\n+        assert_eq!(suggest.splice_lines(&cm), expected);\n+    }\n+\n+    #[test]\n+    fn test_multispan_highlight() {\n+        let data = Arc::new(Mutex::new(Vec::new()));\n+        let cm = Rc::new(CodeMap::new());\n+        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())),\n+                                          None,\n+                                          cm.clone(),\n+                                          FormatMode::NewErrorFormat);\n+\n+        let inp =       \"_____aaaaaa____bbbbbb__cccccdd_\";\n+        let sp1 =       \"     ~~~~~~                    \";\n+        let sp2 =       \"               ~~~~~~          \";\n+        let sp3 =       \"                       ~~~~~   \";\n+        let sp4 =       \"                          ~~~~ \";\n+        let sp34 =      \"                       ~~~~~~~ \";\n+\n+        let expect_start = &r#\"\n+ --> dummy.txt:1:6\n+  |>\n+1 |> _____aaaaaa____bbbbbb__cccccdd_\n+  |>      ^^^^^^    ^^^^^^  ^^^^^^^\n+\"#[1..];\n+\n+        let span = |sp, expected| {\n+            let sp = span_from_selection(inp, sp);\n+            assert_eq!(&cm.span_to_snippet(sp).unwrap(), expected);\n+            sp\n+        };\n+        cm.new_filemap_and_lines(\"dummy.txt\", None, inp);\n+        let sp1 = span(sp1, \"aaaaaa\");\n+        let sp2 = span(sp2, \"bbbbbb\");\n+        let sp3 = span(sp3, \"ccccc\");\n+        let sp4 = span(sp4, \"ccdd\");\n+        let sp34 = span(sp34, \"cccccdd\");\n+\n+        let spans = vec![sp1, sp2, sp3, sp4];\n+\n+        let test = |expected, highlight: &mut FnMut()| {\n+            data.lock().unwrap().clear();\n+            highlight();\n+            let vec = data.lock().unwrap().clone();\n+            let actual = from_utf8(&vec[..]).unwrap();\n+            println!(\"actual=\\n{}\", actual);\n+            assert_eq!(actual, expected);\n+        };\n+\n+        let msp = MultiSpan::from_spans(vec![sp1, sp2, sp34]);\n+        test(expect_start, &mut || {\n+            diag.highlight_lines(&msp, Level::Error).unwrap();\n+        });\n+        test(expect_start, &mut || {\n+            let msp = MultiSpan::from_spans(spans.clone());\n+            diag.highlight_lines(&msp, Level::Error).unwrap();\n+        });\n+    }\n+\n+    #[test]\n+    fn test_huge_multispan_highlight() {\n+        let data = Arc::new(Mutex::new(Vec::new()));\n+        let cm = Rc::new(CodeMap::new());\n+        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())),\n+                                          None,\n+                                          cm.clone(),\n+                                          FormatMode::NewErrorFormat);\n+\n+        let inp = \"aaaaa\\n\\\n+                   aaaaa\\n\\\n+                   aaaaa\\n\\\n+                   bbbbb\\n\\\n+                   ccccc\\n\\\n+                   xxxxx\\n\\\n+                   yyyyy\\n\\\n+                   _____\\n\\\n+                   ddd__eee_\\n\\\n+                   elided\\n\\\n+                   __f_gg\";\n+        let file = cm.new_filemap_and_lines(\"dummy.txt\", None, inp);\n+\n+        let span = |lo, hi, (off_lo, off_hi)| {\n+            let lines = file.lines.borrow();\n+            let (mut lo, mut hi): (BytePos, BytePos) = (lines[lo], lines[hi]);\n+            lo.0 += off_lo;\n+            hi.0 += off_hi;\n+            mk_sp(lo, hi)\n+        };\n+        let sp0 = span(4, 6, (0, 5));\n+        let sp1 = span(0, 6, (0, 5));\n+        let sp2 = span(8, 8, (0, 3));\n+        let sp3 = span(8, 8, (5, 8));\n+        let sp4 = span(10, 10, (2, 3));\n+        let sp5 = span(10, 10, (4, 6));\n+\n+        let expect0 = &r#\"\n+   --> dummy.txt:5:1\n+    |>\n+5   |> ccccc\n+    |> ^\n+...\n+9   |> ddd__eee_\n+    |> ^^^  ^^^\n+10  |> elided\n+11  |> __f_gg\n+    |>   ^ ^^\n+\"#[1..];\n+\n+        let expect = &r#\"\n+   --> dummy.txt:1:1\n+    |>\n+1   |> aaaaa\n+    |> ^\n+...\n+9   |> ddd__eee_\n+    |> ^^^  ^^^\n+10  |> elided\n+11  |> __f_gg\n+    |>   ^ ^^\n+\"#[1..];\n+\n+        macro_rules! test {\n+            ($expected: expr, $highlight: expr) => ({\n+                data.lock().unwrap().clear();\n+                $highlight();\n+                let vec = data.lock().unwrap().clone();\n+                let actual = from_utf8(&vec[..]).unwrap();\n+                println!(\"actual:\");\n+                println!(\"{}\", actual);\n+                println!(\"expected:\");\n+                println!(\"{}\", $expected);\n+                assert_eq!(&actual[..], &$expected[..]);\n+            });\n+        }\n+\n+        let msp0 = MultiSpan::from_spans(vec![sp0, sp2, sp3, sp4, sp5]);\n+        let msp = MultiSpan::from_spans(vec![sp1, sp2, sp3, sp4, sp5]);\n+\n+        test!(expect0, || {\n+            diag.highlight_lines(&msp0, Level::Error).unwrap();\n+        });\n+        test!(expect, || {\n+            diag.highlight_lines(&msp, Level::Error).unwrap();\n+        });\n+    }\n+\n+    #[test]\n+    fn tab() {\n+        let file_text = \"\n+fn foo() {\n+\\tbar;\n+}\n+\";\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+        let span_bar = cm.span_substr(&foo, file_text, \"bar\", 0);\n+\n+        let mut snippet = SnippetData::new(cm, Some(span_bar), FormatMode::NewErrorFormat);\n+        snippet.push(span_bar, true, None);\n+\n+        let lines = snippet.render_lines();\n+        let text = make_string(&lines);\n+        assert_eq!(&text[..], &\"\n+ --> foo.rs:3:2\n+  |>\n+3 |> \\tbar;\n+  |> \\t^^^\n+\"[1..]);\n+    }\n+\n+    #[test]\n+    fn one_line() {\n+        let file_text = r#\"\n+fn foo() {\n+    vec.push(vec.pop().unwrap());\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+        let span_vec0 = cm.span_substr(&foo, file_text, \"vec\", 0);\n+        let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 1);\n+        let span_semi = cm.span_substr(&foo, file_text, \";\", 0);\n+\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n+        snippet.push(span_vec0, false, Some(format!(\"previous borrow of `vec` occurs here\")));\n+        snippet.push(span_vec1, false, Some(format!(\"error occurs here\")));\n+        snippet.push(span_semi, false, Some(format!(\"previous borrow ends here\")));\n+\n+        let lines = snippet.render_lines();\n+        println!(\"{:#?}\", lines);\n+\n+        let text: String = make_string(&lines);\n+\n+        println!(\"text=\\n{}\", text);\n+        assert_eq!(&text[..], &r#\"\n+ ::: foo.rs\n+  |>\n+3 |>     vec.push(vec.pop().unwrap());\n+  |>     ---      ---                - previous borrow ends here\n+  |>     |        |\n+  |>     |        error occurs here\n+  |>     previous borrow of `vec` occurs here\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn two_files() {\n+        let file_text_foo = r#\"\n+fn foo() {\n+    vec.push(vec.pop().unwrap());\n+}\n+\"#;\n+\n+        let file_text_bar = r#\"\n+fn bar() {\n+    // these blank links here\n+    // serve to ensure that the line numbers\n+    // from bar.rs\n+    // require more digits\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+    vec.push();\n+\n+    // this line will get elided\n+\n+    vec.pop().unwrap());\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo_map = cm.new_filemap_and_lines(\"foo.rs\", None, file_text_foo);\n+        let span_foo_vec0 = cm.span_substr(&foo_map, file_text_foo, \"vec\", 0);\n+        let span_foo_vec1 = cm.span_substr(&foo_map, file_text_foo, \"vec\", 1);\n+        let span_foo_semi = cm.span_substr(&foo_map, file_text_foo, \";\", 0);\n+\n+        let bar_map = cm.new_filemap_and_lines(\"bar.rs\", None, file_text_bar);\n+        let span_bar_vec0 = cm.span_substr(&bar_map, file_text_bar, \"vec\", 0);\n+        let span_bar_vec1 = cm.span_substr(&bar_map, file_text_bar, \"vec\", 1);\n+        let span_bar_semi = cm.span_substr(&bar_map, file_text_bar, \";\", 0);\n+\n+        let mut snippet = SnippetData::new(cm, Some(span_foo_vec1), FormatMode::NewErrorFormat);\n+        snippet.push(span_foo_vec0, false, Some(format!(\"a\")));\n+        snippet.push(span_foo_vec1, true, Some(format!(\"b\")));\n+        snippet.push(span_foo_semi, false, Some(format!(\"c\")));\n+        snippet.push(span_bar_vec0, false, Some(format!(\"d\")));\n+        snippet.push(span_bar_vec1, false, Some(format!(\"e\")));\n+        snippet.push(span_bar_semi, false, Some(format!(\"f\")));\n+\n+        let lines = snippet.render_lines();\n+        println!(\"{:#?}\", lines);\n+\n+        let text: String = make_string(&lines);\n+\n+        println!(\"text=\\n{}\", text);\n+\n+        // Note that the `|>` remain aligned across both files:\n+        assert_eq!(&text[..], &r#\"\n+   --> foo.rs:3:14\n+    |>\n+3   |>     vec.push(vec.pop().unwrap());\n+    |>     ---      ^^^                - c\n+    |>     |        |\n+    |>     |        b\n+    |>     a\n+   ::: bar.rs\n+    |>\n+17  |>     vec.push();\n+    |>     ---       - f\n+    |>     |\n+    |>     d\n+...\n+21  |>     vec.pop().unwrap());\n+    |>     --- e\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn multi_line() {\n+        let file_text = r#\"\n+fn foo() {\n+    let name = find_id(&data, 22).unwrap();\n+\n+    // Add one more item we forgot to the vector. Silly us.\n+    data.push(Data { name: format!(\"Hera\"), id: 66 });\n+\n+    // Print everything out.\n+    println!(\"Name: {:?}\", name);\n+    println!(\"Data: {:?}\", data);\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+        let span_data0 = cm.span_substr(&foo, file_text, \"data\", 0);\n+        let span_data1 = cm.span_substr(&foo, file_text, \"data\", 1);\n+        let span_rbrace = cm.span_substr(&foo, file_text, \"}\", 3);\n+\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n+        snippet.push(span_data0, false, Some(format!(\"immutable borrow begins here\")));\n+        snippet.push(span_data1, false, Some(format!(\"mutable borrow occurs here\")));\n+        snippet.push(span_rbrace, false, Some(format!(\"immutable borrow ends here\")));\n+\n+        let lines = snippet.render_lines();\n+        println!(\"{:#?}\", lines);\n+\n+        let text: String = make_string(&lines);\n+\n+        println!(\"text=\\n{}\", text);\n+        assert_eq!(&text[..], &r#\"\n+   ::: foo.rs\n+    |>\n+3   |>     let name = find_id(&data, 22).unwrap();\n+    |>                         ---- immutable borrow begins here\n+...\n+6   |>     data.push(Data { name: format!(\"Hera\"), id: 66 });\n+    |>     ---- mutable borrow occurs here\n+...\n+11  |> }\n+    |> - immutable borrow ends here\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn overlapping() {\n+        let file_text = r#\"\n+fn foo() {\n+    vec.push(vec.pop().unwrap());\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+        let span0 = cm.span_substr(&foo, file_text, \"vec.push\", 0);\n+        let span1 = cm.span_substr(&foo, file_text, \"vec\", 0);\n+        let span2 = cm.span_substr(&foo, file_text, \"ec.push\", 0);\n+        let span3 = cm.span_substr(&foo, file_text, \"unwrap\", 0);\n+\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n+        snippet.push(span0, false, Some(format!(\"A\")));\n+        snippet.push(span1, false, Some(format!(\"B\")));\n+        snippet.push(span2, false, Some(format!(\"C\")));\n+        snippet.push(span3, false, Some(format!(\"D\")));\n+\n+        let lines = snippet.render_lines();\n+        println!(\"{:#?}\", lines);\n+        let text: String = make_string(&lines);\n+\n+        println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n+        assert_eq!(&text[..], &r#\"\n+ ::: foo.rs\n+  |>\n+3 |>     vec.push(vec.pop().unwrap());\n+  |>     --------           ------ D\n+  |>     ||\n+  |>     |C\n+  |>     A\n+  |>     B\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn one_line_out_of_order() {\n+        let file_text = r#\"\n+fn foo() {\n+    vec.push(vec.pop().unwrap());\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+        let span_vec0 = cm.span_substr(&foo, file_text, \"vec\", 0);\n+        let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 1);\n+        let span_semi = cm.span_substr(&foo, file_text, \";\", 0);\n+\n+        // intentionally don't push the snippets left to right\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n+        snippet.push(span_vec1, false, Some(format!(\"error occurs here\")));\n+        snippet.push(span_vec0, false, Some(format!(\"previous borrow of `vec` occurs here\")));\n+        snippet.push(span_semi, false, Some(format!(\"previous borrow ends here\")));\n+\n+        let lines = snippet.render_lines();\n+        println!(\"{:#?}\", lines);\n+        let text: String = make_string(&lines);\n+\n+        println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n+        assert_eq!(&text[..], &r#\"\n+ ::: foo.rs\n+  |>\n+3 |>     vec.push(vec.pop().unwrap());\n+  |>     ---      ---                - previous borrow ends here\n+  |>     |        |\n+  |>     |        error occurs here\n+  |>     previous borrow of `vec` occurs here\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn elide_unnecessary_lines() {\n+        let file_text = r#\"\n+fn foo() {\n+    let mut vec = vec![0, 1, 2];\n+    let mut vec2 = vec;\n+    vec2.push(3);\n+    vec2.push(4);\n+    vec2.push(5);\n+    vec2.push(6);\n+    vec.push(7);\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+        let span_vec0 = cm.span_substr(&foo, file_text, \"vec\", 3);\n+        let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 8);\n+\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n+        snippet.push(span_vec0, false, Some(format!(\"`vec` moved here because it \\\n+            has type `collections::vec::Vec<i32>`\")));\n+        snippet.push(span_vec1, false, Some(format!(\"use of moved value: `vec`\")));\n+\n+        let lines = snippet.render_lines();\n+        println!(\"{:#?}\", lines);\n+        let text: String = make_string(&lines);\n+        println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n+        assert_eq!(&text[..], &r#\"\n+   ::: foo.rs\n+    |>\n+4   |>     let mut vec2 = vec;\n+    |>                    --- `vec` moved here because it has type `collections::vec::Vec<i32>`\n+...\n+9   |>     vec.push(7);\n+    |>     --- use of moved value: `vec`\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn spans_without_labels() {\n+        let file_text = r#\"\n+fn foo() {\n+    let mut vec = vec![0, 1, 2];\n+    let mut vec2 = vec;\n+    vec2.push(3);\n+    vec2.push(4);\n+    vec2.push(5);\n+    vec2.push(6);\n+    vec.push(7);\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n+        for i in 0..4 {\n+            let span_veci = cm.span_substr(&foo, file_text, \"vec\", i);\n+            snippet.push(span_veci, false, None);\n+        }\n+\n+        let lines = snippet.render_lines();\n+        let text: String = make_string(&lines);\n+        println!(\"text=&r#\\\"\\n{}\\n\\\"#[1..]\", text);\n+        assert_eq!(text, &r#\"\n+ ::: foo.rs\n+  |>\n+3 |>     let mut vec = vec![0, 1, 2];\n+  |>             ---   ---\n+4 |>     let mut vec2 = vec;\n+  |>             ---    ---\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn span_long_selection() {\n+        let file_text = r#\"\n+impl SomeTrait for () {\n+    fn foo(x: u32) {\n+        // impl 1\n+        // impl 2\n+        // impl 3\n+    }\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n+        let fn_span = cm.span_substr(&foo, file_text, \"fn\", 0);\n+        let rbrace_span = cm.span_substr(&foo, file_text, \"}\", 0);\n+        snippet.push(splice(fn_span, rbrace_span), false, None);\n+        let lines = snippet.render_lines();\n+        let text: String = make_string(&lines);\n+        println!(\"r#\\\"\\n{}\\\"\", text);\n+        assert_eq!(text, &r#\"\n+ ::: foo.rs\n+  |>\n+3 |>     fn foo(x: u32) {\n+  |>     -\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn span_overlap_label() {\n+        // Test that we don't put `x_span` to the right of its highlight,\n+        // since there is another highlight that overlaps it.\n+\n+        let file_text = r#\"\n+    fn foo(x: u32) {\n+    }\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n+        let fn_span = cm.span_substr(&foo, file_text, \"fn foo(x: u32)\", 0);\n+        let x_span = cm.span_substr(&foo, file_text, \"x\", 0);\n+        snippet.push(fn_span, false, Some(format!(\"fn_span\")));\n+        snippet.push(x_span, false, Some(format!(\"x_span\")));\n+        let lines = snippet.render_lines();\n+        let text: String = make_string(&lines);\n+        println!(\"r#\\\"\\n{}\\\"\", text);\n+        assert_eq!(text, &r#\"\n+ ::: foo.rs\n+  |>\n+2 |>     fn foo(x: u32) {\n+  |>     --------------\n+  |>     |      |\n+  |>     |      x_span\n+  |>     fn_span\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn span_overlap_label2() {\n+        // Test that we don't put `x_span` to the right of its highlight,\n+        // since there is another highlight that overlaps it. In this\n+        // case, the overlap is only at the beginning, but it's still\n+        // better to show the beginning more clearly.\n+\n+        let file_text = r#\"\n+    fn foo(x: u32) {\n+    }\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n+        let fn_span = cm.span_substr(&foo, file_text, \"fn foo(x\", 0);\n+        let x_span = cm.span_substr(&foo, file_text, \"x: u32)\", 0);\n+        snippet.push(fn_span, false, Some(format!(\"fn_span\")));\n+        snippet.push(x_span, false, Some(format!(\"x_span\")));\n+        let lines = snippet.render_lines();\n+        let text: String = make_string(&lines);\n+        println!(\"r#\\\"\\n{}\\\"\", text);\n+        assert_eq!(text, &r#\"\n+ ::: foo.rs\n+  |>\n+2 |>     fn foo(x: u32) {\n+  |>     --------------\n+  |>     |      |\n+  |>     |      x_span\n+  |>     fn_span\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn span_overlap_label3() {\n+        // Test that we don't put `x_span` to the right of its highlight,\n+        // since there is another highlight that overlaps it. In this\n+        // case, the overlap is only at the beginning, but it's still\n+        // better to show the beginning more clearly.\n+\n+        let file_text = r#\"\n+    fn foo() {\n+       let closure = || {\n+           inner\n+       };\n+    }\n+}\n+\"#;\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n+\n+        let closure_span = {\n+            let closure_start_span = cm.span_substr(&foo, file_text, \"||\", 0);\n+            let closure_end_span = cm.span_substr(&foo, file_text, \"}\", 0);\n+            splice(closure_start_span, closure_end_span)\n+        };\n+\n+        let inner_span = cm.span_substr(&foo, file_text, \"inner\", 0);\n+\n+        snippet.push(closure_span, false, Some(format!(\"foo\")));\n+        snippet.push(inner_span, false, Some(format!(\"bar\")));\n+\n+        let lines = snippet.render_lines();\n+        let text: String = make_string(&lines);\n+        println!(\"r#\\\"\\n{}\\\"\", text);\n+        assert_eq!(text, &r#\"\n+ ::: foo.rs\n+  |>\n+3 |>        let closure = || {\n+  |>                      - foo\n+4 |>            inner\n+  |>            ----- bar\n+\"#[1..]);\n+    }\n+\n+    #[test]\n+    fn span_empty() {\n+        // In one of the unit tests, we found that the parser sometimes\n+        // gives empty spans, and in particular it supplied an EOF span\n+        // like this one, which points at the very end. We want to\n+        // fallback gracefully in this case.\n+\n+        let file_text = r#\"\n+fn main() {\n+    struct Foo;\n+\n+    impl !Sync for Foo {}\n+\n+    unsafe impl Send for &'static Foo {\n+    // error: cross-crate traits with a default impl, like `core::marker::Send`,\n+    //        can only be implemented for a struct/enum type, not\n+    //        `&'static Foo`\n+}\"#;\n+\n+\n+        let cm = Rc::new(CodeMap::new());\n+        let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n+\n+        let mut rbrace_span = cm.span_substr(&foo, file_text, \"}\", 1);\n+        rbrace_span.lo = rbrace_span.hi;\n+\n+        let mut snippet = SnippetData::new(cm.clone(),\n+                                           Some(rbrace_span),\n+                                           FormatMode::NewErrorFormat);\n+        snippet.push(rbrace_span, false, None);\n+        let lines = snippet.render_lines();\n+        let text: String = make_string(&lines);\n+        println!(\"r#\\\"\\n{}\\\"\", text);\n+        assert_eq!(text, &r#\"\n+  --> foo.rs:11:2\n+   |>\n+11 |> }\n+   |>  -\n+\"#[1..]);\n+    }\n }"}, {"sha": "cc5a68eae3bb5471eaeb1202f0f0c9da8b6b1348", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -11,7 +11,8 @@\n use attr::{AttrMetaMethods, HasAttrs};\n use feature_gate::{emit_feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features, GateIssue};\n use fold::Folder;\n-use {ast, fold, attr};\n+use {fold, attr};\n+use ast;\n use codemap::{Spanned, respan};\n use parse::{ParseSess, token};\n use ptr::P;"}, {"sha": "5bbd18bd9ee2e02f64af3b2f15f3ea092af48dbc", "filename": "src/libsyntax/diagnostics/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -20,7 +20,7 @@ use std::io::Write;\n use std::error::Error;\n use rustc_serialize::json::as_json;\n \n-use codemap::Span;\n+use syntax_pos::Span;\n use ext::base::ExtCtxt;\n use diagnostics::plugin::{ErrorMap, ErrorInfo};\n "}, {"sha": "abf2b39d5c6deecd2f880fceae45ce82da2995cb", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,7 +14,7 @@ use std::env;\n \n use ast;\n use ast::{Ident, Name, TokenTree};\n-use codemap::Span;\n+use syntax_pos::Span;\n use ext::base::{ExtCtxt, MacEager, MacResult};\n use ext::build::AstBuilder;\n use parse::token;\n@@ -23,6 +23,8 @@ use util::small_vector::SmallVector;\n \n use diagnostics::metadata::output_metadata;\n \n+pub use errors::*;\n+\n // Maximum width of any line in an extended error description (inclusive).\n const MAX_DESCRIPTION_WIDTH: usize = 80;\n "}, {"sha": "79e40a091659e106381ec3eacfcd84bdc38a4152", "filename": "src/libsyntax/errors/snippet/test.rs", "status": "removed", "additions": 0, "deletions": 597, "changes": 597, "blob_url": "https://github.com/rust-lang/rust/blob/4e2e31c11837f244e5039165b777ddedde5dc44d/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2e31c11837f244e5039165b777ddedde5dc44d/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs?ref=4e2e31c11837f244e5039165b777ddedde5dc44d", "patch": "@@ -1,597 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Code for testing annotated snippets.\n-\n-#![cfg(test)]\n-\n-use codemap::{BytePos, CodeMap, FileMap, NO_EXPANSION, Span};\n-use std::rc::Rc;\n-use super::{RenderedLine, SnippetData};\n-\n-/// Returns the span corresponding to the `n`th occurrence of\n-/// `substring` in `source_text`.\n-trait CodeMapExtension {\n-    fn span_substr(&self,\n-                   file: &Rc<FileMap>,\n-                   source_text: &str,\n-                   substring: &str,\n-                   n: usize)\n-                   -> Span;\n-}\n-\n-impl CodeMapExtension for CodeMap {\n-    fn span_substr(&self,\n-                   file: &Rc<FileMap>,\n-                   source_text: &str,\n-                   substring: &str,\n-                   n: usize)\n-                   -> Span\n-    {\n-        println!(\"span_substr(file={:?}/{:?}, substring={:?}, n={})\",\n-                 file.name, file.start_pos, substring, n);\n-        let mut i = 0;\n-        let mut hi = 0;\n-        loop {\n-            let offset = source_text[hi..].find(substring).unwrap_or_else(|| {\n-                panic!(\"source_text `{}` does not have {} occurrences of `{}`, only {}\",\n-                       source_text, n, substring, i);\n-            });\n-            let lo = hi + offset;\n-            hi = lo + substring.len();\n-            if i == n {\n-                let span = Span {\n-                    lo: BytePos(lo as u32 + file.start_pos.0),\n-                    hi: BytePos(hi as u32 + file.start_pos.0),\n-                    expn_id: NO_EXPANSION,\n-                };\n-                assert_eq!(&self.span_to_snippet(span).unwrap()[..],\n-                           substring);\n-                return span;\n-            }\n-            i += 1;\n-        }\n-    }\n-}\n-\n-fn splice(start: Span, end: Span) -> Span {\n-    Span {\n-        lo: start.lo,\n-        hi: end.hi,\n-        expn_id: NO_EXPANSION,\n-    }\n-}\n-\n-fn make_string(lines: &[RenderedLine]) -> String {\n-    lines.iter()\n-         .flat_map(|rl| {\n-             rl.text.iter()\n-                    .map(|s| &s.text[..])\n-                    .chain(Some(\"\\n\"))\n-         })\n-         .collect()\n-}\n-\n-#[test]\n-fn tab() {\n-    let file_text = \"\n-fn foo() {\n-\\tbar;\n-}\n-\";\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-    let span_bar = cm.span_substr(&foo, file_text, \"bar\", 0);\n-\n-    let mut snippet = SnippetData::new(cm, Some(span_bar));\n-    snippet.push(span_bar, true, None);\n-\n-    let lines = snippet.render_lines();\n-    let text = make_string(&lines);\n-    assert_eq!(&text[..], &\"\n- --> foo.rs:3:2\n-  |>\n-3 |> \\tbar;\n-  |> \\t^^^\n-\"[1..]);\n-}\n-\n-#[test]\n-fn one_line() {\n-    let file_text = r#\"\n-fn foo() {\n-    vec.push(vec.pop().unwrap());\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-    let span_vec0 = cm.span_substr(&foo, file_text, \"vec\", 0);\n-    let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 1);\n-    let span_semi = cm.span_substr(&foo, file_text, \";\", 0);\n-\n-    let mut snippet = SnippetData::new(cm, None);\n-    snippet.push(span_vec0, false, Some(format!(\"previous borrow of `vec` occurs here\")));\n-    snippet.push(span_vec1, false, Some(format!(\"error occurs here\")));\n-    snippet.push(span_semi, false, Some(format!(\"previous borrow ends here\")));\n-\n-    let lines = snippet.render_lines();\n-    println!(\"{:#?}\", lines);\n-\n-    let text: String = make_string(&lines);\n-\n-    println!(\"text=\\n{}\", text);\n-    assert_eq!(&text[..], &r#\"\n- ::: foo.rs\n-  |>\n-3 |>     vec.push(vec.pop().unwrap());\n-  |>     ---      ---                - previous borrow ends here\n-  |>     |        |\n-  |>     |        error occurs here\n-  |>     previous borrow of `vec` occurs here\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn two_files() {\n-    let file_text_foo = r#\"\n-fn foo() {\n-    vec.push(vec.pop().unwrap());\n-}\n-\"#;\n-\n-    let file_text_bar = r#\"\n-fn bar() {\n-    // these blank links here\n-    // serve to ensure that the line numbers\n-    // from bar.rs\n-    // require more digits\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    vec.push();\n-\n-    // this line will get elided\n-\n-    vec.pop().unwrap());\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo_map = cm.new_filemap_and_lines(\"foo.rs\", None, file_text_foo);\n-    let span_foo_vec0 = cm.span_substr(&foo_map, file_text_foo, \"vec\", 0);\n-    let span_foo_vec1 = cm.span_substr(&foo_map, file_text_foo, \"vec\", 1);\n-    let span_foo_semi = cm.span_substr(&foo_map, file_text_foo, \";\", 0);\n-\n-    let bar_map = cm.new_filemap_and_lines(\"bar.rs\", None, file_text_bar);\n-    let span_bar_vec0 = cm.span_substr(&bar_map, file_text_bar, \"vec\", 0);\n-    let span_bar_vec1 = cm.span_substr(&bar_map, file_text_bar, \"vec\", 1);\n-    let span_bar_semi = cm.span_substr(&bar_map, file_text_bar, \";\", 0);\n-\n-    let mut snippet = SnippetData::new(cm, Some(span_foo_vec1));\n-    snippet.push(span_foo_vec0, false, Some(format!(\"a\")));\n-    snippet.push(span_foo_vec1, true, Some(format!(\"b\")));\n-    snippet.push(span_foo_semi, false, Some(format!(\"c\")));\n-    snippet.push(span_bar_vec0, false, Some(format!(\"d\")));\n-    snippet.push(span_bar_vec1, false, Some(format!(\"e\")));\n-    snippet.push(span_bar_semi, false, Some(format!(\"f\")));\n-\n-    let lines = snippet.render_lines();\n-    println!(\"{:#?}\", lines);\n-\n-    let text: String = make_string(&lines);\n-\n-    println!(\"text=\\n{}\", text);\n-\n-    // Note that the `|>` remain aligned across both files:\n-    assert_eq!(&text[..], &r#\"\n-   --> foo.rs:3:14\n-    |>\n-3   |>     vec.push(vec.pop().unwrap());\n-    |>     ---      ^^^                - c\n-    |>     |        |\n-    |>     |        b\n-    |>     a\n-   ::: bar.rs\n-    |>\n-17  |>     vec.push();\n-    |>     ---       - f\n-    |>     |\n-    |>     d\n-...\n-21  |>     vec.pop().unwrap());\n-    |>     --- e\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn multi_line() {\n-    let file_text = r#\"\n-fn foo() {\n-    let name = find_id(&data, 22).unwrap();\n-\n-    // Add one more item we forgot to the vector. Silly us.\n-    data.push(Data { name: format!(\"Hera\"), id: 66 });\n-\n-    // Print everything out.\n-    println!(\"Name: {:?}\", name);\n-    println!(\"Data: {:?}\", data);\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-    let span_data0 = cm.span_substr(&foo, file_text, \"data\", 0);\n-    let span_data1 = cm.span_substr(&foo, file_text, \"data\", 1);\n-    let span_rbrace = cm.span_substr(&foo, file_text, \"}\", 3);\n-\n-    let mut snippet = SnippetData::new(cm, None);\n-    snippet.push(span_data0, false, Some(format!(\"immutable borrow begins here\")));\n-    snippet.push(span_data1, false, Some(format!(\"mutable borrow occurs here\")));\n-    snippet.push(span_rbrace, false, Some(format!(\"immutable borrow ends here\")));\n-\n-    let lines = snippet.render_lines();\n-    println!(\"{:#?}\", lines);\n-\n-    let text: String = make_string(&lines);\n-\n-    println!(\"text=\\n{}\", text);\n-    assert_eq!(&text[..], &r#\"\n-   ::: foo.rs\n-    |>\n-3   |>     let name = find_id(&data, 22).unwrap();\n-    |>                         ---- immutable borrow begins here\n-...\n-6   |>     data.push(Data { name: format!(\"Hera\"), id: 66 });\n-    |>     ---- mutable borrow occurs here\n-...\n-11  |> }\n-    |> - immutable borrow ends here\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn overlapping() {\n-    let file_text = r#\"\n-fn foo() {\n-    vec.push(vec.pop().unwrap());\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-    let span0 = cm.span_substr(&foo, file_text, \"vec.push\", 0);\n-    let span1 = cm.span_substr(&foo, file_text, \"vec\", 0);\n-    let span2 = cm.span_substr(&foo, file_text, \"ec.push\", 0);\n-    let span3 = cm.span_substr(&foo, file_text, \"unwrap\", 0);\n-\n-    let mut snippet = SnippetData::new(cm, None);\n-    snippet.push(span0, false, Some(format!(\"A\")));\n-    snippet.push(span1, false, Some(format!(\"B\")));\n-    snippet.push(span2, false, Some(format!(\"C\")));\n-    snippet.push(span3, false, Some(format!(\"D\")));\n-\n-    let lines = snippet.render_lines();\n-    println!(\"{:#?}\", lines);\n-    let text: String = make_string(&lines);\n-\n-    println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n-    assert_eq!(&text[..], &r#\"\n- ::: foo.rs\n-  |>\n-3 |>     vec.push(vec.pop().unwrap());\n-  |>     --------           ------ D\n-  |>     ||\n-  |>     |C\n-  |>     A\n-  |>     B\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn one_line_out_of_order() {\n-    let file_text = r#\"\n-fn foo() {\n-    vec.push(vec.pop().unwrap());\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-    let span_vec0 = cm.span_substr(&foo, file_text, \"vec\", 0);\n-    let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 1);\n-    let span_semi = cm.span_substr(&foo, file_text, \";\", 0);\n-\n-    // intentionally don't push the snippets left to right\n-    let mut snippet = SnippetData::new(cm, None);\n-    snippet.push(span_vec1, false, Some(format!(\"error occurs here\")));\n-    snippet.push(span_vec0, false, Some(format!(\"previous borrow of `vec` occurs here\")));\n-    snippet.push(span_semi, false, Some(format!(\"previous borrow ends here\")));\n-\n-    let lines = snippet.render_lines();\n-    println!(\"{:#?}\", lines);\n-    let text: String = make_string(&lines);\n-\n-    println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n-    assert_eq!(&text[..], &r#\"\n- ::: foo.rs\n-  |>\n-3 |>     vec.push(vec.pop().unwrap());\n-  |>     ---      ---                - previous borrow ends here\n-  |>     |        |\n-  |>     |        error occurs here\n-  |>     previous borrow of `vec` occurs here\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn elide_unnecessary_lines() {\n-    let file_text = r#\"\n-fn foo() {\n-    let mut vec = vec![0, 1, 2];\n-    let mut vec2 = vec;\n-    vec2.push(3);\n-    vec2.push(4);\n-    vec2.push(5);\n-    vec2.push(6);\n-    vec.push(7);\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-    let span_vec0 = cm.span_substr(&foo, file_text, \"vec\", 3);\n-    let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 8);\n-\n-    let mut snippet = SnippetData::new(cm, None);\n-    snippet.push(span_vec0, false, Some(format!(\"`vec` moved here because it \\\n-        has type `collections::vec::Vec<i32>`\")));\n-    snippet.push(span_vec1, false, Some(format!(\"use of moved value: `vec`\")));\n-\n-    let lines = snippet.render_lines();\n-    println!(\"{:#?}\", lines);\n-    let text: String = make_string(&lines);\n-    println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n-    assert_eq!(&text[..], &r#\"\n-   ::: foo.rs\n-    |>\n-4   |>     let mut vec2 = vec;\n-    |>                    --- `vec` moved here because it has type `collections::vec::Vec<i32>`\n-...\n-9   |>     vec.push(7);\n-    |>     --- use of moved value: `vec`\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn spans_without_labels() {\n-    let file_text = r#\"\n-fn foo() {\n-    let mut vec = vec![0, 1, 2];\n-    let mut vec2 = vec;\n-    vec2.push(3);\n-    vec2.push(4);\n-    vec2.push(5);\n-    vec2.push(6);\n-    vec.push(7);\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-\n-    let mut snippet = SnippetData::new(cm.clone(), None);\n-    for i in 0..4 {\n-        let span_veci = cm.span_substr(&foo, file_text, \"vec\", i);\n-        snippet.push(span_veci, false, None);\n-    }\n-\n-    let lines = snippet.render_lines();\n-    let text: String = make_string(&lines);\n-    println!(\"text=&r#\\\"\\n{}\\n\\\"#[1..]\", text);\n-    assert_eq!(text, &r#\"\n- ::: foo.rs\n-  |>\n-3 |>     let mut vec = vec![0, 1, 2];\n-  |>             ---   ---\n-4 |>     let mut vec2 = vec;\n-  |>             ---    ---\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn span_long_selection() {\n-    let file_text = r#\"\n-impl SomeTrait for () {\n-    fn foo(x: u32) {\n-        // impl 1\n-        // impl 2\n-        // impl 3\n-    }\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-\n-    let mut snippet = SnippetData::new(cm.clone(), None);\n-    let fn_span = cm.span_substr(&foo, file_text, \"fn\", 0);\n-    let rbrace_span = cm.span_substr(&foo, file_text, \"}\", 0);\n-    snippet.push(splice(fn_span, rbrace_span), false, None);\n-    let lines = snippet.render_lines();\n-    let text: String = make_string(&lines);\n-    println!(\"r#\\\"\\n{}\\\"\", text);\n-    assert_eq!(text, &r#\"\n- ::: foo.rs\n-  |>\n-3 |>     fn foo(x: u32) {\n-  |>     -\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn span_overlap_label() {\n-    // Test that we don't put `x_span` to the right of its highlight,\n-    // since there is another highlight that overlaps it.\n-\n-    let file_text = r#\"\n-    fn foo(x: u32) {\n-    }\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-\n-    let mut snippet = SnippetData::new(cm.clone(), None);\n-    let fn_span = cm.span_substr(&foo, file_text, \"fn foo(x: u32)\", 0);\n-    let x_span = cm.span_substr(&foo, file_text, \"x\", 0);\n-    snippet.push(fn_span, false, Some(format!(\"fn_span\")));\n-    snippet.push(x_span, false, Some(format!(\"x_span\")));\n-    let lines = snippet.render_lines();\n-    let text: String = make_string(&lines);\n-    println!(\"r#\\\"\\n{}\\\"\", text);\n-    assert_eq!(text, &r#\"\n- ::: foo.rs\n-  |>\n-2 |>     fn foo(x: u32) {\n-  |>     --------------\n-  |>     |      |\n-  |>     |      x_span\n-  |>     fn_span\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn span_overlap_label2() {\n-    // Test that we don't put `x_span` to the right of its highlight,\n-    // since there is another highlight that overlaps it. In this\n-    // case, the overlap is only at the beginning, but it's still\n-    // better to show the beginning more clearly.\n-\n-    let file_text = r#\"\n-    fn foo(x: u32) {\n-    }\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-\n-    let mut snippet = SnippetData::new(cm.clone(), None);\n-    let fn_span = cm.span_substr(&foo, file_text, \"fn foo(x\", 0);\n-    let x_span = cm.span_substr(&foo, file_text, \"x: u32)\", 0);\n-    snippet.push(fn_span, false, Some(format!(\"fn_span\")));\n-    snippet.push(x_span, false, Some(format!(\"x_span\")));\n-    let lines = snippet.render_lines();\n-    let text: String = make_string(&lines);\n-    println!(\"r#\\\"\\n{}\\\"\", text);\n-    assert_eq!(text, &r#\"\n- ::: foo.rs\n-  |>\n-2 |>     fn foo(x: u32) {\n-  |>     --------------\n-  |>     |      |\n-  |>     |      x_span\n-  |>     fn_span\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn span_overlap_label3() {\n-    // Test that we don't put `x_span` to the right of its highlight,\n-    // since there is another highlight that overlaps it. In this\n-    // case, the overlap is only at the beginning, but it's still\n-    // better to show the beginning more clearly.\n-\n-    let file_text = r#\"\n-    fn foo() {\n-       let closure = || {\n-           inner\n-       };\n-    }\n-}\n-\"#;\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-\n-    let mut snippet = SnippetData::new(cm.clone(), None);\n-\n-    let closure_span = {\n-        let closure_start_span = cm.span_substr(&foo, file_text, \"||\", 0);\n-        let closure_end_span = cm.span_substr(&foo, file_text, \"}\", 0);\n-        splice(closure_start_span, closure_end_span)\n-    };\n-\n-    let inner_span = cm.span_substr(&foo, file_text, \"inner\", 0);\n-\n-    snippet.push(closure_span, false, Some(format!(\"foo\")));\n-    snippet.push(inner_span, false, Some(format!(\"bar\")));\n-\n-    let lines = snippet.render_lines();\n-    let text: String = make_string(&lines);\n-    println!(\"r#\\\"\\n{}\\\"\", text);\n-    assert_eq!(text, &r#\"\n- ::: foo.rs\n-  |>\n-3 |>        let closure = || {\n-  |>                      - foo\n-4 |>            inner\n-  |>            ----- bar\n-\"#[1..]);\n-}\n-\n-#[test]\n-fn span_empty() {\n-    // In one of the unit tests, we found that the parser sometimes\n-    // gives empty spans, and in particular it supplied an EOF span\n-    // like this one, which points at the very end. We want to\n-    // fallback gracefully in this case.\n-\n-    let file_text = r#\"\n-fn main() {\n-    struct Foo;\n-\n-    impl !Sync for Foo {}\n-\n-    unsafe impl Send for &'static Foo {\n-    // error: cross-crate traits with a default impl, like `core::marker::Send`,\n-    //        can only be implemented for a struct/enum type, not\n-    //        `&'static Foo`\n-}\"#;\n-\n-\n-    let cm = Rc::new(CodeMap::new());\n-    let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n-\n-    let mut rbrace_span = cm.span_substr(&foo, file_text, \"}\", 1);\n-    rbrace_span.lo = rbrace_span.hi;\n-\n-    let mut snippet = SnippetData::new(cm.clone(), Some(rbrace_span));\n-    snippet.push(rbrace_span, false, None);\n-    let lines = snippet.render_lines();\n-    let text: String = make_string(&lines);\n-    println!(\"r#\\\"\\n{}\\\"\", text);\n-    assert_eq!(text, &r#\"\n-  --> foo.rs:11:2\n-   |>\n-11 |> }\n-   |>  -\n-\"#[1..]);\n-}"}, {"sha": "3ee256342078603a2d3fe382eb66f4725534dab1", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,8 +13,8 @@ pub use self::SyntaxExtension::*;\n use ast;\n use ast::{Name, PatKind};\n use attr::HasAttrs;\n-use codemap;\n-use codemap::{CodeMap, Span, ExpnId, ExpnInfo, NO_EXPANSION};\n+use codemap::{self, CodeMap, ExpnInfo};\n+use syntax_pos::{Span, ExpnId, NO_EXPANSION};\n use errors::DiagnosticBuilder;\n use ext;\n use ext::expand;"}, {"sha": "fdf2626333012cbe55cc7a029c4f574b18901117", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -11,7 +11,8 @@\n use abi::Abi;\n use ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp, PatKind};\n use attr;\n-use codemap::{Span, respan, Spanned, DUMMY_SP, Pos};\n+use syntax_pos::{Span, DUMMY_SP, Pos};\n+use codemap::{respan, Spanned};\n use ext::base::ExtCtxt;\n use parse::token::{self, keywords, InternedString};\n use ptr::P;"}, {"sha": "123d38c0006362de724f47db89a801fb45af9af5", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,8 +18,8 @@ use ext::mtwt;\n use ext::build::AstBuilder;\n use attr;\n use attr::{AttrMetaMethods, WithAttrs, ThinAttributesExt};\n-use codemap;\n-use codemap::{Span, Spanned, ExpnInfo, ExpnId, NameAndSpan, MacroBang, MacroAttribute};\n+use codemap::{Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n+use syntax_pos::{self, Span, ExpnId};\n use config::StripUnconfigured;\n use ext::base::*;\n use feature_gate::{self, Features};\n@@ -1053,7 +1053,7 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n                 result = expand_item(item, self);\n                 self.pop_mod_path();\n             } else {\n-                let filename = if inner != codemap::DUMMY_SP {\n+                let filename = if inner != syntax_pos::DUMMY_SP {\n                     Some(self.cx.parse_sess.codemap().span_to_filename(inner))\n                 } else { None };\n                 let orig_filename = replace(&mut self.cx.filename, filename);\n@@ -1242,7 +1242,7 @@ mod tests {\n     use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer, ExpansionConfig};\n     use ast;\n     use ast::Name;\n-    use codemap;\n+    use syntax_pos;\n     use ext::base::{ExtCtxt, DummyMacroLoader};\n     use ext::mtwt;\n     use fold::Folder;\n@@ -1284,7 +1284,7 @@ mod tests {\n     }\n \n     impl<'v> Visitor<'v> for IdentFinder {\n-        fn visit_ident(&mut self, _: codemap::Span, id: ast::Ident){\n+        fn visit_ident(&mut self, _: syntax_pos::Span, id: ast::Ident){\n             self.ident_accumulator.push(id);\n         }\n     }"}, {"sha": "db22eb7901cd45e997bff167669e327160bc0b10", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast::{self, Arg, Arm, Block, Expr, Item, Pat, Stmt, TokenTree, Ty};\n-use codemap::Span;\n+use syntax_pos::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n use ext::build::AstBuilder;\n@@ -36,7 +36,8 @@ pub mod rt {\n     use ast::TokenTree;\n \n     pub use parse::new_parser_from_tts;\n-    pub use codemap::{BytePos, Span, dummy_spanned, DUMMY_SP};\n+    pub use syntax_pos::{BytePos, Span, DUMMY_SP};\n+    pub use codemap::{dummy_spanned};\n \n     pub trait ToTokens {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree>;"}, {"sha": "a9b90dcbb7c28d5d9b813d7a8e8047fe08ca6e7d", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use codemap::{Pos, Span};\n-use codemap;\n+use syntax_pos::{self, Pos, Span};\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n@@ -194,7 +193,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n // resolve a file-system path to an absolute file-system path (if it\n // isn't already)\n-fn res_rel_file(cx: &mut ExtCtxt, sp: codemap::Span, arg: &Path) -> PathBuf {\n+fn res_rel_file(cx: &mut ExtCtxt, sp: syntax_pos::Span, arg: &Path) -> PathBuf {\n     // NB: relative paths are resolved relative to the compilation unit\n     if !arg.is_absolute() {\n         let mut cu = PathBuf::from(&cx.codemap().span_to_filename(sp));"}, {"sha": "2230da10552e7b583ab9f8594411618c3de0179a", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -80,8 +80,8 @@ use self::TokenTreeOrTokenTreeVec::*;\n \n use ast;\n use ast::{TokenTree, Name, Ident};\n-use codemap::{BytePos, mk_sp, Span, Spanned};\n-use codemap;\n+use syntax_pos::{self, BytePos, mk_sp, Span};\n+use codemap::Spanned;\n use errors::FatalError;\n use parse::lexer::*; //resolve bug?\n use parse::ParseSess;\n@@ -196,15 +196,15 @@ pub fn initial_matcher_pos(ms: Rc<Vec<TokenTree>>, sep: Option<Token>, lo: ByteP\n /// token tree it was derived from.\n \n pub enum NamedMatch {\n-    MatchedSeq(Vec<Rc<NamedMatch>>, codemap::Span),\n+    MatchedSeq(Vec<Rc<NamedMatch>>, syntax_pos::Span),\n     MatchedNonterminal(Nonterminal)\n }\n \n pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n             -> ParseResult<HashMap<Name, Rc<NamedMatch>>> {\n     fn n_rec(p_s: &ParseSess, m: &TokenTree, res: &[Rc<NamedMatch>],\n              ret_val: &mut HashMap<Name, Rc<NamedMatch>>, idx: &mut usize)\n-             -> Result<(), (codemap::Span, String)> {\n+             -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => {\n                 for next_m in &seq.tts {\n@@ -251,9 +251,9 @@ pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n pub enum ParseResult<T> {\n     Success(T),\n     /// Arm failed to match\n-    Failure(codemap::Span, String),\n+    Failure(syntax_pos::Span, String),\n     /// Fatal error (malformed macro?). Abort compilation.\n-    Error(codemap::Span, String)\n+    Error(syntax_pos::Span, String)\n }\n \n pub type NamedParseResult = ParseResult<HashMap<Name, Rc<NamedMatch>>>;"}, {"sha": "850fbb5addf6ed962d13c4f13d997ed33d264adb", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast::{self, TokenTree};\n-use codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n use ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n use ext::tt::macro_parser::{Success, Error, Failure};"}, {"sha": "8b5ecd10fcb6f48ffcf82f0ac81ee874223a093f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -11,7 +11,7 @@ use self::LockstepIterSize::*;\n \n use ast;\n use ast::{TokenTree, Ident, Name};\n-use codemap::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n use errors::{Handler, DiagnosticBuilder};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n use parse::token::{DocComment, MatchNt, SubstNt};"}, {"sha": "bb72dadcaf635be4e90b0d710ec1f78cc821ab60", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -30,10 +30,10 @@ use ast::{NodeId, PatKind};\n use ast;\n use attr;\n use attr::AttrMetaMethods;\n-use codemap::{CodeMap, Span};\n+use codemap::CodeMap;\n+use syntax_pos::Span;\n use errors::Handler;\n-use visit;\n-use visit::{FnKind, Visitor};\n+use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n use parse::token::InternedString;\n "}, {"sha": "e8f9ddb243154ba33210ccd29ee4ebcc0f14a15d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -21,7 +21,8 @@\n use ast::*;\n use ast;\n use attr::{ThinAttributes, ThinAttributesExt};\n-use codemap::{respan, Span, Spanned};\n+use syntax_pos::Span;\n+use codemap::{Spanned, respan};\n use parse::token::{self, keywords};\n use ptr::P;\n use util::small_vector::SmallVector;"}, {"sha": "dc9a5ee46645fbabb28aa1775d9b8864df6694b0", "filename": "src/libsyntax/json.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,10 +19,10 @@\n \n // FIXME spec the JSON output properly.\n \n-\n-use codemap::{self, MacroBacktrace, Span, SpanLabel, MultiSpan, CodeMap};\n-use diagnostics::registry::Registry;\n-use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion};\n+use codemap::CodeMap;\n+use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n+use errors::registry::Registry;\n+use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n use errors::emitter::Emitter;\n \n use std::rc::Rc;\n@@ -34,7 +34,7 @@ use rustc_serialize::json::as_json;\n pub struct JsonEmitter {\n     dst: Box<Write + Send>,\n     registry: Option<Registry>,\n-    cm: Rc<CodeMap>,\n+    cm: Rc<CodeMapper + 'static>,\n }\n \n impl JsonEmitter {\n@@ -303,7 +303,7 @@ impl DiagnosticSpan {\n }\n \n impl DiagnosticSpanLine {\n-    fn line_from_filemap(fm: &codemap::FileMap,\n+    fn line_from_filemap(fm: &syntax_pos::FileMap,\n                          index: usize,\n                          h_start: usize,\n                          h_end: usize)\n@@ -354,12 +354,14 @@ impl DiagnosticCode {\n \n impl JsonEmitter {\n     fn render(&self, render_span: &RenderSpan) -> Option<String> {\n+        use std::borrow::Borrow;\n+\n         match *render_span {\n             RenderSpan::FullSpan(_) => {\n                 None\n             }\n             RenderSpan::Suggestion(ref suggestion) => {\n-                Some(suggestion.splice_lines(&self.cm))\n+                Some(suggestion.splice_lines(self.cm.borrow()))\n             }\n         }\n     }", "previous_filename": "src/libsyntax/errors/json.rs"}, {"sha": "ae61801c65bb8229c0b9f0d1affa992711630e88", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -33,17 +33,19 @@\n #![feature(str_escape)]\n #![feature(unicode)]\n #![feature(question_mark)]\n-#![feature(range_contains)]\n \n extern crate serialize;\n extern crate term;\n extern crate libc;\n #[macro_use] extern crate log;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n extern crate rustc_unicode;\n+pub extern crate rustc_errors as errors;\n+extern crate syntax_pos;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n+\n // A variant of 'try!' that panics on an Err. This is used as a crutch on the\n // way towards a non-panic!-prone parser. It should be used for fatal parsing\n // errors; eventually we plan to convert all code using panictry to just use\n@@ -53,7 +55,7 @@ extern crate serialize as rustc_serialize; // used by deriving\n macro_rules! panictry {\n     ($e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-        use $crate::errors::FatalError;\n+        use errors::FatalError;\n         match $e {\n             Ok(e) => e,\n             Err(mut e) => {\n@@ -78,11 +80,10 @@ pub mod util {\n pub mod diagnostics {\n     pub mod macros;\n     pub mod plugin;\n-    pub mod registry;\n     pub mod metadata;\n }\n \n-pub mod errors;\n+pub mod json;\n \n pub mod syntax {\n     pub use ext;"}, {"sha": "f6e94b7caeabe617ceb2e17a3e5f34512c4410e8", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -10,7 +10,8 @@\n \n use attr;\n use ast;\n-use codemap::{spanned, Spanned, mk_sp, Span};\n+use syntax_pos::{mk_sp, Span};\n+use codemap::{spanned, Spanned};\n use parse::common::SeqSep;\n use parse::PResult;\n use parse::token;"}, {"sha": "5eb5605ea71a0e4f93a575b364216fb2adddc09a", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -11,7 +11,8 @@\n pub use self::CommentStyle::*;\n \n use ast;\n-use codemap::{BytePos, CharPos, CodeMap, Pos};\n+use codemap::CodeMap;\n+use syntax_pos::{BytePos, CharPos, Pos};\n use errors;\n use parse::lexer::is_block_doc_comment;\n use parse::lexer::{StringReader, TokenAndSpan};"}, {"sha": "809f4daa3616d7a481dace362d62e59499668db0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use ast;\n-use codemap::{BytePos, CharPos, CodeMap, Pos, Span};\n-use codemap;\n+use syntax_pos::{self, BytePos, CharPos, Pos, Span};\n+use codemap::CodeMap;\n use errors::{FatalError, Handler, DiagnosticBuilder};\n use ext::tt::transcribe::tt_next_token;\n use parse::token::{self, keywords, str_to_ident};\n@@ -84,7 +84,7 @@ pub struct StringReader<'a> {\n     pub col: CharPos,\n     /// The last character to be read\n     pub curr: Option<char>,\n-    pub filemap: Rc<codemap::FileMap>,\n+    pub filemap: Rc<syntax_pos::FileMap>,\n     // cached:\n     pub peek_tok: token::Token,\n     pub peek_span: Span,\n@@ -162,7 +162,7 @@ impl<'a> Reader for TtReader<'a> {\n impl<'a> StringReader<'a> {\n     /// For comments.rs, which hackily pokes into pos and curr\n     pub fn new_raw<'b>(span_diagnostic: &'b Handler,\n-                       filemap: Rc<codemap::FileMap>)\n+                       filemap: Rc<syntax_pos::FileMap>)\n                        -> StringReader<'b> {\n         if filemap.src.is_none() {\n             span_diagnostic.bug(&format!(\"Cannot lex filemap \\\n@@ -181,7 +181,7 @@ impl<'a> StringReader<'a> {\n             filemap: filemap,\n             // dummy values; not read\n             peek_tok: token::Eof,\n-            peek_span: codemap::DUMMY_SP,\n+            peek_span: syntax_pos::DUMMY_SP,\n             source_text: source_text,\n             fatal_errs: Vec::new(),\n         };\n@@ -190,7 +190,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     pub fn new<'b>(span_diagnostic: &'b Handler,\n-                   filemap: Rc<codemap::FileMap>)\n+                   filemap: Rc<syntax_pos::FileMap>)\n                    -> StringReader<'b> {\n         let mut sr = StringReader::new_raw(span_diagnostic, filemap);\n         if let Err(_) = sr.advance_token() {\n@@ -217,12 +217,12 @@ impl<'a> StringReader<'a> {\n \n     /// Report a fatal error spanning [`from_pos`, `to_pos`).\n     fn fatal_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) -> FatalError {\n-        self.fatal_span(codemap::mk_sp(from_pos, to_pos), m)\n+        self.fatal_span(syntax_pos::mk_sp(from_pos, to_pos), m)\n     }\n \n     /// Report a lexical error spanning [`from_pos`, `to_pos`).\n     fn err_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) {\n-        self.err_span(codemap::mk_sp(from_pos, to_pos), m)\n+        self.err_span(syntax_pos::mk_sp(from_pos, to_pos), m)\n     }\n \n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending an\n@@ -246,7 +246,7 @@ impl<'a> StringReader<'a> {\n         for c in c.escape_default() {\n             m.push(c)\n         }\n-        self.span_diagnostic.struct_span_fatal(codemap::mk_sp(from_pos, to_pos), &m[..])\n+        self.span_diagnostic.struct_span_fatal(syntax_pos::mk_sp(from_pos, to_pos), &m[..])\n     }\n \n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending an\n@@ -270,7 +270,7 @@ impl<'a> StringReader<'a> {\n         for c in c.escape_default() {\n             m.push(c)\n         }\n-        self.span_diagnostic.struct_span_err(codemap::mk_sp(from_pos, to_pos), &m[..])\n+        self.span_diagnostic.struct_span_err(syntax_pos::mk_sp(from_pos, to_pos), &m[..])\n     }\n \n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending the\n@@ -294,11 +294,11 @@ impl<'a> StringReader<'a> {\n             None => {\n                 if self.is_eof() {\n                     self.peek_tok = token::Eof;\n-                    self.peek_span = codemap::mk_sp(self.filemap.end_pos, self.filemap.end_pos);\n+                    self.peek_span = syntax_pos::mk_sp(self.filemap.end_pos, self.filemap.end_pos);\n                 } else {\n                     let start_bytepos = self.last_pos;\n                     self.peek_tok = self.next_token_inner()?;\n-                    self.peek_span = codemap::mk_sp(start_bytepos, self.last_pos);\n+                    self.peek_span = syntax_pos::mk_sp(start_bytepos, self.last_pos);\n                 };\n             }\n         }\n@@ -473,7 +473,7 @@ impl<'a> StringReader<'a> {\n         match self.curr {\n             Some(c) => {\n                 if c.is_whitespace() {\n-                    self.span_diagnostic.span_err(codemap::mk_sp(self.last_pos, self.last_pos),\n+                    self.span_diagnostic.span_err(syntax_pos::mk_sp(self.last_pos, self.last_pos),\n                                                   \"called consume_any_line_comment, but there \\\n                                                    was whitespace\");\n                 }\n@@ -524,13 +524,13 @@ impl<'a> StringReader<'a> {\n \n                             Some(TokenAndSpan {\n                                 tok: tok,\n-                                sp: codemap::mk_sp(start_bpos, self.last_pos),\n+                                sp: syntax_pos::mk_sp(start_bpos, self.last_pos),\n                             })\n                         })\n                     } else {\n                         Some(TokenAndSpan {\n                             tok: token::Comment,\n-                            sp: codemap::mk_sp(start_bpos, self.last_pos),\n+                            sp: syntax_pos::mk_sp(start_bpos, self.last_pos),\n                         })\n                     };\n                 }\n@@ -563,7 +563,7 @@ impl<'a> StringReader<'a> {\n                     }\n                     return Some(TokenAndSpan {\n                         tok: token::Shebang(self.name_from(start)),\n-                        sp: codemap::mk_sp(start, self.last_pos),\n+                        sp: syntax_pos::mk_sp(start, self.last_pos),\n                     });\n                 }\n             }\n@@ -591,7 +591,7 @@ impl<'a> StringReader<'a> {\n                 }\n                 let c = Some(TokenAndSpan {\n                     tok: token::Whitespace,\n-                    sp: codemap::mk_sp(start_bpos, self.last_pos),\n+                    sp: syntax_pos::mk_sp(start_bpos, self.last_pos),\n                 });\n                 debug!(\"scanning whitespace: {:?}\", c);\n                 c\n@@ -653,7 +653,7 @@ impl<'a> StringReader<'a> {\n \n             Some(TokenAndSpan {\n                 tok: tok,\n-                sp: codemap::mk_sp(start_bpos, self.last_pos),\n+                sp: syntax_pos::mk_sp(start_bpos, self.last_pos),\n             })\n         })\n     }\n@@ -850,7 +850,7 @@ impl<'a> StringReader<'a> {\n                                 let valid = if self.curr_is('{') {\n                                     self.scan_unicode_escape(delim) && !ascii_only\n                                 } else {\n-                                    let span = codemap::mk_sp(start, self.last_pos);\n+                                    let span = syntax_pos::mk_sp(start, self.last_pos);\n                                     self.span_diagnostic\n                                         .struct_span_err(span, \"incorrect unicode escape sequence\")\n                                         .span_help(span,\n@@ -888,13 +888,13 @@ impl<'a> StringReader<'a> {\n                                                                         },\n                                                                         c);\n                                 if e == '\\r' {\n-                                    err.span_help(codemap::mk_sp(escaped_pos, last_pos),\n+                                    err.span_help(syntax_pos::mk_sp(escaped_pos, last_pos),\n                                                   \"this is an isolated carriage return; consider \\\n                                                    checking your editor and version control \\\n                                                    settings\");\n                                 }\n                                 if (e == '{' || e == '}') && !ascii_only {\n-                                    err.span_help(codemap::mk_sp(escaped_pos, last_pos),\n+                                    err.span_help(syntax_pos::mk_sp(escaped_pos, last_pos),\n                                                   \"if used in a formatting string, curly braces \\\n                                                    are escaped with `{{` and `}}`\");\n                                 }\n@@ -1677,7 +1677,8 @@ fn ident_continue(c: Option<char>) -> bool {\n mod tests {\n     use super::*;\n \n-    use codemap::{BytePos, CodeMap, Span, NO_EXPANSION};\n+    use syntax_pos::{BytePos, Span, NO_EXPANSION};\n+    use codemap::CodeMap;\n     use errors;\n     use parse::token;\n     use parse::token::str_to_ident;\n@@ -1686,7 +1687,10 @@ mod tests {\n \n     fn mk_sh(cm: Rc<CodeMap>) -> errors::Handler {\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-        let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()), None, cm);\n+        let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n+                                                None,\n+                                                cm,\n+                                                errors::snippet::FormatMode::EnvironmentSelected);\n         errors::Handler::with_emitter(true, false, Box::new(emitter))\n     }\n \n@@ -1889,7 +1893,7 @@ mod tests {\n         let mut lexer = setup(&cm, &sh, \"// test\\r\\n/// test\\r\\n\".to_string());\n         let comment = lexer.next_token();\n         assert_eq!(comment.tok, token::Comment);\n-        assert_eq!(comment.sp, ::codemap::mk_sp(BytePos(0), BytePos(7)));\n+        assert_eq!(comment.sp, ::syntax_pos::mk_sp(BytePos(0), BytePos(7)));\n         assert_eq!(lexer.next_token().tok, token::Whitespace);\n         assert_eq!(lexer.next_token().tok,\n                    token::DocComment(token::intern(\"/// test\")));"}, {"sha": "dab97d1d5a6ffc8872ec6733758086ea49e468e2", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -11,7 +11,7 @@\n // Characters and their corresponding confusables were collected from\n // http://www.unicode.org/Public/security/revision-06/confusables.txt\n \n-use codemap::mk_sp as make_span;\n+use syntax_pos::mk_sp as make_span;\n use errors::DiagnosticBuilder;\n use super::StringReader;\n "}, {"sha": "0796f298be1a13a3e056d90d8ba021b954622c6a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -11,7 +11,8 @@\n //! The main parser interface\n \n use ast;\n-use codemap::{self, Span, CodeMap, FileMap};\n+use codemap::CodeMap;\n+use syntax_pos::{self, Span, FileMap};\n use errors::{Handler, ColorConfig, DiagnosticBuilder};\n use parse::parser::Parser;\n use parse::token::InternedString;\n@@ -211,8 +212,8 @@ pub fn filemap_to_parser<'a>(sess: &'a ParseSess,\n     let end_pos = filemap.end_pos;\n     let mut parser = tts_to_parser(sess, filemap_to_tts(sess, filemap), cfg);\n \n-    if parser.token == token::Eof && parser.span == codemap::DUMMY_SP {\n-        parser.span = codemap::mk_sp(end_pos, end_pos);\n+    if parser.token == token::Eof && parser.span == syntax_pos::DUMMY_SP {\n+        parser.span = syntax_pos::mk_sp(end_pos, end_pos);\n     }\n \n     parser\n@@ -661,7 +662,8 @@ pub fn integer_lit(s: &str,\n mod tests {\n     use super::*;\n     use std::rc::Rc;\n-    use codemap::{Span, BytePos, Pos, Spanned, NO_EXPANSION};\n+    use syntax_pos::{Span, BytePos, Pos, NO_EXPANSION};\n+    use codemap::Spanned;\n     use ast::{self, TokenTree, PatKind};\n     use abi::Abi;\n     use attr::{first_attr_value_str_by_name, AttrMetaMethods};\n@@ -673,7 +675,7 @@ mod tests {\n     use util::parser_testing::{string_to_tts, string_to_parser};\n     use util::parser_testing::{string_to_expr, string_to_item, string_to_stmt};\n \n-    // produce a codemap::span\n+    // produce a syntax_pos::span\n     fn sp(a: u32, b: u32) -> Span {\n         Span {lo: BytePos(a), hi: BytePos(b), expn_id: NO_EXPANSION}\n     }"}, {"sha": "a1d7ddcdf4bdf5fbe19a2af879c034ad65bdf051", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,7 +13,7 @@\n //!\n //! Obsolete syntax that becomes too hard to parse can be removed.\n \n-use codemap::Span;\n+use syntax_pos::Span;\n use parse::parser;\n \n /// The specific types of unsupported syntax"}, {"sha": "99eddce36451885175700c0fee64f430f438cef2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -40,7 +40,8 @@ use ast::{Visibility, WhereClause};\n use attr::{ThinAttributes, ThinAttributesExt, AttributesExt};\n use ast::{BinOpKind, UnOp};\n use ast;\n-use codemap::{self, Span, BytePos, Spanned, spanned, mk_sp, CodeMap};\n+use codemap::{self, CodeMap, Spanned, spanned};\n+use syntax_pos::{self, Span, BytePos, mk_sp};\n use errors::{self, DiagnosticBuilder};\n use ext::tt::macro_parser;\n use parse;\n@@ -344,7 +345,7 @@ impl<'a> Parser<'a> {\n     {\n         let tok0 = rdr.real_token();\n         let span = tok0.sp;\n-        let filename = if span != codemap::DUMMY_SP {\n+        let filename = if span != syntax_pos::DUMMY_SP {\n             Some(sess.codemap().span_to_filename(span))\n         } else { None };\n         let placeholder = TokenAndSpan {\n@@ -3525,7 +3526,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse the fields of a struct-like pattern\n-    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<codemap::Spanned<ast::FieldPat>> , bool)> {\n+    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<codemap::Spanned<ast::FieldPat>>, bool)> {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut first = true;\n@@ -3595,9 +3596,9 @@ impl<'a> Parser<'a> {\n             };\n \n             fields.push(codemap::Spanned { span: mk_sp(lo, hi),\n-                                           node: ast::FieldPat { ident: fieldname,\n-                                                                 pat: subpat,\n-                                                                 is_shorthand: is_shorthand }});\n+                                              node: ast::FieldPat { ident: fieldname,\n+                                                                    pat: subpat,\n+                                                                    is_shorthand: is_shorthand }});\n         }\n         return Ok((fields, etc));\n     }\n@@ -3688,7 +3689,7 @@ impl<'a> Parser<'a> {\n                             SeqSep::none(), |p| p.parse_token_tree())?;\n                         let mac = Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT };\n                         pat = PatKind::Mac(codemap::Spanned {node: mac,\n-                                                       span: mk_sp(lo, self.last_span.hi)});\n+                                                               span: mk_sp(lo, self.last_span.hi)});\n                     } else {\n                         // Parse ident @ pat\n                         // This can give false positives and parse nullary enums,\n@@ -4935,8 +4936,8 @@ impl<'a> Parser<'a> {\n                                             |p| p.parse_token_tree())?;\n             let m_ = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n             let m: ast::Mac = codemap::Spanned { node: m_,\n-                                                span: mk_sp(lo,\n-                                                            self.last_span.hi) };\n+                                                    span: mk_sp(lo,\n+                                                                self.last_span.hi) };\n             if delim != token::Brace {\n                 self.expect(&token::Semi)?\n             }\n@@ -5274,7 +5275,7 @@ impl<'a> Parser<'a> {\n             return Err(self.fatal(&format!(\"expected item, found `{}`\", token_str)));\n         }\n \n-        let hi = if self.span == codemap::DUMMY_SP {\n+        let hi = if self.span == syntax_pos::DUMMY_SP {\n             inner_lo\n         } else {\n             self.last_span.hi\n@@ -6020,8 +6021,8 @@ impl<'a> Parser<'a> {\n             // single-variant-enum... :\n             let m = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n             let m: ast::Mac = codemap::Spanned { node: m,\n-                                             span: mk_sp(mac_lo,\n-                                                         self.last_span.hi) };\n+                                                 span: mk_sp(mac_lo,\n+                                                             self.last_span.hi) };\n \n             if delim != token::Brace {\n                 if !self.eat(&token::Semi) {"}, {"sha": "9fc5e1089c0ada40702eb9f5854047a810f8c757", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,7 +18,8 @@ use attr::ThinAttributesExt;\n use util::parser::AssocOp;\n use attr;\n use attr::{AttrMetaMethods, AttributeMethods};\n-use codemap::{self, CodeMap, BytePos};\n+use codemap::{self, CodeMap};\n+use syntax_pos::{self, BytePos};\n use errors;\n use parse::token::{self, keywords, BinOpToken, Token, InternedString};\n use parse::lexer::comments;\n@@ -842,11 +843,11 @@ impl<'a> State<'a> {\n         self.end() // close the head-box\n     }\n \n-    pub fn bclose_(&mut self, span: codemap::Span,\n+    pub fn bclose_(&mut self, span: syntax_pos::Span,\n                    indented: usize) -> io::Result<()> {\n         self.bclose_maybe_open(span, indented, true)\n     }\n-    pub fn bclose_maybe_open(&mut self, span: codemap::Span,\n+    pub fn bclose_maybe_open(&mut self, span: syntax_pos::Span,\n                              indented: usize, close_box: bool) -> io::Result<()> {\n         try!(self.maybe_print_comment(span.hi));\n         try!(self.break_offset_if_not_bol(1, -(indented as isize)));\n@@ -856,7 +857,7 @@ impl<'a> State<'a> {\n         }\n         Ok(())\n     }\n-    pub fn bclose(&mut self, span: codemap::Span) -> io::Result<()> {\n+    pub fn bclose(&mut self, span: syntax_pos::Span) -> io::Result<()> {\n         self.bclose_(span, INDENT_UNIT)\n     }\n \n@@ -900,7 +901,7 @@ impl<'a> State<'a> {\n                                   mut op: F,\n                                   mut get_span: G) -> io::Result<()> where\n         F: FnMut(&mut State, &T) -> io::Result<()>,\n-        G: FnMut(&T) -> codemap::Span,\n+        G: FnMut(&T) -> syntax_pos::Span,\n     {\n         try!(self.rbox(0, b));\n         let len = elts.len();\n@@ -1352,7 +1353,7 @@ impl<'a> State<'a> {\n \n     pub fn print_enum_def(&mut self, enum_definition: &ast::EnumDef,\n                           generics: &ast::Generics, ident: ast::Ident,\n-                          span: codemap::Span,\n+                          span: syntax_pos::Span,\n                           visibility: &ast::Visibility) -> io::Result<()> {\n         try!(self.head(&visibility_qualified(visibility, \"enum\")));\n         try!(self.print_ident(ident));\n@@ -1364,7 +1365,7 @@ impl<'a> State<'a> {\n \n     pub fn print_variants(&mut self,\n                           variants: &[ast::Variant],\n-                          span: codemap::Span) -> io::Result<()> {\n+                          span: syntax_pos::Span) -> io::Result<()> {\n         try!(self.bopen());\n         for v in variants {\n             try!(self.space_if_not_bol());\n@@ -1393,7 +1394,7 @@ impl<'a> State<'a> {\n                         struct_def: &ast::VariantData,\n                         generics: &ast::Generics,\n                         ident: ast::Ident,\n-                        span: codemap::Span,\n+                        span: syntax_pos::Span,\n                         print_finalizer: bool) -> io::Result<()> {\n         try!(self.print_ident(ident));\n         try!(self.print_generics(generics));\n@@ -3010,7 +3011,7 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n-    pub fn maybe_print_trailing_comment(&mut self, span: codemap::Span,\n+    pub fn maybe_print_trailing_comment(&mut self, span: syntax_pos::Span,\n                                         next_pos: Option<BytePos>)\n         -> io::Result<()> {\n         let cm = match self.cm {\n@@ -3115,14 +3116,15 @@ mod tests {\n     use ast;\n     use codemap;\n     use parse::token;\n+    use syntax_pos;\n \n     #[test]\n     fn test_fun_to_string() {\n         let abba_ident = token::str_to_ident(\"abba\");\n \n         let decl = ast::FnDecl {\n             inputs: Vec::new(),\n-            output: ast::FunctionRetTy::Default(codemap::DUMMY_SP),\n+            output: ast::FunctionRetTy::Default(syntax_pos::DUMMY_SP),\n             variadic: false\n         };\n         let generics = ast::Generics::default();\n@@ -3136,7 +3138,7 @@ mod tests {\n     fn test_variant_to_string() {\n         let ident = token::str_to_ident(\"principal_skinner\");\n \n-        let var = codemap::respan(codemap::DUMMY_SP, ast::Variant_ {\n+        let var = codemap::respan(syntax_pos::DUMMY_SP, ast::Variant_ {\n             name: ident,\n             attrs: Vec::new(),\n             // making this up as I go.... ?"}, {"sha": "d1454ab06cbc8179bbb87b294777d68e2ef6f46f", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -10,8 +10,8 @@\n \n use ast;\n use attr;\n-use codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n-use codemap;\n+use syntax_pos::{DUMMY_SP, Span};\n+use codemap::{self, ExpnInfo, NameAndSpan, MacroAttribute};\n use parse::token::{intern, InternedString, keywords};\n use parse::{token, ParseSess};\n use ptr::P;"}, {"sha": "cc3fff09617f48a26382b9a93526fe0cfe7d6a7c", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,6 +12,7 @@\n \n #![allow(dead_code)]\n #![allow(unused_imports)]\n+\n use self::HasTestSignature::*;\n \n use std::iter;\n@@ -20,9 +21,12 @@ use std::mem;\n use std::vec;\n use attr::AttrMetaMethods;\n use attr;\n-use codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n-use codemap;\n+use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n+use std::rc::Rc;\n+\n+use codemap::{self, CodeMap, ExpnInfo, NameAndSpan, MacroAttribute};\n use errors;\n+use errors::snippet::{RenderedLine, SnippetData};\n use config;\n use entry::{self, EntryPointType};\n use ext::base::{ExtCtxt, DummyMacroLoader};"}, {"sha": "ad6145f86183a82c46b00a925da03ad29d07fd24", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,7 +12,7 @@\n \n use visit::*;\n use ast::*;\n-use codemap::Span;\n+use syntax_pos::Span;\n \n pub struct NodeCounter {\n     pub count: usize,"}, {"sha": "113c0d0293b994d7adb5734afb9794272f02d322", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -26,7 +26,8 @@\n use abi::Abi;\n use ast::*;\n use attr::ThinAttributesExt;\n-use codemap::{Span, Spanned};\n+use syntax_pos::Span;\n+use codemap::Spanned;\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {"}, {"sha": "040c6c8ebff26db4dc39724b2117cfa0cae9675b", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,3 +12,5 @@ crate-type = [\"dylib\"]\n fmt_macros = { path = \"../libfmt_macros\" }\n log = { path = \"../liblog\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n\\ No newline at end of file"}, {"sha": "a8f5171f800e854dfa522cbe1395a00bafcb4fb9", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,14 +15,14 @@ use self::State::*;\n \n use syntax::ast;\n use syntax::codemap;\n-use syntax::codemap::Span;\n use syntax::ext::base;\n use syntax::ext::base::*;\n use syntax::feature_gate;\n use syntax::parse::token::intern;\n use syntax::parse::{self, token};\n use syntax::ptr::P;\n use syntax::ast::AsmDialect;\n+use syntax_pos::Span;\n \n enum State {\n     Asm,"}, {"sha": "201c9f38978f202a25c40c06fbecd6c6ba3d1995", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,12 +13,12 @@\n /// current compilation environment.\n \n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::attr;\n use syntax::parse::token;\n+use syntax_pos::Span;\n \n pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n                        sp: Span,"}, {"sha": "c754cb14b671fdfbd8f01d0252a4509fe69a82be", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n use syntax::ast;\n-use syntax::codemap;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n+use syntax_pos;\n \n use std::string::String;\n \n pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n-                         sp: codemap::Span,\n+                         sp: syntax_pos::Span,\n                          tts: &[ast::TokenTree])\n                          -> Box<base::MacResult+'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {"}, {"sha": "5a98925ba82348bbcbeb76f56e7c21b54541e2dc", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n use syntax::ast::{self, TokenTree};\n-use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::parse::token::str_to_ident;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[TokenTree])\n                               -> Box<base::MacResult+'cx> {"}, {"sha": "36818e000b55bf0d3f94fdcd73325f77122ac202", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,8 +12,8 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::MetaItem;\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax_pos::Span;\n \n pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n                                     span: Span,"}, {"sha": "007140028759139c7894588f0b51905862556a47", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,11 +13,11 @@ use deriving::generic::ty::*;\n \n use syntax::ast::{Expr, ItemKind, Generics, MetaItem, VariantData};\n use syntax::attr;\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n #[derive(PartialEq)]\n enum Mode { Deep, Shallow }"}, {"sha": "4258e152088e5c0a3e6c28cf2b049f1707c1b576", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,11 +12,11 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{MetaItem, Expr};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,"}, {"sha": "cbd7ac0eadad039ae287dc25781ed596f0edee3a", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,11 +12,11 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{MetaItem, Expr, self};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,"}, {"sha": "b5a8167fb555093be14b8940764d6c4d33f2bd43", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,11 +12,11 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{MetaItem, Expr, BinOpKind};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   span: Span,"}, {"sha": "26c14ae934f72796e58c20b6727d04603ff50bdc", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,11 +14,11 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{MetaItem, Expr, BinOpKind, self};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n                                    span: Span,"}, {"sha": "c26a7784084a719bdbb271e998397ee6b41c4c47", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,11 +13,12 @@ use deriving::generic::ty::*;\n \n use syntax::ast;\n use syntax::ast::{MetaItem, Expr};\n-use syntax::codemap::{Span, respan, DUMMY_SP};\n+use syntax::codemap::respan;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_pos::{Span, DUMMY_SP};\n \n pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "488402c48f70a985bde3775011b26719ec601ee2", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,12 +16,12 @@ use deriving::generic::ty::*;\n \n use syntax::ast;\n use syntax::ast::{MetaItem, Expr, Mutability};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n                                        span: Span,"}, {"sha": "2711ccba81914ec7e05a5962455e9e4492e3bdaf", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -12,11 +12,11 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{MetaItem, Expr};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                                span: Span,"}, {"sha": "07a52105debe6553ff9bacc8397f578c9b57acf2", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -93,11 +93,11 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{MetaItem, Expr, ExprKind, Mutability};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt,Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n                                        span: Span,"}, {"sha": "b5a9b004210374659f030e8a4aeb43b40261155d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -197,12 +197,12 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n-use syntax::codemap::{self, respan, DUMMY_SP};\n-use syntax::codemap::Span;\n-use syntax::errors::Handler;\n+use syntax::codemap::{self, respan};\n use syntax::util::move_map::MoveMap;\n use syntax::parse::token::{keywords, InternedString};\n use syntax::ptr::P;\n+use syntax_pos::{Span, DUMMY_SP};\n+use errors::Handler;\n \n use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n "}, {"sha": "626fbaada5cbf1e6745f2c246d1aa8a12d984e39", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,8 +18,9 @@ use syntax::ast;\n use syntax::ast::{Expr, Generics, Ident, SelfKind};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n-use syntax::codemap::{Span,respan};\n+use syntax::codemap::respan;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n /// The types of pointers\n #[derive(Clone, Eq, PartialEq)]"}, {"sha": "245d3f0efa30325bf07145a8a93e360a294c3fff", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,10 +13,10 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{MetaItem, Expr, Mutability};\n-use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "f9e0d2c2eaeba45d8209ab1e7cee0042cb10776d", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,9 +16,10 @@ use syntax::ext::base::{ExtCtxt, SyntaxEnv, Annotatable};\n use syntax::ext::base::{MultiDecorator, MultiItemDecorator, MultiModifier};\n use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n-use syntax::codemap::{self, Span};\n+use syntax::codemap;\n use syntax::parse::token::{intern, intern_and_get_ident};\n use syntax::ptr::P;\n+use syntax_pos::Span;\n \n macro_rules! pathvec {\n     ($($x:ident)::+) => ("}, {"sha": "de18153d962c4b85adef6603439cba3211e694e1", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,11 +15,11 @@\n  */\n \n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n+use syntax_pos::Span;\n \n use std::env;\n "}, {"sha": "f928e577d311a4c3dfaabc9f7d7a5f285b7b73d8", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,13 +14,14 @@ use self::Position::*;\n use fmt_macros as parse;\n \n use syntax::ast;\n-use syntax::codemap::{Span, respan, DUMMY_SP};\n+use syntax::codemap::respan;\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::fold::Folder;\n use syntax::parse::token::{self, keywords};\n use syntax::ptr::P;\n+use syntax_pos::{Span, DUMMY_SP};\n \n use std::collections::HashMap;\n "}, {"sha": "17b200bac58c5440cead5e7f212a1f0f580fcc25", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -26,6 +26,8 @@ extern crate fmt_macros;\n #[macro_use] extern crate log;\n #[macro_use]\n extern crate syntax;\n+extern crate syntax_pos;\n+extern crate rustc_errors as errors;\n \n use syntax::ext::base::{MacroExpanderFn, NormalTT};\n use syntax::ext::base::{SyntaxEnv, SyntaxExtension};"}, {"sha": "a84dc9d619fe92a3e58bc86f659cd8bb353a5b44", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n use syntax::ast;\n-use syntax::codemap;\n use syntax::ext::base;\n use syntax::feature_gate;\n use syntax::print;\n+use syntax_pos;\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n-                              sp: codemap::Span,\n+                              sp: syntax_pos::Span,\n                               tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n     if !cx.ecfg.enable_log_syntax() {"}, {"sha": "13892d53092d42aa45bd5146079559658d59c283", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n use syntax::ast::TokenTree;\n-use syntax::codemap::Span;\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::base;\n use syntax::feature_gate;\n use syntax::parse::token::keywords;\n-\n+use syntax_pos::Span;\n \n pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            sp: Span,"}, {"sha": "760aaa8a9578419b809032fc86a1e3f6396cfb4c", "filename": "src/libsyntax_pos/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"syntax_pos\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"syntax_pos\"\n+path = \"lib.rs\"\n+crate-type = [\"dylib\"]\n+\n+[dependencies]\n+serialize = { path = \"../libserialize\" }"}, {"sha": "39bb5956312bce7b752388892d7e33c00dea7625", "filename": "src/libsyntax_pos/lib.rs", "status": "added", "additions": 667, "deletions": 0, "changes": 667, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -0,0 +1,667 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The source positions and related helper functions\n+//!\n+//! # Note\n+//!\n+//! This API is completely unstable and subject to change.\n+\n+#![crate_name = \"syntax_pos\"]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![cfg_attr(not(stage0), deny(warnings))]\n+\n+#![feature(custom_attribute)]\n+#![allow(unused_attributes)]\n+#![feature(rustc_private)]\n+#![feature(staged_api)]\n+#![feature(question_mark)]\n+\n+use std::cell::{Cell, RefCell};\n+use std::ops::{Add, Sub};\n+use std::rc::Rc;\n+use std::cmp;\n+\n+use std::fmt;\n+\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n+extern crate serialize;\n+extern crate serialize as rustc_serialize; // used by deriving\n+\n+pub type FileName = String;\n+\n+/// Spans represent a region of code, used for error reporting. Positions in spans\n+/// are *absolute* positions from the beginning of the codemap, not positions\n+/// relative to FileMaps. Methods on the CodeMap can be used to relate spans back\n+/// to the original source.\n+/// You must be careful if the span crosses more than one file - you will not be\n+/// able to use many of the functions on spans in codemap and you cannot assume\n+/// that the length of the span = hi - lo; there may be space in the BytePos\n+/// range between files.\n+#[derive(Clone, Copy, Hash, PartialEq, Eq)]\n+pub struct Span {\n+    pub lo: BytePos,\n+    pub hi: BytePos,\n+    /// Information about where the macro came from, if this piece of\n+    /// code was created by a macro expansion.\n+    pub expn_id: ExpnId\n+}\n+\n+/// A collection of spans. Spans have two orthogonal attributes:\n+///\n+/// - they can be *primary spans*. In this case they are the locus of\n+///   the error, and would be rendered with `^^^`.\n+/// - they can have a *label*. In this case, the label is written next\n+///   to the mark in the snippet when we render.\n+#[derive(Clone)]\n+pub struct MultiSpan {\n+    primary_spans: Vec<Span>,\n+    span_labels: Vec<(Span, String)>,\n+}\n+\n+impl Span {\n+    /// Returns a new span representing just the end-point of this span\n+    pub fn end_point(self) -> Span {\n+        let lo = cmp::max(self.hi.0 - 1, self.lo.0);\n+        Span { lo: BytePos(lo), hi: self.hi, expn_id: self.expn_id}\n+    }\n+\n+    /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n+    pub fn substitute_dummy(self, other: Span) -> Span {\n+        if self.source_equal(&DUMMY_SP) { other } else { self }\n+    }\n+\n+    pub fn contains(self, other: Span) -> bool {\n+        self.lo <= other.lo && other.hi <= self.hi\n+    }\n+\n+    /// Return true if the spans are equal with regards to the source text.\n+    ///\n+    /// Use this instead of `==` when either span could be generated code,\n+    /// and you only care that they point to the same bytes of source text.\n+    pub fn source_equal(&self, other: &Span) -> bool {\n+        self.lo == other.lo && self.hi == other.hi\n+    }\n+\n+    /// Returns `Some(span)`, a union of `self` and `other`, on overlap.\n+    pub fn merge(self, other: Span) -> Option<Span> {\n+        if self.expn_id != other.expn_id {\n+            return None;\n+        }\n+\n+        if (self.lo <= other.lo && self.hi > other.lo) ||\n+           (self.lo >= other.lo && self.lo < other.hi) {\n+            Some(Span {\n+                lo: cmp::min(self.lo, other.lo),\n+                hi: cmp::max(self.hi, other.hi),\n+                expn_id: self.expn_id,\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns `Some(span)`, where the start is trimmed by the end of `other`\n+    pub fn trim_start(self, other: Span) -> Option<Span> {\n+        if self.hi > other.hi {\n+            Some(Span { lo: cmp::max(self.lo, other.hi), .. self })\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct SpanLabel {\n+    /// The span we are going to include in the final snippet.\n+    pub span: Span,\n+\n+    /// Is this a primary span? This is the \"locus\" of the message,\n+    /// and is indicated with a `^^^^` underline, versus `----`.\n+    pub is_primary: bool,\n+\n+    /// What label should we attach to this span (if any)?\n+    pub label: Option<String>,\n+}\n+\n+impl Encodable for Span {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_struct(\"Span\", 2, |s| {\n+            s.emit_struct_field(\"lo\", 0, |s| {\n+                self.lo.encode(s)\n+            })?;\n+\n+            s.emit_struct_field(\"hi\", 1, |s| {\n+                self.hi.encode(s)\n+            })\n+        })\n+    }\n+}\n+\n+impl Decodable for Span {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Span, D::Error> {\n+        d.read_struct(\"Span\", 2, |d| {\n+            let lo = d.read_struct_field(\"lo\", 0, |d| {\n+                BytePos::decode(d)\n+            })?;\n+\n+            let hi = d.read_struct_field(\"hi\", 1, |d| {\n+                BytePos::decode(d)\n+            })?;\n+\n+            Ok(mk_sp(lo, hi))\n+        })\n+    }\n+}\n+\n+fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n+    write!(f, \"Span {{ lo: {:?}, hi: {:?}, expn_id: {:?} }}\",\n+           span.lo, span.hi, span.expn_id)\n+}\n+\n+impl fmt::Debug for Span {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        SPAN_DEBUG.with(|span_debug| span_debug.get()(*self, f))\n+    }\n+}\n+\n+pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n+\n+// Generic span to be used for code originating from the command line\n+pub const COMMAND_LINE_SP: Span = Span { lo: BytePos(0),\n+                                         hi: BytePos(0),\n+                                         expn_id: COMMAND_LINE_EXPN };\n+\n+impl MultiSpan {\n+    pub fn new() -> MultiSpan {\n+        MultiSpan {\n+            primary_spans: vec![],\n+            span_labels: vec![]\n+        }\n+    }\n+\n+    pub fn from_span(primary_span: Span) -> MultiSpan {\n+        MultiSpan {\n+            primary_spans: vec![primary_span],\n+            span_labels: vec![]\n+        }\n+    }\n+\n+    pub fn from_spans(vec: Vec<Span>) -> MultiSpan {\n+        MultiSpan {\n+            primary_spans: vec,\n+            span_labels: vec![]\n+        }\n+    }\n+\n+    pub fn push_span_label(&mut self, span: Span, label: String) {\n+        self.span_labels.push((span, label));\n+    }\n+\n+    /// Selects the first primary span (if any)\n+    pub fn primary_span(&self) -> Option<Span> {\n+        self.primary_spans.first().cloned()\n+    }\n+\n+    /// Returns all primary spans.\n+    pub fn primary_spans(&self) -> &[Span] {\n+        &self.primary_spans\n+    }\n+\n+    /// Returns the strings to highlight. We always ensure that there\n+    /// is an entry for each of the primary spans -- for each primary\n+    /// span P, if there is at least one label with span P, we return\n+    /// those labels (marked as primary). But otherwise we return\n+    /// `SpanLabel` instances with empty labels.\n+    pub fn span_labels(&self) -> Vec<SpanLabel> {\n+        let is_primary = |span| self.primary_spans.contains(&span);\n+        let mut span_labels = vec![];\n+\n+        for &(span, ref label) in &self.span_labels {\n+            span_labels.push(SpanLabel {\n+                span: span,\n+                is_primary: is_primary(span),\n+                label: Some(label.clone())\n+            });\n+        }\n+\n+        for &span in &self.primary_spans {\n+            if !span_labels.iter().any(|sl| sl.span == span) {\n+                span_labels.push(SpanLabel {\n+                    span: span,\n+                    is_primary: true,\n+                    label: None\n+                });\n+            }\n+        }\n+\n+        span_labels\n+    }\n+}\n+\n+impl From<Span> for MultiSpan {\n+    fn from(span: Span) -> MultiSpan {\n+        MultiSpan::from_span(span)\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Copy)]\n+pub struct ExpnId(pub u32);\n+\n+pub const NO_EXPANSION: ExpnId = ExpnId(!0);\n+// For code appearing from the command line\n+pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(!1);\n+\n+impl ExpnId {\n+    pub fn from_u32(id: u32) -> ExpnId {\n+        ExpnId(id)\n+    }\n+\n+    pub fn into_u32(self) -> u32 {\n+        self.0\n+    }\n+}\n+\n+/// Identifies an offset of a multi-byte character in a FileMap\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n+pub struct MultiByteChar {\n+    /// The absolute offset of the character in the CodeMap\n+    pub pos: BytePos,\n+    /// The number of bytes, >=2\n+    pub bytes: usize,\n+}\n+\n+/// A single source in the CodeMap.\n+pub struct FileMap {\n+    /// The name of the file that the source came from, source that doesn't\n+    /// originate from files has names between angle brackets by convention,\n+    /// e.g. `<anon>`\n+    pub name: FileName,\n+    /// The absolute path of the file that the source came from.\n+    pub abs_path: Option<FileName>,\n+    /// The complete source code\n+    pub src: Option<Rc<String>>,\n+    /// The start position of this source in the CodeMap\n+    pub start_pos: BytePos,\n+    /// The end position of this source in the CodeMap\n+    pub end_pos: BytePos,\n+    /// Locations of lines beginnings in the source code\n+    pub lines: RefCell<Vec<BytePos>>,\n+    /// Locations of multi-byte characters in the source code\n+    pub multibyte_chars: RefCell<Vec<MultiByteChar>>,\n+}\n+\n+impl Encodable for FileMap {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_struct(\"FileMap\", 6, |s| {\n+            s.emit_struct_field(\"name\", 0, |s| self.name.encode(s))?;\n+            s.emit_struct_field(\"abs_path\", 1, |s| self.abs_path.encode(s))?;\n+            s.emit_struct_field(\"start_pos\", 2, |s| self.start_pos.encode(s))?;\n+            s.emit_struct_field(\"end_pos\", 3, |s| self.end_pos.encode(s))?;\n+            s.emit_struct_field(\"lines\", 4, |s| {\n+                let lines = self.lines.borrow();\n+                // store the length\n+                s.emit_u32(lines.len() as u32)?;\n+\n+                if !lines.is_empty() {\n+                    // In order to preserve some space, we exploit the fact that\n+                    // the lines list is sorted and individual lines are\n+                    // probably not that long. Because of that we can store lines\n+                    // as a difference list, using as little space as possible\n+                    // for the differences.\n+                    let max_line_length = if lines.len() == 1 {\n+                        0\n+                    } else {\n+                        lines.windows(2)\n+                             .map(|w| w[1] - w[0])\n+                             .map(|bp| bp.to_usize())\n+                             .max()\n+                             .unwrap()\n+                    };\n+\n+                    let bytes_per_diff: u8 = match max_line_length {\n+                        0 ... 0xFF => 1,\n+                        0x100 ... 0xFFFF => 2,\n+                        _ => 4\n+                    };\n+\n+                    // Encode the number of bytes used per diff.\n+                    bytes_per_diff.encode(s)?;\n+\n+                    // Encode the first element.\n+                    lines[0].encode(s)?;\n+\n+                    let diff_iter = (&lines[..]).windows(2)\n+                                                .map(|w| (w[1] - w[0]));\n+\n+                    match bytes_per_diff {\n+                        1 => for diff in diff_iter { (diff.0 as u8).encode(s)? },\n+                        2 => for diff in diff_iter { (diff.0 as u16).encode(s)? },\n+                        4 => for diff in diff_iter { diff.0.encode(s)? },\n+                        _ => unreachable!()\n+                    }\n+                }\n+\n+                Ok(())\n+            })?;\n+            s.emit_struct_field(\"multibyte_chars\", 5, |s| {\n+                (*self.multibyte_chars.borrow()).encode(s)\n+            })\n+        })\n+    }\n+}\n+\n+impl Decodable for FileMap {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<FileMap, D::Error> {\n+\n+        d.read_struct(\"FileMap\", 6, |d| {\n+            let name: String = d.read_struct_field(\"name\", 0, |d| Decodable::decode(d))?;\n+            let abs_path: Option<String> =\n+                d.read_struct_field(\"abs_path\", 1, |d| Decodable::decode(d))?;\n+            let start_pos: BytePos = d.read_struct_field(\"start_pos\", 2, |d| Decodable::decode(d))?;\n+            let end_pos: BytePos = d.read_struct_field(\"end_pos\", 3, |d| Decodable::decode(d))?;\n+            let lines: Vec<BytePos> = d.read_struct_field(\"lines\", 4, |d| {\n+                let num_lines: u32 = Decodable::decode(d)?;\n+                let mut lines = Vec::with_capacity(num_lines as usize);\n+\n+                if num_lines > 0 {\n+                    // Read the number of bytes used per diff.\n+                    let bytes_per_diff: u8 = Decodable::decode(d)?;\n+\n+                    // Read the first element.\n+                    let mut line_start: BytePos = Decodable::decode(d)?;\n+                    lines.push(line_start);\n+\n+                    for _ in 1..num_lines {\n+                        let diff = match bytes_per_diff {\n+                            1 => d.read_u8()? as u32,\n+                            2 => d.read_u16()? as u32,\n+                            4 => d.read_u32()?,\n+                            _ => unreachable!()\n+                        };\n+\n+                        line_start = line_start + BytePos(diff);\n+\n+                        lines.push(line_start);\n+                    }\n+                }\n+\n+                Ok(lines)\n+            })?;\n+            let multibyte_chars: Vec<MultiByteChar> =\n+                d.read_struct_field(\"multibyte_chars\", 5, |d| Decodable::decode(d))?;\n+            Ok(FileMap {\n+                name: name,\n+                abs_path: abs_path,\n+                start_pos: start_pos,\n+                end_pos: end_pos,\n+                src: None,\n+                lines: RefCell::new(lines),\n+                multibyte_chars: RefCell::new(multibyte_chars)\n+            })\n+        })\n+    }\n+}\n+\n+impl fmt::Debug for FileMap {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"FileMap({})\", self.name)\n+    }\n+}\n+\n+impl FileMap {\n+    /// EFFECT: register a start-of-line offset in the\n+    /// table of line-beginnings.\n+    /// UNCHECKED INVARIANT: these offsets must be added in the right\n+    /// order and must be in the right places; there is shared knowledge\n+    /// about what ends a line between this file and parse.rs\n+    /// WARNING: pos param here is the offset relative to start of CodeMap,\n+    /// and CodeMap will append a newline when adding a filemap without a newline at the end,\n+    /// so the safe way to call this is with value calculated as\n+    /// filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.\n+    pub fn next_line(&self, pos: BytePos) {\n+        // the new charpos must be > the last one (or it's the first one).\n+        let mut lines = self.lines.borrow_mut();\n+        let line_len = lines.len();\n+        assert!(line_len == 0 || ((*lines)[line_len - 1] < pos));\n+        lines.push(pos);\n+    }\n+\n+    /// get a line from the list of pre-computed line-beginnings.\n+    /// line-number here is 0-based.\n+    pub fn get_line(&self, line_number: usize) -> Option<&str> {\n+        match self.src {\n+            Some(ref src) => {\n+                let lines = self.lines.borrow();\n+                lines.get(line_number).map(|&line| {\n+                    let begin: BytePos = line - self.start_pos;\n+                    let begin = begin.to_usize();\n+                    // We can't use `lines.get(line_number+1)` because we might\n+                    // be parsing when we call this function and thus the current\n+                    // line is the last one we have line info for.\n+                    let slice = &src[begin..];\n+                    match slice.find('\\n') {\n+                        Some(e) => &slice[..e],\n+                        None => slice\n+                    }\n+                })\n+            }\n+            None => None\n+        }\n+    }\n+\n+    pub fn record_multibyte_char(&self, pos: BytePos, bytes: usize) {\n+        assert!(bytes >=2 && bytes <= 4);\n+        let mbc = MultiByteChar {\n+            pos: pos,\n+            bytes: bytes,\n+        };\n+        self.multibyte_chars.borrow_mut().push(mbc);\n+    }\n+\n+    pub fn is_real_file(&self) -> bool {\n+        !(self.name.starts_with(\"<\") &&\n+          self.name.ends_with(\">\"))\n+    }\n+\n+    pub fn is_imported(&self) -> bool {\n+        self.src.is_none()\n+    }\n+\n+    pub fn count_lines(&self) -> usize {\n+        self.lines.borrow().len()\n+    }\n+}\n+\n+// _____________________________________________________________________________\n+// Pos, BytePos, CharPos\n+//\n+\n+pub trait Pos {\n+    fn from_usize(n: usize) -> Self;\n+    fn to_usize(&self) -> usize;\n+}\n+\n+/// A byte offset. Keep this small (currently 32-bits), as AST contains\n+/// a lot of them.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n+pub struct BytePos(pub u32);\n+\n+/// A character offset. Because of multibyte utf8 characters, a byte offset\n+/// is not equivalent to a character offset. The CodeMap will convert BytePos\n+/// values to CharPos values as necessary.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n+pub struct CharPos(pub usize);\n+\n+// FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n+// have been unsuccessful\n+\n+impl Pos for BytePos {\n+    fn from_usize(n: usize) -> BytePos { BytePos(n as u32) }\n+    fn to_usize(&self) -> usize { let BytePos(n) = *self; n as usize }\n+}\n+\n+impl Add for BytePos {\n+    type Output = BytePos;\n+\n+    fn add(self, rhs: BytePos) -> BytePos {\n+        BytePos((self.to_usize() + rhs.to_usize()) as u32)\n+    }\n+}\n+\n+impl Sub for BytePos {\n+    type Output = BytePos;\n+\n+    fn sub(self, rhs: BytePos) -> BytePos {\n+        BytePos((self.to_usize() - rhs.to_usize()) as u32)\n+    }\n+}\n+\n+impl Encodable for BytePos {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.0)\n+    }\n+}\n+\n+impl Decodable for BytePos {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<BytePos, D::Error> {\n+        Ok(BytePos(d.read_u32()?))\n+    }\n+}\n+\n+impl Pos for CharPos {\n+    fn from_usize(n: usize) -> CharPos { CharPos(n) }\n+    fn to_usize(&self) -> usize { let CharPos(n) = *self; n }\n+}\n+\n+impl Add for CharPos {\n+    type Output = CharPos;\n+\n+    fn add(self, rhs: CharPos) -> CharPos {\n+        CharPos(self.to_usize() + rhs.to_usize())\n+    }\n+}\n+\n+impl Sub for CharPos {\n+    type Output = CharPos;\n+\n+    fn sub(self, rhs: CharPos) -> CharPos {\n+        CharPos(self.to_usize() - rhs.to_usize())\n+    }\n+}\n+\n+// _____________________________________________________________________________\n+// Loc, LocWithOpt, FileMapAndLine, FileMapAndBytePos\n+//\n+\n+/// A source code location used for error reporting\n+#[derive(Debug)]\n+pub struct Loc {\n+    /// Information about the original source\n+    pub file: Rc<FileMap>,\n+    /// The (1-based) line number\n+    pub line: usize,\n+    /// The (0-based) column offset\n+    pub col: CharPos\n+}\n+\n+/// A source code location used as the result of lookup_char_pos_adj\n+// Actually, *none* of the clients use the filename *or* file field;\n+// perhaps they should just be removed.\n+#[derive(Debug)]\n+pub struct LocWithOpt {\n+    pub filename: FileName,\n+    pub line: usize,\n+    pub col: CharPos,\n+    pub file: Option<Rc<FileMap>>,\n+}\n+\n+// used to be structural records. Better names, anyone?\n+#[derive(Debug)]\n+pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: usize }\n+#[derive(Debug)]\n+pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub struct LineInfo {\n+    /// Index of line, starting from 0.\n+    pub line_index: usize,\n+\n+    /// Column in line where span begins, starting from 0.\n+    pub start_col: CharPos,\n+\n+    /// Column in line where span ends, starting from 0, exclusive.\n+    pub end_col: CharPos,\n+}\n+\n+pub struct FileLines {\n+    pub file: Rc<FileMap>,\n+    pub lines: Vec<LineInfo>\n+}\n+\n+thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter) -> fmt::Result> =\n+                Cell::new(default_span_debug));\n+\n+/* assuming that we're not in macro expansion */\n+pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n+    Span {lo: lo, hi: hi, expn_id: NO_EXPANSION}\n+}\n+\n+pub struct MacroBacktrace {\n+    /// span where macro was applied to generate this code\n+    pub call_site: Span,\n+\n+    /// name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")\n+    pub macro_decl_name: String,\n+\n+    /// span where macro was defined (if known)\n+    pub def_site_span: Option<Span>,\n+}\n+\n+// _____________________________________________________________________________\n+// SpanLinesError, SpanSnippetError, DistinctSources, MalformedCodemapPositions\n+//\n+\n+pub type FileLinesResult = Result<FileLines, SpanLinesError>;\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub enum SpanLinesError {\n+    IllFormedSpan(Span),\n+    DistinctSources(DistinctSources),\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub enum SpanSnippetError {\n+    IllFormedSpan(Span),\n+    DistinctSources(DistinctSources),\n+    MalformedForCodemap(MalformedCodemapPositions),\n+    SourceNotAvailable { filename: String }\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct DistinctSources {\n+    pub begin: (String, BytePos),\n+    pub end: (String, BytePos)\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct MalformedCodemapPositions {\n+    pub name: String,\n+    pub source_len: usize,\n+    pub begin_pos: BytePos,\n+    pub end_pos: BytePos\n+}\n+"}, {"sha": "5fdca58dec2733693d737d653f6b2e46646eb6cf", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,14 +13,15 @@\n #![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast::{self, TokenTree, Item, MetaItem, ImplItem, TraitItem, ItemKind};\n-use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::parse::{self, token};\n use syntax::ptr::P;\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n #[macro_export]"}, {"sha": "dade0e946c5bf92587d042bf18e1679a523e46b5", "filename": "src/test/compile-fail-fulldeps/gated-quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -22,8 +22,8 @@\n extern crate syntax;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::parse;\n+use syntax_pos::Span;\n \n struct ParseSess;\n "}, {"sha": "e29ded8a052c6f73b16462e0a89b0ddd26e7f714", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,11 +13,12 @@\n #![feature(quote, rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n \n use syntax::ast;\n-use syntax::codemap::{self, DUMMY_SP};\n use syntax::parse;\n use syntax::print::pprust;\n+use syntax_pos::DUMMY_SP;\n \n fn main() {\n     let ps = syntax::parse::ParseSess::new();"}, {"sha": "8c58c8c60627d76132eb2f0338a0105040904650", "filename": "src/test/compile-fail/bad-format-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail%2Fbad-format-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Fcompile-fail%2Fbad-format-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-format-args.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n // error-pattern: requires at least a format string argument\n-// error-pattern: bad-format-args.rs:19:5: 19:15 note: in this expansion\n+// error-pattern: in this expansion\n \n // error-pattern: expected token: `,`\n-// error-pattern: bad-format-args.rs:20:5: 20:19 note: in this expansion\n-// error-pattern: bad-format-args.rs:21:5: 21:22 note: in this expansion\n+// error-pattern: in this expansion\n+// error-pattern: in this expansion\n \n fn main() {\n     format!();"}, {"sha": "e1461c7847e4ca5050cc33ad598533cce26096da", "filename": "src/test/run-fail-fulldeps/qquote.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,11 +15,13 @@\n #![feature(quote, rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n \n use syntax::ast;\n-use syntax::codemap::{self, DUMMY_SP};\n+use syntax::codemap;\n use syntax::parse;\n use syntax::print::pprust;\n+use syntax_pos::DUMMY_SP;\n \n fn main() {\n     let ps = syntax::parse::ParseSess::new();"}, {"sha": "a94b2a85c7754046716f305773b3f514a7df9aa0", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -18,6 +18,8 @@ extern crate rustc_lint;\n extern crate rustc_llvm as llvm;\n extern crate rustc_metadata;\n extern crate rustc_resolve;\n+extern crate rustc_errors;\n+extern crate rustc_errors as errors;\n #[macro_use] extern crate syntax;\n \n use std::ffi::{CStr, CString};\n@@ -38,7 +40,7 @@ use rustc_metadata::creader::read_local_crates;\n use rustc_metadata::cstore::CStore;\n use libc::c_void;\n \n-use syntax::diagnostics::registry::Registry;\n+use rustc_errors::registry::Registry;\n use syntax::parse::token;\n \n fn main() {"}, {"sha": "aa3495ec5eebb56869e1476cbf3674752af59855", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,14 +14,15 @@ extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_lint;\n extern crate rustc_metadata;\n+extern crate rustc_errors;\n extern crate syntax;\n \n use rustc::dep_graph::DepGraph;\n use rustc::session::{build_session, Session};\n use rustc::session::config::{basic_options, build_configuration, Input, OutputType};\n use rustc_driver::driver::{compile_input, CompileController, anon_src};\n use rustc_metadata::cstore::CStore;\n-use syntax::diagnostics::registry::Registry;\n+use rustc_errors::registry::Registry;\n use syntax::parse::token;\n \n use std::path::PathBuf;"}, {"sha": "42135703b75a4e9f3f9576ad71dc28f5c55bf109", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,17 +16,18 @@\n \n extern crate syntax;\n extern crate syntax_ext;\n+extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax_ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n use syntax_ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n #[plugin_registrar]"}, {"sha": "eeecd0b24e29ee60ef314c8c8a4b8b8e88279f5c", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,19 +16,20 @@\n \n extern crate syntax;\n extern crate syntax_ext;\n+extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::Span;\n use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax_ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n use syntax_ext::deriving::generic::{Substructure, Struct, EnumMatching};\n use syntax_ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n #[plugin_registrar]"}, {"sha": "9f0c8d4d6494986bcccb9e57968646408bb25b4a", "filename": "src/test/run-pass-fulldeps/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -16,9 +16,9 @@\n extern crate syntax;\n extern crate rustc;\n extern crate rustc_plugin;\n+extern crate syntax_pos;\n \n use syntax::ast;\n-use syntax::codemap;\n use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n use syntax::util::small_vector::SmallVector;\n use rustc_plugin::Registry;\n@@ -28,7 +28,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"multiple_items\", expand)\n }\n \n-fn expand(cx: &mut ExtCtxt, _: codemap::Span, _: &[ast::TokenTree]) -> Box<MacResult+'static> {\n+fn expand(cx: &mut ExtCtxt, _: syntax_pos::Span, _: &[ast::TokenTree]) -> Box<MacResult+'static> {\n     MacEager::items(SmallVector::many(vec![\n         quote_item!(cx, struct Struct1;).unwrap(),\n         quote_item!(cx, struct Struct2;).unwrap()"}, {"sha": "e32c83472a1cf8e53449a7dc9a4a65c724aec920", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,12 +15,13 @@\n extern crate syntax;\n extern crate rustc;\n extern crate rustc_plugin;\n+extern crate syntax_pos;\n \n use syntax::ast::{self, TokenTree, Item, MetaItem, ImplItem, TraitItem, ItemKind};\n-use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::parse::{self, token};\n use syntax::ptr::P;\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n #[macro_export]"}, {"sha": "e47e38bb3187241d48636dc0af5b4b2e26ddeb97", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,17 +14,18 @@\n #![feature(box_syntax, rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n use std::borrow::ToOwned;\n use syntax::ast;\n-use syntax::codemap::Span;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT};\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::ptr::P;\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n struct Expander {"}, {"sha": "5566692a4e28361d29d79d4489ce6fc18f00b43d", "filename": "src/test/run-pass-fulldeps/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -14,17 +14,18 @@\n #![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n-use syntax::codemap::Span;\n use syntax::parse::token::{self, str_to_ident, NtExpr, NtPat};\n use syntax::ast::{TokenTree, Pat};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;\n use syntax::ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use syntax::ext::tt::macro_parser::{Success, Failure, Error};\n use syntax::ptr::P;\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n fn expand_mbe_matches(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])"}, {"sha": "7a3729015c19fa20781c4f6abcd891ddafb3fc41", "filename": "src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Froman_numerals.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,14 +15,15 @@\n #![feature(slice_patterns)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n-use syntax::codemap::Span;\n use syntax::ast::TokenTree;\n use syntax::parse::token;\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;  // trait for expr_usize\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n // WARNING WARNING WARNING WARNING WARNING"}, {"sha": "7581e43f12ed7282b30d85d8ddfe58ffa72b9364", "filename": "src/test/run-pass-fulldeps/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,12 +15,13 @@\n \n extern crate syntax_extension_with_dll_deps_1 as other;\n extern crate syntax;\n+extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast::{TokenTree, Item, MetaItem};\n-use syntax::codemap::Span;\n use syntax::ext::base::*;\n+use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n #[plugin_registrar]"}, {"sha": "ff57e9d6b73684dd6190dff73980e8d472e0a853", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -19,11 +19,11 @@ extern crate getopts;\n extern crate rustc;\n extern crate rustc_driver;\n extern crate syntax;\n+extern crate rustc_errors as errors;\n \n use rustc::session::Session;\n use rustc::session::config::{self, Input};\n use rustc_driver::{driver, CompilerCalls, Compilation};\n-use syntax::{diagnostics, errors};\n \n use std::path::PathBuf;\n \n@@ -35,7 +35,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n-                      _: &diagnostics::registry::Registry,\n+                      _: &errors::registry::Registry,\n                       _: config::ErrorOutputType)\n                       -> Compilation {\n         self.count *= 2;\n@@ -64,7 +64,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n                 _: &config::Options,\n                 _: &Option<PathBuf>,\n                 _: &Option<PathBuf>,\n-                _: &diagnostics::registry::Registry)\n+                _: &errors::registry::Registry)\n                 -> Option<(Input, Option<PathBuf>)> {\n         panic!(\"This shouldn't happen\");\n     }"}, {"sha": "a4f0e35cc5ac70792ef2da6cfc047c3ed3681b93", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -13,10 +13,11 @@\n #![feature(quote, rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n \n-use syntax::codemap::DUMMY_SP;\n use syntax::print::pprust::*;\n use syntax::parse::token::intern;\n+use syntax_pos::DUMMY_SP;\n \n fn main() {\n     let ps = syntax::parse::ParseSess::new();"}, {"sha": "e5b628bb0029545022dab31220dc8e89ef668470", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ae56d755f912471e4c36982a069317842fa495/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=d3ae56d755f912471e4c36982a069317842fa495", "patch": "@@ -15,7 +15,7 @@ use std::path::Path;\n use runtest::{ProcRes};\n \n // These structs are a subset of the ones found in\n-// `syntax::errors::json`.\n+// `syntax::json`.\n \n #[derive(RustcEncodable, RustcDecodable)]\n struct Diagnostic {"}]}