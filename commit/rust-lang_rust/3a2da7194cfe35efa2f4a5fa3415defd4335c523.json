{"sha": "3a2da7194cfe35efa2f4a5fa3415defd4335c523", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMmRhNzE5NGNmZTM1ZWZhMmY0YTVmYTM0MTVkZWZkNDMzNWM1MjM=", "commit": {"author": {"name": "Emmanuel Gil Peyrot", "email": "linkmauve@linkmauve.fr", "date": "2019-11-13T08:43:08Z"}, "committer": {"name": "Emmanuel Gil Peyrot", "email": "linkmauve@linkmauve.fr", "date": "2019-11-24T12:55:03Z"}, "message": "Return Ok(()) in docstrings in std::os::unix::net", "tree": {"sha": "7c5cac2db82bca3d3c708fe259cb27586a7fadeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c5cac2db82bca3d3c708fe259cb27586a7fadeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a2da7194cfe35efa2f4a5fa3415defd4335c523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2da7194cfe35efa2f4a5fa3415defd4335c523", "html_url": "https://github.com/rust-lang/rust/commit/3a2da7194cfe35efa2f4a5fa3415defd4335c523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a2da7194cfe35efa2f4a5fa3415defd4335c523/comments", "author": {"login": "linkmauve", "id": 7755816, "node_id": "MDQ6VXNlcjc3NTU4MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7755816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linkmauve", "html_url": "https://github.com/linkmauve", "followers_url": "https://api.github.com/users/linkmauve/followers", "following_url": "https://api.github.com/users/linkmauve/following{/other_user}", "gists_url": "https://api.github.com/users/linkmauve/gists{/gist_id}", "starred_url": "https://api.github.com/users/linkmauve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linkmauve/subscriptions", "organizations_url": "https://api.github.com/users/linkmauve/orgs", "repos_url": "https://api.github.com/users/linkmauve/repos", "events_url": "https://api.github.com/users/linkmauve/events{/privacy}", "received_events_url": "https://api.github.com/users/linkmauve/received_events", "type": "User", "site_admin": false}, "committer": {"login": "linkmauve", "id": 7755816, "node_id": "MDQ6VXNlcjc3NTU4MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7755816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linkmauve", "html_url": "https://github.com/linkmauve", "followers_url": "https://api.github.com/users/linkmauve/followers", "following_url": "https://api.github.com/users/linkmauve/following{/other_user}", "gists_url": "https://api.github.com/users/linkmauve/gists{/gist_id}", "starred_url": "https://api.github.com/users/linkmauve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linkmauve/subscriptions", "organizations_url": "https://api.github.com/users/linkmauve/orgs", "repos_url": "https://api.github.com/users/linkmauve/repos", "events_url": "https://api.github.com/users/linkmauve/events{/privacy}", "received_events_url": "https://api.github.com/users/linkmauve/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f158bc62bbe05e99927f4e86c1c38182d187c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f158bc62bbe05e99927f4e86c1c38182d187c1e", "html_url": "https://github.com/rust-lang/rust/commit/8f158bc62bbe05e99927f4e86c1c38182d187c1e"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "5aafdb8241a8ec5c6bd1865220909a5b33cebb87", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3a2da7194cfe35efa2f4a5fa3415defd4335c523/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2da7194cfe35efa2f4a5fa3415defd4335c523/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=3a2da7194cfe35efa2f4a5fa3415defd4335c523", "patch": "@@ -146,6 +146,7 @@ impl SocketAddr {\n     ///     let socket = UnixListener::bind(\"/tmp/sock\")?;\n     ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     ///     assert_eq!(addr.is_unnamed(), false);\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -158,6 +159,7 @@ impl SocketAddr {\n     ///     let socket = UnixDatagram::unbound()?;\n     ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     ///     assert_eq!(addr.is_unnamed(), true);\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -183,6 +185,7 @@ impl SocketAddr {\n     ///     let socket = UnixListener::bind(\"/tmp/sock\")?;\n     ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     ///     assert_eq!(addr.as_pathname(), Some(Path::new(\"/tmp/sock\")));\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -195,6 +198,7 @@ impl SocketAddr {\n     ///     let socket = UnixDatagram::unbound()?;\n     ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     ///     assert_eq!(addr.as_pathname(), None);\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -261,6 +265,7 @@ impl<'a> fmt::Display for AsciiEscaped<'a> {\n ///     let mut response = String::new();\n ///     stream.read_to_string(&mut response)?;\n ///     println!(\"{}\", response);\n+///     Ok(())\n /// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -349,6 +354,7 @@ impl UnixStream {\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n     ///     let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -366,6 +372,7 @@ impl UnixStream {\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n     ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -383,6 +390,7 @@ impl UnixStream {\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n     ///     let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -424,6 +432,7 @@ impl UnixStream {\n     ///     let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n     ///     let err = result.unwrap_err();\n     ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -452,6 +461,7 @@ impl UnixStream {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n     ///     socket.set_write_timeout(Some(Duration::new(1, 0)))\n     ///         .expect(\"Couldn't set write timeout\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -468,6 +478,7 @@ impl UnixStream {\n     ///     let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n     ///     let err = result.unwrap_err();\n     ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -487,6 +498,7 @@ impl UnixStream {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n     ///     socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n     ///     assert_eq!(socket.read_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -507,6 +519,7 @@ impl UnixStream {\n     ///     socket.set_write_timeout(Some(Duration::new(1, 0)))\n     ///         .expect(\"Couldn't set write timeout\");\n     ///     assert_eq!(socket.write_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -524,6 +537,7 @@ impl UnixStream {\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n     ///     socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -543,6 +557,7 @@ impl UnixStream {\n     ///     if let Ok(Some(err)) = socket.take_error() {\n     ///         println!(\"Got error: {:?}\", err);\n     ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -570,6 +585,7 @@ impl UnixStream {\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\");\n     ///     socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -747,6 +763,7 @@ impl IntoRawFd for net::UdpSocket {\n ///             }\n ///         }\n ///     }\n+///     Ok(())\n /// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -816,6 +833,7 @@ impl UnixListener {\n     ///         Ok((socket, addr)) => println!(\"Got a client: {:?}\", addr),\n     ///         Err(e) => println!(\"accept function failed: {:?}\", e),\n     ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -840,8 +858,8 @@ impl UnixListener {\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n-    ///\n     ///     let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -858,8 +876,8 @@ impl UnixListener {\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n-    ///\n     ///     let addr = listener.local_addr().expect(\"Couldn't get local address\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -876,8 +894,8 @@ impl UnixListener {\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n-    ///\n     ///     listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -898,6 +916,7 @@ impl UnixListener {\n     ///     if let Ok(Some(err)) = listener.take_error() {\n     ///         println!(\"Got error: {:?}\", err);\n     ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -939,6 +958,7 @@ impl UnixListener {\n     ///             }\n     ///         }\n     ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1008,6 +1028,7 @@ impl<'a> IntoIterator for &'a UnixListener {\n ///             }\n ///         }\n ///     }\n+///     Ok(())\n /// }\n /// ```\n #[derive(Debug)]\n@@ -1042,6 +1063,7 @@ impl<'a> Iterator for Incoming<'a> {\n ///     let mut buf = [0; 100];\n ///     let (count, address) = socket.recv_from(&mut buf)?;\n ///     println!(\"socket {:?} sent {:?}\", address, &buf[..count]);\n+///     Ok(())\n /// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1157,9 +1179,10 @@ impl UnixDatagram {\n     ///         Ok(sock) => sock,\n     ///         Err(e) => {\n     ///             println!(\"Couldn't connect: {:?}\", e);\n-    ///             return\n+    ///             return Err(e)\n     ///         }\n     ///     };\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1189,8 +1212,8 @@ impl UnixDatagram {\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n-    ///\n     ///     let sock_copy = sock.try_clone().expect(\"try_clone failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1207,8 +1230,8 @@ impl UnixDatagram {\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n-    ///\n     ///     let addr = sock.local_addr().expect(\"Couldn't get local address\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1232,6 +1255,7 @@ impl UnixDatagram {\n     ///     sock.connect(\"/path/to/the/socket\")?;\n     ///\n     ///     let addr = sock.peer_addr().expect(\"Couldn't get peer address\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1252,10 +1276,9 @@ impl UnixDatagram {\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     let mut buf = vec![0; 10];\n-    ///     match sock.recv_from(buf.as_mut_slice()) {\n-    ///         Ok((size, sender)) => println!(\"received {} bytes from {:?}\", size, sender),\n-    ///         Err(e) => println!(\"recv_from function failed: {:?}\", e),\n-    ///     }\n+    ///     let (size, sender) = sock.recv_from(buf.as_mut_slice())?;\n+    ///     println!(\"received {} bytes from {:?}\", size, sender);\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1295,6 +1318,7 @@ impl UnixDatagram {\n     ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n     ///     let mut buf = vec![0; 10];\n     ///     sock.recv(buf.as_mut_slice()).expect(\"recv function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1314,6 +1338,7 @@ impl UnixDatagram {\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     sock.send_to(b\"omelette au fromage\", \"/some/sock\").expect(\"send_to function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1350,6 +1375,7 @@ impl UnixDatagram {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     sock.connect(\"/some/sock\").expect(\"Couldn't connect\");\n     ///     sock.send(b\"omelette au fromage\").expect(\"send_to function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1379,6 +1405,7 @@ impl UnixDatagram {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     sock.set_read_timeout(Some(Duration::new(1, 0)))\n     ///         .expect(\"set_read_timeout function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -1395,6 +1422,7 @@ impl UnixDatagram {\n     ///     let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n     ///     let err = result.unwrap_err();\n     ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1423,6 +1451,7 @@ impl UnixDatagram {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     sock.set_write_timeout(Some(Duration::new(1, 0)))\n     ///         .expect(\"set_write_timeout function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -1439,6 +1468,7 @@ impl UnixDatagram {\n     ///     let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n     ///     let err = result.unwrap_err();\n     ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1459,6 +1489,7 @@ impl UnixDatagram {\n     ///     sock.set_read_timeout(Some(Duration::new(1, 0)))\n     ///         .expect(\"set_read_timeout function failed\");\n     ///     assert_eq!(sock.read_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1479,6 +1510,7 @@ impl UnixDatagram {\n     ///     sock.set_write_timeout(Some(Duration::new(1, 0)))\n     ///         .expect(\"set_write_timeout function failed\");\n     ///     assert_eq!(sock.write_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1496,6 +1528,7 @@ impl UnixDatagram {\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     sock.set_nonblocking(true).expect(\"set_nonblocking function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1515,6 +1548,7 @@ impl UnixDatagram {\n     ///     if let Ok(Some(err)) = sock.take_error() {\n     ///         println!(\"Got error: {:?}\", err);\n     ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1537,6 +1571,7 @@ impl UnixDatagram {\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     sock.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]"}]}