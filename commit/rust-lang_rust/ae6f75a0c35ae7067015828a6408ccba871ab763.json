{"sha": "ae6f75a0c35ae7067015828a6408ccba871ab763", "node_id": "C_kwDOAAsO6NoAKGFlNmY3NWEwYzM1YWU3MDY3MDE1ODI4YTY0MDhjY2JhODcxYWI3NjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-11T18:00:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T18:00:44Z"}, "message": "Rollup merge of #95895 - CAD97:patch-2, r=Dylan-DPC\n\nClarify str::from_utf8_unchecked's invariants\n\nSpecifically, make it clear that it is immediately UB to pass ill-formed UTF-8 into the function. The previous wording left space to interpret that the UB only occurred when calling another function, which \"assumes that `&str`s are valid UTF-8.\"\n\nThis does not change whether str being UTF-8 is a safety or a validity invariant. (As per previous discussion, it is a safety invariant, not a validity invariant.) It just makes it clear that valid UTF-8 is a precondition of str::from_utf8_unchecked, and that emitting an Abstract Machine fault (e.g. UB or a sanitizer error) on invalid UTF-8 is a valid thing to do.\n\nIf user code wants to create an unsafe `&str` pointing to ill-formed UTF-8, it must be done via transmutes. Also, just, don't.\n\nZulip discussion: https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/str.3A.3Afrom_utf8_unchecked.20Safety.20requirement", "tree": {"sha": "dd4c5154ad84cfcc65b350c06ac634af1827f2fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4c5154ad84cfcc65b350c06ac634af1827f2fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae6f75a0c35ae7067015828a6408ccba871ab763", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVGzMCRBK7hj4Ov3rIwAAtpYIAGviEOuJLZ+I76xTOA3ecbql\nNvcW0L5jmKDy1kB0zHIPOluyv9hnHmdvEjazsu4jk7Z+2Jpkq7dgsyfvlp7Pokz9\ny4z7YWufEDKe+s338gdGDcEUUjMnnFRZx9fJG2PR0HsXbBKIJPliKr7k++QFEdRZ\ndBTPAY7Ns1YOhaJJPJ8Ik1Y8U5xRAkiFlxjLpgWeT/m469i/0BgGJYXM6RFvvouH\ncN95l3Lm27oYNHun3oKxu+F9b8YDLeRxcW4uhSb8Ks8gDOl7vnGCCIX/2bgL5bTu\n75dmfF+I8RShA38F044XOMAuo5agyiNw6ch7/VbjBRA1MxuJyJzEtCdp8OpJquk=\n=OA6l\n-----END PGP SIGNATURE-----\n", "payload": "tree dd4c5154ad84cfcc65b350c06ac634af1827f2fe\nparent 82a6463b1cc005b7f14b15288dcc6ede965ec5c0\nparent b92cd1a32c842e82575e59374545dda5f9b9f77a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649700044 +0200\ncommitter GitHub <noreply@github.com> 1649700044 +0200\n\nRollup merge of #95895 - CAD97:patch-2, r=Dylan-DPC\n\nClarify str::from_utf8_unchecked's invariants\n\nSpecifically, make it clear that it is immediately UB to pass ill-formed UTF-8 into the function. The previous wording left space to interpret that the UB only occurred when calling another function, which \"assumes that `&str`s are valid UTF-8.\"\n\nThis does not change whether str being UTF-8 is a safety or a validity invariant. (As per previous discussion, it is a safety invariant, not a validity invariant.) It just makes it clear that valid UTF-8 is a precondition of str::from_utf8_unchecked, and that emitting an Abstract Machine fault (e.g. UB or a sanitizer error) on invalid UTF-8 is a valid thing to do.\n\nIf user code wants to create an unsafe `&str` pointing to ill-formed UTF-8, it must be done via transmutes. Also, just, don't.\n\nZulip discussion: https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/str.3A.3Afrom_utf8_unchecked.20Safety.20requirement\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6f75a0c35ae7067015828a6408ccba871ab763", "html_url": "https://github.com/rust-lang/rust/commit/ae6f75a0c35ae7067015828a6408ccba871ab763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae6f75a0c35ae7067015828a6408ccba871ab763/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a6463b1cc005b7f14b15288dcc6ede965ec5c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a6463b1cc005b7f14b15288dcc6ede965ec5c0", "html_url": "https://github.com/rust-lang/rust/commit/82a6463b1cc005b7f14b15288dcc6ede965ec5c0"}, {"sha": "b92cd1a32c842e82575e59374545dda5f9b9f77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92cd1a32c842e82575e59374545dda5f9b9f77a", "html_url": "https://github.com/rust-lang/rust/commit/b92cd1a32c842e82575e59374545dda5f9b9f77a"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "81b1db4ac6feda2a1290e767526ea5608078b6ca", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae6f75a0c35ae7067015828a6408ccba871ab763/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6f75a0c35ae7067015828a6408ccba871ab763/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=ae6f75a0c35ae7067015828a6408ccba871ab763", "patch": "@@ -144,11 +144,7 @@ pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n ///\n /// # Safety\n ///\n-/// This function is unsafe because it does not check that the bytes passed to\n-/// it are valid UTF-8. If this constraint is violated, undefined behavior\n-/// results, as the rest of Rust assumes that [`&str`]s are valid UTF-8.\n-///\n-/// [`&str`]: str\n+/// The bytes passed in must be valid UTF-8.\n ///\n /// # Examples\n ///"}]}