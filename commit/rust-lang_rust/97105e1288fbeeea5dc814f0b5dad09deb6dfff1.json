{"sha": "97105e1288fbeeea5dc814f0b5dad09deb6dfff1", "node_id": "C_kwDOAAsO6NoAKDk3MTA1ZTEyODhmYmVlZWE1ZGM4MTRmMGI1ZGFkMDlkZWI2ZGZmZjE", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T09:52:03Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T09:52:03Z"}, "message": "some more cleanups", "tree": {"sha": "dbdaf89d48ea8570df8a200c789c1ea6155a2c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdaf89d48ea8570df8a200c789c1ea6155a2c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97105e1288fbeeea5dc814f0b5dad09deb6dfff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97105e1288fbeeea5dc814f0b5dad09deb6dfff1", "html_url": "https://github.com/rust-lang/rust/commit/97105e1288fbeeea5dc814f0b5dad09deb6dfff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97105e1288fbeeea5dc814f0b5dad09deb6dfff1/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1280887561ec48f628f3920075918b72142de1ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1280887561ec48f628f3920075918b72142de1ad", "html_url": "https://github.com/rust-lang/rust/commit/1280887561ec48f628f3920075918b72142de1ad"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "b1546dd4d0631301c44f33198958f760a503c942", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97105e1288fbeeea5dc814f0b5dad09deb6dfff1/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97105e1288fbeeea5dc814f0b5dad09deb6dfff1/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=97105e1288fbeeea5dc814f0b5dad09deb6dfff1", "patch": "@@ -94,12 +94,18 @@ impl Query {\n \n #[salsa::query_group(SymbolsDatabaseStorage)]\n pub trait SymbolsDatabase: HirDatabase + SourceDatabaseExt + Upcast<dyn HirDatabase> {\n+    /// The symbol index for a given module. These modules should only be in source roots that\n+    /// are inside local_roots.\n     fn module_symbols(&self, module_id: ModuleId) -> Arc<SymbolIndex>;\n+\n+    /// The symbol index for a given source root within library_roots.\n     fn library_symbols(&self, source_root_id: SourceRootId) -> Arc<SymbolIndex>;\n+\n     /// The set of \"local\" (that is, from the current workspace) roots.\n     /// Files in local roots are assumed to change frequently.\n     #[salsa::input]\n     fn local_roots(&self) -> Arc<FxHashSet<SourceRootId>>;\n+\n     /// The set of roots for crates.io libraries.\n     /// Files in libraries are assumed to never change.\n     #[salsa::input]\n@@ -114,6 +120,9 @@ fn library_symbols(db: &dyn SymbolsDatabase, source_root_id: SourceRootId) -> Ar\n         .source_root_crates(source_root_id)\n         .iter()\n         .flat_map(|&krate| module_ids_for_crate(db.upcast(), krate))\n+        // we specifically avoid calling SymbolsDatabase::module_symbols here, even they do the same thing,\n+        // as the index for a library is not going to really ever change, and we do not want to store each\n+        // module's index in salsa.\n         .map(|module_id| SymbolCollector::collect(db, module_id))\n         .flatten()\n         .collect();\n@@ -129,11 +138,23 @@ fn module_symbols(db: &dyn SymbolsDatabase, module_id: ModuleId) -> Arc<SymbolIn\n \n /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n struct Snap<DB>(DB);\n+impl<DB: ParallelDatabase> Snap<salsa::Snapshot<DB>> {\n+    fn new(db: &DB) -> Self {\n+        Self(db.snapshot())\n+    }\n+}\n impl<DB: ParallelDatabase> Clone for Snap<salsa::Snapshot<DB>> {\n     fn clone(&self) -> Snap<salsa::Snapshot<DB>> {\n         Snap(self.0.snapshot())\n     }\n }\n+impl<DB> std::ops::Deref for Snap<DB> {\n+    type Target = DB;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n \n // Feature: Workspace Symbol\n //\n@@ -164,12 +185,10 @@ impl<DB: ParallelDatabase> Clone for Snap<salsa::Snapshot<DB>> {\n pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     let _p = profile::span(\"world_symbols\").detail(|| query.query.clone());\n \n-    let snap = Snap(db.snapshot());\n-\n     let indices = if query.libs {\n         db.library_roots()\n             .par_iter()\n-            .map_with(snap, |snap, &root| snap.0.library_symbols(root))\n+            .map_with(Snap::new(db), |snap, &root| snap.library_symbols(root))\n             .collect()\n     } else {\n         let mut module_ids = Vec::new();\n@@ -183,7 +202,7 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n \n         module_ids\n             .par_iter()\n-            .map_with(snap, |snap, &module_id| snap.0.module_symbols(module_id))\n+            .map_with(Snap::new(db), |snap, &module_id| snap.module_symbols(module_id))\n             .collect()\n     };\n \n@@ -194,10 +213,9 @@ pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<Fil\n     let _p = profile::span(\"crate_symbols\").detail(|| format!(\"{:?}\", query));\n \n     let module_ids = module_ids_for_crate(db, krate);\n-    let snap = Snap(db.snapshot());\n     let indices: Vec<_> = module_ids\n         .par_iter()\n-        .map_with(snap, |snap, &module_id| snap.0.module_symbols(module_id))\n+        .map_with(Snap::new(db), |snap, &module_id| snap.module_symbols(module_id))\n         .collect();\n \n     query.search(indices)"}]}