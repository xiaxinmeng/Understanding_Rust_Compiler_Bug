{"sha": "a319f3c992e8c77103b3c542bd9b20be63999205", "node_id": "C_kwDOAAsO6NoAKGEzMTlmM2M5OTJlOGM3NzEwM2IzYzU0MmJkOWIyMGJlNjM5OTkyMDU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-22T18:33:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-22T18:40:42Z"}, "message": "Uniform spans in dead code lint.", "tree": {"sha": "44ecb3bba9f04fa153ef772d6e2ab2b2cada9e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ecb3bba9f04fa153ef772d6e2ab2b2cada9e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a319f3c992e8c77103b3c542bd9b20be63999205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a319f3c992e8c77103b3c542bd9b20be63999205", "html_url": "https://github.com/rust-lang/rust/commit/a319f3c992e8c77103b3c542bd9b20be63999205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a319f3c992e8c77103b3c542bd9b20be63999205/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2837dc07f88577bee8a6c614d9971ed2aa46b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2837dc07f88577bee8a6c614d9971ed2aa46b1", "html_url": "https://github.com/rust-lang/rust/commit/0b2837dc07f88577bee8a6c614d9971ed2aa46b1"}], "stats": {"total": 284, "additions": 118, "deletions": 166}, "files": [{"sha": "32c8bea0e2e44d4433455d19d7fec3387f4bbd52", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 52, "deletions": 96, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -635,8 +635,7 @@ fn live_symbols_and_ignored_derived_traits<'tcx>(\n }\n \n struct DeadVariant {\n-    hir_id: hir::HirId,\n-    span: Span,\n+    def_id: LocalDefId,\n     name: Symbol,\n     level: lint::Level,\n }\n@@ -687,29 +686,39 @@ impl<'tcx> DeadVisitor<'tcx> {\n \n     fn warn_multiple_dead_codes(\n         &self,\n-        dead_codes: &[(hir::HirId, Span, Symbol)],\n+        dead_codes: &[LocalDefId],\n         participle: &str,\n-        parent_hir_id: Option<hir::HirId>,\n+        parent_item: Option<LocalDefId>,\n     ) {\n-        if let Some((id, _, name)) = dead_codes.first()\n-            && !name.as_str().starts_with('_')\n-        {\n-            self.tcx.struct_span_lint_hir(\n+        if let Some(&first_id) = dead_codes.first() {\n+            let tcx = self.tcx;\n+            let names: Vec<_> = dead_codes\n+                .iter()\n+                .map(|&def_id| tcx.item_name(def_id.to_def_id()).to_string())\n+                .collect();\n+            let spans = dead_codes\n+                .iter()\n+                .map(|&def_id| match tcx.def_ident_span(def_id) {\n+                    Some(s) => s.with_ctxt(tcx.def_span(def_id).ctxt()),\n+                    None => tcx.def_span(def_id),\n+                })\n+                .collect();\n+\n+            tcx.struct_span_lint_hir(\n                 lint::builtin::DEAD_CODE,\n-                *id,\n-                MultiSpan::from_spans(\n-                    dead_codes.iter().map(|(_, span, _)| *span).collect(),\n-                ),\n+                tcx.hir().local_def_id_to_hir_id(first_id),\n+                MultiSpan::from_spans(spans),\n                 |lint| {\n-                    let def_id = self.tcx.hir().local_def_id(*id);\n-                    let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+                    let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n                     let span_len = dead_codes.len();\n-                    let names = match &dead_codes.iter().map(|(_, _, n)| n.to_string()).collect::<Vec<_>>()[..]\n-                    {\n+                    let names = match &names[..] {\n                         _ if span_len > 6 => String::new(),\n                         [name] => format!(\"`{name}` \"),\n                         [names @ .., last] => {\n-                            format!(\"{} and `{last}` \", names.iter().map(|name| format!(\"`{name}`\")).join(\", \"))\n+                            format!(\n+                                \"{} and `{last}` \",\n+                                names.iter().map(|name| format!(\"`{name}`\")).join(\", \")\n+                            )\n                         }\n                         [] => unreachable!(),\n                     };\n@@ -719,25 +728,17 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         s = pluralize!(span_len),\n                         are = pluralize!(\"is\", span_len),\n                     ));\n-                    let hir = self.tcx.hir();\n-                    if let Some(parent_hir_id) = parent_hir_id\n-                        && let Some(parent_node) = hir.find(parent_hir_id)\n-                        && let Node::Item(item) = parent_node\n-                    {\n-                        let def_id = self.tcx.hir().local_def_id(parent_hir_id);\n-                        let parent_descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+\n+                    if let Some(parent_item) = parent_item {\n+                        let parent_descr = tcx.def_kind(parent_item).descr(parent_item.to_def_id());\n                         err.span_label(\n-                            item.ident.span,\n-                            format!(\n-                                \"{descr}{s} in this {parent_descr}\",\n-                                s = pluralize!(span_len)\n-                            ),\n+                            tcx.def_ident_span(parent_item).unwrap(),\n+                            format!(\"{descr}{s} in this {parent_descr}\", s = pluralize!(span_len)),\n                         );\n                     }\n-                    if let Some(encl_scope) = hir.get_enclosing_scope(*id)\n-                        && let Some(encl_def_id) = hir.opt_local_def_id(encl_scope)\n-                        && let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id)\n-                    {\n+\n+                    let encl_def_id = parent_item.unwrap_or(first_id);\n+                    if let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id) {\n                         let traits_str = ign_traits\n                             .iter()\n                             .map(|(trait_id, _)| format!(\"`{}`\", self.tcx.item_name(*trait_id)))\n@@ -758,15 +759,15 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         );\n                         err.note(&msg);\n                     }\n-                        err.emit();\n-                    },\n+                    err.emit();\n+                },\n             );\n         }\n     }\n \n     fn warn_dead_fields_and_variants(\n         &self,\n-        hir_id: hir::HirId,\n+        def_id: LocalDefId,\n         participle: &str,\n         dead_codes: Vec<DeadVariant>,\n     ) {\n@@ -781,23 +782,18 @@ impl<'tcx> DeadVisitor<'tcx> {\n         dead_codes.sort_by_key(|v| v.level);\n         for (_, group) in &dead_codes.into_iter().group_by(|v| v.level) {\n             self.warn_multiple_dead_codes(\n-                &group\n-                    .map(|v| (v.hir_id, v.span, v.name))\n-                    .collect::<Vec<(hir::HirId, Span, Symbol)>>(),\n+                &group.map(|v| v.def_id).collect::<Vec<_>>(),\n                 participle,\n-                Some(hir_id),\n+                Some(def_id),\n             );\n         }\n     }\n \n-    fn warn_dead_code(\n-        &mut self,\n-        id: hir::HirId,\n-        span: rustc_span::Span,\n-        name: Symbol,\n-        participle: &str,\n-    ) {\n-        self.warn_multiple_dead_codes(&[(id, span, name)], participle, None);\n+    fn warn_dead_code(&mut self, id: LocalDefId, participle: &str) {\n+        if self.tcx.item_name(id.to_def_id()).as_str().starts_with('_') {\n+            return;\n+        }\n+        self.warn_multiple_dead_codes(&[id], participle, None);\n     }\n }\n \n@@ -815,33 +811,11 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         if self.should_warn_about_item(item) {\n             // For most items, we want to highlight its identifier\n-            let span = match item.kind {\n-                hir::ItemKind::Fn(..)\n-                | hir::ItemKind::Mod(..)\n-                | hir::ItemKind::Enum(..)\n-                | hir::ItemKind::Struct(..)\n-                | hir::ItemKind::Union(..)\n-                | hir::ItemKind::Trait(..)\n-                | hir::ItemKind::Impl { .. } => {\n-                    // FIXME(66095): Because item.span is annotated with things\n-                    // like expansion data, and ident.span isn't, we use the\n-                    // def_span method if it's part of a macro invocation\n-                    // (and thus has a source_callee set).\n-                    // We should probably annotate ident.span with the macro\n-                    // context, but that's a larger change.\n-                    if item.span.source_callee().is_some() {\n-                        self.tcx.sess.source_map().guess_head_span(item.span)\n-                    } else {\n-                        item.ident.span\n-                    }\n-                }\n-                _ => item.span,\n-            };\n             let participle = match item.kind {\n                 hir::ItemKind::Struct(..) => \"constructed\", // Issue #52325\n                 _ => \"used\",\n             };\n-            self.warn_dead_code(item.hir_id(), span, item.ident.name, participle);\n+            self.warn_dead_code(item.def_id, participle);\n         } else {\n             // Only continue if we didn't warn\n             intravisit::walk_item(self, item);\n@@ -865,8 +839,7 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n             .filter_map(|variant| {\n                 if self.should_warn_about_variant(&variant) {\n                     Some(DeadVariant {\n-                        hir_id: variant.id,\n-                        span: variant.span,\n+                        def_id: self.tcx.hir().local_def_id(variant.id),\n                         name: variant.ident.name,\n                         level: self.tcx.lint_level_at_node(lint::builtin::DEAD_CODE, variant.id).0,\n                     })\n@@ -875,7 +848,7 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n                 }\n             })\n             .collect();\n-        self.warn_dead_fields_and_variants(item_id, \"constructed\", dead_variants)\n+        self.warn_dead_fields_and_variants(item_id.expect_owner(), \"constructed\", dead_variants)\n     }\n \n     fn visit_variant(\n@@ -891,7 +864,7 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n \n     fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem<'tcx>) {\n         if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(fi.hir_id(), fi.span, fi.ident.name, \"used\");\n+            self.warn_dead_code(fi.def_id, \"used\");\n         }\n         intravisit::walk_foreign_item(self, fi);\n     }\n@@ -911,8 +884,7 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n             .filter_map(|field| {\n                 if self.should_warn_about_field(&field) {\n                     Some(DeadVariant {\n-                        hir_id: field.hir_id,\n-                        span: field.span,\n+                        def_id: self.tcx.hir().local_def_id(field.hir_id),\n                         name: field.ident.name,\n                         level: self\n                             .tcx\n@@ -924,36 +896,20 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n                 }\n             })\n             .collect();\n-        self.warn_dead_fields_and_variants(id, \"read\", dead_fields)\n+        self.warn_dead_fields_and_variants(self.tcx.hir().local_def_id(id), \"read\", dead_fields)\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         match impl_item.kind {\n             hir::ImplItemKind::Const(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.def_id) {\n-                    self.warn_dead_code(\n-                        impl_item.hir_id(),\n-                        impl_item.span,\n-                        impl_item.ident.name,\n-                        \"used\",\n-                    );\n+                    self.warn_dead_code(impl_item.def_id, \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }\n             hir::ImplItemKind::Fn(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.def_id) {\n-                    // FIXME(66095): Because impl_item.span is annotated with things\n-                    // like expansion data, and ident.span isn't, we use the\n-                    // def_span method if it's part of a macro invocation\n-                    // (and thus has a source_callee set).\n-                    // We should probably annotate ident.span with the macro\n-                    // context, but that's a larger change.\n-                    let span = if impl_item.span.source_callee().is_some() {\n-                        self.tcx.sess.source_map().guess_head_span(impl_item.span)\n-                    } else {\n-                        impl_item.ident.span\n-                    };\n-                    self.warn_dead_code(impl_item.hir_id(), span, impl_item.ident.name, \"used\");\n+                    self.warn_dead_code(impl_item.def_id, \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }"}, {"sha": "cc701cc4b9424f8d6a2c0af36042db1cf6446c0d", "filename": "src/test/ui/associated-consts/associated-const-dead-code.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -1,8 +1,8 @@\n error: associated constant `BAR` is never used\n-  --> $DIR/associated-const-dead-code.rs:6:5\n+  --> $DIR/associated-const-dead-code.rs:6:11\n    |\n LL |     const BAR: u32 = 1;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |           ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/associated-const-dead-code.rs:1:9"}, {"sha": "5696a010c3f80e6f5794025cb307322d121ba71d", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -4,9 +4,9 @@ warning: fields `field_1` and `field_2` are never read\n LL | struct Props {\n    |        ----- fields in this struct\n LL |     field_1: u32,\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^\n LL |     field_2: u32,\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^\n    |\n    = note: `#[warn(dead_code)]` on by default\n "}, {"sha": "bd36a25686a30bc1d0b12cc9a45c2e55ab75f451", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,7 +5,7 @@ LL | enum Foo {\n    |      --- variant in this enum\n LL |     Bar(u8),\n LL |     Void(Void),\n-   |     ^^^^^^^^^^\n+   |     ^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n    = note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis"}, {"sha": "baf34b46d8b57c766b91bc102d7bb42b3d2f7442", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,13 +5,13 @@ LL | pub struct Whatever {\n    |            -------- fields in this struct\n LL |     pub field0: (),\n LL |     field1: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n LL |     field2: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n LL |     field3: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n LL |     field4: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:1:11"}, {"sha": "38be486e33207195ffac2256c6fb5f2bc8b58afb", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -2,7 +2,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:6:12\n    |\n LL | struct A { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -16,7 +16,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:10:12\n    |\n LL | struct B { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -26,7 +26,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -36,7 +36,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -46,7 +46,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:21:12\n    |\n LL | struct E { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n "}, {"sha": "f1e83ca74d8e9748a4c458512448ee5a0992f5c7", "filename": "src/test/ui/issues/issue-37515.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -1,8 +1,8 @@\n warning: type alias `Z` is never used\n-  --> $DIR/issue-37515.rs:5:1\n+  --> $DIR/issue-37515.rs:5:6\n    |\n LL | type Z = dyn for<'x> Send;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-37515.rs:3:9"}, {"sha": "e35e13a9ec6d607f0322d6438b2486e2fbd035f2", "filename": "src/test/ui/lint/dead-code/impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -1,8 +1,8 @@\n error: type alias `Unused` is never used\n-  --> $DIR/impl-trait.rs:12:1\n+  --> $DIR/impl-trait.rs:12:6\n    |\n LL | type Unused = ();\n-   | ^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/impl-trait.rs:1:9"}, {"sha": "cff572e1b555b9512f1df049978118f44de00713", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -4,9 +4,9 @@ warning: fields `a` and `b` are never read\n LL | struct Foo {\n    |        --- fields in this struct\n LL |     a: i32,\n-   |     ^^^^^^\n+   |     ^\n LL |     pub b: i32,\n-   |     ^^^^^^^^^^\n+   |         ^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-85255.rs:4:9\n@@ -32,9 +32,9 @@ warning: fields `a` and `b` are never read\n LL | pub(crate) struct Foo1 {\n    |                   ---- fields in this struct\n LL |     a: i32,\n-   |     ^^^^^^\n+   |     ^\n LL |     pub b: i32,\n-   |     ^^^^^^^^^^\n+   |         ^\n \n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:26:8\n@@ -54,9 +54,9 @@ warning: fields `a` and `b` are never read\n LL | pub(crate) struct Foo2 {\n    |                   ---- fields in this struct\n LL |     a: i32,\n-   |     ^^^^^^\n+   |     ^\n LL |     pub b: i32,\n-   |     ^^^^^^^^^^\n+   |         ^\n \n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:38:8"}, {"sha": "eb728b5b930551152727b285d3b51900db807640", "filename": "src/test/ui/lint/dead-code/lint-dead-code-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -1,8 +1,8 @@\n error: static `priv_static` is never used\n-  --> $DIR/lint-dead-code-1.rs:20:1\n+  --> $DIR/lint-dead-code-1.rs:20:8\n    |\n LL | static priv_static: isize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-dead-code-1.rs:5:9\n@@ -11,10 +11,10 @@ LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n error: constant `priv_const` is never used\n-  --> $DIR/lint-dead-code-1.rs:27:1\n+  --> $DIR/lint-dead-code-1.rs:27:7\n    |\n LL | const priv_const: isize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^\n \n error: struct `PrivStruct` is never constructed\n   --> $DIR/lint-dead-code-1.rs:35:8"}, {"sha": "38578929848cf9f736d549605b921b8487954196", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -29,10 +29,10 @@ LL | enum c_void {}\n    |      ^^^^^^\n \n error: function `free` is never used\n-  --> $DIR/lint-dead-code-3.rs:62:5\n+  --> $DIR/lint-dead-code-3.rs:62:8\n    |\n LL |     fn free(p: *const c_void);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "8cb4621d54342ef19ac5d88fa2cf606af6dedb6d", "filename": "src/test/ui/lint/dead-code/lint-dead-code-4.stderr", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo {\n    |        --- field in this struct\n LL |     x: usize,\n LL |     b: bool,\n-   |     ^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-dead-code-4.rs:3:9\n@@ -16,16 +16,12 @@ LL | #![deny(dead_code)]\n error: variants `X` and `Y` are never constructed\n   --> $DIR/lint-dead-code-4.rs:15:5\n    |\n-LL |   enum XYZ {\n-   |        --- variants in this enum\n-LL |       X,\n-   |       ^\n-LL | /     Y {\n-LL | |         a: String,\n-LL | |         b: i32,\n-LL | |         c: i32,\n-LL | |     },\n-   | |_____^\n+LL | enum XYZ {\n+   |      --- variants in this enum\n+LL |     X,\n+   |     ^\n+LL |     Y {\n+   |     ^\n \n error: enum `ABC` is never used\n   --> $DIR/lint-dead-code-4.rs:24:6\n@@ -40,9 +36,9 @@ LL | enum IJK {\n    |      --- fields in this enum\n ...\n LL |         b: i32,\n-   |         ^^^^^^\n+   |         ^\n LL |         c: i32,\n-   |         ^^^^^^\n+   |         ^\n \n error: variants `I` and `K` are never constructed\n   --> $DIR/lint-dead-code-4.rs:36:5\n@@ -61,10 +57,10 @@ error: fields `x` and `c` are never read\n LL | struct Bar {\n    |        --- fields in this struct\n LL |     x: usize,\n-   |     ^^^^^^^^\n+   |     ^\n LL |     b: bool,\n LL |     c: bool,\n-   |     ^^^^^^^\n+   |     ^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "eaf43e4536104257bd7edbff1b76d9660ba6ff8a", "filename": "src/test/ui/lint/dead-code/lint-dead-code-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -20,9 +20,9 @@ LL | enum Enum2 {\n    |      ----- variants in this enum\n ...\n LL |     Variant5 { _x: isize },\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^\n LL |     Variant6(isize),\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error: enum `Enum3` is never used\n   --> $DIR/lint-dead-code-5.rs:35:6"}, {"sha": "c0f1ed38f6de3bd9cb5512ce587f95dacba2bda8", "filename": "src/test/ui/lint/dead-code/multiple-dead-codes-in-the-same-struct.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,12 +5,12 @@ LL | struct Bar {\n    |        --- fields in this struct\n ...\n LL |     d: usize,\n-   |     ^^^^^^^^\n+   |     ^\n ...\n LL |     f: usize,\n-   |     ^^^^^^^^\n+   |     ^\n LL |     g: usize,\n-   |     ^^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/multiple-dead-codes-in-the-same-struct.rs:1:9\n@@ -25,10 +25,10 @@ LL | struct Bar {\n    |        --- fields in this struct\n ...\n LL |     c: usize,\n-   |     ^^^^^^^^\n+   |     ^\n ...\n LL |     e: usize,\n-   |     ^^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/multiple-dead-codes-in-the-same-struct.rs:8:12\n@@ -43,7 +43,7 @@ LL | struct Bar {\n    |        --- field in this struct\n ...\n LL |     b: usize,\n-   |     ^^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/multiple-dead-codes-in-the-same-struct.rs:6:14"}, {"sha": "446447d974a865d23868fe44c53461366ff8e1e6", "filename": "src/test/ui/lint/dead-code/type-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -1,8 +1,8 @@\n error: type alias `Unused` is never used\n-  --> $DIR/type-alias.rs:4:1\n+  --> $DIR/type-alias.rs:4:6\n    |\n LL | type Unused = u8;\n-   | ^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/type-alias.rs:1:9"}, {"sha": "d26dd3aff95477bac8d0033b363e5637b810beaa", "filename": "src/test/ui/lint/dead-code/unused-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,7 +5,7 @@ LL | enum E {\n    |      - variant in this enum\n LL |     Foo(F),\n LL |     Bar(B),\n-   |     ^^^^^^\n+   |     ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-struct-variant.rs:1:9"}, {"sha": "7d2aadd5f808171f3975dcf4351d10d21e4c324c", "filename": "src/test/ui/lint/issue-17718-const-naming.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -1,8 +1,8 @@\n error: constant `foo` is never used\n-  --> $DIR/issue-17718-const-naming.rs:4:1\n+  --> $DIR/issue-17718-const-naming.rs:4:7\n    |\n LL | const foo: isize = 3;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-17718-const-naming.rs:2:9"}, {"sha": "5dd5634288970617ccb68b143a31ab13e07b49f1", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -1,8 +1,8 @@\n warning: struct `S` is never constructed\n-  --> $DIR/macro-span-replacement.rs:7:14\n+  --> $DIR/macro-span-replacement.rs:7:12\n    |\n LL |         $b $a;\n-   |              ^\n+   |            ^^\n ...\n LL |     m!(S struct);\n    |     ------------ in this macro invocation"}, {"sha": "0c9981c69fcba775217bd9fa07a4926458b3fd6b", "filename": "src/test/ui/union/union-fields-1.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,7 +5,7 @@ LL | union U1 {\n    |       -- field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-fields-1.rs:4:9\n@@ -19,13 +19,13 @@ error: field `a` is never read\n LL | union U2 {\n    |       -- field in this union\n LL |     a: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: field `a` is never read\n   --> $DIR/union-fields-1.rs:16:20\n    |\n LL | union NoDropLike { a: u8 }\n-   |       ----------   ^^^^^\n+   |       ----------   ^\n    |       |\n    |       field in this union\n \n@@ -36,7 +36,7 @@ LL | union U {\n    |       - field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0c9981c69fcba775217bd9fa07a4926458b3fd6b", "filename": "src/test/ui/union/union-fields-1.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,7 +5,7 @@ LL | union U1 {\n    |       -- field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-fields-1.rs:4:9\n@@ -19,13 +19,13 @@ error: field `a` is never read\n LL | union U2 {\n    |       -- field in this union\n LL |     a: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: field `a` is never read\n   --> $DIR/union-fields-1.rs:16:20\n    |\n LL | union NoDropLike { a: u8 }\n-   |       ----------   ^^^^^\n+   |       ----------   ^\n    |       |\n    |       field in this union\n \n@@ -36,7 +36,7 @@ LL | union U {\n    |       - field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6e21584c37c06186867d74468a1c9c8494d5630e", "filename": "src/test/ui/union/union-lint-dead-code.mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,7 +5,7 @@ LL | union Foo {\n    |       --- field in this union\n LL |     x: usize,\n LL |     b: bool,\n-   |     ^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-lint-dead-code.rs:4:9"}, {"sha": "6e21584c37c06186867d74468a1c9c8494d5630e", "filename": "src/test/ui/union/union-lint-dead-code.thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a319f3c992e8c77103b3c542bd9b20be63999205/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr?ref=a319f3c992e8c77103b3c542bd9b20be63999205", "patch": "@@ -5,7 +5,7 @@ LL | union Foo {\n    |       --- field in this union\n LL |     x: usize,\n LL |     b: bool,\n-   |     ^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-lint-dead-code.rs:4:9"}]}