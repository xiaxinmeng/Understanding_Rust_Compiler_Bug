{"sha": "ad7179d2a409faaf45465862f44efe7f989cd71e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzE3OWQyYTQwOWZhYWY0NTQ2NTg2MmY0NGVmZTdmOTg5Y2Q3MWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-23T15:24:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T13:44:17Z"}, "message": "fix discriminant_ty for non-enums", "tree": {"sha": "92fa4d8508c5185ebe756d7c53a5f5dd15753830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92fa4d8508c5185ebe756d7c53a5f5dd15753830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7179d2a409faaf45465862f44efe7f989cd71e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7179d2a409faaf45465862f44efe7f989cd71e", "html_url": "https://github.com/rust-lang/rust/commit/ad7179d2a409faaf45465862f44efe7f989cd71e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7179d2a409faaf45465862f44efe7f989cd71e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64fbe2fc485477406724a68372f4351dc7a08b0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64fbe2fc485477406724a68372f4351dc7a08b0a", "html_url": "https://github.com/rust-lang/rust/commit/64fbe2fc485477406724a68372f4351dc7a08b0a"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "3e172bd8d2a76f306d10d52e3a7afa3704fe2529", "filename": "src/librustc_middle/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftcx.rs?ref=ad7179d2a409faaf45465862f44efe7f989cd71e", "patch": "@@ -173,9 +173,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 tcx.intern_tup(&[ty, tcx.types.bool])\n             }\n             Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n-            Rvalue::Discriminant(ref place) => {\n-                place.ty(local_decls, tcx).ty.discriminant_type(tcx)\n-            }\n+            Rvalue::Discriminant(ref place) => place.ty(local_decls, tcx).ty.discriminant_ty(tcx),\n             Rvalue::NullaryOp(NullOp::Box, t) => tcx.mk_box(t),\n             Rvalue::NullaryOp(NullOp::SizeOf, _) => tcx.types.usize,\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {"}, {"sha": "4d050a7b48eac6696f9901cfed40fa57a8c721d4", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=ad7179d2a409faaf45465862f44efe7f989cd71e", "patch": "@@ -2040,6 +2040,8 @@ impl ReprOptions {\n         self.flags.contains(ReprFlags::HIDE_NICHE)\n     }\n \n+    /// Returns the discriminant type, given these `repr` options.\n+    /// This must only be called on enums!\n     pub fn discr_type(&self) -> attr::IntType {\n         self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))\n     }\n@@ -2272,6 +2274,7 @@ impl<'tcx> AdtDef {\n \n     #[inline]\n     pub fn eval_explicit_discr(&self, tcx: TyCtxt<'tcx>, expr_did: DefId) -> Option<Discr<'tcx>> {\n+        assert!(self.is_enum());\n         let param_env = tcx.param_env(expr_did);\n         let repr_type = self.repr.discr_type();\n         match tcx.const_eval_poly(expr_did) {\n@@ -2308,6 +2311,7 @@ impl<'tcx> AdtDef {\n         &'tcx self,\n         tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {\n+        assert!(self.is_enum());\n         let repr_type = self.repr.discr_type();\n         let initial = repr_type.initial_discriminant(tcx);\n         let mut prev_discr = None::<Discr<'tcx>>;\n@@ -2340,6 +2344,7 @@ impl<'tcx> AdtDef {\n         tcx: TyCtxt<'tcx>,\n         variant_index: VariantIdx,\n     ) -> Discr<'tcx> {\n+        assert!(self.is_enum());\n         let (val, offset) = self.discriminant_def_for_variant(variant_index);\n         let explicit_value = val\n             .and_then(|expr_did| self.eval_explicit_discr(tcx, expr_did))"}, {"sha": "aacca710dd037e02575206a114d06a86965706db", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=ad7179d2a409faaf45465862f44efe7f989cd71e", "patch": "@@ -2097,7 +2097,9 @@ impl<'tcx> TyS<'tcx> {\n         variant_index: VariantIdx,\n     ) -> Option<Discr<'tcx>> {\n         match self.kind {\n-            TyKind::Adt(adt, _) => Some(adt.discriminant_for_variant(tcx, variant_index)),\n+            TyKind::Adt(adt, _) if adt.is_enum() => {\n+                Some(adt.discriminant_for_variant(tcx, variant_index))\n+            }\n             TyKind::Generator(def_id, substs, _) => {\n                 Some(substs.as_generator().discriminant_for_variant(def_id, tcx, variant_index))\n             }\n@@ -2106,11 +2108,14 @@ impl<'tcx> TyS<'tcx> {\n     }\n \n     /// Returns the type of the discriminant of this type.\n-    pub fn discriminant_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    pub fn discriminant_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.kind {\n-            ty::Adt(adt_def, _) => adt_def.repr.discr_type().to_ty(tcx),\n+            ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),\n             ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),\n-            _ => bug!(\"{:?} does not have a discriminant\", self),\n+            _ => {\n+                // This can only be `0`, for now, so `u8` will suffice.\n+                tcx.types.u8\n+            }\n         }\n     }\n "}, {"sha": "f546f6236d7775dffd34e9e855df883d3f2b06f8", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7179d2a409faaf45465862f44efe7f989cd71e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=ad7179d2a409faaf45465862f44efe7f989cd71e", "patch": "@@ -581,10 +581,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"read_discriminant_value {:#?}\", op.layout);\n \n         // Get type and layout of the discriminant.\n-        let discr_layout = self.layout_of(op.layout.ty.discriminant_type(*self.tcx))?;\n+        let discr_layout = self.layout_of(op.layout.ty.discriminant_ty(*self.tcx))?;\n         trace!(\"discriminant type: {:?}\", discr_layout.ty);\n \n-        // We use \"discriminant\" to refer to the value associated with a particualr enum variant.\n+        // We use \"discriminant\" to refer to the value associated with a particular enum variant.\n         // This is not to be confused with its \"variant index\", which is just determining its position in the\n         // declared list of variants -- they can differ with explicitly assigned discriminants.\n         // We use \"tag\" to refer to how the discriminant is encoded in memory, which can be either"}]}