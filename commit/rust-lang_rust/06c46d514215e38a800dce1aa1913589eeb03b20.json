{"sha": "06c46d514215e38a800dce1aa1913589eeb03b20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YzQ2ZDUxNDIxNWUzOGE4MDBkY2UxYWExOTEzNTg5ZWViMDNiMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T18:22:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T18:22:51Z"}, "message": "auto merge of #6467 : alexcrichton/rust/better-rusti, r=bstrie\n\nThese few commits address a few existing issues:\r\n\r\n* #5469 - adding regression tests for `rusti`. This adds unit tests to the `rusti.rc` file (which needed some reorganization of the Makefile, see the first commit message). These are super-simple right now, and sadly can't test the output of the tests. I worked for a bit on making a compiletest version of the rusti tests, but I ended up hitting something which blocked me, although I've forgotten it by this point.\r\n* #5937 - regression test added, and it's fixed\r\n* #5803 - just doesn't appear to happen any more\r\n* #5784 - it's no longer broken, and it no longer spits out warnings about unused variables.\r\n\r\nI also did some investigation into #5774, and you may want to read the comment I left on the bug. The gist of the situation is that C++ exceptions across JIT code don't look like they're working, even though they [should be working](https://github.com/mozilla/rust/blob/3aa1122ec25d15a2a73a295f8298ad9c38b09a10/src/rustllvm/RustWrapper.cpp#L387). If anyone has any insight on this, that would be awesome!", "tree": {"sha": "8f2397cb2290be8823278b429eb11e15d3ee1467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2397cb2290be8823278b429eb11e15d3ee1467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06c46d514215e38a800dce1aa1913589eeb03b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06c46d514215e38a800dce1aa1913589eeb03b20", "html_url": "https://github.com/rust-lang/rust/commit/06c46d514215e38a800dce1aa1913589eeb03b20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06c46d514215e38a800dce1aa1913589eeb03b20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767e3ae86cba26437a60009d79ac2a295b41768e", "url": "https://api.github.com/repos/rust-lang/rust/commits/767e3ae86cba26437a60009d79ac2a295b41768e", "html_url": "https://github.com/rust-lang/rust/commit/767e3ae86cba26437a60009d79ac2a295b41768e"}, {"sha": "2ab1da5b011bf9a71f6e2bca0c124302aba50c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab1da5b011bf9a71f6e2bca0c124302aba50c1a", "html_url": "https://github.com/rust-lang/rust/commit/2ab1da5b011bf9a71f6e2bca0c124302aba50c1a"}], "stats": {"total": 90, "additions": 71, "deletions": 19}, "files": [{"sha": "e4ca72737db9ec498bfeb5ec77cd79893022d9b9", "filename": "configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06c46d514215e38a800dce1aa1913589eeb03b20/configure", "raw_url": "https://github.com/rust-lang/rust/raw/06c46d514215e38a800dce1aa1913589eeb03b20/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=06c46d514215e38a800dce1aa1913589eeb03b20", "patch": "@@ -695,6 +695,9 @@ do\n             # host lib dir\n             make_dir $h/stage$i/$CFG_LIBDIR\n \n+            # host test dir\n+            make_dir $h/stage$i/test\n+\n             # target bin dir\n             make_dir $h/stage$i/$CFG_LIBDIR/rustc/$t/bin\n "}, {"sha": "5cdd900d65f9c46781b925d39eb1b674d9e7b741", "filename": "mk/tests.mk", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06c46d514215e38a800dce1aa1913589eeb03b20/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/06c46d514215e38a800dce1aa1913589eeb03b20/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=06c46d514215e38a800dce1aa1913589eeb03b20", "patch": "@@ -289,50 +289,50 @@ else\n STDTESTDEP_$(1)_$(2)_$(3) =\n endif\n \n-$(3)/test/coretest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n+$(3)/stage$(1)/test/coretest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/stdtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n+$(3)/stage$(1)/test/stdtest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/syntaxtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n+$(3)/stage$(1)/test/syntaxtest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustctest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM_$(2)) \\\n                 $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustpkgtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustpkgtest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustitest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustitest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rusttest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rusttest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustdoctest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustdoctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n@@ -349,7 +349,7 @@ define DEF_TEST_CRATE_RULES\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(2),$(3)) $$(TESTARGS)\t\\\n \t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n@@ -360,7 +360,7 @@ define DEF_TEST_CRATE_RULES_arm-linux-androideabi\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n \t@$$(call E, run: $$< via adb)\n \t@$(CFG_ADB) push $$< $(CFG_ADB_TEST_DIR)\n \t@$(CFG_ADB) shell LD_LIBRARY_PATH=$(CFG_ADB_TEST_DIR) \\\n@@ -385,7 +385,7 @@ define DEF_TEST_CRATE_RULES_null\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n \t@$$(call E, run: skipped $$< )\n \t@touch $$@\n endef"}, {"sha": "21cc8d60e49e11756142e67ee9ac7d2bbadfa93a", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/06c46d514215e38a800dce1aa1913589eeb03b20/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/06c46d514215e38a800dce1aa1913589eeb03b20/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=06c46d514215e38a800dce1aa1913589eeb03b20", "patch": "@@ -35,7 +35,7 @@ use std::rl;\n  * A structure shared across REPL instances for storing history\n  * such as statements and view items. I wish the AST was sendable.\n  */\n-struct Repl {\n+pub struct Repl {\n     prompt: ~str,\n     binary: ~str,\n     running: bool,\n@@ -122,7 +122,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n \n     debug!(\"building driver input\");\n     let head = include_str!(\"wrapper.rs\").to_owned();\n-    let foot = fmt!(\"%s\\nfn main() {\\n%s\\n\\nprint({\\n%s\\n})\\n}\",\n+    let foot = fmt!(\"fn main() {\\n%s\\n%s\\n\\nprint({\\n%s\\n})\\n}\",\n                     repl.view_items, repl.stmts, input);\n     let wrapped = driver::str_input(head + foot);\n \n@@ -328,8 +328,8 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n \n /// Executes a line of input, which may either be rust code or a\n /// :command. Returns a new Repl if it has changed.\n-fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n-            use_rl: bool)\n+pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n+                use_rl: bool)\n     -> Option<Repl> {\n     if line.starts_with(\":\") {\n         let full = line.substr(1, line.len() - 1);\n@@ -421,3 +421,52 @@ pub fn main() {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    fn repl() -> Repl {\n+        Repl {\n+            prompt: ~\"rusti> \",\n+            binary: ~\"rusti\",\n+            running: true,\n+            view_items: ~\"\",\n+            lib_search_paths: ~[],\n+            stmts: ~\"\"\n+        }\n+    }\n+\n+    fn run_cmds(cmds: &[&str]) {\n+        let mut r = repl();\n+        for cmds.each |&cmd| {\n+            let result = run_line(&mut r, io::stdin(), io::stdout(),\n+                                  cmd.to_owned(), false);\n+            r = result.expect(fmt!(\"the command '%s' failed\", cmd));\n+        }\n+    }\n+\n+    #[test]\n+    fn run_all() {\n+        // By default, unit tests are run in parallel. Rusti, on the other hand,\n+        // does not enjoy doing this. I suspect that it is because the LLVM\n+        // bindings are not thread-safe (when running parallel tests, some tests\n+        // were triggering assertions in LLVM (or segfaults). Hence, this\n+        // function exists to run everything serially (sadface).\n+        //\n+        // To get some interesting output, run with RUST_LOG=rusti::tests\n+\n+        debug!(\"hopefully this runs\");\n+        run_cmds([\"\"]);\n+\n+        debug!(\"regression test for #5937\");\n+        run_cmds([\"use core;\", \"\"]);\n+\n+        debug!(\"regression test for #5784\");\n+        run_cmds([\"let a = 1;\"]);\n+\n+        debug!(\"regression test for #5803\");\n+        run_cmds([\"spawn( || println(\\\"Please don't segfault\\\") );\",\n+                  \"do spawn { println(\\\"Please?\\\"); }\"]);\n+    }\n+}"}, {"sha": "9c3026f0915cde12c1cc978d9d21f5ff9440d7da", "filename": "src/librusti/wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06c46d514215e38a800dce1aa1913589eeb03b20/src%2Flibrusti%2Fwrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c46d514215e38a800dce1aa1913589eeb03b20/src%2Flibrusti%2Fwrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fwrapper.rs?ref=06c46d514215e38a800dce1aa1913589eeb03b20", "patch": "@@ -18,8 +18,8 @@\n #[allow(unrecognized_lint)];\n #[allow(unused_imports)];\n #[allow(while_true)];\n-#[allow(dead_assignment)];\n #[allow(unused_variable)];\n+#[allow(dead_assignment)];\n #[allow(unused_unsafe)];\n #[allow(unused_mut)];\n "}, {"sha": "e661e758d41a5f15293aab750b36a8de6183a677", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06c46d514215e38a800dce1aa1913589eeb03b20/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c46d514215e38a800dce1aa1913589eeb03b20/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=06c46d514215e38a800dce1aa1913589eeb03b20", "patch": "@@ -79,10 +79,10 @@ fn is_rwx(p: &Path) -> bool {\n \n fn test_sysroot() -> Path {\n     // Totally gross hack but it's just for test cases.\n-    // Infer the sysroot from the exe name and tack \"stage2\"\n-    // onto it. (Did I mention it was a gross hack?)\n+    // Infer the sysroot from the exe name and pray that it's right.\n+    // (Did I mention it was a gross hack?)\n     let self_path = os::self_exe_path().expect(\"Couldn't get self_exe path\");\n-    self_path.pop().push(\"stage2\")\n+    self_path.pop()\n }\n \n #[test]"}]}