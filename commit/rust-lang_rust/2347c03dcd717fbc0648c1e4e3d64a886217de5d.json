{"sha": "2347c03dcd717fbc0648c1e4e3d64a886217de5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDdjMDNkY2Q3MTdmYmMwNjQ4YzFlNGUzZDY0YTg4NjIxN2RlNWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-10T17:39:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-10T17:40:22Z"}, "message": "Introduce CompletionOptions", "tree": {"sha": "c778877ddc5e17ee7adca15324fe3f5a417f062a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c778877ddc5e17ee7adca15324fe3f5a417f062a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2347c03dcd717fbc0648c1e4e3d64a886217de5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2347c03dcd717fbc0648c1e4e3d64a886217de5d", "html_url": "https://github.com/rust-lang/rust/commit/2347c03dcd717fbc0648c1e4e3d64a886217de5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2347c03dcd717fbc0648c1e4e3d64a886217de5d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9d66bbee865bd4337366f1540f8e5aa8d82c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9d66bbee865bd4337366f1540f8e5aa8d82c18", "html_url": "https://github.com/rust-lang/rust/commit/6b9d66bbee865bd4337366f1540f8e5aa8d82c18"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "a27e0fc1592a65cc9e4fa3cf8201b5792d63d5c3", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=2347c03dcd717fbc0648c1e4e3d64a886217de5d", "patch": "@@ -33,6 +33,23 @@ pub use crate::completion::completion_item::{\n     CompletionItem, CompletionItemKind, InsertTextFormat,\n };\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct CompletionOptions {\n+    pub enable_postfix_completions: bool,\n+    pub add_call_parenthesis: bool,\n+    pub add_call_argument_snippets: bool,\n+}\n+\n+impl Default for CompletionOptions {\n+    fn default() -> Self {\n+        CompletionOptions {\n+            enable_postfix_completions: true,\n+            add_call_parenthesis: true,\n+            add_call_argument_snippets: true,\n+        }\n+    }\n+}\n+\n /// Main entry point for completion. We run completion as a two-phase process.\n ///\n /// First, we look at the position and collect a so-called `CompletionContext.\n@@ -55,8 +72,12 @@ pub use crate::completion::completion_item::{\n /// `foo` *should* be present among the completion variants. Filtering by\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n-pub(crate) fn completions(db: &RootDatabase, position: FilePosition) -> Option<Completions> {\n-    let ctx = CompletionContext::new(db, position)?;\n+pub(crate) fn completions(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+    opts: &CompletionOptions,\n+) -> Option<Completions> {\n+    let ctx = CompletionContext::new(db, position, opts)?;\n \n     let mut acc = Completions::default();\n "}, {"sha": "6d000548d74b5700c50d4542aa18bc627d643b59", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=2347c03dcd717fbc0648c1e4e3d64a886217de5d", "patch": "@@ -12,7 +12,7 @@ use crate::{\n };\n \n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.db.feature_flags.get(\"completion.enable-postfix\") {\n+    if !ctx.options.enable_postfix_completions {\n         return;\n     }\n "}, {"sha": "3646fb8dcc30b2e1e53e1bb02b53f71e687c957c", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=2347c03dcd717fbc0648c1e4e3d64a886217de5d", "patch": "@@ -11,14 +11,15 @@ use ra_syntax::{\n };\n use ra_text_edit::AtomTextEdit;\n \n-use crate::FilePosition;\n+use crate::{completion::CompletionOptions, FilePosition};\n \n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n pub(crate) struct CompletionContext<'a> {\n     pub(super) sema: Semantics<'a, RootDatabase>,\n     pub(super) db: &'a RootDatabase,\n+    pub(super) options: &'a CompletionOptions,\n     pub(super) offset: TextUnit,\n     /// The token before the cursor, in the original file.\n     pub(super) original_token: SyntaxToken,\n@@ -57,6 +58,7 @@ impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a RootDatabase,\n         position: FilePosition,\n+        options: &'a CompletionOptions,\n     ) -> Option<CompletionContext<'a>> {\n         let sema = Semantics::new(db);\n \n@@ -80,6 +82,7 @@ impl<'a> CompletionContext<'a> {\n         let mut ctx = CompletionContext {\n             sema,\n             db,\n+            options,\n             original_token,\n             token,\n             offset: position.offset,"}, {"sha": "1d14e963625cdf07b5a8ffc7bce143141f642380", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=2347c03dcd717fbc0648c1e4e3d64a886217de5d", "patch": "@@ -321,14 +321,18 @@ impl Into<Vec<CompletionItem>> for Completions {\n \n #[cfg(test)]\n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    use crate::completion::completions;\n-    use crate::mock_analysis::{analysis_and_position, single_file_with_position};\n+    use crate::{\n+        completion::{completions, CompletionOptions},\n+        mock_analysis::{analysis_and_position, single_file_with_position},\n+    };\n+\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)\n     } else {\n         single_file_with_position(code)\n     };\n-    let completions = completions(&analysis.db, position).unwrap();\n+    let options = CompletionOptions::default();\n+    let completions = completions(&analysis.db, position, &options).unwrap();\n     let completion_items: Vec<CompletionItem> = completions.into();\n     let mut kind_completions: Vec<CompletionItem> =\n         completion_items.into_iter().filter(|c| c.completion_kind == kind).collect();"}, {"sha": "25aff329edfa13177ffa5bc9b5ece18bc19602f5", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=2347c03dcd717fbc0648c1e4e3d64a886217de5d", "patch": "@@ -212,21 +212,14 @@ impl Completions {\n                 .detail(function_signature.to_string());\n \n         // If not an import, add parenthesis automatically.\n-        if ctx.use_item_syntax.is_none()\n-            && !ctx.is_call\n-            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n-        {\n+        if ctx.use_item_syntax.is_none() && !ctx.is_call && ctx.options.add_call_parenthesis {\n             tested_by!(inserts_parens_for_function_calls);\n \n             let (snippet, label) = if params.is_empty() || has_self_param && params.len() == 1 {\n                 (format!(\"{}()$0\", name), format!(\"{}()\", name))\n             } else {\n                 builder = builder.trigger_call_info();\n-                let snippet = if ctx\n-                    .db\n-                    .feature_flags\n-                    .get(\"completion.insertion.add-argument-snippets\")\n-                {\n+                let snippet = if ctx.options.add_call_argument_snippets {\n                     let to_skip = if has_self_param { 1 } else { 0 };\n                     let function_params_snippet = join(\n                         function_signature.parameter_names.iter().skip(to_skip).enumerate().map("}, {"sha": "0d91ea7497879b0f3501c1b266a1fbe73810b3f7", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347c03dcd717fbc0648c1e4e3d64a886217de5d/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=2347c03dcd717fbc0648c1e4e3d64a886217de5d", "patch": "@@ -62,7 +62,7 @@ use crate::display::ToNav;\n pub use crate::{\n     assists::{Assist, AssistId},\n     call_hierarchy::CallItem,\n-    completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n+    completion::{CompletionItem, CompletionItemKind, CompletionOptions, InsertTextFormat},\n     diagnostics::Severity,\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n@@ -451,7 +451,16 @@ impl Analysis {\n \n     /// Computes completions at the given position.\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        self.with_db(|db| completion::completions(db, position).map(Into::into))\n+        let opts = CompletionOptions {\n+            enable_postfix_completions: self.feature_flags().get(\"completion.enable-postfix\"),\n+            add_call_parenthesis: self\n+                .feature_flags()\n+                .get(\"completion.insertion.add-call-parenthesis\"),\n+            add_call_argument_snippets: self\n+                .feature_flags()\n+                .get(\"completion.insertion.add-argument-snippets\"),\n+        };\n+        self.with_db(|db| completion::completions(db, position, &opts).map(Into::into))\n     }\n \n     /// Computes assists (aka code actions aka intentions) for the given"}]}