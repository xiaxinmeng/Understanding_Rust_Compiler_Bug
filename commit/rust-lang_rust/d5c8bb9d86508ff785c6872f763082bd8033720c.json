{"sha": "d5c8bb9d86508ff785c6872f763082bd8033720c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YzhiYjlkODY1MDhmZjc4NWM2ODcyZjc2MzA4MmJkODAzMzcyMGM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-08-09T18:19:24Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-08-09T18:19:24Z"}, "message": "A little backwarding cleanup/refactoring.", "tree": {"sha": "3495461a6756ea56947dcec1d0b8afb7a658ea7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3495461a6756ea56947dcec1d0b8afb7a658ea7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5c8bb9d86508ff785c6872f763082bd8033720c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c8bb9d86508ff785c6872f763082bd8033720c", "html_url": "https://github.com/rust-lang/rust/commit/d5c8bb9d86508ff785c6872f763082bd8033720c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5c8bb9d86508ff785c6872f763082bd8033720c/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a334adaab98090f69ab9d9665bf5cfef5d6b3b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/a334adaab98090f69ab9d9665bf5cfef5d6b3b85", "html_url": "https://github.com/rust-lang/rust/commit/a334adaab98090f69ab9d9665bf5cfef5d6b3b85"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "f58c4b65734d0d61283636f8486102832e8c47aa", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d5c8bb9d86508ff785c6872f763082bd8033720c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c8bb9d86508ff785c6872f763082bd8033720c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d5c8bb9d86508ff785c6872f763082bd8033720c", "patch": "@@ -6557,10 +6557,9 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: &span, m: @ty::method,\n                                          C_int(1)]);\n     llself_obj_ptr = bcx.build.Load(llself_obj_ptr);\n \n-    // Cast it back to the type of fcx.llenv, tho, so LLVM won't complain.\n-    // TODO: could we just cast this to T_ptr(cx.ccx.rust_object_type)?\n+    // Cast it back to pointer-to-object-type, so LLVM won't complain.\n     llself_obj_ptr = bcx.build.PointerCast(llself_obj_ptr,\n-                                           val_ty(fcx.llenv));\n+                                           T_ptr(cx.ccx.rust_object_type));\n \n     // The 'llretptr' that will arrive in the backwarding function we're\n     // creating also needs to be the correct type.  Cast it to the method's\n@@ -6571,13 +6570,6 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: &span, m: @ty::method,\n         llretptr = bcx.build.PointerCast(llretptr, T_ptr(llretty));\n     }\n \n-    // Now we need the outer object's vtable.  Increment llself_obj_ptr to get\n-    // at it.\n-    let llouter_obj_vtbl =\n-        bcx.build.GEP(llself_obj_ptr,\n-                      ~[C_int(0), C_int(abi::obj_field_vtbl)]);\n-    llouter_obj_vtbl = bcx.build.Load(llouter_obj_vtbl);\n-\n     // Get the index of the method we want.\n     let ix: uint = 0u;\n     alt ty::struct(bcx_tcx(bcx), outer_obj_ty) {\n@@ -6591,8 +6583,13 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: &span, m: @ty::method,\n       }\n     }\n \n-    // Pick out the method being backwarded to from the vtable.\n+    // Pick out the method being backwarded to from the outer object's vtable.\n     let vtbl_type = T_ptr(T_array(T_ptr(T_nil()), ix + 1u));\n+\n+    let llouter_obj_vtbl =\n+        bcx.build.GEP(llself_obj_ptr,\n+                      ~[C_int(0), C_int(abi::obj_field_vtbl)]);\n+    llouter_obj_vtbl = bcx.build.Load(llouter_obj_vtbl);\n     llouter_obj_vtbl = bcx.build.PointerCast(llouter_obj_vtbl, vtbl_type);\n \n     let llouter_mthd =\n@@ -6795,10 +6792,9 @@ fn process_fwding_mthd(cx: @local_ctxt, sp: &span, m: @ty::method,\n                                      backwarding_vtbl,\n                                      llinner_obj_body);\n \n-    // Cast self_stack back to the type of fcx.llenv to make LLVM happy.\n-    // TODO: could we just cast this to T_ptr(cx.ccx.rust_object_type)?\n+    // Cast self_stack back to pointer-to-object-type to make LLVM happy.\n     self_stack = bcx.build.PointerCast(self_stack,\n-                                       val_ty(fcx.llenv));\n+                                       T_ptr(cx.ccx.rust_object_type));\n \n     // Set up the three implicit arguments to the original method we'll need\n     // to call."}]}