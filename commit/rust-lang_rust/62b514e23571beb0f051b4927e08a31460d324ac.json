{"sha": "62b514e23571beb0f051b4927e08a31460d324ac", "node_id": "C_kwDOAAsO6NoAKDYyYjUxNGUyMzU3MWJlYjBmMDUxYjQ5MjdlMDhhMzE0NjBkMzI0YWM", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-10T22:34:38Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:24Z"}, "message": "Update README", "tree": {"sha": "3f708eb4592deab40caac05e609a1f2055309750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f708eb4592deab40caac05e609a1f2055309750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b514e23571beb0f051b4927e08a31460d324ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRDwACgkQGBtJ+fOP\nM3SOLQv/dZ9lsednRMGeUNNUFNuORiqe2jkyZO5CrsMdUkDRsxkQgdMcbuOL7y/M\nqpWgW+jp/I0got5GiYL6JDKI2sTr50Jjmeq89/mjO8TnSbGVA5G/OAj0eOGs1cqm\nqMQ3W8yEaeoYIICmivpMbllYU9CjymuOPcrkI1jE6J4So/216OR68VpQw5swMUrA\nbWVA1o4KCfy81kEq70zBwg7BwwbTy2dl0QBI+mGD4ijtBkg+Ikq45sF1w+7Gg4Tt\ntyLUIKGvniiWwbnBT9W/C2gEBjN6oj1JaOi+CSLA+cs2sJpZrPWYqcsKTREKWjF6\nWeiyuAsUCKDsbacfNwk5ZlO/HCbKThcCLGkL+/bLVldNhgrXPUWMeU4eVpKAvKLU\nbBkzZpPH4jukEvdxSxuKykLSQmeNIS9lpJ94ZYWUo2WFxZH6QdiQk11paaaAKpzp\neJVcuNvKxuJghAOluY66zK5NBrjkEl9JuHUgHop4mFhVORrdKqfuCpagfB2zz11X\nuCPXcpLv\n=ttMy\n-----END PGP SIGNATURE-----", "payload": "tree 3f708eb4592deab40caac05e609a1f2055309750\nparent 89138a67dc2b9f7ac5363bad114984cb35033158\nauthor Andy Wang <cbeuw.andy@gmail.com> 1652222078 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539324 +0100\n\nUpdate README\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b514e23571beb0f051b4927e08a31460d324ac", "html_url": "https://github.com/rust-lang/rust/commit/62b514e23571beb0f051b4927e08a31460d324ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b514e23571beb0f051b4927e08a31460d324ac/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89138a67dc2b9f7ac5363bad114984cb35033158", "url": "https://api.github.com/repos/rust-lang/rust/commits/89138a67dc2b9f7ac5363bad114984cb35033158", "html_url": "https://github.com/rust-lang/rust/commit/89138a67dc2b9f7ac5363bad114984cb35033158"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "ece45fca128cbb76148c900b15049ab58eaf49ad", "filename": "README.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62b514e23571beb0f051b4927e08a31460d324ac/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/62b514e23571beb0f051b4927e08a31460d324ac/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=62b514e23571beb0f051b4927e08a31460d324ac", "patch": "@@ -20,7 +20,8 @@ for example:\n   or an invalid enum discriminant)\n * **Experimental**: Violations of the [Stacked Borrows] rules governing aliasing\n   for reference types\n-* **Experimental**: Data races (but no weak memory effects)\n+* **Experimental**: Data races\n+* **Experimental**: Weak memory emulation\n \n On top of that, Miri will also tell you about memory leaks: when there is memory\n still allocated at the end of the execution, and that memory is not reachable\n@@ -61,9 +62,11 @@ in your program, and cannot run all programs:\n   not support networking. System API support varies between targets; if you run\n   on Windows it is a good idea to use `--target x86_64-unknown-linux-gnu` to get\n   better support.\n-* Threading support is not finished yet. E.g., weak memory effects are not\n-  emulated and spin loops (without syscalls) just loop forever. There is no\n-  threading support on Windows.\n+* Threading support is not finished yet. E.g. spin loops (without syscalls) just\n+  loop forever. There is no threading support on Windows.\n+* Weak memory emulation may produce weak behaivours unobservable by compiled\n+  programs running on real hardware when `SeqCst` fences are used, and it cannot\n+  produce all behaviors possibly observable on real hardware.\n \n [rust]: https://www.rust-lang.org/\n [mir]: https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md\n@@ -322,13 +325,13 @@ to Miri failing to detect cases of undefined behavior in a program.\n   [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n   means no aliasing violations will be detected.  Using this flag is **unsound**\n   (but the affected soundness rules are experimental).\n-* `-Zmiri-disable-weak-memory-emulation` disables the emulation of some C++11 weak\n-  memory effects.\n * `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n   enforced by default.  This is mostly useful to focus on other failures (such\n   as out-of-bounds accesses) first.  Setting this flag means Miri can miss bugs\n   in your program.  However, this can also help to make Miri run faster.  Using\n   this flag is **unsound**.\n+* `-Zmiri-disable-weak-memory-emulation` disables the emulation of some C++11 weak\n+  memory effects.\n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n    This can be used to find which parts of your program are executing slowly under Miri.\n    The profile is written out to a file with the prefix `<name>`, and can be processed"}, {"sha": "b9ab1292311701179d4e0eb33aee66611edaf300", "filename": "src/weak_memory.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62b514e23571beb0f051b4927e08a31460d324ac/src%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b514e23571beb0f051b4927e08a31460d324ac/src%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fweak_memory.rs?ref=62b514e23571beb0f051b4927e08a31460d324ac", "patch": "@@ -1,26 +1,26 @@\n //! Implementation of C++11-consistent weak memory emulation using store buffers\n //! based on Dynamic Race Detection for C++ (\"the paper\"):\n //! https://www.doc.ic.ac.uk/~afd/homepages/papers/pdfs/2017/POPL.pdf\n-//! \n+//!\n //! This implementation will never generate weak memory behaviours forbidden by the C++11 model,\n //! but it is incapable of producing all possible weak behaviours allowed by the model. There are\n //! certain weak behaviours observable on real hardware but not while using this.\n-//! \n+//!\n //! Note that this implementation does not take into account of C++20's memory model revision to SC accesses\n //! and fences introduced by P0668 (https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0668r5.html).\n //! This implementation is not fully correct under the revised C++20 model and may generate behaviours C++20\n //! disallows.\n-//! \n+//!\n //! Rust follows the full C++20 memory model (except for the Consume ordering). It is therefore\n //! possible for this implementation to generate behaviours never observable when the same program is compiled and\n //! run natively. Unfortunately, no literature exists at the time of writing which proposes an implementable and C++20-compatible\n //! relaxed memory model that supports all atomic operation existing in Rust. The closest one is\n //! A Promising Semantics for Relaxed-Memory Concurrency by Jeehoon Kang et al. (https://www.cs.tau.ac.il/~orilahav/papers/popl17.pdf)\n //! However, this model lacks SC accesses and is therefore unusable by Miri (SC accesses are everywhere in library code).\n-//! \n+//!\n //! If you find anything that proposes a relaxed memory model that is C++20-consistent, supports all orderings Rust's atomic accesses\n //! and fences accept, and is implementable (with operational semanitcs), please open a GitHub issue!\n-//! \n+//!\n //! One characteristic of this implementation, in contrast to some other notable operational models such as ones proposed in\n //! Taming Release-Acquire Consistency by Ori Lahav et al. (https://plv.mpi-sws.org/sra/paper.pdf) or Promising Semantics noted above,\n //! is that this implementation does not require each thread to hold an isolated view of the entire memory. Here, store buffers are per-location"}]}