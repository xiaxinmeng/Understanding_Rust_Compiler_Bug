{"sha": "618f5a08a13a90b65455cf8dc42e109e520b5dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOGY1YTA4YTEzYTkwYjY1NDU1Y2Y4ZGM0MmUxMDllNTIwYjVkYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-09T09:48:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-09T09:48:41Z"}, "message": "Auto merge of #57617 - mark-i-m:multiple-matcher-bindings, r=petrochenkov\n\nError on duplicate matcher bindings\n\nfix  #57593\n\nThis should not be merged without a crater run and maybe an FCP. Discussion is ongoing at  #57593.\n\nTODO:\n- [x] write tests\n- [x] crater run\n- [x] ~maybe need edition gating?~ not for 1 regression /centril\n\nr? @petrochenkov", "tree": {"sha": "e5e66a64ec9479f7af0f87bdcd51f6949154c50c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e66a64ec9479f7af0f87bdcd51f6949154c50c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/618f5a08a13a90b65455cf8dc42e109e520b5dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/618f5a08a13a90b65455cf8dc42e109e520b5dbf", "html_url": "https://github.com/rust-lang/rust/commit/618f5a08a13a90b65455cf8dc42e109e520b5dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/618f5a08a13a90b65455cf8dc42e109e520b5dbf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312f3827faa8dc3b8e1dc8c1ad685a6222f16f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/312f3827faa8dc3b8e1dc8c1ad685a6222f16f03", "html_url": "https://github.com/rust-lang/rust/commit/312f3827faa8dc3b8e1dc8c1ad685a6222f16f03"}, {"sha": "c25d6b83441e0c060ee0273193ef27b29e1318cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25d6b83441e0c060ee0273193ef27b29e1318cd", "html_url": "https://github.com/rust-lang/rust/commit/c25d6b83441e0c060ee0273193ef27b29e1318cd"}], "stats": {"total": 209, "additions": 171, "deletions": 38}, "files": [{"sha": "3ff76e98d7b89266e3d6780d76312517d9cc6cfe", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -352,6 +352,12 @@ declare_lint! {\n     \"outlives requirements can be inferred\"\n }\n \n+declare_lint! {\n+    pub DUPLICATE_MATCHER_BINDING_NAME,\n+    Warn,\n+    \"duplicate macro matcher binding name\"\n+}\n+\n /// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n pub mod parser {\n     declare_lint! {"}, {"sha": "8952ae98e597e7a7d000c0c45e85a4e86110be6f", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -27,7 +27,7 @@ use crate::errors::{DiagnosticBuilder, DiagnosticId};\n use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n use crate::hir::intravisit;\n use crate::hir;\n-use crate::lint::builtin::BuiltinLintDiagnostics;\n+use crate::lint::builtin::{BuiltinLintDiagnostics, DUPLICATE_MATCHER_BINDING_NAME};\n use crate::lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n use crate::session::{Session, DiagnosticMessageId};\n use std::{hash, ptr};\n@@ -82,6 +82,7 @@ impl Lint {\n         match lint_id {\n             BufferedEarlyLintId::QuestionMarkMacroSep => QUESTION_MARK_MACRO_SEP,\n             BufferedEarlyLintId::IllFormedAttributeInput => ILL_FORMED_ATTRIBUTE_INPUT,\n+            BufferedEarlyLintId::DuplicateMacroMatcherBindingName => DUPLICATE_MATCHER_BINDING_NAME,\n         }\n     }\n "}, {"sha": "5c243e13890731a8185141f35247b28b4626790b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -348,6 +348,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(DUPLICATE_MATCHER_BINDING_NAME),\n+            reference: \"issue #57593 <https://github.com/rust-lang/rust/issues/57593>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints."}, {"sha": "29cb9cd7f30b5b33d281901282338d7554e9e3df", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -12,6 +12,8 @@ pub enum BufferedEarlyLintId {\n     /// Usage of `?` as a macro separator is deprecated.\n     QuestionMarkMacroSep,\n     IllFormedAttributeInput,\n+    /// Usage of a duplicate macro matcher binding name.\n+    DuplicateMacroMatcherBindingName,\n }\n \n /// Stores buffered lint info which can later be passed to `librustc`."}, {"sha": "33ea675f9d1bb12e4722a4e809ea919ea3060702", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 62, "deletions": 5, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -17,10 +17,10 @@ use crate::parse::token::Token::*;\n use crate::symbol::Symbol;\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP, symbol::Ident};\n use log::debug;\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n \n@@ -246,8 +246,12 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt<'_>,\n // Holy self-referential!\n \n /// Converts a `macro_rules!` invocation into a syntax extension.\n-pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition: Edition)\n-               -> SyntaxExtension {\n+pub fn compile(\n+    sess: &ParseSess,\n+    features: &Features,\n+    def: &ast::Item,\n+    edition: Edition\n+) -> SyntaxExtension {\n     let lhs_nm = ast::Ident::with_empty_ctxt(Symbol::gensym(\"lhs\"));\n     let rhs_nm = ast::Ident::with_empty_ctxt(Symbol::gensym(\"rhs\"));\n \n@@ -355,7 +359,13 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n \n     // don't abort iteration early, so that errors for multiple lhses can be reported\n     for lhs in &lhses {\n-        valid &= check_lhs_no_empty_seq(sess, &[lhs.clone()])\n+        valid &= check_lhs_no_empty_seq(sess, &[lhs.clone()]);\n+        valid &= check_lhs_duplicate_matcher_bindings(\n+            sess,\n+            &[lhs.clone()],\n+            &mut FxHashMap::default(),\n+            def.id\n+        );\n     }\n \n     let expander: Box<_> = Box::new(MacroRulesMacroExpander {\n@@ -456,6 +466,53 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[quoted::TokenTree]) -> bool {\n     true\n }\n \n+/// Check that the LHS contains no duplicate matcher bindings. e.g. `$a:expr, $a:expr` would be\n+/// illegal, since it would be ambiguous which `$a` to use if we ever needed to.\n+fn check_lhs_duplicate_matcher_bindings(\n+    sess: &ParseSess,\n+    tts: &[quoted::TokenTree],\n+    metavar_names: &mut FxHashMap<Ident, Span>,\n+    node_id: ast::NodeId,\n+) -> bool {\n+    use self::quoted::TokenTree;\n+    use crate::early_buffered_lints::BufferedEarlyLintId;\n+    for tt in tts {\n+        match *tt {\n+            TokenTree::MetaVarDecl(span, name, _kind) => {\n+                if let Some(&prev_span) = metavar_names.get(&name) {\n+                    // FIXME(mark-i-m): in a few cycles, make this a hard error.\n+                    // sess.span_diagnostic\n+                    //     .struct_span_err(span, \"duplicate matcher binding\")\n+                    //     .span_note(prev_span, \"previous declaration was here\")\n+                    //     .emit();\n+                    sess.buffer_lint(\n+                        BufferedEarlyLintId::DuplicateMacroMatcherBindingName,\n+                        crate::source_map::MultiSpan::from(vec![prev_span, span]),\n+                        node_id,\n+                        \"duplicate matcher binding\"\n+                    );\n+                    return false;\n+                } else {\n+                    metavar_names.insert(name, span);\n+                }\n+            }\n+            TokenTree::Delimited(_, ref del) => {\n+                if !check_lhs_duplicate_matcher_bindings(sess, &del.tts, metavar_names, node_id) {\n+                    return false;\n+                }\n+            },\n+            TokenTree::Sequence(_, ref seq) => {\n+                if !check_lhs_duplicate_matcher_bindings(sess, &seq.tts, metavar_names, node_id) {\n+                    return false;\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    true\n+}\n+\n fn check_rhs(sess: &ParseSess, rhs: &quoted::TokenTree) -> bool {\n     match *rhs {\n         quoted::TokenTree::Delimited(..) => return true,"}, {"sha": "488339b025dcef7b147ef38fe434debd6bb81c7d", "filename": "src/test/run-pass/macros/macro-follow.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-follow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-follow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-follow.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -73,7 +73,7 @@ macro_rules! follow_block {\n     ($b:block $t:ty) => {};\n     ($b:block $s:stmt) => {};\n     ($b:block $p:path) => {};\n-    ($b:block $b:block) => {};\n+    ($b:block $c:block) => {};\n     ($b:block $i:ident) => {};\n     ($b:block $t:tt) => {};\n     ($b:block $i:item) => {};\n@@ -99,9 +99,9 @@ macro_rules! follow_ident {\n     ($i:ident $s:stmt) => {};\n     ($i:ident $p:path) => {};\n     ($i:ident $b:block) => {};\n-    ($i:ident $i:ident) => {};\n+    ($i:ident $j:ident) => {};\n     ($i:ident $t:tt) => {};\n-    ($i:ident $i:item) => {};\n+    ($i:ident $j:item) => {};\n     ($i:ident $m:meta) => {};\n }\n // FOLLOW(tt) = any token\n@@ -120,12 +120,12 @@ macro_rules! follow_tt {\n     ($t:tt ident) => {};\n     ($t:tt $p:pat) => {};\n     ($t:tt $e:expr) => {};\n-    ($t:tt $t:ty) => {};\n+    ($t:tt $v:ty) => {};\n     ($t:tt $s:stmt) => {};\n     ($t:tt $p:path) => {};\n     ($t:tt $b:block) => {};\n     ($t:tt $i:ident) => {};\n-    ($t:tt $t:tt) => {};\n+    ($t:tt $v:tt) => {};\n     ($t:tt $i:item) => {};\n     ($t:tt $m:meta) => {};\n }\n@@ -149,9 +149,9 @@ macro_rules! follow_item {\n     ($i:item $s:stmt) => {};\n     ($i:item $p:path) => {};\n     ($i:item $b:block) => {};\n-    ($i:item $i:ident) => {};\n+    ($i:item $j:ident) => {};\n     ($i:item $t:tt) => {};\n-    ($i:item $i:item) => {};\n+    ($i:item $j:item) => {};\n     ($i:item $m:meta) => {};\n }\n // FOLLOW(meta) = any token\n@@ -177,7 +177,7 @@ macro_rules! follow_meta {\n     ($m:meta $i:ident) => {};\n     ($m:meta $t:tt) => {};\n     ($m:meta $i:item) => {};\n-    ($m:meta $m:meta) => {};\n+    ($m:meta $n:meta) => {};\n }\n \n fn main() {}"}, {"sha": "10b44e0017532498b97b18d159b6f83de5a6f58f", "filename": "src/test/ui/macros/macro-follow.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -12,11 +12,11 @@ macro_rules! follow_pat {\n     ($p:pat >) => {};        //~ERROR `$p:pat` is followed by `>`\n     ($p:pat +) => {};        //~ERROR `$p:pat` is followed by `+`\n     ($p:pat ident) => {};    //~ERROR `$p:pat` is followed by `ident`\n-    ($p:pat $p:pat) => {};   //~ERROR `$p:pat` is followed by `$p:pat`\n+    ($p:pat $q:pat) => {};   //~ERROR `$p:pat` is followed by `$q:pat`\n     ($p:pat $e:expr) => {};  //~ERROR `$p:pat` is followed by `$e:expr`\n     ($p:pat $t:ty) => {};    //~ERROR `$p:pat` is followed by `$t:ty`\n     ($p:pat $s:stmt) => {};  //~ERROR `$p:pat` is followed by `$s:stmt`\n-    ($p:pat $p:path) => {};  //~ERROR `$p:pat` is followed by `$p:path`\n+    ($p:pat $q:path) => {};  //~ERROR `$p:pat` is followed by `$q:path`\n     ($p:pat $b:block) => {}; //~ERROR `$p:pat` is followed by `$b:block`\n     ($p:pat $i:ident) => {}; //~ERROR `$p:pat` is followed by `$i:ident`\n     ($p:pat $t:tt) => {};    //~ERROR `$p:pat` is followed by `$t:tt`\n@@ -37,7 +37,7 @@ macro_rules! follow_expr {\n     ($e:expr if) => {};       //~ERROR `$e:expr` is followed by `if`\n     ($e:expr in) => {};       //~ERROR `$e:expr` is followed by `in`\n     ($e:expr $p:pat) => {};   //~ERROR `$e:expr` is followed by `$p:pat`\n-    ($e:expr $e:expr) => {};  //~ERROR `$e:expr` is followed by `$e:expr`\n+    ($e:expr $f:expr) => {};  //~ERROR `$e:expr` is followed by `$f:expr`\n     ($e:expr $t:ty) => {};    //~ERROR `$e:expr` is followed by `$t:ty`\n     ($e:expr $s:stmt) => {};  //~ERROR `$e:expr` is followed by `$s:stmt`\n     ($e:expr $p:path) => {};  //~ERROR `$e:expr` is followed by `$p:path`\n@@ -57,12 +57,12 @@ macro_rules! follow_ty {\n     ($t:ty if) => {};       //~ERROR `$t:ty` is followed by `if`\n     ($t:ty $p:pat) => {};   //~ERROR `$t:ty` is followed by `$p:pat`\n     ($t:ty $e:expr) => {};  //~ERROR `$t:ty` is followed by `$e:expr`\n-    ($t:ty $t:ty) => {};    //~ERROR `$t:ty` is followed by `$t:ty`\n+    ($t:ty $r:ty) => {};    //~ERROR `$t:ty` is followed by `$r:ty`\n     ($t:ty $s:stmt) => {};  //~ERROR `$t:ty` is followed by `$s:stmt`\n     ($t:ty $p:path) => {};  //~ERROR `$t:ty` is followed by `$p:path`\n     ($t:ty $b:block) => {}; // ok (RFC 1494)\n     ($t:ty $i:ident) => {}; //~ERROR `$t:ty` is followed by `$i:ident`\n-    ($t:ty $t:tt) => {};    //~ERROR `$t:ty` is followed by `$t:tt`\n+    ($t:ty $r:tt) => {};    //~ERROR `$t:ty` is followed by `$r:tt`\n     ($t:ty $i:item) => {};  //~ERROR `$t:ty` is followed by `$i:item`\n     ($t:ty $m:meta) => {};  //~ERROR `$t:ty` is followed by `$m:meta`\n }\n@@ -82,7 +82,7 @@ macro_rules! follow_stmt {\n     ($s:stmt $p:pat) => {};   //~ERROR `$s:stmt` is followed by `$p:pat`\n     ($s:stmt $e:expr) => {};  //~ERROR `$s:stmt` is followed by `$e:expr`\n     ($s:stmt $t:ty) => {};    //~ERROR `$s:stmt` is followed by `$t:ty`\n-    ($s:stmt $s:stmt) => {};  //~ERROR `$s:stmt` is followed by `$s:stmt`\n+    ($s:stmt $t:stmt) => {};  //~ERROR `$s:stmt` is followed by `$t:stmt`\n     ($s:stmt $p:path) => {};  //~ERROR `$s:stmt` is followed by `$p:path`\n     ($s:stmt $b:block) => {}; //~ERROR `$s:stmt` is followed by `$b:block`\n     ($s:stmt $i:ident) => {}; //~ERROR `$s:stmt` is followed by `$i:ident`\n@@ -97,11 +97,11 @@ macro_rules! follow_path {\n     ($p:path +) => {};        //~ERROR `$p:path` is followed by `+`\n     ($p:path ident) => {};    //~ERROR `$p:path` is followed by `ident`\n     ($p:path if) => {};       //~ERROR `$p:path` is followed by `if`\n-    ($p:path $p:pat) => {};   //~ERROR `$p:path` is followed by `$p:pat`\n+    ($p:path $q:pat) => {};   //~ERROR `$p:path` is followed by `$q:pat`\n     ($p:path $e:expr) => {};  //~ERROR `$p:path` is followed by `$e:expr`\n     ($p:path $t:ty) => {};    //~ERROR `$p:path` is followed by `$t:ty`\n     ($p:path $s:stmt) => {};  //~ERROR `$p:path` is followed by `$s:stmt`\n-    ($p:path $p:path) => {};  //~ERROR `$p:path` is followed by `$p:path`\n+    ($p:path $q:path) => {};  //~ERROR `$p:path` is followed by `$q:path`\n     ($p:path $b:block) => {}; // ok (RFC 1494)\n     ($p:path $i:ident) => {}; //~ERROR `$p:path` is followed by `$i:ident`\n     ($p:path $t:tt) => {};    //~ERROR `$p:path` is followed by `$t:tt`"}, {"sha": "e3302eac4ac086666d7b3dc9d4f3181623067148", "filename": "src/test/ui/macros/macro-follow.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -54,10 +54,10 @@ LL |     ($p:pat ident) => {};    //~ERROR `$p:pat` is followed by `ident`\n    |\n    = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n-error: `$p:pat` is followed by `$p:pat`, which is not allowed for `pat` fragments\n+error: `$p:pat` is followed by `$q:pat`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:15:13\n    |\n-LL |     ($p:pat $p:pat) => {};   //~ERROR `$p:pat` is followed by `$p:pat`\n+LL |     ($p:pat $q:pat) => {};   //~ERROR `$p:pat` is followed by `$q:pat`\n    |             ^^^^^^ not allowed after `pat` fragments\n    |\n    = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n@@ -86,10 +86,10 @@ LL |     ($p:pat $s:stmt) => {};  //~ERROR `$p:pat` is followed by `$s:stmt`\n    |\n    = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n-error: `$p:pat` is followed by `$p:path`, which is not allowed for `pat` fragments\n+error: `$p:pat` is followed by `$q:path`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:19:13\n    |\n-LL |     ($p:pat $p:path) => {};  //~ERROR `$p:pat` is followed by `$p:path`\n+LL |     ($p:pat $q:path) => {};  //~ERROR `$p:pat` is followed by `$q:path`\n    |             ^^^^^^^ not allowed after `pat` fragments\n    |\n    = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n@@ -230,10 +230,10 @@ LL |     ($e:expr $p:pat) => {};   //~ERROR `$e:expr` is followed by `$p:pat`\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n \n-error: `$e:expr` is followed by `$e:expr`, which is not allowed for `expr` fragments\n+error: `$e:expr` is followed by `$f:expr`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:40:14\n    |\n-LL |     ($e:expr $e:expr) => {};  //~ERROR `$e:expr` is followed by `$e:expr`\n+LL |     ($e:expr $f:expr) => {};  //~ERROR `$e:expr` is followed by `$f:expr`\n    |              ^^^^^^^ not allowed after `expr` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n@@ -350,10 +350,10 @@ LL |     ($t:ty $e:expr) => {};  //~ERROR `$t:ty` is followed by `$e:expr`\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n-error: `$t:ty` is followed by `$t:ty`, which is not allowed for `ty` fragments\n+error: `$t:ty` is followed by `$r:ty`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:60:12\n    |\n-LL |     ($t:ty $t:ty) => {};    //~ERROR `$t:ty` is followed by `$t:ty`\n+LL |     ($t:ty $r:ty) => {};    //~ERROR `$t:ty` is followed by `$r:ty`\n    |            ^^^^^ not allowed after `ty` fragments\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n@@ -382,10 +382,10 @@ LL |     ($t:ty $i:ident) => {}; //~ERROR `$t:ty` is followed by `$i:ident`\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n-error: `$t:ty` is followed by `$t:tt`, which is not allowed for `ty` fragments\n+error: `$t:ty` is followed by `$r:tt`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:65:12\n    |\n-LL |     ($t:ty $t:tt) => {};    //~ERROR `$t:ty` is followed by `$t:tt`\n+LL |     ($t:ty $r:tt) => {};    //~ERROR `$t:ty` is followed by `$r:tt`\n    |            ^^^^^ not allowed after `ty` fragments\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n@@ -518,10 +518,10 @@ LL |     ($s:stmt $t:ty) => {};    //~ERROR `$s:stmt` is followed by `$t:ty`\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n \n-error: `$s:stmt` is followed by `$s:stmt`, which is not allowed for `stmt` fragments\n+error: `$s:stmt` is followed by `$t:stmt`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:85:14\n    |\n-LL |     ($s:stmt $s:stmt) => {};  //~ERROR `$s:stmt` is followed by `$s:stmt`\n+LL |     ($s:stmt $t:stmt) => {};  //~ERROR `$s:stmt` is followed by `$t:stmt`\n    |              ^^^^^^^ not allowed after `stmt` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n@@ -606,10 +606,10 @@ LL |     ($p:path if) => {};       //~ERROR `$p:path` is followed by `if`\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n-error: `$p:path` is followed by `$p:pat`, which is not allowed for `path` fragments\n+error: `$p:path` is followed by `$q:pat`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:100:14\n    |\n-LL |     ($p:path $p:pat) => {};   //~ERROR `$p:path` is followed by `$p:pat`\n+LL |     ($p:path $q:pat) => {};   //~ERROR `$p:path` is followed by `$q:pat`\n    |              ^^^^^^ not allowed after `path` fragments\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n@@ -638,10 +638,10 @@ LL |     ($p:path $s:stmt) => {};  //~ERROR `$p:path` is followed by `$s:stmt`\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n-error: `$p:path` is followed by `$p:path`, which is not allowed for `path` fragments\n+error: `$p:path` is followed by `$q:path`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:104:14\n    |\n-LL |     ($p:path $p:path) => {};  //~ERROR `$p:path` is followed by `$p:path`\n+LL |     ($p:path $q:path) => {};  //~ERROR `$p:path` is followed by `$q:path`\n    |              ^^^^^^^ not allowed after `path` fragments\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`"}, {"sha": "9e0fa3887163d0d9d8c8ae604dcd778b479b23d6", "filename": "src/test/ui/macros/macro-multiple-matcher-bindings.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.rs?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -0,0 +1,25 @@\n+// Test that duplicate matcher binding names are caught at declaration time, rather than at macro\n+// invocation time.\n+//\n+// FIXME(mark-i-m): Update this when it becomes a hard error.\n+\n+// compile-pass\n+\n+#![allow(unused_macros)]\n+\n+macro_rules! foo1 {\n+    ($a:ident, $a:ident) => {}; //~WARNING duplicate matcher binding\n+    ($a:ident, $a:path) => {};  //~WARNING duplicate matcher binding\n+}\n+\n+macro_rules! foo2 {\n+    ($a:ident) => {}; // OK\n+    ($a:path) => {};  // OK\n+}\n+\n+macro_rules! foo3 {\n+    ($a:ident, $($a:ident),*) => {}; //~WARNING duplicate matcher binding\n+    ($($a:ident)+ # $($($a:path),+);*) => {}; //~WARNING duplicate matcher binding\n+}\n+\n+fn main() {}"}, {"sha": "bc78b471a2d1ed847a47324db2bdefa30ca6169b", "filename": "src/test/ui/macros/macro-multiple-matcher-bindings.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618f5a08a13a90b65455cf8dc42e109e520b5dbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr?ref=618f5a08a13a90b65455cf8dc42e109e520b5dbf", "patch": "@@ -0,0 +1,37 @@\n+warning: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:11:6\n+   |\n+LL |     ($a:ident, $a:ident) => {}; //~WARNING duplicate matcher binding\n+   |      ^^^^^^^^  ^^^^^^^^\n+   |\n+   = note: #[warn(duplicate_matcher_binding_name)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+\n+warning: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:12:6\n+   |\n+LL |     ($a:ident, $a:path) => {};  //~WARNING duplicate matcher binding\n+   |      ^^^^^^^^  ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+\n+warning: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:21:6\n+   |\n+LL |     ($a:ident, $($a:ident),*) => {}; //~WARNING duplicate matcher binding\n+   |      ^^^^^^^^    ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+\n+warning: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:22:8\n+   |\n+LL |     ($($a:ident)+ # $($($a:path),+);*) => {}; //~WARNING duplicate matcher binding\n+   |        ^^^^^^^^         ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+"}]}