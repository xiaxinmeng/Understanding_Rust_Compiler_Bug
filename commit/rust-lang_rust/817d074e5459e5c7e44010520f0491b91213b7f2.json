{"sha": "817d074e5459e5c7e44010520f0491b91213b7f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2QwNzRlNTQ1OWU1YzdlNDQwMTA1MjBmMDQ5MWI5MTIxM2I3ZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-17T23:51:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-17T23:51:18Z"}, "message": "Auto merge of #59250 - bovinebuddha:filter_ui_revision_tests, r=petrochenkov\n\nFilter ui revision tests\n\nUpdates UI test output filtering to also filter away test annotations for revisions:\n\nPreviously filtered: //~ ERROR [XXXX]\nNow also filters: //[revision]~ ERROR [XXXX]\n\nI reckon, if we have the one, we should have the other for consistency, its lack was probably an oversight (the existence of revision testing is not really well documented...)", "tree": {"sha": "7f0efac2cf1d7101f097ff7433f9585a806d1e24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f0efac2cf1d7101f097ff7433f9585a806d1e24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817d074e5459e5c7e44010520f0491b91213b7f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817d074e5459e5c7e44010520f0491b91213b7f2", "html_url": "https://github.com/rust-lang/rust/commit/817d074e5459e5c7e44010520f0491b91213b7f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817d074e5459e5c7e44010520f0491b91213b7f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82834e2b930619d4143e4dd94fb80888fa190c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82834e2b930619d4143e4dd94fb80888fa190c9", "html_url": "https://github.com/rust-lang/rust/commit/c82834e2b930619d4143e4dd94fb80888fa190c9"}, {"sha": "704649d96d8a75aded78560eb0a1136b1e520dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/704649d96d8a75aded78560eb0a1136b1e520dc9", "html_url": "https://github.com/rust-lang/rust/commit/704649d96d8a75aded78560eb0a1136b1e520dc9"}], "stats": {"total": 1282, "additions": 561, "deletions": 721}, "files": [{"sha": "74f14bebcc90511c8843a69c1771a2c21b97e6c3", "filename": "src/test/ui/E0501.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,7 +6,7 @@ LL |     let bar = || {\n LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n LL |     };\n-LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n+LL |     outside_closure_1(a);\n    |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);\n@@ -20,7 +20,7 @@ LL |     let bar = || {\n LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n ...\n-LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n+LL |     outside_closure_2(a);\n    |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);"}, {"sha": "e2f54c6553f05fd6326c022b4d917306160231e2", "filename": "src/test/ui/E0501.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0501.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0501.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,7 +6,7 @@ LL |     let bar = || {\n LL |         inside_closure(a)\n    |                        - previous borrow occurs due to use of `a` in closure\n LL |     };\n-LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n+LL |     outside_closure_1(a);\n    |                       ^ borrow occurs here\n ...\n LL | }\n@@ -20,7 +20,7 @@ LL |     let bar = || {\n LL |         inside_closure(a)\n    |                        - previous borrow occurs due to use of `a` in closure\n ...\n-LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n+LL |     outside_closure_2(a);\n    |                       ^ borrow occurs here\n ...\n LL | }"}, {"sha": "74f14bebcc90511c8843a69c1771a2c21b97e6c3", "filename": "src/test/ui/E0501.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0501.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0501.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,7 +6,7 @@ LL |     let bar = || {\n LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n LL |     };\n-LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n+LL |     outside_closure_1(a);\n    |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);\n@@ -20,7 +20,7 @@ LL |     let bar = || {\n LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n ...\n-LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n+LL |     outside_closure_2(a);\n    |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);"}, {"sha": "6e2d63441e25a712704dcb7f76ffd337bfcd1bdf", "filename": "src/test/ui/E0506.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0506.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0506.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `fancy_num` because it is borrowed\n    |\n LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n-LL |     fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n+LL |     fancy_num = FancyNum { num: 6 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n ...\n LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);"}, {"sha": "3e3001f232c89159434fea88c79811ab4d5734d0", "filename": "src/test/ui/E0506.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0506.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0506.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `fancy_num` because it is borrowed\n    |\n LL |     let fancy_ref = &fancy_num;\n    |                      --------- borrow of `fancy_num` occurs here\n-LL |     fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n+LL |     fancy_num = FancyNum { num: 6 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n \n error: aborting due to previous error"}, {"sha": "6e2d63441e25a712704dcb7f76ffd337bfcd1bdf", "filename": "src/test/ui/E0506.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0506.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0506.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `fancy_num` because it is borrowed\n    |\n LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n-LL |     fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n+LL |     fancy_num = FancyNum { num: 6 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n ...\n LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);"}, {"sha": "972b84e37beba368884a8a8d55c98dcc2aeec959", "filename": "src/test/ui/E0508-fail.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n   --> $DIR/E0508-fail.rs:8:18\n    |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here"}, {"sha": "8b249839f01ef5d1742d0b4a5e68b2e949888d87", "filename": "src/test/ui/E0508-fail.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0508-fail.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0508-fail.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n   --> $DIR/E0508-fail.rs:8:18\n    |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here"}, {"sha": "972b84e37beba368884a8a8d55c98dcc2aeec959", "filename": "src/test/ui/E0508-fail.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n   --> $DIR/E0508-fail.rs:8:18\n    |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here"}, {"sha": "5878b795b771ca30432e1160020474a08058bf18", "filename": "src/test/ui/E0508.ast.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c82834e2b930619d4143e4dd94fb80888fa190c9/src%2Ftest%2Fui%2FE0508.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c82834e2b930619d4143e4dd94fb80888fa190c9/src%2Ftest%2Fui%2FE0508.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.ast.stderr?ref=c82834e2b930619d4143e4dd94fb80888fa190c9", "patch": "@@ -1,12 +0,0 @@\n-error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508.rs:18:18\n-   |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n-   |                  ^^^^^^^^\n-   |                  |\n-   |                  cannot move out of here\n-   |                  help: consider using a reference instead: `&array[0]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0508`."}, {"sha": "5878b795b771ca30432e1160020474a08058bf18", "filename": "src/test/ui/E0508.mir.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c82834e2b930619d4143e4dd94fb80888fa190c9/src%2Ftest%2Fui%2FE0508.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c82834e2b930619d4143e4dd94fb80888fa190c9/src%2Ftest%2Fui%2FE0508.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.mir.stderr?ref=c82834e2b930619d4143e4dd94fb80888fa190c9", "patch": "@@ -1,12 +0,0 @@\n-error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508.rs:18:18\n-   |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n-   |                  ^^^^^^^^\n-   |                  |\n-   |                  cannot move out of here\n-   |                  help: consider using a reference instead: `&array[0]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0508`."}, {"sha": "cc1c968474170207555edbb577ee4c7208069bf2", "filename": "src/test/ui/E0594.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0594.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0594.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to immutable static item `NUM`\n   --> $DIR/E0594.rs:7:5\n    |\n-LL |     NUM = 20; //[ast]~ ERROR E0594\n+LL |     NUM = 20;\n    |     ^^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "0c5316da75821787bf06a6ee0c5c02e3e481ea9c", "filename": "src/test/ui/E0594.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0594.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0594.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to immutable static item\n   --> $DIR/E0594.rs:7:5\n    |\n-LL |     NUM = 20; //[ast]~ ERROR E0594\n+LL |     NUM = 20;\n    |     ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "cc1c968474170207555edbb577ee4c7208069bf2", "filename": "src/test/ui/E0594.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0594.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0594.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to immutable static item `NUM`\n   --> $DIR/E0594.rs:7:5\n    |\n-LL |     NUM = 20; //[ast]~ ERROR E0594\n+LL |     NUM = 20;\n    |     ^^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "c89a915cfbd23fb55f83094b75a0cfeed178f35f", "filename": "src/test/ui/E0596.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0596.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0596.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL |     let x = 1;\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     let y = &mut x; //[ast]~ ERROR [E0596]\n+LL |     let y = &mut x;\n    |             ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "4b66e49ba85b7d0a8727ca565c1b1cf61ef51409", "filename": "src/test/ui/E0596.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0596.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0596.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n    |\n LL |     let x = 1;\n    |         - help: make this binding mutable: `mut x`\n-LL |     let y = &mut x; //[ast]~ ERROR [E0596]\n+LL |     let y = &mut x;\n    |                  ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "c89a915cfbd23fb55f83094b75a0cfeed178f35f", "filename": "src/test/ui/E0596.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0596.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2FE0596.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL |     let x = 1;\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     let y = &mut x; //[ast]~ ERROR [E0596]\n+LL |     let y = &mut x;\n    |             ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "2995a139ae4b09b1db4c43778c9f92e93c452ce8", "filename": "src/test/ui/assign-imm-local-twice.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,10 +4,10 @@ error[E0384]: cannot assign twice to immutable variable `v`\n LL |     let v: isize;\n    |         - help: make this binding mutable: `mut v`\n ...\n-LL |     v = 1; //[ast]~ NOTE first assignment\n+LL |     v = 1;\n    |     ----- first assignment to `v`\n ...\n-LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "f16b8e2ebd7ccb51bb40adc7d3a2dfe9c90faa31", "filename": "src/test/ui/assign-imm-local-twice.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,10 +1,10 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/assign-imm-local-twice.rs:11:5\n    |\n-LL |     v = 1; //[ast]~ NOTE first assignment\n+LL |     v = 1;\n    |     ----- first assignment to `v`\n ...\n-LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "2995a139ae4b09b1db4c43778c9f92e93c452ce8", "filename": "src/test/ui/assign-imm-local-twice.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,10 +4,10 @@ error[E0384]: cannot assign twice to immutable variable `v`\n LL |     let v: isize;\n    |         - help: make this binding mutable: `mut v`\n ...\n-LL |     v = 1; //[ast]~ NOTE first assignment\n+LL |     v = 1;\n    |     ----- first assignment to `v`\n ...\n-LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "fcdb371a6e599437cb6d0676895cbe722172c055", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/bound-lifetime-in-binding-only.rs:71:1\n    |\n-LL | fn main() { } //[ok]~ ERROR compilation successful\n+LL | fn main() { }\n    | ^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "504d68e66e23e26d66e3e99933927bf53dbb328e", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/bound-lifetime-in-return-only.rs:49:1\n    |\n-LL | fn main() { } //[ok]~ ERROR compilation successful\n+LL | fn main() { }\n    | ^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "fa4c6adb5fff74b3775531fdf32ee2235238379b", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,7 +6,7 @@ LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |                        |\n    |                        this parameter and the return type are declared with different lifetimes...\n ...\n-LL |    (a, b) //[krisskross]~ ERROR lifetime mismatch [E0623]\n+LL |    (a, b)\n    |     ^ ...but data from `y` is returned here\n \n error[E0623]: lifetime mismatch\n@@ -17,7 +17,7 @@ LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |                                    |\n    |                                    this parameter and the return type are declared with different lifetimes...\n ...\n-LL |    (a, b) //[krisskross]~ ERROR lifetime mismatch [E0623]\n+LL |    (a, b)\n    |        ^ ...but data from `x` is returned here\n \n error: aborting due to 2 previous errors"}, {"sha": "4309373f123f9d3e6c4164bdafc927cd55166b11", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/project-fn-ret-contravariant.rs:38:8\n    |\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+LL |    bar(foo, x)\n    |        ^^^\n    |\n note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 37:8...\n@@ -12,13 +12,13 @@ LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/project-fn-ret-contravariant.rs:38:13\n    |\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+LL |    bar(foo, x)\n    |             ^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/project-fn-ret-contravariant.rs:38:4\n    |\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+LL |    bar(foo, x)\n    |    ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5009e0868a7d4f8a8cf673ce3c219c5b87b35e9d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -5,7 +5,7 @@ LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                                     --------     --------------------\n    |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n-LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+LL |    let a = bar(foo, y);\n    |                     ^ ...but data from `x` is returned here\n \n error[E0623]: lifetime mismatch\n@@ -15,8 +15,8 @@ LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                        --------                  --------------------\n    |                        |\n    |                        this parameter and the return type are declared with different lifetimes...\n-LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n-LL |    let b = bar(foo, x); //[krisskross]~ ERROR E0623\n+LL |    let a = bar(foo, y);\n+LL |    let b = bar(foo, x);\n    |                     ^ ...but data from `y` is returned here\n \n error: aborting due to 2 previous errors"}, {"sha": "65d16440ac9b04bb8fd324679ef5314c847b8f82", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,7 +6,7 @@ LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n ...\n-LL |    let b = bar(f, y); //[oneuse]~ ERROR lifetime mismatch [E0623]\n+LL |    let b = bar(f, y);\n    |                   ^ ...but data from `x` is returned here\n \n error: aborting due to previous error"}, {"sha": "b8b1a979c363a95a38a258a73e55ee6504a025f5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/project-fn-ret-invariant.rs:48:8\n    |\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+LL |    bar(foo, x)\n    |        ^^^\n    |\n note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 44:8..."}, {"sha": "16fef0510f871d492c86ebac62b04344c9f39e76", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,9 +1,9 @@\n error: compilation successful\n   --> $DIR/higher-ranked-projection.rs:24:1\n    |\n-LL | / fn main() { //[good]~ ERROR compilation successful\n+LL | / fn main() {\n LL | |     foo(());\n-LL | |     //[bad]~^ ERROR type mismatch\n+LL | |\n LL | | }\n    | |_^\n "}, {"sha": "12f9ad8276fa41ce039b8600ec47320f1b7d81bb", "filename": "src/test/ui/borrowck/borrowck-access-permissions.ast.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,13 +4,13 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL |     let x = 1;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         let _y1 = &mut x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut x;\n    |                   ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable static item `static_x` as mutable\n   --> $DIR/borrowck-access-permissions.rs:18:19\n    |\n-LL |         let _y1 = &mut static_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut static_x;\n    |                   ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*box_x` as mutable, as `box_x` is not declared as mutable\n@@ -19,7 +19,7 @@ error[E0596]: cannot borrow `*box_x` as mutable, as `box_x` is not declared as m\n LL |         let box_x = Box::new(1);\n    |             ----- help: consider changing this to be mutable: `mut box_x`\n ...\n-LL |         let _y1 = &mut *box_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut *box_x;\n    |                   ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n@@ -28,7 +28,7 @@ error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n LL |         let ref_x = &x;\n    |                     -- help: consider changing this to be a mutable reference: `&mut x`\n ...\n-LL |         let _y1 = &mut *ref_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut *ref_x;\n    |                   ^^^^^^^^^^^ `ref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` pointer\n@@ -37,15 +37,15 @@ error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` poin\n LL |         let ptr_x : *const _ = &x;\n    |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n ...\n-LL |             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n+LL |             let _y1 = &mut *ptr_x;\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*foo_ref.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-access-permissions.rs:56:18\n    |\n LL |         let foo_ref = &foo;\n    |                       ---- help: consider changing this to be a mutable reference: `&mut foo`\n-LL |         let _y = &mut *foo_ref.f; //[ast]~ ERROR [E0389]\n+LL |         let _y = &mut *foo_ref.f;\n    |                  ^^^^^^^^^^^^^^^ `foo_ref` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 6 previous errors"}, {"sha": "a1cc0638af36ee930cc1eb479b4918051d08ba88", "filename": "src/test/ui/borrowck/borrowck-access-permissions.ast.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,13 +4,13 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n LL |     let x = 1;\n    |         - help: make this binding mutable: `mut x`\n ...\n-LL |         let _y1 = &mut x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut x;\n    |                        ^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable static item as mutable\n   --> $DIR/borrowck-access-permissions.rs:18:24\n    |\n-LL |         let _y1 = &mut static_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut static_x;\n    |                        ^^^^^^^^\n \n error[E0596]: cannot borrow immutable `Box` content `*box_x` as mutable\n@@ -19,25 +19,25 @@ error[E0596]: cannot borrow immutable `Box` content `*box_x` as mutable\n LL |         let box_x = Box::new(1);\n    |             ----- help: make this binding mutable: `mut box_x`\n ...\n-LL |         let _y1 = &mut *box_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut *box_x;\n    |                        ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content `*ref_x` as mutable\n   --> $DIR/borrowck-access-permissions.rs:36:24\n    |\n-LL |         let _y1 = &mut *ref_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut *ref_x;\n    |                        ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable dereference of raw pointer `*ptr_x` as mutable\n   --> $DIR/borrowck-access-permissions.rs:46:28\n    |\n-LL |             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n+LL |             let _y1 = &mut *ptr_x;\n    |                            ^^^^^^ cannot borrow as mutable\n \n error[E0389]: cannot borrow data mutably in a `&` reference\n   --> $DIR/borrowck-access-permissions.rs:56:23\n    |\n-LL |         let _y = &mut *foo_ref.f; //[ast]~ ERROR [E0389]\n+LL |         let _y = &mut *foo_ref.f;\n    |                       ^^^^^^^^^^ assignment into an immutable reference\n \n error: aborting due to 6 previous errors"}, {"sha": "12f9ad8276fa41ce039b8600ec47320f1b7d81bb", "filename": "src/test/ui/borrowck/borrowck-access-permissions.mir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,13 +4,13 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL |     let x = 1;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         let _y1 = &mut x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut x;\n    |                   ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable static item `static_x` as mutable\n   --> $DIR/borrowck-access-permissions.rs:18:19\n    |\n-LL |         let _y1 = &mut static_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut static_x;\n    |                   ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*box_x` as mutable, as `box_x` is not declared as mutable\n@@ -19,7 +19,7 @@ error[E0596]: cannot borrow `*box_x` as mutable, as `box_x` is not declared as m\n LL |         let box_x = Box::new(1);\n    |             ----- help: consider changing this to be mutable: `mut box_x`\n ...\n-LL |         let _y1 = &mut *box_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut *box_x;\n    |                   ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n@@ -28,7 +28,7 @@ error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n LL |         let ref_x = &x;\n    |                     -- help: consider changing this to be a mutable reference: `&mut x`\n ...\n-LL |         let _y1 = &mut *ref_x; //[ast]~ ERROR [E0596]\n+LL |         let _y1 = &mut *ref_x;\n    |                   ^^^^^^^^^^^ `ref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` pointer\n@@ -37,15 +37,15 @@ error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` poin\n LL |         let ptr_x : *const _ = &x;\n    |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n ...\n-LL |             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n+LL |             let _y1 = &mut *ptr_x;\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*foo_ref.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-access-permissions.rs:56:18\n    |\n LL |         let foo_ref = &foo;\n    |                       ---- help: consider changing this to be a mutable reference: `&mut foo`\n-LL |         let _y = &mut *foo_ref.f; //[ast]~ ERROR [E0389]\n+LL |         let _y = &mut *foo_ref.f;\n    |                  ^^^^^^^^^^^^^^^ `foo_ref` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 6 previous errors"}, {"sha": "dd6e5ebe0ed3d81c8bae5169d8d0785bad0f5e48", "filename": "src/test/ui/borrowck/borrowck-asm.ast.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -7,7 +7,7 @@ LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                - value moved here\n LL |         }\n-LL |         let z = x;  //[ast]~ ERROR use of moved value: `x`\n+LL |         let z = x;\n    |                 ^ value used here after move\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n@@ -16,7 +16,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |         let y = &mut x;\n    |                 ------ borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x)); //[ast]~ ERROR cannot use\n+LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                ^ use of borrowed `x`\n ...\n LL |         let z = y;\n@@ -31,7 +31,7 @@ LL |         let x = 3;\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n+LL |             asm!(\"nop\" : \"=r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -43,13 +43,13 @@ LL |         let x = 3;\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n+LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-asm.rs:68:32\n    |\n-LL |             asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitialized variable\n+LL |             asm!(\"nop\" : \"=*r\"(x));\n    |                                ^ use of possibly uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n@@ -58,7 +58,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n+LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ assignment to borrowed `x` occurs here\n ...\n LL |         let z = y;\n@@ -70,7 +70,7 @@ error[E0382]: use of moved value: `x`\n LL |         let x = &mut 2;\n    |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n+LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n    |                                -       ^ value used here after move\n    |                                |\n    |                                value moved here"}, {"sha": "8418bb7c5afb6759f29f955f144ed79bd3b1f463", "filename": "src/test/ui/borrowck/borrowck-asm.ast.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `x`\n LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                - value moved here\n LL |         }\n-LL |         let z = x;  //[ast]~ ERROR use of moved value: `x`\n+LL |         let z = x;\n    |             ^ value used here after move\n    |\n    = note: move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n@@ -15,7 +15,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |         let y = &mut x;\n    |                      - borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x)); //[ast]~ ERROR cannot use\n+LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                ^ use of borrowed `x`\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -24,7 +24,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n LL |         let x = 3;\n    |             - first assignment to `x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n+LL |             asm!(\"nop\" : \"=r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0506]: cannot assign to `a` because it is borrowed\n@@ -33,7 +33,7 @@ error[E0506]: cannot assign to `a` because it is borrowed\n LL |         let b = &*a;\n    |                  -- borrow of `a` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(a));  //[ast]~ ERROR cannot assign to `a` because it is borrowed\n+LL |             asm!(\"nop\" : \"=r\"(a));\n    |                               ^ assignment to borrowed `a` occurs here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -42,13 +42,13 @@ error[E0384]: cannot assign twice to immutable variable `x`\n LL |         let x = 3;\n    |             - first assignment to `x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n+LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-asm.rs:68:32\n    |\n-LL |             asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitialized variable\n+LL |             asm!(\"nop\" : \"=*r\"(x));\n    |                                ^ use of possibly uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n@@ -57,13 +57,13 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |         let y = &*x;\n    |                  -- borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n+LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ assignment to borrowed `x` occurs here\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:86:40\n    |\n-LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n+LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n    |                                -       ^ value used here after move\n    |                                |\n    |                                value moved here"}, {"sha": "dd6e5ebe0ed3d81c8bae5169d8d0785bad0f5e48", "filename": "src/test/ui/borrowck/borrowck-asm.mir.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -7,7 +7,7 @@ LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                - value moved here\n LL |         }\n-LL |         let z = x;  //[ast]~ ERROR use of moved value: `x`\n+LL |         let z = x;\n    |                 ^ value used here after move\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n@@ -16,7 +16,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |         let y = &mut x;\n    |                 ------ borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x)); //[ast]~ ERROR cannot use\n+LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                ^ use of borrowed `x`\n ...\n LL |         let z = y;\n@@ -31,7 +31,7 @@ LL |         let x = 3;\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n+LL |             asm!(\"nop\" : \"=r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -43,13 +43,13 @@ LL |         let x = 3;\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n+LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-asm.rs:68:32\n    |\n-LL |             asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitialized variable\n+LL |             asm!(\"nop\" : \"=*r\"(x));\n    |                                ^ use of possibly uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n@@ -58,7 +58,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n+LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ assignment to borrowed `x` occurs here\n ...\n LL |         let z = y;\n@@ -70,7 +70,7 @@ error[E0382]: use of moved value: `x`\n LL |         let x = &mut 2;\n    |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n+LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n    |                                -       ^ value used here after move\n    |                                |\n    |                                value moved here"}, {"sha": "53af41cfe310343fcc810ca177912557ed6a72d0", "filename": "src/test/ui/borrowck/borrowck-assign-comp.ast.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,9 +4,9 @@ error[E0506]: cannot assign to `p.x` because it is borrowed\n LL |     let q = &p;\n    |             -- borrow of `p.x` occurs here\n ...\n-LL |     p.x = 5; //[ast]~ ERROR cannot assign to `p.x`\n+LL |     p.x = 5;\n    |     ^^^^^^^ assignment to borrowed `p.x` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `p.x` because it is borrowed\n+LL |\n LL |     q.x;\n    |     --- borrow later used here\n \n@@ -15,7 +15,7 @@ error[E0506]: cannot assign to `p` because it is borrowed\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p` occurs here\n-LL |     p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+LL |     p = Point {x: 5, y: 7};\n    |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n ...\n LL |     *q; // stretch loan\n@@ -26,9 +26,9 @@ error[E0506]: cannot assign to `p.y` because it is borrowed\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p.y` occurs here\n-LL |     p.y = 5; //[ast]~ ERROR cannot assign to `p.y`\n+LL |     p.y = 5;\n    |     ^^^^^^^ assignment to borrowed `p.y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `p.y` because it is borrowed\n+LL |\n LL |     *q;\n    |     -- borrow later used here\n "}, {"sha": "4adb19c4c3f0e9cc3bf6843fe17d7d760ed6d8a7", "filename": "src/test/ui/borrowck/borrowck-assign-comp.ast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,23 +4,23 @@ error[E0506]: cannot assign to `p.x` because it is borrowed\n LL |     let q = &p;\n    |              - borrow of `p.x` occurs here\n ...\n-LL |     p.x = 5; //[ast]~ ERROR cannot assign to `p.x`\n+LL |     p.x = 5;\n    |     ^^^^^^^ assignment to borrowed `p.x` occurs here\n \n error[E0506]: cannot assign to `p` because it is borrowed\n   --> $DIR/borrowck-assign-comp.rs:24:5\n    |\n LL |     let q = &p.y;\n    |              --- borrow of `p` occurs here\n-LL |     p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+LL |     p = Point {x: 5, y: 7};\n    |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n \n error[E0506]: cannot assign to `p.y` because it is borrowed\n   --> $DIR/borrowck-assign-comp.rs:36:5\n    |\n LL |     let q = &p.y;\n    |              --- borrow of `p.y` occurs here\n-LL |     p.y = 5; //[ast]~ ERROR cannot assign to `p.y`\n+LL |     p.y = 5;\n    |     ^^^^^^^ assignment to borrowed `p.y` occurs here\n \n error: aborting due to 3 previous errors"}, {"sha": "53af41cfe310343fcc810ca177912557ed6a72d0", "filename": "src/test/ui/borrowck/borrowck-assign-comp.mir.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,9 +4,9 @@ error[E0506]: cannot assign to `p.x` because it is borrowed\n LL |     let q = &p;\n    |             -- borrow of `p.x` occurs here\n ...\n-LL |     p.x = 5; //[ast]~ ERROR cannot assign to `p.x`\n+LL |     p.x = 5;\n    |     ^^^^^^^ assignment to borrowed `p.x` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `p.x` because it is borrowed\n+LL |\n LL |     q.x;\n    |     --- borrow later used here\n \n@@ -15,7 +15,7 @@ error[E0506]: cannot assign to `p` because it is borrowed\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p` occurs here\n-LL |     p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+LL |     p = Point {x: 5, y: 7};\n    |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n ...\n LL |     *q; // stretch loan\n@@ -26,9 +26,9 @@ error[E0506]: cannot assign to `p.y` because it is borrowed\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p.y` occurs here\n-LL |     p.y = 5; //[ast]~ ERROR cannot assign to `p.y`\n+LL |     p.y = 5;\n    |     ^^^^^^^ assignment to borrowed `p.y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `p.y` because it is borrowed\n+LL |\n LL |     *q;\n    |     -- borrow later used here\n "}, {"sha": "626e1ef8ad8725b8e5a93fc8a23444213eaee387", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to immutable static item `foo`\n   --> $DIR/borrowck-assign-to-constants.rs:8:5\n    |\n-LL |     foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n+LL |     foo = 6;\n    |     ^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "e755785ef51b3b7c7e9e5ba051ffacf7f274c70f", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to immutable static item\n   --> $DIR/borrowck-assign-to-constants.rs:8:5\n    |\n-LL |     foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n+LL |     foo = 6;\n    |     ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "626e1ef8ad8725b8e5a93fc8a23444213eaee387", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to immutable static item `foo`\n   --> $DIR/borrowck-assign-to-constants.rs:8:5\n    |\n-LL |     foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n+LL |     foo = 6;\n    |     ^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "60c8b33ba15d371f420a4de42cb51cffe9224364", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.ast.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,8 +3,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //[ast]~^ value moved here\n-LL |     let _y = a.y; //[ast]~ ERROR use of moved\n+LL |\n+LL |     let _y = a.y;\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -14,8 +14,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //[ast]~^ value moved here\n-LL |     let _y = a.y; //[ast]~ ERROR use of moved\n+LL |\n+LL |     let _y = a.y;\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -25,8 +25,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //[ast]~^ value moved here\n-LL |     let _y = &a.y; //[ast]~ ERROR use of moved\n+LL |\n+LL |     let _y = &a.y;\n    |               ^^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -44,7 +44,7 @@ error[E0503]: cannot use `a.y` because it was mutably borrowed\n    |\n LL |     let _x = &mut a.x;\n    |                   --- borrow of `a.x` occurs here\n-LL |     let _y = a.y; //[ast]~ ERROR cannot use\n+LL |     let _y = a.y;\n    |         ^^ use of borrowed `a.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n@@ -60,7 +60,7 @@ error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also bor\n    |\n LL |     let _x = &mut a.x;\n    |                   --- mutable borrow occurs here (via `a.x`)\n-LL |     let _y = &a.y; //[ast]~ ERROR cannot borrow\n+LL |     let _y = &a.y;\n    |               ^^^ immutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n ...\n LL | }\n@@ -71,7 +71,7 @@ error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borro\n    |\n LL |     let _x = &a.x;\n    |               --- immutable borrow occurs here (via `a.x`)\n-LL |     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n+LL |     let _y = &mut a.y;\n    |                   ^^^ mutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n ...\n LL | }\n@@ -82,8 +82,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //[ast]~^ value moved here\n-LL |     let _y = a.y; //[ast]~ ERROR use of collaterally moved\n+LL |\n+LL |     let _y = a.y;\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -93,8 +93,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //[ast]~^ value moved here\n-LL |     let _y = a.y; //[ast]~ ERROR use of collaterally moved\n+LL |\n+LL |     let _y = a.y;\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -104,8 +104,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //[ast]~^ value moved here\n-LL |     let _y = &a.y; //[ast]~ ERROR use of collaterally moved\n+LL |\n+LL |     let _y = &a.y;\n    |               ^^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -115,7 +115,7 @@ error[E0505]: cannot move out of `a.y` because it is borrowed\n    |\n LL |     let _x = &a.x.x;\n    |               ----- borrow of `a.x.x` occurs here\n-LL |     //[ast]~^ borrow of `a.x.x` occurs here\n+LL |\n LL |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n@@ -124,7 +124,7 @@ error[E0503]: cannot use `a.y` because it was mutably borrowed\n    |\n LL |     let _x = &mut a.x.x;\n    |                   ----- borrow of `a.x.x` occurs here\n-LL |     let _y = a.y; //[ast]~ ERROR cannot use\n+LL |     let _y = a.y;\n    |         ^^ use of borrowed `a.x.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n@@ -140,8 +140,8 @@ error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed\n    |\n LL |     let _x = &mut a.x.x;\n    |                   ----- mutable borrow occurs here\n-LL |     //[ast]~^ mutable borrow occurs here\n-LL |     let _y = &a.y; //[ast]~ ERROR cannot borrow\n+LL |\n+LL |     let _y = &a.y;\n    |               ^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -152,8 +152,8 @@ error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as\n    |\n LL |     let _x = &a.x.x;\n    |               ----- immutable borrow occurs here\n-LL |     //[ast]~^ immutable borrow occurs here\n-LL |     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n+LL |\n+LL |     let _y = &mut a.y;\n    |                   ^^^ mutable borrow occurs here\n ...\n LL | }"}, {"sha": "0e380e90e75915b5f12f7df4a26414b267c3444e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/borrowck-box-insensitivity.rs:160:1\n    |\n-LL | / fn main() { //[mir]~ ERROR compilation successful\n+LL | / fn main() {\n LL | |     copy_after_move();\n LL | |     move_after_move();\n LL | |     borrow_after_move();"}, {"sha": "aac5fdf62aaa44070d1f395c03a026e04e71264f", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.ast.nll.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -5,11 +5,11 @@ LL |     let c1 = || x = 4;\n    |              -- - first borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || x * 5;\n    |              ^^ - second borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |     //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n@@ -20,11 +20,11 @@ LL |     let c1 = || set(&mut x);\n    |              --          - first borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || get(&x);\n    |              ^^      - second borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |                          //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n@@ -35,11 +35,11 @@ LL |     let c1 = || set(&mut x);\n    |              --          - first borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || x * 5;\n    |              ^^ - second borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |                        //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n@@ -50,9 +50,9 @@ LL |     let c2 = || x * 5;\n    |              -- - borrow occurs due to use in closure\n    |              |\n    |              borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n-LL |            //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |     drop(c2);\n    |          -- borrow later used here\n \n@@ -63,9 +63,9 @@ LL |     let c1 = || get(&x);\n    |              --      - borrow occurs due to use in closure\n    |              |\n    |              borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n-LL |            //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n \n@@ -76,9 +76,9 @@ LL |     let c1 = || get(&*x);\n    |              --       - borrow occurs due to use in closure\n    |              |\n    |              borrow of `*x` occurs here\n-LL |     *x = 5; //[ast]~ ERROR cannot assign to `*x`\n+LL |     *x = 5;\n    |     ^^^^^^ assignment to borrowed `*x` occurs here\n-LL |             //[mir]~^ ERROR cannot assign to `*x` because it is borrowed\n+LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n \n@@ -89,9 +89,9 @@ LL |     let c1 = || get(&*x.f);\n    |              --       - borrow occurs due to use in closure\n    |              |\n    |              borrow of `*x.f` occurs here\n-LL |     *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`\n+LL |     *x.f = 5;\n    |     ^^^^^^^^ assignment to borrowed `*x.f` occurs here\n-LL |               //[mir]~^ ERROR cannot assign to `*x.f` because it is borrowed\n+LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n \n@@ -102,11 +102,11 @@ LL |     let c1 = || get(&*x.f);\n    |              --       - first borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |     let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n+LL |     let c2 = || *x.f = 5;\n    |              ^^  - second borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |                           //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n+LL |\n LL |     drop(c1);\n    |          -- immutable borrow later used here\n "}, {"sha": "d672d0ce0502c87a963f93122aa6ad17825455ea", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.ast.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = || x = 4;\n    |              -- - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || x * 5;\n    |              ^^ - borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n@@ -20,7 +20,7 @@ LL |     let c1 = || set(&mut x);\n    |              --          - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || get(&x);\n    |              ^^      - borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n@@ -35,7 +35,7 @@ LL |     let c1 = || set(&mut x);\n    |              --          - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || x * 5;\n    |              ^^ - borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n@@ -48,31 +48,31 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |     let c2 = || x * 5;\n    |              -- borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/borrowck-closures-mut-and-imm.rs:53:5\n    |\n LL |     let c1 = || get(&x);\n    |              -- borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/borrowck-closures-mut-and-imm.rs:61:5\n    |\n LL |     let c1 = || get(&*x);\n    |              -- borrow of `*x` occurs here\n-LL |     *x = 5; //[ast]~ ERROR cannot assign to `*x`\n+LL |     *x = 5;\n    |     ^^^^^^ assignment to borrowed `*x` occurs here\n \n error[E0506]: cannot assign to `*x.f` because it is borrowed\n   --> $DIR/borrowck-closures-mut-and-imm.rs:73:5\n    |\n LL |     let c1 = || get(&*x.f);\n    |              -- borrow of `*x.f` occurs here\n-LL |     *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`\n+LL |     *x.f = 5;\n    |     ^^^^^^^^ assignment to borrowed `*x.f` occurs here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n@@ -82,7 +82,7 @@ LL |     let c1 = || get(&*x.f);\n    |              --       - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |     let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n+LL |     let c2 = || *x.f = 5;\n    |              ^^  - borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here"}, {"sha": "aac5fdf62aaa44070d1f395c03a026e04e71264f", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.mir.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -5,11 +5,11 @@ LL |     let c1 = || x = 4;\n    |              -- - first borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || x * 5;\n    |              ^^ - second borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |     //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n@@ -20,11 +20,11 @@ LL |     let c1 = || set(&mut x);\n    |              --          - first borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || get(&x);\n    |              ^^      - second borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |                          //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n@@ -35,11 +35,11 @@ LL |     let c1 = || set(&mut x);\n    |              --          - first borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+LL |     let c2 = || x * 5;\n    |              ^^ - second borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |                        //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n@@ -50,9 +50,9 @@ LL |     let c2 = || x * 5;\n    |              -- - borrow occurs due to use in closure\n    |              |\n    |              borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n-LL |            //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |     drop(c2);\n    |          -- borrow later used here\n \n@@ -63,9 +63,9 @@ LL |     let c1 = || get(&x);\n    |              --      - borrow occurs due to use in closure\n    |              |\n    |              borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n-LL |            //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n \n@@ -76,9 +76,9 @@ LL |     let c1 = || get(&*x);\n    |              --       - borrow occurs due to use in closure\n    |              |\n    |              borrow of `*x` occurs here\n-LL |     *x = 5; //[ast]~ ERROR cannot assign to `*x`\n+LL |     *x = 5;\n    |     ^^^^^^ assignment to borrowed `*x` occurs here\n-LL |             //[mir]~^ ERROR cannot assign to `*x` because it is borrowed\n+LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n \n@@ -89,9 +89,9 @@ LL |     let c1 = || get(&*x.f);\n    |              --       - borrow occurs due to use in closure\n    |              |\n    |              borrow of `*x.f` occurs here\n-LL |     *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`\n+LL |     *x.f = 5;\n    |     ^^^^^^^^ assignment to borrowed `*x.f` occurs here\n-LL |               //[mir]~^ ERROR cannot assign to `*x.f` because it is borrowed\n+LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n \n@@ -102,11 +102,11 @@ LL |     let c1 = || get(&*x.f);\n    |              --       - first borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n-LL |     let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n+LL |     let c2 = || *x.f = 5;\n    |              ^^  - second borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n-LL |                           //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n+LL |\n LL |     drop(c1);\n    |          -- immutable borrow later used here\n "}, {"sha": "c6144695f7ae22d328803060b556d850d3b4a871", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |             let y = &mut x;\n    |                     ------ first mutable borrow occurs here\n-LL |             &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n+LL |             &mut x;\n    |             ^^^^^^ second mutable borrow occurs here\n-LL |                     //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |\n LL |             *y = 1;\n    |             ------ first borrow later used here\n \n@@ -14,9 +14,9 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n-LL |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n+LL |                    &mut x;\n    |                    ^^^^^^ second mutable borrow occurs here\n-LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n@@ -25,10 +25,10 @@ error: captured variable cannot escape `FnMut` closure body\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n-LL | /                || { //[mir]~ ERROR captured variable cannot escape `FnMut` closure body\n+LL | /                || {\n LL | |                    let y = &mut x;\n-LL | |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n-LL | |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+LL | |                    &mut x;\n+LL | |\n LL | |                    *y = 1;\n LL | |                    drop(y);\n LL | |                 }\n@@ -42,9 +42,9 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n    |\n LL |         let x = f.x();\n    |                 - borrow of `f` occurs here\n-LL |         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |         f.x;\n    |         ^^^ use of borrowed `f`\n-LL |         //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -53,9 +53,9 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n    |\n LL |         let x = g.x();\n    |                 - borrow of `g` occurs here\n-LL |         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |         g.0;\n    |         ^^^ use of borrowed `g`\n-LL |              //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -64,9 +64,9 @@ error[E0503]: cannot use `h.0` because it was mutably borrowed\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n-LL |         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n-LL |              //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -87,9 +87,9 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n-LL |         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n-LL |              //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -98,9 +98,9 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n    |\n LL |         let x = f.x();\n    |                 - borrow of `*f` occurs here\n-LL |         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |         f.x;\n    |         ^^^ use of borrowed `*f`\n-LL |              //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -109,9 +109,9 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n    |\n LL |         let x = g.x();\n    |                 - borrow of `*g` occurs here\n-LL |         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |         g.0;\n    |         ^^^ use of borrowed `*g`\n-LL |              //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -120,9 +120,9 @@ error[E0503]: cannot use `h.0` because it was mutably borrowed\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n-LL |         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n-LL |              //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -143,9 +143,9 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n-LL |         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n-LL |              //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -372,7 +372,7 @@ error[E0382]: use of moved value: `x`\n    |\n LL |                 drop(x);\n    |                      - value moved here\n-LL |                 drop(x); //[ast]~ ERROR use of moved value: `x`\n+LL |                 drop(x);\n    |                      ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "d892db8811ee215246257f559487c2b38b55d3d6", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,23 +3,23 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n    |\n LL |         let x = f.x();\n    |                 - borrow of `f` occurs here\n-LL |         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |         f.x;\n    |         ^^^ use of borrowed `f`\n \n error[E0503]: cannot use `g.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:51:9\n    |\n LL |         let x = g.x();\n    |                 - borrow of `g` occurs here\n-LL |         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |         g.0;\n    |         ^^^ use of borrowed `g`\n \n error[E0503]: cannot use `h.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:59:9\n    |\n LL |         let x = &mut h.0;\n    |                      --- borrow of `h.0` occurs here\n-LL |         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n \n error[E0503]: cannot use `e.0` because it was mutably borrowed\n@@ -36,31 +36,31 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |         let x = &mut u.a;\n    |                      --- borrow of `u.a` occurs here\n-LL |         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:86:9\n    |\n LL |         let x = f.x();\n    |                 - borrow of `*f` occurs here\n-LL |         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |         f.x;\n    |         ^^^ use of borrowed `*f`\n \n error[E0503]: cannot use `g.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:94:9\n    |\n LL |         let x = g.x();\n    |                 - borrow of `*g` occurs here\n-LL |         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |         g.0;\n    |         ^^^ use of borrowed `*g`\n \n error[E0503]: cannot use `h.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:102:9\n    |\n LL |         let x = &mut h.0;\n    |                      --- borrow of `h.0` occurs here\n-LL |         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n \n error[E0503]: cannot use `e.0` because it was mutably borrowed\n@@ -77,7 +77,7 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |         let x = &mut u.a;\n    |                      --- borrow of `u.a` occurs here\n-LL |         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n@@ -213,7 +213,7 @@ error[E0499]: cannot borrow `**x` as mutable more than once at a time\n    |\n LL |             let y = &mut x;\n    |                          - first mutable borrow occurs here\n-LL |             &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n+LL |             &mut x;\n    |                  ^ second mutable borrow occurs here\n ...\n LL |         };\n@@ -224,7 +224,7 @@ error[E0499]: cannot borrow `**x` as mutable more than once at a time\n    |\n LL |                    let y = &mut x;\n    |                                 - first mutable borrow occurs here\n-LL |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n+LL |                    &mut x;\n    |                         ^ second mutable borrow occurs here\n ...\n LL |                 }\n@@ -235,7 +235,7 @@ error[E0382]: use of moved value: `x`\n    |\n LL |                 drop(x);\n    |                      - value moved here\n-LL |                 drop(x); //[ast]~ ERROR use of moved value: `x`\n+LL |                 drop(x);\n    |                      ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "af78340ffdf37c406df9898291a454a3dd8bd735", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.mir.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |             let y = &mut x;\n    |                     ------ first mutable borrow occurs here\n-LL |             &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n+LL |             &mut x;\n    |             ^^^^^^ second mutable borrow occurs here\n-LL |                     //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |\n LL |             *y = 1;\n    |             ------ first borrow later used here\n \n@@ -14,9 +14,9 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n-LL |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n+LL |                    &mut x;\n    |                    ^^^^^^ second mutable borrow occurs here\n-LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n@@ -25,10 +25,10 @@ error: captured variable cannot escape `FnMut` closure body\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n-LL | /                || { //[mir]~ ERROR captured variable cannot escape `FnMut` closure body\n+LL | /                || {\n LL | |                    let y = &mut x;\n-LL | |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n-LL | |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+LL | |                    &mut x;\n+LL | |\n LL | |                    *y = 1;\n LL | |                    drop(y);\n LL | |                 }\n@@ -42,9 +42,9 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n    |\n LL |         let x = f.x();\n    |                 - borrow of `f` occurs here\n-LL |         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |         f.x;\n    |         ^^^ use of borrowed `f`\n-LL |         //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -53,9 +53,9 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n    |\n LL |         let x = g.x();\n    |                 - borrow of `g` occurs here\n-LL |         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |         g.0;\n    |         ^^^ use of borrowed `g`\n-LL |              //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -64,9 +64,9 @@ error[E0503]: cannot use `h.0` because it was mutably borrowed\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n-LL |         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n-LL |              //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -87,9 +87,9 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n-LL |         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n-LL |              //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -98,9 +98,9 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n    |\n LL |         let x = f.x();\n    |                 - borrow of `*f` occurs here\n-LL |         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |         f.x;\n    |         ^^^ use of borrowed `*f`\n-LL |              //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -109,9 +109,9 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n    |\n LL |         let x = g.x();\n    |                 - borrow of `*g` occurs here\n-LL |         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |         g.0;\n    |         ^^^ use of borrowed `*g`\n-LL |              //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -120,9 +120,9 @@ error[E0503]: cannot use `h.0` because it was mutably borrowed\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n-LL |         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n-LL |              //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -143,9 +143,9 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n-LL |         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n-LL |              //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n@@ -366,7 +366,7 @@ error[E0382]: use of moved value: `x`\n    |\n LL |                 drop(x);\n    |                      - value moved here\n-LL |                 drop(x); //[ast]~ ERROR use of moved value: `x`\n+LL |                 drop(x);\n    |                      ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "16c62fc1c7ef3a9a90fba3d9ea5ec6b555941a51", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-fn-in-const-a.rs:9:16\n    |\n-LL |         return *x //[ast]~ ERROR cannot move out of borrowed content [E0507]\n+LL |         return *x\n    |                ^^ cannot move out of borrowed content\n \n error: aborting due to previous error"}, {"sha": "16c62fc1c7ef3a9a90fba3d9ea5ec6b555941a51", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-fn-in-const-a.rs:9:16\n    |\n-LL |         return *x //[ast]~ ERROR cannot move out of borrowed content [E0507]\n+LL |         return *x\n    |                ^^ cannot move out of borrowed content\n \n error: aborting due to previous error"}, {"sha": "88b43c1350b47ac355905f7eaf4b50a0eefa0b6d", "filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `_a` because it is borrowed\n LL |     let b = &mut _a;\n    |             ------- borrow of `_a` occurs here\n ...\n-LL |         _a = 4; //[ast]~ ERROR cannot assign to `_a`\n+LL |         _a = 4;\n    |         ^^^^^^ assignment to borrowed `_a` occurs here\n ...\n LL |     drop(b);"}, {"sha": "43c3c3371ff9a87def941d2e49e3e274bcc55343", "filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `_a` because it is borrowed\n LL |     let b = &mut _a;\n    |                  -- borrow of `_a` occurs here\n ...\n-LL |         _a = 4; //[ast]~ ERROR cannot assign to `_a`\n+LL |         _a = 4;\n    |         ^^^^^^ assignment to borrowed `_a` occurs here\n \n error: aborting due to previous error"}, {"sha": "88b43c1350b47ac355905f7eaf4b50a0eefa0b6d", "filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `_a` because it is borrowed\n LL |     let b = &mut _a;\n    |             ------- borrow of `_a` occurs here\n ...\n-LL |         _a = 4; //[ast]~ ERROR cannot assign to `_a`\n+LL |         _a = 4;\n    |         ^^^^^^ assignment to borrowed `_a` occurs here\n ...\n LL |     drop(b);"}, {"sha": "b53cfddbe9386e6490fdbcf68517e45200146896", "filename": "src/test/ui/borrowck/borrowck-issue-14498.ast.nll.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `***p` which is behind a `&` reference\n    |\n LL |     let p = &y;\n    |             -- help: consider changing this to be a mutable reference: `&mut y`\n-LL |     ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n+LL |     ***p = 2;\n    |     ^^^^^^^^ `p` is a `&` reference, so the data it refers to cannot be written\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n@@ -12,9 +12,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -24,9 +24,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -36,9 +36,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -48,9 +48,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -60,9 +60,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -72,9 +72,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -84,9 +84,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -96,9 +96,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n "}, {"sha": "b002ee79083dfc7c70277695da19279c5b7552ce", "filename": "src/test/ui/borrowck/borrowck-issue-14498.ast.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0389]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-issue-14498.rs:19:5\n    |\n-LL |     ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n+LL |     ***p = 2;\n    |     ^^^^^^^^ assignment into an immutable reference\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n@@ -10,7 +10,7 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |              - borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n@@ -19,7 +19,7 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |              - borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n@@ -28,7 +28,7 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |              - borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n@@ -37,7 +37,7 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |              - borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n@@ -46,7 +46,7 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |              --- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n@@ -55,7 +55,7 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |              --- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n@@ -64,7 +64,7 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |              --- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n@@ -73,7 +73,7 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |              --- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n \n error: aborting due to 9 previous errors"}, {"sha": "b53cfddbe9386e6490fdbcf68517e45200146896", "filename": "src/test/ui/borrowck/borrowck-issue-14498.mir.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `***p` which is behind a `&` reference\n    |\n LL |     let p = &y;\n    |             -- help: consider changing this to be a mutable reference: `&mut y`\n-LL |     ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n+LL |     ***p = 2;\n    |     ^^^^^^^^ `p` is a `&` reference, so the data it refers to cannot be written\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n@@ -12,9 +12,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -24,9 +24,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -36,9 +36,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -48,9 +48,9 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n-LL |     **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |              //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -60,9 +60,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -72,9 +72,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -84,9 +84,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n@@ -96,9 +96,9 @@ error[E0506]: cannot assign to `**y.a` because it is borrowed\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n-LL |     **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |                //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+LL |\n LL |     drop(p);\n    |          - borrow later used here\n "}, {"sha": "ab10caa8e31b4a65d88b863034c923c2f07cdd29", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.ast.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n ...\n-LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n+LL |         borrow(&*v);\n    |                 ^^ immutable borrow occurs here\n LL |     }\n LL | }\n@@ -16,7 +16,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n+LL |         borrow(&*v);\n    |                 ^^ immutable borrow occurs here\n ...\n LL | }\n@@ -25,7 +25,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:57:25\n    |\n-LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v);\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -36,7 +36,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:69:25\n    |\n-LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v);\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -50,7 +50,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n@@ -61,18 +61,18 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n \n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n   --> $DIR/borrowck-lend-flow-loop.rs:109:17\n    |\n-LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n+LL |         borrow(&*v);\n    |                 ^^ immutable borrow occurs here\n ...\n-LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n+LL |             x = &mut v;\n    |                      - mutable borrow occurs here\n ...\n LL | }\n@@ -81,7 +81,7 @@ LL | }\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/borrowck-lend-flow-loop.rs:112:22\n    |\n-LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n+LL |             x = &mut v;\n    |                      ^ mutable borrow starts here in previous iteration of loop\n ...\n LL | }"}, {"sha": "6dd6c1fc26ad0db5a9da9cd5b422975848aa754a", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n LL |     let mut x = &mut v;\n    |                 ------ mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n+LL |         borrow(&*v);\n    |                ^^^ immutable borrow occurs here\n ...\n LL |     *x = box 5;\n@@ -15,10 +15,10 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |         **x += 1;\n    |         -------- mutable borrow later used here\n-LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n+LL |         borrow(&*v);\n    |                ^^^ immutable borrow occurs here\n ...\n-LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n+LL |             x = &mut v;\n    |                 ------ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "734f965195c271721581ab9a0ae515ec4105ebc8", "filename": "src/test/ui/borrowck/borrowck-lend-flow-match.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |         Some(ref r) => {\n    |              ----- borrow of `x` occurs here\n-LL |             x = Some(1); //[ast]~ ERROR cannot assign\n+LL |             x = Some(1);\n    |             ^^^^^^^^^^^ assignment to borrowed `x` occurs here\n-LL |             //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |             drop(r);\n    |                  - borrow later used here\n "}, {"sha": "236bc11f2bb37a400130e98b5b8c6d023f495e89", "filename": "src/test/ui/borrowck/borrowck-lend-flow-match.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |         Some(ref r) => {\n    |              ----- borrow of `x` occurs here\n-LL |             x = Some(1); //[ast]~ ERROR cannot assign\n+LL |             x = Some(1);\n    |             ^^^^^^^^^^^ assignment to borrowed `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "734f965195c271721581ab9a0ae515ec4105ebc8", "filename": "src/test/ui/borrowck/borrowck-lend-flow-match.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |         Some(ref r) => {\n    |              ----- borrow of `x` occurs here\n-LL |             x = Some(1); //[ast]~ ERROR cannot assign\n+LL |             x = Some(1);\n    |             ^^^^^^^^^^^ assignment to borrowed `x` occurs here\n-LL |             //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |             drop(r);\n    |                  - borrow later used here\n "}, {"sha": "ecbfeec822cc7f9c249f288ab666767be610b9c5", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `foo` because it was mutably borrowed\n LL |     let p = &mut foo;\n    |             -------- borrow of `foo` occurs here\n LL |     let _ = match foo {\n-LL |         Foo::B => 1, //[mir]~ ERROR [E0503]\n+LL |         Foo::B => 1,\n    |         ^^^^^^ use of borrowed `foo`\n ...\n LL |     drop(p);\n@@ -16,7 +16,7 @@ error[E0503]: cannot use `foo.0` because it was mutably borrowed\n LL |     let p = &mut foo;\n    |             -------- borrow of `foo` occurs here\n ...\n-LL |         Foo::A(x) => x //[ast]~ ERROR [E0503]\n+LL |         Foo::A(x) => x\n    |                ^ use of borrowed `foo`\n ...\n LL |     drop(p);\n@@ -28,7 +28,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n LL |     let _ = match x {\n-LL |         x => x + 1, //[ast]~ ERROR [E0503]\n+LL |         x => x + 1,\n    |         ^ use of borrowed `x`\n ...\n LL |     drop(r);\n@@ -40,7 +40,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n ...\n-LL |         y => y + 2, //[ast]~ ERROR [E0503]\n+LL |         y => y + 2,\n    |         ^ use of borrowed `x`\n ...\n LL |     drop(r);"}, {"sha": "a5da1fc5b20673cfc8f9d05546f76b0ff4643475", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.ast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `(foo as Foo::A).0` because it was mutably borrowed\n LL |     let p = &mut foo;\n    |                  --- borrow of `foo` occurs here\n ...\n-LL |         Foo::A(x) => x //[ast]~ ERROR [E0503]\n+LL |         Foo::A(x) => x\n    |                ^ use of borrowed `foo`\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n@@ -13,7 +13,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let r = &mut x;\n    |                  - borrow of `x` occurs here\n LL |     let _ = match x {\n-LL |         x => x + 1, //[ast]~ ERROR [E0503]\n+LL |         x => x + 1,\n    |         ^ use of borrowed `x`\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n@@ -22,7 +22,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let r = &mut x;\n    |                  - borrow of `x` occurs here\n ...\n-LL |         y => y + 2, //[ast]~ ERROR [E0503]\n+LL |         y => y + 2,\n    |         ^ use of borrowed `x`\n \n error: aborting due to 3 previous errors"}, {"sha": "ecbfeec822cc7f9c249f288ab666767be610b9c5", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `foo` because it was mutably borrowed\n LL |     let p = &mut foo;\n    |             -------- borrow of `foo` occurs here\n LL |     let _ = match foo {\n-LL |         Foo::B => 1, //[mir]~ ERROR [E0503]\n+LL |         Foo::B => 1,\n    |         ^^^^^^ use of borrowed `foo`\n ...\n LL |     drop(p);\n@@ -16,7 +16,7 @@ error[E0503]: cannot use `foo.0` because it was mutably borrowed\n LL |     let p = &mut foo;\n    |             -------- borrow of `foo` occurs here\n ...\n-LL |         Foo::A(x) => x //[ast]~ ERROR [E0503]\n+LL |         Foo::A(x) => x\n    |                ^ use of borrowed `foo`\n ...\n LL |     drop(p);\n@@ -28,7 +28,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n LL |     let _ = match x {\n-LL |         x => x + 1, //[ast]~ ERROR [E0503]\n+LL |         x => x + 1,\n    |         ^ use of borrowed `x`\n ...\n LL |     drop(r);\n@@ -40,7 +40,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n ...\n-LL |         y => y + 2, //[ast]~ ERROR [E0503]\n+LL |         y => y + 2,\n    |         ^ use of borrowed `x`\n ...\n LL |     drop(r);"}, {"sha": "2ac05393e02cb936656b369e6b76e82f25671229", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.ast.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,7 +6,7 @@ LL |         x => {\n    |         |\n    |         first assignment to `x`\n    |         help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -17,7 +17,7 @@ LL |         E::Foo(x) => {\n    |                |\n    |                first assignment to `x`\n    |                help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -28,7 +28,7 @@ LL |         S { bar: x } => {\n    |                  |\n    |                  first assignment to `x`\n    |                  help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -39,7 +39,7 @@ LL |         (x,) => {\n    |          |\n    |          first assignment to `x`\n    |          help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -50,7 +50,7 @@ LL |         [x,_,_] => {\n    |          |\n    |          first assignment to `x`\n    |          help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to 5 previous errors"}, {"sha": "5f43302e0ef2a910ad78b7ee3ef134cc9a77fbea", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.ast.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,39 +3,39 @@ error[E0384]: cannot assign twice to immutable variable `x`\n    |\n LL |         x => {\n    |         - first assignment to `x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/borrowck-match-binding-is-assignment.rs:24:13\n    |\n LL |         E::Foo(x) => {\n    |                - first assignment to `x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/borrowck-match-binding-is-assignment.rs:31:13\n    |\n LL |         S { bar: x } => {\n    |                  - first assignment to `x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/borrowck-match-binding-is-assignment.rs:38:13\n    |\n LL |         (x,) => {\n    |          - first assignment to `x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/borrowck-match-binding-is-assignment.rs:45:13\n    |\n LL |         [x,_,_] => {\n    |          - first assignment to `x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to 5 previous errors"}, {"sha": "2ac05393e02cb936656b369e6b76e82f25671229", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.mir.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,7 +6,7 @@ LL |         x => {\n    |         |\n    |         first assignment to `x`\n    |         help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -17,7 +17,7 @@ LL |         E::Foo(x) => {\n    |                |\n    |                first assignment to `x`\n    |                help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -28,7 +28,7 @@ LL |         S { bar: x } => {\n    |                  |\n    |                  first assignment to `x`\n    |                  help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -39,7 +39,7 @@ LL |         (x,) => {\n    |          |\n    |          first assignment to `x`\n    |          help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n@@ -50,7 +50,7 @@ LL |         [x,_,_] => {\n    |          |\n    |          first assignment to `x`\n    |          help: make this binding mutable: `mut x`\n-LL |             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n+LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to 5 previous errors"}, {"sha": "874c38cb789b3821466bab863e8d4b4543bebefd", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -8,7 +8,7 @@ LL |     call_f(move|| { *t + 1 });\n    |            ------    - variable moved due to use in closure\n    |            |\n    |            value moved into closure here\n-LL |     call_f(move|| { *t + 1 }); //[ast]~ ERROR capture of moved value\n+LL |     call_f(move|| { *t + 1 });\n    |            ^^^^^^    - use occurs due to use in closure\n    |            |\n    |            value used here after move"}, {"sha": "48651eeae208e933e258ef5ad2a0f90d7ab90928", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0382]: capture of moved value: `t`\n    |\n LL |     call_f(move|| { *t + 1 });\n    |            ------ value moved (into closure) here\n-LL |     call_f(move|| { *t + 1 }); //[ast]~ ERROR capture of moved value\n+LL |     call_f(move|| { *t + 1 });\n    |                      ^ value captured here after move\n    |\n    = note: move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait"}, {"sha": "874c38cb789b3821466bab863e8d4b4543bebefd", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -8,7 +8,7 @@ LL |     call_f(move|| { *t + 1 });\n    |            ------    - variable moved due to use in closure\n    |            |\n    |            value moved into closure here\n-LL |     call_f(move|| { *t + 1 }); //[ast]~ ERROR capture of moved value\n+LL |     call_f(move|| { *t + 1 });\n    |            ^^^^^^    - use occurs due to use in closure\n    |            |\n    |            value used here after move"}, {"sha": "88a1ab2f90651a3477d4d20344781cc5a01b7315", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `a[..]`\n    |\n LL |     let [_, _x] = a;\n    |             -- value moved here\n-LL |     let [.., _y] = a; //[ast]~ ERROR [E0382]\n+LL |     let [.., _y] = a;\n    |              ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `a[..]`\n    |\n LL |     let [_x, _] = a;\n    |          -- value moved here\n-LL |     let [_y..] = a; //[ast]~ ERROR [E0382]\n+LL |     let [_y..] = a;\n    |          ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}, {"sha": "88a1ab2f90651a3477d4d20344781cc5a01b7315", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `a[..]`\n    |\n LL |     let [_, _x] = a;\n    |             -- value moved here\n-LL |     let [.., _y] = a; //[ast]~ ERROR [E0382]\n+LL |     let [.., _y] = a;\n    |              ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `a[..]`\n    |\n LL |     let [_x, _] = a;\n    |          -- value moved here\n-LL |     let [_y..] = a; //[ast]~ ERROR [E0382]\n+LL |     let [_y..] = a;\n    |          ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}, {"sha": "26d06c081dc02a4763dedd2a799a710332f39583", "filename": "src/test/ui/borrowck/borrowck-move-out-of-static-item.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of static item\n   --> $DIR/borrowck-move-out-of-static-item.rs:18:10\n    |\n-LL |     test(BAR); //[ast]~ ERROR cannot move out of static item [E0507]\n+LL |     test(BAR);\n    |          ^^^ cannot move out of static item\n \n error: aborting due to previous error"}, {"sha": "26d06c081dc02a4763dedd2a799a710332f39583", "filename": "src/test/ui/borrowck/borrowck-move-out-of-static-item.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of static item\n   --> $DIR/borrowck-move-out-of-static-item.rs:18:10\n    |\n-LL |     test(BAR); //[ast]~ ERROR cannot move out of static item [E0507]\n+LL |     test(BAR);\n    |          ^^^ cannot move out of static item\n \n error: aborting due to previous error"}, {"sha": "c1c04ca91422e2ca26d47a4e13c92720d5654bc3", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n    |\n LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n-LL |         //[mir]~^ ERROR [E0509]\n+LL |\n LL |         S {f:_s} => {}\n    |              -- data moved here\n    |"}, {"sha": "c1c04ca91422e2ca26d47a4e13c92720d5654bc3", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n    |\n LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n-LL |         //[mir]~^ ERROR [E0509]\n+LL |\n LL |         S {f:_s} => {}\n    |              -- data moved here\n    |"}, {"sha": "a6e7d74af1d4e309a2e2e8e7a86e6f5e55c726b2", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.ast.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,30 +1,30 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:13:30\n    |\n-LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             1 => { addr.push(&mut x); }\n    |                    ----      ^^^^^^ second mutable borrow occurs here\n    |                    |\n    |                    first borrow later used here\n ...\n-LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             _ => { addr.push(&mut x); }\n    |                              ------ first mutable borrow occurs here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:15:30\n    |\n-LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             1 => { addr.push(&mut x); }\n    |                    ---- first borrow later used here\n-LL |             //[mir]~^ ERROR [E0499]\n-LL |             2 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |\n+LL |             2 => { addr.push(&mut x); }\n    |                              ^^^^^^ second mutable borrow occurs here\n-LL |             //[mir]~^ ERROR [E0499]\n-LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |\n+LL |             _ => { addr.push(&mut x); }\n    |                              ------ first mutable borrow occurs here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:17:30\n    |\n-LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             _ => { addr.push(&mut x); }\n    |                              ^^^^^^ mutable borrow starts here in previous iteration of loop\n \n error: aborting due to 3 previous errors"}, {"sha": "cee61db38f306a7398b647487a2699ebb1c521b5", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.ast.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:13:35\n    |\n-LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             1 => { addr.push(&mut x); }\n    |                                   ^ mutable borrow starts here in previous iteration of loop\n ...\n LL | }\n@@ -10,10 +10,10 @@ LL | }\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:15:35\n    |\n-LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             1 => { addr.push(&mut x); }\n    |                                   - first mutable borrow occurs here\n-LL |             //[mir]~^ ERROR [E0499]\n-LL |             2 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |\n+LL |             2 => { addr.push(&mut x); }\n    |                                   ^ second mutable borrow occurs here\n ...\n LL | }\n@@ -22,10 +22,10 @@ LL | }\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:17:35\n    |\n-LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             1 => { addr.push(&mut x); }\n    |                                   - first mutable borrow occurs here\n ...\n-LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             _ => { addr.push(&mut x); }\n    |                                   ^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "a6e7d74af1d4e309a2e2e8e7a86e6f5e55c726b2", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,30 +1,30 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:13:30\n    |\n-LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             1 => { addr.push(&mut x); }\n    |                    ----      ^^^^^^ second mutable borrow occurs here\n    |                    |\n    |                    first borrow later used here\n ...\n-LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             _ => { addr.push(&mut x); }\n    |                              ------ first mutable borrow occurs here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:15:30\n    |\n-LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             1 => { addr.push(&mut x); }\n    |                    ---- first borrow later used here\n-LL |             //[mir]~^ ERROR [E0499]\n-LL |             2 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |\n+LL |             2 => { addr.push(&mut x); }\n    |                              ^^^^^^ second mutable borrow occurs here\n-LL |             //[mir]~^ ERROR [E0499]\n-LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |\n+LL |             _ => { addr.push(&mut x); }\n    |                              ------ first mutable borrow occurs here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:17:30\n    |\n-LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n+LL |             _ => { addr.push(&mut x); }\n    |                              ^^^^^^ mutable borrow starts here in previous iteration of loop\n \n error: aborting due to 3 previous errors"}, {"sha": "f0e16838c8aa87e20254401f026345fe10431cc0", "filename": "src/test/ui/borrowck/borrowck-pat-reassign-binding.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,9 +4,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |       Some(ref i) => {\n    |            ----- borrow of `x` occurs here\n LL |           // But on this branch, `i` is an outstanding borrow\n-LL |           x = Some(*i+1); //[ast]~ ERROR cannot assign to `x`\n+LL |           x = Some(*i+1);\n    |           ^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n-LL |           //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |           drop(i);\n    |                - borrow later used here\n "}, {"sha": "d7bce40edcf0cc20367b758ed17a5bffc8969707", "filename": "src/test/ui/borrowck/borrowck-pat-reassign-binding.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |       Some(ref i) => {\n    |            ----- borrow of `x` occurs here\n LL |           // But on this branch, `i` is an outstanding borrow\n-LL |           x = Some(*i+1); //[ast]~ ERROR cannot assign to `x`\n+LL |           x = Some(*i+1);\n    |           ^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "f0e16838c8aa87e20254401f026345fe10431cc0", "filename": "src/test/ui/borrowck/borrowck-pat-reassign-binding.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,9 +4,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |       Some(ref i) => {\n    |            ----- borrow of `x` occurs here\n LL |           // But on this branch, `i` is an outstanding borrow\n-LL |           x = Some(*i+1); //[ast]~ ERROR cannot assign to `x`\n+LL |           x = Some(*i+1);\n    |           ^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n-LL |           //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+LL |\n LL |           drop(i);\n    |                - borrow later used here\n "}, {"sha": "d2b6e060569174ba6e4bf7c58cb7fcded61835bd", "filename": "src/test/ui/borrowck/borrowck-thread-local-static-borrow-outlives-fn.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,9 +1,9 @@\n error[E0712]: thread-local variable borrowed past end of function\n   --> $DIR/borrowck-thread-local-static-borrow-outlives-fn.rs:11:20\n    |\n-LL |      assert_static(&FOO); //[ast]~ ERROR [E0597]\n+LL |      assert_static(&FOO);\n    |                    ^^^^ thread-local variables cannot be borrowed beyond the end of the function\n-LL |                           //[mir]~^ ERROR [E0712]\n+LL |\n LL | }\n    | - end of enclosing function is here\n "}, {"sha": "ce7b5e681c69dc49ddf7d946ea76bc11633787df", "filename": "src/test/ui/borrowck/borrowck-thread-local-static-borrow-outlives-fn.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-thread-local-static-borrow-outlives-fn.rs:11:21\n    |\n-LL |      assert_static(&FOO); //[ast]~ ERROR [E0597]\n+LL |      assert_static(&FOO);\n    |                     ^^^ - borrowed value only lives until here\n    |                     |\n    |                     borrowed value does not live long enough"}, {"sha": "d2b6e060569174ba6e4bf7c58cb7fcded61835bd", "filename": "src/test/ui/borrowck/borrowck-thread-local-static-borrow-outlives-fn.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,9 +1,9 @@\n error[E0712]: thread-local variable borrowed past end of function\n   --> $DIR/borrowck-thread-local-static-borrow-outlives-fn.rs:11:20\n    |\n-LL |      assert_static(&FOO); //[ast]~ ERROR [E0597]\n+LL |      assert_static(&FOO);\n    |                    ^^^^ thread-local variables cannot be borrowed beyond the end of the function\n-LL |                           //[mir]~^ ERROR [E0712]\n+LL |\n LL | }\n    | - end of enclosing function is here\n "}, {"sha": "c29ff5383043c834cbdc6faabbce80dd606f2350", "filename": "src/test/ui/borrowck/borrowck-unary-move.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n-LL |     free(x); //[ast]~ ERROR cannot move out of `x` because it is borrowed\n+LL |     free(x);\n    |          ^ move out of `x` occurs here\n-LL |     //[mir]~^ ERROR cannot move out of `x` because it is borrowed\n+LL |\n LL |     *y\n    |     -- borrow later used here\n "}, {"sha": "e05b110a2c011356be3973736874eb1666e91d1c", "filename": "src/test/ui/borrowck/borrowck-unary-move.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let y = &*x;\n    |              -- borrow of `*x` occurs here\n-LL |     free(x); //[ast]~ ERROR cannot move out of `x` because it is borrowed\n+LL |     free(x);\n    |          ^ move out of `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "c29ff5383043c834cbdc6faabbce80dd606f2350", "filename": "src/test/ui/borrowck/borrowck-unary-move.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unary-move.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n-LL |     free(x); //[ast]~ ERROR cannot move out of `x` because it is borrowed\n+LL |     free(x);\n    |          ^ move out of `x` occurs here\n-LL |     //[mir]~^ ERROR cannot move out of `x` because it is borrowed\n+LL |\n LL |     *y\n    |     -- borrow later used here\n "}, {"sha": "a6e5f0b0e9db7b62885259dd1e92eb41ce346fcf", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,15 +1,15 @@\n error[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-field-access.rs:24:13\n    |\n-LL |     let _ = a.x + 1; //[ast]~ ERROR use of possibly uninitialized variable: `a.x`\n+LL |     let _ = a.x + 1;\n    |             ^^^ use of possibly uninitialized `a.x`\n \n error[E0382]: use of moved value: `line1.origin`\n   --> $DIR/borrowck-uninit-field-access.rs:29:13\n    |\n LL |     let _moved = line1.origin;\n    |                  ------------ value moved here\n-LL |     let _ = line1.origin.x + 1; //[ast]~ ERROR use of moved value: `line1.origin.x`\n+LL |     let _ = line1.origin.x + 1;\n    |             ^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `line1.origin` has type `Point`, which does not implement the `Copy` trait\n@@ -19,7 +19,7 @@ error[E0382]: use of moved value: `line2`\n    |\n LL |     let _moved = (line2.origin, line2.middle);\n    |                                 ------------ value moved here\n-LL |     line2.consume(); //[ast]~ ERROR use of partially moved value: `line2` [E0382]\n+LL |     line2.consume();\n    |     ^^^^^ value used here after partial move\n    |\n    = note: move occurs because `line2.middle` has type `Point`, which does not implement the `Copy` trait"}, {"sha": "58fc1d4b62149f617e061d84862ed025500cd1e9", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.ast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,15 +1,15 @@\n error[E0381]: use of possibly uninitialized variable: `a.x`\n   --> $DIR/borrowck-uninit-field-access.rs:24:13\n    |\n-LL |     let _ = a.x + 1; //[ast]~ ERROR use of possibly uninitialized variable: `a.x`\n+LL |     let _ = a.x + 1;\n    |             ^^^ use of possibly uninitialized `a.x`\n \n error[E0382]: use of moved value: `line1.origin.x`\n   --> $DIR/borrowck-uninit-field-access.rs:29:13\n    |\n LL |     let _moved = line1.origin;\n    |         ------ value moved here\n-LL |     let _ = line1.origin.x + 1; //[ast]~ ERROR use of moved value: `line1.origin.x`\n+LL |     let _ = line1.origin.x + 1;\n    |             ^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `line1.origin` has type `Point`, which does not implement the `Copy` trait\n@@ -19,7 +19,7 @@ error[E0382]: use of partially moved value: `line2`\n    |\n LL |     let _moved = (line2.origin, line2.middle);\n    |                   ------------ value moved here\n-LL |     line2.consume(); //[ast]~ ERROR use of partially moved value: `line2` [E0382]\n+LL |     line2.consume();\n    |     ^^^^^ value used here after move\n    |\n    = note: move occurs because `line2.origin` has type `Point`, which does not implement the `Copy` trait"}, {"sha": "a6e5f0b0e9db7b62885259dd1e92eb41ce346fcf", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,15 +1,15 @@\n error[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-field-access.rs:24:13\n    |\n-LL |     let _ = a.x + 1; //[ast]~ ERROR use of possibly uninitialized variable: `a.x`\n+LL |     let _ = a.x + 1;\n    |             ^^^ use of possibly uninitialized `a.x`\n \n error[E0382]: use of moved value: `line1.origin`\n   --> $DIR/borrowck-uninit-field-access.rs:29:13\n    |\n LL |     let _moved = line1.origin;\n    |                  ------------ value moved here\n-LL |     let _ = line1.origin.x + 1; //[ast]~ ERROR use of moved value: `line1.origin.x`\n+LL |     let _ = line1.origin.x + 1;\n    |             ^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `line1.origin` has type `Point`, which does not implement the `Copy` trait\n@@ -19,7 +19,7 @@ error[E0382]: use of moved value: `line2`\n    |\n LL |     let _moved = (line2.origin, line2.middle);\n    |                                 ------------ value moved here\n-LL |     line2.consume(); //[ast]~ ERROR use of partially moved value: `line2` [E0382]\n+LL |     line2.consume();\n    |     ^^^^^ value used here after partial move\n    |\n    = note: move occurs because `line2.middle` has type `Point`, which does not implement the `Copy` trait"}, {"sha": "a5cf59c945a20455c31f1ec33b00aa759d58a060", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.ast.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,43 +1,43 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:14\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |              ^^^^ use of possibly uninitialized `**x`\n \n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:15:14\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |              ^^^^ use of possibly uninitialized `**x`\n \n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:19:14\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |              ^^^^ use of possibly uninitialized `**x`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:24:5\n    |\n-LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = 0;\n    |     ^^^^^^^ use of possibly uninitialized `a`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:29:5\n    |\n-LL |     a.x = &&0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = &&0;\n    |     ^^^^^^^^^ use of possibly uninitialized `a`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:35:5\n    |\n-LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = 0;\n    |     ^^^^^^^ use of possibly uninitialized `a`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:40:5\n    |\n-LL |     a.x = &&0;       //[mir]~ assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = &&0;\n    |     ^^^^^^^^^ use of possibly uninitialized `a`\n \n error: aborting due to 7 previous errors"}, {"sha": "8cb3f3bf89f36642702a2256ae1d5cf6d5e4ad32", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.ast.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,43 +1,43 @@\n error[E0381]: use of possibly uninitialized variable: `**x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:15\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |               ^^^ use of possibly uninitialized `**x`\n \n error[E0381]: use of possibly uninitialized variable: `**x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:15:15\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |               ^^^ use of possibly uninitialized `**x`\n \n error[E0381]: use of possibly uninitialized variable: `**x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:19:15\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |               ^^^ use of possibly uninitialized `**x`\n \n error[E0381]: use of possibly uninitialized variable: `a.x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:25:15\n    |\n-LL |     let _b = &a.x; //[ast]~ ERROR use of possibly uninitialized variable: `a.x` [E0381]\n+LL |     let _b = &a.x;\n    |               ^^^ use of possibly uninitialized `a.x`\n \n error[E0381]: use of possibly uninitialized variable: `**a.x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:30:15\n    |\n-LL |     let _b = &**a.x; //[ast]~ ERROR use of possibly uninitialized variable: `**a.x` [E0381]\n+LL |     let _b = &**a.x;\n    |               ^^^^^ use of possibly uninitialized `**a.x`\n \n error[E0381]: use of possibly uninitialized variable: `a.y`\n   --> $DIR/borrowck-uninit-ref-chain.rs:36:15\n    |\n-LL |     let _b = &a.y; //[ast]~ ERROR use of possibly uninitialized variable: `a.y` [E0381]\n+LL |     let _b = &a.y;\n    |               ^^^ use of possibly uninitialized `a.y`\n \n error[E0381]: use of possibly uninitialized variable: `**a.y`\n   --> $DIR/borrowck-uninit-ref-chain.rs:41:15\n    |\n-LL |     let _b = &**a.y; //[ast]~ ERROR use of possibly uninitialized variable: `**a.y` [E0381]\n+LL |     let _b = &**a.y;\n    |               ^^^^^ use of possibly uninitialized `**a.y`\n \n error: aborting due to 7 previous errors"}, {"sha": "a5cf59c945a20455c31f1ec33b00aa759d58a060", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.mir.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,43 +1,43 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:14\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |              ^^^^ use of possibly uninitialized `**x`\n \n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:15:14\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |              ^^^^ use of possibly uninitialized `**x`\n \n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:19:14\n    |\n-LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n+LL |     let _y = &**x;\n    |              ^^^^ use of possibly uninitialized `**x`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:24:5\n    |\n-LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = 0;\n    |     ^^^^^^^ use of possibly uninitialized `a`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:29:5\n    |\n-LL |     a.x = &&0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = &&0;\n    |     ^^^^^^^^^ use of possibly uninitialized `a`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:35:5\n    |\n-LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = 0;\n    |     ^^^^^^^ use of possibly uninitialized `a`\n \n error[E0381]: assign to part of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:40:5\n    |\n-LL |     a.x = &&0;       //[mir]~ assign to part of possibly uninitialized variable: `a` [E0381]\n+LL |     a.x = &&0;\n    |     ^^^^^^^^^ use of possibly uninitialized `a`\n \n error: aborting due to 7 previous errors"}, {"sha": "1a2433c8f6afdf2630819807a21a9803f100a568", "filename": "src/test/ui/borrowck/borrowck-union-borrow.mir.stderr", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/c82834e2b930619d4143e4dd94fb80888fa190c9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c82834e2b930619d4143e4dd94fb80888fa190c9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.mir.stderr?ref=c82834e2b930619d4143e4dd94fb80888fa190c9", "patch": "@@ -1,136 +0,0 @@\n-error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-union-borrow.rs:27:23\n-   |\n-LL |             let ra = &u.a;\n-   |                      ---- immutable borrow occurs here\n-LL |             let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n-   |                       ^^^^^^^^ mutable borrow occurs here\n-LL |                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n-LL |             drop(ra);\n-   |                  -- immutable borrow later used here\n-\n-error[E0506]: cannot assign to `u.a` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:33:13\n-   |\n-LL |             let ra = &u.a;\n-   |                      ---- borrow of `u.a` occurs here\n-LL |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n-   |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n-LL |             drop(ra);\n-   |                  -- borrow later used here\n-\n-error[E0502]: cannot borrow `u.b` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-union-borrow.rs:50:23\n-   |\n-LL |             let ra = &u.a;\n-   |                      ---- immutable borrow occurs here\n-LL |             let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n-   |                       ^^^^^^^^ mutable borrow occurs here\n-LL |                                 //[mir]~^ ERROR cannot borrow `u.b` as mutable because it is also borrowed as immutable\n-LL |             drop(ra);\n-   |                  -- immutable borrow later used here\n-\n-error[E0506]: cannot assign to `u.b` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:56:13\n-   |\n-LL |             let ra = &u.a;\n-   |                      ---- borrow of `u.b` occurs here\n-LL |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n-   |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed\n-LL |             drop(ra);\n-   |                  -- borrow later used here\n-\n-error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-union-borrow.rs:63:22\n-   |\n-LL |             let rma = &mut u.a;\n-   |                       -------- mutable borrow occurs here\n-LL |             let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n-   |                      ^^^^ immutable borrow occurs here\n-LL |                          //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n-LL |             drop(rma);\n-   |                  --- mutable borrow later used here\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow.rs:69:21\n-   |\n-LL |             let ra = &mut u.a;\n-   |                      -------- borrow of `u.a` occurs here\n-LL |             let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n-   |                     ^^^ use of borrowed `u.a`\n-LL |                          //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n-LL |             drop(ra);\n-   |                  -- borrow later used here\n-\n-error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n-  --> $DIR/borrowck-union-borrow.rs:75:24\n-   |\n-LL |             let rma = &mut u.a;\n-   |                       -------- first mutable borrow occurs here\n-LL |             let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time\n-   |                        ^^^^^^^^ second mutable borrow occurs here\n-LL |                                  //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time\n-LL |             drop(rma);\n-   |                  --- first borrow later used here\n-\n-error[E0506]: cannot assign to `u.a` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:81:13\n-   |\n-LL |             let rma = &mut u.a;\n-   |                       -------- borrow of `u.a` occurs here\n-LL |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n-   |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n-LL |             drop(rma);\n-   |                  --- borrow later used here\n-\n-error[E0502]: cannot borrow `u.b` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-union-borrow.rs:88:22\n-   |\n-LL |             let rma = &mut u.a;\n-   |                       -------- mutable borrow occurs here\n-LL |             let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n-   |                      ^^^^ immutable borrow occurs here\n-LL |                            //[mir]~^ ERROR cannot borrow `u.b` as immutable because it is also borrowed as mutable\n-LL |             drop(rma);\n-   |                  --- mutable borrow later used here\n-\n-error[E0503]: cannot use `u.b` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow.rs:94:21\n-   |\n-LL |             let ra = &mut u.a;\n-   |                      -------- borrow of `u.a` occurs here\n-LL |             let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed\n-   |                     ^^^ use of borrowed `u.a`\n-...\n-LL |             drop(ra);\n-   |                  -- borrow later used here\n-\n-error[E0499]: cannot borrow `u.b` as mutable more than once at a time\n-  --> $DIR/borrowck-union-borrow.rs:101:24\n-   |\n-LL |             let rma = &mut u.a;\n-   |                       -------- first mutable borrow occurs here\n-LL |             let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n-   |                        ^^^^^^^^ second mutable borrow occurs here\n-LL |                                  //[mir]~^ ERROR cannot borrow `u.b` as mutable more than once at a time\n-LL |             drop(rma);\n-   |                  --- first borrow later used here\n-\n-error[E0506]: cannot assign to `u.b` because it is borrowed\n-  --> $DIR/borrowck-union-borrow.rs:107:13\n-   |\n-LL |             let rma = &mut u.a;\n-   |                       -------- borrow of `u.b` occurs here\n-LL |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n-   |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n-LL |                      //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed\n-LL |             drop(rma);\n-   |                  --- borrow later used here\n-\n-error: aborting due to 12 previous errors\n-\n-Some errors occurred: E0499, E0502, E0503, E0506.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "c5e4f89f7779a83f097c954feee9ca3107a4ed02", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n    |\n-LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n+LL |     w[5] = 0;\n    |     ^^^^ use of possibly uninitialized `*w`\n \n error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:10:5\n    |\n-LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n+LL |     w[5] = 0;\n    |     ^^^^ use of possibly uninitialized `*w`\n \n error: aborting due to 2 previous errors"}, {"sha": "e235bdfa8a969d6b8540cad8f8cd921c6fa6e4cc", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: use of possibly uninitialized variable: `*w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n    |\n-LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n+LL |     w[5] = 0;\n    |     ^^^^^^^^ use of possibly uninitialized `*w`\n \n error[E0381]: use of possibly uninitialized variable: `*w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:10:5\n    |\n-LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n+LL |     w[5] = 0;\n    |     ^^^^^^^^ use of possibly uninitialized `*w`\n \n error: aborting due to 2 previous errors"}, {"sha": "c5e4f89f7779a83f097c954feee9ca3107a4ed02", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n    |\n-LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n+LL |     w[5] = 0;\n    |     ^^^^ use of possibly uninitialized `*w`\n \n error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:10:5\n    |\n-LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n+LL |     w[5] = 0;\n    |     ^^^^ use of possibly uninitialized `*w`\n \n error: aborting due to 2 previous errors"}, {"sha": "a208dc486ecb23b1dbad9d91117f776f24e9b9c6", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:12:13\n    |\n-LL |     let y = x as *const Foo; //[ast]~ ERROR use of possibly uninitialized variable: `*x`\n+LL |     let y = x as *const Foo;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "49a43003f60e403b0b34fa88740f3bf87abfc0d7", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `*x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:12:13\n    |\n-LL |     let y = x as *const Foo; //[ast]~ ERROR use of possibly uninitialized variable: `*x`\n+LL |     let y = x as *const Foo;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "a208dc486ecb23b1dbad9d91117f776f24e9b9c6", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:12:13\n    |\n-LL |     let y = x as *const Foo; //[ast]~ ERROR use of possibly uninitialized variable: `*x`\n+LL |     let y = x as *const Foo;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "0f62c3ae2c7fdda2d44364f343bf0242f605010f", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:10:13\n    |\n-LL |     let y = x as *const i32; //[ast]~ ERROR use of possibly uninitialized variable: `*x` [E0381]\n+LL |     let y = x as *const i32;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "d8137387862a4a6759eda44a655ba7ce714465c7", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `*x`\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:10:13\n    |\n-LL |     let y = x as *const i32; //[ast]~ ERROR use of possibly uninitialized variable: `*x` [E0381]\n+LL |     let y = x as *const i32;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "0f62c3ae2c7fdda2d44364f343bf0242f605010f", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:10:13\n    |\n-LL |     let y = x as *const i32; //[ast]~ ERROR use of possibly uninitialized variable: `*x` [E0381]\n+LL |     let y = x as *const i32;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "7d0d8882ded70d7509b442c55c1ca06a70ba05e0", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `a[_]` because it is borrowed\n LL |         [1, 2, ref tail..] => tail,\n    |                -------- borrow of `a[_]` occurs here\n ...\n-LL |     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n+LL |     a[2] = 0;\n    |     ^^^^^^^^ assignment to borrowed `a[_]` occurs here\n ...\n LL |     println!(\"t[0]: {}\", t[0]);"}, {"sha": "1207d4a1095dc5e7723284cde1e04271db70169a", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `a[..]` because it is borrowed\n LL |         [1, 2, ref tail..] => tail,\n    |                -------- borrow of `a[..]` occurs here\n ...\n-LL |     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n+LL |     a[2] = 0;\n    |     ^^^^^^^^ assignment to borrowed `a[..]` occurs here\n \n error: aborting due to previous error"}, {"sha": "f764d5fb5283f67aec70402781bd1f56e784af5e", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.cmp.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.cmp.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `a[..]` because it is borrowed (Ast)\n LL |         [1, 2, ref tail..] => tail,\n    |                -------- borrow of `a[..]` occurs here\n ...\n-LL |     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n+LL |     a[2] = 0;\n    |     ^^^^^^^^ assignment to borrowed `a[..]` occurs here\n \n error[E0506]: cannot assign to `a[_]` because it is borrowed (Mir)\n@@ -13,7 +13,7 @@ error[E0506]: cannot assign to `a[_]` because it is borrowed (Mir)\n LL |         [1, 2, ref tail..] => tail,\n    |                -------- borrow of `a[_]` occurs here\n ...\n-LL |     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n+LL |     a[2] = 0;\n    |     ^^^^^^^^ assignment to borrowed `a[_]` occurs here\n ...\n LL |     println!(\"t[0]: {}\", t[0]);"}, {"sha": "14078b76897c917d3adadcf1845b77ae82973ee5", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-in-static-initializer-issue-38520.rs:15:23\n    |\n-LL | static Y: usize = get(*&X); //[ast]~ ERROR E0507\n+LL | static Y: usize = get(*&X);\n    |                       ^^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-in-static-initializer-issue-38520.rs:17:22\n    |\n-LL | const Z: usize = get(*&X); //[ast]~ ERROR E0507\n+LL | const Z: usize = get(*&X);\n    |                      ^^^ cannot move out of borrowed content\n \n error: aborting due to 2 previous errors"}, {"sha": "14078b76897c917d3adadcf1845b77ae82973ee5", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-in-static-initializer-issue-38520.rs:15:23\n    |\n-LL | static Y: usize = get(*&X); //[ast]~ ERROR E0507\n+LL | static Y: usize = get(*&X);\n    |                       ^^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-in-static-initializer-issue-38520.rs:17:22\n    |\n-LL | const Z: usize = get(*&X); //[ast]~ ERROR E0507\n+LL | const Z: usize = get(*&X);\n    |                      ^^^ cannot move out of borrowed content\n \n error: aborting due to 2 previous errors"}, {"sha": "8370aad6f3046e26b88d4e15e7113942a75f9db3", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -5,7 +5,7 @@ LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n LL |     { let z = &x; read(z); }\n    |               ^^ immutable borrow occurs here\n-LL |     //[nll_target]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n@@ -16,7 +16,7 @@ LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n LL |     let z = &x;\n    |             ^^ immutable borrow occurs here\n-LL |     //[nll_target]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n@@ -38,7 +38,7 @@ LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n LL |     let _z = &x;\n    |              ^^ immutable borrow occurs here\n-LL |     //[nll_target]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+LL |\n LL |     *y += 1;\n    |     ------- mutable borrow later used here\n "}, {"sha": "9f31c3f87c37dca2a0bc4e3b4cc0d24372413039", "filename": "src/test/ui/borrowck/two-phase-allow-access-during-reservation.nll_target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -16,7 +16,7 @@ error[E0503]: cannot use `i` because it was mutably borrowed\n LL |     /*1*/ let p = &mut i; // (reservation of `i` starts here)\n    |                   ------ borrow of `i` occurs here\n ...\n-LL |     /*4*/ let k = i;      //[nll_beyond]~  ERROR cannot use `i` because it was mutably borrowed [E0503]\n+LL |     /*4*/ let k = i;\n    |                   ^ use of borrowed `i`\n ...\n LL |     /*5*/ *p += 1;"}, {"sha": "9ec36f4c142e968e848df95bb28897b110ee0695", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -2,11 +2,11 @@ error: compilation successful\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n "}, {"sha": "9ec36f4c142e968e848df95bb28897b110ee0695", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -2,11 +2,11 @@ error: compilation successful\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n "}, {"sha": "9ec36f4c142e968e848df95bb28897b110ee0695", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -2,11 +2,11 @@ error: compilation successful\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n "}, {"sha": "9ec36f4c142e968e848df95bb28897b110ee0695", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -2,11 +2,11 @@ error: compilation successful\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n "}, {"sha": "9ec36f4c142e968e848df95bb28897b110ee0695", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -2,11 +2,11 @@ error: compilation successful\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n "}, {"sha": "2b69b3f6228ba217b4b88b759132a3f8704d9d9b", "filename": "src/test/ui/hrtb/hrtb-identity-fn-borrows.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |     let y = f.call(&x);\n    |                    -- borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n ...\n LL |     drop(y);"}, {"sha": "6f055aaf5ae40e9e4528c5bba7cae36ffe70d008", "filename": "src/test/ui/hrtb/hrtb-identity-fn-borrows.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |     let y = f.call(&x);\n    |                     - borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "2b69b3f6228ba217b4b88b759132a3f8704d9d9b", "filename": "src/test/ui/hrtb/hrtb-identity-fn-borrows.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-identity-fn-borrows.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |     let y = f.call(&x);\n    |                    -- borrow of `x` occurs here\n-LL |     x = 5; //[ast]~ ERROR cannot assign\n+LL |     x = 5;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n ...\n LL |     drop(y);"}, {"sha": "5085f3697184e0a6cee6541a8bb41103f50ec0fb", "filename": "src/test/ui/immut-function-arguments.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,13 +3,13 @@ error[E0594]: cannot assign to `*y`, as `y` is not declared as mutable\n    |\n LL | fn f(y: Box<isize>) {\n    |      - help: consider changing this to be mutable: `mut y`\n-LL |     *y = 5; //[ast]~ ERROR cannot assign\n+LL |     *y = 5;\n    |     ^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `*q`, as `q` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:10:35\n    |\n-LL |     let _frob = |q: Box<isize>| { *q = 2; }; //[ast]~ ERROR cannot assign\n+LL |     let _frob = |q: Box<isize>| { *q = 2; };\n    |                  -                ^^^^^^ cannot assign\n    |                  |\n    |                  help: consider changing this to be mutable: `mut q`"}, {"sha": "f371a13cd4d2574d73d7797428f1aecad5e59004", "filename": "src/test/ui/immut-function-arguments.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimmut-function-arguments.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,13 +3,13 @@ error[E0594]: cannot assign to immutable `Box` content `*y`\n    |\n LL | fn f(y: Box<isize>) {\n    |      - help: make this binding mutable: `mut y`\n-LL |     *y = 5; //[ast]~ ERROR cannot assign\n+LL |     *y = 5;\n    |     ^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable `Box` content `*q`\n   --> $DIR/immut-function-arguments.rs:10:35\n    |\n-LL |     let _frob = |q: Box<isize>| { *q = 2; }; //[ast]~ ERROR cannot assign\n+LL |     let _frob = |q: Box<isize>| { *q = 2; };\n    |                  -                ^^^^^^ cannot borrow as mutable\n    |                  |\n    |                  help: make this binding mutable: `mut q`"}, {"sha": "5085f3697184e0a6cee6541a8bb41103f50ec0fb", "filename": "src/test/ui/immut-function-arguments.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fimmut-function-arguments.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fimmut-function-arguments.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimmut-function-arguments.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,13 +3,13 @@ error[E0594]: cannot assign to `*y`, as `y` is not declared as mutable\n    |\n LL | fn f(y: Box<isize>) {\n    |      - help: consider changing this to be mutable: `mut y`\n-LL |     *y = 5; //[ast]~ ERROR cannot assign\n+LL |     *y = 5;\n    |     ^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `*q`, as `q` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:10:35\n    |\n-LL |     let _frob = |q: Box<isize>| { *q = 2; }; //[ast]~ ERROR cannot assign\n+LL |     let _frob = |q: Box<isize>| { *q = 2; };\n    |                  -                ^^^^^^ cannot assign\n    |                  |\n    |                  help: consider changing this to be mutable: `mut q`"}, {"sha": "5604037a38d285ef53c482f9063a936596398f7b", "filename": "src/test/ui/issues/issue-17263.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,10 +1,10 @@\n error: compilation successful\n   --> $DIR/issue-17263.rs:15:1\n    |\n-LL | / fn main() { //[nll]~ ERROR compilation successful\n+LL | / fn main() {\n LL | |     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n LL | |     let (a, b) = (&mut x.a, &mut x.b);\n-LL | |     //[ast]~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+LL | |\n ...  |\n LL | |     use_mut(a);\n LL | | }"}, {"sha": "107f88b413b8c2628cafcc6b50fe28e9ebee8158", "filename": "src/test/ui/issues/issue-25579.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-25579.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-25579.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25579.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/issue-25579.rs:21:1\n    |\n-LL | / fn main() { //[mir]~ ERROR compilation successful\n+LL | / fn main() {\n LL | | }\n    | |_^\n "}, {"sha": "a44cc9568742f62572ba1408434c68ce8a437b15", "filename": "src/test/ui/issues/issue-25579.ast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-25579.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-25579.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25579.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `l.0` as mutable more than once at a time\n   --> $DIR/issue-25579.rs:14:32\n    |\n-LL |         &mut Sexpression::Cons(ref mut expr) => { //[ast]~ ERROR [E0499]\n+LL |         &mut Sexpression::Cons(ref mut expr) => {\n    |                                ^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n ...\n LL | }\n@@ -10,9 +10,9 @@ LL | }\n error[E0506]: cannot assign to `l` because it is borrowed\n   --> $DIR/issue-25579.rs:15:13\n    |\n-LL |         &mut Sexpression::Cons(ref mut expr) => { //[ast]~ ERROR [E0499]\n+LL |         &mut Sexpression::Cons(ref mut expr) => {\n    |                                ------------ borrow of `l` occurs here\n-LL |             l = &mut **expr; //[ast]~ ERROR [E0506]\n+LL |             l = &mut **expr;\n    |             ^^^^^^^^^^^^^^^ assignment to borrowed `l` occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "107f88b413b8c2628cafcc6b50fe28e9ebee8158", "filename": "src/test/ui/issues/issue-25579.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-25579.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-25579.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25579.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/issue-25579.rs:21:1\n    |\n-LL | / fn main() { //[mir]~ ERROR compilation successful\n+LL | / fn main() {\n LL | | }\n    | |_^\n "}, {"sha": "c6ae7c9514d1ffe7ca8af121c8b598b7ff675f25", "filename": "src/test/ui/issues/issue-45199.ast.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,31 +4,31 @@ error[E0384]: cannot assign twice to immutable variable `b`\n LL |     let b: Box<isize>;\n    |         - help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(1);    //[ast]~ NOTE first assignment\n+LL |     b = Box::new(1);\n    |     - first assignment to `b`\n-LL |                         //[mir]~^ NOTE first assignment\n-LL |     b = Box::new(2);    //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |\n+LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/issue-45199.rs:21:5\n    |\n-LL |     let b = Box::new(1);    //[ast]~ NOTE first assignment\n+LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n    |         help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(2);        //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign to immutable argument `b`\n   --> $DIR/issue-45199.rs:30:5\n    |\n-LL | fn test_args(b: Box<i32>) {  //[ast]~ NOTE first assignment\n+LL | fn test_args(b: Box<i32>) {\n    |              - help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(2);            //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^ cannot assign to immutable argument\n \n error: aborting due to 3 previous errors"}, {"sha": "9dfd8e821339937fa761e611542f162f72c72117", "filename": "src/test/ui/issues/issue-45199.ast.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45199.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,28 +1,28 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/issue-45199.rs:10:5\n    |\n-LL |     b = Box::new(1);    //[ast]~ NOTE first assignment\n+LL |     b = Box::new(1);\n    |     --------------- first assignment to `b`\n-LL |                         //[mir]~^ NOTE first assignment\n-LL |     b = Box::new(2);    //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |\n+LL |     b = Box::new(2);\n    |     ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/issue-45199.rs:21:5\n    |\n-LL |     let b = Box::new(1);    //[ast]~ NOTE first assignment\n+LL |     let b = Box::new(1);\n    |         - first assignment to `b`\n ...\n-LL |     b = Box::new(2);        //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/issue-45199.rs:30:5\n    |\n-LL | fn test_args(b: Box<i32>) {  //[ast]~ NOTE first assignment\n+LL | fn test_args(b: Box<i32>) {\n    |              - first assignment to `b`\n ...\n-LL |     b = Box::new(2);            //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to 3 previous errors"}, {"sha": "c6ae7c9514d1ffe7ca8af121c8b598b7ff675f25", "filename": "src/test/ui/issues/issue-45199.mir.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45199.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45199.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45199.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,31 +4,31 @@ error[E0384]: cannot assign twice to immutable variable `b`\n LL |     let b: Box<isize>;\n    |         - help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(1);    //[ast]~ NOTE first assignment\n+LL |     b = Box::new(1);\n    |     - first assignment to `b`\n-LL |                         //[mir]~^ NOTE first assignment\n-LL |     b = Box::new(2);    //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |\n+LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/issue-45199.rs:21:5\n    |\n-LL |     let b = Box::new(1);    //[ast]~ NOTE first assignment\n+LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n    |         help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(2);        //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign to immutable argument `b`\n   --> $DIR/issue-45199.rs:30:5\n    |\n-LL | fn test_args(b: Box<i32>) {  //[ast]~ NOTE first assignment\n+LL | fn test_args(b: Box<i32>) {\n    |              - help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(2);            //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^ cannot assign to immutable argument\n \n error: aborting due to 3 previous errors"}, {"sha": "0aaba52d29f4d669a1aa92adacf88a403f03f79f", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,8 +1,8 @@\n error: compilation successful\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:1\n    |\n-LL | / fn main() { //[ast]~ ERROR compilation successful\n-LL | |      //[migrate]~^ ERROR compilation successful\n+LL | / fn main() {\n+LL | |\n LL | |     let mut x = 1;\n LL | |     {\n ...  |"}, {"sha": "f8aab239de4c9caec01dba3bd0d69080a551ecee", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ warning[E0713]: borrow may still be in use when destructor runs\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              -- lifetime `'a` defined here\n-LL |     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+LL |     &mut *s.0\n    |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n@@ -17,7 +17,7 @@ warning[E0713]: borrow may still be in use when destructor runs\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n-LL |     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+LL |     &mut *(*s).0\n    |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n@@ -31,7 +31,7 @@ warning[E0713]: borrow may still be in use when destructor runs\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here\n-LL |     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+LL |     &mut *(**s).0\n    |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n@@ -43,8 +43,8 @@ LL | }\n error: compilation successful\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:1\n    |\n-LL | / fn main() { //[ast]~ ERROR compilation successful\n-LL | |      //[migrate]~^ ERROR compilation successful\n+LL | / fn main() {\n+LL | |\n LL | |     let mut x = 1;\n LL | |     {\n ...  |"}, {"sha": "bfb58325ece385be4ad8a5568d4f69326690e8ba", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0713]: borrow may still be in use when destructor runs\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              -- lifetime `'a` defined here\n-LL |     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+LL |     &mut *s.0\n    |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n@@ -14,7 +14,7 @@ error[E0713]: borrow may still be in use when destructor runs\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n-LL |     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+LL |     &mut *(*s).0\n    |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n@@ -25,7 +25,7 @@ error[E0713]: borrow may still be in use when destructor runs\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here\n-LL |     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+LL |     &mut *(**s).0\n    |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }"}, {"sha": "f43588c3bb40d945c223f121a1a2d0ff2e3d02d0", "filename": "src/test/ui/issues/issue-46604.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/issue-46604.rs:4:25\n    |\n-LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //[ast]~ ERROR E0017\n+LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:10:5\n    |\n-LL |     buf[0]=2;                                   //[ast]~ ERROR E0389\n+LL |     buf[0]=2;\n    |     ^^^^^^^^ cannot assign\n \n error: aborting due to 2 previous errors"}, {"sha": "2ee1ac2d4d07b9919752153cc7b73d38d637f644", "filename": "src/test/ui/issues/issue-46604.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/issue-46604.rs:4:25\n    |\n-LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //[ast]~ ERROR E0017\n+LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n error[E0389]: cannot assign to data in a `&` reference\n   --> $DIR/issue-46604.rs:10:5\n    |\n-LL |     buf[0]=2;                                   //[ast]~ ERROR E0389\n+LL |     buf[0]=2;\n    |     ^^^^^^^^ assignment into an immutable reference\n \n error: aborting due to 2 previous errors"}, {"sha": "f43588c3bb40d945c223f121a1a2d0ff2e3d02d0", "filename": "src/test/ui/issues/issue-46604.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-46604.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-46604.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/issue-46604.rs:4:25\n    |\n-LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //[ast]~ ERROR E0017\n+LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:10:5\n    |\n-LL |     buf[0]=2;                                   //[ast]~ ERROR E0389\n+LL |     buf[0]=2;\n    |     ^^^^^^^^ cannot assign\n \n error: aborting due to 2 previous errors"}, {"sha": "558e7b7824937c7fc1303631e7398faf332211ba", "filename": "src/test/ui/issues/issue-5500-1.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,8 +3,8 @@ error[E0594]: cannot assign to field `_iter.node` of immutable binding\n    |\n LL |       let _iter = TrieMapIterator{node: &a};\n    |           ----- help: make this binding mutable: `mut _iter`\n-LL | /     _iter.node = & //[ast]~ ERROR cannot assign to field `_iter.node` of immutable binding\n-LL | |                    //[mir]~^ ERROR cannot assign to field `_iter.node` of immutable binding (Ast)\n+LL | /     _iter.node = &\n+LL | |\n LL | |                    // MIR doesn't generate an error because the code isn't reachable. This is OK\n LL | |                    // because the test is here to check that the compiler doesn't ICE (cf. #5500).\n LL | |     panic!()"}, {"sha": "92f803e2819d23c8baf0f9798c049e3ccc29c9fd", "filename": "src/test/ui/issues/issue-5500-1.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5500-1.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,8 +3,8 @@ error[E0594]: cannot assign to field `_iter.node` of immutable binding (Ast)\n    |\n LL |       let _iter = TrieMapIterator{node: &a};\n    |           ----- help: make this binding mutable: `mut _iter`\n-LL | /     _iter.node = & //[ast]~ ERROR cannot assign to field `_iter.node` of immutable binding\n-LL | |                    //[mir]~^ ERROR cannot assign to field `_iter.node` of immutable binding (Ast)\n+LL | /     _iter.node = &\n+LL | |\n LL | |                    // MIR doesn't generate an error because the code isn't reachable. This is OK\n LL | |                    // because the test is here to check that the compiler doesn't ICE (cf. #5500).\n LL | |     panic!()"}, {"sha": "8376ee88d9a10f193dc544597abf48e08eb49d1b", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n LL |     let v: isize;\n    |         - help: make this binding mutable: `mut v`\n ...\n-LL |         v = 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |         v = 1;\n    |         ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "db2a482be729c52b515dff16269f4503673319d7", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-in-loop.rs:9:9\n    |\n-LL |         v = 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |         v = 1;\n    |         ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "8376ee88d9a10f193dc544597abf48e08eb49d1b", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n LL |     let v: isize;\n    |         - help: make this binding mutable: `mut v`\n ...\n-LL |         v = 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |         v = 1;\n    |         ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "a6a1c73a78681f306c88703b3fee1739b3b72805", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,10 +4,10 @@ error[E0384]: cannot assign twice to immutable variable `v`\n LL |     let v: isize;\n    |         - help: make this binding mutable: `mut v`\n ...\n-LL |     v = 2;  //[ast]~ NOTE first assignment\n+LL |     v = 2;\n    |     ----- first assignment to `v`\n-LL |             //[mir]~^ NOTE first assignment\n-LL |     v += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |\n+LL |     v += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "b287edf2fda951298bcf073e3e4ce9b05603ffdc", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.ast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,10 +1,10 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-in-op-eq.rs:10:5\n    |\n-LL |     v = 2;  //[ast]~ NOTE first assignment\n+LL |     v = 2;\n    |     ----- first assignment to `v`\n-LL |             //[mir]~^ NOTE first assignment\n-LL |     v += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |\n+LL |     v += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "a6a1c73a78681f306c88703b3fee1739b3b72805", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,10 +4,10 @@ error[E0384]: cannot assign twice to immutable variable `v`\n LL |     let v: isize;\n    |         - help: make this binding mutable: `mut v`\n ...\n-LL |     v = 2;  //[ast]~ NOTE first assignment\n+LL |     v = 2;\n    |     ----- first assignment to `v`\n-LL |             //[mir]~^ NOTE first assignment\n-LL |     v += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |\n+LL |     v += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "8316ffd7f5102faca9a5a863de87206ec7d1db7f", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/liveness-assign-imm-local-with-drop.rs:10:5\n    |\n-LL |     let b = Box::new(1); //[ast]~ NOTE first assignment\n+LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n    |         help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(2); //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "108ca48f2fcb8435530094f8f87c151af1e61c1f", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,10 +1,10 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/liveness-assign-imm-local-with-drop.rs:10:5\n    |\n-LL |     let b = Box::new(1); //[ast]~ NOTE first assignment\n+LL |     let b = Box::new(1);\n    |         - first assignment to `b`\n ...\n-LL |     b = Box::new(2); //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "8316ffd7f5102faca9a5a863de87206ec7d1db7f", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/liveness-assign-imm-local-with-drop.rs:10:5\n    |\n-LL |     let b = Box::new(1); //[ast]~ NOTE first assignment\n+LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n    |         help: make this binding mutable: `mut b`\n ...\n-LL |     b = Box::new(2); //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "5fa06f93c1c4b509d568ac19717ccb6e0ec3df05", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-with-init.rs:10:5\n    |\n-LL |     let v: isize = 1; //[ast]~ NOTE first assignment\n+LL |     let v: isize = 1;\n    |         -\n    |         |\n    |         first assignment to `v`\n    |         help: make this binding mutable: `mut v`\n ...\n-LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "34fb160bba6c8862cdf866d4d1a3955eacbd11b8", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,10 +1,10 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-with-init.rs:10:5\n    |\n-LL |     let v: isize = 1; //[ast]~ NOTE first assignment\n+LL |     let v: isize = 1;\n    |         - first assignment to `v`\n ...\n-LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "5fa06f93c1c4b509d568ac19717ccb6e0ec3df05", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,13 +1,13 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-with-init.rs:10:5\n    |\n-LL |     let v: isize = 1; //[ast]~ NOTE first assignment\n+LL |     let v: isize = 1;\n    |         -\n    |         |\n    |         first assignment to `v`\n    |         help: make this binding mutable: `mut v`\n ...\n-LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "901bdcd8e4a7e75a5f635cad742daa90309a6302", "filename": "src/test/ui/meta-expected-error-correct-rev.a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/meta-expected-error-correct-rev.rs:7:18\n    |\n-LL |     let x: u32 = 22_usize; //[a]~ ERROR mismatched types\n+LL |     let x: u32 = 22_usize;\n    |                  ^^^^^^^^ expected u32, found usize\n \n error: aborting due to previous error"}, {"sha": "0db32017b395c8464aa71fc91e40dd428d9b39f3", "filename": "src/test/ui/mut/mut-pattern-internal-mutability.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,17 +6,17 @@ LL |     let &mut x = foo;\n    |              |\n    |              first assignment to `x`\n    |              help: make this binding mutable: `mut x`\n-LL |     x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     x += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error[E0506]: cannot assign to `*foo` because it is borrowed\n   --> $DIR/mut-pattern-internal-mutability.rs:17:5\n    |\n LL |     let &mut ref x = foo;\n    |              ----- borrow of `*foo` occurs here\n-LL |     *foo += 1; //[ast]~ ERROR cannot assign to `*foo` because it is borrowed\n+LL |     *foo += 1;\n    |     ^^^^^^^^^ assignment to borrowed `*foo` occurs here\n-LL |     //[mir]~^ ERROR cannot assign to `*foo` because it is borrowed\n+LL |\n LL |     drop(x);\n    |          - borrow later used here\n "}, {"sha": "da33cdf779c27dad93a4f5a2c57a85c938962ffa", "filename": "src/test/ui/mut/mut-pattern-internal-mutability.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,15 +3,15 @@ error[E0384]: cannot assign twice to immutable variable `x`\n    |\n LL |     let &mut x = foo;\n    |              - first assignment to `x`\n-LL |     x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     x += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error[E0506]: cannot assign to `*foo` because it is borrowed\n   --> $DIR/mut-pattern-internal-mutability.rs:17:5\n    |\n LL |     let &mut ref x = foo;\n    |              ----- borrow of `*foo` occurs here\n-LL |     *foo += 1; //[ast]~ ERROR cannot assign to `*foo` because it is borrowed\n+LL |     *foo += 1;\n    |     ^^^^^^^^^ assignment to borrowed `*foo` occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "0db32017b395c8464aa71fc91e40dd428d9b39f3", "filename": "src/test/ui/mut/mut-pattern-internal-mutability.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -6,17 +6,17 @@ LL |     let &mut x = foo;\n    |              |\n    |              first assignment to `x`\n    |              help: make this binding mutable: `mut x`\n-LL |     x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+LL |     x += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error[E0506]: cannot assign to `*foo` because it is borrowed\n   --> $DIR/mut-pattern-internal-mutability.rs:17:5\n    |\n LL |     let &mut ref x = foo;\n    |              ----- borrow of `*foo` occurs here\n-LL |     *foo += 1; //[ast]~ ERROR cannot assign to `*foo` because it is borrowed\n+LL |     *foo += 1;\n    |     ^^^^^^^^^ assignment to borrowed `*foo` occurs here\n-LL |     //[mir]~^ ERROR cannot assign to `*foo` because it is borrowed\n+LL |\n LL |     drop(x);\n    |          - borrow later used here\n "}, {"sha": "e243fb74dc25a4e272ffe0014df562f5045307cd", "filename": "src/test/ui/mut/mutable-class-fields.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `nyan.how_hungry`, as `nyan` is not declared as m\n    |\n LL |   let nyan : Cat = cat(52, 99);\n    |       ---- help: consider changing this to be mutable: `mut nyan`\n-LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n+LL |   nyan.how_hungry = 0;\n    |   ^^^^^^^^^^^^^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "95a928437df2f49b1ef71708b8af5d4eb4782157", "filename": "src/test/ui/mut/mutable-class-fields.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to field `nyan.how_hungry` of immutable binding\n    |\n LL |   let nyan : Cat = cat(52, 99);\n    |       ---- help: make this binding mutable: `mut nyan`\n-LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n+LL |   nyan.how_hungry = 0;\n    |   ^^^^^^^^^^^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to previous error"}, {"sha": "e243fb74dc25a4e272ffe0014df562f5045307cd", "filename": "src/test/ui/mut/mutable-class-fields.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `nyan.how_hungry`, as `nyan` is not declared as m\n    |\n LL |   let nyan : Cat = cat(52, 99);\n    |       ---- help: consider changing this to be mutable: `mut nyan`\n-LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n+LL |   nyan.how_hungry = 0;\n    |   ^^^^^^^^^^^^^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "82a30db1530c6e7faa81fe8616957251e0eecb54", "filename": "src/test/ui/nll/match-guards-always-borrow.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -10,7 +10,7 @@ LL |             (|| { let bar = foo; bar.take() })();\n error: compilation successful\n   --> $DIR/match-guards-always-borrow.rs:47:1\n    |\n-LL | / fn main() { //[ast]~ ERROR compilation successful\n+LL | / fn main() {\n LL | |     should_reject_destructive_mutate_in_guard();\n LL | |     allow_mutate_in_arm_body();\n LL | |     allow_move_into_arm_body();"}, {"sha": "0c08f20602125122dd99a959a69af936e8efc408", "filename": "src/test/ui/nll/match-guards-always-borrow.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/match-guards-always-borrow.rs:47:1\n    |\n-LL | / fn main() { //[ast]~ ERROR compilation successful\n+LL | / fn main() {\n LL | |     should_reject_destructive_mutate_in_guard();\n LL | |     allow_mutate_in_arm_body();\n LL | |     allow_move_into_arm_body();"}, {"sha": "1f6eb9a06ba37f5e372d36f604128e9bb698b64b", "filename": "src/test/ui/nll/reference-carried-through-struct-field.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let wrapper = Wrap { w: &mut x };\n    |                             ------ borrow of `x` occurs here\n-LL |     x += 1; //[ast]~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+LL |     x += 1;\n    |     ^^^^^^ use of borrowed `x`\n-LL |     //[mir]~^ ERROR cannot use `x` because it was mutably borrowed [E0503]\n+LL |\n LL |     *wrapper.w += 1;\n    |     --------------- borrow later used here\n "}, {"sha": "3104944339ca8dfa43fe4ec14aa182ad1624422a", "filename": "src/test/ui/nll/reference-carried-through-struct-field.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |\n LL |     let wrapper = Wrap { w: &mut x };\n    |                                  - borrow of `x` occurs here\n-LL |     x += 1; //[ast]~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+LL |     x += 1;\n    |     ^^^^^^ assignment to borrowed `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "1f6eb9a06ba37f5e372d36f604128e9bb698b64b", "filename": "src/test/ui/nll/reference-carried-through-struct-field.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freference-carried-through-struct-field.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,9 +3,9 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let wrapper = Wrap { w: &mut x };\n    |                             ------ borrow of `x` occurs here\n-LL |     x += 1; //[ast]~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+LL |     x += 1;\n    |     ^^^^^^ use of borrowed `x`\n-LL |     //[mir]~^ ERROR cannot use `x` because it was mutably borrowed [E0503]\n+LL |\n LL |     *wrapper.w += 1;\n    |     --------------- borrow later used here\n "}, {"sha": "468577ab168c770c4b7ebebef88a51e8c4110319", "filename": "src/test/ui/obsolete-in-place/bad.bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,15 +1,15 @@\n error: emplacement syntax is obsolete (for now, anyway)\n   --> $DIR/bad.rs:9:5\n    |\n-LL |     x <- y; //[bad]~ ERROR emplacement syntax is obsolete\n+LL |     x <- y;\n    |     ^^^^^^\n    |\n    = note: for more information, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n \n error: emplacement syntax is obsolete (for now, anyway)\n   --> $DIR/bad.rs:10:5\n    |\n-LL |     in(foo) { bar }; //[bad]~ ERROR emplacement syntax is obsolete\n+LL |     in(foo) { bar };\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>"}, {"sha": "a33d3583552dce2fc634ab77a8e567c37ed68227", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.ast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -5,7 +5,7 @@ LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     ---------\n    |                     |\n    |                     these two types are declared with different lifetimes...\n-LL |     let z: Option<&'b &'a usize> = None;//[ast]~ ERROR E0623\n+LL |     let z: Option<&'b &'a usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n@@ -16,15 +16,15 @@ LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     |\n    |                     these two types are declared with different lifetimes...\n LL |     let y: Paramd<'a> = Paramd { x: a };\n-LL |     let z: Option<&'b Paramd<'a>> = None;//[ast]~ ERROR E0623\n+LL |     let z: Option<&'b Paramd<'a>> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/regions-free-region-ordering-caller.rs:22:12\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     --------- these two types are declared with different lifetimes...\n-LL |     let z: Option<&'a &'b usize> = None;//[ast]~ ERROR E0623\n+LL |     let z: Option<&'a &'b usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `b` flows into `a` here\n \n error: aborting due to 3 previous errors"}, {"sha": "16eda2844c64c6736f77578b211c9fb7b272ab12", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -5,7 +5,7 @@ LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          --  -- lifetime `'b` defined here\n    |          |\n    |          lifetime `'a` defined here\n-LL |     let z: Option<&'b &'a usize> = None;//[ast]~ ERROR E0623\n+LL |     let z: Option<&'b &'a usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n \n error: lifetime may not live long enough\n@@ -16,7 +16,7 @@ LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          |\n    |          lifetime `'a` defined here\n LL |     let y: Paramd<'a> = Paramd { x: a };\n-LL |     let z: Option<&'b Paramd<'a>> = None;//[ast]~ ERROR E0623\n+LL |     let z: Option<&'b Paramd<'a>> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n \n error: lifetime may not live long enough\n@@ -26,7 +26,7 @@ LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          --  -- lifetime `'b` defined here\n    |          |\n    |          lifetime `'a` defined here\n-LL |     let z: Option<&'a &'b usize> = None;//[ast]~ ERROR E0623\n+LL |     let z: Option<&'a &'b usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n error: aborting due to 3 previous errors"}, {"sha": "b1c5878224d1d4b9769058ef403ad9bde0b8c3c7", "filename": "src/test/ui/regions/regions-pattern-typing-issue-19997.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,9 +4,9 @@ error[E0506]: cannot assign to `a1` because it is borrowed\n LL |     match (&a1,) {\n    |            --- borrow of `a1` occurs here\n LL |         (&ref b0,) => {\n-LL |             a1 = &f; //[ast]~ ERROR cannot assign\n+LL |             a1 = &f;\n    |             ^^^^^^^ assignment to borrowed `a1` occurs here\n-LL |             //[mir]~^ ERROR cannot assign to `a1` because it is borrowed\n+LL |\n LL |             drop(b0);\n    |                  -- borrow later used here\n "}, {"sha": "0074d2b4f775dd873a05c91b7ecf1ed38d96bc2b", "filename": "src/test/ui/regions/regions-pattern-typing-issue-19997.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `a1` because it is borrowed\n LL |     match (&a1,) {\n    |             -- borrow of `a1` occurs here\n LL |         (&ref b0,) => {\n-LL |             a1 = &f; //[ast]~ ERROR cannot assign\n+LL |             a1 = &f;\n    |             ^^^^^^^ assignment to borrowed `a1` occurs here\n \n error: aborting due to previous error"}, {"sha": "b1c5878224d1d4b9769058ef403ad9bde0b8c3c7", "filename": "src/test/ui/regions/regions-pattern-typing-issue-19997.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -4,9 +4,9 @@ error[E0506]: cannot assign to `a1` because it is borrowed\n LL |     match (&a1,) {\n    |            --- borrow of `a1` occurs here\n LL |         (&ref b0,) => {\n-LL |             a1 = &f; //[ast]~ ERROR cannot assign\n+LL |             a1 = &f;\n    |             ^^^^^^^ assignment to borrowed `a1` occurs here\n-LL |             //[mir]~^ ERROR cannot assign to `a1` because it is borrowed\n+LL |\n LL |             drop(b0);\n    |                  -- borrow later used here\n "}, {"sha": "d0dc554b6f34f5a83092c62a7306210fc0d36e06", "filename": "src/test/ui/regions/regions-static-bound.ll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n   --> $DIR/regions-static-bound.rs:9:5\n    |\n-LL |     t //[ll]~ ERROR E0312\n+LL |     t\n    |     ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n@@ -16,7 +16,7 @@ error[E0621]: explicit lifetime required in the type of `u`\n    |\n LL | fn error(u: &(), v: &()) {\n    |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n-LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n+LL |     static_id(&u);\n    |     ^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n@@ -25,7 +25,7 @@ error[E0621]: explicit lifetime required in the type of `v`\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n ...\n-LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n+LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error: aborting due to 3 previous errors"}, {"sha": "b5f3e6cfaba09ed0bac4e5f306493880e848f133", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3,15 +3,15 @@ error: lifetime may not live long enough\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n-LL |     t //[ll]~ ERROR E0312\n+LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n-LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n+LL |     static_id(&u);\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n@@ -20,7 +20,7 @@ error[E0621]: explicit lifetime required in the type of `v`\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n ...\n-LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n+LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error: aborting due to 3 previous errors"}, {"sha": "370b74b8779c0174d54240224d2c6926e69b6a11", "filename": "src/test/ui/rfc1445/feature-gate.no_gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: the semantics of constant patterns is not yet settled (see issue #31434)\n   --> $DIR/feature-gate.rs:13:1\n    |\n-LL | #[structural_match] //[no_gate]~ ERROR semantics of constant patterns is not yet settled\n+LL | #[structural_match]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(structural_match)] to the crate attributes to enable"}, {"sha": "ca8dc75c5335f7ce03a1e894bcedced97cfc6973", "filename": "src/test/ui/rfc1445/feature-gate.with_gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/feature-gate.rs:21:1\n    |\n-LL | / fn main() { //[with_gate]~ ERROR compilation successful\n+LL | / fn main() {\n LL | |     let y = Foo { x: 1 };\n LL | |     match y {\n LL | |         FOO => { }"}, {"sha": "3440edeadf9c1c1ec74d68960d6903c9d5411ca6", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutated-upvar-from-fn-closure.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.ast.nll.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -10,8 +10,8 @@ help: consider changing this to accept closures that implement `FnMut`\n LL |       call(|| {\n    |  __________^\n LL | |         counter += 1;\n-LL | |         //[ast]~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure\n-LL | |         //[mir]~^^ ERROR cannot assign to `counter`\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n "}, {"sha": "07883500b822eee09e45234fb18f0a9b47fc71cc", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutated-upvar-from-fn-closure.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.ast.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -10,8 +10,8 @@ help: consider changing this closure to take self by mutable reference\n LL |       call(|| {\n    |  __________^\n LL | |         counter += 1;\n-LL | |         //[ast]~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure\n-LL | |         //[mir]~^^ ERROR cannot assign to `counter`\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n "}, {"sha": "3440edeadf9c1c1ec74d68960d6903c9d5411ca6", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutated-upvar-from-fn-closure.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.mir.stderr?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -10,8 +10,8 @@ help: consider changing this to accept closures that implement `FnMut`\n LL |       call(|| {\n    |  __________^\n LL | |         counter += 1;\n-LL | |         //[ast]~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure\n-LL | |         //[mir]~^^ ERROR cannot assign to `counter`\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n "}, {"sha": "97bacb6719f7a5edf98ca8a238ef2d09d15e36c4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817d074e5459e5c7e44010520f0491b91213b7f2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=817d074e5459e5c7e44010520f0491b91213b7f2", "patch": "@@ -3110,7 +3110,7 @@ impl<'test> TestCx<'test> {\n \n         // Remove test annotations like `//~ ERROR text` from the output,\n         // since they duplicate actual errors and make the output hard to read.\n-        normalized = Regex::new(\"\\\\s*//~.*\").unwrap()\n+        normalized = Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap()\n             .replace_all(&normalized, \"\").into_owned();\n \n         for rule in custom_rules {"}]}