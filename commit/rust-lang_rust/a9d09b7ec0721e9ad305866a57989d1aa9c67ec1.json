{"sha": "a9d09b7ec0721e9ad305866a57989d1aa9c67ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDA5YjdlYzA3MjFlOWFkMzA1ODY2YTU3OTg5ZDFhYTljNjdlYzE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-09T12:21:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-09T12:21:28Z"}, "message": "Merge #953\n\n953: Don't default publishDecorations and showWorkspaceLoaded to true on the server r=matklad a=flodiebold\n\nIf the client doesn't specify these explicitly, that very likely means it\r\ndoesn't know about them and so we shouldn't send them. In particular, the recent\r\nchange to this default caused decorations to be sent to emacs, resulting in a\r\nlot of warning spam.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "a742956649df98bf14ba75c70ef80f3a814742af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a742956649df98bf14ba75c70ef80f3a814742af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1", "html_url": "https://github.com/rust-lang/rust/commit/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "bfea379d88f3a46fffb4a9197eae1df889ef306f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfea379d88f3a46fffb4a9197eae1df889ef306f", "html_url": "https://github.com/rust-lang/rust/commit/bfea379d88f3a46fffb4a9197eae1df889ef306f"}, {"sha": "c30c5fb4dd7d358126b505ae060a2d2fe3fec0d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c30c5fb4dd7d358126b505ae060a2d2fe3fec0d2", "html_url": "https://github.com/rust-lang/rust/commit/c30c5fb4dd7d358126b505ae060a2d2fe3fec0d2"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "1b77e0312579743671f64be8d4b4d862ebb7d6dc", "filename": "crates/ra_lsp_server/src/init.rs", "status": "modified", "additions": 61, "deletions": 39, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1/crates%2Fra_lsp_server%2Fsrc%2Finit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1/crates%2Fra_lsp_server%2Fsrc%2Finit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Finit.rs?ref=a9d09b7ec0721e9ad305866a57989d1aa9c67ec1", "patch": "@@ -1,39 +1,61 @@\n-use serde::{Deserialize, Deserializer};\r\n-\r\n-/// Client provided initialization options\r\n-#[derive(Deserialize, Clone, Copy, Debug)]\r\n-#[serde(rename_all = \"camelCase\")]\r\n-pub struct InitializationOptions {\r\n-    /// Whether the client supports our custom highlighting publishing decorations.\r\n-    /// This is different to the highlightingOn setting, which is whether the user\r\n-    /// wants our custom highlighting to be used.\r\n-    ///\r\n-    /// Defaults to `true`\r\n-    #[serde(default = \"bool_true\", deserialize_with = \"nullable_bool_true\")]\r\n-    pub publish_decorations: bool,\r\n-\r\n-    /// Whether or not the workspace loaded notification should be sent\r\n-    ///\r\n-    /// Defaults to `true`\r\n-    #[serde(default = \"bool_true\", deserialize_with = \"nullable_bool_true\")]\r\n-    pub show_workspace_loaded: bool,\r\n-}\r\n-\r\n-impl Default for InitializationOptions {\r\n-    fn default() -> InitializationOptions {\r\n-        InitializationOptions { publish_decorations: true, show_workspace_loaded: true }\r\n-    }\r\n-}\r\n-\r\n-fn bool_true() -> bool {\r\n-    true\r\n-}\r\n-\r\n-/// Deserializes a null value to a bool true by default\r\n-fn nullable_bool_true<'de, D>(deserializer: D) -> Result<bool, D::Error>\r\n-where\r\n-    D: Deserializer<'de>,\r\n-{\r\n-    let opt = Option::deserialize(deserializer)?;\r\n-    Ok(opt.unwrap_or(true))\r\n-}\r\n+use serde::{Deserialize, Deserializer};\n+\n+/// Client provided initialization options\n+#[derive(Deserialize, Clone, Copy, Debug, PartialEq, Eq)]\n+#[serde(rename_all = \"camelCase\", default)]\n+pub struct InitializationOptions {\n+    /// Whether the client supports our custom highlighting publishing decorations.\n+    /// This is different to the highlightingOn setting, which is whether the user\n+    /// wants our custom highlighting to be used.\n+    ///\n+    /// Defaults to `false`\n+    #[serde(deserialize_with = \"nullable_bool_false\")]\n+    pub publish_decorations: bool,\n+\n+    /// Whether or not the workspace loaded notification should be sent\n+    ///\n+    /// Defaults to `true`\n+    #[serde(deserialize_with = \"nullable_bool_true\")]\n+    pub show_workspace_loaded: bool,\n+}\n+\n+impl Default for InitializationOptions {\n+    fn default() -> InitializationOptions {\n+        InitializationOptions { publish_decorations: false, show_workspace_loaded: true }\n+    }\n+}\n+\n+/// Deserializes a null value to a bool false by default\n+fn nullable_bool_false<'de, D>(deserializer: D) -> Result<bool, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let opt = Option::deserialize(deserializer)?;\n+    Ok(opt.unwrap_or(false))\n+}\n+\n+/// Deserializes a null value to a bool true by default\n+fn nullable_bool_true<'de, D>(deserializer: D) -> Result<bool, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let opt = Option::deserialize(deserializer)?;\n+    Ok(opt.unwrap_or(true))\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn deserialize_init_options_defaults() {\n+        // check that null == default for both fields\n+        let default = InitializationOptions::default();\n+        assert_eq!(default, serde_json::from_str(r#\"{}\"#).unwrap());\n+        assert_eq!(\n+            default,\n+            serde_json::from_str(r#\"{\"publishDecorations\":null, \"showWorkspaceLoaded\":null}\"#)\n+                .unwrap()\n+        );\n+    }\n+}"}]}