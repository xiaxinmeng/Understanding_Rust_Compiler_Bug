{"sha": "d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZGZlZDhjYTJlZGZjYzJhODQ1ZWNhMzVmMTJjMDg1ZmIzZmIyMGY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-03T13:59:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-03T13:59:15Z"}, "message": "Rollup merge of #62161 - GuillaumeGomez:add-missing-tryfrom-links, r=docs\n\nAdd missing links for TryFrom docs\n\nr? @rust-lang/docs", "tree": {"sha": "c0bd2532bc98f24e4db8b4ace3f8fd7644c1db9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0bd2532bc98f24e4db8b4ace3f8fd7644c1db9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHLSzCRBK7hj4Ov3rIwAAdHIIAJV7hOTcL7bzayQbUMvw/AHd\n/QLnDGf24UqM6k++RiPC8EsZ2D3UWsDnQMZAg6CmypzmftYG3IGUdnBrvEj6JK12\n4SwrQm9W6PMhyMF2BlQFoCmKFkMX7G68HKM6qDqUJAL/F8TzxWtkdEYt+ePuK6zv\ncwji0pAFfdzac5th28hphgsbjP5aJQyDfp8ftOlyEeUsGZf7zMjsP6RqHrmmcJQ2\naD/ZrWihoHkTymG4KG9LkFo5eSsXSYSp4IErv02FEqyR1yBzwMKm7ywrCuISjVO8\n8myFdpp+B11Ny0FU65tWJaP5Kf8YcjiBzBKBLHn/xpxK+1ira5/eLgbuHejKmIE=\n=Sa59\n-----END PGP SIGNATURE-----\n", "payload": "tree c0bd2532bc98f24e4db8b4ace3f8fd7644c1db9a\nparent 25640092c7ca5f0e980d24f2024fab8dd4ae718e\nparent dfb9f5be30c7fefbe4458fb873c2bdc0604f9a17\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1562162355 -0400\ncommitter GitHub <noreply@github.com> 1562162355 -0400\n\nRollup merge of #62161 - GuillaumeGomez:add-missing-tryfrom-links, r=docs\n\nAdd missing links for TryFrom docs\n\nr? @rust-lang/docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f", "html_url": "https://github.com/rust-lang/rust/commit/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25640092c7ca5f0e980d24f2024fab8dd4ae718e", "url": "https://api.github.com/repos/rust-lang/rust/commits/25640092c7ca5f0e980d24f2024fab8dd4ae718e", "html_url": "https://github.com/rust-lang/rust/commit/25640092c7ca5f0e980d24f2024fab8dd4ae718e"}, {"sha": "dfb9f5be30c7fefbe4458fb873c2bdc0604f9a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb9f5be30c7fefbe4458fb873c2bdc0604f9a17", "html_url": "https://github.com/rust-lang/rust/commit/dfb9f5be30c7fefbe4458fb873c2bdc0604f9a17"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "34d19748e5609764631aa7957f6ff50e01693cf7", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f", "patch": "@@ -410,12 +410,12 @@ pub trait TryInto<T>: Sized {\n ///\n /// This is useful when you are doing a type conversion that may\n /// trivially succeed but may also need special handling.\n-/// For example, there is no way to convert an `i64` into an `i32`\n-/// using the [`From`] trait, because an `i64` may contain a value\n-/// that an `i32` cannot represent and so the conversion would lose data.\n-/// This might be handled by truncating the `i64` to an `i32` (essentially\n-/// giving the `i64`'s value modulo `i32::MAX`) or by simply returning\n-/// `i32::MAX`, or by some other method.  The `From` trait is intended\n+/// For example, there is no way to convert an [`i64`] into an [`i32`]\n+/// using the [`From`] trait, because an [`i64`] may contain a value\n+/// that an [`i32`] cannot represent and so the conversion would lose data.\n+/// This might be handled by truncating the [`i64`] to an [`i32`] (essentially\n+/// giving the [`i64`]'s value modulo [`i32::MAX`]) or by simply returning\n+/// [`i32::MAX`], or by some other method.  The [`From`] trait is intended\n /// for perfect conversions, so the `TryFrom` trait informs the\n /// programmer when a type conversion could go bad and lets them\n /// decide how to handle it.\n@@ -425,8 +425,8 @@ pub trait TryInto<T>: Sized {\n /// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n-/// calling `T::try_from()` on a value of type `T` is `Infallible`.\n-/// When the `!` type is stablized `Infallible` and `!` will be\n+/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n+/// When the [`!`] type is stablized [`Infallible`] and [`!`] will be\n /// equivalent.\n ///\n /// `TryFrom<T>` can be implemented as follows:\n@@ -451,7 +451,7 @@ pub trait TryInto<T>: Sized {\n ///\n /// # Examples\n ///\n-/// As described, [`i32`] implements `TryFrom<i64>`:\n+/// As described, [`i32`] implements `TryFrom<`[`i64`]`>`:\n ///\n /// ```\n /// use std::convert::TryFrom;\n@@ -474,6 +474,8 @@ pub trait TryInto<T>: Sized {\n ///\n /// [`try_from`]: trait.TryFrom.html#tymethod.try_from\n /// [`TryInto`]: trait.TryInto.html\n+/// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n+/// [`!`]: ../../std/primitive.never.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error."}]}