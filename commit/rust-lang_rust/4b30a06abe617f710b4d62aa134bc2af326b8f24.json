{"sha": "4b30a06abe617f710b4d62aa134bc2af326b8f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzBhMDZhYmU2MTdmNzEwYjRkNjJhYTEzNGJjMmFmMzI2YjhmMjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-19T03:22:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:48Z"}, "message": "Rename ast::proto_fn to ast::proto_shared", "tree": {"sha": "49bcb1a3433ae60c242dc33773a744785bec004f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49bcb1a3433ae60c242dc33773a744785bec004f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b30a06abe617f710b4d62aa134bc2af326b8f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b30a06abe617f710b4d62aa134bc2af326b8f24", "html_url": "https://github.com/rust-lang/rust/commit/4b30a06abe617f710b4d62aa134bc2af326b8f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b30a06abe617f710b4d62aa134bc2af326b8f24/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ad3bdb103bec8d45df6f015802668722af6a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ad3bdb103bec8d45df6f015802668722af6a00", "html_url": "https://github.com/rust-lang/rust/commit/29ad3bdb103bec8d45df6f015802668722af6a00"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "db1718ad645ef224ff53e64f5e75c00ce2fc92bd", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -192,7 +192,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n          il: ast::il_normal,\n          cf: ast::return_val,\n          constraints: []};\n-    let proto = ast::proto_fn;\n+    let proto = ast::proto_shared;\n \n     // The vector of test_descs for this crate\n     let test_descs = mk_test_desc_vec(cx);\n@@ -214,7 +214,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n }\n \n fn empty_fn_ty() -> ast::ty {\n-    let proto = ast::proto_fn;\n+    let proto = ast::proto_shared;\n     let input_ty = [];\n     let ret_ty = @nospan(ast::ty_nil);\n     let cf = ast::return_val;"}, {"sha": "255ab320aa0196cc9487629c6d7ddd9f9f8d3fef", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -242,7 +242,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n       }\n       'F' {\n         let func = parse_ty_fn(st, sd);\n-        ret ty::mk_fn(st.tcx, ast::proto_fn, func.args, func.ty, func.cf,\n+        ret ty::mk_fn(st.tcx, ast::proto_shared, func.args, func.ty, func.cf,\n                       func.cs);\n       }\n       'f' {"}, {"sha": "6f03f3f7e3578c844925ecab6cb881a80cb28b10", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -195,7 +195,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n fn enc_proto(w: io::writer, proto: proto) {\n     alt proto {\n       proto_iter. { w.write_char('W'); }\n-      proto_fn. { w.write_char('F'); }\n+      proto_shared. { w.write_char('F'); }\n       proto_block. { w.write_char('B'); }\n       proto_bare. { w.write_char('f'); }\n     }"}, {"sha": "e287cc4ec77bc5badae0898a9c25c7d7666ca785", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -594,7 +594,8 @@ fn lookup_in_scope_strict(e: env, sc: scopes, sp: span, name: ident,\n \n fn scope_is_fn(sc: scope) -> bool {\n     ret alt sc {\n-          scope_fn(_, ast::proto_iter., _) | scope_fn(_, ast::proto_fn., _) |\n+          scope_fn(_, ast::proto_iter., _) |\n+          scope_fn(_, ast::proto_shared., _) |\n           scope_fn(_, ast::proto_bare., _) |\n           scope_native_item(_) {\n             true"}, {"sha": "471fd4b20943ae7a19ab29a493d1df0806650719", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -5349,7 +5349,7 @@ fn trans_res_ctor(cx: @local_ctxt, sp: span, dtor: ast::_fn,\n     }\n     let fcx = new_fn_ctxt(cx, sp, llctor_decl);\n     let ret_t = ty::ret_ty_of_fn(cx.ccx.tcx, ctor_id);\n-    create_llargs_for_fn_args(fcx, ast::proto_fn, none::<ty::t>, ret_t,\n+    create_llargs_for_fn_args(fcx, ast::proto_shared, none::<ty::t>, ret_t,\n                               dtor.decl.inputs, ty_params);\n     let bcx = new_top_block_ctxt(fcx);\n     let lltop = bcx.llbb;\n@@ -5409,7 +5409,7 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n       }\n     }\n     let fcx = new_fn_ctxt(cx, variant.span, llfndecl);\n-    create_llargs_for_fn_args(fcx, ast::proto_fn, none::<ty::t>,\n+    create_llargs_for_fn_args(fcx, ast::proto_shared, none::<ty::t>,\n                               ty::ret_ty_of_fn(cx.ccx.tcx, variant.node.id),\n                               fn_args, ty_params);\n     let ty_param_substs: [ty::t] = [];\n@@ -5616,7 +5616,7 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let nt = ty::mk_nil(ccx.tcx);\n         check non_ty_var(ccx, nt);\n \n-        let llfty = type_of_fn(ccx, sp, ast::proto_fn, false, false,\n+        let llfty = type_of_fn(ccx, sp, ast::proto_shared, false, false,\n                                [vecarg_ty], nt, 0u);\n         let llfdecl = decl_fn(ccx.llmod, \"_rust_main\",\n                               lib::llvm::LLVMCCallConv, llfty);\n@@ -5729,7 +5729,7 @@ fn native_fn_wrapper_type(cx: @crate_ctxt, sp: span, ty_param_count: uint,\n     alt ty::struct(cx.tcx, x) {\n       ty::ty_native_fn(abi, args, out) {\n         check non_ty_var(cx, out);\n-        ret type_of_fn(cx, sp, ast::proto_fn, false, false, args, out,\n+        ret type_of_fn(cx, sp, ast::proto_shared, false, false, args, out,\n                        ty_param_count);\n       }\n     }"}, {"sha": "d7357c9a2f45a1459a4470f07d69d2408673d7ce", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -340,7 +340,7 @@ fn get_res_dtor(ccx: @crate_ctxt, sp: span, did: ast::def_id, inner_t: ty::t)\n     let nil_res = ty::mk_nil(ccx.tcx);\n     // FIXME: Silly check -- mk_nil should have a postcondition\n     check non_ty_var(ccx, nil_res);\n-    let f_t = type_of_fn(ccx, sp, ast::proto_fn, false, false,\n+    let f_t = type_of_fn(ccx, sp, ast::proto_shared, false, false,\n                          [{mode: ast::by_ref, ty: inner_t}],\n                          nil_res, params);\n     ret trans::get_extern_const(ccx.externs, ccx.llmod,"}, {"sha": "5a1209d0f0825371aa167b5e9c887e69ba6594c7", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -52,7 +52,7 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n     let lltop = bcx.llbb;\n \n     // Both regular arguments and type parameters are handled here.\n-    create_llargs_for_fn_args(fcx, ast::proto_fn, none::<ty::t>,\n+    create_llargs_for_fn_args(fcx, ast::proto_shared, none::<ty::t>,\n                               ty::ret_ty_of_fn(ccx.tcx, ctor_id), fn_args,\n                               ty_params);\n     let arg_tys: [ty::arg] = arg_tys_of_fn(ccx, ctor_id);"}, {"sha": "950e91c275b37dedb8ee34634debf2f7a8cb58cf", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -1013,7 +1013,7 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n           ast::proto_iter. { ast::kind_shared }\n           ast::proto_block. { ast::kind_pinned }\n           ast::proto_closure. { ast::kind_shared }\n-          ast::proto_fn. { ast::kind_shared }\n+          ast::proto_shared. { ast::kind_shared }\n           ast::proto_bare. { ast::kind_unique }\n         };\n       }\n@@ -1616,7 +1616,7 @@ fn ty_fn_args(cx: ctxt, fty: t) -> [arg] {\n fn ty_fn_proto(cx: ctxt, fty: t) -> ast::proto {\n     alt struct(cx, fty) {\n       ty::ty_fn(p, _, _, _, _) { ret p; }\n-      ty::ty_native_fn(_, _, _) { ret ast::proto_fn; }\n+      ty::ty_native_fn(_, _, _) { ret ast::proto_shared; }\n       _ { cx.sess.bug(\"ty_fn_proto() called on non-fn type\"); }\n     }\n }\n@@ -2031,7 +2031,7 @@ mod unify {\n                 // Every function type is a subtype of block\n                 false\n               }\n-              ast::proto_closure. | ast::proto_fn. {\n+              ast::proto_closure. | ast::proto_shared. {\n                 a_proto == ast::proto_block\n               }\n               ast::proto_bare. {"}, {"sha": "66663ea251e570ebe2d61ab3983118cc61b4e3ab", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -479,7 +479,7 @@ mod write {\n fn proto_to_ty_proto(proto: ast::proto) -> ast::proto {\n     ret alt proto {\n           ast::proto_iter. | ast::proto_block. | ast::proto_bare. { proto }\n-          _ { ast::proto_fn }\n+          _ { ast::proto_shared }\n         };\n }\n \n@@ -612,7 +612,7 @@ mod collect {\n         }\n \n         let t_fn =\n-            ty::mk_fn(cx.tcx, ast::proto_fn, t_inputs, t_obj.ty,\n+            ty::mk_fn(cx.tcx, ast::proto_shared, t_inputs, t_obj.ty,\n                       ast::return_val, []);\n         let tpt = {kinds: ty_param_kinds(ty_params), ty: t_fn};\n         cx.tcx.tcache.insert(local_def(ctor_id), tpt);\n@@ -723,7 +723,7 @@ mod collect {\n                 let tag_t = ty::mk_tag(cx.tcx, tag_id, ty_param_tys);\n                 // FIXME: this will be different for constrained types\n                 result_ty =\n-                    ty::mk_fn(cx.tcx, ast::proto_fn, args, tag_t,\n+                    ty::mk_fn(cx.tcx, ast::proto_shared, args, tag_t,\n                               ast::return_val, []);\n             }\n             let tpt = {kinds: ty_param_kinds(ty_params), ty: result_ty};\n@@ -793,10 +793,11 @@ mod collect {\n                 ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n                            mk_ty_params(cx, tps));\n             let t_ctor =\n-                ty::mk_fn(cx.tcx, ast::proto_fn, [t_arg], t_res,\n+                ty::mk_fn(cx.tcx, ast::proto_shared, [t_arg], t_res,\n                           ast::return_val, []);\n             let t_dtor =\n-                ty::mk_fn(cx.tcx, ast::proto_fn, [t_arg], ty::mk_nil(cx.tcx),\n+                ty::mk_fn(cx.tcx, ast::proto_shared, [t_arg],\n+                          ty::mk_nil(cx.tcx),\n                           ast::return_val, []);\n             write::ty_only(cx.tcx, it.id, t_res);\n             write::ty_only(cx.tcx, ctor_id, t_ctor);\n@@ -2091,7 +2092,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             constrs = constrs_;\n           }\n           ty::ty_native_fn(_, arg_tys_, rt_) {\n-            proto = ast::proto_fn;\n+            proto = ast::proto_shared;\n             arg_tys = arg_tys_;\n             rt = rt_;\n             cf = ast::return_val;\n@@ -2116,7 +2117,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         fn lower_bound_proto(proto: ast::proto) -> ast::proto {\n             // FIXME: This is right for bare fns, possibly not others\n             alt proto {\n-              ast::proto_bare. { ast::proto_fn }\n+              ast::proto_bare. { ast::proto_shared }\n               _ { proto }\n             }\n         }\n@@ -2567,7 +2568,7 @@ fn check_const(ccx: @crate_ctxt, _sp: span, e: @ast::expr, id: ast::node_id) {\n     let fcx: @fn_ctxt =\n         @{ret_ty: rty,\n           purity: ast::pure_fn,\n-          proto: ast::proto_fn,\n+          proto: ast::proto_shared,\n           var_bindings: ty::unify::mk_var_bindings(),\n           locals: new_int_hash::<int>(),\n           local_names: new_int_hash::<ast::ident>(),"}, {"sha": "8ec411cff5e04eb2f877617fde0daf26ffc61647", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -105,11 +105,10 @@ tag _auth { auth_unsafe; }\n \n tag proto {\n     proto_iter;\n-    proto_fn;\n+    proto_shared;\n     proto_block;\n+    // FIXME: Merge with proto_shared\n     proto_closure;\n-    // Functions without an environment. Eventually, this will\n-    // merge with proto_fn.\n     proto_bare;\n }\n "}, {"sha": "0f2c93756b7da77cad0bdfefa2228a6d3ea76847", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -1901,7 +1901,7 @@ fn parse_item_res(p: parser, attrs: [ast::attribute]) -> @ast::item {\n          il: ast::il_normal,\n          cf: ast::return_val,\n          constraints: []};\n-    let f = {decl: decl, proto: ast::proto_fn, body: dtor};\n+    let f = {decl: decl, proto: ast::proto_shared, body: dtor};\n     ret mk_item(p, lo, dtor.span.hi, ident,\n                 ast::item_res(f, p.get_id(), ty_params, p.get_id()), attrs);\n }\n@@ -2140,7 +2140,7 @@ fn parse_fn_item_proto(p: parser) -> ast::proto {\n         ast::proto_bare\n     } else if p.peek() == token::AT {\n         p.bump();\n-        ast::proto_fn\n+        ast::proto_shared\n     } else {\n         ast::proto_bare\n     }\n@@ -2152,7 +2152,7 @@ fn parse_fn_ty_proto(p: parser) -> ast::proto {\n         ast::proto_bare\n     } else if p.peek() == token::AT {\n         p.bump();\n-        ast::proto_fn\n+        ast::proto_shared\n     } else {\n         ast::proto_bare\n     }\n@@ -2164,7 +2164,7 @@ fn parse_fn_anon_proto(p: parser) -> ast::proto {\n         ast::proto_bare\n     } else if p.peek() == token::AT {\n         p.bump();\n-        ast::proto_fn\n+        ast::proto_shared\n     } else {\n         ast::proto_bare\n     }"}, {"sha": "4c4b66c59fe905e1c9b33f0cb61ced7f5f46ff8e", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -1643,7 +1643,7 @@ fn ast_fn_constrs_str(decl: ast::fn_decl, constrs: [@ast::constr]) -> str {\n \n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n-          ast::proto_fn. { \"fn@\" }\n+          ast::proto_shared. { \"fn@\" }\n           ast::proto_iter. { \"iter\" }\n           ast::proto_block. { \"block\" }\n           ast::proto_closure. { \"lambda\" }"}, {"sha": "6640bc37f2dedf59c01288944d7deedb66d4d47d", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b30a06abe617f710b4d62aa134bc2af326b8f24/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=4b30a06abe617f710b4d62aa134bc2af326b8f24", "patch": "@@ -129,7 +129,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n             fn_to_str(cx, proto, none, inputs, output, cf, constrs)\n           }\n           ty_native_fn(_, inputs, output) {\n-            fn_to_str(cx, ast::proto_fn, none, inputs, output,\n+            fn_to_str(cx, ast::proto_shared, none, inputs, output,\n                       ast::return_val, [])\n           }\n           ty_obj(meths) {"}]}