{"sha": "3798b6f780d2490037cf79cb2f8518795de376ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OThiNmY3ODBkMjQ5MDAzN2NmNzljYjJmODUxODc5NWRlMzc2YmE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T07:52:13Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T08:14:52Z"}, "message": "Remove maybe_protect_block kludge from pretty-printer\n\nIt is no longer needed.", "tree": {"sha": "919f257b802b5c78615a5723e1df9f2c5ac7c52b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919f257b802b5c78615a5723e1df9f2c5ac7c52b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3798b6f780d2490037cf79cb2f8518795de376ba", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3798b6f780d2490037cf79cb2f8518795de376ba", "html_url": "https://github.com/rust-lang/rust/commit/3798b6f780d2490037cf79cb2f8518795de376ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3798b6f780d2490037cf79cb2f8518795de376ba/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b34e0e60bb605ac00a3c2a00a687c92675092c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b34e0e60bb605ac00a3c2a00a687c92675092c7", "html_url": "https://github.com/rust-lang/rust/commit/0b34e0e60bb605ac00a3c2a00a687c92675092c7"}], "stats": {"total": 122, "additions": 1, "deletions": 121}, "files": [{"sha": "6d571d61d1406f5ee543ad5542430f91db149643", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3798b6f780d2490037cf79cb2f8518795de376ba/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3798b6f780d2490037cf79cb2f8518795de376ba/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=3798b6f780d2490037cf79cb2f8518795de376ba", "patch": "@@ -576,15 +576,11 @@ fn print_possibly_embedded_block(s: ps, blk: ast::blk, embedded: embed_type,\n       block_normal. { bopen(s); }\n     }\n \n-    let last_stmt = option::none;\n     for st: @ast::stmt in blk.node.stmts {\n-        maybe_protect_block(s, last_stmt, stmt_(st));\n         print_stmt(s, *st);\n-        last_stmt = option::some(st);\n     }\n     alt blk.node.expr {\n       some(expr) {\n-        maybe_protect_block(s, last_stmt, expr_(expr));\n         space_if_not_bol(s);\n         print_expr(s, expr);\n         maybe_print_trailing_comment(s, expr.span, some(blk.span.hi));\n@@ -593,88 +589,6 @@ fn print_possibly_embedded_block(s: ps, blk: ast::blk, embedded: embed_type,\n     }\n     bclose_(s, blk.span, indented);\n     s.ann.post(ann_node);\n-\n-    tag expr_or_stmt { stmt_(@ast::stmt); expr_(@ast::expr); }\n-\n-    // The Rust syntax has an ambiguity when an if, alt, or block statement is\n-    // followed by a unary op, square bracket, or paren. In those cases we\n-    // have to add an extra semi to make sure the output retains the same\n-    // meaning.\n-    fn maybe_protect_block(s: ps, last: option::t<@ast::stmt>,\n-                           next: expr_or_stmt) {\n-        let last_expr_is_block =\n-            alt last {\n-              option::some(@{node: ast::stmt_expr(e, _), _}) {\n-                alt e.node {\n-                  ast::expr_if(_, _, _) | ast::expr_alt(_, _) |\n-                  ast::expr_block(_) {\n-                    true\n-                  }\n-                  _ { false }\n-                }\n-              }\n-              _ { false }\n-            };\n-\n-        if !last_expr_is_block { ret; }\n-\n-        let next_expr_is_ambig =\n-            alt next {\n-              expr_(e) { expr_is_ambig(e) }\n-              stmt_(@{node: ast::stmt_expr(e, _), _}) { expr_is_ambig(e) }\n-              _ { false }\n-            };\n-\n-        if last_expr_is_block && next_expr_is_ambig { word(s.s, \";\"); }\n-\n-        fn expr_is_ambig(ex: @ast::expr) -> bool {\n-            // We're going to walk the expression to the 'left' looking for\n-            // various properties that might indicate ambiguity\n-\n-            type env = @mutable bool;\n-            let visitor =\n-                visit::mk_vt(@{visit_expr: visit_expr\n-                                  with *visit::default_visitor()});\n-            let env = @mutable false;\n-            visit_expr(ex, env, visitor);\n-            ret *env;\n-\n-            fn visit_expr(ex: @ast::expr, e: env, v: visit::vt<env>) {\n-                assert (*e == false);\n-\n-                if expr_is_ambig(ex) { *e = true; ret; }\n-\n-                alt ex.node {\n-                  ast::expr_assign(x, _) { v.visit_expr(x, e, v); }\n-                  ast::expr_assign_op(_, x, _) { visit_expr(x, e, v); }\n-                  ast::expr_move(x, _) { v.visit_expr(x, e, v); }\n-                  ast::expr_field(x, _) { v.visit_expr(x, e, v); }\n-                  ast::expr_index(x, _) { v.visit_expr(x, e, v); }\n-                  ast::expr_binary(op, x, _) {\n-                    if need_parens(x, operator_prec(op)) { *e = true; ret; }\n-                    v.visit_expr(x, e, v);\n-                  }\n-                  ast::expr_cast(x, _) {\n-                    if need_parens(x, parse::parser::as_prec) {\n-                        *e = true;\n-                        ret;\n-                    }\n-                  }\n-                  ast::expr_ternary(x, _, _) { v.visit_expr(x, e, v); }\n-                  _ { }\n-                }\n-            }\n-\n-            fn expr_is_ambig(ex: @ast::expr) -> bool {\n-                alt ex.node {\n-                  ast::expr_unary(_, _) { true }\n-                  ast::expr_tup(_) { true }\n-                  ast::expr_vec(_, _) { true }\n-                  _ { false }\n-                }\n-            }\n-        }\n-    }\n }\n \n // ret and fail, without arguments cannot appear is the discriminant of if,"}, {"sha": "f5af4b5df57198c65067dccc8530d54bf1d19351", "filename": "src/test/pretty/block-disambig.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b34e0e60bb605ac00a3c2a00a687c92675092c7/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b34e0e60bb605ac00a3c2a00a687c92675092c7/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=0b34e0e60bb605ac00a3c2a00a687c92675092c7", "patch": "@@ -1,35 +0,0 @@\n-// Tests that the pretty printer correctly disambiguates various scenarios\n-// involving block statements by ending them with a semi-colon\n-fn test1() { let val = @0; { }; *val; }\n-\n-fn test2() -> int { let val = @0; { }; *val }\n-\n-fn test3() {\n-    let regs = @{mutable eax: 0};\n-    alt true { true { } };\n-    (*regs).eax = 1;\n-}\n-\n-fn test4() -> bool { let regs = @true; if true { }; *regs || false }\n-\n-fn test5() -> (int, int) { { }; (0, 1) }\n-\n-fn test6() -> bool { { }; (true || false) && true }\n-\n-fn test7() -> uint {\n-    let regs = @0;\n-    alt true { true { } };\n-    (*regs < 2) as uint\n-}\n-\n-fn test8() -> int { let val = @0; alt true { true { } }; *val < 1 ? 0 : 1 }\n-\n-fn test9() { let regs = @mutable 0; alt true { true { } }; *regs += 1; }\n-\n-fn test10() -> int {\n-    let regs = @mutable [0];\n-    alt true { true { } };\n-    (*regs)[0]\n-}\n-\n-fn test11() -> [int] { if true { }; [1, 2] }"}, {"sha": "571ddfe26b761e89101a3ca549b31b0839dabd3c", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3798b6f780d2490037cf79cb2f8518795de376ba/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3798b6f780d2490037cf79cb2f8518795de376ba/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=3798b6f780d2490037cf79cb2f8518795de376ba", "patch": "@@ -2,6 +2,7 @@\n // reproduce so we don't want to automatically reformat it\n \n // no-reformat\n+// xfail-pretty\n \n /*\n  *"}]}