{"sha": "84acd56e978de792db278b624458b96d52fa7b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YWNkNTZlOTc4ZGU3OTJkYjI3OGI2MjQ0NThiOTZkNTJmYTdiNzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-26T14:03:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-26T14:03:47Z"}, "message": "Merge #5887\n\n5887: Improve fenced code block support for doctests r=fmease a=fmease\n\nFixes  #5783\n\nCo-authored-by: Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net>", "tree": {"sha": "c9cdf8408b743aa0a2c53faf37d62bef6efa0f60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9cdf8408b743aa0a2c53faf37d62bef6efa0f60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84acd56e978de792db278b624458b96d52fa7b73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRmvDCRBK7hj4Ov3rIwAAdHIIAGx/ax2NlaOSdMKDbsAqs6sA\nogkL98aVeyrWzEHJOHmpG4DmjVSTPPiXFRc6vukWgXacCdOfUkWHwWaZLonyT3Hr\nHrzaKNXMCBaL3kxkqkvkAJS0omELfeS1Jn5Xdbhe5bVyEQfTH+V4do2tA1IZOpMW\nvkcu6Afi6+CyNdTXganpMxUiYHF/kZQzH9GAjv61gPKsHpTXMkuP13PJ1h5D49eV\nXY3vxSHhCWtgxlp8OtkHkm1U8tpbaT1tr/4H2OjTdP5tzWnc6o7TcMrOIFonQcGL\n4wi6ExUqSIVYtBR5Y7wcrEx/YC28uWf9oGE4TwcMg+buQQLAbRLDZ8//spxffXk=\n=cwJ8\n-----END PGP SIGNATURE-----\n", "payload": "tree c9cdf8408b743aa0a2c53faf37d62bef6efa0f60\nparent a0324a59e97bab5939f7145b65115c62a4c44913\nparent 63caef372ad96a4cfc6aeafa52218c426daf7f2a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598450627 +0000\ncommitter GitHub <noreply@github.com> 1598450627 +0000\n\nMerge #5887\n\n5887: Improve fenced code block support for doctests r=fmease a=fmease\n\nFixes  #5783\n\nCo-authored-by: Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84acd56e978de792db278b624458b96d52fa7b73", "html_url": "https://github.com/rust-lang/rust/commit/84acd56e978de792db278b624458b96d52fa7b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84acd56e978de792db278b624458b96d52fa7b73/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0324a59e97bab5939f7145b65115c62a4c44913", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0324a59e97bab5939f7145b65115c62a4c44913", "html_url": "https://github.com/rust-lang/rust/commit/a0324a59e97bab5939f7145b65115c62a4c44913"}, {"sha": "63caef372ad96a4cfc6aeafa52218c426daf7f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63caef372ad96a4cfc6aeafa52218c426daf7f2a", "html_url": "https://github.com/rust-lang/rust/commit/63caef372ad96a4cfc6aeafa52218c426daf7f2a"}], "stats": {"total": 189, "additions": 170, "deletions": 19}, "files": [{"sha": "989a63c09c4d042d95b5db6f6a81b3df47617edf", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 99, "deletions": 9, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/84acd56e978de792db278b624458b96d52fa7b73/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84acd56e978de792db278b624458b96d52fa7b73/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=84acd56e978de792db278b624458b96d52fa7b73", "patch": "@@ -211,12 +211,29 @@ fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n         .any(|attribute_text| attribute_text.contains(\"test\"))\n }\n \n+const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUNNABLE: &[&str] =\n+    &[\"\", \"rust\", \"should_panic\", \"edition2015\", \"edition2018\"];\n+\n fn has_runnable_doc_test(fn_def: &ast::Fn) -> bool {\n     fn_def.doc_comment_text().map_or(false, |comments_text| {\n-        comments_text.contains(\"```\")\n-            && !comments_text.contains(\"```ignore\")\n-            && !comments_text.contains(\"```no_run\")\n-            && !comments_text.contains(\"```compile_fail\")\n+        let mut in_code_block = false;\n+\n+        for line in comments_text.lines() {\n+            if let Some(header) = line.strip_prefix(RUSTDOC_FENCE) {\n+                in_code_block = !in_code_block;\n+\n+                if in_code_block\n+                    && header\n+                        .split(',')\n+                        .all(|sub| RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUNNABLE.contains(&sub.trim()))\n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        false\n     })\n }\n \n@@ -421,7 +438,21 @@ fn main() {}\n /// ```\n /// let x = 5;\n /// ```\n-fn foo() {}\n+fn should_have_runnable() {}\n+\n+/// ```edition2018\n+/// let x = 5;\n+/// ```\n+fn should_have_runnable_1() {}\n+\n+/// ```\n+/// let z = 55;\n+/// ```\n+///\n+/// ```ignore\n+/// let z = 56;\n+/// ```\n+fn should_have_runnable_2() {}\n \n /// ```no_run\n /// let z = 55;\n@@ -437,8 +468,27 @@ fn should_have_no_runnable_2() {}\n /// let z = 55;\n /// ```\n fn should_have_no_runnable_3() {}\n+\n+/// ```text\n+/// arbitrary plain text\n+/// ```\n+fn should_have_no_runnable_4() {}\n+\n+/// ```text\n+/// arbitrary plain text\n+/// ```\n+///\n+/// ```sh\n+/// $ shell code\n+/// ```\n+fn should_have_no_runnable_5() {}\n+\n+/// ```rust,no_run\n+/// let z = 55;\n+/// ```\n+fn should_have_no_runnable_6() {}\n \"#,\n-            &[&BIN, &DOCTEST],\n+            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -464,17 +514,57 @@ fn should_have_no_runnable_3() {}\n                             file_id: FileId(\n                                 1,\n                             ),\n-                            full_range: 15..57,\n+                            full_range: 15..74,\n                             focus_range: None,\n-                            name: \"foo\",\n+                            name: \"should_have_runnable\",\n+                            kind: FN,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"should_have_runnable\",\n+                            ),\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 76..148,\n+                            focus_range: None,\n+                            name: \"should_have_runnable_1\",\n+                            kind: FN,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"should_have_runnable_1\",\n+                            ),\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 150..254,\n+                            focus_range: None,\n+                            name: \"should_have_runnable_2\",\n                             kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n                         },\n                         kind: DocTest {\n                             test_id: Path(\n-                                \"foo\",\n+                                \"should_have_runnable_2\",\n                             ),\n                         },\n                         cfg_exprs: [],"}, {"sha": "968ea55f0cc8ddd9385402c7e88bc58e25705723", "filename": "crates/rust-analyzer/src/markdown.rs", "status": "modified", "additions": 71, "deletions": 10, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/84acd56e978de792db278b624458b96d52fa7b73/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84acd56e978de792db278b624458b96d52fa7b73/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs?ref=84acd56e978de792db278b624458b96d52fa7b73", "patch": "@@ -1,22 +1,32 @@\n //! Transforms markdown\n \n+const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUST_SPECIFIC: &[&str] =\n+    &[\"\", \"rust\", \"should_panic\", \"ignore\", \"no_run\", \"compile_fail\", \"edition2015\", \"edition2018\"];\n+\n pub(crate) fn format_docs(src: &str) -> String {\n     let mut processed_lines = Vec::new();\n     let mut in_code_block = false;\n-    for line in src.lines() {\n-        if in_code_block && code_line_ignored_by_rustdoc(line) {\n+    let mut is_rust = false;\n+\n+    for mut line in src.lines() {\n+        if in_code_block && is_rust && code_line_ignored_by_rustdoc(line) {\n             continue;\n         }\n \n-        if line.starts_with(\"```\") {\n-            in_code_block ^= true\n-        }\n+        if let Some(header) = line.strip_prefix(RUSTDOC_FENCE) {\n+            in_code_block ^= true;\n \n-        let line = if in_code_block && line.starts_with(\"```\") && !line.contains(\"rust\") {\n-            \"```rust\"\n-        } else {\n-            line\n-        };\n+            if in_code_block {\n+                is_rust = header\n+                    .split(',')\n+                    .all(|sub| RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUST_SPECIFIC.contains(&sub.trim()));\n+\n+                if is_rust {\n+                    line = \"```rust\";\n+                }\n+            }\n+        }\n \n         processed_lines.push(line);\n     }\n@@ -38,13 +48,47 @@ mod tests {\n         assert_eq!(format_docs(comment), \"```rust\\nfn some_rust() {}\\n```\");\n     }\n \n+    #[test]\n+    fn test_format_docs_handles_plain_text() {\n+        let comment = \"```text\\nthis is plain text\\n```\";\n+        assert_eq!(format_docs(comment), \"```text\\nthis is plain text\\n```\");\n+    }\n+\n+    #[test]\n+    fn test_format_docs_handles_non_rust() {\n+        let comment = \"```sh\\nsupposedly shell code\\n```\";\n+        assert_eq!(format_docs(comment), \"```sh\\nsupposedly shell code\\n```\");\n+    }\n+\n+    #[test]\n+    fn test_format_docs_handles_rust_alias() {\n+        let comment = \"```ignore\\nlet z = 55;\\n```\";\n+        assert_eq!(format_docs(comment), \"```rust\\nlet z = 55;\\n```\");\n+    }\n+\n+    #[test]\n+    fn test_format_docs_handles_complex_code_block_attrs() {\n+        let comment = \"```rust,no_run\\nlet z = 55;\\n```\";\n+        assert_eq!(format_docs(comment), \"```rust\\nlet z = 55;\\n```\");\n+    }\n+\n     #[test]\n     fn test_format_docs_skips_comments_in_rust_block() {\n         let comment =\n             \"```rust\\n # skip1\\n# skip2\\n#stay1\\nstay2\\n#\\n #\\n   #    \\n #\\tskip3\\n\\t#\\t\\n```\";\n         assert_eq!(format_docs(comment), \"```rust\\n#stay1\\nstay2\\n```\");\n     }\n \n+    #[test]\n+    fn test_format_docs_does_not_skip_lines_if_plain_text() {\n+        let comment =\n+            \"```text\\n # stay1\\n# stay2\\n#stay3\\nstay4\\n#\\n #\\n   #    \\n #\\tstay5\\n\\t#\\t\\n```\";\n+        assert_eq!(\n+            format_docs(comment),\n+            \"```text\\n # stay1\\n# stay2\\n#stay3\\nstay4\\n#\\n #\\n   #    \\n #\\tstay5\\n\\t#\\t\\n```\",\n+        );\n+    }\n+\n     #[test]\n     fn test_format_docs_keeps_comments_outside_of_rust_block() {\n         let comment = \" # stay1\\n# stay2\\n#stay3\\nstay4\\n#\\n #\\n   #    \\n #\\tstay5\\n\\t#\\t\";\n@@ -72,4 +116,21 @@ let a = 1;\n             \"```rust\\nfn main(){}\\n```\\nSome comment.\\n```rust\\nlet a = 1;\\n```\"\n         );\n     }\n+\n+    #[test]\n+    fn test_code_blocks_in_comments_marked_as_text() {\n+        let comment = r#\"```text\n+filler\n+text\n+```\n+Some comment.\n+```\n+let a = 1;\n+```\"#;\n+\n+        assert_eq!(\n+            format_docs(comment),\n+            \"```text\\nfiller\\ntext\\n```\\nSome comment.\\n```rust\\nlet a = 1;\\n```\"\n+        );\n+    }\n }"}]}