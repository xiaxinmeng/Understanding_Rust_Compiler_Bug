{"sha": "c223a1c10909d7b93fb900fe35fe4bcdc8220246", "node_id": "C_kwDOAAsO6NoAKGMyMjNhMWMxMDkwOWQ3YjkzZmI5MDBmZTM1ZmU0YmNkYzgyMjAyNDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-04T09:42:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-04T09:42:19Z"}, "message": "Rollup merge of #87054 - kit-981:master, r=scottmcm\n\nAdd a `try_reduce` method to the Iterator trait\n\nTracking issue: #87053", "tree": {"sha": "638348790429807328c40a5b3ec9a4fe891feb24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/638348790429807328c40a5b3ec9a4fe891feb24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c223a1c10909d7b93fb900fe35fe4bcdc8220246", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqzf7CRBK7hj4Ov3rIwAAfzwIAKo/tEKleWophlwf2vDOec07\nM0SaaWnKC35DW+NRj5hJNur1paWTuAaAsXnnfBbZK3Z4zXnnttahFnC7a0JKuhIe\nD/BD0LY9It8Qc2uD3t1Kcw7Sq1EcPKYahAzTo7kgD1YarIQ+Ls/yCxKURt+LFZcy\nA/QKCql9w3rpRhfeEITFC3VOataQDLUikPyJuYBOHG/o8aBS0PNGZgmBSgfaFf0X\nlji6P5Yo1vSqk4aPb/ApeExX6yOSDrqfD6kbHhV76IA2lWTWGp9XYtgYUxG7cZ4l\nYOEm9bm/B03nDFjJvAqNHmdYby0Hc+p4urPKLGvK/zn1yUh2gpn3Ufa0BbVzwgM=\n=1qXR\n-----END PGP SIGNATURE-----\n", "payload": "tree 638348790429807328c40a5b3ec9a4fe891feb24\nparent 887999d163bace7e79370b952bdd1f930ff4cdd5\nparent aef59e4fb87fe8c79d3c5d6e7164c02c84fe2b8b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638610939 +0100\ncommitter GitHub <noreply@github.com> 1638610939 +0100\n\nRollup merge of #87054 - kit-981:master, r=scottmcm\n\nAdd a `try_reduce` method to the Iterator trait\n\nTracking issue: #87053\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c223a1c10909d7b93fb900fe35fe4bcdc8220246", "html_url": "https://github.com/rust-lang/rust/commit/c223a1c10909d7b93fb900fe35fe4bcdc8220246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c223a1c10909d7b93fb900fe35fe4bcdc8220246/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887999d163bace7e79370b952bdd1f930ff4cdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/887999d163bace7e79370b952bdd1f930ff4cdd5", "html_url": "https://github.com/rust-lang/rust/commit/887999d163bace7e79370b952bdd1f930ff4cdd5"}, {"sha": "aef59e4fb87fe8c79d3c5d6e7164c02c84fe2b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef59e4fb87fe8c79d3c5d6e7164c02c84fe2b8b", "html_url": "https://github.com/rust-lang/rust/commit/aef59e4fb87fe8c79d3c5d6e7164c02c84fe2b8b"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "267fa4067983693c6c043e19533a477190484ae2", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c223a1c10909d7b93fb900fe35fe4bcdc8220246/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c223a1c10909d7b93fb900fe35fe4bcdc8220246/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c223a1c10909d7b93fb900fe35fe4bcdc8220246", "patch": "@@ -2216,6 +2216,86 @@ pub trait Iterator {\n         Some(self.fold(first, f))\n     }\n \n+    /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the\n+    /// closure returns a failure, the failure is propagated back to the caller immediately.\n+    ///\n+    /// The return type of this method depends on the return type of the closure. If the closure\n+    /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,\n+    /// E>`. If the closure returns `Option<Self::Item>`, then this function will return\n+    /// `Option<Option<Self::Item>>`.\n+    ///\n+    /// When called on an empty iterator, this function will return either `Some(None)` or\n+    /// `Ok(None)` depending on the type of the provided closure.\n+    ///\n+    /// For iterators with at least one element, this is essentially the same as calling\n+    /// [`try_fold()`] with the first element of the iterator as the initial accumulator value.\n+    ///\n+    /// [`try_fold()`]: Iterator::try_fold\n+    ///\n+    /// # Examples\n+    ///\n+    /// Safely calculate the sum of a series of numbers:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_try_reduce)]\n+    ///\n+    /// let numbers: Vec<usize> = vec![10, 20, 5, 23, 0];\n+    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n+    /// assert_eq!(sum, Some(Some(58)));\n+    /// ```\n+    ///\n+    /// Determine when a reduction short circuited:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_try_reduce)]\n+    ///\n+    /// let numbers = vec![1, 2, 3, usize::MAX, 4, 5];\n+    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n+    /// assert_eq!(sum, None);\n+    /// ```\n+    ///\n+    /// Determine when a reduction was not performed because there are no elements:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_try_reduce)]\n+    ///\n+    /// let numbers: Vec<usize> = Vec::new();\n+    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n+    /// assert_eq!(sum, Some(None));\n+    /// ```\n+    ///\n+    /// Use a [`Result`] instead of an [`Option`]:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_try_reduce)]\n+    ///\n+    /// let numbers = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\n+    /// let max: Result<Option<_>, <usize as std::str::FromStr>::Err> =\n+    ///     numbers.into_iter().try_reduce(|x, y| {\n+    ///         if x.parse::<usize>()? > y.parse::<usize>()? { Ok(x) } else { Ok(y) }\n+    ///     });\n+    /// assert_eq!(max, Ok(Some(\"5\")));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_try_reduce\", reason = \"new API\", issue = \"87053\")]\n+    fn try_reduce<F, R>(&mut self, f: F) -> ChangeOutputType<R, Option<R::Output>>\n+    where\n+        Self: Sized,\n+        F: FnMut(Self::Item, Self::Item) -> R,\n+        R: Try<Output = Self::Item>,\n+        R::Residual: Residual<Option<Self::Item>>,\n+    {\n+        let first = match self.next() {\n+            Some(i) => i,\n+            None => return Try::from_output(None),\n+        };\n+\n+        match self.try_fold(first, f).branch() {\n+            ControlFlow::Break(r) => FromResidual::from_residual(r),\n+            ControlFlow::Continue(i) => Try::from_output(Some(i)),\n+        }\n+    }\n+\n     /// Tests if every element of the iterator matches a predicate.\n     ///\n     /// `all()` takes a closure that returns `true` or `false`. It applies"}, {"sha": "d38bca1e3b3ea9265ad1c410c3d6704e5d08bcf9", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c223a1c10909d7b93fb900fe35fe4bcdc8220246/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c223a1c10909d7b93fb900fe35fe4bcdc8220246/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=c223a1c10909d7b93fb900fe35fe4bcdc8220246", "patch": "@@ -454,6 +454,34 @@ fn test_find_map() {\n     }\n }\n \n+#[test]\n+fn test_try_reduce() {\n+    let v: Vec<usize> = vec![1, 2, 3, 4, 5];\n+    let sum = v.into_iter().try_reduce(|x, y| x.checked_add(y));\n+    assert_eq!(sum, Some(Some(15)));\n+\n+    let v: Vec<usize> = vec![1, 2, 3, 4, 5, usize::MAX];\n+    let sum = v.into_iter().try_reduce(|x, y| x.checked_add(y));\n+    assert_eq!(sum, None);\n+\n+    let v: Vec<usize> = Vec::new();\n+    let sum = v.into_iter().try_reduce(|x, y| x.checked_add(y));\n+    assert_eq!(sum, Some(None));\n+\n+    let v = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\n+    let max = v.into_iter().try_reduce(|x, y| {\n+        if x.parse::<usize>().ok()? > y.parse::<usize>().ok()? { Some(x) } else { Some(y) }\n+    });\n+    assert_eq!(max, Some(Some(\"5\")));\n+\n+    let v = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\n+    let max: Result<Option<_>, <usize as std::str::FromStr>::Err> =\n+        v.into_iter().try_reduce(|x, y| {\n+            if x.parse::<usize>()? > y.parse::<usize>()? { Ok(x) } else { Ok(y) }\n+        });\n+    assert_eq!(max, Ok(Some(\"5\")));\n+}\n+\n #[test]\n fn test_iterator_len() {\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"}, {"sha": "9ab98ba88865a07c7913f2260b879eeb2a136011", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c223a1c10909d7b93fb900fe35fe4bcdc8220246/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c223a1c10909d7b93fb900fe35fe4bcdc8220246/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c223a1c10909d7b93fb900fe35fe4bcdc8220246", "patch": "@@ -56,6 +56,7 @@\n #![feature(iter_intersperse)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n+#![feature(iterator_try_reduce)]\n #![feature(const_mut_refs)]\n #![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]"}]}