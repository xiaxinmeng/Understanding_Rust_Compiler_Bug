{"sha": "8cfa7caac9bba5b83995040ebf313559e4e2186c", "node_id": "C_kwDOAAsO6NoAKDhjZmE3Y2FhYzliYmE1YjgzOTk1MDQwZWJmMzEzNTU5ZTRlMjE4NmM", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-04-29T03:24:58Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:51:42Z"}, "message": "hold Mmap in EncodedMetadata", "tree": {"sha": "f1a271457dab6b7f2a6412aece0d66d7a3f0b631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a271457dab6b7f2a6412aece0d66d7a3f0b631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cfa7caac9bba5b83995040ebf313559e4e2186c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cfa7caac9bba5b83995040ebf313559e4e2186c", "html_url": "https://github.com/rust-lang/rust/commit/8cfa7caac9bba5b83995040ebf313559e4e2186c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cfa7caac9bba5b83995040ebf313559e4e2186c/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "html_url": "https://github.com/rust-lang/rust/commit/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "fa97cda0aa3613113ccc7c7816227cb3c5497613", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cfa7caac9bba5b83995040ebf313559e4e2186c/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfa7caac9bba5b83995040ebf313559e4e2186c/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=8cfa7caac9bba5b83995040ebf313559e4e2186c", "patch": "@@ -94,8 +94,10 @@ pub fn encode_and_write_metadata(\n     } else {\n         metadata_filename\n     };\n-    let raw_data = std::fs::read(metadata_filename).unwrap();\n-    let metadata = EncodedMetadata::from_raw_data(raw_data);\n+    let file = std::fs::File::open(metadata_filename).unwrap();\n+    let metadata = EncodedMetadata::from_file(file).unwrap_or_else(|e| {\n+        tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n+    });\n \n     let need_metadata_module = metadata_kind == MetadataKind::Compressed;\n "}, {"sha": "6e2044d4bb007be42bfe70a7ddc332498d982a8e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8cfa7caac9bba5b83995040ebf313559e4e2186c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfa7caac9bba5b83995040ebf313559e4e2186c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8cfa7caac9bba5b83995040ebf313559e4e2186c", "patch": "@@ -4,6 +4,7 @@ use crate::rmeta::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n+use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n@@ -27,7 +28,7 @@ use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n-use rustc_serialize::{opaque, Encodable, Encoder};\n+use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::CrateType;\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::hygiene::{ExpnIndex, HygieneEncodeContext, MacroKind};\n@@ -2135,25 +2136,43 @@ fn prefetch_mir(tcx: TyCtxt<'_>) {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-#[derive(Encodable, Decodable)]\n pub struct EncodedMetadata {\n-    raw_data: Vec<u8>,\n+    mmap: Option<Mmap>,\n+    decoded: Vec<u8>,\n }\n \n impl EncodedMetadata {\n     #[inline]\n-    pub fn new() -> EncodedMetadata {\n-        EncodedMetadata { raw_data: Vec::new() }\n+    pub fn from_file(file: std::fs::File) -> std::io::Result<Self> {\n+        let file_metadata = file.metadata()?;\n+        if file_metadata.len() == 0 {\n+            return Ok(Self { mmap: None, decoded: Vec::new() });\n+        }\n+        let mmap = unsafe { Some(Mmap::map(file)?) };\n+        Ok(Self { mmap, decoded: Vec::new() })\n     }\n \n     #[inline]\n-    pub fn from_raw_data(raw_data: Vec<u8>) -> Self {\n-        Self { raw_data }\n+    pub fn raw_data(&self) -> &[u8] {\n+        if !self.decoded.is_empty() {\n+            return &self.decoded;\n+        }\n+        self.mmap.as_ref().map(|mmap| mmap.as_ref()).unwrap_or_default()\n     }\n+}\n \n-    #[inline]\n-    pub fn raw_data(&self) -> &[u8] {\n-        &self.raw_data\n+impl<S: Encoder> Encodable<S> for EncodedMetadata {\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+        let slice = self.raw_data();\n+        slice.encode(s)\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for EncodedMetadata {\n+    fn decode(d: &mut D) -> Self {\n+        // FIXME: Write decorded data to a file and map to Mmap.\n+        let decoded = Decodable::decode(d);\n+        EncodedMetadata { mmap: None, decoded }\n     }\n }\n "}]}