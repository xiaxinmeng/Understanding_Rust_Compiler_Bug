{"sha": "ed0f097e4dcf8f557df038a7011d121f653bd24f", "node_id": "C_kwDOAAsO6NoAKGVkMGYwOTdlNGRjZjhmNTU3ZGYwMzhhNzAxMWQxMjFmNjUzYmQyNGY", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-11-26T15:06:46Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-11-26T15:08:40Z"}, "message": "jsondoclint: Handle using enum variants and glob using enums.\n\nCloses #104942", "tree": {"sha": "d3aa19782574a36bf8a8cba2037332ab49e9e13e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3aa19782574a36bf8a8cba2037332ab49e9e13e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed0f097e4dcf8f557df038a7011d121f653bd24f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0f097e4dcf8f557df038a7011d121f653bd24f", "html_url": "https://github.com/rust-lang/rust/commit/ed0f097e4dcf8f557df038a7011d121f653bd24f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed0f097e4dcf8f557df038a7011d121f653bd24f/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8681d4cffcd23bbe619984ab62772a91827a40dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8681d4cffcd23bbe619984ab62772a91827a40dc", "html_url": "https://github.com/rust-lang/rust/commit/8681d4cffcd23bbe619984ab62772a91827a40dc"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "62b8b832afdaaf92077eb989973d5604e9326b31", "filename": "src/test/rustdoc-json/enums/use_glob.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_glob.rs?ref=ed0f097e4dcf8f557df038a7011d121f653bd24f", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/104942>\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @set Color = \"$.index[*][?(@.name == 'Color')].id\"\n+pub enum Color {\n+    Red,\n+    Green,\n+    Blue,\n+}\n+\n+// @set use_Color = \"$.index[*][?(@.kind == 'import')].id\"\n+// @is \"$.index[*][?(@.kind == 'import')].inner.id\" $Color\n+// @is \"$.index[*][?(@.kind == 'import')].inner.glob\" true\n+pub use Color::*;\n+\n+// @ismany \"$.index[*][?(@.name == 'use_glob')].inner.items[*]\" $Color $use_Color"}, {"sha": "5f0d2b9b1ec84935f55c9aff29e86fb5e80ae0a1", "filename": "src/test/rustdoc-json/enums/use_variant.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_variant.rs?ref=ed0f097e4dcf8f557df038a7011d121f653bd24f", "patch": "@@ -0,0 +1,15 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @set AlwaysNone = \"$.index[*][?(@.name == 'AlwaysNone')].id\"\n+pub enum AlwaysNone {\n+    // @set None = \"$.index[*][?(@.name == 'None')].id\"\n+    None,\n+}\n+// @is \"$.index[*][?(@.name == 'AlwaysNone')].inner.variants[*]\" $None\n+\n+// @set use_None = \"$.index[*][?(@.kind == 'import')].id\"\n+// @is \"$.index[*][?(@.kind == 'import')].inner.id\" $None\n+pub use AlwaysNone::None;\n+\n+// @ismany \"$.index[*][?(@.name == 'use_variant')].inner.items[*]\" $AlwaysNone $use_None"}, {"sha": "7aaad0c055914093c93c153eaf7b17567f65dec3", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=ed0f097e4dcf8f557df038a7011d121f653bd24f", "patch": "@@ -1,7 +1,7 @@\n use rustdoc_json_types::{Item, ItemEnum, ItemKind, ItemSummary};\n \n /// A univeral way to represent an [`ItemEnum`] or [`ItemKind`]\n-#[derive(Debug)]\n+#[derive(Debug, Clone, Copy)]\n pub(crate) enum Kind {\n     Module,\n     ExternCrate,\n@@ -68,6 +68,22 @@ impl Kind {\n         }\n     }\n \n+    pub fn can_appear_in_import(self) -> bool {\n+        match self {\n+            Kind::Variant => true,\n+            Kind::Import => false,\n+            other => other.can_appear_in_mod(),\n+        }\n+    }\n+\n+    pub fn can_appear_in_glob_import(self) -> bool {\n+        match self {\n+            Kind::Module => true,\n+            Kind::Enum => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn can_appear_in_trait(self) -> bool {\n         match self {\n             Kind::AssocConst => true,"}, {"sha": "84968bf4a680f5d96a44dfc27398793012a642de", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0f097e4dcf8f557df038a7011d121f653bd24f/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=ed0f097e4dcf8f557df038a7011d121f653bd24f", "patch": "@@ -103,9 +103,9 @@ impl<'a> Validator<'a> {\n \n     fn check_import(&mut self, x: &'a Import) {\n         if x.glob {\n-            self.add_mod_id(x.id.as_ref().unwrap());\n+            self.add_glob_import_item_id(x.id.as_ref().unwrap());\n         } else if let Some(id) = &x.id {\n-            self.add_mod_item_id(id);\n+            self.add_import_item_id(id);\n         }\n     }\n \n@@ -404,6 +404,15 @@ impl<'a> Validator<'a> {\n         self.add_id_checked(id, Kind::can_appear_in_trait, \"Trait inner item\");\n     }\n \n+    /// Add an Id that can be `use`d\n+    fn add_import_item_id(&mut self, id: &'a Id) {\n+        self.add_id_checked(id, Kind::can_appear_in_import, \"Import inner item\");\n+    }\n+\n+    fn add_glob_import_item_id(&mut self, id: &'a Id) {\n+        self.add_id_checked(id, Kind::can_appear_in_glob_import, \"Glob import inner item\");\n+    }\n+\n     /// Add an Id that appeared in a mod\n     fn add_mod_item_id(&mut self, id: &'a Id) {\n         self.add_id_checked(id, Kind::can_appear_in_mod, \"Module inner item\")"}]}