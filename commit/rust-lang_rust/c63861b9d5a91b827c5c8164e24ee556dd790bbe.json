{"sha": "c63861b9d5a91b827c5c8164e24ee556dd790bbe", "node_id": "C_kwDOAAsO6NoAKGM2Mzg2MWI5ZDVhOTFiODI3YzVjODE2NGUyNGVlNTU2ZGQ3OTBiYmU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-14T13:56:16Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-21T08:57:22Z"}, "message": "evaluate: improve and fix recursion depth handling", "tree": {"sha": "83c9dcd19ef3737fe34160f28f405b1fb45903fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c9dcd19ef3737fe34160f28f405b1fb45903fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c63861b9d5a91b827c5c8164e24ee556dd790bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c63861b9d5a91b827c5c8164e24ee556dd790bbe", "html_url": "https://github.com/rust-lang/rust/commit/c63861b9d5a91b827c5c8164e24ee556dd790bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c63861b9d5a91b827c5c8164e24ee556dd790bbe/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791ce0b7b5d03649bc9014d5b0abb78f3c6f2cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/791ce0b7b5d03649bc9014d5b0abb78f3c6f2cfd", "html_url": "https://github.com/rust-lang/rust/commit/791ce0b7b5d03649bc9014d5b0abb78f3c6f2cfd"}], "stats": {"total": 155, "additions": 60, "deletions": 95}, "files": [{"sha": "dd9b2e548c7315d67ebbc7ce58b2d55fcea83d2d", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -8,6 +8,8 @@ mod project;\n mod structural_impls;\n pub mod util;\n \n+use std::cmp;\n+\n use hir::def_id::LocalDefId;\n use rustc_hir as hir;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n@@ -139,6 +141,14 @@ impl<'tcx, O> Obligation<'tcx, O> {\n         Self::with_depth(tcx, cause, 0, param_env, predicate)\n     }\n \n+    /// We often create nested obligations without setting the correct depth.\n+    ///\n+    /// To deal with this evaluate and fulfill explicitly update the depth\n+    /// of nested obligations using this function.\n+    pub fn set_depth_from_parent(&mut self, parent_depth: usize) {\n+        self.recursion_depth = cmp::max(parent_depth + 1, self.recursion_depth);\n+    }\n+\n     pub fn with_depth(\n         tcx: TyCtxt<'tcx>,\n         cause: ObligationCause<'tcx>,"}, {"sha": "b8758ad93231d905a77e344c6080f8587773567b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 19, "deletions": 52, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -595,7 +595,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.evaluate_predicates_recursively_in_new_solver(predicates)\n         } else {\n             let mut result = EvaluatedToOk;\n-            for obligation in predicates {\n+            for mut obligation in predicates {\n+                obligation.set_depth_from_parent(stack.depth());\n                 let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n                 if let EvaluatedToErr = eval {\n                     // fast-path - EvaluatedToErr is the top of the lattice,\n@@ -661,12 +662,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let p = bound_predicate.rebind(p);\n                     // Does this code ever run?\n                     match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {\n-                        Ok(Ok(InferOk { mut obligations, .. })) => {\n-                            self.add_depth(obligations.iter_mut(), obligation.recursion_depth);\n-                            self.evaluate_predicates_recursively(\n-                                previous_stack,\n-                                obligations.into_iter(),\n-                            )\n+                        Ok(Ok(InferOk { obligations, .. })) => {\n+                            self.evaluate_predicates_recursively(previous_stack, obligations)\n                         }\n                         Ok(Err(_)) => Ok(EvaluatedToErr),\n                         Err(..) => Ok(EvaluatedToAmbig),\n@@ -677,12 +674,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let p = bound_predicate.rebind(p);\n                     // Does this code ever run?\n                     match self.infcx.coerce_predicate(&obligation.cause, obligation.param_env, p) {\n-                        Ok(Ok(InferOk { mut obligations, .. })) => {\n-                            self.add_depth(obligations.iter_mut(), obligation.recursion_depth);\n-                            self.evaluate_predicates_recursively(\n-                                previous_stack,\n-                                obligations.into_iter(),\n-                            )\n+                        Ok(Ok(InferOk { obligations, .. })) => {\n+                            self.evaluate_predicates_recursively(previous_stack, obligations)\n                         }\n                         Ok(Err(_)) => Ok(EvaluatedToErr),\n                         Err(..) => Ok(EvaluatedToAmbig),\n@@ -755,9 +748,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         arg,\n                         obligation.cause.span,\n                     ) {\n-                        Some(mut obligations) => {\n-                            self.add_depth(obligations.iter_mut(), obligation.recursion_depth);\n-\n+                        Some(obligations) => {\n                             cache.wf_args.borrow_mut().push((arg, previous_stack.depth()));\n                             let result =\n                                 self.evaluate_predicates_recursively(previous_stack, obligations);\n@@ -826,10 +817,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                     }\n                                 }\n \n-                                self.add_depth(\n-                                    subobligations.iter_mut(),\n-                                    obligation.recursion_depth,\n-                                );\n+                                // Need to explicitly set the depth of nested goals here as\n+                                // projection obligations can cycle by themselves and in\n+                                // `evaluate_predicates_recursively` we only add the depth\n+                                // for parent trait goals because only these get added to the\n+                                // `TraitObligationStackList`.\n+                                for subobligation in subobligations.iter_mut() {\n+                                    subobligation.set_depth_from_parent(obligation.recursion_depth);\n+                                }\n                                 let res = self.evaluate_predicates_recursively(\n                                     previous_stack,\n                                     subobligations,\n@@ -909,38 +904,28 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 if a.def.did == b.def.did\n                                     && tcx.def_kind(a.def.did) == DefKind::AssocConst =>\n                             {\n-                                if let Ok(new_obligations) = self\n+                                if let Ok(InferOk { obligations, value: () }) = self\n                                     .infcx\n                                     .at(&obligation.cause, obligation.param_env)\n                                     .trace(c1, c2)\n                                     .eq(DefineOpaqueTypes::No, a.substs, b.substs)\n                                 {\n-                                    let mut obligations = new_obligations.obligations;\n-                                    self.add_depth(\n-                                        obligations.iter_mut(),\n-                                        obligation.recursion_depth,\n-                                    );\n                                     return self.evaluate_predicates_recursively(\n                                         previous_stack,\n-                                        obligations.into_iter(),\n+                                        obligations,\n                                     );\n                                 }\n                             }\n                             (_, Unevaluated(_)) | (Unevaluated(_), _) => (),\n                             (_, _) => {\n-                                if let Ok(new_obligations) = self\n+                                if let Ok(InferOk { obligations, value: () }) = self\n                                     .infcx\n                                     .at(&obligation.cause, obligation.param_env)\n                                     .eq(DefineOpaqueTypes::No, c1, c2)\n                                 {\n-                                    let mut obligations = new_obligations.obligations;\n-                                    self.add_depth(\n-                                        obligations.iter_mut(),\n-                                        obligation.recursion_depth,\n-                                    );\n                                     return self.evaluate_predicates_recursively(\n                                         previous_stack,\n-                                        obligations.into_iter(),\n+                                        obligations,\n                                     );\n                                 }\n                             }\n@@ -1366,24 +1351,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.evaluation_cache.insert((param_env, trait_pred), dep_node, result);\n     }\n \n-    /// For various reasons, it's possible for a subobligation\n-    /// to have a *lower* recursion_depth than the obligation used to create it.\n-    /// Projection sub-obligations may be returned from the projection cache,\n-    /// which results in obligations with an 'old' `recursion_depth`.\n-    /// Additionally, methods like `InferCtxt.subtype_predicate` produce\n-    /// subobligations without taking in a 'parent' depth, causing the\n-    /// generated subobligations to have a `recursion_depth` of `0`.\n-    ///\n-    /// To ensure that obligation_depth never decreases, we force all subobligations\n-    /// to have at least the depth of the original obligation.\n-    fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(\n-        &self,\n-        it: I,\n-        min_depth: usize,\n-    ) {\n-        it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);\n-    }\n-\n     fn check_recursion_depth<T>(\n         &self,\n         depth: usize,"}, {"sha": "db788fe6e6af1d2facf2521ef1061d97e3ab9317", "filename": "tests/ui/associated-consts/issue-93775.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Fassociated-consts%2Fissue-93775.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Fassociated-consts%2Fissue-93775.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fissue-93775.rs?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -3,7 +3,7 @@\n \n // Regression for #93775, needs build-pass to test it.\n \n-#![recursion_limit = \"1000\"]\n+#![recursion_limit = \"1001\"]\n \n use std::marker::PhantomData;\n "}, {"sha": "70e49566ac0d99bf580658119f3ef9f8178f55e6", "filename": "tests/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -1,15 +1,10 @@\n-error[E0275]: overflow evaluating the requirement `K: Send`\n+error[E0275]: overflow evaluating the requirement `J: Send`\n   --> $DIR/recursion_limit.rs:34:5\n    |\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`recursion_limit`)\n-note: required because it appears within the type `J`\n-  --> $DIR/recursion_limit.rs:24:9\n-   |\n-LL | link! { J, K }\n-   |         ^\n note: required because it appears within the type `I`\n   --> $DIR/recursion_limit.rs:23:9\n    |"}, {"sha": "03c37d6f0e1deffc9ce61a28197990b411ba6a2e", "filename": "tests/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0275.stderr?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -11,7 +11,7 @@ note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^               --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/error-codes/E0275/E0275.long-type-hash.txt'\n-   = note: 127 redundant requirements hidden\n+   = note: 126 redundant requirements hidden\n    = note: required for `Bar<T>` to implement `Foo`\n \n error: aborting due to previous error"}, {"sha": "8891a26784e4b87bb0122108c6b4a2b3809b7356", "filename": "tests/ui/issues/issue-20413.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20413.stderr?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -20,51 +20,51 @@ note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoDa\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^                  --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n-   = note: 127 redundant requirements hidden\n+   = note: 126 redundant requirements hidden\n    = note: required for `NoData<T>` to implement `Foo`\n \n-error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>: Baz`\n+error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:28:42\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>` to implement `Bar`\n-  --> $DIR/issue-20413.rs:28:9\n-   |\n-LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n-   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^                        --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n-   = note: 126 redundant requirements hidden\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>` to implement `Bar`\n+  --> $DIR/issue-20413.rs:28:9\n+   |\n+LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n+   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+   = note: 125 redundant requirements hidden\n    = note: required for `EvenLessData<T>` to implement `Baz`\n \n-error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>: Bar`\n+error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:35:42\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>` to implement `Baz`\n-  --> $DIR/issue-20413.rs:35:9\n-   |\n-LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n-   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^                        --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n-   = note: 126 redundant requirements hidden\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>` to implement `Baz`\n+  --> $DIR/issue-20413.rs:35:9\n+   |\n+LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n+   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+   = note: 125 redundant requirements hidden\n    = note: required for `AlmostNoData<T>` to implement `Bar`\n \n error: aborting due to 4 previous errors"}, {"sha": "2ff16b4af38d4fab44da3d4e07ec6afdb339fdf7", "filename": "tests/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -1,22 +1,9 @@\n-error[E0275]: overflow evaluating the requirement `SalsaStorage: RefUnwindSafe`\n+error[E0275]: overflow evaluating the requirement `RootDatabase: RefUnwindSafe`\n   --> $DIR/cycle-cache-err-60010.rs:27:13\n    |\n LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required because it appears within the type `PhantomData<SalsaStorage>`\n-   = note: required because it appears within the type `Unique<SalsaStorage>`\n-   = note: required because it appears within the type `Box<SalsaStorage>`\n-note: required because it appears within the type `Runtime<RootDatabase>`\n-  --> $DIR/cycle-cache-err-60010.rs:23:8\n-   |\n-LL | struct Runtime<DB: Database> {\n-   |        ^^^^^^^\n-note: required because it appears within the type `RootDatabase`\n-  --> $DIR/cycle-cache-err-60010.rs:20:8\n-   |\n-LL | struct RootDatabase {\n-   |        ^^^^^^^^^^^^\n note: required for `RootDatabase` to implement `SourceDatabase`\n   --> $DIR/cycle-cache-err-60010.rs:44:9\n    |"}, {"sha": "4eca643a92d4c7143d6e36f907a4bbe63552f7ba", "filename": "tests/ui/traits/issue-91949-hangs-on-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -1,6 +1,6 @@\n // build-fail\n // compile-flags: -Zinline-mir=no\n-// error-pattern: overflow evaluating the requirement `(): Sized`\n+// error-pattern: overflow evaluating the requirement `<std::iter::Empty<()> as Iterator>::Item == ()`\n // error-pattern: function cannot return without recursing\n // normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n "}, {"sha": "144990d50f00088ebded469495593bb234b4ca28", "filename": "tests/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63861b9d5a91b827c5c8164e24ee556dd790bbe/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=c63861b9d5a91b827c5c8164e24ee556dd790bbe", "patch": "@@ -12,11 +12,17 @@ LL |       recurse(IteratorOfWrapped(elements).map(|t| t.0))\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error[E0275]: overflow evaluating the requirement `(): Sized`\n+error[E0275]: overflow evaluating the requirement `<std::iter::Empty<()> as Iterator>::Item == ()`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n-   = note: required for `std::iter::Empty<()>` to implement `Iterator`\n-   = note: 171 redundant requirements hidden\n+note: required for `IteratorOfWrapped<(), std::iter::Empty<()>>` to implement `Iterator`\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:16:32\n+   |\n+LL | impl<T, I: Iterator<Item = T>> Iterator for IteratorOfWrapped<T, I> {\n+   |                     --------   ^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     unsatisfied trait bound introduced here\n+   = note: 256 redundant requirements hidden\n    = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>, ...>>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/traits/issue-91949-hangs-on-recursion/issue-91949-hangs-on-recursion.long-type-hash.txt'\n "}]}