{"sha": "556d971f83ea5950444b0a5b5392cd0040f077f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NmQ5NzFmODNlYTU5NTA0NDRiMGE1YjUzOTJjZDAwNDBmMDc3ZjY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T04:06:44Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T20:33:37Z"}, "message": "Remove internal uses of `marker::NoCopy`", "tree": {"sha": "26bd1449ae9625a61a4d9c52ab5050f0c86c376e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26bd1449ae9625a61a4d9c52ab5050f0c86c376e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/556d971f83ea5950444b0a5b5392cd0040f077f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/556d971f83ea5950444b0a5b5392cd0040f077f6", "html_url": "https://github.com/rust-lang/rust/commit/556d971f83ea5950444b0a5b5392cd0040f077f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/556d971f83ea5950444b0a5b5392cd0040f077f6/comments", "author": null, "committer": null, "parents": [{"sha": "1b97cd338b5d425b24e821e815d84005e38b390a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b97cd338b5d425b24e821e815d84005e38b390a", "html_url": "https://github.com/rust-lang/rust/commit/1b97cd338b5d425b24e821e815d84005e38b390a"}], "stats": {"total": 68, "additions": 18, "deletions": 50}, "files": [{"sha": "a7250b862c25e416f46e1a79f3dc3d3d8876a5e6", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -18,7 +18,6 @@ pub use self::TraversalItem::*;\n use core::prelude::*;\n \n use core::{slice, mem, ptr, cmp, num, raw};\n-use core::kinds::marker;\n use core::iter::Zip;\n use core::borrow::BorrowFrom;\n use alloc::heap;\n@@ -175,7 +174,6 @@ fn calculate_offsets_generic<K, V>(capacity: uint, is_leaf: bool) -> (uint, uint\n struct RawItems<T> {\n     head: *const T,\n     tail: *const T,\n-    marker: marker::NoCopy\n }\n \n impl<T> RawItems<T> {\n@@ -188,13 +186,11 @@ impl<T> RawItems<T> {\n             RawItems {\n                 head: ptr,\n                 tail: (ptr as uint + len) as *const T,\n-                marker: marker::NoCopy\n             }\n         } else {\n             RawItems {\n                 head: ptr,\n                 tail: ptr.offset(len as int),\n-                marker: marker::NoCopy\n             }\n         }\n     }"}, {"sha": "e8dc3aeb52c1730731b662b4af89e4de58695f4a", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -402,7 +402,6 @@ impl<T> RingBuf<T> {\n             cap: self.cap,\n             ptr: self.ptr,\n             marker: marker::ContravariantLifetime::<'a>,\n-            marker2: marker::NoCopy\n         }\n     }\n \n@@ -952,7 +951,6 @@ pub struct MutItems<'a, T:'a> {\n     head: uint,\n     cap: uint,\n     marker: marker::ContravariantLifetime<'a>,\n-    marker2: marker::NoCopy\n }\n \n impl<'a, T> Iterator<&'a mut T> for MutItems<'a, T> {"}, {"sha": "bb2fed19e2afdb8d79cc83a2a7ac2505b053dbe5", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -15,36 +15,31 @@\n pub use self::Ordering::*;\n \n use intrinsics;\n-use std::kinds::marker;\n use cell::UnsafeCell;\n use kinds::Copy;\n \n /// A boolean type which can be safely shared between threads.\n #[stable]\n pub struct AtomicBool {\n     v: UnsafeCell<uint>,\n-    nocopy: marker::NoCopy\n }\n \n /// A signed integer type which can be safely shared between threads.\n #[stable]\n pub struct AtomicInt {\n     v: UnsafeCell<int>,\n-    nocopy: marker::NoCopy\n }\n \n /// An unsigned integer type which can be safely shared between threads.\n #[stable]\n pub struct AtomicUint {\n     v: UnsafeCell<uint>,\n-    nocopy: marker::NoCopy\n }\n \n /// A raw pointer type which can be safely shared between threads.\n #[stable]\n pub struct AtomicPtr<T> {\n     p: UnsafeCell<uint>,\n-    nocopy: marker::NoCopy\n }\n \n /// Atomic memory orderings\n@@ -87,15 +82,15 @@ impl Copy for Ordering {}\n /// An `AtomicBool` initialized to `false`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_BOOL: AtomicBool =\n-        AtomicBool { v: UnsafeCell { value: 0 }, nocopy: marker::NoCopy };\n+        AtomicBool { v: UnsafeCell { value: 0 } };\n /// An `AtomicInt` initialized to `0`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_INT: AtomicInt =\n-        AtomicInt { v: UnsafeCell { value: 0 }, nocopy: marker::NoCopy };\n+        AtomicInt { v: UnsafeCell { value: 0 } };\n /// An `AtomicUint` initialized to `0`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_UINT: AtomicUint =\n-        AtomicUint { v: UnsafeCell { value: 0, }, nocopy: marker::NoCopy };\n+        AtomicUint { v: UnsafeCell { value: 0, } };\n \n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n const UINT_TRUE: uint = -1;\n@@ -115,7 +110,7 @@ impl AtomicBool {\n     #[stable]\n     pub fn new(v: bool) -> AtomicBool {\n         let val = if v { UINT_TRUE } else { 0 };\n-        AtomicBool { v: UnsafeCell::new(val), nocopy: marker::NoCopy }\n+        AtomicBool { v: UnsafeCell::new(val) }\n     }\n \n     /// Loads a value from the bool.\n@@ -355,7 +350,7 @@ impl AtomicInt {\n     #[inline]\n     #[stable]\n     pub fn new(v: int) -> AtomicInt {\n-        AtomicInt {v: UnsafeCell::new(v), nocopy: marker::NoCopy}\n+        AtomicInt {v: UnsafeCell::new(v)}\n     }\n \n     /// Loads a value from the int.\n@@ -541,7 +536,7 @@ impl AtomicUint {\n     #[inline]\n     #[stable]\n     pub fn new(v: uint) -> AtomicUint {\n-        AtomicUint { v: UnsafeCell::new(v), nocopy: marker::NoCopy }\n+        AtomicUint { v: UnsafeCell::new(v) }\n     }\n \n     /// Loads a value from the uint.\n@@ -728,7 +723,7 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable]\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n-        AtomicPtr { p: UnsafeCell::new(p as uint), nocopy: marker::NoCopy }\n+        AtomicPtr { p: UnsafeCell::new(p as uint) }\n     }\n \n     /// Loads a value from the pointer."}, {"sha": "afb6249e7ae528e7ed0303111a4deddddb77f635", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -234,7 +234,6 @@ impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n pub struct RefCell<T> {\n     value: UnsafeCell<T>,\n     borrow: Cell<BorrowFlag>,\n-    nocopy: marker::NoCopy,\n     noshare: marker::NoSync,\n }\n \n@@ -251,7 +250,6 @@ impl<T> RefCell<T> {\n         RefCell {\n             value: UnsafeCell::new(value),\n             borrow: Cell::new(UNUSED),\n-            nocopy: marker::NoCopy,\n             noshare: marker::NoSync,\n         }\n     }"}, {"sha": "1b57bec07331fe746be81cb5829ae103abf6110b", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -611,13 +611,11 @@ impl<T> SlicePrelude<T> for [T] {\n             if mem::size_of::<T>() == 0 {\n                 MutItems{ptr: p,\n                          end: (p as uint + self.len()) as *mut T,\n-                         marker: marker::ContravariantLifetime::<'a>,\n-                         marker2: marker::NoCopy}\n+                         marker: marker::ContravariantLifetime::<'a>}\n             } else {\n                 MutItems{ptr: p,\n                          end: p.offset(self.len() as int),\n-                         marker: marker::ContravariantLifetime::<'a>,\n-                         marker2: marker::NoCopy}\n+                         marker: marker::ContravariantLifetime::<'a>}\n             }\n         }\n     }\n@@ -1215,7 +1213,6 @@ pub struct MutItems<'a, T: 'a> {\n     ptr: *mut T,\n     end: *mut T,\n     marker: marker::ContravariantLifetime<'a>,\n-    marker2: marker::NoCopy\n }\n \n #[experimental]"}, {"sha": "e80e8dc5351041f7c9735eaca1c7e86594a8773b", "filename": "src/librustc/util/snapshot_vec.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -20,7 +20,6 @@\n //! those changes.\n use self::UndoLog::*;\n \n-use std::kinds::marker;\n use std::mem;\n \n #[deriving(PartialEq)]\n@@ -47,10 +46,9 @@ pub struct SnapshotVec<T,U,D> {\n     delegate: D\n }\n \n+// Snapshots are tokens that should be created/consumed linearly.\n+#[allow(missing_copy_implementations)]\n pub struct Snapshot {\n-    // Snapshots are tokens that should be created/consumed linearly.\n-    marker: marker::NoCopy,\n-\n     // Length of the undo log at the time the snapshot was taken.\n     length: uint,\n }\n@@ -112,8 +110,7 @@ impl<T,U,D:SnapshotVecDelegate<T,U>> SnapshotVec<T,U,D> {\n     pub fn start_snapshot(&mut self) -> Snapshot {\n         let length = self.undo_log.len();\n         self.undo_log.push(OpenSnapshot);\n-        Snapshot { length: length,\n-                   marker: marker::NoCopy }\n+        Snapshot { length: length }\n     }\n \n     fn assert_open_snapshot(&self, snapshot: &Snapshot) {"}, {"sha": "b942a3819cc41162b96cfc2eb3b1227446745653", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -20,7 +20,6 @@ use alloc::boxed::Box;\n use core::any::Any;\n use core::atomic::{AtomicUint, SeqCst};\n use core::iter::{IteratorExt, Take};\n-use core::kinds::marker;\n use core::ops::FnOnce;\n use core::mem;\n use core::ops::FnMut;\n@@ -95,7 +94,6 @@ pub enum BlockedTask {\n /// Per-task state related to task death, killing, panic, etc.\n pub struct Death {\n     pub on_exit: Option<Thunk<Result>>,\n-    marker: marker::NoCopy,\n }\n \n pub struct BlockedTasks {\n@@ -499,7 +497,7 @@ impl BlockedTask {\n \n impl Death {\n     pub fn new() -> Death {\n-        Death { on_exit: None, marker: marker::NoCopy }\n+        Death { on_exit: None }\n     }\n }\n "}, {"sha": "c0eebe135c3ce2893bfed4eaa1b5331947a52689", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -186,9 +186,8 @@ mod imp {\n     ///   service provider with the `PROV_RSA_FULL` type.\n     /// - iOS: calls SecRandomCopyBytes as /dev/(u)random is sandboxed\n     /// This does not block.\n-    pub struct OsRng {\n-        marker: marker::NoCopy\n-    }\n+    #[allow(missing_copy_implementations)]\n+    pub struct OsRng;\n \n     #[repr(C)]\n     struct SecRandom;\n@@ -205,7 +204,7 @@ mod imp {\n     impl OsRng {\n         /// Create a new `OsRng`.\n         pub fn new() -> IoResult<OsRng> {\n-            Ok(OsRng {marker: marker::NoCopy} )\n+            Ok(OsRng)\n         }\n     }\n "}, {"sha": "cf56a71d67acdbb7f83ba024814b00fe68bb00f4", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -58,7 +58,6 @@\n \n use prelude::*;\n \n-use kinds::marker;\n use rustrt::exclusive::Exclusive;\n use sync::atomic::{mod, AtomicUint};\n use sync::{Once, ONCE_INIT};\n@@ -100,7 +99,6 @@ pub struct StaticKey {\n /// Inner contents of `StaticKey`, created by the `INIT_INNER` constant.\n pub struct StaticKeyInner {\n     key: AtomicUint,\n-    nc: marker::NoCopy,\n }\n \n /// A type for a safely managed OS-based TLS slot.\n@@ -141,7 +139,6 @@ pub const INIT: StaticKey = StaticKey {\n /// This value allows specific configuration of the destructor for a TLS key.\n pub const INIT_INNER: StaticKeyInner = StaticKeyInner {\n     key: atomic::INIT_ATOMIC_UINT,\n-    nc: marker::NoCopy,\n };\n \n static INIT_KEYS: Once = ONCE_INIT;"}, {"sha": "324b594209a1e17afe87f1edd4787a9dc1c9d947", "filename": "src/libstd/task.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -49,7 +49,7 @@ use boxed::Box;\n use comm::channel;\n use core::ops::FnOnce;\n use io::{Writer, stdio};\n-use kinds::{Send, marker};\n+use kinds::Send;\n use option::Option;\n use option::Option::{None, Some};\n use result::Result;\n@@ -83,7 +83,6 @@ pub struct TaskBuilder {\n     stderr: Option<Box<Writer + Send>>,\n     // Optionally wrap the eventual task body\n     gen_body: Option<Thunk<Thunk, Thunk>>,\n-    nocopy: marker::NoCopy,\n }\n \n impl TaskBuilder {\n@@ -96,7 +95,6 @@ impl TaskBuilder {\n             stdout: None,\n             stderr: None,\n             gen_body: None,\n-            nocopy: marker::NoCopy,\n         }\n     }\n }\n@@ -137,7 +135,7 @@ impl TaskBuilder {\n         on_exit: Option<Thunk<task::Result>>)\n     {\n         let TaskBuilder {\n-            name, stack_size, stdout, stderr, mut gen_body, nocopy: _\n+            name, stack_size, stdout, stderr, mut gen_body\n         } = self;\n \n         let f = match gen_body.take() {"}, {"sha": "76fb703514b52106a7ae7f7af20bc5caabe38d7b", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556d971f83ea5950444b0a5b5392cd0040f077f6/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=556d971f83ea5950444b0a5b5392cd0040f077f6", "patch": "@@ -185,7 +185,6 @@ macro_rules! __thread_local_inner(\n                 inner: ::std::cell::UnsafeCell { value: $init },\n                 dtor_registered: ::std::cell::UnsafeCell { value: false },\n                 dtor_running: ::std::cell::UnsafeCell { value: false },\n-                marker: ::std::kinds::marker::NoCopy,\n             }\n         };\n \n@@ -247,7 +246,6 @@ mod imp {\n \n     use cell::UnsafeCell;\n     use intrinsics;\n-    use kinds::marker;\n     use ptr;\n \n     #[doc(hidden)]\n@@ -264,9 +262,6 @@ mod imp {\n         // these variables are thread-local, not global.\n         pub dtor_registered: UnsafeCell<bool>, // should be Cell\n         pub dtor_running: UnsafeCell<bool>, // should be Cell\n-\n-        // These shouldn't be copied around.\n-        pub marker: marker::NoCopy,\n     }\n \n     #[doc(hidden)]"}]}