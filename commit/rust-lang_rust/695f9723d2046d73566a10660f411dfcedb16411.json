{"sha": "695f9723d2046d73566a10660f411dfcedb16411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NWY5NzIzZDIwNDZkNzM1NjZhMTA2NjBmNDExZGZjZWRiMTY0MTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-28T21:08:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-28T21:08:58Z"}, "message": "Merge pull request #222 from oli-obk/const_eval_checks\n\nAddress comments to previous PR", "tree": {"sha": "17e0d14b0bd15c0ddad06e1b3c1a0ef70ee82528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e0d14b0bd15c0ddad06e1b3c1a0ef70ee82528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695f9723d2046d73566a10660f411dfcedb16411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695f9723d2046d73566a10660f411dfcedb16411", "html_url": "https://github.com/rust-lang/rust/commit/695f9723d2046d73566a10660f411dfcedb16411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695f9723d2046d73566a10660f411dfcedb16411/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a589ccb839909426046912e11b41ce813fa68f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/a589ccb839909426046912e11b41ce813fa68f73", "html_url": "https://github.com/rust-lang/rust/commit/a589ccb839909426046912e11b41ce813fa68f73"}, {"sha": "c8079c652ce6bffd26dd3c410af432e656245d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8079c652ce6bffd26dd3c410af432e656245d00", "html_url": "https://github.com/rust-lang/rust/commit/c8079c652ce6bffd26dd3c410af432e656245d00"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "cdf2715995ceafb1c3ef2e7c0dc40209a6b482a4", "filename": "src/eval_context.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/695f9723d2046d73566a10660f411dfcedb16411/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695f9723d2046d73566a10660f411dfcedb16411/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=695f9723d2046d73566a10660f411dfcedb16411", "patch": "@@ -169,6 +169,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &self.stack\n     }\n \n+    /// Returns true if the current frame or any parent frame is part of a ctfe.\n+    ///\n+    /// Used to disable features in const eval, which do not have a rfc enabling\n+    /// them or which can't be written in a way that they produce the same output\n+    /// that evaluating the code at runtime would produce.\n+    pub fn const_env(&self) -> bool {\n+        for frame in self.stack.iter().rev() {\n+            if let StackPopCleanup::MarkStatic(_) = frame.return_to_block {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     pub(crate) fn str_to_value(&mut self, s: &str) -> EvalResult<'tcx, Value> {\n         let ptr = self.memory.allocate_cached(s.as_bytes())?;\n         Ok(Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::from_u128(s.len() as u128)))\n@@ -655,7 +669,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Len(ref lvalue) => {\n-                if self.frame().const_env() {\n+                if self.const_env() {\n                     return Err(EvalError::NeedsRfc(\"computing the length of arrays\".to_string()));\n                 }\n                 let src = self.eval_lvalue(lvalue)?;\n@@ -704,7 +718,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             NullaryOp(mir::NullOp::Box, ty) => {\n-                if self.frame().const_env() {\n+                if self.const_env() {\n                     return Err(EvalError::NeedsRfc(\"\\\"heap\\\" allocations\".to_string()));\n                 }\n                 // FIXME: call the `exchange_malloc` lang item if available\n@@ -718,7 +732,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             NullaryOp(mir::NullOp::SizeOf, ty) => {\n-                if self.frame().const_env() {\n+                if self.const_env() {\n                     return Err(EvalError::NeedsRfc(\"computing the size of types (size_of)\".to_string()));\n                 }\n                 let size = self.type_size(ty)?.expect(\"SizeOf nullary MIR operator called for unsized type\");\n@@ -1592,12 +1606,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n }\n \n impl<'tcx> Frame<'tcx> {\n-    pub fn const_env(&self) -> bool {\n-        match self.return_to_block {\n-            StackPopCleanup::MarkStatic(_) => true,\n-            _ => false,\n-        }\n-    }\n     pub fn get_local(&self, local: mir::Local) -> EvalResult<'tcx, Value> {\n         // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n         self.locals[local.index() - 1].ok_or(EvalError::DeadLocal)"}, {"sha": "5386fa588a4b278190047709b2ed330d4880f10b", "filename": "src/operator.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/695f9723d2046d73566a10660f411dfcedb16411/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695f9723d2046d73566a10660f411dfcedb16411/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=695f9723d2046d73566a10660f411dfcedb16411", "patch": "@@ -151,12 +151,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let usize = PrimValKind::from_uint_size(self.memory.pointer_size());\n         let isize = PrimValKind::from_int_size(self.memory.pointer_size());\n         if !left_kind.is_float() && !right_kind.is_float() {\n-            if (!left.is_bytes() && !right.is_bytes()) && self.frame().const_env() {\n-                if left.is_ptr() && right.is_ptr() {\n-                    return Err(EvalError::NotConst(\"Comparing pointers\".to_string()));\n-                } else {\n-                    return Err(EvalError::NeedsRfc(\"Comparing Pointers integers with pointers\".to_string()));\n-                }\n+            if (!left.is_bytes() && !right.is_bytes()) && self.const_env() {\n+                return Err(EvalError::NeedsRfc(\"Pointer arithmetic or comparison\".to_string()));\n             }\n             match bin_op {\n                 Offset if left_kind == Ptr && right_kind == usize => {"}, {"sha": "7d0d8fb161ed7eb9e1ee623d343e3db5750512c1", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/695f9723d2046d73566a10660f411dfcedb16411/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695f9723d2046d73566a10660f411dfcedb16411/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=695f9723d2046d73566a10660f411dfcedb16411", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Goto { target } => self.goto_block(target),\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n-                if self.frame().const_env() {\n+                if self.const_env() {\n                     return Err(EvalError::NeedsRfc(\"branching (if, match, loop, ...)\".to_string()));\n                 }\n                 let discr_val = self.eval_operand(discr)?;\n@@ -95,7 +95,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Drop { ref location, target, .. } => {\n                 trace!(\"TerminatorKind::drop: {:?}, {:?}\", location, self.substs());\n-                if self.frame().const_env() {\n+                if self.const_env() {\n                     return Err(EvalError::NeedsRfc(\"invoking `Drop::drop`\".to_string()));\n                 }\n                 let lval = self.eval_lvalue(location)?;\n@@ -430,7 +430,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let mir = match self.load_mir(instance.def) {\n             Ok(mir) => mir,\n             Err(EvalError::NoMirFor(path)) => {\n-                if self.frame().const_env() {\n+                if self.const_env() {\n                     return Err(EvalError::NeedsRfc(format!(\"calling extern function `{}`\", path)));\n                 }\n                 self.call_missing_fn(instance, destination, arg_operands, sig, path)?;\n@@ -439,7 +439,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Err(other) => return Err(other),\n         };\n \n-        if self.frame().const_env() && !self.tcx.is_const_fn(instance.def_id()) {\n+        if self.const_env() && !self.tcx.is_const_fn(instance.def_id()) {\n             return Err(EvalError::NotConst(format!(\"calling non-const fn `{}`\", instance)));\n         }\n         "}]}