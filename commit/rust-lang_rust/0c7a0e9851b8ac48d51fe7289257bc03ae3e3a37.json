{"sha": "0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjN2EwZTk4NTFiOGFjNDhkNTFmZTcyODkyNTdiYzAzYWUzZTNhMzc=", "commit": {"author": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "committer": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "message": "Copy musl startup objects before building std\n\nThey are required for linking it, even though it is a library, because\ncrtn.o in post_link_objects, as hardcoded in src/librustc_back/target/\nlinux_musl_base.rs, is added to the linker command line for both\nexecutables and libraries.", "tree": {"sha": "79161b4e9b316b2e2c6f851e5b4d2c813037011a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79161b4e9b316b2e2c6f851e5b4d2c813037011a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37", "html_url": "https://github.com/rust-lang/rust/commit/0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37/comments", "author": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8606782bc155a5f2a3c292a76463a582167c744e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8606782bc155a5f2a3c292a76463a582167c744e", "html_url": "https://github.com/rust-lang/rust/commit/8606782bc155a5f2a3c292a76463a582167c744e"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "335e1690a2ea0252a97860079309257a5aa0e0d4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0c7a0e9851b8ac48d51fe7289257bc03ae3e3a37", "patch": "@@ -77,6 +77,14 @@ impl Step for Std {\n                 target,\n             });\n             println!(\"Uplifting stage1 std ({} -> {})\", from.host, target);\n+\n+            // Even if we're not building std this stage, the new sysroot must\n+            // still contain the musl startup objects.\n+            if target.contains(\"musl\") && !target.contains(\"mips\") {\n+                let libdir = builder.sysroot_libdir(compiler, target);\n+                copy_musl_third_party_objects(build, target, &libdir);\n+            }\n+\n             builder.ensure(StdLink {\n                 compiler: from,\n                 target_compiler: compiler,\n@@ -89,6 +97,11 @@ impl Step for Std {\n         println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target);\n \n+        if target.contains(\"musl\") && !target.contains(\"mips\") {\n+            let libdir = builder.sysroot_libdir(compiler, target);\n+            copy_musl_third_party_objects(build, target, &libdir);\n+        }\n+\n         let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n@@ -105,6 +118,20 @@ impl Step for Std {\n     }\n }\n \n+/// Copies the crt(1,i,n).o startup objects\n+///\n+/// Since musl supports fully static linking, we can cross link for it even\n+/// with a glibc-targeting toolchain, given we have the appropriate startup\n+/// files. As those shipped with glibc won't work, copy the ones provided by\n+/// musl so we have them on linux-gnu hosts.\n+fn copy_musl_third_party_objects(build: &Build,\n+                                 target: Interned<String>,\n+                                 into: &Path) {\n+    for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n+        copy(&build.musl_root(target).unwrap().join(\"lib\").join(obj), &into.join(obj));\n+    }\n+}\n+\n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n pub fn std_cargo(build: &Build,\n@@ -189,10 +216,6 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         add_to_sysroot(&libdir, &libstd_stamp(build, compiler, target));\n \n-        if target.contains(\"musl\") && !target.contains(\"mips\") {\n-            copy_musl_third_party_objects(build, target, &libdir);\n-        }\n-\n         if build.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n             // The sanitizers are only built in stage1 or above, so the dylibs will\n             // be missing in stage0 and causes panic. See the `std()` function above\n@@ -208,18 +231,6 @@ impl Step for StdLink {\n     }\n }\n \n-/// Copies the crt(1,i,n).o startup objects\n-///\n-/// Since musl supports fully static linking, we can cross link for it even\n-/// with a glibc-targeting toolchain, given we have the appropriate startup\n-/// files. As those shipped with glibc won't work, copy the ones provided by\n-/// musl so we have them on linux-gnu hosts.\n-fn copy_musl_third_party_objects(build: &Build, target: Interned<String>, into: &Path) {\n-    for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n-        copy(&build.musl_root(target).unwrap().join(\"lib\").join(obj), &into.join(obj));\n-    }\n-}\n-\n fn copy_apple_sanitizer_dylibs(native_dir: &Path, platform: &str, into: &Path) {\n     for &sanitizer in &[\"asan\", \"tsan\"] {\n         let filename = format!(\"libclang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);"}]}