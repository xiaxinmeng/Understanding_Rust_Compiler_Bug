{"sha": "d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MGU3YmI1ZmM5NmY1NmU3ZWYxNGJkZmVlYjMxNzZhNGJiZmZjN2Y=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-08T04:31:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-08T04:31:21Z"}, "message": "Merge pull request #906 from Manishearth/birkenfeld-master\n\nRustup to *rustc 1.10.0-nightly (62e2b2fb7 2016-05-06)*", "tree": {"sha": "a987c89f74011a3ba510c8425163443806cf6e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a987c89f74011a3ba510c8425163443806cf6e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "html_url": "https://github.com/rust-lang/rust/commit/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5d87c2f265a88849c4e4da655b210ae937fcc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5d87c2f265a88849c4e4da655b210ae937fcc6", "html_url": "https://github.com/rust-lang/rust/commit/eb5d87c2f265a88849c4e4da655b210ae937fcc6"}, {"sha": "7566484b8ad6ea92cc7c69cf77f4c72aed738479", "url": "https://api.github.com/repos/rust-lang/rust/commits/7566484b8ad6ea92cc7c69cf77f4c72aed738479", "html_url": "https://github.com/rust-lang/rust/commit/7566484b8ad6ea92cc7c69cf77f4c72aed738479"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "6ff3526d841875934e49cf4849d45f731989a7d3", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -1,6 +1,10 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.65 \u2014 2016-05-08\n+* Rustup to *rustc 1.10.0-nightly (62e2b2fb7 2016-05-06)*\n+* New lints: [`float_arithmetic`], [`integer_arithmetic`]\n+\n ## 0.0.64 \u2014 2016-04-26\n * Rustup to *rustc 1.10.0-nightly (645dd013a 2016-04-24)*\n * New lints: [`temporary_cstring_as_ptr`], [`unsafe_removed_from_name`], and [`mem_forget`]"}, {"sha": "cd6b2834c569b0bfcf74de2f0ec29d905dd22a24", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.64\"\n+version = \"0.0.65\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\","}, {"sha": "7e9d17d643b16cd77438f2797c5d32d5450188cd", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -113,14 +113,9 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n             if is_named_self(i, \"len\") {\n                 let ty = cx.tcx.node_id_to_type(item.id);\n \n-                let s = i.span;\n                 span_lint(cx,\n                           LEN_WITHOUT_IS_EMPTY,\n-                          Span {\n-                              lo: s.lo,\n-                              hi: s.lo,\n-                              expn_id: s.expn_id,\n-                          },\n+                          i.span,\n                           &format!(\"item `{}` has a `.len(_: &Self)` method, but no `.is_empty(_: &Self)` method. \\\n                                     Consider adding one\",\n                                    ty));"}, {"sha": "44fdab454a32187e8118c9787bd277768e180a2e", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -602,7 +602,7 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &Expr, new: &Expr, unwrap: &Expr)\n         span_lint_and_then(cx, TEMPORARY_CSTRING_AS_PTR, expr.span,\n                            \"you are getting the inner pointer of a temporary `CString`\",\n                            |db| {\n-                               db.fileline_note(expr.span, \"that pointer will be invalid outside this expression\");\n+                               db.note(\"that pointer will be invalid outside this expression\");\n                                db.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n                            });\n     }}"}, {"sha": "e1b4237b9b2ec4baf37ffd6ec1c767ed1b577acd", "filename": "src/regex.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -143,14 +143,17 @@ impl LateLintPass for RegexPass {\n \n #[allow(cast_possible_truncation)]\n fn str_span(base: Span, s: &str, c: usize) -> Span {\n-    let lo = match s.char_indices().nth(c) {\n-        Some((b, _)) => base.lo + BytePos(b as u32),\n-        _ => base.hi,\n-    };\n-    Span {\n-        lo: lo,\n-        hi: lo,\n-        ..base\n+    let mut si = s.char_indices().skip(c);\n+\n+    match (si.next(), si.next())  {\n+        (Some((l, _)), Some((h, _))) => {\n+            Span {\n+                lo: base.lo + BytePos(l as u32),\n+                hi: base.lo + BytePos(h as u32),\n+                ..base\n+            }\n+        }\n+        _ => base,\n     }\n }\n "}, {"sha": "724915b9dd5cc4d820b08e6d580390bea2abe608", "filename": "src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fswap.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -95,7 +95,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n                                    if !what.is_empty() {\n                                        db.span_suggestion(span, \"try\",\n                                                           format!(\"std::mem::swap(&mut {}, &mut {})\", lhs, rhs));\n-                                       db.fileline_note(span, \"or maybe you should use `std::mem::replace`?\");\n+                                       db.note(\"or maybe you should use `std::mem::replace`?\");\n                                    }\n                                });\n         }}\n@@ -130,7 +130,7 @@ fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n                                    if !what.is_empty() {\n                                        db.span_suggestion(span, \"try\",\n                                                           format!(\"std::mem::swap(&mut {}, &mut {})\", lhs, rhs));\n-                                       db.fileline_note(span, \"or maybe you should use `std::mem::replace`?\");\n+                                       db.note(\"or maybe you should use `std::mem::replace`?\");\n                                    }\n                                });\n         }}"}, {"sha": "3e77ffb2c24c8cf0be23887dc51afc74e1bc055c", "filename": "src/utils/mod.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -471,44 +471,44 @@ impl<'a> Deref for DiagnosticWrapper<'a> {\n     }\n }\n \n+impl<'a> DiagnosticWrapper<'a> {\n+    fn wiki_link(&mut self, lint: &'static Lint) {\n+        self.help(&format!(\"for further information visit https://github.com/Manishearth/rust-clippy/wiki#{}\",\n+                           lint.name_lower()));\n+    }\n+}\n+\n pub fn span_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str) -> DiagnosticWrapper<'a> {\n-    let mut db = cx.struct_span_lint(lint, sp, msg);\n+    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n     if cx.current_level(lint) != Level::Allow {\n-        db.fileline_help(sp,\n-                         &format!(\"for further information visit https://github.com/Manishearth/rust-clippy/wiki#{}\",\n-                                  lint.name_lower()));\n+        db.wiki_link(lint);\n     }\n-    DiagnosticWrapper(db)\n+    db\n }\n \n pub fn span_help_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str)\n                                               -> DiagnosticWrapper<'a> {\n-    let mut db = cx.struct_span_lint(lint, span, msg);\n+    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     if cx.current_level(lint) != Level::Allow {\n-        db.fileline_help(span,\n-                         &format!(\"{}\\nfor further information visit \\\n-                                   https://github.com/Manishearth/rust-clippy/wiki#{}\",\n-                                  help,\n-                                  lint.name_lower()));\n+        db.help(help);\n+        db.wiki_link(lint);\n     }\n-    DiagnosticWrapper(db)\n+    db\n }\n \n pub fn span_note_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, note_span: Span,\n                                               note: &str)\n                                               -> DiagnosticWrapper<'a> {\n-    let mut db = cx.struct_span_lint(lint, span, msg);\n+    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     if cx.current_level(lint) != Level::Allow {\n         if note_span == span {\n-            db.fileline_note(note_span, note);\n+            db.note(note);\n         } else {\n             db.span_note(note_span, note);\n         }\n-        db.fileline_help(span,\n-                         &format!(\"for further information visit https://github.com/Manishearth/rust-clippy/wiki#{}\",\n-                                  lint.name_lower()));\n+        db.wiki_link(lint);\n     }\n-    DiagnosticWrapper(db)\n+    db\n }\n \n pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n@@ -518,9 +518,7 @@ pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint,\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n     if cx.current_level(lint) != Level::Allow {\n         f(&mut db);\n-        db.fileline_help(sp,\n-                         &format!(\"for further information visit https://github.com/Manishearth/rust-clippy/wiki#{}\",\n-                                  lint.name_lower()));\n+        db.wiki_link(lint);\n     }\n     db\n }"}, {"sha": "2f164d1e5698dab93dbd5b212e4aa9caef2cd171", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -340,7 +340,7 @@ fn main() {\n     for (_, v) in &m {\n         //~^ you seem to want to iterate on a map's values\n         //~| HELP use the corresponding method\n-        //~| SUGGESTION for v in &m.values()\n+        //~| SUGGESTION for v in m.values()\n         let _v = v;\n     }\n "}, {"sha": "3444e49ec513604e0198916834eb6dacc5c5426a", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -140,7 +140,7 @@ fn ref_pats() {\n         match v {\n             //~^ERROR add `&` to all patterns\n             //~|HELP instead of\n-            //~|SUGGESTION `match *v { .. }`\n+            //~|SUGGESTION match *v { .. }\n             &Some(v) => println!(\"{:?}\", v),\n             &None => println!(\"none\"),\n         }\n@@ -153,7 +153,7 @@ fn ref_pats() {\n     match tup {\n         //~^ERROR add `&` to all patterns\n         //~|HELP instead of\n-        //~|SUGGESTION `match *tup { .. }`\n+        //~|SUGGESTION match *tup { .. }\n         &(v, 1) => println!(\"{}\", v),\n         _ => println!(\"none\"),\n     }\n@@ -162,7 +162,7 @@ fn ref_pats() {\n     match &w {\n         //~^ERROR add `&` to both\n         //~|HELP try\n-        //~|SUGGESTION `match w { .. }`\n+        //~|SUGGESTION match w { .. }\n         &Some(v) => println!(\"{:?}\", v),\n         &None => println!(\"none\"),\n     }\n@@ -176,15 +176,15 @@ fn ref_pats() {\n     if let &None = a {\n         //~^ERROR add `&` to all patterns\n         //~|HELP instead of\n-        //~|SUGGESTION `if let ... = *a { .. }`\n+        //~|SUGGESTION if let .. = *a { .. }\n         println!(\"none\");\n     }\n \n     let b = Some(0);\n     if let &None = &b {\n         //~^ERROR add `&` to both\n         //~|HELP try\n-        //~|SUGGESTION `if let ... = b { .. }`\n+        //~|SUGGESTION if let .. = b { .. }\n         println!(\"none\");\n     }\n }"}, {"sha": "9cd2bc8098e5427cf4992fb013c6a30272b32184", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=d70e7bb5fc96f56e7ef14bdfeeb3176a4bbffc7f", "patch": "@@ -16,6 +16,8 @@ fn syntax_error() {\n     //~^ERROR: regex syntax error: empty alternate\n     let wrong_char_ranice = Regex::new(\"[z-a]\");\n     //~^ERROR: regex syntax error: invalid character class range\n+    let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n+    //~^ERROR: regex syntax error: invalid character class range\n \n     let some_regex = Regex::new(OPENING_PAREN);\n     //~^ERROR: regex syntax error on position 0: unclosed"}]}