{"sha": "8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkY2QyNmE2ZGY0YmI5MzJjZDk0NDA0YTZjOTQxZDg0YTNkMWQ4NTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-09-23T17:48:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-21T00:17:19Z"}, "message": "Add tests for associated item privacy", "tree": {"sha": "9a4fa494e6c33dca740557417c850cb6c4a7a5b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4fa494e6c33dca740557417c850cb6c4a7a5b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "html_url": "https://github.com/rust-lang/rust/commit/8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dcd26a6df4bb932cd94404a6c941d84a3d1d851/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "html_url": "https://github.com/rust-lang/rust/commit/7eb64b86ce44cc1828dd176a8b981e37ea08fc38"}], "stats": {"total": 349, "additions": 349, "deletions": 0}, "files": [{"sha": "d742a3a19422f78b9824c6cfda89ef7313e0e8aa", "filename": "src/test/compile-fail/privacy/associated-item-privacy-inherent.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/8dcd26a6df4bb932cd94404a6c941d84a3d1d851/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcd26a6df4bb932cd94404a6c941d84a3d1d851/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs?ref=8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "patch": "@@ -0,0 +1,122 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro, associated_type_defaults)]\n+#![allow(unused, private_in_public)]\n+\n+mod priv_nominal {\n+    pub struct Pub;\n+    impl Pub {\n+        fn method(&self) {}\n+        const CONST: u8 = 0;\n+        // type AssocTy = u8;\n+    }\n+\n+    pub macro mac() {\n+        let value = Pub::method;\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        value;\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        Pub.method();\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        Pub::CONST;\n+        //FIXME ERROR associated constant `CONST` is private\n+        // let _: Pub::AssocTy;\n+        // pub type InSignatureTy = Pub::AssocTy;\n+    }\n+}\n+fn priv_nominal() {\n+    priv_nominal::mac!();\n+}\n+\n+mod priv_signature {\n+    struct Priv;\n+    pub struct Pub;\n+    impl Pub {\n+        pub fn method(&self, arg: Priv) {}\n+    }\n+\n+    pub macro mac() {\n+        let value = Pub::method;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        Pub.method(loop {});\n+        //~^ ERROR type `priv_signature::Priv` is private\n+    }\n+}\n+fn priv_signature() {\n+    priv_signature::mac!();\n+}\n+\n+mod priv_substs {\n+    struct Priv;\n+    pub struct Pub;\n+    impl Pub {\n+        pub fn method<T>(&self) {}\n+    }\n+\n+    pub macro mac() {\n+        let value = Pub::method::<Priv>;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        Pub.method::<Priv>();\n+        //~^ ERROR type `priv_substs::Priv` is private\n+    }\n+}\n+fn priv_substs() {\n+    priv_substs::mac!();\n+}\n+\n+mod priv_parent_substs {\n+    struct Priv;\n+    pub struct Pub<T = Priv>(T);\n+    impl Pub<Priv> {\n+        pub fn method(&self) {}\n+        pub fn static_method() {}\n+        pub const CONST: u8 = 0;\n+        // pub type AssocTy = u8;\n+    }\n+\n+    pub macro mac() {\n+        let value = <Pub>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = Pub::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = <Pub>::static_method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = Pub::static_method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Pub(Priv).method();\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        <Pub>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Pub::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        // let _: Pub::AssocTy;\n+        // pub type InSignatureTy = Pub::AssocTy;\n+    }\n+}\n+fn priv_parent_substs() {\n+    priv_parent_substs::mac!();\n+}\n+\n+fn main() {}"}, {"sha": "d68c502284905c06b7ddf6fcd9bb5cf9b292ee98", "filename": "src/test/compile-fail/privacy/associated-item-privacy-trait.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/8dcd26a6df4bb932cd94404a6c941d84a3d1d851/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcd26a6df4bb932cd94404a6c941d84a3d1d851/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "patch": "@@ -0,0 +1,152 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(decl_macro, associated_type_defaults)]\n+#![allow(unused, private_in_public)]\n+\n+mod priv_trait {\n+    trait PrivTr {\n+        fn method(&self) {}\n+        const CONST: u8 = 0;\n+        type AssocTy = u8;\n+    }\n+    pub struct Pub;\n+    impl PrivTr for Pub {}\n+    pub trait PubTr: PrivTr {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PrivTr>::method;\n+        //~^ ERROR type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::PrivTr>::method}` is private\n+        value;\n+        //~^ ERROR type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::PrivTr>::method}` is private\n+        Pub.method();\n+        //~^ ERROR type `for<'r> fn(&'r Self) {<Self as priv_trait::PrivTr>::method}` is private\n+        <Pub as PrivTr>::CONST;\n+        //FIXME ERROR associated constant `path(PrivTr::CONST)` is private\n+        let _: <Pub as PrivTr>::AssocTy;\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+        //~| ERROR trait `priv_trait::PrivTr` is private\n+        pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+        //~| ERROR trait `path(PrivTr)` is private\n+        pub trait InSignatureTr: PrivTr {}\n+        //FIXME ERROR trait `priv_trait::PrivTr` is private\n+        impl PrivTr for u8 {}\n+        //FIXME ERROR trait `priv_trait::PrivTr` is private\n+    }\n+}\n+fn priv_trait() {\n+    priv_trait::mac!();\n+}\n+\n+mod priv_signature {\n+    pub trait PubTr {\n+        fn method(&self, arg: Priv) {}\n+    }\n+    struct Priv;\n+    pub struct Pub;\n+    impl PubTr for Pub {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PubTr>::method;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        Pub.method(loop {});\n+        //~^ ERROR type `priv_signature::Priv` is private\n+    }\n+}\n+fn priv_signature() {\n+    priv_signature::mac!();\n+}\n+\n+mod priv_substs {\n+    pub trait PubTr {\n+        fn method<T>(&self) {}\n+    }\n+    struct Priv;\n+    pub struct Pub;\n+    impl PubTr for Pub {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PubTr>::method::<Priv>;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        Pub.method::<Priv>();\n+        //~^ ERROR type `priv_substs::Priv` is private\n+    }\n+}\n+fn priv_substs() {\n+    priv_substs::mac!();\n+}\n+\n+mod priv_parent_substs {\n+    pub trait PubTr<T = Priv> {\n+        fn method(&self) {}\n+        const CONST: u8 = 0;\n+        type AssocTy = u8;\n+    }\n+    struct Priv;\n+    pub struct Pub;\n+    impl PubTr<Priv> for Pub {}\n+    impl PubTr<Pub> for Priv {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PubTr>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = <Pub as PubTr<_>>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Pub.method();\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        let value = <Priv as PubTr<_>>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Priv.method();\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        <Pub as PubTr>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        <Pub as PubTr<_>>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        <Priv as PubTr<_>>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        let _: <Pub as PubTr>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: <Pub as PubTr<_>>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: <Priv as PubTr<_>>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+\n+        pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        impl PubTr for u8 {}\n+        //FIXME ERROR type `priv_parent_substs::Priv` is private\n+    }\n+}\n+fn priv_parent_substs() {\n+    priv_parent_substs::mac!();\n+}\n+\n+fn main() {}"}, {"sha": "f191ff14dce68727cae7ff0aad86f8c55c3c239a", "filename": "src/test/compile-fail/privacy/associated-item-privacy-type-binding.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8dcd26a6df4bb932cd94404a6c941d84a3d1d851/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcd26a6df4bb932cd94404a6c941d84a3d1d851/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs?ref=8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro, associated_type_defaults)]\n+#![allow(unused, private_in_public)]\n+\n+mod priv_trait {\n+    trait PrivTr {\n+        type AssocTy = u8;\n+    }\n+    pub trait PubTr: PrivTr {}\n+\n+    pub macro mac1() {\n+        let _: Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n+        //~| ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n+        type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + 'static` is private\n+        trait InSignatureTr2: PubTr<AssocTy = u8> {}\n+        //FIXME ERROR trait `priv_trait::PrivTr` is private\n+    }\n+    pub macro mac2() {\n+        let _: Box<PrivTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n+        //~| ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n+        type InSignatureTy1 = Box<PrivTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + 'static` is private\n+        //~| ERROR trait `path(PrivTr<AssocTy = u8>)` is private\n+        trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n+        //FIXME ERROR trait `priv_trait::PrivTr` is private\n+    }\n+}\n+fn priv_trait1() {\n+    priv_trait::mac1!();\n+}\n+fn priv_trait2() {\n+    priv_trait::mac2!();\n+}\n+\n+mod priv_parent_substs {\n+    pub trait PubTrWithParam<T = Priv> {\n+        type AssocTy = u8;\n+    }\n+    struct Priv;\n+    pub trait PubTr: PubTrWithParam<Priv> {}\n+\n+    pub macro mac() {\n+        let _: Box<PubTrWithParam<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        pub type InSignatureTy1 = Box<PubTrWithParam<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        pub type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        trait InSignatureTr1: PubTrWithParam<AssocTy = u8> {}\n+        //FIXME ERROR type `priv_parent_substs::Priv` is private\n+        trait InSignatureTr2: PubTr<AssocTy = u8> {}\n+        //FIXME ERROR type `priv_parent_substs::Priv` is private\n+    }\n+}\n+fn priv_parent_substs() {\n+    priv_parent_substs::mac!();\n+}\n+\n+fn main() {}"}]}