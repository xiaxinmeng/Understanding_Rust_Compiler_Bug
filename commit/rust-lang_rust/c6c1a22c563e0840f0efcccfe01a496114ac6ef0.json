{"sha": "c6c1a22c563e0840f0efcccfe01a496114ac6ef0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YzFhMjJjNTYzZTA4NDBmMGVmY2NjZmUwMWE0OTYxMTRhYzZlZjA=", "commit": {"author": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-09T19:47:55Z"}, "committer": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-15T23:34:41Z"}, "message": "middle::subst: Better handling of parameter lookup failure", "tree": {"sha": "ce92464ce76a3bc6273f57ff936417b758fb11b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce92464ce76a3bc6273f57ff936417b758fb11b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6c1a22c563e0840f0efcccfe01a496114ac6ef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c1a22c563e0840f0efcccfe01a496114ac6ef0", "html_url": "https://github.com/rust-lang/rust/commit/c6c1a22c563e0840f0efcccfe01a496114ac6ef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6c1a22c563e0840f0efcccfe01a496114ac6ef0/comments", "author": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "741bb1a57e42c3a5e23ef9b01d4fc806b3fc56af", "url": "https://api.github.com/repos/rust-lang/rust/commits/741bb1a57e42c3a5e23ef9b01d4fc806b3fc56af", "html_url": "https://github.com/rust-lang/rust/commit/741bb1a57e42c3a5e23ef9b01d4fc806b3fc56af"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "5c2a70a46fdc8c95e8c712182cb5e07997f97526", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6c1a22c563e0840f0efcccfe01a496114ac6ef0/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c1a22c563e0840f0efcccfe01a496114ac6ef0/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=c6c1a22c563e0840f0efcccfe01a496114ac6ef0", "patch": "@@ -570,10 +570,22 @@ impl<'a> TypeFolder for SubstFolder<'a> {\n         // the specialized routine\n         // `middle::typeck::check::regionmanip::replace_late_regions_in_fn_sig()`.\n         match r {\n-            ty::ReEarlyBound(_, space, i, _) => {\n+            ty::ReEarlyBound(_, space, i, region_name) => {\n                 match self.substs.regions {\n                     ErasedRegions => ty::ReStatic,\n-                    NonerasedRegions(ref regions) => *regions.get(space, i),\n+                    NonerasedRegions(ref regions) =>\n+                        match regions.opt_get(space, i) {\n+                            Some(t) => *t,\n+                            None => {\n+                                let span = self.span.unwrap_or(DUMMY_SP);\n+                                self.tcx().sess.span_bug(\n+                                    span,\n+                                    format!(\"Type parameter out of range \\\n+                                     when substituting in region {} (root type={})\",\n+                                    region_name.as_str(),\n+                                    self.root_ty.repr(self.tcx())).as_slice());\n+                            }\n+                        }\n                 }\n             }\n             _ => r"}]}