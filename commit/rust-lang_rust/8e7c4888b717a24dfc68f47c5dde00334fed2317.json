{"sha": "8e7c4888b717a24dfc68f47c5dde00334fed2317", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlN2M0ODg4YjcxN2EyNGRmYzY4ZjQ3YzVkZGUwMDMzNGZlZDIzMTc=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-04-21T04:30:08Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-07-11T20:29:16Z"}, "message": "stage0 fallback", "tree": {"sha": "5d515fe0216b92fa097384bea7676bf79ceac130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d515fe0216b92fa097384bea7676bf79ceac130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7c4888b717a24dfc68f47c5dde00334fed2317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7c4888b717a24dfc68f47c5dde00334fed2317", "html_url": "https://github.com/rust-lang/rust/commit/8e7c4888b717a24dfc68f47c5dde00334fed2317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7c4888b717a24dfc68f47c5dde00334fed2317/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cce5bc7aba5b2f4f57df4e108e998b96fa01c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cce5bc7aba5b2f4f57df4e108e998b96fa01c8d", "html_url": "https://github.com/rust-lang/rust/commit/8cce5bc7aba5b2f4f57df4e108e998b96fa01c8d"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "8b2064c9d619b6f2e46d0b048f2a5a860d8597a8", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8e7c4888b717a24dfc68f47c5dde00334fed2317/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7c4888b717a24dfc68f47c5dde00334fed2317/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=8e7c4888b717a24dfc68f47c5dde00334fed2317", "patch": "@@ -110,6 +110,7 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n     }\n }\n \n+#[cfg(not(stage0))]\n /// Declare a new thread local storage key of type [`std::thread::LocalKey`].\n ///\n /// # Syntax\n@@ -151,6 +152,7 @@ macro_rules! thread_local {\n     );\n }\n \n+#[cfg(not(stage0))]\n #[doc(hidden)]\n #[unstable(feature = \"thread_local_internals\",\n            reason = \"should not be necessary\",\n@@ -183,6 +185,71 @@ macro_rules! __thread_local_inner {\n     }\n }\n \n+#[cfg(stage0)]\n+/// Declare a new thread local storage key of type `std::thread::LocalKey`.\n+#[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n+macro_rules! thread_local {\n+    // rule 0: empty (base case for the recursion)\n+    () => {};\n+\n+    // rule 1: process multiple declarations where the first one is private\n+    ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n+        thread_local!($(#[$attr])* static $name: $t = $init); // go to rule 2\n+        thread_local!($($rest)*);\n+    );\n+\n+    // rule 2: handle a single private declaration\n+    ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr) => (\n+        $(#[$attr])* static $name: $crate::thread::LocalKey<$t> =\n+            __thread_local_inner!($t, $init);\n+    );\n+\n+    // rule 3: handle multiple declarations where the first one is public\n+    ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n+        thread_local!($(#[$attr])* pub static $name: $t = $init); // go to rule 4\n+        thread_local!($($rest)*);\n+    );\n+\n+    // rule 4: handle a single public declaration\n+    ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr) => (\n+        $(#[$attr])* pub static $name: $crate::thread::LocalKey<$t> =\n+            __thread_local_inner!($t, $init);\n+    );\n+}\n+\n+#[cfg(stage0)]\n+#[doc(hidden)]\n+#[unstable(feature = \"thread_local_internals\",\n+           reason = \"should not be necessary\",\n+           issue = \"0\")]\n+#[macro_export]\n+#[allow_internal_unstable]\n+macro_rules! __thread_local_inner {\n+    ($t:ty, $init:expr) => {{\n+        fn __init() -> $t { $init }\n+\n+        fn __getit() -> $crate::option::Option<\n+            &'static $crate::cell::UnsafeCell<\n+                $crate::option::Option<$t>>>\n+        {\n+            #[thread_local]\n+            #[cfg(target_thread_local)]\n+            static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\n+                $crate::thread::__FastLocalKeyInner::new();\n+\n+            #[cfg(not(target_thread_local))]\n+            static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n+                $crate::thread::__OsLocalKeyInner::new();\n+\n+            __KEY.get()\n+        }\n+\n+        $crate::thread::LocalKey::new(__getit, __init)\n+    }}\n+}\n+\n /// Indicator of the state of a thread local storage key.\n #[unstable(feature = \"thread_local_state\",\n            reason = \"state querying was recently added\","}]}