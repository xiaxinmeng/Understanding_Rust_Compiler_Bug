{"sha": "b3657f92d1e18770afb3bb873b30abd6e6ee9050", "node_id": "C_kwDOAAsO6NoAKGIzNjU3ZjkyZDFlMTg3NzBhZmIzYmI4NzNiMzBhYmQ2ZTZlZTkwNTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-24T06:32:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-24T06:32:41Z"}, "message": "Rollup merge of #106918 - dtolnay:heapretain, r=the8472\n\nRebuild BinaryHeap on unwind from retain\n\nThis closes the hole identified in https://github.com/rust-lang/rust/issues/71503#issuecomment-1383251315 which had made it possible for the caller to end up with a heap in invalid state. As of #105851, heaps in invalid state are not supposed to exist.", "tree": {"sha": "14e783944bd09c40303fc676413338df930b4377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e783944bd09c40303fc676413338df930b4377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3657f92d1e18770afb3bb873b30abd6e6ee9050", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+FoJCRBK7hj4Ov3rIwAAYQQIAFjSUh2ls0sdFfSlzEzTjuRH\nCioDQhMttV6UPsZuqaPCqqPEdhk12vOtYve4P2weU90itEagyjYzqwi/edkYtLRe\nFO4zwtJ2cBcP3CMUCF878GQw1ahBpUEA9Gy/dG6/sXUsh+sl83k+j6lFRaix1PVO\nBMyE4vmArQ/NraKqFHj2OswM5iJTbjZxjE79LGrBxekjwWeh3OJTzBQx4J+tqzt0\nJ6nFeiReexs3IutrpSlgTock48QWzalPysd9wbjmV5y4sepS2gxw/OmA4Lyiqc3M\nkgrIDVtt5NFDBbhYGRVp5xyI36xNe1MAg6Ih3fa1zy3WYlJdqhjRS3PIEtJaReo=\n=atgF\n-----END PGP SIGNATURE-----\n", "payload": "tree 14e783944bd09c40303fc676413338df930b4377\nparent 8c135eecac6277a1e2b899db898d2a93c78c4a03\nparent fa2ff4d7e5a88bfda186f0f3f621402470745788\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677220361 +0530\ncommitter GitHub <noreply@github.com> 1677220361 +0530\n\nRollup merge of #106918 - dtolnay:heapretain, r=the8472\n\nRebuild BinaryHeap on unwind from retain\n\nThis closes the hole identified in https://github.com/rust-lang/rust/issues/71503#issuecomment-1383251315 which had made it possible for the caller to end up with a heap in invalid state. As of #105851, heaps in invalid state are not supposed to exist.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3657f92d1e18770afb3bb873b30abd6e6ee9050", "html_url": "https://github.com/rust-lang/rust/commit/b3657f92d1e18770afb3bb873b30abd6e6ee9050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3657f92d1e18770afb3bb873b30abd6e6ee9050/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c135eecac6277a1e2b899db898d2a93c78c4a03", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c135eecac6277a1e2b899db898d2a93c78c4a03", "html_url": "https://github.com/rust-lang/rust/commit/8c135eecac6277a1e2b899db898d2a93c78c4a03"}, {"sha": "fa2ff4d7e5a88bfda186f0f3f621402470745788", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2ff4d7e5a88bfda186f0f3f621402470745788", "html_url": "https://github.com/rust-lang/rust/commit/fa2ff4d7e5a88bfda186f0f3f621402470745788"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "f1d0a305d999f1b7e9ab3c85e77dc79d1450fb5b", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b3657f92d1e18770afb3bb873b30abd6e6ee9050/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3657f92d1e18770afb3bb873b30abd6e6ee9050/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=b3657f92d1e18770afb3bb873b30abd6e6ee9050", "patch": "@@ -851,18 +851,30 @@ impl<T: Ord> BinaryHeap<T> {\n     where\n         F: FnMut(&T) -> bool,\n     {\n-        let mut first_removed = self.len();\n+        struct RebuildOnDrop<'a, T: Ord> {\n+            heap: &'a mut BinaryHeap<T>,\n+            first_removed: usize,\n+        }\n+\n+        let mut guard = RebuildOnDrop { first_removed: self.len(), heap: self };\n+\n         let mut i = 0;\n-        self.data.retain(|e| {\n+        guard.heap.data.retain(|e| {\n             let keep = f(e);\n-            if !keep && i < first_removed {\n-                first_removed = i;\n+            if !keep && i < guard.first_removed {\n+                guard.first_removed = i;\n             }\n             i += 1;\n             keep\n         });\n-        // data[0..first_removed] is untouched, so we only need to rebuild the tail:\n-        self.rebuild_tail(first_removed);\n+\n+        impl<'a, T: Ord> Drop for RebuildOnDrop<'a, T> {\n+            fn drop(&mut self) {\n+                // data[..first_removed] is untouched, so we only need to\n+                // rebuild the tail:\n+                self.heap.rebuild_tail(self.first_removed);\n+            }\n+        }\n     }\n }\n "}, {"sha": "500caa35678ab2abc16f92c51e54fa56837f7122", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b3657f92d1e18770afb3bb873b30abd6e6ee9050/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3657f92d1e18770afb3bb873b30abd6e6ee9050/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=b3657f92d1e18770afb3bb873b30abd6e6ee9050", "patch": "@@ -474,6 +474,25 @@ fn test_retain() {\n     assert!(a.is_empty());\n }\n \n+#[test]\n+fn test_retain_catch_unwind() {\n+    let mut heap = BinaryHeap::from(vec![3, 1, 2]);\n+\n+    // Removes the 3, then unwinds out of retain.\n+    let _ = catch_unwind(AssertUnwindSafe(|| {\n+        heap.retain(|e| {\n+            if *e == 1 {\n+                panic!();\n+            }\n+            false\n+        });\n+    }));\n+\n+    // Naively this would be [1, 2] (an invalid heap) if BinaryHeap delegates to\n+    // Vec's retain impl and then does not rebuild the heap after that unwinds.\n+    assert_eq!(heap.into_vec(), [2, 1]);\n+}\n+\n // old binaryheap failed this test\n //\n // Integrity means that all elements are present after a comparison panics,"}]}