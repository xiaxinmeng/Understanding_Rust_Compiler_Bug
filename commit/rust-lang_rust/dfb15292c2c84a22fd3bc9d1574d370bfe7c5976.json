{"sha": "dfb15292c2c84a22fd3bc9d1574d370bfe7c5976", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjE1MjkyYzJjODRhMjJmZDNiYzlkMTU3NGQzNzBiZmU3YzU5NzY=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-10T15:48:39Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-10T15:48:39Z"}, "message": "fix: Type param hover shows correct sized bounds.", "tree": {"sha": "b3c6bf807d898afcb38349d28d3fec3f2904b519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c6bf807d898afcb38349d28d3fec3f2904b519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976", "html_url": "https://github.com/rust-lang/rust/commit/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce3c075ad70b509dbc540bb96016a36011c5451", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce3c075ad70b509dbc540bb96016a36011c5451", "html_url": "https://github.com/rust-lang/rust/commit/9ce3c075ad70b509dbc540bb96016a36011c5451"}], "stats": {"total": 175, "additions": 165, "deletions": 10}, "files": [{"sha": "4ef7d399de3ec078f1d2de9c10586e203d303133", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=dfb15292c2c84a22fd3bc9d1574d370bfe7c5976", "patch": "@@ -5,16 +5,19 @@ use hir_def::{\n     type_ref::{TypeBound, TypeRef},\n     AdtId, GenericDefId,\n };\n-use hir_ty::display::{\n-    write_bounds_like_dyn_trait_with_prefix, write_visibility, HirDisplay, HirDisplayError,\n-    HirFormatter, SizedByDefault,\n+use hir_ty::{\n+    display::{\n+        write_bounds_like_dyn_trait_with_prefix, write_visibility, HirDisplay, HirDisplayError,\n+        HirFormatter, SizedByDefault,\n+    },\n+    Interner, TraitRefExt, WhereClause,\n };\n-use hir_ty::Interner;\n use syntax::ast::{self, NameOwner};\n \n use crate::{\n-    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasVisibility, LifetimeParam,\n-    Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias, TypeParam, Union, Variant,\n+    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasCrate, HasVisibility,\n+    LifetimeParam, Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias, TypeParam, Union,\n+    Variant,\n };\n \n impl HirDisplay for Function {\n@@ -234,12 +237,24 @@ impl HirDisplay for GenericParam {\n impl HirDisplay for TypeParam {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write!(f, \"{}\", self.name(f.db))?;\n+        if f.omit_verbose_types() {\n+            return Ok(());\n+        }\n+\n         let bounds = f.db.generic_predicates_for_param(self.id);\n         let substs = TyBuilder::type_params_subst(f.db, self.id.parent);\n-        let predicates =\n-            bounds.iter().cloned().map(|b| b.substitute(&Interner, &substs)).collect::<Vec<_>>();\n-        if !(predicates.is_empty() || f.omit_verbose_types()) {\n-            let default_sized = SizedByDefault::Sized { anchor: self.module(f.db).krate().id };\n+        let predicates: Vec<_> =\n+            bounds.iter().cloned().map(|b| b.substitute(&Interner, &substs)).collect();\n+        let krate = self.id.parent.krate(f.db).id;\n+        let sized_trait =\n+            f.db.lang_item(krate, \"sized\".into()).and_then(|lang_item| lang_item.as_trait());\n+        let has_only_sized_bound = predicates.iter().all(move |pred| match pred.skip_binders() {\n+            WhereClause::Implemented(it) => Some(it.hir_trait_id()) == sized_trait,\n+            _ => false,\n+        });\n+        let has_only_not_sized_bound = predicates.is_empty();\n+        if !has_only_sized_bound || has_only_not_sized_bound {\n+            let default_sized = SizedByDefault::Sized { anchor: krate };\n             write_bounds_like_dyn_trait_with_prefix(\":\", &predicates, default_sized, f)?;\n         }\n         Ok(())"}, {"sha": "30c695700ced4ffcd757adfdbf6da55be190ff93", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb15292c2c84a22fd3bc9d1574d370bfe7c5976/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=dfb15292c2c84a22fd3bc9d1574d370bfe7c5976", "patch": "@@ -3596,6 +3596,146 @@ impl<T: Trait + ?Sized> Foo<T$0> {}\n         );\n     }\n \n+    mod type_param_sized_bounds {\n+        use super::*;\n+\n+        #[test]\n+        fn single_implicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn single_explicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0: Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn single_relaxed() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0: ?Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: ?Sized\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn multiple_implicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Trait>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn multiple_explicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Trait + Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn multiple_relaxed() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Trait + ?Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait + ?Sized\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn mixed() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0: ?Sized + Sized + Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T\n+                    ```\n+                \"#]],\n+            );\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Sized + ?Sized + Sized + Trait>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait\n+                    ```\n+                \"#]],\n+            );\n+        }\n+    }\n+\n     #[test]\n     fn hover_const_param() {\n         check("}]}