{"sha": "bb0e5254ae59ef135f3feb82964a918b36d6d13d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMGU1MjU0YWU1OWVmMTM1ZjNmZWI4Mjk2NGE5MThiMzZkNmQxM2Q=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-03T19:00:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-03T19:00:24Z"}, "message": "Make runtest::check_debugger_output() handle wildcards at end.", "tree": {"sha": "e504d35f4ef7dfb8b97a0d3ee6d598ee6a3af4a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e504d35f4ef7dfb8b97a0d3ee6d598ee6a3af4a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb0e5254ae59ef135f3feb82964a918b36d6d13d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0e5254ae59ef135f3feb82964a918b36d6d13d", "html_url": "https://github.com/rust-lang/rust/commit/bb0e5254ae59ef135f3feb82964a918b36d6d13d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb0e5254ae59ef135f3feb82964a918b36d6d13d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42303536c23ecc27e5571efd87d7116fff712bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/42303536c23ecc27e5571efd87d7116fff712bb8", "html_url": "https://github.com/rust-lang/rust/commit/42303536c23ecc27e5571efd87d7116fff712bb8"}], "stats": {"total": 98, "additions": 51, "deletions": 47}, "files": [{"sha": "e0b7531f7dcc0348b8e4b5d7fd6ab14b4c4f410a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 51, "deletions": 47, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bb0e5254ae59ef135f3feb82964a918b36d6d13d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0e5254ae59ef135f3feb82964a918b36d6d13d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=bb0e5254ae59ef135f3feb82964a918b36d6d13d", "patch": "@@ -880,58 +880,62 @@ fn cleanup_debug_info_options(options: &Option<String>) -> Option<String> {\n \n fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String]) {\n     let num_check_lines = check_lines.len();\n-    if num_check_lines > 0 {\n+\n+    let mut check_line_index = 0;\n+    for line in debugger_run_result.stdout.lines() {\n+        if check_line_index >= num_check_lines {\n+            break;\n+        }\n+\n+        if check_single_line(line, &(check_lines[check_line_index])[..]) {\n+            check_line_index += 1;\n+        }\n+    }\n+    if check_line_index != num_check_lines && num_check_lines > 0 {\n+        fatal_proc_rec(None, &format!(\"line not found in debugger output: {}\",\n+                                check_lines[check_line_index]),\n+                      debugger_run_result);\n+    }\n+\n+    fn check_single_line(line: &str, check_line: &str) -> bool {\n         // Allow check lines to leave parts unspecified (e.g., uninitialized\n-        // bits in the wrong case of an enum) with the notation \"[...]\".\n-        let check_fragments: Vec<Vec<String>> =\n-            check_lines.iter().map(|s| {\n-                s\n-                 .trim()\n-                 .split(\"[...]\")\n-                 .map(str::to_owned)\n-                 .collect()\n-            }).collect();\n-        // check if each line in props.check_lines appears in the\n-        // output (in order)\n-        let mut i = 0;\n-        for line in debugger_run_result.stdout.lines() {\n-            let mut rest = line.trim();\n-            let mut first = true;\n-            let mut failed = false;\n-            for frag in &check_fragments[i] {\n-                let found = if first {\n-                    if rest.starts_with(frag) {\n-                        Some(0)\n-                    } else {\n-                        None\n-                    }\n-                } else {\n-                    rest.find(frag)\n-                };\n-                match found {\n-                    None => {\n-                        failed = true;\n-                        break;\n-                    }\n-                    Some(i) => {\n-                        rest = &rest[(i + frag.len())..];\n-                    }\n-                }\n-                first = false;\n-            }\n-            if !failed && rest.is_empty() {\n-                i += 1;\n+        // bits in the  wrong case of an enum) with the notation \"[...]\".\n+        let line = line.trim();\n+        let check_line = check_line.trim();\n+        let can_start_anywhere = check_line.starts_with(\"[...]\");\n+        let can_end_anywhere = check_line.ends_with(\"[...]\");\n+\n+        let check_fragments: Vec<&str> = check_line.split(\"[...]\")\n+                                                   .filter(|frag| !frag.is_empty())\n+                                                   .collect();\n+        if check_fragments.is_empty() {\n+            return true;\n+        }\n+\n+        let (mut rest, first_fragment) = if can_start_anywhere {\n+            match line.find(check_fragments[0]) {\n+                Some(pos) => (&line[pos + check_fragments[0].len() ..], 1),\n+                None => return false\n             }\n-            if i == num_check_lines {\n-                // all lines checked\n-                break;\n+        } else {\n+            (line, 0)\n+        };\n+\n+        for fragment_index in first_fragment .. check_fragments.len() {\n+            let current_fragment = check_fragments[fragment_index];\n+            match rest.find(current_fragment) {\n+                Some(pos) => {\n+                    rest = &rest[pos + current_fragment.len() .. ];\n+                }\n+                None => return false\n             }\n         }\n-        if i != num_check_lines {\n-            fatal_proc_rec(None, &format!(\"line not found in debugger output: {}\",\n-                                    check_lines.get(i).unwrap()),\n-                          debugger_run_result);\n+\n+        if !can_end_anywhere && !rest.is_empty() {\n+            return false;\n         }\n+\n+        return true;\n     }\n }\n "}]}