{"sha": "9693b178fcebe3cc27129b7bc1237ee5eb706af8", "node_id": "C_kwDOAAsO6NoAKDk2OTNiMTc4ZmNlYmUzY2MyNzEyOWI3YmMxMjM3ZWU1ZWI3MDZhZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T22:19:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T22:19:29Z"}, "message": "Auto merge of #110252 - matthiaskrgr:rollup-ovaixra, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #109810 (Replace rustdoc-ui/{c,z}-help tests with a stable run-make test )\n - #110035 (fix: ensure bad `#[test]` invocs retain correct AST)\n - #110089 (sync::mpsc: synchronize receiver disconnect with initialization)\n - #110103 (Report overflows gracefully with new solver)\n - #110122 (Fix x check --stage 1 when download-ci-llvm=false)\n - #110133 (Do not use ImplDerivedObligationCause for inherent impl method error reporting)\n - #110135 (Revert \"Don't recover lifetimes/labels containing emojis as character literals\")\n - #110235 (Fix `--extend-css` option)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "febbc3b08f6ad0e8a8e53a456aa5d7661cec1dbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/febbc3b08f6ad0e8a8e53a456aa5d7661cec1dbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9693b178fcebe3cc27129b7bc1237ee5eb706af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9693b178fcebe3cc27129b7bc1237ee5eb706af8", "html_url": "https://github.com/rust-lang/rust/commit/9693b178fcebe3cc27129b7bc1237ee5eb706af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9693b178fcebe3cc27129b7bc1237ee5eb706af8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4087deaccd8bceb458c9610d29744d5f3504c5c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4087deaccd8bceb458c9610d29744d5f3504c5c0", "html_url": "https://github.com/rust-lang/rust/commit/4087deaccd8bceb458c9610d29744d5f3504c5c0"}, {"sha": "b01f0d392864fd581fd6cb4cd1648959bdfbfc5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01f0d392864fd581fd6cb4cd1648959bdfbfc5f", "html_url": "https://github.com/rust-lang/rust/commit/b01f0d392864fd581fd6cb4cd1648959bdfbfc5f"}], "stats": {"total": 1202, "additions": 502, "deletions": 700}, "files": [{"sha": "79d8be2484b5978bf513e3037def717b70848d8d", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -118,34 +118,22 @@ pub fn expand_test_or_bench(\n             }\n         }\n         other => {\n-            cx.struct_span_err(\n-                other.span(),\n-                \"`#[test]` attribute is only allowed on non associated functions\",\n-            )\n-            .emit();\n+            not_testable_error(cx, attr_sp, None);\n             return vec![other];\n         }\n     };\n \n-    // Note: non-associated fn items are already handled by `expand_test_or_bench`\n     let ast::ItemKind::Fn(fn_) = &item.kind else {\n-        let diag = &cx.sess.parse_sess.span_diagnostic;\n-        let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n-        let mut err = match item.kind {\n-            // These were a warning before #92959 and need to continue being that to avoid breaking\n-            // stable user code (#94508).\n-            ast::ItemKind::MacCall(_) => diag.struct_span_warn(attr_sp, msg),\n-            // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n-            // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n-            // reworked in the future to not need it, it'd be nice.\n-            _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+        not_testable_error(cx, attr_sp, Some(&item));\n+        return if is_stmt {\n+            vec![Annotatable::Stmt(P(ast::Stmt {\n+                id: ast::DUMMY_NODE_ID,\n+                span: item.span,\n+                kind: ast::StmtKind::Item(item),\n+            }))]\n+        } else {\n+            vec![Annotatable::Item(item)]\n         };\n-        err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\")\n-            .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n-            .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", \"#[cfg(test)]\", Applicability::MaybeIncorrect)\n-            .emit();\n-\n-        return vec![Annotatable::Item(item)];\n     };\n \n     // has_*_signature will report any errors in the type so compilation\n@@ -398,6 +386,36 @@ pub fn expand_test_or_bench(\n     }\n }\n \n+fn not_testable_error(cx: &ExtCtxt<'_>, attr_sp: Span, item: Option<&ast::Item>) {\n+    let diag = &cx.sess.parse_sess.span_diagnostic;\n+    let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n+    let mut err = match item.map(|i| &i.kind) {\n+        // These were a warning before #92959 and need to continue being that to avoid breaking\n+        // stable user code (#94508).\n+        Some(ast::ItemKind::MacCall(_)) => diag.struct_span_warn(attr_sp, msg),\n+        // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n+        // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n+        // reworked in the future to not need it, it'd be nice.\n+        _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+    };\n+    if let Some(item) = item {\n+        err.span_label(\n+            item.span,\n+            format!(\n+                \"expected a non-associated function, found {} {}\",\n+                item.kind.article(),\n+                item.kind.descr()\n+            ),\n+        );\n+    }\n+    err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\")\n+        .span_suggestion(attr_sp,\n+            \"replace with conditional compilation to make the item only exist when tests are being run\",\n+            \"#[cfg(test)]\",\n+            Applicability::MaybeIncorrect)\n+        .emit();\n+}\n+\n fn get_location_info(cx: &ExtCtxt<'_>, item: &ast::Item) -> (Symbol, usize, usize, usize, usize) {\n     let span = item.ident.span;\n     let (source_file, lo_line, lo_col, hi_line, hi_col) ="}, {"sha": "634d06da7f5dca41df34a13e16be7dc4af7e490a", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -37,7 +37,7 @@ use rustc_metadata::locator;\n use rustc_session::config::{nightly_options, CG_OPTIONS, Z_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n use rustc_session::cstore::MetadataLoader;\n-use rustc_session::getopts;\n+use rustc_session::getopts::{self, Matches};\n use rustc_session::lint::{Lint, LintId};\n use rustc_session::{config, Session};\n use rustc_session::{early_error, early_error_no_abort, early_warn};\n@@ -956,6 +956,46 @@ Available lint options:\n     }\n }\n \n+/// Show help for flag categories shared between rustdoc and rustc.\n+///\n+/// Returns whether a help option was printed.\n+pub fn describe_flag_categories(matches: &Matches) -> bool {\n+    // Handle the special case of -Wall.\n+    let wall = matches.opt_strs(\"W\");\n+    if wall.iter().any(|x| *x == \"all\") {\n+        print_wall_help();\n+        rustc_errors::FatalError.raise();\n+    }\n+\n+    // Don't handle -W help here, because we might first load plugins.\n+    let debug_flags = matches.opt_strs(\"Z\");\n+    if debug_flags.iter().any(|x| *x == \"help\") {\n+        describe_debug_flags();\n+        return true;\n+    }\n+\n+    let cg_flags = matches.opt_strs(\"C\");\n+    if cg_flags.iter().any(|x| *x == \"help\") {\n+        describe_codegen_flags();\n+        return true;\n+    }\n+\n+    if cg_flags.iter().any(|x| *x == \"no-stack-check\") {\n+        early_warn(\n+            ErrorOutputType::default(),\n+            \"the --no-stack-check flag is deprecated and does nothing\",\n+        );\n+    }\n+\n+    if cg_flags.iter().any(|x| *x == \"passes=list\") {\n+        let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n+        get_codegen_backend(&None, backend_name).print_passes();\n+        return true;\n+    }\n+\n+    false\n+}\n+\n fn describe_debug_flags() {\n     println!(\"\\nAvailable options:\\n\");\n     print_flag_list(\"-Z\", config::Z_OPTIONS);\n@@ -966,7 +1006,7 @@ fn describe_codegen_flags() {\n     print_flag_list(\"-C\", config::CG_OPTIONS);\n }\n \n-pub fn print_flag_list<T>(\n+fn print_flag_list<T>(\n     cmdline_opt: &str,\n     flag_list: &[(&'static str, T, &'static str, &'static str)],\n ) {\n@@ -1059,37 +1099,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n         return None;\n     }\n \n-    // Handle the special case of -Wall.\n-    let wall = matches.opt_strs(\"W\");\n-    if wall.iter().any(|x| *x == \"all\") {\n-        print_wall_help();\n-        rustc_errors::FatalError.raise();\n-    }\n-\n-    // Don't handle -W help here, because we might first load plugins.\n-    let debug_flags = matches.opt_strs(\"Z\");\n-    if debug_flags.iter().any(|x| *x == \"help\") {\n-        describe_debug_flags();\n-        return None;\n-    }\n-\n-    let cg_flags = matches.opt_strs(\"C\");\n-\n-    if cg_flags.iter().any(|x| *x == \"help\") {\n-        describe_codegen_flags();\n-        return None;\n-    }\n-\n-    if cg_flags.iter().any(|x| *x == \"no-stack-check\") {\n-        early_warn(\n-            ErrorOutputType::default(),\n-            \"the --no-stack-check flag is deprecated and does nothing\",\n-        );\n-    }\n-\n-    if cg_flags.iter().any(|x| *x == \"passes=list\") {\n-        let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n-        get_codegen_backend(&None, backend_name).print_passes();\n+    if describe_flag_categories(&matches) {\n         return None;\n     }\n "}, {"sha": "3bd1958a08a284349b593f75f9ffc07f1b0b6f8c", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -475,8 +475,6 @@ pub enum StashKey {\n     /// When an invalid lifetime e.g. `'2` should be reinterpreted\n     /// as a char literal in the parser\n     LifetimeIsChar,\n-    /// When an invalid lifetime e.g. `'\ud83d\udc31` contains emoji.\n-    LifetimeContainsEmoji,\n     /// Maybe there was a typo where a comma was forgotten before\n     /// FRU syntax\n     MaybeFruTypo,"}, {"sha": "f736f7a96207e204dc72fccb77c459fe9e9e5a09", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -578,7 +578,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(in super::super) fn report_ambiguity_errors(&self) {\n-        let mut errors = self.fulfillment_cx.borrow_mut().collect_remaining_errors();\n+        let mut errors = self.fulfillment_cx.borrow_mut().collect_remaining_errors(self);\n \n         if !errors.is_empty() {\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);"}, {"sha": "f879ccbb3af1124b75c85ffce6fc78f65e971b47", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Finally, for ambiguity-related errors, we actually want to look\n         // for a parameter that is the source of the inference type left\n         // over in this predicate.\n-        if let traits::FulfillmentErrorCode::CodeAmbiguity = error.code {\n+        if let traits::FulfillmentErrorCode::CodeAmbiguity { .. } = error.code {\n             fallback_param_to_point_at = None;\n             self_param_to_point_at = None;\n             param_to_point_at ="}, {"sha": "4fd778910bacbc53611eb21553cc7c8f6e1e3c11", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1531,23 +1531,18 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics(\n-                        |_idx, span| {\n-                            let misc = traits::ObligationCause::misc(span, self.body_id);\n-                            let parent_trait_pred = ty::Binder::dummy(ty::TraitPredicate {\n-                                trait_ref: ty::TraitRef::from_method(self.tcx, impl_def_id, substs),\n-                                constness: ty::BoundConstness::NotConst,\n-                                polarity: ty::ImplPolarity::Positive,\n-                            });\n-                            misc.derived_cause(parent_trait_pred, |derived| {\n-                                traits::ImplDerivedObligation(Box::new(\n-                                    traits::ImplDerivedObligationCause {\n-                                        derived,\n-                                        impl_or_alias_def_id: impl_def_id,\n-                                        impl_def_predicate_index: None,\n-                                        span,\n-                                    },\n-                                ))\n-                            })\n+                        |idx, span| {\n+                            let code = if span.is_dummy() {\n+                                traits::ExprItemObligation(impl_def_id, self.scope_expr_id, idx)\n+                            } else {\n+                                traits::ExprBindingObligation(\n+                                    impl_def_id,\n+                                    span,\n+                                    self.scope_expr_id,\n+                                    idx,\n+                                )\n+                            };\n+                            ObligationCause::new(self.span, self.body_id, code)\n                         },\n                         self.param_env,\n                         impl_bounds,"}, {"sha": "900a6fa0d8db324932385deb5aa7f9af528bf421", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -661,19 +661,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Find all the requirements that come from a local `impl` block.\n             let mut skip_list: FxHashSet<_> = Default::default();\n             let mut spanned_predicates = FxHashMap::default();\n-            for (p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n-                .iter()\n-                .filter_map(|(p, parent, c)| c.as_ref().map(|c| (p, parent, c)))\n-                .filter_map(|(p, parent, c)| match c.code() {\n-                    ObligationCauseCode::ImplDerivedObligation(data)\n-                        if matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) =>\n-                    {\n-                        Some((p, parent, data.impl_or_alias_def_id, data))\n+            for (p, parent_p, cause) in unsatisfied_predicates {\n+                // Extract the predicate span and parent def id of the cause,\n+                // if we have one.\n+                let (item_def_id, cause_span) = match cause.as_ref().map(|cause| cause.code()) {\n+                    Some(ObligationCauseCode::ImplDerivedObligation(data)) => {\n+                        (data.impl_or_alias_def_id, data.span)\n                     }\n-                    _ => None,\n-                })\n-            {\n-                match self.tcx.hir().get_if_local(impl_def_id) {\n+                    Some(\n+                        ObligationCauseCode::ExprBindingObligation(def_id, span, _, _)\n+                        | ObligationCauseCode::BindingObligation(def_id, span),\n+                    ) => (*def_id, *span),\n+                    _ => continue,\n+                };\n+\n+                // Don't point out the span of `WellFormed` predicates.\n+                if !matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) {\n+                    continue;\n+                };\n+\n+                match self.tcx.hir().get_if_local(item_def_id) {\n                     // Unmet obligation comes from a `derive` macro, point at it once to\n                     // avoid multiple span labels pointing at the same place.\n                     Some(Node::Item(hir::Item {\n@@ -718,7 +725,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 }\n                             });\n                         for param in generics.params {\n-                            if param.span == cause.span && sized_pred {\n+                            if param.span == cause_span && sized_pred {\n                                 let (sp, sugg) = match param.colon_span {\n                                     Some(sp) => (sp.shrink_to_hi(), \" ?Sized +\"),\n                                     None => (param.span.shrink_to_hi(), \": ?Sized\"),\n@@ -741,9 +748,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             (FxHashSet::default(), FxHashSet::default(), Vec::new())\n                         });\n                         entry.2.push(p);\n-                        if cause.span != *item_span {\n-                            entry.0.insert(cause.span);\n-                            entry.1.insert((cause.span, \"unsatisfied trait bound introduced here\"));\n+                        if cause_span != *item_span {\n+                            entry.0.insert(cause_span);\n+                            entry.1.insert((cause_span, \"unsatisfied trait bound introduced here\"));\n                         } else {\n                             if let Some(trait_ref) = of_trait {\n                                 entry.0.insert(trait_ref.path.span);\n@@ -775,9 +782,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let entry = entry.or_insert_with(|| {\n                             (FxHashSet::default(), FxHashSet::default(), Vec::new())\n                         });\n-                        entry.0.insert(cause.span);\n+                        entry.0.insert(cause_span);\n                         entry.1.insert((ident.span, \"\"));\n-                        entry.1.insert((cause.span, \"unsatisfied trait bound introduced here\"));\n+                        entry.1.insert((cause_span, \"unsatisfied trait bound introduced here\"));\n                         entry.2.push(p);\n                     }\n                     Some(node) => unreachable!(\"encountered `{node:?}`\"),"}, {"sha": "2f0a19b46de93ee716213d780f059d4415ee224e", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -38,7 +38,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>>;\n+    fn collect_remaining_errors(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n \n@@ -78,6 +78,6 @@ impl<'tcx, T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n             return errors;\n         }\n \n-        self.collect_remaining_errors()\n+        self.collect_remaining_errors(infcx)\n     }\n }"}, {"sha": "e01b6caf43064caafa94051f9d29128d8ec0799e", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -128,7 +128,11 @@ pub enum FulfillmentErrorCode<'tcx> {\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n     CodeSubtypeError(ExpectedFound<Ty<'tcx>>, TypeError<'tcx>), // always comes from a SubtypePredicate\n     CodeConstEquateError(ExpectedFound<Const<'tcx>>, TypeError<'tcx>),\n-    CodeAmbiguity,\n+    CodeAmbiguity {\n+        /// Overflow reported from the new solver `-Ztrait-solver=next`, which will\n+        /// be reported as an regular error as opposed to a fatal error.\n+        overflow: bool,\n+    },\n }\n \n impl<'tcx, O> Obligation<'tcx, O> {"}, {"sha": "1563d92af0ea771a259bb4bf9c00d3f1b96cf46c", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -46,7 +46,8 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n             super::CodeConstEquateError(ref a, ref b) => {\n                 write!(f, \"CodeConstEquateError({:?}, {:?})\", a, b)\n             }\n-            super::CodeAmbiguity => write!(f, \"Ambiguity\"),\n+            super::CodeAmbiguity { overflow: false } => write!(f, \"Ambiguity\"),\n+            super::CodeAmbiguity { overflow: true } => write!(f, \"Overflow\"),\n             super::CodeCycle(ref cycle) => write!(f, \"Cycle({:?})\", cycle),\n         }\n     }"}, {"sha": "b3f4b5cd5e5a0dda101ebfcb30d0a6dda3886e5c", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -95,7 +95,7 @@ pub enum TokenKind {\n     Literal { kind: LiteralKind, suffix_start: u32 },\n \n     /// \"'a\"\n-    Lifetime { starts_with_number: bool, contains_emoji: bool },\n+    Lifetime { starts_with_number: bool },\n \n     // One-char tokens:\n     /// \";\"\n@@ -632,13 +632,7 @@ impl Cursor<'_> {\n             // If the first symbol is valid for identifier, it can be a lifetime.\n             // Also check if it's a number for a better error reporting (so '0 will\n             // be reported as invalid lifetime and not as unterminated char literal).\n-            // We also have to account for potential `'\ud83d\udc31` emojis to avoid reporting\n-            // it as an unterminated char literal.\n-            is_id_start(self.first())\n-                || self.first().is_digit(10)\n-                // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n-                // 5.0, but Unicode is already newer than this.\n-                || unic_emoji_char::is_emoji(self.first())\n+            is_id_start(self.first()) || self.first().is_digit(10)\n         };\n \n         if !can_be_a_lifetime {\n@@ -651,33 +645,16 @@ impl Cursor<'_> {\n             return Literal { kind, suffix_start };\n         }\n \n-        // Either a lifetime or a character literal.\n+        // Either a lifetime or a character literal with\n+        // length greater than 1.\n \n         let starts_with_number = self.first().is_digit(10);\n-        let mut contains_emoji = false;\n \n-        // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n-        // 5.0, but Unicode is already newer than this.\n-        if unic_emoji_char::is_emoji(self.first()) {\n-            contains_emoji = true;\n-        } else {\n-            // Skip the literal contents.\n-            // First symbol can be a number (which isn't a valid identifier start),\n-            // so skip it without any checks.\n-            self.bump();\n-        }\n-        self.eat_while(|c| {\n-            if is_id_continue(c) {\n-                true\n-            // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n-            // 5.0, but Unicode is already newer than this.\n-            } else if unic_emoji_char::is_emoji(c) {\n-                contains_emoji = true;\n-                true\n-            } else {\n-                false\n-            }\n-        });\n+        // Skip the literal contents.\n+        // First symbol can be a number (which isn't a valid identifier start),\n+        // so skip it without any checks.\n+        self.bump();\n+        self.eat_while(is_id_continue);\n \n         // Check if after skipping literal contents we've met a closing\n         // single quote (which means that user attempted to create a\n@@ -687,7 +664,7 @@ impl Cursor<'_> {\n             let kind = Char { terminated: true };\n             Literal { kind, suffix_start: self.pos_within_token() }\n         } else {\n-            Lifetime { starts_with_number, contains_emoji }\n+            Lifetime { starts_with_number }\n         }\n     }\n "}, {"sha": "e4c1787f2ccef043e002d228346c72b8a2958655", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -235,7 +235,7 @@ fn lifetime() {\n     check_lexing(\n         \"'abc\",\n         expect![[r#\"\n-            Token { kind: Lifetime { starts_with_number: false, contains_emoji: false }, len: 4 }\n+            Token { kind: Lifetime { starts_with_number: false }, len: 4 }\n         \"#]],\n     );\n }"}, {"sha": "9e856c9f2120c2363bb9b936f690cfa1b24c56af", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -223,21 +223,16 @@ impl<'a> StringReader<'a> {\n                     };\n                     token::Literal(token::Lit { kind, symbol, suffix })\n                 }\n-                rustc_lexer::TokenKind::Lifetime { starts_with_number, contains_emoji } => {\n+                rustc_lexer::TokenKind::Lifetime { starts_with_number } => {\n                     // Include the leading `'` in the real identifier, for macro\n                     // expansion purposes. See #12512 for the gory details of why\n                     // this is necessary.\n                     let lifetime_name = self.str_from(start);\n                     if starts_with_number {\n                         let span = self.mk_sp(start, self.pos);\n-                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot start with a number\");\n+                        let mut diag = self.sess.struct_err(\"lifetimes cannot start with a number\");\n                         diag.set_span(span);\n                         diag.stash(span, StashKey::LifetimeIsChar);\n-                    } else if contains_emoji {\n-                        let span = self.mk_sp(start, self.pos);\n-                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot contain emojis\");\n-                        diag.set_span(span);\n-                        diag.stash(span, StashKey::LifetimeContainsEmoji);\n                     }\n                     let ident = Symbol::intern(lifetime_name);\n                     token::Lifetime(ident)"}, {"sha": "32bd10f0beba5101e9ba019bed28e3b72325f708", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1,6 +1,7 @@\n use std::mem;\n \n use rustc_infer::infer::InferCtxt;\n+use rustc_infer::traits::solve::MaybeCause;\n use rustc_infer::traits::Obligation;\n use rustc_infer::traits::{\n     query::NoSolution, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n@@ -41,13 +42,31 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n         self.obligations.push(obligation);\n     }\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n+    fn collect_remaining_errors(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         self.obligations\n             .drain(..)\n-            .map(|obligation| FulfillmentError {\n-                obligation: obligation.clone(),\n-                code: FulfillmentErrorCode::CodeAmbiguity,\n-                root_obligation: obligation,\n+            .map(|obligation| {\n+                let code =\n+                    infcx.probe(|_| match infcx.evaluate_root_goal(obligation.clone().into()) {\n+                        Ok((_, Certainty::Maybe(MaybeCause::Ambiguity), _)) => {\n+                            FulfillmentErrorCode::CodeAmbiguity { overflow: false }\n+                        }\n+                        Ok((_, Certainty::Maybe(MaybeCause::Overflow), _)) => {\n+                            FulfillmentErrorCode::CodeAmbiguity { overflow: true }\n+                        }\n+                        Ok((_, Certainty::Yes, _)) => {\n+                            bug!(\"did not expect successful goal when collecting ambiguity errors\")\n+                        }\n+                        Err(_) => {\n+                            bug!(\"did not expect selection error when collecting ambiguity errors\")\n+                        }\n+                    });\n+\n+                FulfillmentError {\n+                    obligation: obligation.clone(),\n+                    code,\n+                    root_obligation: obligation,\n+                }\n             })\n             .collect()\n     }"}, {"sha": "28967e1cc55b288ea8e22d3fa8e07f805ac05f3f", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -40,13 +40,16 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.obligations.insert(obligation);\n     }\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n+    fn collect_remaining_errors(\n+        &mut self,\n+        _infcx: &InferCtxt<'tcx>,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         // any remaining obligations are errors\n         self.obligations\n             .iter()\n             .map(|obligation| FulfillmentError {\n                 obligation: obligation.clone(),\n-                code: FulfillmentErrorCode::CodeAmbiguity,\n+                code: FulfillmentErrorCode::CodeAmbiguity { overflow: false },\n                 // FIXME - does Chalk have a notation of 'root obligation'?\n                 // This is just for diagnostics, so it's okay if this is wrong\n                 root_obligation: obligation.clone(),"}, {"sha": "5b49684cfcebc7fb17c592004473d57d846eb3b1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -125,6 +125,8 @@ pub trait TypeErrCtxtExt<'tcx> {\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n+    fn report_overflow_no_abort(&self, obligation: PredicateObligation<'tcx>) -> ErrorGuaranteed;\n+\n     fn report_fulfillment_errors(&self, errors: &[FulfillmentError<'tcx>]) -> ErrorGuaranteed;\n \n     fn report_overflow_obligation<T>(\n@@ -602,6 +604,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         );\n     }\n \n+    fn report_overflow_no_abort(&self, obligation: PredicateObligation<'tcx>) -> ErrorGuaranteed {\n+        let obligation = self.resolve_vars_if_possible(obligation);\n+        let mut err = self.build_overflow_error(&obligation.predicate, obligation.cause.span, true);\n+        self.note_obligation_cause(&mut err, &obligation);\n+        self.point_at_returns_when_relevant(&mut err, &obligation);\n+        err.emit()\n+    }\n+\n     fn report_selection_error(\n         &self,\n         mut obligation: PredicateObligation<'tcx>,\n@@ -1658,9 +1668,12 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {\n                 self.report_projection_error(&error.obligation, e);\n             }\n-            FulfillmentErrorCode::CodeAmbiguity => {\n+            FulfillmentErrorCode::CodeAmbiguity { overflow: false } => {\n                 self.maybe_report_ambiguity(&error.obligation);\n             }\n+            FulfillmentErrorCode::CodeAmbiguity { overflow: true } => {\n+                self.report_overflow_no_abort(error.obligation.clone());\n+            }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n                 self.report_mismatched_types(\n                     &error.obligation.cause,"}, {"sha": "26cadab3e9f1acd67c31395c389844f5ce31b4e8", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -133,8 +133,15 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });\n     }\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n-        self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n+    fn collect_remaining_errors(\n+        &mut self,\n+        _infcx: &InferCtxt<'tcx>,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        self.predicates\n+            .to_errors(CodeAmbiguity { overflow: false })\n+            .into_iter()\n+            .map(to_fulfillment_error)\n+            .collect()\n     }\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {"}, {"sha": "406a331a309614c35cde21ec6384bb0c0d1fda38", "filename": "library/std/src/sync/mpmc/list.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -549,6 +549,18 @@ impl<T> Channel<T> {\n         let mut head = self.head.index.load(Ordering::Acquire);\n         let mut block = self.head.block.load(Ordering::Acquire);\n \n+        // If we're going to be dropping messages we need to synchronize with initialization\n+        if head >> SHIFT != tail >> SHIFT {\n+            // The block can be null here only if a sender is in the process of initializing the\n+            // channel while another sender managed to send a message by inserting it into the\n+            // semi-initialized channel and advanced the tail.\n+            // In that case, just wait until it gets initialized.\n+            while block.is_null() {\n+                backoff.spin_heavy();\n+                block = self.head.block.load(Ordering::Acquire);\n+            }\n+        }\n+\n         unsafe {\n             // Drop all messages between head and tail and deallocate the heap-allocated blocks.\n             while head >> SHIFT != tail >> SHIFT {"}, {"sha": "fcaa698317df0946eb60bd8f6572cda3e365f8b5", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -237,7 +237,7 @@ impl Step for Rustc {\n             target,\n             cargo_subcommand(builder.kind),\n         );\n-        rustc_cargo(builder, &mut cargo, target);\n+        rustc_cargo(builder, &mut cargo, target, compiler.stage);\n \n         // For ./x.py clippy, don't run with --all-targets because\n         // linting tests and benchmarks can produce very noisy results\n@@ -323,7 +323,7 @@ impl Step for CodegenBackend {\n         cargo\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n-        rustc_cargo_env(builder, &mut cargo, target);\n+        rustc_cargo_env(builder, &mut cargo, target, compiler.stage);\n \n         let msg = if compiler.host == target {\n             format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, backend)"}, {"sha": "d96e10485c29ea8d4e7534e37939c6315c5a320e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 78, "deletions": 70, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -696,7 +696,7 @@ impl Step for Rustc {\n         ));\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"build\");\n-        rustc_cargo(builder, &mut cargo, target);\n+        rustc_cargo(builder, &mut cargo, target, compiler.stage);\n \n         if builder.config.rust_profile_use.is_some()\n             && builder.config.rust_profile_generate.is_some()\n@@ -813,16 +813,21 @@ impl Step for Rustc {\n     }\n }\n \n-pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection) {\n+pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection, stage: u32) {\n     cargo\n         .arg(\"--features\")\n         .arg(builder.rustc_features(builder.kind))\n         .arg(\"--manifest-path\")\n         .arg(builder.src.join(\"compiler/rustc/Cargo.toml\"));\n-    rustc_cargo_env(builder, cargo, target);\n+    rustc_cargo_env(builder, cargo, target, stage);\n }\n \n-pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection) {\n+pub fn rustc_cargo_env(\n+    builder: &Builder<'_>,\n+    cargo: &mut Cargo,\n+    target: TargetSelection,\n+    stage: u32,\n+) {\n     // Set some configuration variables picked up by build scripts and\n     // the compiler alike\n     cargo\n@@ -867,83 +872,86 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");\n     }\n \n-    // Pass down configuration from the LLVM build into the build of\n-    // rustc_llvm and rustc_codegen_llvm.\n-    //\n     // Note that this is disabled if LLVM itself is disabled or we're in a check\n     // build. If we are in a check build we still go ahead here presuming we've\n     // detected that LLVM is already built and good to go which helps prevent\n     // busting caches (e.g. like #71152).\n-    if builder.config.llvm_enabled()\n-        && (builder.kind != Kind::Check\n-            || crate::llvm::prebuilt_llvm_config(builder, target).is_ok())\n-    {\n-        if builder.is_rust_llvm(target) {\n-            cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-        }\n-        let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n-        cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-            cargo.env(\"CFG_LLVM_ROOT\", s);\n+    if builder.config.llvm_enabled() {\n+        let building_is_expensive = crate::llvm::prebuilt_llvm_config(builder, target).is_err();\n+        // `top_stage == stage` might be false for `check --stage 1`, if we are building the stage 1 compiler\n+        let can_skip_build = builder.kind == Kind::Check && builder.top_stage == stage;\n+        let should_skip_build = building_is_expensive && can_skip_build;\n+        if !should_skip_build {\n+            rustc_llvm_env(builder, cargo, target)\n         }\n+    }\n+}\n \n-        // Some LLVM linker flags (-L and -l) may be needed to link `rustc_llvm`. Its build script\n-        // expects these to be passed via the `LLVM_LINKER_FLAGS` env variable, separated by\n-        // whitespace.\n-        //\n-        // For example:\n-        // - on windows, when `clang-cl` is used with instrumentation, we need to manually add\n-        // clang's runtime library resource directory so that the profiler runtime library can be\n-        // found. This is to avoid the linker errors about undefined references to\n-        // `__llvm_profile_instrument_memop` when linking `rustc_driver`.\n-        let mut llvm_linker_flags = String::new();\n-        if builder.config.llvm_profile_generate && target.contains(\"msvc\") {\n-            if let Some(ref clang_cl_path) = builder.config.llvm_clang_cl {\n-                // Add clang's runtime library directory to the search path\n-                let clang_rt_dir = get_clang_cl_resource_dir(clang_cl_path);\n-                llvm_linker_flags.push_str(&format!(\"-L{}\", clang_rt_dir.display()));\n-            }\n-        }\n+/// Pass down configuration from the LLVM build into the build of\n+/// rustc_llvm and rustc_codegen_llvm.\n+fn rustc_llvm_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection) {\n+    let target_config = builder.config.target_config.get(&target);\n \n-        // The config can also specify its own llvm linker flags.\n-        if let Some(ref s) = builder.config.llvm_ldflags {\n-            if !llvm_linker_flags.is_empty() {\n-                llvm_linker_flags.push_str(\" \");\n-            }\n-            llvm_linker_flags.push_str(s);\n+    if builder.is_rust_llvm(target) {\n+        cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+    }\n+    let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n+    cargo.env(\"LLVM_CONFIG\", &llvm_config);\n+    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+        cargo.env(\"CFG_LLVM_ROOT\", s);\n+    }\n+\n+    // Some LLVM linker flags (-L and -l) may be needed to link `rustc_llvm`. Its build script\n+    // expects these to be passed via the `LLVM_LINKER_FLAGS` env variable, separated by\n+    // whitespace.\n+    //\n+    // For example:\n+    // - on windows, when `clang-cl` is used with instrumentation, we need to manually add\n+    // clang's runtime library resource directory so that the profiler runtime library can be\n+    // found. This is to avoid the linker errors about undefined references to\n+    // `__llvm_profile_instrument_memop` when linking `rustc_driver`.\n+    let mut llvm_linker_flags = String::new();\n+    if builder.config.llvm_profile_generate && target.contains(\"msvc\") {\n+        if let Some(ref clang_cl_path) = builder.config.llvm_clang_cl {\n+            // Add clang's runtime library directory to the search path\n+            let clang_rt_dir = get_clang_cl_resource_dir(clang_cl_path);\n+            llvm_linker_flags.push_str(&format!(\"-L{}\", clang_rt_dir.display()));\n         }\n+    }\n \n-        // Set the linker flags via the env var that `rustc_llvm`'s build script will read.\n+    // The config can also specify its own llvm linker flags.\n+    if let Some(ref s) = builder.config.llvm_ldflags {\n         if !llvm_linker_flags.is_empty() {\n-            cargo.env(\"LLVM_LINKER_FLAGS\", llvm_linker_flags);\n+            llvm_linker_flags.push_str(\" \");\n         }\n+        llvm_linker_flags.push_str(s);\n+    }\n \n-        // Building with a static libstdc++ is only supported on linux right now,\n-        // not for MSVC or macOS\n-        if builder.config.llvm_static_stdcpp\n-            && !target.contains(\"freebsd\")\n-            && !target.contains(\"msvc\")\n-            && !target.contains(\"apple\")\n-            && !target.contains(\"solaris\")\n-        {\n-            let file = compiler_file(\n-                builder,\n-                builder.cxx(target).unwrap(),\n-                target,\n-                CLang::Cxx,\n-                \"libstdc++.a\",\n-            );\n-            cargo.env(\"LLVM_STATIC_STDCPP\", file);\n-        }\n-        if builder.llvm_link_shared() {\n-            cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n-        }\n-        if builder.config.llvm_use_libcxx {\n-            cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n-        }\n-        if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n-            cargo.env(\"LLVM_NDEBUG\", \"1\");\n-        }\n+    // Set the linker flags via the env var that `rustc_llvm`'s build script will read.\n+    if !llvm_linker_flags.is_empty() {\n+        cargo.env(\"LLVM_LINKER_FLAGS\", llvm_linker_flags);\n+    }\n+\n+    // Building with a static libstdc++ is only supported on linux right now,\n+    // not for MSVC or macOS\n+    if builder.config.llvm_static_stdcpp\n+        && !target.contains(\"freebsd\")\n+        && !target.contains(\"msvc\")\n+        && !target.contains(\"apple\")\n+        && !target.contains(\"solaris\")\n+    {\n+        let file =\n+            compiler_file(builder, builder.cxx(target).unwrap(), target, CLang::Cxx, \"libstdc++.a\");\n+        cargo.env(\"LLVM_STATIC_STDCPP\", file);\n+    }\n+    if builder.llvm_link_shared() {\n+        cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+    }\n+    if builder.config.llvm_use_libcxx {\n+        cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n+    }\n+    if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n+        cargo.env(\"LLVM_NDEBUG\", \"1\");\n     }\n }\n \n@@ -1090,7 +1098,7 @@ impl Step for CodegenBackend {\n         cargo\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n-        rustc_cargo_env(builder, &mut cargo, target);\n+        rustc_cargo_env(builder, &mut cargo, target, compiler.stage);\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n "}, {"sha": "9ad98eb57022c968565b54ca6fd12c6fcbdde68d", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -696,7 +696,7 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"-Znormalize-docs\");\n         cargo.rustdocflag(\"--show-type-layout\");\n         cargo.rustdocflag(\"--generate-link-to-definition\");\n-        compile::rustc_cargo(builder, &mut cargo, target);\n+        compile::rustc_cargo(builder, &mut cargo, target, compiler.stage);\n         cargo.arg(\"-Zunstable-options\");\n         cargo.arg(\"-Zskip-rustdoc-fingerprint\");\n "}, {"sha": "cc0e34c6035fdb1f46401b79e861f0d50cf2821e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1064,6 +1064,8 @@ impl Step for RustdocGUI {\n                     cargo.env(\"RUSTDOCFLAGS\", \"-Zunstable-options --generate-link-to-definition\");\n                 } else if entry.file_name() == \"scrape_examples\" {\n                     cargo.arg(\"-Zrustdoc-scrape-examples\");\n+                } else if entry.file_name() == \"extend_css\" {\n+                    cargo.env(\"RUSTDOCFLAGS\", &format!(\"--extend-css extra.css\"));\n                 }\n                 builder.run(&mut cargo);\n             }\n@@ -2146,7 +2148,7 @@ impl Step for Crate {\n                 compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n             }\n             Mode::Rustc => {\n-                compile::rustc_cargo(builder, &mut cargo, target);\n+                compile::rustc_cargo(builder, &mut cargo, target, compiler.stage);\n             }\n             _ => panic!(\"can only test libraries\"),\n         };"}, {"sha": "dfc8042637232a924942f63d790b5cade3749cf7", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -320,10 +320,7 @@ $ rustdoc src/lib.rs --extend-css extra.css\n ```\n \n With this flag, the contents of the files you pass are included at the bottom\n-of Rustdoc's `theme.css` file.\n-\n-While this flag is stable, the contents of `theme.css` are not, so be careful!\n-Updates may break your theme extensions.\n+of the `theme.css` file.\n \n ## `--sysroot`: override the system root\n "}, {"sha": "512c5c85d6a493ab430b47d36cb0d18aeb36b3ad", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -6,7 +6,6 @@ use std::path::PathBuf;\n use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_driver::print_flag_list;\n use rustc_session::config::{\n     self, parse_crate_types_from_list, parse_externs, parse_target_triple, CrateType,\n };\n@@ -328,14 +327,7 @@ impl Options {\n             return Err(0);\n         }\n \n-        let z_flags = matches.opt_strs(\"Z\");\n-        if z_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-Z\", config::Z_OPTIONS);\n-            return Err(0);\n-        }\n-        let c_flags = matches.opt_strs(\"C\");\n-        if c_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-C\", config::CG_OPTIONS);\n+        if rustc_driver::describe_flag_categories(&matches) {\n             return Err(0);\n         }\n "}, {"sha": "daf10e5b88a835815c3225e6fab3b4c764bed910", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -398,6 +398,8 @@ fn run_test(\n     compiler.stdin(Stdio::piped());\n     compiler.stderr(Stdio::piped());\n \n+    debug!(\"compiler invocation for doctest: {:?}\", compiler);\n+\n     let mut child = compiler.spawn().expect(\"Failed to spawn rustc process\");\n     {\n         let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");"}, {"sha": "9133f899af60d79131c1c3969eb418ba53ff295d", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -64,7 +64,7 @@\n     </noscript> {# #}\n     {% if layout.css_file_extension.is_some() %}\n         <link rel=\"stylesheet\" {#+ #}\n-            href=\"{{static_root_path|safe}}theme{{page.resource_suffix}}.css\"> {# #}\n+            href=\"{{page.root_path|safe}}theme{{page.resource_suffix}}.css\"> {# #}\n     {% endif %}\n     {% if !layout.favicon.is_empty() %}\n         <link rel=\"icon\" href=\"{{layout.favicon}}\"> {# #}"}, {"sha": "a2a7d7b3634a9e92a08f38b505a08c8921fa74f3", "filename": "tests/run-make/rustdoc-shared-flags/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frun-make%2Frustdoc-shared-flags%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frun-make%2Frustdoc-shared-flags%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frustdoc-shared-flags%2FMakefile?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,18 @@\n+include ../tools.mk\n+\n+all: z_help c_help list_passes\n+\n+c_help:\n+\t$(RUSTC) -C help > $(TMPDIR)/rustc.c_help.txt\n+\t$(RUSTDOC) -C help > $(TMPDIR)/rustdoc.c_help.txt\n+\t$(DIFF) $(TMPDIR)/rustc.c_help.txt $(TMPDIR)/rustdoc.c_help.txt\n+\n+z_help:\n+\t$(RUSTC) -Z help > $(TMPDIR)/rustc.z_help.txt\n+\t$(RUSTDOC) -Z help > $(TMPDIR)/rustdoc.z_help.txt\n+\t$(DIFF) $(TMPDIR)/rustc.z_help.txt $(TMPDIR)/rustdoc.z_help.txt\n+\n+list_passes:\n+\t$(RUSTC) -C passes=list > $(TMPDIR)/rustc.passes.txt\n+\t$(RUSTDOC) -C passes=list > $(TMPDIR)/rustdoc.passes.txt\n+\t$(DIFF) $(TMPDIR)/rustc.passes.txt $(TMPDIR)/rustdoc.passes.txt"}, {"sha": "fb34469df6c522367014510a653ce46d961eccfb", "filename": "tests/rustdoc-gui/extend-css.goml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fextend-css.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fextend-css.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fextend-css.goml?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,5 @@\n+// Test to ensure that the `--extend-css` option is working as expected.\n+go-to: \"file://\" + |DOC_PATH| + \"/extend_css/index.html\"\n+show-text: true\n+// The text from the `.extend` element should be red.\n+assert-css: (\".extend\", {\"color\": \"rgb(255, 0, 0)\"})"}, {"sha": "d739471a625a423439e48fe5f0bb71c4ce282d55", "filename": "tests/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-filter.goml?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -16,6 +16,7 @@ press-key: \"ArrowDown\"\n press-key: \"ArrowDown\"\n press-key: \"ArrowDown\"\n press-key: \"ArrowDown\"\n+press-key: \"ArrowDown\"\n press-key: \"Enter\"\n // Waiting for the search results to appear...\n wait-for: \"#search-tabs\"\n@@ -41,6 +42,7 @@ press-key: \"ArrowUp\"\n press-key: \"ArrowUp\"\n press-key: \"ArrowUp\"\n press-key: \"ArrowUp\"\n+press-key: \"ArrowUp\"\n press-key: \"Enter\"\n // Waiting for the search results to appear...\n wait-for: \"#search-tabs\""}, {"sha": "520b2c59b0f89079c4170100b6a80f762cfc9eb0", "filename": "tests/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -73,7 +73,7 @@ assert: \"//*[@class='dir-entry' and @open]/*[text()='sub_mod']\"\n // Only \"another_folder\" should be \"open\" in \"lib2\".\n assert: \"//*[@class='dir-entry' and not(@open)]/*[text()='another_mod']\"\n // All other trees should be collapsed.\n-assert-count: (\"//*[@id='source-sidebar']/details[not(text()='lib2') and not(@open)]\", 8)\n+assert-count: (\"//*[@id='source-sidebar']/details[not(text()='lib2') and not(@open)]\", 9)\n \n // We now switch to mobile mode.\n set-window-size: (600, 600)"}, {"sha": "42f3200e9679ace5c9a60cecf5f4a6f11947d3aa", "filename": "tests/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsource-code-page.goml?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -102,7 +102,7 @@ assert: \".source-sidebar-expanded\"\n \n // We check that the first entry of the sidebar is collapsed\n assert-property: (\"#source-sidebar details:first-of-type\", {\"open\": \"false\"})\n-assert-text: (\"#source-sidebar details:first-of-type > summary\", \"http\")\n+assert-text: (\"#source-sidebar details:first-of-type > summary\", \"extend_css\")\n // We now click on it.\n click: \"#source-sidebar details:first-of-type > summary\"\n assert-property: (\"#source-sidebar details:first-of-type\", {\"open\": \"true\"})"}, {"sha": "7101a6f0ffbb96d273ee3da37bd37d80919dce63", "filename": "tests/rustdoc-gui/src/extend_css/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2FCargo.lock?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"extend_css\"\n+version = \"0.1.0\""}, {"sha": "91683fe896488e44924c867217814dc7ed50b2e3", "filename": "tests/rustdoc-gui/src/extend_css/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2FCargo.toml?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"extend_css\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+\n+[lib]\n+path = \"lib.rs\""}, {"sha": "ee7062d9621ab3c3fc8a4967468b3bd5cf32384a", "filename": "tests/rustdoc-gui/src/extend_css/extra.css", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Fextra.css", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Fextra.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Fextra.css?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,3 @@\n+.extend {\n+    color: red !important;\n+}"}, {"sha": "3a3babf8984050298c0ae61364c3e264512b5274", "filename": "tests/rustdoc-gui/src/extend_css/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Flib.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1 @@\n+//! <div class=\"extend\">text in red</div>"}, {"sha": "e166edf8b619cb99d36224b5a00bda7b582b3018", "filename": "tests/rustdoc-ui/c-help.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fc-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fc-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fc-help.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +0,0 @@\n-// check-pass\n-// compile-flags: -Chelp\n-// check-stdout\n-// regex-error-pattern: -C\\s+incremental\n-\n-pub struct Foo;"}, {"sha": "0bd2d73efee531031ef9620d421642c755206a9c", "filename": "tests/rustdoc-ui/c-help.stdout", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fc-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fc-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fc-help.stdout?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,51 +0,0 @@\n-    -C                       ar=val -- this option is deprecated and does nothing\n-    -C               code-model=val -- choose the code model to use (`rustc --print code-models` for details)\n-    -C            codegen-units=val -- divide crate into N units to optimize in parallel\n-    -C       control-flow-guard=val -- use Windows Control Flow Guard (default: no)\n-    -C         debug-assertions=val -- explicitly enable the `cfg(debug_assertions)` directive\n-    -C                debuginfo=val -- debug info emission level (0-2, none, line-directives-only, line-tables-only, limited, or full; default: 0)\n-    -C default-linker-libraries=val -- allow the linker to link its default libraries (default: no)\n-    -C            embed-bitcode=val -- emit bitcode in rlibs (default: yes)\n-    -C           extra-filename=val -- extra data to put in each output filename\n-    -C     force-frame-pointers=val -- force use of the frame pointers\n-    -C      force-unwind-tables=val -- force use of unwind tables\n-    -C              incremental=val -- enable incremental compilation\n-    -C         inline-threshold=val -- set the threshold for inlining a function\n-    -C      instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n-        `=all` (implicit value)\n-        `=except-unused-generics`\n-        `=except-unused-functions`\n-        `=off` (default)\n-    -C                 link-arg=val -- a single extra argument to append to the linker invocation (can be used several times)\n-    -C                link-args=val -- extra arguments to append to the linker invocation (space separated)\n-    -C           link-dead-code=val -- keep dead code at link time (useful for code coverage) (default: no)\n-    -C      link-self-contained=val -- control whether to link Rust provided C objects/libraries or rely\n-        on C toolchain installed in the system\n-    -C                   linker=val -- system linker to link outputs with\n-    -C            linker-flavor=val -- linker flavor\n-    -C        linker-plugin-lto=val -- generate build artifacts that are compatible with linker-based LTO\n-    -C                llvm-args=val -- a list of arguments to pass to LLVM (space separated)\n-    -C                      lto=val -- perform LLVM link-time optimizations\n-    -C                 metadata=val -- metadata to mangle symbol names with\n-    -C    no-prepopulate-passes=val -- give an empty list of passes to the pass manager\n-    -C               no-redzone=val -- disable the use of the redzone\n-    -C           no-stack-check=val -- this option is deprecated and does nothing\n-    -C       no-vectorize-loops=val -- disable loop vectorization optimization passes\n-    -C         no-vectorize-slp=val -- disable LLVM's SLP vectorization pass\n-    -C                opt-level=val -- optimization level (0-3, s, or z; default: 0)\n-    -C          overflow-checks=val -- use overflow checks for integer arithmetic\n-    -C                    panic=val -- panic strategy to compile crate with\n-    -C                   passes=val -- a list of extra LLVM passes to run (space separated)\n-    -C           prefer-dynamic=val -- prefer dynamic linking to static linking (default: no)\n-    -C         profile-generate=val -- compile the program with profiling instrumentation\n-    -C              profile-use=val -- use the given `.profdata` file for profile-guided optimization\n-    -C         relocation-model=val -- control generation of position-independent code (PIC) (`rustc --print relocation-models` for details)\n-    -C                   remark=val -- print remarks for these optimization passes (space separated, or \"all\")\n-    -C                    rpath=val -- set rpath values in libs/exes (default: no)\n-    -C               save-temps=val -- save all temporary output files during compilation (default: no)\n-    -C               soft-float=val -- use soft float ABI (*eabihf targets only) (default: no)\n-    -C          split-debuginfo=val -- how to handle split-debuginfo, a platform-specific option\n-    -C                    strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n-    -C  symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n-    -C               target-cpu=val -- select target processor (`rustc --print target-cpus` for details)\n-    -C           target-feature=val -- target specific attributes. (`rustc --print target-features` for details). This feature is unsafe."}, {"sha": "c7cf841b93707bae0974684fa0b41b75adb0ecbe", "filename": "tests/rustdoc-ui/z-help.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fz-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fz-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +0,0 @@\n-// check-pass\n-// compile-flags: -Zhelp\n-// check-stdout\n-// regex-error-pattern: -Z\\s+self-profile\n-\n-pub struct Foo;"}, {"sha": "72f5f933d8db4ad7c1f48f1c360b0d0cafb4916a", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "removed", "additions": 0, "deletions": 220, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,220 +0,0 @@\n-    -Z                        allow-features=val -- only allow the listed language features to be enabled in code (comma separated)\n-    -Z                     always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n-    -Z                          asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n-    -Z                     assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n-    -Z             assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n-    -Z                    binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n-    -Z                           box-noalias=val -- emit noalias metadata for box (default: yes)\n-    -Z                     branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n-    -Z                         cf-protection=val -- instrument control-flow architecture protection\n-    -Z             cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n-    -Z                       codegen-backend=val -- the backend to use\n-    -Z                           combine-cgu=val -- combine CGUs into a single one\n-    -Z                            crate-attr=val -- inject the given attribute in the crate\n-    -Z              debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n-    -Z                          debug-macros=val -- emit line numbers debug info inside macros (default: no)\n-    -Z               deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n-    -Z                dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n-    -Z                             dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n-    -Z                      diagnostic-width=val -- set the current output width for diagnostic truncation\n-    -Z                               dlltool=val -- import library generation tool (windows-gnu only)\n-    -Z               dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n-    -Z                         drop-tracking=val -- enables drop tracking in generators (default: no)\n-    -Z                     drop-tracking-mir=val -- enables drop tracking on MIR in generators (default: no)\n-    -Z                      dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n-    -Z                        dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n-    -Z                dump-drop-tracking-cfg=val -- dump drop-tracking control-flow graph as a `.dot` file (default: no)\n-    -Z                              dump-mir=val -- dump MIR state to file.\n-        `val` is used to select which passes and functions to dump. For example:\n-        `all` matches all passes and functions,\n-        `foo` matches all passes for functions whose name contains 'foo',\n-        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n-        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n-    -Z                     dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n-    -Z                          dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n-    -Z          dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n-    -Z                     dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n-    -Z                     dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n-    -Z                       dump-mono-stats=val -- output statistics about monomorphization collection\n-    -Z                dump-mono-stats-format=val -- the format to use for -Z dump-mono-stats (`markdown` (default) or `json`)\n-    -Z                         dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n-    -Z                             dylib-lto=val -- enables LTO for dylib crate type\n-    -Z                      emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n-    -Z                         emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n-    -Z             export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries\n-    -Z                 extra-const-ub-checks=val -- turns on more checks to detect const UB, which can be slow (default: no)\n-    -Z                           fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n-    -Z                   flatten-format-args=val -- flatten nested format_args!() and literals into a simplified format_args!() call (default: no)\n-    -Z            force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n-    -Z                                  fuel=val -- set the optimization fuel quota for a crate\n-    -Z                     function-sections=val -- whether each function should go in its own section\n-    -Z                  future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n-    -Z                                gcc-ld=val -- implementation of ld used by cc\n-    -Z                    graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n-    -Z                         graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n-    -Z                             hir-stats=val -- print some statistics about AST and HIR (default: no)\n-    -Z              human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n-    -Z                      identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n-    -Z              incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n-    -Z                      incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n-    -Z            incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n-    -Z                incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n-    -Z                    inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n-    -Z                           inline-llvm=val -- enable LLVM inlining (default: yes)\n-    -Z                            inline-mir=val -- enable MIR inlining (default: no)\n-    -Z             inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n-    -Z                  inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n-    -Z                           input-stats=val -- gather statistics about the input (default: no)\n-    -Z                   instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n-        `=all` (implicit value)\n-        `=except-unused-generics`\n-        `=except-unused-functions`\n-        `=off` (default)\n-    -Z                     instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n-    -Z                       instrument-xray=val -- insert function instrument code for XRay-based tracing (default: no)\n-         Optional extra settings:\n-         `=always`\n-         `=never`\n-         `=ignore-loops`\n-         `=instruction-threshold=N`\n-         `=skip-entry`\n-         `=skip-exit`\n-         Multiple options can be combined with commas.\n-    -Z                     keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n-    -Z                           layout-seed=val -- seed layout randomization\n-    -Z                       link-directives=val -- honor #[link] directives in the compiled crate (default: yes)\n-    -Z                 link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n-    -Z                             link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n-    -Z                          llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n-    -Z                       llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n-    -Z                       location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n-    -Z lower-impl-trait-in-trait-to-assoc-ty=val -- modify the lowering strategy for `impl Trait` in traits so that they are lowered to generic associated types\n-    -Z                                    ls=val -- list the symbols defined by a library crate (default: no)\n-    -Z                       macro-backtrace=val -- show macro backtraces (default: no)\n-    -Z           maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)\n-    -Z                       merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n-    -Z                            meta-stats=val -- gather metadata statistics (default: no)\n-    -Z                        mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n-    -Z                     mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n-    -Z                         mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n-    -Z      mir-pretty-relative-line-numbers=val -- use line numbers relative to the function in mir pretty printing\n-    -Z                       move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n-    -Z                       mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n-    -Z                             nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n-    -Z                         nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n-    -Z                           no-analysis=val -- parse and expand the source, but run no analysis\n-    -Z                            no-codegen=val -- run all passes except codegen; no output\n-    -Z            no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n-    -Z                        no-jump-tables=val -- disable the jump tables and lookup tables that can be generated from a switch case lowering\n-    -Z                         no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n-    -Z                               no-link=val -- compile without linking\n-    -Z                      no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n-    -Z                   no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n-    -Z               no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n-    -Z                        normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n-    -Z                                   oom=val -- panic strategy for out-of-memory handling\n-    -Z                osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n-    -Z                   packed-bundled-libs=val -- change rlib format to store native libraries as archives\n-    -Z                     panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n-    -Z                         panic-in-drop=val -- panic strategy for panics in drops\n-    -Z                            parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n-    -Z                            perf-stats=val -- print some performance-related statistics (default: no)\n-    -Z                                   plt=val -- whether to use the PLT when calling into shared libraries;\n-        only has effect for PIC code on systems with ELF binaries\n-        (default: PLT is disabled if full relro is enabled)\n-    -Z                              polonius=val -- enable polonius-based borrow-checker (default: no)\n-    -Z                          polymorphize=val -- perform polymorphization analysis\n-    -Z                          pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n-    -Z                         pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n-    -Z         precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n-    -Z                            print-fuel=val -- make rustc print the total optimization fuel used by a crate\n-    -Z                     print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n-    -Z                      print-mono-items=val -- print the result of the monomorphization collection pass\n-    -Z                      print-type-sizes=val -- print layout information for each type encountered (default: no)\n-    -Z                  proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n-    -Z         proc-macro-execution-strategy=val -- how to run proc-macro code (default: same-thread)\n-    -Z                               profile=val -- insert profiling code (default: no)\n-    -Z                      profile-closures=val -- profile size of closures\n-    -Z                          profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n-    -Z                    profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n-    -Z                      profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n-    -Z                       query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n-    -Z                      randomize-layout=val -- randomize the layout of types (default: no)\n-    -Z                 relax-elf-relocations=val -- whether ELF relocations can be relaxed\n-    -Z                           relro-level=val -- choose which RELRO level to use\n-    -Z                      remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n-    -Z                   report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n-    -Z                             sanitizer=val -- use a sanitizer\n-    -Z        sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n-    -Z                     sanitizer-recover=val -- enable recovery for selected sanitizers\n-    -Z                saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n-    -Z                          self-profile=val -- run the self profiler and output the raw event data\n-    -Z                  self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n-        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n-        `instructions:u` (retired instructions, userspace-only)\n-        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n-    -Z                   self-profile-events=val -- specify the events recorded by the self profiler;\n-        for example: `-Z self-profile-events=default,query-keys`\n-        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n-                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n-    -Z                        share-generics=val -- make the current crate share its generic instantiations\n-    -Z                             show-span=val -- show spans for compiler debugging (expr|pat|ty)\n-    -Z       simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n-    -Z                            span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n-    -Z                     span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n-    -Z                  split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n-    -Z                      split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n-        (default: `split`)\n-\n-        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n-                 file which is ignored by the linker\n-        `single`: sections which do not require relocation are written into object file but ignored\n-                  by the linker\n-    -Z                    src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n-    -Z                       stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n-    -Z                    strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n-    -Z                                 strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n-    -Z               symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n-    -Z                                 teach=val -- show extended diagnostic help (default: no)\n-    -Z                             temps-dir=val -- the directory the intermediate files are written to\n-    -Z                         terminal-urls=val -- use the OSC 8 hyperlink terminal specification to print hyperlinks in the compiler output\n-    -Z                               thinlto=val -- enable ThinLTO when possible\n-    -Z                         thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n-    -Z                               threads=val -- use a thread pool with N threads\n-    -Z                      time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n-    -Z                           time-passes=val -- measure time of each rustc pass (default: no)\n-    -Z                    time-passes-format=val -- the format to use for -Z time-passes (`text` (default) or `json`)\n-    -Z                 tiny-const-eval-limit=val -- sets a tiny, non-configurable limit for const eval; useful for compiler tests\n-    -Z                             tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n-    -Z                          trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n-    -Z                     track-diagnostics=val -- tracks where in rustc a diagnostic was emitted\n-    -Z                          trait-solver=val -- specify the trait solver mode used by rustc (default: classic)\n-    -Z              translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n-    -Z      translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n-    -Z                        translate-lang=val -- language identifier for diagnostic output\n-    -Z translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n-    -Z                      trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n-    -Z                      treat-err-as-bug=val -- treat error number `val` that occurs as bug\n-    -Z                 trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n-    -Z                              tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n-    -Z                            ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n-    -Z          uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n-    -Z        unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n-    -Z                              unpretty=val -- present the input source, unstable (and less-pretty) variants;\n-        `normal`, `identified`,\n-        `expanded`, `expanded,identified`,\n-        `expanded,hygiene` (with internal representations),\n-        `ast-tree` (raw AST before expansion),\n-        `ast-tree,expanded` (raw AST after expansion),\n-        `hir` (the HIR), `hir,identified`,\n-        `hir,typed` (HIR with types for each node),\n-        `hir-tree` (dump the raw HIR),\n-        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n-    -Z                      unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n-    -Z                      unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n-    -Z                     use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n-    -Z                          validate-mir=val -- validate MIR after each transformation\n-    -Z                               verbose=val -- in general, enable more debug printouts (default: no)\n-    -Z                        verify-llvm-ir=val -- verify LLVM IR (default: no)\n-    -Z          virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n-    -Z                       wasi-exec-model=val -- whether to build a wasi command or reactor"}, {"sha": "d4bc5b67220a0caa280857d0c7d86e47a0bc4ca6", "filename": "tests/ui/higher-rank-trait-bounds/issue-95230.new.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1,9 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0275]: overflow evaluating the requirement `for<'a> &'a mut Bar well-formed`\n   --> $DIR/issue-95230.rs:9:13\n    |\n LL |     for<'a> &'a mut Self:;\n-   |             ^^^^^^^^^^^^ cannot infer type for mutable reference `&'a mut Bar`\n+   |             ^^^^^^^^^^^^\n    |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_95230`)\n note: required by a bound in `Bar`\n   --> $DIR/issue-95230.rs:9:13\n    |\n@@ -15,4 +16,4 @@ LL |     for<'a> &'a mut Self:;\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "f0f86224560100121aad9e2e19551fd0e61bad4b", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,45 +0,0 @@\n-#![allow(unused_labels)]\n-\n-// FIXME(#108019): outdated Unicode table\n-// fn foo() {\n-//     '\ud83e\udd7a loop {\n-//         break\n-//     }\n-// }\n-\n-fn bar() {\n-    '\ud83d\udc31 loop {\n-    //~^ ERROR labeled expression must be followed by `:`\n-    //~| ERROR lifetimes or labels cannot contain emojis\n-        break\n-    }\n-}\n-\n-fn qux() {\n-    'a\ud83d\udc31 loop {\n-    //~^ ERROR labeled expression must be followed by `:`\n-    //~| ERROR lifetimes or labels cannot contain emojis\n-        break\n-    }\n-}\n-\n-fn quux() {\n-    '1\ud83d\udc31 loop {\n-    //~^ ERROR labeled expression must be followed by `:`\n-    //~| ERROR lifetimes or labels cannot start with a number\n-        break\n-    }\n-}\n-\n-fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n-    //~^ ERROR lifetimes or labels cannot contain emojis\n-    //~| ERROR lifetimes or labels cannot contain emojis\n-    &()\n-}\n-\n-fn y() {\n-    'a\ud83d\udc31: loop {}\n-    //~^ ERROR lifetimes or labels cannot contain emojis\n-}\n-\n-fn main() {}"}, {"sha": "be77ffdea349f4296042f760e99923935573e7d8", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.stderr", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,86 +0,0 @@\n-error: labeled expression must be followed by `:`\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n-   |\n-LL |       '\ud83d\udc31 loop {\n-   |       ^--- help: add `:` after the label\n-   |       |\n-   |  _____the label\n-   | |\n-LL | |\n-LL | |\n-LL | |         break\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n-\n-error: labeled expression must be followed by `:`\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n-   |\n-LL |       'a\ud83d\udc31 loop {\n-   |       ^---- help: add `:` after the label\n-   |       |\n-   |  _____the label\n-   | |\n-LL | |\n-LL | |\n-LL | |         break\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n-\n-error: labeled expression must be followed by `:`\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n-   |\n-LL |       '1\ud83d\udc31 loop {\n-   |       ^---- help: add `:` after the label\n-   |       |\n-   |  _____the label\n-   | |\n-LL | |\n-LL | |\n-LL | |         break\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n-   |\n-LL |     '\ud83d\udc31 loop {\n-   |     ^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n-   |\n-LL |     'a\ud83d\udc31 loop {\n-   |     ^^^^\n-\n-error: lifetimes or labels cannot start with a number\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n-   |\n-LL |     '1\ud83d\udc31 loop {\n-   |     ^^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:6\n-   |\n-LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n-   |      ^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:16\n-   |\n-LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n-   |                 ^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:41:5\n-   |\n-LL |     'a\ud83d\udc31: loop {}\n-   |     ^^^^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "81a99ca010e5d2e33f677fc0e0a5b305d102fd23", "filename": "tests/ui/methods/inherent-bound-in-probe.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fmethods%2Finherent-bound-in-probe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fmethods%2Finherent-bound-in-probe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Finherent-bound-in-probe.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,49 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+\n+// Fixes #110131\n+//\n+// The issue is that we were constructing an `ImplDerived` cause code for the\n+// `&'a T: IntoIterator<Item = &'a u8>` obligation for `Helper::new`, which is\n+// incorrect because derived obligations are only expected to come from *traits*.\n+\n+struct SeqBuffer<'a, T>\n+where\n+    &'a T: IntoIterator<Item = &'a u8>,\n+{\n+    iter: <&'a T as IntoIterator>::IntoIter,\n+}\n+\n+struct Helper<'a, T>\n+where\n+    &'a T: IntoIterator<Item = &'a u8>,\n+{\n+    buf: SeqBuffer<'a, T>,\n+}\n+\n+impl<'a, T> Helper<'a, T>\n+where\n+    &'a T: IntoIterator<Item = &'a u8>,\n+{\n+    fn new(sq: &'a T) -> Self {\n+        loop {}\n+    }\n+}\n+\n+struct BitReaderWrapper<T>(T);\n+\n+impl<'a, T> IntoIterator for &'a BitReaderWrapper<T>\n+where\n+    &'a T: IntoIterator<Item = &'a u8>,\n+{\n+    type Item = u32;\n+\n+    type IntoIter = Helper<'a, T>;\n+    //~^ ERROR `Helper<'a, T>` is not an iterator\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        Helper::new(&self.0)\n+        //~^ ERROR overflow evaluating the requirement `&_: IntoIterator`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ff03a7edb05425642d3e4958510501b5fa2607ea", "filename": "tests/ui/methods/inherent-bound-in-probe.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fmethods%2Finherent-bound-in-probe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fmethods%2Finherent-bound-in-probe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Finherent-bound-in-probe.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: `Helper<'a, T>` is not an iterator\n+  --> $DIR/inherent-bound-in-probe.rs:40:21\n+   |\n+LL |     type IntoIter = Helper<'a, T>;\n+   |                     ^^^^^^^^^^^^^ `Helper<'a, T>` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `Helper<'a, T>`\n+note: required by a bound in `std::iter::IntoIterator::IntoIter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+\n+error[E0275]: overflow evaluating the requirement `&_: IntoIterator`\n+  --> $DIR/inherent-bound-in-probe.rs:44:17\n+   |\n+LL |         Helper::new(&self.0)\n+   |                 ^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`inherent_bound_in_probe`)\n+note: required for `&BitReaderWrapper<_>` to implement `IntoIterator`\n+  --> $DIR/inherent-bound-in-probe.rs:34:13\n+   |\n+LL | impl<'a, T> IntoIterator for &'a BitReaderWrapper<T>\n+   |             ^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL | where\n+LL |     &'a T: IntoIterator<Item = &'a u8>,\n+   |                         ------------- unsatisfied trait bound introduced here\n+   = note: 126 redundant requirements hidden\n+   = note: required for `&BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<...>>>>>` to implement `IntoIterator`\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/methods/inherent-bound-in-probe/inherent-bound-in-probe.long-type-hash.txt'\n+note: required by a bound in `Helper<'a, T>`\n+  --> $DIR/inherent-bound-in-probe.rs:25:25\n+   |\n+LL |     &'a T: IntoIterator<Item = &'a u8>,\n+   |                         ^^^^^^^^^^^^^ required by this bound in `Helper<'a, T>`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0275, E0277.\n+For more information about an error, try `rustc --explain E0275`."}, {"sha": "2d82354c62cca706fa9c17c35ed5b5f7e3575034", "filename": "tests/ui/parser/numeric-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1,6 +1,6 @@\n struct S<'1> { s: &'1 usize }\n-//~^ ERROR lifetimes or labels cannot start with a number\n-//~| ERROR lifetimes or labels cannot start with a number\n+//~^ ERROR lifetimes cannot start with a number\n+//~| ERROR lifetimes cannot start with a number\n fn main() {\n     // verify that the parse error doesn't stop type checking\n     let x: usize = \"\";"}, {"sha": "7c1bcb7263171d9b0d06d98feef52bae6501593f", "filename": "tests/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -6,13 +6,13 @@ LL |     let x: usize = \"\";\n    |            |\n    |            expected due to this\n \n-error: lifetimes or labels cannot start with a number\n+error: lifetimes cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:10\n    |\n LL | struct S<'1> { s: &'1 usize }\n    |          ^^\n \n-error: lifetimes or labels cannot start with a number\n+error: lifetimes cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:20\n    |\n LL | struct S<'1> { s: &'1 usize }"}, {"sha": "21fe5bc53b7578b2e0eb521b8b4201d5674c8402", "filename": "tests/ui/test-attrs/issue-109816.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --test\n+\n+fn align_offset_weird_strides() {\n+    #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n+    struct A5(u32, u8);\n+}"}, {"sha": "e6993287555569645afacc17730e1e2322a6c6f4", "filename": "tests/ui/test-attrs/issue-109816.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -0,0 +1,16 @@\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/issue-109816.rs:4:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+LL |\n+LL |     struct A5(u32, u8);\n+   |     ------------------- expected a non-associated function, found a struct\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "2481919b616eda82d7d29752a681b0b8f8d8f22e", "filename": "tests/ui/test-attrs/test-attr-non-associated-functions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1,18 +1,16 @@\n-// #[test] attribute is not allowed on associated functions or methods\n-// reworded error message\n // compile-flags:--test\n \n struct A {}\n \n impl A {\n     #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n     fn new() -> A {\n-        //~^ ERROR `#[test]` attribute is only allowed on non associated functions\n         A {}\n     }\n     #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n     fn recovery_witness() -> A {\n-        //~^ ERROR `#[test]` attribute is only allowed on non associated functions\n         A {}\n     }\n }"}, {"sha": "3e3a951aff3e985575ffeb7f80ffad661086ee5c", "filename": "tests/ui/test-attrs/test-attr-non-associated-functions.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1,20 +1,24 @@\n-error: `#[test]` attribute is only allowed on non associated functions\n-  --> $DIR/test-attr-non-associated-functions.rs:9:5\n-   |\n-LL | /     fn new() -> A {\n-LL | |\n-LL | |         A {}\n-LL | |     }\n-   | |_____^\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-attr-non-associated-functions.rs:6:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n \n-error: `#[test]` attribute is only allowed on non associated functions\n-  --> $DIR/test-attr-non-associated-functions.rs:14:5\n-   |\n-LL | /     fn recovery_witness() -> A {\n-LL | |\n-LL | |         A {}\n-LL | |     }\n-   | |_____^\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-attr-non-associated-functions.rs:11:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a9913fbcfa11ad46bcb8b923d6809a7b6191999", "filename": "tests/ui/test-attrs/test-on-not-fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -2,7 +2,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:3:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | mod test {}\n    | ----------- expected a non-associated function, found a module\n    |\n@@ -15,7 +15,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:6:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / mod loooooooooooooong_teeeeeeeeeest {\n LL | |     /*\n LL | |     this is a comment\n@@ -34,7 +34,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:20:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | extern \"C\" {}\n    | ------------- expected a non-associated function, found an extern block\n    |\n@@ -47,7 +47,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:23:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | trait Foo {}\n    | ------------ expected a non-associated function, found a trait\n    |\n@@ -60,7 +60,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:26:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | impl Foo for i32 {}\n    | ------------------- expected a non-associated function, found an implementation\n    |\n@@ -73,7 +73,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:29:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | const FOO: i32 = -1_i32;\n    | ------------------------ expected a non-associated function, found a constant item\n    |\n@@ -86,7 +86,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:32:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | static BAR: u64 = 10_000_u64;\n    | ----------------------------- expected a non-associated function, found a static item\n    |\n@@ -99,7 +99,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:35:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / enum MyUnit {\n LL | |     Unit,\n LL | | }\n@@ -114,7 +114,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:40:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | struct NewI32(i32);\n    | ------------------- expected a non-associated function, found a struct\n    |\n@@ -127,7 +127,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:43:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / union Spooky {\n LL | |     x: i32,\n LL | |     y: u32,\n@@ -143,7 +143,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:50:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL |   #[derive(Copy, Clone, Debug)]\n LL | / struct MoreAttrs {\n LL | |     a: i32,\n@@ -160,7 +160,7 @@ warning: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:61:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | foo!();\n    | ------- expected a non-associated function, found an item macro invocation\n    |"}, {"sha": "8c029f5179d1f74881e06da7d2c187ead19772e6", "filename": "tests/ui/traits/new-solver/recursive-self-normalization-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -13,7 +13,7 @@ fn needs_bar<S: Bar>() {}\n \n fn test<T: Foo1<Assoc1 = <T as Foo2>::Assoc2> + Foo2<Assoc2 = <T as Foo1>::Assoc1>>() {\n     needs_bar::<T::Assoc1>();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo1>::Assoc1: Bar`\n }\n \n fn main() {}"}, {"sha": "139b0a456801889f10f27849196fd9d900fe1d1a", "filename": "tests/ui/traits/new-solver/recursive-self-normalization-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1,10 +1,10 @@\n-error[E0283]: type annotations needed: cannot satisfy `<T as Foo1>::Assoc1: Bar`\n+error[E0275]: overflow evaluating the requirement `<T as Foo1>::Assoc1: Bar`\n   --> $DIR/recursive-self-normalization-2.rs:15:5\n    |\n LL |     needs_bar::<T::Assoc1>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: cannot satisfy `<T as Foo1>::Assoc1: Bar`\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`recursive_self_normalization_2`)\n note: required by a bound in `needs_bar`\n   --> $DIR/recursive-self-normalization-2.rs:12:17\n    |\n@@ -13,4 +13,4 @@ LL | fn needs_bar<S: Bar>() {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "06d187b5fdf73f1656fac3d1c663b37ccc185711", "filename": "tests/ui/traits/new-solver/recursive-self-normalization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -9,7 +9,7 @@ fn needs_bar<S: Bar>() {}\n \n fn test<T: Foo<Assoc = <T as Foo>::Assoc>>() {\n     needs_bar::<T::Assoc>();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Assoc: Bar`\n }\n \n fn main() {}"}, {"sha": "8e9b9b4b4cec33f829725544786b672f0ae21ba6", "filename": "tests/ui/traits/new-solver/recursive-self-normalization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9693b178fcebe3cc27129b7bc1237ee5eb706af8/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr?ref=9693b178fcebe3cc27129b7bc1237ee5eb706af8", "patch": "@@ -1,10 +1,10 @@\n-error[E0283]: type annotations needed: cannot satisfy `<T as Foo>::Assoc: Bar`\n+error[E0275]: overflow evaluating the requirement `<T as Foo>::Assoc: Bar`\n   --> $DIR/recursive-self-normalization.rs:11:5\n    |\n LL |     needs_bar::<T::Assoc>();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: cannot satisfy `<T as Foo>::Assoc: Bar`\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`recursive_self_normalization`)\n note: required by a bound in `needs_bar`\n   --> $DIR/recursive-self-normalization.rs:8:17\n    |\n@@ -13,4 +13,4 @@ LL | fn needs_bar<S: Bar>() {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0275`."}]}