{"sha": "171baf4c4863f035384c6c63a5f0ce531b01cf9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MWJhZjRjNDg2M2YwMzUzODRjNmM2M2E1ZjBjZTUzMWIwMWNmOWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-29T20:33:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-29T20:33:04Z"}, "message": "Simple identifier lexer", "tree": {"sha": "8dd3885e6d02f64e41275c07bf15491477272182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dd3885e6d02f64e41275c07bf15491477272182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171baf4c4863f035384c6c63a5f0ce531b01cf9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171baf4c4863f035384c6c63a5f0ce531b01cf9d", "html_url": "https://github.com/rust-lang/rust/commit/171baf4c4863f035384c6c63a5f0ce531b01cf9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171baf4c4863f035384c6c63a5f0ce531b01cf9d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15af7ad36c507b17093ba86c393272819ff4b3cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/15af7ad36c507b17093ba86c393272819ff4b3cd", "html_url": "https://github.com/rust-lang/rust/commit/15af7ad36c507b17093ba86c393272819ff4b3cd"}], "stats": {"total": 165, "additions": 146, "deletions": 19}, "files": [{"sha": "063d52211d28112be9ac0d73ce6493e8d119faa2", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/171baf4c4863f035384c6c63a5f0ce531b01cf9d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/171baf4c4863f035384c6c63a5f0ce531b01cf9d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=171baf4c4863f035384c6c63a5f0ce531b01cf9d", "patch": "@@ -4,6 +4,8 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n+unicode-xid = \"0.1.0\"\n+\n serde = \"1.0.26\"\n serde_derive = \"1.0.26\"\n file = \"1.1.1\""}, {"sha": "cda9fe2b2dcc33a55e8f5c7bb41910ccee1ead81", "filename": "src/lexer.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15af7ad36c507b17093ba86c393272819ff4b3cd/src%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15af7ad36c507b17093ba86c393272819ff4b3cd/src%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer.rs?ref=15af7ad36c507b17093ba86c393272819ff4b3cd", "patch": "@@ -1,10 +0,0 @@\n-use {Token, TextUnit};\n-use syntax_kinds::*;\n-\n-pub fn next_token(text: &str) -> Token {\n-    let c = text.chars().next().unwrap();\n-    Token {\n-        kind: IDENT,\n-        len: TextUnit::len_of_char(c),\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "136afb7b80e4f3ae3d949344ae7ee74aab339e7b", "filename": "src/lexer/mod.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=171baf4c4863f035384c6c63a5f0ce531b01cf9d", "patch": "@@ -0,0 +1,64 @@\n+use unicode_xid::UnicodeXID;\n+\n+use {Token, SyntaxKind};\n+use syntax_kinds::*;\n+\n+mod ptr;\n+use self::ptr::Ptr;\n+\n+pub fn next_token(text: &str) -> Token {\n+    assert!(!text.is_empty());\n+    let mut ptr = Ptr::new(text);\n+    let c = ptr.bump().unwrap();\n+    let kind = next_token_inner(c, &mut ptr);\n+    let len = ptr.into_len();\n+    Token { kind, len }\n+}\n+\n+fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n+    // Note: r as in r\" or r#\" is part of a raw string literal,\n+    // b as in b' is part of a byte literal.\n+    // They are not identifiers, and are handled further down.\n+    let ident_start = ident_start(c) && !string_literal_start(c, ptr.next(), ptr.nnext());\n+    if ident_start {\n+        loop {\n+            match ptr.next() {\n+                Some(c) if ident_continue(c) => {\n+                    ptr.bump();\n+                },\n+                _ => break,\n+            }\n+        }\n+        IDENT\n+    } else {\n+        WHITESPACE\n+    }\n+}\n+\n+fn ident_start(c: char) -> bool {\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || c == '_'\n+        || (c > '\\x7f' && UnicodeXID::is_xid_start(c))\n+}\n+\n+fn ident_continue(c: char) -> bool {\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || (c >= '0' && c <= '9')\n+        || c == '_'\n+        || (c > '\\x7f' && UnicodeXID::is_xid_continue(c))\n+}\n+\n+\n+fn string_literal_start(c: char, c1: Option<char>, c2: Option<char>) -> bool {\n+    match (c, c1, c2) {\n+        ('r', Some('\"'), _) |\n+        ('r', Some('#'), _) |\n+        ('b', Some('\"'), _) |\n+        ('b', Some('\\''), _) |\n+        ('b', Some('r'), Some('\"')) |\n+        ('b', Some('r'), Some('#')) => true,\n+        _ => false\n+    }\n+}"}, {"sha": "4638dac213ae284947bf36817d7adea695e33009", "filename": "src/lexer/ptr.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fptr.rs?ref=171baf4c4863f035384c6c63a5f0ce531b01cf9d", "patch": "@@ -0,0 +1,38 @@\n+use {TextUnit};\n+\n+use std::str::Chars;\n+\n+pub(crate) struct Ptr<'s> {\n+    text: &'s str,\n+    len: TextUnit,\n+}\n+\n+impl<'s> Ptr<'s> {\n+    pub fn new(text: &'s str) -> Ptr<'s> {\n+        Ptr { text, len: TextUnit::new(0) }\n+    }\n+\n+    pub fn into_len(self) -> TextUnit {\n+        self.len\n+    }\n+\n+    pub fn next(&self) -> Option<char> {\n+        self.chars().next()\n+    }\n+\n+    pub fn nnext(&self) -> Option<char> {\n+        let mut chars = self.chars();\n+        chars.next()?;\n+        chars.next()\n+    }\n+\n+    pub fn bump(&mut self) -> Option<char> {\n+        let ch = self.chars().next()?;\n+        self.len += TextUnit::len_of_char(ch);\n+        Some(ch)\n+    }\n+\n+    fn chars(&self) -> Chars {\n+        self.text[self.len.0 as usize ..].chars()\n+    }\n+}"}, {"sha": "3b9dbc8f746db5c31b277bed068efae8a25773df", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=171baf4c4863f035384c6c63a5f0ce531b01cf9d", "patch": "@@ -1,3 +1,5 @@\n+extern crate unicode_xid;\n+\n mod text;\n mod tree;\n mod lexer;"}, {"sha": "31e67b45606e9bbaf1e36589b63e08fe1316a7cd", "filename": "src/text.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Ftext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171baf4c4863f035384c6c63a5f0ce531b01cf9d/src%2Ftext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftext.rs?ref=171baf4c4863f035384c6c63a5f0ce531b01cf9d", "patch": "@@ -1,7 +1,10 @@\n use std::fmt;\n+use std::ops;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct TextUnit(u32);\n+pub struct TextUnit(\n+    pub(crate) u32\n+);\n \n impl TextUnit {\n     pub fn len_of_char(c: char) -> TextUnit {\n@@ -30,3 +33,29 @@ impl From<TextUnit> for u32 {\n         tu.0\n     }\n }\n+\n+impl ops::Add<TextUnit> for TextUnit {\n+    type Output = TextUnit;\n+    fn add(self, rhs: TextUnit) -> TextUnit {\n+        TextUnit(self.0 + rhs.0)\n+    }\n+}\n+\n+impl ops::AddAssign<TextUnit> for TextUnit {\n+    fn add_assign(&mut self, rhs: TextUnit) {\n+        self.0 += rhs.0\n+    }\n+}\n+\n+impl ops::Sub<TextUnit> for TextUnit {\n+    type Output = TextUnit;\n+    fn sub(self, rhs: TextUnit) -> TextUnit {\n+        TextUnit(self.0 - rhs.0)\n+    }\n+}\n+\n+impl ops::SubAssign<TextUnit> for TextUnit {\n+    fn sub_assign(&mut self, rhs: TextUnit) {\n+        self.0 -= rhs.0\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "e0b6a1f10904485d9041c5d2b5824fd07c0570c8", "filename": "tests/data/lexer/0001_hello.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/171baf4c4863f035384c6c63a5f0ce531b01cf9d/tests%2Fdata%2Flexer%2F0001_hello.txt", "raw_url": "https://github.com/rust-lang/rust/raw/171baf4c4863f035384c6c63a5f0ce531b01cf9d/tests%2Fdata%2Flexer%2F0001_hello.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0001_hello.txt?ref=171baf4c4863f035384c6c63a5f0ce531b01cf9d", "patch": "@@ -1,3 +1,3 @@\n IDENT 5\n WHITESPACE 1\n-IDENT 5\n\\ No newline at end of file\n+IDENT 5"}, {"sha": "a3c8916b1e09103b8750dd465d90c016a4760fd0", "filename": "tests/lexer.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/171baf4c4863f035384c6c63a5f0ce531b01cf9d/tests%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171baf4c4863f035384c6c63a5f0ce531b01cf9d/tests%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flexer.rs?ref=171baf4c4863f035384c6c63a5f0ce531b01cf9d", "patch": "@@ -41,13 +41,15 @@ fn lexer_test_case(path: &Path) {\n         dump_tokens(&tokens)\n     };\n     let expected = file::get_text(&path.with_extension(\"txt\")).unwrap();\n-\n-    assert_diff!(\n-        expected.as_str(),\n-        actual.as_str(),\n-        \"\\n\",\n-        0\n-    )\n+    let expected = expected.as_str();\n+    let actual = actual.as_str();\n+    if expected == actual {\n+        return\n+    }\n+    if expected.trim() == actual.trim() {\n+        panic!(\"Whitespace difference!\")\n+    }\n+    assert_diff!(expected, actual, \"\\n\", 0)\n }\n \n fn tokenize(text: &str) -> Vec<Token> {"}]}