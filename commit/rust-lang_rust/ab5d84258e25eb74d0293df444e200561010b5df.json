{"sha": "ab5d84258e25eb74d0293df444e200561010b5df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWQ4NDI1OGUyNWViNzRkMDI5M2RmNDQ0ZTIwMDU2MTAxMGI1ZGY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-11-18T04:23:44Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-21T00:39:30Z"}, "message": "Add PosixPath and WindowsPath constructor fns", "tree": {"sha": "7f89decba3c6f3731f7a00a2cbccd6abb246baac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f89decba3c6f3731f7a00a2cbccd6abb246baac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5d84258e25eb74d0293df444e200561010b5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d84258e25eb74d0293df444e200561010b5df", "html_url": "https://github.com/rust-lang/rust/commit/ab5d84258e25eb74d0293df444e200561010b5df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d84258e25eb74d0293df444e200561010b5df/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a552a628f13d8325f680327645ee0f446d250c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a552a628f13d8325f680327645ee0f446d250c", "html_url": "https://github.com/rust-lang/rust/commit/e1a552a628f13d8325f680327645ee0f446d250c"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "12056d3571ec82dc1b7daea9890345ffe147e66f", "filename": "src/libcore/path.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d84258e25eb74d0293df444e200561010b5df/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d84258e25eb74d0293df444e200561010b5df/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=ab5d84258e25eb74d0293df444e200561010b5df", "patch": "@@ -17,14 +17,22 @@ pub struct WindowsPath {\n     components: ~[~str],\n }\n \n+pub pure fn WindowsPath(s: &str) -> WindowsPath {\n+    from_str(s)\n+}\n+\n pub struct PosixPath {\n     is_absolute: bool,\n     components: ~[~str],\n }\n \n+pub pure fn PosixPath(s: &str) -> PosixPath {\n+    from_str(s)\n+}\n+\n pub trait GenericPath {\n \n-    static pure fn from_str((&str)) -> self;\n+    static pure fn from_str(&str) -> self;\n \n     pure fn dirname() -> ~str;\n     pure fn filename() -> Option<~str>;\n@@ -49,15 +57,15 @@ pub type Path = WindowsPath;\n \n #[cfg(windows)]\n pub pure fn Path(s: &str) -> Path {\n-    from_str::<WindowsPath>(s)\n+    WindowsPath(s)\n }\n \n #[cfg(unix)]\n pub type Path = PosixPath;\n \n #[cfg(unix)]\n pub pure fn Path(s: &str) -> Path {\n-    from_str::<PosixPath>(s)\n+    PosixPath(s)\n }\n \n impl PosixPath : ToStr {\n@@ -166,7 +174,7 @@ impl PosixPath : GenericPath {\n     }\n \n     pure fn with_dirname(d: &str) -> PosixPath {\n-        let dpath = from_str::<PosixPath>(d);\n+        let dpath = PosixPath(d);\n         match self.filename() {\n           Some(ref f) => dpath.push(*f),\n           None => move dpath\n@@ -365,7 +373,7 @@ impl WindowsPath : GenericPath {\n     }\n \n     pure fn with_dirname(d: &str) -> WindowsPath {\n-        let dpath = from_str::<WindowsPath>(d);\n+        let dpath = WindowsPath(d);\n         match self.filename() {\n           Some(ref f) => dpath.push(*f),\n           None => move dpath\n@@ -493,12 +501,12 @@ pub pure fn normalize(components: &[~str]) -> ~[~str] {\n #[test]\n fn test_double_slash_collapsing()\n {\n-    let path = from_str::<PosixPath>(\"tmp/\");\n+    let path = PosixPath(\"tmp/\");\n     let path = path.push(\"/hmm\");\n     let path = path.normalize();\n     assert ~\"tmp/hmm\" == path.to_str();\n \n-    let path = from_str::<WindowsPath>(\"tmp/\");\n+    let path = WindowsPath(\"tmp/\");\n     let path = path.push(\"/hmm\");\n     let path = path.normalize();\n     assert ~\"tmp\\\\hmm\" == path.to_str();\n@@ -507,7 +515,7 @@ fn test_double_slash_collapsing()\n mod posix {\n \n     #[cfg(test)]\n-    fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n+    fn mk(s: &str) -> PosixPath { PosixPath(s) }\n \n     #[cfg(test)]\n     fn t(wp: &PosixPath, s: &str) {\n@@ -661,7 +669,7 @@ mod windows {\n \n     #[test]\n     fn test_windows_paths() {\n-        fn mk(s: &str) -> WindowsPath { from_str::<WindowsPath>(s) }\n+        fn mk(s: &str) -> WindowsPath { WindowsPath(s) }\n         fn t(wp: &WindowsPath, s: &str) {\n             let ss = wp.to_str();\n             let sss = str::from_slice(s);\n@@ -705,7 +713,7 @@ mod windows {\n     }\n \n     #[cfg(test)]\n-    fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n+    fn mk(s: &str) -> PosixPath { PosixPath(s) }\n \n     #[test]\n     fn test_filetype_foo_bar() {"}]}