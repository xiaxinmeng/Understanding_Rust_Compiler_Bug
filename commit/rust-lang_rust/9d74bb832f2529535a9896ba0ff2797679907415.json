{"sha": "9d74bb832f2529535a9896ba0ff2797679907415", "node_id": "C_kwDOAAsO6NoAKDlkNzRiYjgzMmYyNTI5NTM1YTk4OTZiYTBmZjI3OTc2Nzk5MDc0MTU", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-16T12:44:14Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-16T12:44:14Z"}, "message": "comments feedback", "tree": {"sha": "622f3a55aa128070bfcacab7f281fef789921436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622f3a55aa128070bfcacab7f281fef789921436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d74bb832f2529535a9896ba0ff2797679907415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d74bb832f2529535a9896ba0ff2797679907415", "html_url": "https://github.com/rust-lang/rust/commit/9d74bb832f2529535a9896ba0ff2797679907415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d74bb832f2529535a9896ba0ff2797679907415/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "644ee8d2507f80dab7408c90102517e8c9321b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/644ee8d2507f80dab7408c90102517e8c9321b5e", "html_url": "https://github.com/rust-lang/rust/commit/644ee8d2507f80dab7408c90102517e8c9321b5e"}], "stats": {"total": 76, "additions": 49, "deletions": 27}, "files": [{"sha": "e40530a6dd67af6c4c81b6ee2431492c6a9355a8", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9d74bb832f2529535a9896ba0ff2797679907415/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d74bb832f2529535a9896ba0ff2797679907415/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=9d74bb832f2529535a9896ba0ff2797679907415", "patch": "@@ -1009,31 +1009,35 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let ast::TyKind::Array(_, len) = &ty.kind {\n-            self.check_unused_delims_expr(\n-                cx,\n-                &len.value,\n-                UnusedDelimsCtx::ArrayLenExpr,\n-                false,\n-                None,\n-                None,\n-            );\n-        }\n-        if let ast::TyKind::Paren(r) = &ty.kind {\n-            match &r.kind {\n-                ast::TyKind::TraitObject(..) => {}\n-                ast::TyKind::BareFn(b)\n-                    if self.with_self_ty_parens && b.generic_params.len() > 0 => {}\n-                ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n-                _ => {\n-                    let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n-                        Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n-                    } else {\n-                        None\n-                    };\n-                    self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n+        match &ty.kind {\n+            ast::TyKind::Array(_, len) => {\n+                self.check_unused_delims_expr(\n+                    cx,\n+                    &len.value,\n+                    UnusedDelimsCtx::ArrayLenExpr,\n+                    false,\n+                    None,\n+                    None,\n+                );\n+            }\n+            ast::TyKind::Paren(r) => {\n+                match &r.kind {\n+                    ast::TyKind::TraitObject(..) => {}\n+                    ast::TyKind::BareFn(b)\n+                        if self.with_self_ty_parens && b.generic_params.len() > 0 => {}\n+                    ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n+                    _ => {\n+                        let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n+                            Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n+                        } else {\n+                            None\n+                        };\n+                        self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n+                    }\n                 }\n+                self.with_self_ty_parens = false;\n             }\n+            _ => {}\n         }\n     }\n \n@@ -1055,7 +1059,7 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn exit_where_predicate(&mut self, _: &EarlyContext<'_>, _: &ast::WherePredicate) {\n-        self.with_self_ty_parens = false;\n+        assert!(!self.with_self_ty_parens);\n     }\n }\n "}, {"sha": "7e4e09473493a2cff2b723c4d43ba54502d6b59a", "filename": "tests/ui/lint/unused/issue-105061-should-lint.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d74bb832f2529535a9896ba0ff2797679907415/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d74bb832f2529535a9896ba0ff2797679907415/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs?ref=9d74bb832f2529535a9896ba0ff2797679907415", "patch": "@@ -6,12 +6,18 @@ struct Inv<'a>(&'a mut &'a ());\n trait Trait<'a> {}\n impl<'b> Trait<'b> for for<'a> fn(Inv<'a>) {}\n \n-\n fn with_bound()\n where\n     for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>, //~ ERROR unnecessary parentheses around type\n {}\n \n+trait Hello<T> {}\n+fn with_dyn_bound<T>()\n+where\n+    (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T> //~ ERROR unnecessary parentheses around type\n+{}\n+\n fn main() {\n     with_bound();\n+    with_dyn_bound();\n }"}, {"sha": "e591f1ffb6b897f6e8daeff38c32376301d2505a", "filename": "tests/ui/lint/unused/issue-105061-should-lint.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d74bb832f2529535a9896ba0ff2797679907415/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d74bb832f2529535a9896ba0ff2797679907415/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr?ref=9d74bb832f2529535a9896ba0ff2797679907415", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary parentheses around type\n-  --> $DIR/issue-105061-should-lint.rs:12:13\n+  --> $DIR/issue-105061-should-lint.rs:11:13\n    |\n LL |     for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>,\n    |             ^                   ^\n@@ -16,5 +16,17 @@ LL -     for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>,\n LL +     for<'b> for<'a> fn(Inv<'a>): Trait<'b>,\n    |\n \n-error: aborting due to previous error\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-should-lint.rs:17:16\n+   |\n+LL |     (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T>\n+   |                ^                  ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T>\n+LL +     (dyn Hello<for<'b> fn(&'b ())>): Hello<T>\n+   |\n+\n+error: aborting due to 2 previous errors\n "}]}