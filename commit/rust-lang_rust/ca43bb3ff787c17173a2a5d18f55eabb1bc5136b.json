{"sha": "ca43bb3ff787c17173a2a5d18f55eabb1bc5136b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDNiYjNmZjc4N2MxNzE3M2EyYTVkMThmNTVlYWJiMWJjNTEzNmI=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-11T12:57:26Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-11T12:57:26Z"}, "message": "Updated the `add_missing_impl_members` to use the shared utility.", "tree": {"sha": "32578f7283c12239b809cefc2c66f2bf142ae167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32578f7283c12239b809cefc2c66f2bf142ae167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b", "html_url": "https://github.com/rust-lang/rust/commit/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f242cb4f9ee49427b03af21c31239e8132ac96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f242cb4f9ee49427b03af21c31239e8132ac96", "html_url": "https://github.com/rust-lang/rust/commit/f0f242cb4f9ee49427b03af21c31239e8132ac96"}], "stats": {"total": 49, "additions": 15, "deletions": 34}, "files": [{"sha": "495493a5280a6d30be8893671b9132fe77e17899", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=ca43bb3ff787c17173a2a5d18f55eabb1bc5136b", "patch": "@@ -7,6 +7,7 @@ use ra_syntax::{\n use crate::{\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n     Assist, AssistCtx, AssistId,\n+    utils::{get_missing_impl_items, resolve_target_trait},\n };\n \n #[derive(PartialEq)]\n@@ -103,11 +104,9 @@ fn add_missing_impl_members_inner(\n     let impl_node = ctx.find_node_at_offset::<ast::ImplBlock>()?;\n     let impl_item_list = impl_node.item_list()?;\n \n-    let (trait_, trait_def) = {\n-        let analyzer = ctx.source_analyzer(impl_node.syntax(), None);\n+    let analyzer = ctx.source_analyzer(impl_node.syntax(), None);\n \n-        resolve_target_trait_def(ctx.db, &analyzer, &impl_node)?\n-    };\n+    let trait_ = resolve_target_trait(ctx.db, &analyzer, &impl_node)?;\n \n     let def_name = |item: &ast::ImplItem| -> Option<SmolStr> {\n         match item {\n@@ -118,20 +117,23 @@ fn add_missing_impl_members_inner(\n         .map(|it| it.text().clone())\n     };\n \n-    let trait_items = trait_def.item_list()?.impl_items();\n-    let impl_items = impl_item_list.impl_items().collect::<Vec<_>>();\n-\n-    let missing_items: Vec<_> = trait_items\n-        .filter(|t| def_name(t).is_some())\n+    let missing_items = get_missing_impl_items(ctx.db, &analyzer, &impl_node)\n+        .iter()\n+        .map(|i| match i {\n+            hir::AssocItem::Function(i) => ast::ImplItem::FnDef(i.source(ctx.db).value),\n+            hir::AssocItem::TypeAlias(i) => ast::ImplItem::TypeAliasDef(i.source(ctx.db).value),\n+            hir::AssocItem::Const(i) => ast::ImplItem::ConstDef(i.source(ctx.db).value),\n+        })\n+        .filter(|t| def_name(&t).is_some())\n         .filter(|t| match t {\n             ast::ImplItem::FnDef(def) => match mode {\n                 AddMissingImplMembersMode::DefaultMethodsOnly => def.body().is_some(),\n                 AddMissingImplMembersMode::NoDefaultMethods => def.body().is_none(),\n-            },\n+            }\n             _ => mode == AddMissingImplMembersMode::NoDefaultMethods,\n         })\n-        .filter(|t| impl_items.iter().all(|i| def_name(i) != def_name(t)))\n-        .collect();\n+        .collect::<Vec<_>>();\n+\n     if missing_items.is_empty() {\n         return None;\n     }\n@@ -177,27 +179,6 @@ fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     }\n }\n \n-/// Given an `ast::ImplBlock`, resolves the target trait (the one being\n-/// implemented) to a `ast::TraitDef`.\n-fn resolve_target_trait_def(\n-    db: &impl HirDatabase,\n-    analyzer: &hir::SourceAnalyzer,\n-    impl_block: &ast::ImplBlock,\n-) -> Option<(hir::Trait, ast::TraitDef)> {\n-    let ast_path = impl_block\n-        .target_trait()\n-        .map(|it| it.syntax().clone())\n-        .and_then(ast::PathType::cast)?\n-        .path()?;\n-\n-    match analyzer.resolve_path(db, &ast_path) {\n-        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => {\n-            Some((def, def.source(db).value))\n-        }\n-        _ => None,\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "7628933fba353b88a7fa9f04cf8397c49c424a0c", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca43bb3ff787c17173a2a5d18f55eabb1bc5136b/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=ca43bb3ff787c17173a2a5d18f55eabb1bc5136b", "patch": "@@ -62,7 +62,7 @@ pub fn get_missing_impl_items(\n     })\n }\n \n-fn resolve_target_trait(\n+pub(crate) fn resolve_target_trait(\n     db: &impl HirDatabase,\n     analyzer: &hir::SourceAnalyzer,\n     impl_block: &ast::ImplBlock,"}]}