{"sha": "07bcd111f8d3b60dbc3722215c78f25372a11c6f", "node_id": "C_kwDOAAsO6NoAKDA3YmNkMTExZjhkM2I2MGRiYzM3MjIyMTVjNzhmMjUzNzJhMTFjNmY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-11T13:38:07Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-11T13:38:07Z"}, "message": "Return ModuleCodegenResult from reuse_workproduct_for_cgu", "tree": {"sha": "a355fa7ae30fd0dcf20a89af2e0d47b762464c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a355fa7ae30fd0dcf20a89af2e0d47b762464c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07bcd111f8d3b60dbc3722215c78f25372a11c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07bcd111f8d3b60dbc3722215c78f25372a11c6f", "html_url": "https://github.com/rust-lang/rust/commit/07bcd111f8d3b60dbc3722215c78f25372a11c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07bcd111f8d3b60dbc3722215c78f25372a11c6f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "html_url": "https://github.com/rust-lang/rust/commit/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "6f1732f9707109bf6e0824f9150bd063b53a9228", "filename": "src/driver/aot.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/07bcd111f8d3b60dbc3722215c78f25372a11c6f/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bcd111f8d3b60dbc3722215c78f25372a11c6f/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=07bcd111f8d3b60dbc3722215c78f25372a11c6f", "patch": "@@ -79,11 +79,7 @@ fn emit_module(\n     )\n }\n \n-fn reuse_workproduct_for_cgu(\n-    tcx: TyCtxt<'_>,\n-    cgu: &CodegenUnit<'_>,\n-    work_products: &mut FxHashMap<WorkProductId, WorkProduct>,\n-) -> CompiledModule {\n+fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCodegenResult {\n     let work_product = cgu.previous_work_product(tcx);\n     let obj_out = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n     let source_file = rustc_incremental::in_incr_comp_dir_sess(\n@@ -99,15 +95,16 @@ fn reuse_workproduct_for_cgu(\n         ));\n     }\n \n-    work_products.insert(cgu.work_product_id(), work_product);\n-\n-    CompiledModule {\n-        name: cgu.name().to_string(),\n-        kind: ModuleKind::Regular,\n-        object: Some(obj_out),\n-        dwarf_object: None,\n-        bytecode: None,\n-    }\n+    ModuleCodegenResult(\n+        CompiledModule {\n+            name: cgu.name().to_string(),\n+            kind: ModuleKind::Regular,\n+            object: Some(obj_out),\n+            dwarf_object: None,\n+            bytecode: None,\n+        },\n+        Some((cgu.work_product_id(), work_product)),\n+    )\n }\n \n fn module_codegen(\n@@ -215,26 +212,31 @@ pub(crate) fn run_aot(\n     let modules = super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n         cgus.iter()\n             .map(|cgu| {\n-                let cgu_reuse = determine_cgu_reuse(tcx, cgu);\n+                let cgu_reuse = if backend_config.disable_incr_cache {\n+                    CguReuse::No\n+                } else {\n+                    determine_cgu_reuse(tcx, cgu)\n+                };\n                 tcx.sess.cgu_reuse_tracker.set_actual_reuse(cgu.name().as_str(), cgu_reuse);\n \n-                match cgu_reuse {\n-                    _ if backend_config.disable_incr_cache => {}\n-                    CguReuse::No => {}\n-                    CguReuse::PreLto => {\n-                        return reuse_workproduct_for_cgu(tcx, &*cgu, &mut work_products);\n+                let module_codegen_result = match cgu_reuse {\n+                    CguReuse::No => {\n+                        let dep_node = cgu.codegen_dep_node(tcx);\n+                        tcx.dep_graph\n+                            .with_task(\n+                                dep_node,\n+                                tcx,\n+                                (backend_config.clone(), cgu.name()),\n+                                module_codegen,\n+                                Some(rustc_middle::dep_graph::hash_result),\n+                            )\n+                            .0\n                     }\n+                    CguReuse::PreLto => reuse_workproduct_for_cgu(tcx, &*cgu),\n                     CguReuse::PostLto => unreachable!(),\n-                }\n+                };\n \n-                let dep_node = cgu.codegen_dep_node(tcx);\n-                let (ModuleCodegenResult(module, work_product), _) = tcx.dep_graph.with_task(\n-                    dep_node,\n-                    tcx,\n-                    (backend_config.clone(), cgu.name()),\n-                    module_codegen,\n-                    Some(rustc_middle::dep_graph::hash_result),\n-                );\n+                let ModuleCodegenResult(module, work_product) = module_codegen_result;\n \n                 if let Some((id, product)) = work_product {\n                     work_products.insert(id, product);"}]}