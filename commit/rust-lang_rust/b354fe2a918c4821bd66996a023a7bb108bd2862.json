{"sha": "b354fe2a918c4821bd66996a023a7bb108bd2862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNTRmZTJhOTE4YzQ4MjFiZDY2OTk2YTAyM2E3YmIxMDhiZDI4NjI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-10T17:46:04Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-10T19:23:16Z"}, "message": "report local ambiguity errors earlier", "tree": {"sha": "49bf4562ed9493e3631305ab866bf3eb74ba754f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49bf4562ed9493e3631305ab866bf3eb74ba754f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b354fe2a918c4821bd66996a023a7bb108bd2862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b354fe2a918c4821bd66996a023a7bb108bd2862", "html_url": "https://github.com/rust-lang/rust/commit/b354fe2a918c4821bd66996a023a7bb108bd2862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b354fe2a918c4821bd66996a023a7bb108bd2862/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d704fc9196c9c80e1c29a04ef02d1165ad2cd760", "url": "https://api.github.com/repos/rust-lang/rust/commits/d704fc9196c9c80e1c29a04ef02d1165ad2cd760", "html_url": "https://github.com/rust-lang/rust/commit/d704fc9196c9c80e1c29a04ef02d1165ad2cd760"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "7cc9b0e1dc2f74c48b93f3e3ffe6e140029b4ff3", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b354fe2a918c4821bd66996a023a7bb108bd2862/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354fe2a918c4821bd66996a023a7bb108bd2862/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=b354fe2a918c4821bd66996a023a7bb108bd2862", "patch": "@@ -134,14 +134,16 @@ fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n \n enum parse_result {\n     success(hashmap<ident, @named_match>),\n-    failure(codemap::span, ~str)\n+    failure(codemap::span, ~str),\n+    error(codemap::span, ~str)\n }\n \n fn parse_or_else(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n                  ms: ~[matcher]) -> hashmap<ident, @named_match> {\n     match parse(sess, cfg, rdr, ms) {\n       success(m) => m,\n-      failure(sp, str) => sess.span_diagnostic.span_fatal(sp, str)\n+      failure(sp, str) => sess.span_diagnostic.span_fatal(sp, str),\n+      error(sp, str) => sess.span_diagnostic.span_fatal(sp, str)\n     }\n }\n \n@@ -262,7 +264,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                     nameize(sess, ms,\n                             vec::map(eof_eis[0u].matches, |dv| dv.pop())));\n             } else if eof_eis.len() > 1u {\n-                return failure(sp, ~\"Ambiguity: multiple successful parses\");\n+                return error(sp, ~\"Ambiguity: multiple successful parses\");\n             } else {\n                 return failure(sp, ~\"Unexpected end of macro invocation\");\n             }\n@@ -276,7 +278,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                       }\n                       _ => fail\n                     } }), ~\" or \");\n-                return failure(sp, fmt!{\n+                return error(sp, fmt!{\n                     \"Local ambiguity: multiple parsing options: \\\n                      built-in NTs %s or %u other options.\",\n                     nts, next_eis.len()});"}, {"sha": "4a7becf1919fb7f74e6fb0f24f1e15f3a2edd58e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b354fe2a918c4821bd66996a023a7bb108bd2862/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354fe2a918c4821bd66996a023a7bb108bd2862/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b354fe2a918c4821bd66996a023a7bb108bd2862", "patch": "@@ -6,7 +6,7 @@ import parse::lexer::{new_tt_reader, reader};\n import parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n import parse::parser::{parser, SOURCE_FILE};\n import earley_parser::{parse, parse_or_else, success, failure, named_match,\n-                       matched_seq, matched_nonterminal};\n+                       matched_seq, matched_nonterminal, error};\n import std::map::hashmap;\n \n fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n@@ -80,7 +80,8 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                   failure(sp, msg) => if sp.lo >= best_fail_spot.lo {\n                     best_fail_spot = sp;\n                     best_fail_msg = msg;\n-                  }\n+                  },\n+                  error(sp, msg) => cx.span_fatal(sp, msg)\n                 }\n               }\n               _ => cx.bug(~\"non-matcher found in parsed lhses\")"}]}