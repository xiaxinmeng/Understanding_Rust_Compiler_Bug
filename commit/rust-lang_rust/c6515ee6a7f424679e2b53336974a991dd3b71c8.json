{"sha": "c6515ee6a7f424679e2b53336974a991dd3b71c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTE1ZWU2YTdmNDI0Njc5ZTJiNTMzMzY5NzRhOTkxZGQzYjcxYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-24T11:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-24T11:43:51Z"}, "message": "auto merge of #7193 : Thiez/rust/fixbench, r=cmr\n\nThis PR fixes a few problems with the benchmark, mentioned in #2913. Since I do not have a 4GB RAM machine (I run rust on a puny 2GB RAM VM) I can't test binarytrees with N=20. If it works we can close #2913.\r\n\r\nFixes: 1) binarytrees prints \"long lived trees of depth\" instead of \"long lived tree of depth\"\r\nFixes: 2) chameneosredux -- the whitespace printed by show_number should be the same as printed by show_color\r\nAlready fixed: 3) spectralnorm prints an extra \n\r\nFixes: 4) threadring prints an extra \n\r\nFixes: 5) fasta -- strangely, output stops half-way through line 169 -- with another 8166 lines still to do.\r\nCould not test: 6) the latest binarytrees fails with input N=20 on a 4GB machine.\r\n\r\nr?", "tree": {"sha": "b6902de9083f8fe421bb9ca85c6feeb64f3fa7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6902de9083f8fe421bb9ca85c6feeb64f3fa7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6515ee6a7f424679e2b53336974a991dd3b71c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6515ee6a7f424679e2b53336974a991dd3b71c8", "html_url": "https://github.com/rust-lang/rust/commit/c6515ee6a7f424679e2b53336974a991dd3b71c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6515ee6a7f424679e2b53336974a991dd3b71c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "html_url": "https://github.com/rust-lang/rust/commit/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493"}, {"sha": "7ba1a239a4fc54f101434128e76b370b926cb8ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba1a239a4fc54f101434128e76b370b926cb8ef", "html_url": "https://github.com/rust-lang/rust/commit/7ba1a239a4fc54f101434128e76b370b926cb8ef"}], "stats": {"total": 118, "additions": 62, "deletions": 56}, "files": [{"sha": "302f1fbeb04aad065eab5a3d13f4c0ddab57775a", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=c6515ee6a7f424679e2b53336974a991dd3b71c8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -39,7 +39,7 @@ use core::prelude::*;\n use list::{MutList, MutCons, MutNil};\n \n use core::at_vec;\n-use core::cast::{transmute, transmute_mut_region};\n+use core::cast::{transmute, transmute_mut, transmute_mut_region};\n use core::cast;\n use core::libc::size_t;\n use core::ptr;\n@@ -74,6 +74,7 @@ struct Chunk {\n     is_pod: bool,\n }\n \n+#[mutable]\n pub struct Arena {\n     // The head is separated out from the list as a unbenchmarked\n     // microoptimization, to avoid needing to case on the list to\n@@ -269,23 +270,22 @@ impl Arena {\n \n     // The external interface\n     #[inline]\n-    pub fn alloc<'a, T>(&'a mut self, op: &fn() -> T) -> &'a T {\n+    pub fn alloc<'a, T>(&'a self, op: &fn() -> T) -> &'a T {\n         unsafe {\n             // XXX: Borrow check\n-            let this = transmute_mut_region(self);\n-            if !intrinsics::needs_drop::<T>() {\n-                return this.alloc_pod(op);\n+            let this = transmute_mut(self);\n+            if intrinsics::needs_drop::<T>() {\n+                this.alloc_nonpod(op)\n+            } else {\n+                this.alloc_pod(op)\n             }\n-            // XXX: Borrow check\n-            let this = transmute_mut_region(self);\n-            this.alloc_nonpod(op)\n         }\n     }\n }\n \n #[test]\n fn test_arena_destructors() {\n-    let mut arena = Arena();\n+    let arena = Arena();\n     for uint::range(0, 10) |i| {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n@@ -300,7 +300,7 @@ fn test_arena_destructors() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_arena_destructors_fail() {\n-    let mut arena = Arena();\n+    let arena = Arena();\n     // Put some stuff in the arena.\n     for uint::range(0, 10) |i| {\n         // Arena allocate something with drop glue to make sure it"}, {"sha": "76ef4c12380e2ab44024086c2eac4660ea7e65ce", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=c6515ee6a7f424679e2b53336974a991dd3b71c8", "patch": "@@ -1,8 +1,4 @@\n-// xfail-test\n-\n-// Broken due to arena API problems.\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,33 +11,35 @@\n extern mod extra;\n use extra::arena;\n \n-enum tree<'self> {\n-    nil,\n-    node(&'self tree<'self>, &'self tree<'self>, int),\n+enum Tree<'self> {\n+    Nil,\n+    Node(&'self Tree<'self>, &'self Tree<'self>, int),\n }\n \n-fn item_check(t: &tree) -> int {\n+fn item_check(t: &Tree) -> int {\n     match *t {\n-      nil => { return 0; }\n-      node(left, right, item) => {\n+      Nil => { return 0; }\n+      Node(left, right, item) => {\n         return item + item_check(left) - item_check(right);\n       }\n     }\n }\n \n-fn bottom_up_tree<'r>(arena: &'r mut arena::Arena, item: int, depth: int)\n-                   -> &'r tree<'r> {\n+fn bottom_up_tree<'r>(arena: &'r arena::Arena, item: int, depth: int)\n+                   -> &'r Tree<'r> {\n     if depth > 0 {\n         return arena.alloc(\n-            || node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n+            || Node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n                     bottom_up_tree(arena, 2 * item, depth - 1),\n                     item));\n     }\n-    return arena.alloc(|| nil);\n+    return arena.alloc(|| Nil);\n }\n \n fn main() {\n-    let args = os::args();\n+    use std::os;\n+    use std::int;\n+    let args = std::os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"17\"]\n     } else if args.len() <= 1u {\n@@ -59,34 +57,34 @@ fn main() {\n         max_depth = n;\n     }\n \n-    let mut stretch_arena = arena::Arena();\n+    let stretch_arena = arena::Arena();\n     let stretch_depth = max_depth + 1;\n-    let stretch_tree = bottom_up_tree(&mut stretch_arena, 0, stretch_depth);\n+    let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n \n-    io::println(fmt!(\"stretch tree of depth %d\\t check: %d\",\n+    println(fmt!(\"stretch tree of depth %d\\t check: %d\",\n                           stretch_depth,\n                           item_check(stretch_tree)));\n \n-    let mut long_lived_arena = arena::Arena();\n-    let long_lived_tree = bottom_up_tree(&mut long_lived_arena, 0, max_depth);\n+    let long_lived_arena = arena::Arena();\n+    let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n     let mut depth = min_depth;\n     while depth <= max_depth {\n         let iterations = int::pow(2, (max_depth - depth + min_depth) as uint);\n         let mut chk = 0;\n         let mut i = 1;\n         while i <= iterations {\n-            let mut temp_tree = bottom_up_tree(&mut long_lived_arena, i, depth);\n+            let mut temp_tree = bottom_up_tree(&long_lived_arena, i, depth);\n             chk += item_check(temp_tree);\n-            temp_tree = bottom_up_tree(&mut long_lived_arena, -i, depth);\n+            temp_tree = bottom_up_tree(&long_lived_arena, -i, depth);\n             chk += item_check(temp_tree);\n             i += 1;\n         }\n-        io::println(fmt!(\"%d\\t trees of depth %d\\t check: %d\",\n+        println(fmt!(\"%d\\t trees of depth %d\\t check: %d\",\n                          iterations * 2, depth,\n                          chk));\n         depth += 2;\n     }\n-    io::println(fmt!(\"long lived trees of depth %d\\t check: %d\",\n+    println(fmt!(\"long lived tree of depth %d\\t check: %d\",\n                      max_depth,\n                      item_check(long_lived_tree)));\n }"}, {"sha": "3ff123b027ab9bf61a0d245916a35f718814236b", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=c6515ee6a7f424679e2b53336974a991dd3b71c8", "patch": "@@ -85,7 +85,7 @@ fn show_number(nn: uint) -> ~str {\n         out = show_digit(dig) + \" \" + out;\n     }\n \n-    return out;\n+    return ~\" \" + out;\n }\n \n fn transform(aa: color, bb: color) -> color {"}, {"sha": "f3efcc21ea9bdc7069723a5a4473ae465443e6ba", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=c6515ee6a7f424679e2b53336974a991dd3b71c8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -19,16 +19,14 @@ extern mod extra;\n \n use std::int;\n use std::io;\n-use std::option;\n use std::os;\n use std::rand::Rng;\n use std::rand;\n use std::result;\n use std::str;\n use std::uint;\n-use std::vec;\n \n-fn LINE_LENGTH() -> uint { return 60u; }\n+static LINE_LENGTH: uint = 60u;\n \n struct MyRandom {\n     last: u32\n@@ -81,7 +79,7 @@ fn make_random_fasta(wr: @io::Writer,\n     for uint::range(0u, n as uint) |_i| {\n         op.push_char(select_random(myrandom_next(rng, 100u32),\n                                               copy genelist));\n-        if op.len() >= LINE_LENGTH() {\n+        if op.len() >= LINE_LENGTH {\n             wr.write_line(op);\n             op = ~\"\";\n         }\n@@ -90,18 +88,18 @@ fn make_random_fasta(wr: @io::Writer,\n }\n \n fn make_repeat_fasta(wr: @io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n-    unsafe {\n-        wr.write_line(~\">\" + id + \" \" + desc);\n-        let mut op: ~str = ~\"\";\n-        let sl: uint = s.len();\n-        for uint::range(0u, n as uint) |i| {\n-            str::raw::push_byte(&mut op, s[i % sl]);\n-            if op.len() >= LINE_LENGTH() {\n-                wr.write_line(op);\n-                op = ~\"\";\n-            }\n+    wr.write_line(~\">\" + id + \" \" + desc);\n+    let mut op = str::with_capacity( LINE_LENGTH );\n+    let sl = s.len();\n+    for uint::range(0u, n as uint) |i| {\n+        if (op.len() >= LINE_LENGTH) {\n+            wr.write_line( op );\n+            op = str::with_capacity( LINE_LENGTH );\n         }\n-        if op.len() > 0u { wr.write_line(op); }\n+        op.push_char( s[i % sl] as char );\n+    }\n+    if op.len() > 0 {\n+        wr.write_line(op)\n     }\n }\n \n@@ -111,7 +109,7 @@ fn acid(ch: char, prob: u32) -> AminoAcids {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         // alioth tests k-nucleotide with this data at 25,000,000\n         ~[~\"\", ~\"5000000\"]\n     } else if args.len() <= 1u {\n@@ -120,9 +118,9 @@ fn main() {\n         args\n     };\n \n-    let writer = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let writer = if os::getenv(\"RUST_BENCH\").is_some() {\n         result::get(&io::file_writer(&Path(\"./shootout-fasta.data\"),\n-                                    ~[io::Truncate, io::Create]))\n+                                    [io::Truncate, io::Create]))\n     } else {\n         io::stdout()\n     };"}, {"sha": "35a37e5533207658f5fbf08706dbcdb0f9dc144c", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6515ee6a7f424679e2b53336974a991dd3b71c8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=c6515ee6a7f424679e2b53336974a991dd3b71c8", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use std::f64;\n use std::from_str::FromStr;\n use std::os;"}]}