{"sha": "5d5136df9f9ead38745e35752abdb59d5ce4991f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNTEzNmRmOWY5ZWFkMzg3NDVlMzU3NTJhYmRiNTlkNWNlNDk5MWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T19:22:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T20:53:33Z"}, "message": "Convert trans_uniq asserts to preconditions\n\nIssue #409", "tree": {"sha": "0c6db24e1c219dcbc1cee8fc4120d8e38bb07fd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6db24e1c219dcbc1cee8fc4120d8e38bb07fd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d5136df9f9ead38745e35752abdb59d5ce4991f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5136df9f9ead38745e35752abdb59d5ce4991f", "html_url": "https://github.com/rust-lang/rust/commit/5d5136df9f9ead38745e35752abdb59d5ce4991f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d5136df9f9ead38745e35752abdb59d5ce4991f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "html_url": "https://github.com/rust-lang/rust/commit/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "12be2f3f54a96dcc93c3e0920542673d3139b2f9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d5136df9f9ead38745e35752abdb59d5ce4991f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5136df9f9ead38745e35752abdb59d5ce4991f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5d5136df9f9ead38745e35752abdb59d5ce4991f", "patch": "@@ -1317,6 +1317,7 @@ fn make_free_glue(bcx: @block_ctxt, v0: ValueRef, t: ty::t) {\n             } else { bcx }\n           }\n           ty::ty_uniq(content_mt) {\n+            check trans_uniq::type_is_unique_box(bcx, t);\n             trans_uniq::make_free_glue(bcx, v0, t)\n           }\n           ty::ty_obj(_) {\n@@ -2029,7 +2030,7 @@ fn copy_val_no_check(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n         ret take_ty(bcx, dst, t);\n     }\n     if ty::type_is_unique_box(ccx.tcx, t) {\n-        let bcx = cx;\n+        //let bcx = cx;\n         // FIXME (409): Write a test and uncomment\n         //if action == DROP_EXISTING { bcx = drop_ty(cx, dst, t); }\n         //ret trans_uniq::copy_val(bcx, dst, src, t);"}, {"sha": "ec285c57074217dfcdc0221316b6009b96856331", "filename": "src/comp/middle/trans_uniq.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d5136df9f9ead38745e35752abdb59d5ce4991f/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5136df9f9ead38745e35752abdb59d5ce4991f/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs?ref=5d5136df9f9ead38745e35752abdb59d5ce4991f", "patch": "@@ -15,7 +15,13 @@ import trans::{\n     new_sub_block_ctxt\n };\n \n-export trans_uniq, make_free_glue;\n+export trans_uniq, make_free_glue, type_is_unique_box;\n+\n+pure fn type_is_unique_box(bcx: @block_ctxt, ty: ty::t) -> bool {\n+    unchecked {\n+        ty::type_is_unique_box(bcx_tcx(bcx), ty)\n+    }\n+}\n \n fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n               node_id: ast::node_id) -> result {\n@@ -25,17 +31,18 @@ fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n     bcx = lv.bcx;\n \n     let uniq_ty = node_id_type(bcx_ccx(cx), node_id);\n-    assert ty::type_is_unique_box(bcx_tcx(cx), uniq_ty);\n+    check type_is_unique_box(bcx, uniq_ty);\n+    let content_ty = content_ty(bcx, uniq_ty);\n     let {bcx, val: llptr} = alloc_uniq(bcx, uniq_ty);\n \n     bcx = move_val_if_temp(bcx, INIT, llptr, lv,\n-                           content_ty(bcx, uniq_ty));\n+                           content_ty);\n \n     ret rslt(bcx, llptr);\n }\n \n-fn alloc_uniq(cx: @block_ctxt, uniq_ty: ty::t) -> result {\n-    assert ty::type_is_unique_box(bcx_tcx(cx), uniq_ty);\n+fn alloc_uniq(cx: @block_ctxt, uniq_ty: ty::t)\n+    : type_is_unique_box(cx, uniq_ty) -> result {\n \n     let bcx = cx;\n     let contents_ty = content_ty(bcx, uniq_ty);\n@@ -54,26 +61,27 @@ fn alloc_uniq(cx: @block_ctxt, uniq_ty: ty::t) -> result {\n     ret rslt(bcx, llptr);\n }\n \n-fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n-    assert ty::type_is_unique_box(bcx_tcx(bcx), t);\n+fn make_free_glue(cx: @block_ctxt, v: ValueRef, t: ty::t)\n+    : type_is_unique_box(cx, t) -> @block_ctxt {\n \n+    let bcx = cx;\n     let free_cx = new_sub_block_ctxt(bcx, \"uniq_free\");\n     let next_cx = new_sub_block_ctxt(bcx, \"uniq_free_next\");\n     let vptr = Load(bcx, v);\n     let null_test = IsNull(bcx, vptr);\n     CondBr(bcx, null_test, next_cx.llbb, free_cx.llbb);\n \n     let bcx = free_cx;\n-    let bcx = drop_ty(bcx, vptr, content_ty(bcx, t));\n+    let bcx = drop_ty(bcx, vptr, content_ty(cx, t));\n     let bcx = trans_shared_free(bcx, vptr);\n     Store(bcx, C_null(val_ty(vptr)), v);\n     Br(bcx, next_cx.llbb);\n \n     next_cx\n }\n \n-fn content_ty(bcx: @block_ctxt, t: ty::t) -> ty::t {\n-    assert ty::type_is_unique_box(bcx_tcx(bcx), t);\n+fn content_ty(bcx: @block_ctxt, t: ty::t)\n+    : type_is_unique_box(bcx, t) -> ty::t {\n \n     alt ty::struct(bcx_tcx(bcx), t) {\n       ty::ty_uniq({ty: ct, _}) { ct }"}]}