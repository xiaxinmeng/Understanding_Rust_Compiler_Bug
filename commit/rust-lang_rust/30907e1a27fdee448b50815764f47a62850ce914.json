{"sha": "30907e1a27fdee448b50815764f47a62850ce914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTA3ZTFhMjdmZGVlNDQ4YjUwODE1NzY0ZjQ3YTYyODUwY2U5MTQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-08-29T21:40:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-29T21:40:57Z"}, "message": "Rollup merge of #44117 - frewsxcv:frewsxcv-to-socket-addrs-examples, r=QuietMisdreavus\n\nRewrite `std::net::ToSocketAddrs` doc examples.\n\nin particular:\n\n* show how to create an iterator that yields multiple socket addresses\n* show more failing scenarios\n\ndone this as preliminary work while investigating https://github.com/rust-lang/rust/issues/22569\n\nnote: i haven't run doc tests on my machine for this, so would be good to confirm CI passes before approving", "tree": {"sha": "a447bdba144cb863e2d98e066591c53d271d4015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a447bdba144cb863e2d98e066591c53d271d4015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30907e1a27fdee448b50815764f47a62850ce914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30907e1a27fdee448b50815764f47a62850ce914", "html_url": "https://github.com/rust-lang/rust/commit/30907e1a27fdee448b50815764f47a62850ce914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30907e1a27fdee448b50815764f47a62850ce914/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba304b96c470ae825c60dc063c2eb3fa8bb060aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba304b96c470ae825c60dc063c2eb3fa8bb060aa", "html_url": "https://github.com/rust-lang/rust/commit/ba304b96c470ae825c60dc063c2eb3fa8bb060aa"}, {"sha": "10bd39e7af94910e9cdc57e63c966d2020223d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/10bd39e7af94910e9cdc57e63c966d2020223d8f", "html_url": "https://github.com/rust-lang/rust/commit/10bd39e7af94910e9cdc57e63c966d2020223d8f"}], "stats": {"total": 88, "additions": 66, "deletions": 22}, "files": [{"sha": "9ef19cd64b386f89a6ff7be7e60e8b795d16c80e", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 66, "deletions": 22, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/30907e1a27fdee448b50815764f47a62850ce914/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30907e1a27fdee448b50815764f47a62850ce914/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=30907e1a27fdee448b50815764f47a62850ce914", "patch": "@@ -705,30 +705,74 @@ impl hash::Hash for SocketAddrV6 {\n ///\n /// # Examples\n ///\n+/// Creating a [`SocketAddr`] iterator that yields one item:\n+///\n+/// ```\n+/// use std::net::{ToSocketAddrs, SocketAddr};\n+///\n+/// let addr = SocketAddr::from(([127, 0, 0, 1], 443));\n+/// let mut addrs_iter = addr.to_socket_addrs().unwrap();\n+///\n+/// assert_eq!(Some(addr), addrs_iter.next());\n+/// assert!(addrs_iter.next().is_none());\n+/// ```\n+///\n+/// Creating a [`SocketAddr`] iterator from a hostname:\n+///\n /// ```no_run\n-/// use std::net::{SocketAddrV4, TcpStream, UdpSocket, TcpListener, Ipv4Addr};\n-///\n-/// fn main() {\n-///     let ip = Ipv4Addr::new(127, 0, 0, 1);\n-///     let port = 12345;\n-///\n-///     // The following lines are equivalent modulo possible \"localhost\" name\n-///     // resolution differences\n-///     let tcp_s = TcpStream::connect(SocketAddrV4::new(ip, port));\n-///     let tcp_s = TcpStream::connect((ip, port));\n-///     let tcp_s = TcpStream::connect((\"127.0.0.1\", port));\n-///     let tcp_s = TcpStream::connect((\"localhost\", port));\n-///     let tcp_s = TcpStream::connect(\"127.0.0.1:12345\");\n-///     let tcp_s = TcpStream::connect(\"localhost:12345\");\n-///\n-///     // TcpListener::bind(), UdpSocket::bind() and UdpSocket::send_to()\n-///     // behave similarly\n-///     let tcp_l = TcpListener::bind(\"localhost:12345\");\n-///\n-///     let mut udp_s = UdpSocket::bind((\"127.0.0.1\", port)).unwrap();\n-///     udp_s.send_to(&[7], (ip, 23451)).unwrap();\n-/// }\n+/// use std::net::{SocketAddr, ToSocketAddrs};\n+///\n+/// // assuming 'localhost' resolves to 127.0.0.1\n+/// let mut addrs_iter = \"localhost:443\".to_socket_addrs().unwrap();\n+/// assert_eq!(addrs_iter.next(), Some(SocketAddr::from(([127, 0, 0, 1], 443))));\n+/// assert!(addrs_iter.next().is_none());\n+///\n+/// // assuming 'foo' does not resolve\n+/// assert!(\"foo:443\".to_socket_addrs().is_err());\n /// ```\n+///\n+/// Creating a [`SocketAddr`] iterator that yields multiple items:\n+///\n+/// ```\n+/// use std::net::{SocketAddr, ToSocketAddrs};\n+///\n+/// let addr1 = SocketAddr::from(([0, 0, 0, 0], 80));\n+/// let addr2 = SocketAddr::from(([127, 0, 0, 1], 443));\n+/// let addrs = vec![addr1, addr2];\n+///\n+/// let mut addrs_iter = (&addrs[..]).to_socket_addrs().unwrap();\n+///\n+/// assert_eq!(Some(addr1), addrs_iter.next());\n+/// assert_eq!(Some(addr2), addrs_iter.next());\n+/// assert!(addrs_iter.next().is_none());\n+/// ```\n+///\n+/// Attempting to create a [`SocketAddr`] iterator from an improperly formatted\n+/// socket address `&str` (missing the port):\n+///\n+/// ```\n+/// use std::io;\n+/// use std::net::ToSocketAddrs;\n+///\n+/// let err = \"127.0.0.1\".to_socket_addrs().unwrap_err();\n+/// assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n+/// ```\n+///\n+/// [`TcpStream::connect`] is an example of an function that utilizes\n+/// `ToSocketsAddr` as a trait bound on its parameter in order to accept\n+/// different types:\n+///\n+/// ```no_run\n+/// use std::net::{TcpStream, Ipv4Addr};\n+///\n+/// let stream = TcpStream::connect((\"127.0.0.1\", 443));\n+/// // or\n+/// let stream = TcpStream::connect(\"127.0.0.1.443\");\n+/// // or\n+/// let stream = TcpStream::connect((Ipv4Addr::new(127, 0, 0, 1), 443));\n+/// ```\n+///\n+/// [`TcpStream::connect`]: ../../std/net/struct.TcpStream.html#method.connect\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToSocketAddrs {\n     /// Returned iterator over socket addresses which this type may correspond"}]}