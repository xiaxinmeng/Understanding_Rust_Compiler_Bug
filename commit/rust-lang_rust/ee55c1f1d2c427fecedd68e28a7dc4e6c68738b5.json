{"sha": "ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTVjMWYxZDJjNDI3ZmVjZWRkNjhlMjhhN2RjNGU2YzY4NzM4YjU=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-09-06T04:34:20Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-09-07T20:12:02Z"}, "message": "Add regression test and help note", "tree": {"sha": "9ca71150c5a3d798bf1c3231a3aad4f5bd139bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca71150c5a3d798bf1c3231a3aad4f5bd139bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "html_url": "https://github.com/rust-lang/rust/commit/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc8f0606d0f3c4f3866643382c8a5776d1bdaed", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc8f0606d0f3c4f3866643382c8a5776d1bdaed", "html_url": "https://github.com/rust-lang/rust/commit/cdc8f0606d0f3c4f3866643382c8a5776d1bdaed"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "4901d6041d6f02bdc54e90b32e1b421eac9a7465", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "patch": "@@ -187,7 +187,7 @@ fn enforce_impl_params_are_constrained(\n     }\n \n     // (*) This is a horrible concession to reality. I think it'd be\n-    // better to just ban unconstrianed lifetimes outright, but in\n+    // better to just ban unconstrained lifetimes outright, but in\n     // practice people do non-hygenic macros like:\n     //\n     // ```\n@@ -207,17 +207,25 @@ fn enforce_impl_params_are_constrained(\n }\n \n fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str) {\n-    struct_span_err!(\n+    let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n         E0207,\n         \"the {} parameter `{}` is not constrained by the \\\n         impl trait, self type, or predicates\",\n         kind,\n         name\n-    )\n-    .span_label(span, format!(\"unconstrained {} parameter\", kind))\n-    .emit();\n+    );\n+    err.span_label(span, format!(\"unconstrained {} parameter\", kind));\n+    if kind == \"const\" {\n+        err.note(\n+            \"expressions using a const parameter must map each value to a distinct output value\",\n+        );\n+        err.note(\n+            \"proving the result of expressions other than the parameter are unique is not supported\",\n+        );\n+    }\n+    err.emit();\n }\n \n /// Enforce that we do not have two items in an impl with the same name."}, {"sha": "a06b99d6645ec9b073c76fd39a2ab3702ea70754", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "patch": "@@ -0,0 +1,18 @@\n+// Checks that const expressions have a useful note explaining why they can't be evaluated.\n+// The note should relate to the fact that it cannot be shown forall N that it maps 1-1 to a new\n+// type.\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Collatz<const N: Option<usize>>;\n+\n+impl <const N: usize> Collatz<{Some(N)}> {}\n+//~^ ERROR the const parameter\n+\n+struct Foo;\n+\n+impl<const N: usize> Foo {}\n+//~^ ERROR the const parameter\n+\n+fn main() {}"}, {"sha": "bba16f421535a21c23174c5868341cf8b542cc6c", "filename": "src/test/ui/const-generics/issues/issue-68366.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr?ref=ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "patch": "@@ -0,0 +1,21 @@\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:10:13\n+   |\n+LL | impl <const N: usize> Collatz<{Some(N)}> {}\n+   |             ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:15:12\n+   |\n+LL | impl<const N: usize> Foo {}\n+   |            ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0207`."}]}