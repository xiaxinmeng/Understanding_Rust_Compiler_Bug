{"sha": "e50fd5a3dc587b5b970b6b969eff7e8547dede70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MGZkNWEzZGM1ODdiNWI5NzBiNmI5NjllZmY3ZTg1NDdkZWRlNzA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-03-04T21:54:16Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-03-04T21:54:16Z"}, "message": "Update stderr", "tree": {"sha": "b425873d9f5f22b3f5793eb559063a0f9064797a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b425873d9f5f22b3f5793eb559063a0f9064797a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e50fd5a3dc587b5b970b6b969eff7e8547dede70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl5gI4gACgkQtAh+UQ6Y\nsWS2hxAAiQX7nRjuNPIyT7LNQXDsMPSEN/6tE/mUOofd6ba35QH+dg//wGB1JJZu\n0QPEOqBf2PU7NBH+iMckKBEcuk+Yxj886rvhpioqJSAXBcWZRtVZ2fmefqQ1F+9k\nRrkMhSZzvNkP6zsvqGPIuVQ5YXOZuRbdLZ2zof/V+Iq1b968DBYMErUBGOHb4g0V\nDiFxv2vtUQNTzg8U/goINhJbXN/owDVMxI89NJZL5sMSayKkihkNqcWXuyi6qdAs\nqAryoCtF+cNxaiP8yRHu6joVC+rDUcRlxu+HfrwBhzAP+xJZ0bQjC1UATkheS5cB\noxYFJ2Z26vQuGxAzbC5RsqLIvompXPWARZVv5zKyvdquTCt8Bp6RLXDkIa941iQ2\nNFyHxQOfkGocIwua9zhMKjy7PVsSxAkp94y8ZvRsjG+BS5KBsWjy/Za8Yx/stKA3\n5xU041ydXdkaGzBT8Ii5WOX1bLC9NRX3Y4UrXCzSUgTzcmbxBizTd0vY3XaSQjt8\nUBvZWjlehwIoOiCrtu8Nkg5pIKq5h3tDEBH9BaY4QmaSB14u21lBJ1wxslqUUZxh\np314M9CacZgXTDvq5euDVKVmgmOaczOIn9dyk6xRkHbIWa9nkir75rZ81kpCo6WR\nxAY1hDj4rDdAQWvb01g6qJEaopRyoIAfxV+shdTp9qZ2kVoty0A=\n=ae20\n-----END PGP SIGNATURE-----", "payload": "tree b425873d9f5f22b3f5793eb559063a0f9064797a\nparent 66b152cf9fd53b27027c66378a73404b92c6e35b\nauthor Aaron Hill <aa1ronham@gmail.com> 1583358856 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1583358856 -0500\n\nUpdate stderr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e50fd5a3dc587b5b970b6b969eff7e8547dede70", "html_url": "https://github.com/rust-lang/rust/commit/e50fd5a3dc587b5b970b6b969eff7e8547dede70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e50fd5a3dc587b5b970b6b969eff7e8547dede70/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b152cf9fd53b27027c66378a73404b92c6e35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b152cf9fd53b27027c66378a73404b92c6e35b", "html_url": "https://github.com/rust-lang/rust/commit/66b152cf9fd53b27027c66378a73404b92c6e35b"}], "stats": {"total": 94, "additions": 35, "deletions": 59}, "files": [{"sha": "3cc3a455c12fc81e21a3e75804c9b6740df21ce6", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 35, "deletions": 59, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e50fd5a3dc587b5b970b6b969eff7e8547dede70/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e50fd5a3dc587b5b970b6b969eff7e8547dede70/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=e50fd5a3dc587b5b970b6b969eff7e8547dede70", "patch": "@@ -136,14 +136,8 @@ LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:41:32\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = #[attr] if 0 {}; }\n-   |                                ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:43:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:41:37\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                --   ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -152,51 +146,45 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:45:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:43:38\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n    |                                      ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:47:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:45:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n    |                                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:49:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:47:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n    |                                             ^       --- help: try placing this code inside a block: `{ {}; }`\n    |                                             |\n    |                                             expected `{`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:51:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:49:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    |                                              ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:53:45\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n-   |                                             ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:53:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n    |                                             ^       -------- help: try placing this code inside a block: `{ if 0 {}; }`\n    |                                             |\n    |                                             expected `{`\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:56:50\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:53:50\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             --   ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -205,21 +193,15 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:58:51\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:55:51\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    |                                                   ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:60:32\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = #[attr] if let _ = 0 {}; }\n-   |                                ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:62:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:57:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                --           ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -228,51 +210,45 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:64:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:59:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n    |                                              ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:66:48\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:61:48\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n    |                                                ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:68:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:63:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n    |                                                     ^       --- help: try placing this code inside a block: `{ {}; }`\n    |                                                     |\n    |                                                     expected `{`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:70:54\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:65:54\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    |                                                      ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:72:53\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n-   |                                                     ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:72:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:67:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n    |                                                     ^       ---------------- help: try placing this code inside a block: `{ if let _ = 0 {}; }`\n    |                                                     |\n    |                                                     expected `{`\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:75:66\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:69:66\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n    |                                                     --           ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -281,15 +257,15 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}\n    |                                                     this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:77:67\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:71:67\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n    |                                                                   ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:74:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attibute\n@@ -299,7 +275,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:76:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attibute\n@@ -309,7 +285,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:84:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n    |                        ------- ^^^^^^^^ not permitted following an outer attibute\n@@ -319,7 +295,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:86:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attibute\n@@ -329,7 +305,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:88:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attibute\n@@ -339,89 +315,89 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:94:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:88:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:94:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:88:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:97:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:91:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:97:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:91:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:100:39\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:94:39\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=-#[attr] 10 => () } }\n    |                                       ^\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:102:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:96:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:102:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:96:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:106:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:100:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:106:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:100:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, or an operator\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:109:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:103:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:109:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:103:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, or an operator\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:114:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:108:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n    |                                     ^^^^^^^\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:116:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:110:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr] } } }\n    |                                     ^^^^^^^\n \n-error: aborting due to 57 previous errors\n+error: aborting due to 53 previous errors\n \n For more information about this error, try `rustc --explain E0586`."}]}