{"sha": "36656f812d123644fb24c16a721803fa92656af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NjU2ZjgxMmQxMjM2NDRmYjI0YzE2YTcyMTgwM2ZhOTI2NTZhZjA=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-08T11:26:09Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-29T23:27:58Z"}, "message": "Expect all help/note messages are specified in a cfail test if it contains help/note annotations,\n\ncloses #21195", "tree": {"sha": "e126b50bec44e27d386f05552a64625d6c27f3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e126b50bec44e27d386f05552a64625d6c27f3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36656f812d123644fb24c16a721803fa92656af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36656f812d123644fb24c16a721803fa92656af0", "html_url": "https://github.com/rust-lang/rust/commit/36656f812d123644fb24c16a721803fa92656af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36656f812d123644fb24c16a721803fa92656af0/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f196bcc3b23925854e3d758c03f56c7520e9b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f196bcc3b23925854e3d758c03f56c7520e9b99", "html_url": "https://github.com/rust-lang/rust/commit/0f196bcc3b23925854e3d758c03f56c7520e9b99"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "4abc4cce7273b077d41f3edbf1d05f6e2f3aada9", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36656f812d123644fb24c16a721803fa92656af0/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36656f812d123644fb24c16a721803fa92656af0/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=36656f812d123644fb24c16a721803fa92656af0", "patch": "@@ -929,6 +929,13 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n         format!(\"{}:{}:\", testfile.display(), ee.line)\n     }).collect::<Vec<String>>();\n \n+    let (expect_help, expect_note) =\n+        expected_errors.iter()\n+                        .fold((false, false),\n+                              |(acc_help, acc_note), ee|\n+                                  (acc_help || ee.kind == \"help:\", acc_note ||\n+                                   ee.kind == \"note:\"));\n+\n     fn prefix_matches(line: &str, prefix: &str) -> bool {\n         use std::ascii::AsciiExt;\n         // On windows just translate all '\\' path separators to '/'\n@@ -992,8 +999,8 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n             was_expected = true;\n         }\n \n-        if !was_expected && is_compiler_error_or_warning(line) {\n-            fatal_proc_rec(&format!(\"unexpected compiler error or warning: '{}'\",\n+        if !was_expected && is_unexpected_compiler_message(line, expect_help, expect_note) {\n+            fatal_proc_rec(&format!(\"unexpected compiler message: '{}'\",\n                                     line),\n                           proc_res);\n         }\n@@ -1009,16 +1016,15 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n     }\n }\n \n-fn is_compiler_error_or_warning(line: &str) -> bool {\n+fn is_unexpected_compiler_message(line: &str, expect_help: bool, expect_note: bool) -> bool {\n     let mut c = Path::new(line).components();\n     let line = match c.next() {\n         Some(Component::Prefix(_)) => c.as_path().to_str().unwrap(),\n         _ => line,\n     };\n \n     let mut i = 0;\n-    return\n-        scan_until_char(line, ':', &mut i) &&\n+    return scan_until_char(line, ':', &mut i) &&\n         scan_char(line, ':', &mut i) &&\n         scan_integer(line, &mut i) &&\n         scan_char(line, ':', &mut i) &&\n@@ -1030,7 +1036,10 @@ fn is_compiler_error_or_warning(line: &str) -> bool {\n         scan_integer(line, &mut i) &&\n         scan_char(line, ' ', &mut i) &&\n         (scan_string(line, \"error\", &mut i) ||\n-         scan_string(line, \"warning\", &mut i));\n+         scan_string(line, \"warning\", &mut i) ||\n+         (expect_help && scan_string(line, \"help\", &mut i)) ||\n+         (expect_note && scan_string(line, \"note\", &mut i))\n+        );\n }\n \n fn scan_until_char(haystack: &str, needle: char, idx: &mut usize) -> bool {"}]}