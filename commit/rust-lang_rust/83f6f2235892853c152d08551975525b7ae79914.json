{"sha": "83f6f2235892853c152d08551975525b7ae79914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjZmMjIzNTg5Mjg1M2MxNTJkMDg1NTE5NzU1MjViN2FlNzk5MTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-28T18:54:40Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T17:22:27Z"}, "message": "Tweak wording and spans of `'static` `dyn Trait`/`impl Trait` requirements", "tree": {"sha": "80d3c14e31f5f13ff465dc2c09cfee19ed8f7839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d3c14e31f5f13ff465dc2c09cfee19ed8f7839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f6f2235892853c152d08551975525b7ae79914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f6f2235892853c152d08551975525b7ae79914", "html_url": "https://github.com/rust-lang/rust/commit/83f6f2235892853c152d08551975525b7ae79914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f6f2235892853c152d08551975525b7ae79914/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dcd744df0ed404b58767e17f55e1b4f1351daa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcd744df0ed404b58767e17f55e1b4f1351daa5", "html_url": "https://github.com/rust-lang/rust/commit/6dcd744df0ed404b58767e17f55e1b4f1351daa5"}], "stats": {"total": 247, "additions": 91, "deletions": 156}, "files": [{"sha": "f4c86ddae604e2b0297484bb6ee3b53a4505ddea", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -27,39 +27,44 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     let return_sp = sub_origin.span();\n                     let mut err =\n                         self.tcx().sess.struct_span_err(sp, \"cannot infer an appropriate lifetime\");\n-                    if sp == sup_origin.span() && return_sp == sp {\n-                        // Example: `ui/object-lifetime/object-lifetime-default-from-box-error.rs`\n-                        err.span_label(\n-                            sup_origin.span(),\n-                            \"this needs to be `'static` but the borrow...\",\n-                        );\n-                    } else {\n-                        err.span_label(return_sp, \"this is `'static`...\");\n-                        // We try to make the output have fewer overlapping spans if possible.\n-                        if sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()) {\n-                            // When `sp == sup_origin` we already have overlapping spans in the\n-                            // main diagnostic output, so we don't split this into its own note.\n-                            err.span_label(sup_origin.span(), \"...but this borrow...\");\n+                    let param_info = self.find_param_with_region(sup_r, sub_r)?;\n+                    err.span_label(param_info.param_ty_span, \"data with this lifetime...\");\n+\n+                    // We try to make the output have fewer overlapping spans if possible.\n+                    if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n+                        && sup_origin.span() != return_sp\n+                    {\n+                        // FIXME: account for `async fn` like in `async-await/issues/issue-62097.rs`\n+\n+                        // Customize the spans and labels depending on their relative order so\n+                        // that split sentences flow correctly.\n+                        if sup_origin.span().shrink_to_hi() <= return_sp.shrink_to_lo() {\n+                            err.span_label(sup_origin.span(), \"...is captured here...\");\n+                            err.span_label(return_sp, \"...and required to be `'static` by this\");\n                         } else {\n-                            err.span_note(sup_origin.span(), \"...but this borrow...\");\n+                            err.span_label(return_sp, \"...is required to be `'static` by this...\");\n+                            err.span_label(sup_origin.span(), \"...and is captured here\");\n                         }\n+                    } else {\n+                        err.span_label(\n+                            return_sp,\n+                            \"...is captured and required to be `'static` here\",\n+                        );\n                     }\n \n-                    let (lifetime, lt_sp_opt) = msg_span_from_free_region(self.tcx(), sup_r);\n-                    if let Some(lifetime_sp) = lt_sp_opt {\n-                        err.span_note(lifetime_sp, &format!(\"...can't outlive {}\", lifetime));\n-                    }\n+                    let (lifetime, _) = msg_span_from_free_region(self.tcx(), sup_r);\n \n                     let lifetime_name =\n                         if sup_r.has_name() { sup_r.to_string() } else { \"'_\".to_owned() };\n                     // only apply this suggestion onto functions with\n                     // explicit non-desugar'able return.\n                     if fn_return_span.desugaring_kind().is_none() {\n                         let msg = format!(\n-                            \"you can add a bound to the returned `{} Trait` to make it last less \\\n-                             than `'static` and match {}\",\n+                            \"to permit non-static references in {} `{} Trait` value, you can add \\\n+                             an explicit bound for {}\",\n+                            if is_dyn { \"a\" } else { \"an\" },\n                             if is_dyn { \"dyn\" } else { \"impl\" },\n-                            lifetime\n+                            lifetime,\n                         );\n                         // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n                         err.span_suggestion_verbose("}, {"sha": "af8fc2cd2ab459d8bc4b3eda43227db55de77e5c", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -2,15 +2,12 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ^^^^^ ...but this borrow...\n+   |                               ^^^^^\n+   |                               |\n+   |                               data with this lifetime...\n+   |                               ...is captured here...\n LL |         foo(|| self.bar()).await;\n-   |         --- this is `'static`...\n-   |\n-note: ...can't outlive the lifetime `'_` as defined on the method body at 12:31\n-  --> $DIR/issue-62097.rs:12:31\n-   |\n-LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ^\n+   |         --- ...and required to be `'static` by this\n \n error: aborting due to previous error\n "}, {"sha": "d7dae6a08a7b94b9d17514e79198245d1ee7fa17", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -2,16 +2,12 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |                       ---------   ^ ...but this borrow...\n-   |                       |\n-   |                       this is `'static`...\n+   |              ----     ---------   ^ ...and is captured here\n+   |              |        |\n+   |              |        ...is required to be `'static` by this...\n+   |              data with this lifetime...\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:1\n-   |\n-LL | fn elided(x: &i32) -> impl Copy { x }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ^^^^\n@@ -20,16 +16,12 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |                                ---------   ^ ...but this borrow...\n-   |                                |\n-   |                                this is `'static`...\n-   |\n-note: ...can't outlive the lifetime `'a` as defined on the function body at 6:13\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:13\n+   |                    -------     ---------   ^ ...and is captured here\n+   |                    |           |\n+   |                    |           ...is required to be `'static` by this...\n+   |                    data with this lifetime...\n    |\n-LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |             ^^\n-help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ^^^^\n@@ -38,16 +30,12 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                                  --------------------------------   ^ ...but this borrow...\n-   |                                  |\n-   |                                  this is `'static`...\n-   |\n-note: ...can't outlive the lifetime `'a` as defined on the function body at 12:15\n-  --> $DIR/must_outlive_least_region_or_bound.rs:12:15\n+   |                      -------     --------------------------------   ^ ...and is captured here\n+   |                      |           |\n+   |                      |           ...is required to be `'static` by this...\n+   |                      data with this lifetime...\n    |\n-LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |               ^^\n-help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n    |                                                                   ^^^^"}, {"sha": "1c3a5979ee55bc74c7038c31c2fcd532996f7e77", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -2,20 +2,15 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ----------------------- this is `'static`...\n+   |                         -----     ----------------------- ...is required to be `'static` by this...\n+   |                         |\n+   |                         data with this lifetime...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n-   |         ...but this borrow...\n+   |         ...and is captured here\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the method body at 6:5\n-  --> $DIR/static-return-lifetime-infered.rs:6:5\n-   |\n-LL | /     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-LL | |         self.x.iter().map(|a| a.0)\n-LL | |     }\n-   | |_____^\n-help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ^^^^\n@@ -24,18 +19,15 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ----------------------- this is `'static`...\n+   |                        --------     ----------------------- ...is required to be `'static` by this...\n+   |                        |\n+   |                        data with this lifetime...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n-   |         ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime `'a` as defined on the method body at 10:20\n-  --> $DIR/static-return-lifetime-infered.rs:10:20\n+   |         ...and is captured here\n    |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    ^^\n-help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ^^^^"}, {"sha": "02d33aae023ff27f5c31f28e7b6edfd267523943", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -1,21 +1,15 @@\n error: cannot infer an appropriate lifetime\n   --> $DIR/issue-16922.rs:4:14\n    |\n+LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n+   |                       -- data with this lifetime...\n LL |     Box::new(value) as Box<dyn Any>\n    |     ---------^^^^^-\n    |     |        |\n-   |     |        ...but this borrow...\n-   |     this is `'static`...\n+   |     |        ...and is captured here\n+   |     ...is required to be `'static` by this...\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n-  --> $DIR/issue-16922.rs:3:1\n-   |\n-LL | / fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-LL | |     Box::new(value) as Box<dyn Any>\n-LL | |\n-LL | | }\n-   | |_^\n-help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n    |                                          ^^^^"}, {"sha": "70a9bf22b8db372779e8bd2efbee667875c49af6", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -1,20 +1,13 @@\n error: cannot infer an appropriate lifetime\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n+LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n+   |             --------------- data with this lifetime...\n+...\n LL |     ss.r\n-   |     ^^^^ this needs to be `'static` but the borrow...\n-   |\n-note: ...can't outlive the anonymous lifetime #2 defined on the function body at 14:1\n-  --> $DIR/object-lifetime-default-from-box-error.rs:14:1\n+   |     ^^^^ ...is captured and required to be `'static` here\n    |\n-LL | / fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n-LL | |     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n-LL | |     // is illegal.\n-LL | |\n-LL | |     ss.r\n-LL | | }\n-   | |_^\n-help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #2 defined on the function body at 14:1\n+help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #2 defined on the function body at 14:1\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {\n    |                                                   ^^^^"}, {"sha": "1462af44cb15a6702f085410026d272bbe4600d2", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -17,22 +17,16 @@ LL |     Box::new(v)\n error: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:20:14\n    |\n+LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n+   |         ----- data with this lifetime...\n+...\n LL |     Box::new(v)\n    |     ---------^-\n    |     |        |\n-   |     |        ...but this borrow...\n-   |     this is `'static`...\n+   |     |        ...and is captured here\n+   |     ...is required to be `'static` by this...\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the function body at 17:1\n-  --> $DIR/region-object-lifetime-in-coercion.rs:17:1\n-   |\n-LL | / fn c(v: &[u8]) -> Box<dyn Foo> {\n-LL | |     // same as previous case due to RFC 599\n-LL | |\n-LL | |     Box::new(v)\n-LL | | }\n-   | |_^\n-help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 17:1\n+help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 17:1\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                               ^^^^"}, {"sha": "1aeabce5e8aaf267fa616f22b6d3ff8bf93f7d68", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -2,15 +2,10 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^                 ---------- this is `'static`...\n-   |                |\n-   |                ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime `'_` as defined on the method body at 8:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:26\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          ^\n+   |                ^^^^  ----------     ---------- ...and required to be `'static` by this\n+   |                |     |\n+   |                |     data with this lifetime...\n+   |                ...is captured here...\n \n error: aborting due to previous error\n "}, {"sha": "04c475be787b89af4af76ca7f5cb93c83e167882", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -2,16 +2,12 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                               ----------   ^^^^ ...but this borrow...\n-   |                               |\n-   |                               this is `'static`...\n+   |                ----------     ----------   ^^^^ ...and is captured here\n+   |                |              |\n+   |                |              ...is required to be `'static` by this...\n+   |                data with this lifetime...\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the method body at 6:5\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:5\n-   |\n-LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ^^^^"}, {"sha": "5cf170d566ca94acb9767161c8e4609de7d1526b", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -10,25 +10,16 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                                       ------------- this is `'static`...\n+   |                            ------     ------------- ...is required to be `'static` by this...\n+   |                            |\n+   |                            data with this lifetime...\n ...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n-   | |_____^ ...but this borrow...\n+   | |_____^ ...and is captured here\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the function body at 15:1\n-  --> $DIR/missing-lifetimes-in-signature.rs:15:1\n-   |\n-LL | / fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-LL | | where\n-LL | |     G: Get<T>\n-LL | | {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 15:1\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 15:1\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ^^^^"}, {"sha": "3577dd59289e5ca7c3a42750cb845fcf3c4b162d", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f6f2235892853c152d08551975525b7ae79914/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=83f6f2235892853c152d08551975525b7ae79914", "patch": "@@ -1,23 +1,13 @@\n error: cannot infer an appropriate lifetime\n   --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |                ---- data with this lifetime...\n+LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^--- this is `'static`...\n+   |     ---------------^^^^--- ...is captured and required to be `'static` here\n    |\n-note: ...but this borrow...\n-  --> $DIR/dyn-trait-underscore.rs:8:14\n-   |\n-LL |     Box::new(items.iter())\n-   |              ^^^^^\n-note: ...can't outlive the anonymous lifetime #1 defined on the function body at 6:1\n-  --> $DIR/dyn-trait-underscore.rs:6:1\n-   |\n-LL | / fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-LL | |     Box::new(items.iter())\n-LL | | }\n-   | |_^\n-help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 6:1\n+help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 6:1\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n    |                                                   ^^^^"}]}