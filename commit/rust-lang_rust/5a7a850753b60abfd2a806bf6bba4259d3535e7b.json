{"sha": "5a7a850753b60abfd2a806bf6bba4259d3535e7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2E4NTA3NTNiNjBhYmZkMmE4MDZiZjZiYmE0MjU5ZDM1MzVlN2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-05-20T10:19:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T15:33:05Z"}, "message": "move leak-check to during coherence, candidate eval\n\nIn particular, it no longer occurs during the subtyping check. This is\nimportant for enabling lazy normalization, because the subtyping check\nwill be producing sub-obligations that could affect its results.\n\nConsider an example like\n\n    for<'a> fn(<&'a as Mirror>::Item) =\n      fn(&'b u8)\n\nwhere `<T as Mirror>::Item = T` for all `T`. We will wish to produce a\nnew subobligation like\n\n    <'!1 as Mirror>::Item = &'b u8\n\nThis will, after being solved, ultimately yield a constraint that `'!1\n= 'b` which will fail. But with the leak-check being performed on\nsubtyping, there is no opportunity to normalize `<'!1 as\nMirror>::Item` (unless we invoke that normalization directly from\nwithin subtyping, and I would prefer that subtyping and unification\nare distinct operations rather than part of the trait solving stack).\n\nThe reason to keep the leak check during coherence and trait\nevaluation is partly for backwards compatibility. The coherence change\npermits impls for `fn(T)` and `fn(&T)` to co-exist, and the trait\nevaluation change means that we can distinguish those two cases\nwithout ambiguity errors. It also avoids recreating #57639, where we\nwere incorrectly choosing a where clause that would have failed the\nleak check over the impl which succeeds.\n\nThe other reason to keep the leak check in those places is that I\nthink it is actually close to the model we want. To the point, I think\nthe trait solver ought to have the job of \"breaking down\"\nhigher-ranked region obligation like ``!1: '2` into into region\nobligations that operate on things in the root universe, at which\npoint they should be handed off to polonius. The leak check isn't\n*really* doing that -- these obligations are still handed to the\nregion solver to process -- but if/when we do adopt that model, the\ndecision to pass/fail would be happening in roughly this part of the\ncode.\n\nThis change had somewhat more side-effects than I anticipated. It\nseems like there are cases where the leak-check was not being enforced\nduring method proving and trait selection. I haven't quite tracked\nthis down but I think it ought to be documented, so that we know what\nprecisely we are committing to.\n\nOne surprising test was `issue-30786.rs`. The behavior there seems a\nbit \"fishy\" to me, but the problem is not related to the leak check\nchange as far as I can tell, but more to do with the closure signature\ninference code and perhaps the associated type projection, which\ntogether seem to be conspiring to produce an unexpected\nsignature. Nonetheless, it is an example of where changing the\nleak-check can have some unexpected consequences: we're now failing to\nresolve a method earlier than we were, which suggests we might change\nsome method resolutions that would have been ambiguous to be\nsuccessful.\n\nTODO:\n\n* figure out remainig test failures\n* add new coherence tests for the patterns we ARE disallowing", "tree": {"sha": "9748a6a3e7991503d0d3660206c14837b7d7fcfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9748a6a3e7991503d0d3660206c14837b7d7fcfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7a850753b60abfd2a806bf6bba4259d3535e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7a850753b60abfd2a806bf6bba4259d3535e7b", "html_url": "https://github.com/rust-lang/rust/commit/5a7a850753b60abfd2a806bf6bba4259d3535e7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7a850753b60abfd2a806bf6bba4259d3535e7b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2cf9944831f15b1940da85c8fb1b419dec9f074", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cf9944831f15b1940da85c8fb1b419dec9f074", "html_url": "https://github.com/rust-lang/rust/commit/f2cf9944831f15b1940da85c8fb1b419dec9f074"}], "stats": {"total": 1087, "additions": 511, "deletions": 576}, "files": [{"sha": "b6251e34008a36fe922e63b9cc4dd87cd9280857", "filename": "src/librustc_infer/infer/higher_ranked/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n \n         let span = self.trace.cause.span;\n \n-        self.infcx.commit_if_ok(|snapshot| {\n+        self.infcx.commit_if_ok(|_| {\n             // First, we instantiate each bound region in the supertype with a\n             // fresh placeholder region.\n             let (b_prime, _) = self.infcx.replace_bound_vars_with_placeholders(b);\n@@ -48,8 +48,6 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n             // Compare types now that bound regions have been replaced.\n             let result = self.sub(a_is_expected).relate(&a_prime, &b_prime)?;\n \n-            self.infcx.leak_check(!a_is_expected, snapshot)?;\n-\n             debug!(\"higher_ranked_sub: OK result={:?}\", result);\n \n             Ok(ty::Binder::bind(result))\n@@ -75,7 +73,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let next_universe = self.create_next_universe();\n+        // Figure out what the next universe will be, but don't actually create\n+        // it until after we've done the substitution (in particular there may\n+        // be no bound variables). This is a performance optimization, since the\n+        // leak check for example can be skipped if no new universes are created\n+        // (i.e., if there are no placeholders).\n+        let next_universe = self.universe().next_universe();\n \n         let fld_r = |br| {\n             self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n@@ -103,6 +106,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let (result, map) = self.tcx.replace_bound_vars(binder, fld_r, fld_t, fld_c);\n \n+        // If there were higher-ranked regions to replace, then actually create\n+        // the next universe (this avoids needlessly creating universes).\n+        if !map.is_empty() {\n+            let n_u = self.create_next_universe();\n+            assert_eq!(n_u, next_universe);\n+        }\n+\n         debug!(\n             \"replace_bound_vars_with_placeholders(\\\n              next_universe={:?}, \\"}, {"sha": "32e708bf52b32fc2568ab8ad3f83e94a314a4878", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -286,6 +286,7 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n         placeholder: ty::PlaceholderRegion,\n         other_region: ty::Region<'tcx>,\n     ) -> TypeError<'tcx> {\n+        debug!(\"error: placeholder={:?}, other_region={:?}\", placeholder, other_region);\n         if self.overly_polymorphic {\n             return TypeError::RegionsOverlyPolymorphic(placeholder.name, other_region);\n         } else {"}, {"sha": "3ec7fe2bf25c68f2635fb64f117a8487ee374bde", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -120,12 +120,13 @@ fn overlap<'cx, 'tcx>(\n     debug!(\"overlap(a_def_id={:?}, b_def_id={:?})\", a_def_id, b_def_id);\n \n     selcx.infcx().probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {\n-        overlap_within_probe(selcx, a_def_id, b_def_id, snapshot)\n+        overlap_within_probe(selcx, skip_leak_check, a_def_id, b_def_id, snapshot)\n     })\n }\n \n fn overlap_within_probe(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n+    skip_leak_check: SkipLeakCheck,\n     a_def_id: DefId,\n     b_def_id: DefId,\n     snapshot: &CombinedSnapshot<'_, 'tcx>,\n@@ -180,6 +181,13 @@ fn overlap_within_probe(\n         return None;\n     }\n \n+    if !skip_leak_check.is_yes() {\n+        if let Err(_) = infcx.leak_check(true, snapshot) {\n+            debug!(\"overlap: leak check failed\");\n+            return None;\n+        }\n+    }\n+\n     let impl_header = selcx.infcx().resolve_vars_if_possible(&a_impl_header);\n     let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n     debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);"}, {"sha": "ae255c22f9dcaf09f054c5af045c53de4e83ed9e", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -298,11 +298,7 @@ impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n     fn fold<T: TypeFoldable<'tcx>>(&mut self, value: &T) -> T {\n         let value = self.selcx.infcx().resolve_vars_if_possible(value);\n \n-        if !value.has_projections() {\n-            value\n-        } else {\n-            value.fold_with(self)\n-        }\n+        if !value.has_projections() { value } else { value.fold_with(self) }\n     }\n }\n "}, {"sha": "e5960e731033f0f0852ad09d42c618c975a64157", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -347,6 +347,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {\n             let result = op(self)?;\n+\n+            match self.infcx.leak_check(true, snapshot) {\n+                Ok(()) => {}\n+                Err(_) => return Ok(EvaluatedToErr),\n+            }\n+\n             match self.infcx.region_constraints_added_in_snapshot(snapshot) {\n                 None => Ok(result),\n                 Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),\n@@ -2402,11 +2408,7 @@ impl<'o, 'tcx> TraitObligationStackList<'o, 'tcx> {\n     }\n \n     fn depth(&self) -> usize {\n-        if let Some(head) = self.head {\n-            head.depth\n-        } else {\n-            0\n-        }\n+        if let Some(head) = self.head { head.depth } else { 0 }\n     }\n }\n "}, {"sha": "315d180844d7adf4d1abb07a3810c04de998eec9", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -74,7 +74,7 @@ LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n    |                                                           ------------- required by this bound in `tuple_two`\n ...\n LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'y, found concrete lifetime\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:107:18"}, {"sha": "9462121bdf203d44c984ba4b13158a9a3869ca9c", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,23 +1,23 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:53:21\n+  --> $DIR/project-fn-ret-invariant.rs:54:22\n    |\n-LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |                                     --------     --------------------\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n-LL |    let a = bar(foo, y);\n-   |                     ^ ...but data from `x` is returned here\n+LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |                                      --------     --------------------\n+   |                                      |\n+   |                                      this parameter and the return type are declared with different lifetimes...\n+LL |     let a = bar(foo, y);\n+   |                      ^ ...but data from `x` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:54:21\n+  --> $DIR/project-fn-ret-invariant.rs:56:9\n    |\n-LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |                        --------                  --------------------\n-   |                        |\n-   |                        this parameter and the return type are declared with different lifetimes...\n-LL |    let a = bar(foo, y);\n-LL |    let b = bar(foo, x);\n-   |                     ^ ...but data from `y` is returned here\n+LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |                                      --------     --------------------\n+   |                                      |\n+   |                                      this parameter and the return type are declared with different lifetimes...\n+...\n+LL |     (a, b)\n+   |         ^ ...but data from `x` is returned here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2156ecb17393f2e96bb850086d7ea8552665cb66", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.ok.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,8 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/project-fn-ret-invariant.rs:59:1\n+  --> $DIR/project-fn-ret-invariant.rs:60:1\n    |\n-LL | fn main() { }\n-   | ^^^^^^^^^^^^^\n+LL | fn main() {}\n+   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "64b5722390858600908dc9444c69a6953c0d3af2", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,13 +1,13 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:39:19\n+  --> $DIR/project-fn-ret-invariant.rs:40:20\n    |\n-LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |                               --------     --------------------\n-   |                               |\n-   |                               this parameter and the return type are declared with different lifetimes...\n+LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |                                --------     --------------------\n+   |                                |\n+   |                                this parameter and the return type are declared with different lifetimes...\n ...\n-LL |    let b = bar(f, y);\n-   |                   ^ ...but data from `x` is returned here\n+LL |     let b = bar(f, y);\n+   |                    ^ ...but data from `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "0034d796826de662b16e8aec226e8e3bfcaf8ada", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,60 +1,61 @@\n #![feature(unboxed_closures)]\n #![feature(rustc_attrs)]\n-\n // Test for projection cache. We should be able to project distinct\n // lifetimes from `foo` as we reinstantiate it multiple times, but not\n // if we do it just once. In this variant, the region `'a` is used in\n // an invariant position, which affects the results.\n \n // revisions: ok oneuse transmute krisskross\n-\n #![allow(dead_code, unused_variables)]\n \n use std::marker::PhantomData;\n \n struct Type<'a> {\n     // Invariant\n-    data: PhantomData<fn(&'a u32) -> &'a u32>\n+    data: PhantomData<fn(&'a u32) -> &'a u32>,\n }\n \n-fn foo<'a>() -> Type<'a> { loop { } }\n+fn foo<'a>() -> Type<'a> {\n+    loop {}\n+}\n \n fn bar<T>(t: T, x: T::Output) -> T::Output\n-    where T: FnOnce<()>\n+where\n+    T: FnOnce<()>,\n {\n     t()\n }\n \n #[cfg(ok)] // two instantiations: OK\n-fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     let a = bar(foo, x);\n     let b = bar(foo, y);\n     (a, b)\n }\n \n #[cfg(oneuse)] // one instantiation: BAD\n-fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   let f = foo; // <-- No consistent type can be inferred for `f` here.\n-   let a = bar(f, x);\n-   let b = bar(f, y); //[oneuse]~ ERROR lifetime mismatch [E0623]\n-   (a, b)\n+fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+    let a = bar(f, x);\n+    let b = bar(f, y); //[oneuse]~ ERROR lifetime mismatch [E0623]\n+    (a, b)\n }\n \n #[cfg(transmute)] // one instantiations: BAD\n-fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n-   // Cannot instantiate `foo` with any lifetime other than `'a`,\n-   // since it is provided as input.\n+fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n+    // Cannot instantiate `foo` with any lifetime other than `'a`,\n+    // since it is provided as input.\n \n-   bar(foo, x) //[transmute]~ ERROR E0495\n+    bar(foo, x) //[transmute]~ ERROR E0495\n }\n \n #[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n-fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   let a = bar(foo, y); //[krisskross]~ ERROR E0623\n-   let b = bar(foo, x); //[krisskross]~ ERROR E0623\n-   (a, b)\n+fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+    let b = bar(foo, x);\n+    (a, b) //[krisskross]~ ERROR E0623\n }\n \n #[rustc_error]\n-fn main() { }\n+fn main() {}\n //[ok]~^ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "ef57f9e0bc480049ba6ed9bfab821693693f1e1f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,27 +1,27 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/project-fn-ret-invariant.rs:48:4\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/project-fn-ret-invariant.rs:49:9\n    |\n-LL |    bar(foo, x)\n-   |    ^^^^^^^^^^^\n+LL |     bar(foo, x)\n+   |         ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 44:8...\n-  --> $DIR/project-fn-ret-invariant.rs:44:8\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 45:8...\n+  --> $DIR/project-fn-ret-invariant.rs:45:8\n    |\n-LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |        ^^\n note: ...so that the expression is assignable\n-  --> $DIR/project-fn-ret-invariant.rs:48:13\n+  --> $DIR/project-fn-ret-invariant.rs:49:14\n    |\n-LL |    bar(foo, x)\n-   |             ^\n+LL |     bar(foo, x)\n+   |              ^\n    = note: expected `Type<'_>`\n               found `Type<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the expression is assignable\n-  --> $DIR/project-fn-ret-invariant.rs:48:4\n+  --> $DIR/project-fn-ret-invariant.rs:49:5\n    |\n-LL |    bar(foo, x)\n-   |    ^^^^^^^^^^^\n+LL |     bar(foo, x)\n+   |     ^^^^^^^^^^^\n    = note: expected `Type<'static>`\n               found `Type<'_>`\n "}, {"sha": "c81c40c18b45b2f4f8ac9322a50a55536de567a8", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,10 +1,12 @@\n fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-    where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+where\n+    F: for<'a> FnOnce(fn(&'a u32), &i32),\n {\n }\n \n fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-    where F: FnOnce(fn(&u32), &i32)\n+where\n+    F: FnOnce(fn(&u32), &i32),\n {\n }\n \n@@ -28,14 +30,14 @@ fn expect_free_supply_bound() {\n     // Here, we are given a function whose region is bound at closure level,\n     // but we expect one bound in the argument. Error results.\n     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-    //~^ ERROR type mismatch\n+    //~^ ERROR mismatched types\n }\n \n fn expect_bound_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, we are given a `fn(&u32)` but we expect a `fn(&'x\n     // u32)`. In principle, this could be ok, but we demand equality.\n     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-    //~^ ERROR type mismatch\n+    //~^ ERROR mismatched types\n }\n \n fn expect_bound_supply_free_from_closure() {\n@@ -44,16 +46,15 @@ fn expect_bound_supply_free_from_closure() {\n     // the argument level.\n     type Foo<'a> = fn(&'a u32);\n     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-    //~^ ERROR type mismatch\n+        //~^ ERROR mismatched types\n     });\n }\n \n fn expect_bound_supply_bound<'x>(x: &'x u32) {\n     // No error in this case. The supplied type supplies the bound\n     // regions, and hence we are able to figure out the type of `y`\n     // from the expected type\n-    with_closure_expecting_fn_with_bound_region(|x: for<'z> fn(&'z u32), y| {\n-    });\n+    with_closure_expecting_fn_with_bound_region(|x: for<'z> fn(&'z u32), y| {});\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "0de15dfa7357d349a99dcc340cc9db6c8548e1e4", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,81 +1,68 @@\n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:14:52\n+  --> $DIR/expect-fn-supply-fn.rs:16:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n-note: the anonymous lifetime #2 defined on the body at 14:48...\n-  --> $DIR/expect-fn-supply-fn.rs:14:48\n+note: the anonymous lifetime #2 defined on the body at 16:48...\n+  --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 11:36\n-  --> $DIR/expect-fn-supply-fn.rs:11:36\n+note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 13:36\n+  --> $DIR/expect-fn-supply-fn.rs:13:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:14:52\n+  --> $DIR/expect-fn-supply-fn.rs:16:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n-note: the lifetime `'x` as defined on the function body at 11:36...\n-  --> $DIR/expect-fn-supply-fn.rs:11:36\n+note: the lifetime `'x` as defined on the function body at 13:36...\n+  --> $DIR/expect-fn-supply-fn.rs:13:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 14:48\n-  --> $DIR/expect-fn-supply-fn.rs:14:48\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 16:48\n+  --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:30:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:32:52\n    |\n-LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-   |    ------------------------------------------ required by a bound in this\n-LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n-...\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n+   |                                                    ^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `for<'r> fn(&'r u32)`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:37:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:39:53\n    |\n-LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    ------------------------------------------- required by a bound in this\n-LL |     where F: FnOnce(fn(&u32), &i32)\n-   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n-...\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |                                                     ^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&'x u32)`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:46:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:48:53\n    |\n-LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    ------------------------------------------- required by a bound in this\n-LL |     where F: FnOnce(fn(&u32), &i32)\n-   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n-...\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |                                                     ^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&u32)`\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0308, E0631.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "af1e37ba867dee0327622dc1aec9f4c891e7d462", "filename": "src/test/ui/closures/issue-41366.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -7,7 +7,6 @@ impl<'g> T<'g> for u32 {\n }\n \n fn main() {\n-    (&|_|()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n+    (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n     //~^ ERROR: type mismatch in closure arguments\n-    //~| ERROR: type mismatch resolving\n }"}, {"sha": "9c4b7d529ef4dff52555b5edd6b045cda1ae6f00", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,23 +1,14 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-41366.rs:10:5\n    |\n-LL |     (&|_|()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n-   |     ^^-----^\n+LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n+   |     ^^------^\n    |     | |\n-   |     | found signature of `fn(_) -> _`\n-   |     expected signature of `for<'x> fn(<u32 as T<'x>>::V) -> _`\n+   |     | found signature of `fn(u16) -> _`\n+   |     expected signature of `fn(<u32 as T<'x>>::V) -> _`\n    |\n    = note: required for the cast to the object type `dyn for<'x> std::ops::Fn(<u32 as T<'x>>::V)`\n \n-error[E0271]: type mismatch resolving `for<'x> <[closure@$DIR/issue-41366.rs:10:7: 10:12] as std::ops::FnOnce<(<u32 as T<'x>>::V,)>>::Output == ()`\n-  --> $DIR/issue-41366.rs:10:5\n-   |\n-LL |     (&|_|()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n-   |     ^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n-   |\n-   = note: required for the cast to the object type `dyn for<'x> std::ops::Fn(<u32 as T<'x>>::V)`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "a8f657eaabe47b8ba69ffeaea6f4cb5b70becdcd", "filename": "src/test/ui/generator/resume-arg-late-bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -13,5 +13,6 @@ fn main() {\n         *arg = true;\n     };\n     test(gen);\n-    //~^ ERROR type mismatch in function arguments\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n }"}, {"sha": "c379d9eae8ecdc375dba5d70bd3e247eb0b7140a", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,15 +1,21 @@\n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/resume-arg-late-bound.rs:15:10\n+error[E0308]: mismatched types\n+  --> $DIR/resume-arg-late-bound.rs:15:5\n    |\n-LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n-   |                 ------------------------------- required by this bound in `test`\n-...\n LL |     test(gen);\n-   |          ^^^\n-   |          |\n-   |          expected signature of `for<'a> fn(&'a mut bool) -> _`\n-   |          found signature of `fn(&mut bool) -> _`\n+   |     ^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'a> std::ops::Generator<&'a mut bool>`\n+              found type `std::ops::Generator<&mut bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/resume-arg-late-bound.rs:15:5\n+   |\n+LL |     test(gen);\n+   |     ^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'a> std::ops::Generator<&'a mut bool>`\n+              found type `std::ops::Generator<&mut bool>`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0631`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "92a85825030c27bf80e890c9b4ce3125c777f2bf", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:45:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |                            ^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n LL | | for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,17 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n-LL | | for<'a>    fn(&'a u32, &'a u32)) }\n-   | |__________________________________- in this macro invocation\n-   |\n-   = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n-              found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:104:1\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n LL | / fn main() {\n LL | |"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:104:1\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n LL | / fn main() {\n LL | |"}, {"sha": "98f5bff732762e808b1b6f20bd0e82d67ab286cf", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:45:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |                            ^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | | fn(&'x u32)) }"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:104:1\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n LL | / fn main() {\n LL | |"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:104:1\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n LL | / fn main() {\n LL | |"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:104:1\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n LL | / fn main() {\n LL | |"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,17 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n-LL | | for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n-   | |__________________________________________________- in this macro invocation\n-   |\n-   = note: expected enum `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n-              found enum `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "100ba6ac27e2530f11ce2d8c3e1e192852b1efef", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:45:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |                            ^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:104:1\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n LL | / fn main() {\n LL | |"}, {"sha": "948375566104becb71af12379dc710934c685e3c", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:104:1\n+  --> $DIR/hr-subtype.rs:102:1\n    |\n LL | / fn main() {\n LL | |"}, {"sha": "ad9500eedca935efa09aa76beb3ba29d6b30897b", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -48,8 +48,6 @@ macro_rules! check {\n             //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n             //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR\n             //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR\n-            //[bound_a_b_vs_bound_a]~^^^^^^ ERROR mismatched types\n-            //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^ ERROR\n         }\n     };\n }\n@@ -109,4 +107,6 @@ fn main() {\n     //[free_x_vs_free_x]~^^^^^ ERROR fatal error triggered by #[rustc_error]\n     //[bound_co_a_b_vs_bound_co_a]~^^^^^^ ERROR\n     //[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR\n+    //[bound_a_b_vs_bound_a]~^^^^^^^^ ERROR\n+    //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR\n }"}, {"sha": "9914783d9767d5d99ecd0790eae8597cc1714265", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -2,9 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-exists-forall-fn.rs:17:34\n    |\n LL |     let _: for<'b> fn(&'b u32) = foo();\n-   |            -------------------   ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n-   |            |\n-   |            expected due to this\n+   |                                  ^^^^^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'b> fn(&'b u32)`\n               found fn pointer `fn(&u32)`"}, {"sha": "90a7cadca41b7e43336a55b4674122aa0313e725", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,17 +1,43 @@\n-error: implementation of `Stream` is not general enough\n-  --> $DIR/issue-30786.rs:108:22\n+error[E0599]: no method named `filterx` found for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` in the current scope\n+  --> $DIR/issue-30786.rs:128:22\n    |\n-LL | / pub trait Stream {\n-LL | |     type Item;\n-LL | |     fn next(self) -> Option<Self::Item>;\n-LL | | }\n-   | |_- trait `Stream` defined here\n+LL | pub struct Map<S, F> {\n+   | --------------------\n+   | |\n+   | method `filterx` not found for this\n+   | doesn't satisfy `_: StreamExt`\n ...\n-LL |       let map = source.map(|x: &_| x);\n-   |                        ^^^ implementation of `Stream` is not general enough\n+LL |     let filter = map.filterx(|x: &_| true);\n+   |                      ^^^^^^^ method not found in `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`\n    |\n-   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for any lifetime `'0`...\n-   = note: ...but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for some specific lifetime `'1`\n+   = note: the method `filterx` exists but the following trait bounds were not satisfied:\n+           `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+           which is required by `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n+           `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+           which is required by `&Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n+           `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+           which is required by `&mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n \n-error: aborting due to previous error\n+error[E0599]: no method named `countx` found for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` in the current scope\n+  --> $DIR/issue-30786.rs:141:24\n+   |\n+LL | pub struct Filter<S, F> {\n+   | -----------------------\n+   | |\n+   | method `countx` not found for this\n+   | doesn't satisfy `_: StreamExt`\n+...\n+LL |     let count = filter.countx();\n+   |                        ^^^^^^ method not found in `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`\n+   |\n+   = note: the method `countx` exists but the following trait bounds were not satisfied:\n+           `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+           which is required by `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+           `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+           which is required by `&Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+           `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+           which is required by `&mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "90a7cadca41b7e43336a55b4674122aa0313e725", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 43, "deletions": 56, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,56 +1,43 @@\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:108:15\n-   |\n-LL |     let map = source.map(|x: &_| x);\n-   |               ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:114:18\n-   |\n-LL |     let filter = map.filter(|x: &_| true);\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:114:18\n-   |\n-LL |     let filter = map.filter(|x: &_| true);\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:114:18\n-   |\n-LL |     let filter = map.filter(|x: &_| true);\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:114:18\n-   |\n-LL |     let filter = map.filter(|x: &_| true);\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:119:17\n-   |\n-LL |     let count = filter.count(); // Assert that we still have a valid stream.\n-   |                 ^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:119:17\n-   |\n-LL |     let count = filter.count(); // Assert that we still have a valid stream.\n-   |                 ^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:119:17\n-   |\n-LL |     let count = filter.count(); // Assert that we still have a valid stream.\n-   |                 ^^^^^^^^^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:119:17\n-   |\n-LL |     let count = filter.count(); // Assert that we still have a valid stream.\n-   |                 ^^^^^^^^^^^^^^\n-\n-error: aborting due to 9 previous errors\n-\n+error[E0599]: no method named `filterx` found for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` in the current scope\n+  --> $DIR/issue-30786.rs:128:22\n+   |\n+LL | pub struct Map<S, F> {\n+   | --------------------\n+   | |\n+   | method `filterx` not found for this\n+   | doesn't satisfy `_: StreamExt`\n+...\n+LL |     let filter = map.filterx(|x: &_| true);\n+   |                      ^^^^^^^ method not found in `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`\n+   |\n+   = note: the method `filterx` exists but the following trait bounds were not satisfied:\n+           `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+           which is required by `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n+           `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+           which is required by `&Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n+           `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+           which is required by `&mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n+\n+error[E0599]: no method named `countx` found for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` in the current scope\n+  --> $DIR/issue-30786.rs:141:24\n+   |\n+LL | pub struct Filter<S, F> {\n+   | -----------------------\n+   | |\n+   | method `countx` not found for this\n+   | doesn't satisfy `_: StreamExt`\n+...\n+LL |     let count = filter.countx();\n+   |                        ^^^^^^ method not found in `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`\n+   |\n+   = note: the method `countx` exists but the following trait bounds were not satisfied:\n+           `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+           which is required by `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+           `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+           which is required by `&Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+           `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+           which is required by `&mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "8ce5c090b543edcd646a7c3d65809e8323ab9b53", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 62, "deletions": 40, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -16,7 +16,7 @@\n \n //[nll]compile-flags: -Z borrowck=mir\n \n-pub trait Stream { //[migrate]~ NOTE trait `Stream` defined here\n+pub trait Stream {\n     type Item;\n     fn next(self) -> Option<Self::Item>;\n }\n@@ -37,8 +37,9 @@ pub struct Map<S, F> {\n }\n \n impl<'a, A, F, T> Stream for &'a mut Map<A, F>\n-where &'a mut A: Stream,\n-      F: FnMut(<&'a mut A as Stream>::Item) -> T,\n+where\n+    &'a mut A: Stream,\n+    F: FnMut(<&'a mut A as Stream>::Item) -> T,\n {\n     type Item = T;\n     fn next(self) -> Option<T> {\n@@ -55,8 +56,9 @@ pub struct Filter<S, F> {\n }\n \n impl<'a, A, F, T> Stream for &'a mut Filter<A, F>\n-where for<'b> &'b mut A: Stream<Item=T>, // <---- BAD\n-      F: FnMut(&T) -> bool,\n+where\n+    for<'b> &'b mut A: Stream<Item = T>, // <---- BAD\n+    F: FnMut(&T) -> bool,\n {\n     type Item = <&'a mut A as Stream>::Item;\n     fn next(self) -> Option<Self::Item> {\n@@ -69,29 +71,29 @@ where for<'b> &'b mut A: Stream<Item=T>, // <---- BAD\n     }\n }\n \n-pub trait StreamExt where for<'b> &'b mut Self: Stream {\n-    fn map<F>(self, func: F) -> Map<Self, F>\n-    where Self: Sized,\n-    for<'a> &'a mut Map<Self, F>: Stream,\n+pub trait StreamExt\n+where\n+    for<'b> &'b mut Self: Stream,\n+{\n+    fn mapx<F>(self, func: F) -> Map<Self, F>\n+    where\n+        Self: Sized,\n+        for<'a> &'a mut Map<Self, F>: Stream,\n     {\n-        Map {\n-            func: func,\n-            stream: self,\n-        }\n+        Map { func: func, stream: self }\n     }\n \n-    fn filter<F>(self, func: F) -> Filter<Self, F>\n-    where Self: Sized,\n-    for<'a> &'a mut Filter<Self, F>: Stream,\n+    fn filterx<F>(self, func: F) -> Filter<Self, F>\n+    where\n+        Self: Sized,\n+        for<'a> &'a mut Filter<Self, F>: Stream,\n     {\n-        Filter {\n-            func: func,\n-            stream: self,\n-        }\n+        Filter { func: func, stream: self }\n     }\n \n-    fn count(mut self) -> usize\n-    where Self: Sized,\n+    fn countx(mut self) -> usize\n+    where\n+        Self: Sized,\n     {\n         let mut count = 0;\n         while let Some(_) = self.next() {\n@@ -101,24 +103,44 @@ pub trait StreamExt where for<'b> &'b mut Self: Stream {\n     }\n }\n \n-impl<T> StreamExt for T where for<'a> &'a mut T: Stream { }\n+impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n \n-fn main() {\n+fn identity<T>(x: &T) -> &T {\n+    x\n+}\n+\n+fn variant1() {\n     let source = Repeat(10);\n-    let map = source.map(|x: &_| x);\n-    //[nll]~^ ERROR higher-ranked subtype error\n-    //[migrate]~^^ ERROR implementation of `Stream` is not general enough\n-    //[migrate]~| NOTE  `Stream` would have to be implemented for the type `&'0 mut Map\n-    //[migrate]~| NOTE  but `Stream` is actually implemented for the type `&'1\n-    //[migrate]~| NOTE  implementation of `Stream` is not general enough\n-    let filter = map.filter(|x: &_| true);\n-    //[nll]~^ ERROR higher-ranked subtype error\n-    //[nll]~| ERROR higher-ranked subtype error\n-    //[nll]~| ERROR higher-ranked subtype error\n-    //[nll]~| ERROR higher-ranked subtype error\n-    let count = filter.count(); // Assert that we still have a valid stream.\n-    //[nll]~^ ERROR higher-ranked subtype error\n-    //[nll]~| ERROR higher-ranked subtype error\n-    //[nll]~| ERROR higher-ranked subtype error\n-    //[nll]~| ERROR higher-ranked subtype error\n+\n+    // Here, the call to `mapx` returns a type `T` to which `StreamExt`\n+    // is not applicable, because `for<'b> &'b mut T: Stream`) doesn't hold.\n+    //\n+    // More concretely, the type `T` is `Map<Repeat, Closure>`, and\n+    // the where clause doesn't hold because the signature of the\n+    // closure gets inferred to a signature like `|&'_ Stream| -> &'_`\n+    // for some specific `'_`, rather than a more generic\n+    // signature.\n+    //\n+    // Why *exactly* we opt for this signature is a bit unclear to me,\n+    // we deduce it somehow from a reuqirement that `Map: Stream` I\n+    // guess.\n+    let map = source.mapx(|x: &_| x);\n+    let filter = map.filterx(|x: &_| true);\n+    //[migrate]~^ ERROR no method named `filterx`\n+    //[nll]~^^ ERROR no method named `filterx`\n }\n+\n+fn variant2() {\n+    let source = Repeat(10);\n+\n+    // Here, we use a function, which is not subject to the vagaries\n+    // of closure signature inference. In this case, we get the error\n+    // on `countx` as, I think, the test originally expected.\n+    let map = source.mapx(identity);\n+    let filter = map.filterx(|x: &_| true);\n+    let count = filter.countx();\n+    //[migrate]~^ ERROR no method named `countx`\n+    //[nll]~^^ ERROR no method named `countx`\n+}\n+\n+fn main() {}"}, {"sha": "3eb3482ac910ea030b1c72c1ced510d5175160dd", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-40000.rs:6:9\n    |\n LL |     foo(bar);\n-   |         ^^^ expected concrete lifetime, found bound lifetime parameter\n+   |         ^^^ one type is more general than the other\n    |\n-   = note: expected struct `std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r i32) + 'static)>`\n-              found struct `std::boxed::Box<dyn std::ops::Fn(_)>`\n+   = note: expected trait object `dyn for<'r> std::ops::Fn(&'r i32)`\n+              found trait object `dyn std::ops::Fn(&i32)`\n \n error: aborting due to previous error\n "}, {"sha": "99cae46fd9cf2b9c33d7f0704ee44d6b0ba6e43f", "filename": "src/test/ui/issues/issue-43623.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-43623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-43623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -9,11 +9,12 @@ impl<'a> Trait<'a> for Type {\n }\n \n pub fn break_me<T, F>(f: F)\n-where T: for<'b> Trait<'b>,\n-      F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n+where\n+    T: for<'b> Trait<'b>,\n+    F: for<'b> FnMut(<T as Trait<'b>>::Assoc),\n+{\n     break_me::<Type, fn(_)>;\n     //~^ ERROR: type mismatch in function arguments\n-    //~| ERROR: type mismatch resolving\n }\n \n fn main() {}"}, {"sha": "80aca482b3d29b8c8e614353bd7e9f4360d02178", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,29 +1,18 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-43623.rs:14:5\n+  --> $DIR/issue-43623.rs:16:5\n    |\n LL | pub fn break_me<T, F>(f: F)\n    |        -------- required by a bound in this\n-LL | where T: for<'b> Trait<'b>,\n-LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n-   |          -------------------------------------- required by this bound in `break_me`\n+...\n+LL |     F: for<'b> FnMut(<T as Trait<'b>>::Assoc),\n+   |                ------------------------------ required by this bound in `break_me`\n+LL | {\n LL |     break_me::<Type, fn(_)>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n-   |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n-   |     found signature of `fn(_) -> _`\n+   |     expected signature of `fn(<Type as Trait<'b>>::Assoc) -> _`\n+   |     found signature of `fn(()) -> _`\n \n-error[E0271]: type mismatch resolving `for<'b> <fn(_) as std::ops::FnOnce<(<Type as Trait<'b>>::Assoc,)>>::Output == ()`\n-  --> $DIR/issue-43623.rs:14:5\n-   |\n-LL | pub fn break_me<T, F>(f: F)\n-   |        -------- required by a bound in this\n-LL | where T: for<'b> Trait<'b>,\n-LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n-   |                  ------------------------------ required by this bound in `break_me`\n-LL |     break_me::<Type, fn(_)>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "9c2b2dc9f4daec0b3fc68c30a25d26694002bdc1", "filename": "src/test/ui/issues/issue-60283.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-60283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-60283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -7,11 +7,13 @@ impl<'a> Trait<'a> for () {\n }\n \n pub fn foo<T, F>(_: T, _: F)\n-where T: for<'a> Trait<'a>,\n-      F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+where\n+    T: for<'a> Trait<'a>,\n+    F: for<'a> FnMut(<T as Trait<'a>>::Item),\n+{\n+}\n \n fn main() {\n     foo((), drop)\n     //~^ ERROR type mismatch in function arguments\n-    //~| ERROR type mismatch resolving\n }"}, {"sha": "ad679bfa22063cd39d21f78c34dd65002fba3cf5", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,31 +1,18 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-60283.rs:14:13\n+  --> $DIR/issue-60283.rs:17:13\n    |\n LL | pub fn foo<T, F>(_: T, _: F)\n    |        --- required by a bound in this\n-LL | where T: for<'a> Trait<'a>,\n-LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   |          ------------------------------------- required by this bound in `foo`\n+...\n+LL |     F: for<'a> FnMut(<T as Trait<'a>>::Item),\n+   |                ----------------------------- required by this bound in `foo`\n ...\n LL |     foo((), drop)\n    |             ^^^^\n    |             |\n-   |             expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n-   |             found signature of `fn(_) -> _`\n-\n-error[E0271]: type mismatch resolving `for<'a> <fn(_) {std::mem::drop::<_>} as std::ops::FnOnce<(<() as Trait<'a>>::Item,)>>::Output == ()`\n-  --> $DIR/issue-60283.rs:14:5\n-   |\n-LL | pub fn foo<T, F>(_: T, _: F)\n-   |        --- required by a bound in this\n-LL | where T: for<'a> Trait<'a>,\n-LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   |                  ----------------------------- required by this bound in `foo`\n-...\n-LL |     foo((), drop)\n-   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+   |             expected signature of `fn(<() as Trait<'a>>::Item) -> _`\n+   |             found signature of `fn(()) -> _`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "5e24a99bcc3311503721d0ec05cc7133d060c0d1", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -3,21 +3,21 @@\n // error. However, now that we handle subtyping correctly, we no\n // longer get an error, because we recognize these two types as\n // equivalent!\n-//\n-// Whoops -- now that we reinstituted the leak-check, we get an error\n-// again.\n \n fn foo(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n+    // The two types above are actually equivalent. With the older\n+    // leak check, though, we didn't consider them as equivalent, and\n+    // hence we gave errors. But now we've fixed that.\n     let z = match 22 {\n         0 => x,\n-        _ => y, //~ ERROR `match` arms have incompatible types\n+        _ => y,\n     };\n }\n \n-fn bar(\n+fn foo_cast(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n@@ -28,5 +28,30 @@ fn bar(\n     };\n }\n \n+fn bar(\n+    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n+    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+) {\n+    // The two types above are not equivalent. With the older LUB/GLB\n+    // algorithm, this may have worked (I don't remember), but now it\n+    // doesn't because we require equality.\n+    let z = match 22 {\n+        0 => x,\n+        _ => y, //~ ERROR `match` arms have incompatible types\n+    };\n+}\n+\n+fn bar_cast(\n+    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n+    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+) {\n+    // But we can *upcast* explicitly the type of `x` and figure\n+    // things out:\n+    let z = match 22 {\n+        0 => x as for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+        _ => y,\n+    };\n+}\n+\n fn main() {\n }"}, {"sha": "f9ad4e5814eeb0d0c03aa2b1ed8bd70d4778bd07", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,17 +1,17 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-hr.rs:16:14\n+  --> $DIR/old-lub-glb-hr.rs:40:14\n    |\n LL |       let z = match 22 {\n    |  _____________-\n LL | |         0 => x,\n-   | |              - this is found to be of type `for<'r, 's> fn(&'r u8, &'s u8)`\n+   | |              - this is found to be of type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n LL | |         _ => y,\n-   | |              ^ expected bound lifetime parameter, found concrete lifetime\n+   | |              ^ one type is more general than the other\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note:    expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n-           found fn pointer `for<'a> fn(&'a u8, &'a u8)`\n+   = note: expected fn pointer `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+              found fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n \n error: aborting due to previous error\n "}, {"sha": "81f07df3f50bfbbc0f88539232909dffc1551e40", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,18 +1,25 @@\n-error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-object.rs:12:14\n+error[E0308]: mismatched types\n+  --> $DIR/old-lub-glb-object.rs:10:13\n    |\n LL |       let z = match 22 {\n-   |  _____________-\n+   |  _____________^\n LL | |         0 => x,\n-   | |              - this is found to be of type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n LL | |         _ => y,\n-   | |              ^ expected bound lifetime parameter 'a, found concrete lifetime\n LL | |     };\n-   | |_____- `match` arms have incompatible types\n+   | |_____^ one type is more general than the other\n    |\n-   = note:   expected type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n-           found reference `&dyn for<'a> Foo<&'a u8, &'a u8>`\n+   = note: expected trait object `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found trait object `dyn for<'a> Foo<&'a u8, &'a u8>`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/old-lub-glb-object.rs:22:14\n+   |\n+LL |         0 => x as &dyn for<'a> Foo<&'a u8, &'a u8>,\n+   |              ^ one type is more general than the other\n+   |\n+   = note: expected trait object `dyn for<'a> Foo<&'a u8, &'a u8>`\n+              found trait object `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "fd4463b63e10e506a74b607bf410e57866bedc53", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -8,5 +8,4 @@ fn main() {\n fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n     baz(f); //~ ERROR type mismatch\n-     //~| ERROR type mismatch\n }"}, {"sha": "503899af33ed76301551035fd738c8bce4e8d455", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -22,18 +22,6 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n \n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:10:9\n-   |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |           ------------- required by this bound in `baz`\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-LL |     baz(f);\n-   |         ^\n-   |         |\n-   |         expected signature of `for<'r> fn(*mut &'r u32) -> _`\n-   |         found signature of `fn(*mut &'a u32) -> _`\n-\n error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n@@ -43,7 +31,7 @@ LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0271, E0631.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "cb2cb228c62e1a842241bfee207bb9f95d20556f", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -6,5 +6,4 @@ fn baz<T: Foo>(_: T) {}\n \n fn main() {\n     baz(|_| ()); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n }"}, {"sha": "7fab9490ac93f4a5c1a2dfb0d26dc13f7019fce1", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -9,20 +9,6 @@ LL |     baz(|_| ());\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-mismatch.rs:8:5\n-   |\n-LL | fn baz<T: Foo>(_: T) {}\n-   |           --- required by this bound in `baz`\n-...\n-LL |     baz(|_| ());\n-   |     ^^^ ------ found signature of `fn(_) -> _`\n-   |     |\n-   |     expected signature of `for<'r> fn(&'r ()) -> _`\n-   |\n-   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "c9ce936c7d43fc06e0691eb6304ae940d71fd50e", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n    |\n LL |     want_G(baz);\n-   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n+   |            ^^^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n-                 found fn item `for<'r> fn(&'r S) -> &'r S {baz}`\n+              found fn pointer `for<'r> fn(&'r S) -> &'r S`\n \n error: aborting due to previous error\n "}, {"sha": "b83e07663faba54cd662b74a0010c5818830e8dc", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -20,12 +20,10 @@ error[E0308]: mismatched types\n   --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n-   |            |\n-   |            expected due to this\n+   |                                           ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c93f2890f1110082975608d909ee967f41d4c44b", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -31,12 +31,10 @@ error[E0308]: mismatched types\n   --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            -----------------------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n-   |            |\n-   |            expected due to this\n+   |                                                        ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-                 found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n+              found fn pointer `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2b2dd0dbbf2509ed209d24e1cf3963003fab6aed", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -20,12 +20,10 @@ error[E0308]: mismatched types\n   --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n-   |            |\n-   |            expected due to this\n+   |                                           ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0564d53b944e62746a0226df14938477681bc88c", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -8,7 +8,6 @@ fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n     &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n \n-\n struct SomeStruct<'x, 'y, 'z: 'x> {\n     foo: &'x Foo<'z>,\n     bar: &'x Bar<'z>,\n@@ -19,12 +18,12 @@ fn id<T>(t: T) -> T {\n     t\n }\n \n-static SOME_STRUCT: &SomeStruct = SomeStruct { //~ ERROR mismatched types\n+static SOME_STRUCT: &SomeStruct = SomeStruct {\n+    //~^ ERROR mismatched types\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n-    //~^ ERROR type mismatch in function arguments\n-    //~| ERROR type mismatch resolving\n+    //~^ ERROR type mismatch resolving\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "90dc7cbfa5521574a50456b6d9f34fd7844a95ec", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,46 +1,35 @@\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:22:35\n+  --> $DIR/rfc1623.rs:21:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = SomeStruct {\n    |  ___________________________________^\n+LL | |\n LL | |     foo: &Foo { bools: &[false, true] },\n LL | |     bar: &Bar { bools: &[true, true] },\n LL | |     f: &id,\n LL | |\n-LL | |\n LL | | };\n    | |_^ expected `&SomeStruct<'static, 'static, 'static>`, found struct `SomeStruct`\n    |\n help: consider borrowing here\n    |\n LL | static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+LL |\n LL |     foo: &Foo { bools: &[false, true] },\n LL |     bar: &Bar { bools: &[true, true] },\n LL |     f: &id,\n-LL |\n LL |\n  ...\n \n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/rfc1623.rs:25:8\n-   |\n-LL | fn id<T>(t: T) -> T {\n-   | ------------------- found signature of `fn(_) -> _`\n-...\n-LL |     f: &id,\n-   |        ^^^ expected signature of `for<'a, 'b> fn(&'a Foo<'b>) -> _`\n-   |\n-   = note: required for the cast to the object type `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n-\n-error[E0271]: type mismatch resolving `for<'a, 'b> <fn(_) -> _ {id::<_>} as std::ops::FnOnce<(&'a Foo<'b>,)>>::Output == &'a Foo<'b>`\n+error[E0271]: type mismatch resolving `for<'a, 'b> <fn(&Foo<'_>) -> &Foo<'_> {id::<&Foo<'_>>} as std::ops::FnOnce<(&'a Foo<'b>,)>>::Output == &'a Foo<'b>`\n   --> $DIR/rfc1623.rs:25:8\n    |\n LL |     f: &id,\n-   |        ^^^ expected bound lifetime parameter 'b, found concrete lifetime\n+   |        ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n    |\n    = note: required for the cast to the object type `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0271, E0308, E0631.\n+Some errors have detailed explanations: E0271, E0308.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "84111b1aef8d4cf2b9ef9edddf1348bad549b2a8", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -14,7 +14,7 @@ trait Foo {\n struct X;\n \n impl Foo for X {\n-    type Bar = impl Baz<Self, Self>; //~ ERROR type mismatch in closure arguments\n+    type Bar = impl Baz<Self, Self>;\n     //~^ ERROR type mismatch resolving\n \n     fn bar(&self) -> Self::Bar {"}, {"sha": "3cb8abcdcfd1751bbbda4a4276825aba44501714", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,14 +1,3 @@\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ expected signature of `for<'r> fn(&'r X) -> _`\n-...\n-LL |         |x| x\n-   |         ----- found signature of `fn(_) -> _`\n-   |\n-   = note: the return type of a function must have a statically known size\n-\n error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-57611-trait-alias.rs:21:9: 21:14] as std::ops::FnOnce<(&'r X,)>>::Output == &'r X`\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n@@ -17,7 +6,6 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "e2082d4f78e7026bac85bd273ee34027880b416b", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,28 +1,34 @@\n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-use std::ops::{Fn,FnMut,FnOnce};\n+use std::ops::{Fn, FnMut, FnOnce};\n \n-unsafe fn square(x: &isize) -> isize { (*x) * (*x) }\n+unsafe fn square(x: &isize) -> isize {\n+    (*x) * (*x)\n+}\n \n-fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n+fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+    0\n+}\n+fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+    0\n+}\n+fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+    0\n+}\n \n fn a() {\n     let x = call_it(&square, 22);\n     //~^ ERROR E0277\n-    //~| ERROR expected\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n     //~^ ERROR E0277\n-    //~| ERROR expected\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR E0277\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "b06f745e7c1f184f56a096ddd3272d0cd12e527d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,58 +1,36 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |              ----------------- required by this bound in `call_it`\n+LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+   |               ------------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n \n-error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |                          ----- required by this bound in `call_it`\n-...\n-LL |     let x = call_it(&square, 22);\n-   |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-   |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-\n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |                  -------------------- required by this bound in `call_it_mut`\n+LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+   |                   ---------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |                                 ----- required by this bound in `call_it_mut`\n-...\n-LL |     let y = call_it_mut(&mut square, 22);\n-   |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-   |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-\n-error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:24:26\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n-LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   |                                   ----- required by this bound in `call_it_once`\n+LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+   |                    ----------------------- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "dd76c597d28ad1f461d31858fcdcd66cf5daded3", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,28 +1,34 @@\n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-use std::ops::{Fn,FnMut,FnOnce};\n+use std::ops::{Fn, FnMut, FnOnce};\n \n-extern \"C\" fn square(x: &isize) -> isize { (*x) * (*x) }\n+extern \"C\" fn square(x: &isize) -> isize {\n+    (*x) * (*x)\n+}\n \n-fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n+fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+    0\n+}\n+fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+    0\n+}\n+fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+    0\n+}\n \n fn a() {\n     let x = call_it(&square, 22);\n     //~^ ERROR E0277\n-    //~| ERROR expected\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n     //~^ ERROR E0277\n-    //~| ERROR expected\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR E0277\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "8f6945cda806c69aa4956039d634ab20f58cd820", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,58 +1,36 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n+  --> $DIR/unboxed-closures-wrong-abi.rs:20:21\n    |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |              ----------------- required by this bound in `call_it`\n+LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+   |               ------------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n \n-error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |                          ----- required by this bound in `call_it`\n-...\n-LL |     let x = call_it(&square, 22);\n-   |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-   |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-\n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n+  --> $DIR/unboxed-closures-wrong-abi.rs:25:25\n    |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |                  -------------------- required by this bound in `call_it_mut`\n+LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+   |                   ---------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |                                 ----- required by this bound in `call_it_mut`\n-...\n-LL |     let y = call_it_mut(&mut square, 22);\n-   |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-   |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-\n-error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:24:26\n+  --> $DIR/unboxed-closures-wrong-abi.rs:30:26\n    |\n-LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   |                                   ----- required by this bound in `call_it_once`\n+LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+   |                    ----------------------- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "02e8b7b47ae19843a9ef1215eeb2aaf578e917f0", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,29 +1,35 @@\n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-use std::ops::{Fn,FnMut,FnOnce};\n+use std::ops::{Fn, FnMut, FnOnce};\n \n-unsafe fn square(x: isize) -> isize { x * x }\n+unsafe fn square(x: isize) -> isize {\n+    x * x\n+}\n // note: argument type here is `isize`, not `&isize`\n \n-fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n+fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+    0\n+}\n+fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+    0\n+}\n+fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+    0\n+}\n \n fn a() {\n     let x = call_it(&square, 22);\n     //~^ ERROR E0277\n-    //~| ERROR expected\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n     //~^ ERROR E0277\n-    //~| ERROR expected\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR E0277\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "93a645b485ef0374ea65871ada6bc3a3a8b6b5ea", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a850753b60abfd2a806bf6bba4259d3535e7b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=5a7a850753b60abfd2a806bf6bba4259d3535e7b", "patch": "@@ -1,58 +1,36 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:21:21\n    |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |              ----------------- required by this bound in `call_it`\n+LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+   |               ------------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n \n-error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |                          ----- required by this bound in `call_it`\n-...\n-LL |     let x = call_it(&square, 22);\n-   |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-   |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-\n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:26:25\n    |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |                  -------------------- required by this bound in `call_it_mut`\n+LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+   |                   ---------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |                                 ----- required by this bound in `call_it_mut`\n-...\n-LL |     let y = call_it_mut(&mut square, 22);\n-   |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-   |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-\n-error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:25:26\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:31:26\n    |\n-LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   |                                   ----- required by this bound in `call_it_once`\n+LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+   |                    ----------------------- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n-   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}