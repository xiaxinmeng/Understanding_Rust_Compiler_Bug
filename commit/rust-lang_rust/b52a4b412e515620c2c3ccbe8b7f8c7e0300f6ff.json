{"sha": "b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MmE0YjQxMmU1MTU2MjBjMmMzY2NiZThiN2Y4YzdlMDMwMGY2ZmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-30T08:47:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-30T09:32:53Z"}, "message": "core: Make core.rc more readable. Cleanup", "tree": {"sha": "bf47bce8679ce1dde1d1b4c172924858e1bfc737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf47bce8679ce1dde1d1b4c172924858e1bfc737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "html_url": "https://github.com/rust-lang/rust/commit/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "html_url": "https://github.com/rust-lang/rust/commit/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d"}], "stats": {"total": 436, "additions": 215, "deletions": 221}, "files": [{"sha": "8ea5772dc1227de64fca4956b0bcc78604067a47", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -65,6 +65,7 @@ pub fn all_values(blk: fn(v: bool)) {\n /// converts truth value to an 8 bit byte\n pub pure fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n+#[cfg(notest)]\n impl bool : cmp::Eq {\n     pure fn eq(&self, other: &bool) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &bool) -> bool { (*self) != (*other) }"}, {"sha": "920b98d7b0b48f7be2dfe1ba0a1487c9cb069caf", "filename": "src/libcore/box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -27,11 +27,13 @@ pub pure fn ptr_eq<T>(a: @T, b: @T) -> bool {\n     unsafe { ptr::addr_of(&(*a)) == ptr::addr_of(&(*b)) }\n }\n \n+#[cfg(notest)]\n impl<T:Eq> @const T : Eq {\n     pure fn eq(&self, other: &@const T) -> bool { *(*self) == *(*other) }\n     pure fn ne(&self, other: &@const T) -> bool { *(*self) != *(*other) }\n }\n \n+#[cfg(notest)]\n impl<T:Ord> @const T : Ord {\n     pure fn lt(&self, other: &@const T) -> bool { *(*self) < *(*other) }\n     pure fn le(&self, other: &@const T) -> bool { *(*self) <= *(*other) }"}, {"sha": "d88e7ec9be19754e1ed095b2e237790c851b2dd1", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -180,6 +180,7 @@ pub pure fn cmp(a: char, b: char) -> int {\n     else { 0 }\n }\n \n+#[cfg(notest)]\n impl char : Eq {\n     pure fn eq(&self, other: &char) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &char) -> bool { (*self) != (*other) }"}, {"sha": "0a9335d3774856c72456a016a45eeb2989d9b99e", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 25, "deletions": 60, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -14,70 +14,35 @@ and `Eq` to overload the `==` and `!=` operators.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-pub use nounittest::*;\n-pub use unittest::*;\n-\n-/// Interfaces used for comparison.\n-\n-// Awful hack to work around duplicate lang items in core test.\n-#[cfg(notest)]\n-mod nounittest {\n-    /**\n-     * Trait for values that can be compared for a sort-order.\n-     *\n-     * Eventually this may be simplified to only require\n-     * an `le` method, with the others generated from\n-     * default implementations.\n-     */\n-    #[lang=\"ord\"]\n-    pub trait Ord {\n-        pure fn lt(&self, other: &self) -> bool;\n-        pure fn le(&self, other: &self) -> bool;\n-        pure fn ge(&self, other: &self) -> bool;\n-        pure fn gt(&self, other: &self) -> bool;\n-    }\n-\n-    #[lang=\"eq\"]\n-    /**\n-     * Trait for values that can be compared for equality\n-     * and inequality.\n-     *\n-     * Eventually this may be simplified to only require\n-     * an `eq` method, with the other generated from\n-     * a default implementation.\n-     */\n-    #[lang=\"eq\"]\n-    pub trait Eq {\n-        pure fn eq(&self, other: &self) -> bool;\n-        pure fn ne(&self, other: &self) -> bool;\n-    }\n+/**\n+* Trait for values that can be compared for equality\n+* and inequality.\n+*\n+* Eventually this may be simplified to only require\n+* an `eq` method, with the other generated from\n+* a default implementation.\n+*/\n+#[lang=\"eq\"]\n+pub trait Eq {\n+    pure fn eq(&self, other: &self) -> bool;\n+    pure fn ne(&self, other: &self) -> bool;\n }\n \n-#[cfg(test)]\n-mod nounittest {\n-    #[legacy_exports];}\n-\n-#[cfg(test)]\n-mod unittest {\n-    #[legacy_exports];\n-\n-    pub trait Ord {\n-        pure fn lt(&self, other: &self) -> bool;\n-        pure fn le(&self, other: &self) -> bool;\n-        pure fn ge(&self, other: &self) -> bool;\n-        pure fn gt(&self, other: &self) -> bool;\n-    }\n-\n-    pub trait Eq {\n-        pure fn eq(&self, other: &self) -> bool;\n-        pure fn ne(&self, other: &self) -> bool;\n-    }\n+/**\n+* Trait for values that can be compared for a sort-order.\n+*\n+* Eventually this may be simplified to only require\n+* an `le` method, with the others generated from\n+* default implementations.\n+*/\n+#[lang=\"ord\"]\n+pub trait Ord {\n+    pure fn lt(&self, other: &self) -> bool;\n+    pure fn le(&self, other: &self) -> bool;\n+    pure fn ge(&self, other: &self) -> bool;\n+    pure fn gt(&self, other: &self) -> bool;\n }\n \n-#[cfg(notest)]\n-mod unittest {\n-    #[legacy_exports];}\n-\n pub pure fn lt<T: Ord>(v1: &T, v2: &T) -> bool {\n     (*v1).lt(v2)\n }"}, {"sha": "e371082a50dc95a1543418be66092bbdea1970e3", "filename": "src/libcore/core.rc", "status": "modified", "additions": 98, "deletions": 126, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,6 +1,6 @@\n /*!\n \n-The Rust core library.\n+The Rust core library\n \n The Rust core library provides runtime features required by the language,\n including the task scheduler and memory allocators, as well as library\n@@ -24,6 +24,7 @@ Implicitly, all crates behave as if they included the following prologue:\n \n */\n \n+\n #[link(name = \"core\",\n        vers = \"0.5\",\n        uuid = \"c70c24a7-5551-4f73-8e37-380b11d80be8\",\n@@ -33,125 +34,110 @@ Implicitly, all crates behave as if they included the following prologue:\n #[license = \"MIT\"];\n #[crate_type = \"lib\"];\n \n+\n // Don't link to core. We are core.\n #[no_core];\n \n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n-\n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n \n-// Built-in-type support modules\n \n-/// Operations and constants for `int`\n-#[path = \"int-template.rs\"]\n-#[merge = \"int-template/int.rs\"]\n-pub mod int;\n+/* Primitive types */\n \n-/// Operations and constants for `i8`\n-#[path = \"int-template.rs\"]\n-#[merge = \"int-template/i8.rs\"]\n+#[path = \"int-template.rs\"] #[merge = \"int-template/int.rs\"]\n+pub mod int;\n+#[path = \"int-template.rs\"] #[merge = \"int-template/i8.rs\"]\n pub mod i8;\n-\n-/// Operations and constants for `i16`\n-#[path = \"int-template.rs\"]\n-#[merge = \"int-template/i16.rs\"]\n+#[path = \"int-template.rs\"] #[merge = \"int-template/i16.rs\"]\n pub mod i16;\n-\n-/// Operations and constants for `i32`\n-#[path = \"int-template.rs\"]\n-#[merge = \"int-template/i32.rs\"]\n+#[path = \"int-template.rs\"] #[merge = \"int-template/i32.rs\"]\n pub mod i32;\n-\n-/// Operations and constants for `i64`\n-#[path = \"int-template.rs\"]\n-#[merge = \"int-template/i64.rs\"]\n+#[path = \"int-template.rs\"] #[merge = \"int-template/i64.rs\"]\n pub mod i64;\n-\n-/// Operations and constants for `uint`\n-#[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/uint.rs\"]\n+#[path = \"uint-template.rs\"] #[merge = \"uint-template/uint.rs\"]\n pub mod uint;\n \n-/// Operations and constants for `u8`\n-#[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u8.rs\"]\n+#[path = \"uint-template.rs\"] #[merge = \"uint-template/u8.rs\"]\n pub mod u8;\n-\n-/// Operations and constants for `u16`\n-#[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u16.rs\"]\n+#[path = \"uint-template.rs\"] #[merge = \"uint-template/u16.rs\"]\n pub mod u16;\n-\n-/// Operations and constants for `u32`\n-#[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u32.rs\"]\n+#[path = \"uint-template.rs\"] #[merge = \"uint-template/u32.rs\"]\n pub mod u32;\n-\n-/// Operations and constants for `u64`\n-#[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u64.rs\"]\n+#[path = \"uint-template.rs\"] #[merge = \"uint-template/u64.rs\"]\n pub mod u64;\n \n-\n-pub mod box;\n-pub mod char;\n pub mod float;\n pub mod f32;\n pub mod f64;\n-pub mod str;\n-pub mod ptr;\n-pub mod vec;\n-pub mod at_vec;\n+\n+pub mod unit;\n pub mod bool;\n+pub mod char;\n pub mod tuple;\n-pub mod unit;\n+\n+pub mod vec;\n+pub mod at_vec;\n+pub mod str;\n+\n+pub mod ptr;\n+pub mod box; // FIXME #4079 Rename to 'managed' to match 'owned'\n pub mod owned;\n \n-// Ubiquitous-utility-type modules\n \n-#[cfg(notest)]\n-pub mod ops;\n-pub mod cmp;\n+/* Core language traits */\n+\n+#[cfg(notest)] pub mod kinds;\n+#[cfg(notest)] pub mod ops;\n+#[cfg(notest)] pub mod cmp;\n+\n+// Make core testable by not duplicating lang items. See #2912\n+#[cfg(test)] extern mod realcore(name = \"core\", vers = \"0.5\");\n+#[cfg(test)] pub use kinds = realcore::kinds;\n+#[cfg(test)] pub use ops = realcore::ops;\n+#[cfg(test)] pub use cmp = realcore::cmp;\n+\n+\n+/* Common traits */\n+\n+pub mod from_str;\n pub mod num;\n-pub mod hash;\n-pub mod either;\n pub mod iter;\n-pub mod logging;\n-pub mod option;\n-#[path=\"iter-trait.rs\"]\n-#[merge = \"iter-trait/option.rs\"]\n-pub mod option_iter;\n-pub mod result;\n pub mod to_str;\n pub mod to_bytes;\n-pub mod from_str;\n-pub mod util;\n pub mod clone;\n+pub mod io;\n+pub mod hash;\n \n-// Data structure modules\n \n+/* Common data structures */\n+\n+pub mod option;\n+#[path=\"iter-trait.rs\"] #[merge = \"iter-trait/option.rs\"]\n+pub mod option_iter;\n+pub mod result;\n+pub mod either;\n pub mod dvec;\n-#[path=\"iter-trait.rs\"]\n-#[merge = \"iter-trait/dvec.rs\"]\n+#[path=\"iter-trait.rs\"] #[merge = \"iter-trait/dvec.rs\"]\n pub mod dvec_iter;\n pub mod dlist;\n-#[path=\"iter-trait.rs\"]\n-#[merge = \"iter-trait/dlist.rs\"]\n+#[path=\"iter-trait.rs\"] #[merge = \"iter-trait/dlist.rs\"]\n pub mod dlist_iter;\n pub mod send_map;\n \n-// Concurrency\n+\n+/* Tasks and communication */\n+\n pub mod comm;\n #[path = \"task/mod.rs\"]\n pub mod task;\n pub mod pipes;\n \n-// Runtime and language-primitive support\n+\n+/* Runtime and platform support */\n \n pub mod gc;\n-pub mod io;\n pub mod libc;\n pub mod os;\n pub mod path;\n@@ -165,36 +151,28 @@ pub mod repr;\n pub mod cleanup;\n pub mod reflect;\n pub mod condition;\n+pub mod logging;\n+pub mod util;\n \n-// Modules supporting compiler-generated code\n-// Exported but not part of the public interface\n-\n-pub mod extfmt;\n-// The test harness links against core, so don't include runtime in tests.\n-#[cfg(notest)]\n-#[legacy_exports]\n-pub mod rt;\n \n-// Ideally not exported, but currently is.\n-pub mod private;\n+/* Reexported core operators */\n \n-// For internal use, not exported.\n-mod unicode;\n-mod cmath;\n-mod stackwalk;\n+pub use kinds::{Const, Copy, Send, Owned};\n+pub use ops::{Drop};\n+pub use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n+pub use ops::{BitAnd, BitOr, BitXor};\n+pub use ops::{Shl, Shr, Index};\n \n-// Top-level, visible-everywhere definitions.\n \n-// Export various ubiquitous types, constructors, methods.\n+/* Reexported types and traits */\n \n-pub use option::{Some, None};\n-pub use Option = option::Option;\n+pub use option::{Option, Some, None};\n pub use result::{Result, Ok, Err};\n \n-pub use Path = path::Path;\n-pub use GenericPath = path::GenericPath;\n-pub use WindowsPath = path::WindowsPath;\n-pub use PosixPath = path::PosixPath;\n+pub use path::Path;\n+pub use path::GenericPath;\n+pub use path::WindowsPath;\n+pub use path::PosixPath;\n \n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, Trimmable};\n@@ -203,44 +181,18 @@ pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{MutableVector, MutableCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n+\n pub use num::Num;\n pub use ptr::Ptr;\n pub use to_str::ToStr;\n-\n-// The following exports are the core operators and kinds\n-// The compiler has special knowlege of these so we must not duplicate them\n-// when compiling for testing\n-#[cfg(notest)]\n-pub use ops::{Const, Copy, Send, Owned};\n-#[cfg(notest)]\n-pub use ops::{Drop};\n-#[cfg(notest)]\n-pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n-#[cfg(notest)]\n-pub use ops::{Shl, Shr, Index};\n-\n-#[cfg(test)]\n-extern mod coreops(name = \"core\", vers = \"0.5\");\n-\n-#[cfg(test)]\n-pub use coreops::ops::{Const, Copy, Send, Owned};\n-#[cfg(test)]\n-pub use coreops::ops::{Drop};\n-#[cfg(test)]\n-pub use coreops::ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr};\n-#[cfg(test)]\n-pub use coreops::ops::{BitXor};\n-#[cfg(test)]\n-pub use coreops::ops::{Shl, Shr, Index};\n-\n-#[cfg(notest)]\n pub use clone::Clone;\n-#[cfg(test)]\n-pub use coreops::clone::Clone;\n \n-// Export the log levels as global constants. Higher levels mean\n-// more-verbosity. Error is the bottom level, default logging level is\n-// warn-and-below.\n+\n+/*\n+ * Export the log levels as global constants. Higher levels mean\n+ * more-verbosity. Error is the bottom level, default logging level is\n+ * warn-and-below.\n+ */\n \n /// The error log level\n pub const error : u32 = 1_u32;\n@@ -251,6 +203,24 @@ pub const info : u32 = 3_u32;\n /// The debug log level\n pub const debug : u32 = 4_u32;\n \n+\n+/* Unsupported interfaces */\n+\n+// The runtime interface used by the compiler\n+#[cfg(notest)] pub mod rt;\n+// The runtime and compiler interface to fmt!\n+pub mod extfmt;\n+// Private APIs\n+pub mod private;\n+\n+\n+/* For internal use, not exported */\n+\n+mod unicode;\n+mod cmath;\n+mod stackwalk;\n+\n+\n // A curious inner-module that's not exported that contains the binding\n // 'core' so that macro-expanded references to core::error and such\n // can be resolved within libcore.\n@@ -262,13 +232,15 @@ mod core {\n     pub const debug : u32 = 4_u32;\n }\n \n+\n // Similar to above. Some magic to make core testable.\n #[cfg(test)]\n mod std {\n     extern mod std(vers = \"0.5\");\n     pub use std::test;\n }\n \n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "2d0b130688d45727062dd541a1b237a0b0217ccb", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -138,11 +138,13 @@ pub pure fn logarithm(n: f32, b: f32) -> f32 {\n     return log2(n) / log2(b);\n }\n \n+#[cfg(notest)]\n impl f32 : cmp::Eq {\n     pure fn eq(&self, other: &f32) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &f32) -> bool { (*self) != (*other) }\n }\n \n+#[cfg(notest)]\n impl f32 : cmp::Ord {\n     pure fn lt(&self, other: &f32) -> bool { (*self) < (*other) }\n     pure fn le(&self, other: &f32) -> bool { (*self) <= (*other) }"}, {"sha": "6adbbbb2c403a25c0f80eb0cdf9e0acc4649e4ab", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -157,11 +157,13 @@ pub pure fn logarithm(n: f64, b: f64) -> f64 {\n     return log2(n) / log2(b);\n }\n \n+#[cfg(notest)]\n impl f64 : cmp::Eq {\n     pure fn eq(&self, other: &f64) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &f64) -> bool { (*self) != (*other) }\n }\n \n+#[cfg(notest)]\n impl f64 : cmp::Ord {\n     pure fn lt(&self, other: &f64) -> bool { (*self) < (*other) }\n     pure fn le(&self, other: &f64) -> bool { (*self) <= (*other) }"}, {"sha": "50dd4b90bfba80567782b0924908b2a4352596e9", "filename": "src/libcore/float.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -399,11 +399,13 @@ pub pure fn sin(x: float) -> float { f64::sin(x as f64) as float }\n pub pure fn cos(x: float) -> float { f64::cos(x as f64) as float }\n pub pure fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n+#[cfg(notest)]\n impl float : Eq {\n     pure fn eq(&self, other: &float) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &float) -> bool { (*self) != (*other) }\n }\n \n+#[cfg(notest)]\n impl float : Ord {\n     pure fn lt(&self, other: &float) -> bool { (*self) < (*other) }\n     pure fn le(&self, other: &float) -> bool { (*self) <= (*other) }"}, {"sha": "4763f55400acf05681385bf4a9d975e05ab2c2bd", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -54,13 +54,15 @@ pub pure fn abs(i: T) -> T {\n     if is_negative(i) { -i } else { i }\n }\n \n+#[cfg(notest)]\n impl T : Ord {\n     pure fn lt(&self, other: &T) -> bool { return (*self) < (*other); }\n     pure fn le(&self, other: &T) -> bool { return (*self) <= (*other); }\n     pure fn ge(&self, other: &T) -> bool { return (*self) >= (*other); }\n     pure fn gt(&self, other: &T) -> bool { return (*self) > (*other); }\n }\n \n+#[cfg(notest)]\n impl T : Eq {\n     pure fn eq(&self, other: &T) -> bool { return (*self) == (*other); }\n     pure fn ne(&self, other: &T) -> bool { return (*self) != (*other); }"}, {"sha": "ccafb8f9d3b633817388056e8ff0bebfb4743b3a", "filename": "src/libcore/int-template/i16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi16.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `i16`\n+\n mod inst {\n     pub type T = i16;\n     pub const bits: uint = u16::bits;"}, {"sha": "f890ff1f918bcf4889fec647de830718b25fd01c", "filename": "src/libcore/int-template/i32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi32.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `i32`\n+\n mod inst {\n     pub type T = i32;\n     pub const bits: uint = u32::bits;"}, {"sha": "1afefc3135eaad858dbbc071bd6bd4e7e410d660", "filename": "src/libcore/int-template/i64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi64.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `i64`\n+\n mod inst {\n     pub type T = i64;\n     pub const bits: uint = u64::bits;"}, {"sha": "6dd14ef842df8918c3e5f58691376a385a2961da", "filename": "src/libcore/int-template/i8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi8.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `i8`\n+\n mod inst {\n     pub type T = i8;\n     pub const bits: uint = u8::bits;"}, {"sha": "5bd1ac667be334829f65e75f8831fe3b60a73bcf", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `int`\n+\n pub use inst::pow;\n \n mod inst {"}, {"sha": "973a08884486d0725e2294ef0348be0c680c3617", "filename": "src/libcore/kinds.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -0,0 +1,21 @@\n+//! The kind traits\n+\n+#[lang=\"const\"]\n+pub trait Const {\n+    // Empty.\n+}\n+\n+#[lang=\"copy\"]\n+pub trait Copy {\n+    // Empty.\n+}\n+\n+#[lang=\"send\"]\n+pub trait Send {\n+    // Empty.\n+}\n+\n+#[lang=\"owned\"]\n+pub trait Owned {\n+    // Empty.\n+}"}, {"sha": "9180d50a8f600e8ad4fdd3243367f4bffe7e43ec", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,28 +1,8 @@\n-// Core operators and kinds.\n+// Core operators\n \n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-#[lang=\"const\"]\n-pub trait Const {\n-    // Empty.\n-}\n-\n-#[lang=\"copy\"]\n-pub trait Copy {\n-    // Empty.\n-}\n-\n-#[lang=\"send\"]\n-pub trait Send {\n-    // Empty.\n-}\n-\n-#[lang=\"owned\"]\n-pub trait Owned {\n-    // Empty.\n-}\n-\n #[lang=\"drop\"]\n pub trait Drop {\n     fn finalize(&self);  // XXX: Rename to \"drop\"? --pcwalton"}, {"sha": "a8a6b5d30d0c5f5950f879a4c71393b45c803f32", "filename": "src/libcore/owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -6,11 +6,13 @@\n \n use cmp::{Eq, Ord};\n \n+#[cfg(notest)]\n impl<T:Eq> ~const T : Eq {\n     pure fn eq(&self, other: &~const T) -> bool { *(*self) == *(*other) }\n     pure fn ne(&self, other: &~const T) -> bool { *(*self) != *(*other) }\n }\n \n+#[cfg(notest)]\n impl<T:Ord> ~const T : Ord {\n     pure fn lt(&self, other: &~const T) -> bool { *(*self) < *(*other) }\n     pure fn le(&self, other: &~const T) -> bool { *(*self) <= *(*other) }"}, {"sha": "0ccb14c98e80a77e2e687462afbc61413ed7738c", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -207,6 +207,7 @@ impl<T> *mut T: Ptr<T> {\n }\n \n // Equality for pointers\n+#[cfg(notest)]\n impl<T> *const T : Eq {\n     pure fn eq(&self, other: &*const T) -> bool unsafe {\n         let a: uint = cast::reinterpret_cast(&(*self));\n@@ -217,6 +218,7 @@ impl<T> *const T : Eq {\n }\n \n // Comparison for pointers\n+#[cfg(notest)]\n impl<T> *const T : Ord {\n     pure fn lt(&self, other: &*const T) -> bool unsafe {\n         let a: uint = cast::reinterpret_cast(&(*self));\n@@ -241,6 +243,7 @@ impl<T> *const T : Ord {\n }\n \n // Equality for region pointers\n+#[cfg(notest)]\n impl<T:Eq> &const T : Eq {\n     pure fn eq(&self, other: & &self/const T) -> bool {\n         return *(*self) == *(*other);\n@@ -251,6 +254,7 @@ impl<T:Eq> &const T : Eq {\n }\n \n // Comparison for region pointers\n+#[cfg(notest)]\n impl<T:Ord> &const T : Ord {\n     pure fn lt(&self, other: & &self/const T) -> bool {\n         *(*self) < *(*other)"}, {"sha": "22a13db5245d9e6d11309a2ed6eb7b3dc894798f", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];"}, {"sha": "f4900d80a8e9558dd8c36c44f9891435f8dd2862", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -735,6 +735,7 @@ pure fn gt(a: &str, b: &str) -> bool {\n     !le(a, b)\n }\n \n+#[cfg(notest)]\n impl &str : Eq {\n     #[inline(always)]\n     pure fn eq(&self, other: & &self/str) -> bool {\n@@ -744,6 +745,7 @@ impl &str : Eq {\n     pure fn ne(&self, other: & &self/str) -> bool { !(*self).eq(other) }\n }\n \n+#[cfg(notest)]\n impl ~str : Eq {\n     #[inline(always)]\n     pure fn eq(&self, other: &~str) -> bool {\n@@ -753,6 +755,7 @@ impl ~str : Eq {\n     pure fn ne(&self, other: &~str) -> bool { !(*self).eq(other) }\n }\n \n+#[cfg(notest)]\n impl @str : Eq {\n     #[inline(always)]\n     pure fn eq(&self, other: &@str) -> bool {\n@@ -762,6 +765,7 @@ impl @str : Eq {\n     pure fn ne(&self, other: &@str) -> bool { !(*self).eq(other) }\n }\n \n+#[cfg(notest)]\n impl ~str : Ord {\n     #[inline(always)]\n     pure fn lt(&self, other: &~str) -> bool { lt((*self), (*other)) }\n@@ -773,6 +777,7 @@ impl ~str : Ord {\n     pure fn gt(&self, other: &~str) -> bool { gt((*self), (*other)) }\n }\n \n+#[cfg(notest)]\n impl &str : Ord {\n     #[inline(always)]\n     pure fn lt(&self, other: & &self/str) -> bool { lt((*self), (*other)) }\n@@ -784,6 +789,7 @@ impl &str : Ord {\n     pure fn gt(&self, other: & &self/str) -> bool { gt((*self), (*other)) }\n }\n \n+#[cfg(notest)]\n impl @str : Ord {\n     #[inline(always)]\n     pure fn lt(&self, other: &@str) -> bool { lt((*self), (*other)) }"}, {"sha": "5f6881b8f142aa8e98c85622d979a0e56a2a1f15", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -94,6 +94,7 @@ impl<A: Copy, B: Copy> (~[A], ~[B]): ExtendedTupleOps<A,B> {\n     }\n }\n \n+#[cfg(notest)]\n impl<A: Eq, B: Eq> (A, B) : Eq {\n     pure fn eq(&self, other: &(A, B)) -> bool {\n         match (*self) {\n@@ -107,6 +108,7 @@ impl<A: Eq, B: Eq> (A, B) : Eq {\n     pure fn ne(&self, other: &(A, B)) -> bool { !(*self).eq(other) }\n }\n \n+#[cfg(notest)]\n impl<A: Ord, B: Ord> (A, B) : Ord {\n     pure fn lt(&self, other: &(A, B)) -> bool {\n         match (*self) {\n@@ -127,6 +129,7 @@ impl<A: Ord, B: Ord> (A, B) : Ord {\n     pure fn gt(&self, other: &(A, B)) -> bool { (*other).lt(&(*self))  }\n }\n \n+#[cfg(notest)]\n impl<A: Eq, B: Eq, C: Eq> (A, B, C) : Eq {\n     pure fn eq(&self, other: &(A, B, C)) -> bool {\n         match (*self) {\n@@ -141,6 +144,7 @@ impl<A: Eq, B: Eq, C: Eq> (A, B, C) : Eq {\n     pure fn ne(&self, other: &(A, B, C)) -> bool { !(*self).eq(other) }\n }\n \n+#[cfg(notest)]\n impl<A: Ord, B: Ord, C: Ord> (A, B, C) : Ord {\n     pure fn lt(&self, other: &(A, B, C)) -> bool {\n         match (*self) {"}, {"sha": "9c191e7dadf420c2c1eaebc5cb40b8531555e41e", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -48,13 +48,15 @@ pub pure fn compl(i: T) -> T {\n     max_value ^ i\n }\n \n+#[cfg(notest)]\n impl T : Ord {\n     pure fn lt(&self, other: &T) -> bool { (*self) < (*other) }\n     pure fn le(&self, other: &T) -> bool { (*self) <= (*other) }\n     pure fn ge(&self, other: &T) -> bool { (*self) >= (*other) }\n     pure fn gt(&self, other: &T) -> bool { (*self) > (*other) }\n }\n \n+#[cfg(notest)]\n impl T : Eq {\n     pure fn eq(&self, other: &T) -> bool { return (*self) == (*other); }\n     pure fn ne(&self, other: &T) -> bool { return (*self) != (*other); }"}, {"sha": "fe465aa1c6fa4a035c811cb5ff40f37cc1def842", "filename": "src/libcore/uint-template/u16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu16.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `u16`\n+\n mod inst {\n     pub type T = u16;\n     pub const bits: uint = 16;"}, {"sha": "7ec576d3500b803ec16291ae4478c1a599413217", "filename": "src/libcore/uint-template/u32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu32.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `u32`\n+\n mod inst {\n     pub type T = u32;\n     pub const bits: uint = 32;"}, {"sha": "860d60b3830fc53d7a8db0b9f1fa8c8ada36f4c6", "filename": "src/libcore/uint-template/u64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu64.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `u64`\n+\n mod inst {\n     pub type T = u64;\n     pub const bits: uint = 64;"}, {"sha": "2ee9af9882d957c24214ff28fdbf9fa3f6fd8126", "filename": "src/libcore/uint-template/u8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu8.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `u8`\n+\n pub use inst::is_ascii;\n \n mod inst {"}, {"sha": "1c635db2f5423d5b1170b29467296cd6aae0cf4a", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1,3 +1,5 @@\n+//! Operations and constants for `uint`\n+\n pub use inst::{\n     div_ceil, div_round, div_floor, iterate,\n     next_power_of_two"}, {"sha": "dc7379212bab7d718c43e673ea968172e443e7ec", "filename": "src/libcore/unit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funit.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -10,11 +10,13 @@ Functions for the unit type.\n \n use cmp::{Eq, Ord};\n \n+#[cfg(notest)]\n impl () : Eq {\n     pure fn eq(&self, _other: &()) -> bool { true }\n     pure fn ne(&self, _other: &()) -> bool { false }\n }\n \n+#[cfg(notest)]\n impl () : Ord {\n     pure fn lt(&self, _other: &()) -> bool { false }\n     pure fn le(&self, _other: &()) -> bool { true }"}, {"sha": "976bcbf394b696020bcfb1fac0dee6e2af62d9a6", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=b52a4b412e515620c2c3ccbe8b7f8c7e0300f6ff", "patch": "@@ -1345,6 +1345,7 @@ pure fn eq<T: Eq>(a: &[T], b: &[T]) -> bool {\n     return true;\n }\n \n+#[cfg(notest)]\n impl<T: Eq> &[T] : Eq {\n     #[inline(always)]\n     pure fn eq(&self, other: & &self/[T]) -> bool { eq((*self), (*other)) }\n@@ -1353,13 +1354,15 @@ impl<T: Eq> &[T] : Eq {\n }\n \n \n+#[cfg(notest)]\n impl<T: Eq> ~[T] : Eq {\n     #[inline(always)]\n     pure fn eq(&self, other: &~[T]) -> bool { eq((*self), (*other)) }\n     #[inline(always)]\n     pure fn ne(&self, other: &~[T]) -> bool { !(*self).eq(other) }\n }\n \n+#[cfg(notest)]\n impl<T: Eq> @[T] : Eq {\n     #[inline(always)]\n     pure fn eq(&self, other: &@[T]) -> bool { eq((*self), (*other)) }\n@@ -1388,6 +1391,7 @@ pure fn le<T: Ord>(a: &[T], b: &[T]) -> bool { !lt(b, a) }\n pure fn ge<T: Ord>(a: &[T], b: &[T]) -> bool { !lt(a, b) }\n pure fn gt<T: Ord>(a: &[T], b: &[T]) -> bool { lt(b, a)  }\n \n+#[cfg(notest)]\n impl<T: Ord> &[T] : Ord {\n     #[inline(always)]\n     pure fn lt(&self, other: & &self/[T]) -> bool { lt((*self), (*other)) }\n@@ -1399,6 +1403,7 @@ impl<T: Ord> &[T] : Ord {\n     pure fn gt(&self, other: & &self/[T]) -> bool { gt((*self), (*other)) }\n }\n \n+#[cfg(notest)]\n impl<T: Ord> ~[T] : Ord {\n     #[inline(always)]\n     pure fn lt(&self, other: &~[T]) -> bool { lt((*self), (*other)) }\n@@ -1410,6 +1415,7 @@ impl<T: Ord> ~[T] : Ord {\n     pure fn gt(&self, other: &~[T]) -> bool { gt((*self), (*other)) }\n }\n \n+#[cfg(notest)]\n impl<T: Ord> @[T] : Ord {\n     #[inline(always)]\n     pure fn lt(&self, other: &@[T]) -> bool { lt((*self), (*other)) }\n@@ -1422,25 +1428,21 @@ impl<T: Ord> @[T] : Ord {\n }\n \n #[cfg(notest)]\n-pub mod traits {\n-    impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n-        #[inline(always)]\n-        pure fn add(rhs: & &self/[const T]) -> ~[T] {\n-            append(copy self, (*rhs))\n-        }\n+impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n+    #[inline(always)]\n+    pure fn add(rhs: & &self/[const T]) -> ~[T] {\n+        append(copy self, (*rhs))\n     }\n+}\n \n-    impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n-        #[inline(always)]\n-        pure fn add(rhs: & &self/[const T]) -> ~[mut T] {\n-            append_mut(copy self, (*rhs))\n-        }\n+#[cfg(notest)]\n+impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n+    #[inline(always)]\n+    pure fn add(rhs: & &self/[const T]) -> ~[mut T] {\n+        append_mut(copy self, (*rhs))\n     }\n }\n \n-#[cfg(test)]\n-pub mod traits {}\n-\n pub trait ConstVector {\n     pure fn is_empty() -> bool;\n     pure fn is_not_empty() -> bool;"}]}