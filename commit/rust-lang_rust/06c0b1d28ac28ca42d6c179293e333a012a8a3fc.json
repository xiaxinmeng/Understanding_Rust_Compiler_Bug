{"sha": "06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YzBiMWQyOGFjMjhjYTQyZDZjMTc5MjkzZTMzM2EwMTJhOGEzZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-11T21:55:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-11T21:55:42Z"}, "message": "auto merge of #16957 : vadimcn/rust/package-gcc, r=brson\n\nPackage rustc's mingw dependencies into Windows installer to avoid requiring a separate mingw install.\r\n\r\nCloses #11782", "tree": {"sha": "59ca7ca6ad430dbc07606638601718330027fd0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ca7ca6ad430dbc07606638601718330027fd0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "html_url": "https://github.com/rust-lang/rust/commit/06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d24c82420bf7c3c57376c5064d1195c22023715d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d24c82420bf7c3c57376c5064d1195c22023715d", "html_url": "https://github.com/rust-lang/rust/commit/d24c82420bf7c3c57376c5064d1195c22023715d"}, {"sha": "7085b3edd96d5c3244422449edb2b5144b7d50f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7085b3edd96d5c3244422449edb2b5144b7d50f9", "html_url": "https://github.com/rust-lang/rust/commit/7085b3edd96d5c3244422449edb2b5144b7d50f9"}], "stats": {"total": 170, "additions": 128, "deletions": 42}, "files": [{"sha": "26169f3a13bd0f4c6884ddaf05feb8495d2d8072", "filename": "mk/dist.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "patch": "@@ -123,7 +123,7 @@ PKG_EXE = dist/$(PKG_NAME)-$(CFG_BUILD).exe\n $(PKG_EXE): rust.iss modpath.iss upgrade.iss LICENSE.txt rust-logo.ico \\\n             $(CSREQ3_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n             dist-prepare-win\n-\t$(CFG_PYTHON) $(S)src/etc/copy-runtime-deps.py tmp/dist/win/bin $(CFG_BUILD)\n+\t$(CFG_PYTHON) $(S)src/etc/make-win-dist.py tmp/dist/win $(CFG_BUILD)\n \t@$(call E, ISCC: $@)\n \t$(Q)\"$(CFG_ISCC)\" $<\n "}, {"sha": "fd829cd0ab70f93227099db1396e8c8975a8a935", "filename": "src/etc/copy-runtime-deps.py", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d24c82420bf7c3c57376c5064d1195c22023715d/src%2Fetc%2Fcopy-runtime-deps.py", "raw_url": "https://github.com/rust-lang/rust/raw/d24c82420bf7c3c57376c5064d1195c22023715d/src%2Fetc%2Fcopy-runtime-deps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcopy-runtime-deps.py?ref=d24c82420bf7c3c57376c5064d1195c22023715d", "patch": "@@ -1,24 +0,0 @@\n-# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Copies Rust runtime dependencies to the specified directory.\n-\n-import snapshot, sys, os, shutil\n-\n-def copy_runtime_deps(dest_dir, triple):\n-    for path in snapshot.get_winnt_runtime_deps(snapshot.get_platform(triple)):\n-        shutil.copy(path, dest_dir)\n-\n-    lic_dest = os.path.join(dest_dir, \"third-party\")\n-    if os.path.exists(lic_dest):\n-        shutil.rmtree(lic_dest) # copytree() won't overwrite existing files\n-    shutil.copytree(os.path.join(os.path.dirname(__file__), \"third-party\"), lic_dest)\n-\n-copy_runtime_deps(sys.argv[1], sys.argv[2])"}, {"sha": "bb9a112b7b28a3bba3233b15aa13fa02603ca5f2", "filename": "src/etc/make-win-dist.py", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Fetc%2Fmake-win-dist.py", "raw_url": "https://github.com/rust-lang/rust/raw/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Fetc%2Fmake-win-dist.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-win-dist.py?ref=06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "patch": "@@ -0,0 +1,82 @@\n+# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+import sys, os, shutil, subprocess\n+\n+def find_files(files, path):\n+    found = []\n+    for fname in files:\n+        for dir in path:\n+            filepath = os.path.normpath(os.path.join(dir, fname))\n+            if os.path.isfile(filepath):\n+                found.append(filepath)\n+                break\n+        else:\n+            raise Exception(\"Could not find '%s' in %s\" % (fname, path))\n+    return found\n+\n+def make_win_dist(dist_root, target_triple):\n+    # Ask gcc where it keeps its' stuff\n+    gcc_out = subprocess.check_output([\"gcc.exe\", \"-print-search-dirs\"])\n+    bin_path = os.environ[\"PATH\"].split(os.pathsep)\n+    lib_path = []\n+    for line in gcc_out.splitlines():\n+        key, val = line.split(':', 1)\n+        if key == \"programs\":\n+            bin_path.extend(val.lstrip(' =').split(';'))\n+        elif key == \"libraries\":\n+            lib_path.extend(val.lstrip(' =').split(';'))\n+\n+    target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\", \"windres.exe\"]\n+\n+    rustc_dlls = [\"libstdc++-6.dll\"]\n+    if target_triple.startswith(\"i686-\"):\n+        rustc_dlls.append(\"libgcc_s_dw2-1.dll\")\n+    else:\n+        rustc_dlls.append(\"libgcc_s_seh-1.dll\")\n+\n+    target_libs = [\"crtbegin.o\", \"crtend.o\", \"crt2.o\", \"dllcrt2.o\",\n+                   \"libadvapi32.a\", \"libcrypt32.a\", \"libgcc.a\", \"libgcc_eh.a\", \"libgcc_s.a\",\n+                   \"libimagehlp.a\", \"libiphlpapi.a\", \"libkernel32.a\", \"libm.a\", \"libmingw32.a\",\n+                   \"libmingwex.a\", \"libmsvcrt.a\", \"libpsapi.a\", \"libshell32.a\", \"libstdc++.a\",\n+                   \"libuser32.a\", \"libws2_32.a\", \"libiconv.a\", \"libmoldname.a\"]\n+\n+    # Find mingw artifacts we want to bundle\n+    target_tools = find_files(target_tools, bin_path)\n+    rustc_dlls = find_files(rustc_dlls, bin_path)\n+    target_libs = find_files(target_libs, lib_path)\n+\n+    # Copy runtime dlls next to rustc.exe\n+    dist_bin_dir = os.path.join(dist_root, \"bin\")\n+    for src in rustc_dlls:\n+        shutil.copy(src, dist_bin_dir)\n+\n+    # Copy platform tools (and another copy of runtime dlls) to platform-spcific bin directory\n+    target_bin_dir = os.path.join(dist_root, \"bin\", \"rustlib\", target_triple, \"bin\")\n+    if not os.path.exists(target_bin_dir):\n+        os.makedirs(target_bin_dir)\n+    for src in target_tools:\n+        shutil.copy(src, target_bin_dir)\n+\n+    # Copy platform libs to platform-spcific lib directory\n+    target_lib_dir = os.path.join(dist_root, \"bin\", \"rustlib\", target_triple, \"lib\")\n+    if not os.path.exists(target_lib_dir):\n+        os.makedirs(target_lib_dir)\n+    for src in target_libs:\n+        shutil.copy(src, target_lib_dir)\n+\n+    # Copy license files\n+    lic_dir = os.path.join(dist_root, \"bin\", \"third-party\")\n+    if os.path.exists(lic_dir):\n+        shutil.rmtree(lic_dir) # copytree() won't overwrite existing files\n+    shutil.copytree(os.path.join(os.path.dirname(__file__), \"third-party\"), lic_dir)\n+\n+if __name__==\"__main__\":\n+    make_win_dist(sys.argv[1], sys.argv[2])"}, {"sha": "268b82bdca38e5d7a7cab24b37b4cb65ff0ed666", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "patch": "@@ -157,9 +157,9 @@ def get_winnt_runtime_deps(platform):\n     path_dirs = os.environ[\"PATH\"].split(os.pathsep)\n     for name in deps:\n       for dir in path_dirs:\n-        matches = glob.glob(os.path.join(dir, name))\n-        if matches:\n-          runtime_deps.append(matches[0])\n+        filepath = os.path.join(dir, name)\n+        if os.path.isfile(filepath):\n+          runtime_deps.append(filepath)\n           break\n       else:\n         raise Exception(\"Could not find runtime dependency: %s\" % name)"}, {"sha": "2544bfa2da363c895c9abc31cda803eb6b29ec25", "filename": "src/etc/third-party/README.txt", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Fetc%2Fthird-party%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Fetc%2Fthird-party%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fthird-party%2FREADME.txt?ref=06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "patch": "@@ -1,8 +1,5 @@\n-Certain files in this distribution are covered by a different license than the rest of the Rust Project.\n-Specifically:\n+Certain binaries in this distribution do not originate from the Rust project, but are distributed with it in its binary form. These binaries, including gcc and other parts of the GNU compiler toolchain, are licensed either under the terms of the GNU General Public License, or the GNU General Public License with the GCC Runtime Library Exception, as published by the Free Software Foundation, either version 3, or (at your option) any later version. See the files COPYING3 and COPYING.RUNTIME respectively.\n \n-   - libgcc_s_dw2-1.dll and libstdc++6.dll are distributed under the terms of the GNU General Public License \n-     with the GCC Runtime Library Exception as published by the Free Software Foundation; either version 3, \n-     or (at your option) any later version.  See the files COPYING3 and COPYING.RUNTIME respectively.\n-     You can obtain a copy of the source of these libraries either here: http://sourceforge.net/projects/mingw/files/MinGW/Base/gcc/Version4/gcc-4.5.2-1/,\n-     or from the project website at http://gcc.gnu.org\n+You can obtain a copy of the source of these libraries from the MinGW-w64 project[1].\n+\n+[1]: http://mingw-w64.sourceforge.net/"}, {"sha": "e418284ffce7ab9c8f6eaf192ffbd43699483682", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "patch": "@@ -929,6 +929,9 @@ fn link_args(cmd: &mut Command,\n         cmd.arg(\"-nodefaultlibs\");\n     }\n \n+    // Rust does its' own LTO\n+    cmd.arg(\"-fno-lto\").arg(\"-fno-use-linker-plugin\");\n+\n     // If we're building a dylib, we don't use --gc-sections because LLVM has\n     // already done the best it can do, and we also don't want to eliminate the\n     // metadata. If we're building an executable, however, --gc-sections drops"}, {"sha": "018bfecd369a7128617b343adc962780b5f112d8", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "patch": "@@ -32,6 +32,7 @@ use serialize::{json, Encodable};\n \n use std::io;\n use std::io::fs;\n+use std::os;\n use arena::TypedArena;\n use syntax::ast;\n use syntax::attr;\n@@ -258,18 +259,26 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             // dependent dlls. Note that this uses cfg!(windows) as opposed to\n             // targ_cfg because syntax extensions are always loaded for the host\n             // compiler, not for the target.\n+            let mut _old_path = String::new();\n             if cfg!(windows) {\n-                sess.host_filesearch().add_dylib_search_paths();\n+                _old_path = os::getenv(\"PATH\").unwrap_or(_old_path);\n+                let mut new_path = sess.host_filesearch().get_dylib_search_paths();\n+                new_path.push_all_move(os::split_paths(_old_path.as_slice()));\n+                os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n                 deriving_hash_type_parameter: sess.features.default_type_params.get(),\n                 crate_name: crate_name.to_string(),\n             };\n-            syntax::ext::expand::expand_crate(&sess.parse_sess,\n+            let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,\n                                               cfg,\n                                               macros,\n                                               syntax_exts,\n-                                              krate)\n+                                              krate);\n+            if cfg!(windows) {\n+                os::setenv(\"PATH\", _old_path);\n+            }\n+            ret\n         }\n     );\n \n@@ -509,11 +518,18 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n pub fn phase_6_link_output(sess: &Session,\n                            trans: &CrateTranslation,\n                            outputs: &OutputFilenames) {\n+    let old_path = os::getenv(\"PATH\").unwrap_or_else(||String::new());\n+    let mut new_path = os::split_paths(old_path.as_slice());\n+    new_path.push_all_move(sess.host_filesearch().get_tools_search_paths());\n+    os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n+\n     time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n                            trans,\n                            outputs,\n                            trans.link.crate_name.as_slice()));\n+\n+    os::setenv(\"PATH\", old_path);\n }\n \n pub fn stop_after_phase_3(sess: &Session) -> bool {"}, {"sha": "bdabb3efb98ba5dbbb9fb3a4cfb424997d3cbec4", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c0b1d28ac28ca42d6c179293e333a012a8a3fc/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "patch": "@@ -13,7 +13,6 @@\n use std::cell::RefCell;\n use std::os;\n use std::io::fs;\n-use std::dynamic_lib::DynamicLibrary;\n use std::collections::HashSet;\n \n use util::fs as myfs;\n@@ -134,11 +133,24 @@ impl<'a> FileSearch<'a> {\n         }\n     }\n \n-    pub fn add_dylib_search_paths(&self) {\n+    // Returns a list of directories where target-specific dylibs might be located.\n+    pub fn get_dylib_search_paths(&self) -> Vec<Path> {\n+        let mut paths = Vec::new();\n         self.for_each_lib_search_path(|lib_search_path| {\n-            DynamicLibrary::prepend_search_path(lib_search_path);\n+            paths.push(lib_search_path.clone());\n             FileDoesntMatch\n-        })\n+        });\n+        paths\n+    }\n+\n+    // Returns a list of directories where target-specific tool binaries are located.\n+    pub fn get_tools_search_paths(&self) -> Vec<Path> {\n+        let mut p = Path::new(self.sysroot);\n+        p.push(find_libdir(self.sysroot));\n+        p.push(rustlibdir());\n+        p.push(self.triple);\n+        p.push(\"bin\");\n+        vec![p]\n     }\n }\n "}]}