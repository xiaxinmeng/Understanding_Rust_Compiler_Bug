{"sha": "cd1ace488fc328ee20397783e3046971e6f09ac5", "node_id": "C_kwDOAAsO6NoAKGNkMWFjZTQ4OGZjMzI4ZWUyMDM5Nzc4M2UzMDQ2OTcxZTZmMDlhYzU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-17T17:41:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-09T12:01:09Z"}, "message": "Use an IndexVec for bodies.", "tree": {"sha": "78c4a7fd7855b2c9ebf1e22c00ae5a3ff4c2a3c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78c4a7fd7855b2c9ebf1e22c00ae5a3ff4c2a3c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd1ace488fc328ee20397783e3046971e6f09ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1ace488fc328ee20397783e3046971e6f09ac5", "html_url": "https://github.com/rust-lang/rust/commit/cd1ace488fc328ee20397783e3046971e6f09ac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd1ace488fc328ee20397783e3046971e6f09ac5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a339ddbbc1e1c364d1cb39d3fef8aad9105345", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a339ddbbc1e1c364d1cb39d3fef8aad9105345", "html_url": "https://github.com/rust-lang/rust/commit/48a339ddbbc1e1c364d1cb39d3fef8aad9105345"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "cac5bb56c9f5f56c3b641b1a2c9ad7bf74457723", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=cd1ace488fc328ee20397783e3046971e6f09ac5", "patch": "@@ -974,7 +974,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let body = hir::Body { generator_kind: self.generator_kind, params, value };\n         let id = body.id();\n         debug_assert_eq!(id.hir_id.owner, self.current_hir_id_owner);\n-        self.bodies.insert(id.hir_id.local_id, body);\n+        self.bodies.ensure_contains_elem(id.hir_id.local_id, || None);\n+        self.bodies[id.hir_id.local_id] = Some(self.arena.alloc(body));\n         id\n     }\n "}, {"sha": "8375a37d32a483094bb18a7b396808a00adb853d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cd1ace488fc328ee20397783e3046971e6f09ac5", "patch": "@@ -97,7 +97,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     /// The items being lowered are collected here.\n     owners: IndexVec<LocalDefId, Option<hir::OwnerInfo<'hir>>>,\n-    bodies: BTreeMap<hir::ItemLocalId, hir::Body<'hir>>,\n+    bodies: IndexVec<hir::ItemLocalId, Option<&'hir hir::Body<'hir>>>,\n     attrs: BTreeMap<hir::ItemLocalId, &'hir [Attribute]>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n@@ -322,7 +322,7 @@ pub fn lower_crate<'a, 'hir>(\n         nt_to_tokenstream,\n         arena,\n         owners,\n-        bodies: BTreeMap::new(),\n+        bodies: IndexVec::new(),\n         attrs: BTreeMap::default(),\n         catch_scope: None,\n         loop_scope: None,"}, {"sha": "5334f6d729dc5d64563e11bbd37565fd79acddea", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=cd1ace488fc328ee20397783e3046971e6f09ac5", "patch": "@@ -19,6 +19,7 @@ macro_rules! arena_types {\n             [] attribute: rustc_ast::Attribute,\n             [] block: rustc_hir::Block<$tcx>,\n             [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n+            [] body: rustc_hir::Body<$tcx>,\n             [] generic_arg: rustc_hir::GenericArg<$tcx>,\n             [] generic_args: rustc_hir::GenericArgs<$tcx>,\n             [] generic_bound: rustc_hir::GenericBound<$tcx>,"}, {"sha": "1d1c0a0de13d837e40e91022c30e4da12aa5349d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=cd1ace488fc328ee20397783e3046971e6f09ac5", "patch": "@@ -666,7 +666,7 @@ pub struct WhereEqPredicate<'hir> {\n pub struct OwnerInfo<'hir> {\n     pub node: OwnerNode<'hir>,\n     pub attrs: BTreeMap<ItemLocalId, &'hir [Attribute]>,\n-    pub bodies: BTreeMap<ItemLocalId, Body<'hir>>,\n+    pub bodies: IndexVec<ItemLocalId, Option<&'hir Body<'hir>>>,\n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n     pub trait_map: FxHashMap<ItemLocalId, Box<[TraitCandidate]>>,\n@@ -705,9 +705,9 @@ impl Crate<'hir> {\n         self.owners[id.def_id].as_ref().unwrap().node.expect_foreign_item()\n     }\n \n-    pub fn body(&self, id: BodyId) -> &Body<'hir> {\n+    pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         let HirId { owner, local_id } = id.hir_id;\n-        &self.owners[owner].as_ref().unwrap().bodies[&local_id]\n+        self.owners[owner].as_ref().unwrap().bodies[local_id].unwrap()\n     }\n \n     pub fn attrs(&self, id: HirId) -> &'hir [Attribute] {"}, {"sha": "868c1b7853e5eb7f3889fc854273c0591570896e", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=cd1ace488fc328ee20397783e3046971e6f09ac5", "patch": "@@ -96,11 +96,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         let mut nodes = IndexVec::new();\n         nodes.push(Some(ParentedNode { parent: ItemLocalId::new(0), node: node.into() }));\n \n-        let mut bodies = FxHashMap::default();\n-        for (id, body) in self.krate.owners[owner].as_ref().unwrap().bodies.iter() {\n-            let _old = bodies.insert(*id, body);\n-            debug_assert!(_old.is_none());\n-        }\n+        let bodies = &self.krate.owners[owner].as_ref().unwrap().bodies;\n \n         debug_assert!(self.map[owner].is_none());\n         self.map[owner] = Some(self.arena.alloc(OwnerNodes { hash, nodes, bodies }));"}, {"sha": "66d4ec2eeb6dab4f943f6ddf03e6b26348cf1e33", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=cd1ace488fc328ee20397783e3046971e6f09ac5", "patch": "@@ -381,7 +381,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies.get(&id.hir_id.local_id).unwrap()\n+        self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[id.hir_id.local_id].unwrap()\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n@@ -500,10 +500,13 @@ impl<'hir> Map<'hir> {\n             .iter_enumerated()\n             .flat_map(move |(owner, owner_info)| {\n                 let bodies = &owner_info.as_ref()?.bodies;\n-                Some(bodies.keys().map(move |&local_id| {\n+                Some(bodies.iter_enumerated().filter_map(move |(local_id, body)| {\n+                    if body.is_none() {\n+                        return None;\n+                    }\n                     let hir_id = HirId { owner, local_id };\n                     let body_id = BodyId { hir_id };\n-                    self.body_owner_def_id(body_id)\n+                    Some(self.body_owner_def_id(body_id))\n                 }))\n             })\n             .flatten()\n@@ -517,10 +520,13 @@ impl<'hir> Map<'hir> {\n         par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {\n             let owner = LocalDefId::new(owner);\n             if let Some(owner_info) = owner_info {\n-                par_iter(&owner_info.bodies).for_each(|(&local_id, _)| {\n-                    let hir_id = HirId { owner, local_id };\n-                    let body_id = BodyId { hir_id };\n-                    f(self.body_owner_def_id(body_id))\n+                par_iter(&owner_info.bodies.raw).enumerate().for_each(|(local_id, body)| {\n+                    if body.is_some() {\n+                        let local_id = ItemLocalId::new(local_id);\n+                        let hir_id = HirId { owner, local_id };\n+                        let body_id = BodyId { hir_id };\n+                        f(self.body_owner_def_id(body_id))\n+                    }\n                 })\n             }\n         });"}, {"sha": "094198713cc21caac10e41be0b0d395d2428380e", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1ace488fc328ee20397783e3046971e6f09ac5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=cd1ace488fc328ee20397783e3046971e6f09ac5", "patch": "@@ -65,7 +65,7 @@ pub struct OwnerNodes<'tcx> {\n     // The zeroth node's parent is trash, but is never accessed.\n     nodes: IndexVec<ItemLocalId, Option<ParentedNode<'tcx>>>,\n     /// Content of local bodies.\n-    bodies: FxHashMap<ItemLocalId, &'tcx Body<'tcx>>,\n+    bodies: &'tcx IndexVec<ItemLocalId, Option<&'tcx Body<'tcx>>>,\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for OwnerNodes<'tcx> {"}]}