{"sha": "6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYzI2OGUzMTZkMzdkOTdmYmRkYTZjMWJmM2U1YTU4ZGVhNDcwZmU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-18T10:47:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-24T11:17:51Z"}, "message": "hir: consistent use and naming of lang items\n\nThis commit adjusts the naming of various lang items so that they are\nconsistent and don't include prefixes containing the target or\n\"LangItem\". In addition, lang item variants are no longer exported from\nthe `lang_items` module.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "cea76eb02b315004b437ce413939f8525a719f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea76eb02b315004b437ce413939f8525a719f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl9Dod8ACgkQJZLnbIc4\nH9mCug/+MXAJywH8/UczlWQTozAz1Gr4jwVWVqaiHw4PtE9uFbAVH9YGTvZb41Ys\nYS5RJn0OKwkCXFtiulRHEHZBZCkMuqT3RbQCciv3AtlwI7ieuzOuzmckEJS1rlpj\nPFMC5mprtXIDgZN68Ck3gnyeiv9bgBsrsT50eyO0k/XM6X6Q1UQ5wzImd8Wx6mEV\nYNQp4cgBXcrSuNpgoluSDFd1lvfQ0DaXZ9dha7r/pIV0SBOwup7AahuPfReAAiRK\nRNHZuULThp7YlSJcaA8ZUdPyCl0MjUglACk3lwcccEA0OFAdkp63NkrR9FQunhrO\nnp+Kdjb4vezLXE4MXqFgygR7A1u/oYV7DF1p7zJe6xud5ryfvYZtxAuBf8iroDgh\nEowWuLwxfaxWT/LKVqPslv6vFFO2n8BawgQuf1ompxcLaQEov/gnK6O67nKRVIy4\ndtZSNMJjHF0j+EYX3BKoA5Ucn4EIUS6kq4ma0d738wqFqDJKOwNM3fsYKViwZTjc\nDuI3JRpc/2/kDMUezFbA1KLY+T8c2yHvEolp/j4x6GvVZPjtDBMlo0VlQQnJ1ZLQ\nz/GEjePWOdZSrx3fcL+lXkQ8HVRtT5mI7BMIayBK3z0z2X2z/54l1p1WrhSX6P0V\nQNIk/SyIlKOYJjDC3cZwB1Cwt1bxuQpTMVtgo7T1CrZeTco4AG0=\n=VG1N\n-----END PGP SIGNATURE-----", "payload": "tree cea76eb02b315004b437ce413939f8525a719f34\nparent 9d7456243244141808b39ee8ed32767a7a1dc7d7\nauthor David Wood <david@davidtw.co> 1597747647 +0100\ncommitter David Wood <david@davidtw.co> 1598267871 +0100\n\nhir: consistent use and naming of lang items\n\nThis commit adjusts the naming of various lang items so that they are\nconsistent and don't include prefixes containing the target or\n\"LangItem\". In addition, lang item variants are no longer exported from\nthe `lang_items` module.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "html_url": "https://github.com/rust-lang/rust/commit/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d7456243244141808b39ee8ed32767a7a1dc7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7456243244141808b39ee8ed32767a7a1dc7d7", "html_url": "https://github.com/rust-lang/rust/commit/9d7456243244141808b39ee8ed32767a7a1dc7d7"}], "stats": {"total": 576, "additions": 277, "deletions": 299}, "files": [{"sha": "586355fe6136e9a62fb1000e5de12d2c70549941", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -2058,7 +2058,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         hir::GenericBound::LangItemTrait(\n             // ::std::future::Future<future_params>\n-            hir::LangItem::FutureTraitLangItem,\n+            hir::LangItem::Future,\n             span,\n             self.next_id(),\n             future_args,"}, {"sha": "77c12c410d5f97cb48dfd06dee64bf971e9cf2fc", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -31,7 +31,7 @@ use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n-use rustc_hir::lang_items::StartFnLangItem;\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::cstore::EncodedMetadata;\n@@ -458,7 +458,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         let (arg_argc, arg_argv) = get_argc_argv(cx, &mut bx);\n \n         let (start_fn, args) = if use_start_lang_item {\n-            let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n+            let start_def_id = cx.tcx().require_lang_item(LangItem::Start, None);\n             let start_fn = cx.get_fn_addr(\n                 ty::Instance::resolve(\n                     cx.tcx(),"}, {"sha": "8048a569f79ea7b369ccc119783210b5bde04298", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -10,7 +10,7 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_ast as ast;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{AllocId, ConstValue, Pointer, Scalar};\n@@ -420,14 +420,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n                 // It's `fn panic_bounds_check(index: usize, len: usize)`,\n                 // and `#[track_caller]` adds an implicit third argument.\n-                (lang_items::PanicBoundsCheckFnLangItem, vec![index, len, location])\n+                (LangItem::PanicBoundsCheck, vec![index, len, location])\n             }\n             _ => {\n                 let msg_str = Symbol::intern(msg.description());\n                 let msg = bx.const_str(msg_str);\n                 // It's `pub fn panic(expr: &str)`, with the wide reference being passed\n                 // as two arguments, and `#[track_caller]` adds an implicit third argument.\n-                (lang_items::PanicFnLangItem, vec![msg.0, msg.1, location])\n+                (LangItem::Panic, vec![msg.0, msg.1, location])\n             }\n         };\n \n@@ -492,8 +492,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                 // Obtain the panic entry point.\n                 // FIXME: dedup this with `codegen_assert_terminator` above.\n-                let def_id =\n-                    common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n+                let def_id = common::langcall(bx.tcx(), Some(span), \"\", LangItem::Panic);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n                 let fn_abi = FnAbi::of_instance(bx, instance, &[]);\n                 let llfn = bx.get_fn_addr(instance);"}, {"sha": "71f924df119a3ba6ebb47040dd051938e8f3c688", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -8,7 +8,7 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_apfloat::{ieee, Float, Round, Status};\n-use rustc_hir::lang_items::ExchangeMallocFnLangItem;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n@@ -507,7 +507,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let llty_ptr = bx.cx().backend_type(box_layout);\n \n                 // Allocate space:\n-                let def_id = match bx.tcx().lang_items().require(ExchangeMallocFnLangItem) {\n+                let def_id = match bx.tcx().lang_items().require(LangItem::ExchangeMalloc) {\n                     Ok(id) => id,\n                     Err(s) => {\n                         bx.cx().sess().fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));"}, {"sha": "acf6847c014f14e6a2461f7be547aa26d5f2d1ed", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 153, "deletions": 158, "changes": 311, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -7,8 +7,6 @@\n //! * Traits that represent operators; e.g., `Add`, `Sub`, `Index`.\n //! * Functions called by the compiler itself.\n \n-pub use self::LangItem::*;\n-\n use crate::def_id::DefId;\n use crate::{MethodKind, Target};\n \n@@ -57,14 +55,14 @@ macro_rules! language_item_table {\n             /// that is `#[lang = \"eq\"]` would result in `sym::eq`.\n             pub fn name(self) -> Symbol {\n                 match self {\n-                    $( $variant => $name, )*\n+                    $( LangItem::$variant => $name, )*\n                 }\n             }\n \n             pub fn group(self) -> Option<LangItemGroup> {\n                 use LangItemGroup::*;\n                 match self {\n-                    $( $variant => expand_group!($($group)*), )*\n+                    $( LangItem::$variant => expand_group!($($group)*), )*\n                 }\n             }\n         }\n@@ -87,7 +85,7 @@ macro_rules! language_item_table {\n                 fn init_none(_: LangItem) -> Option<DefId> { None }\n \n                 Self {\n-                    items: vec![$(init_none($variant)),*],\n+                    items: vec![$(init_none(LangItem::$variant)),*],\n                     missing: Vec::new(),\n                     groups: [vec![]; NUM_GROUPS],\n                 }\n@@ -114,7 +112,7 @@ macro_rules! language_item_table {\n                 /// exists.\n                 #[allow(dead_code)]\n                 pub fn $method(&self) -> Option<DefId> {\n-                    self.items[$variant as usize]\n+                    self.items[LangItem::$variant as usize]\n                 }\n             )*\n         }\n@@ -123,7 +121,7 @@ macro_rules! language_item_table {\n             /// A mapping from the name of the lang item to its order and the form it must be of.\n             pub static ref ITEM_REFS: FxHashMap<Symbol, (usize, Target)> = {\n                 let mut item_refs = FxHashMap::default();\n-                $( item_refs.insert($name, ($variant as usize, $target)); )*\n+                $( item_refs.insert($name, (LangItem::$variant as usize, $target)); )*\n                 item_refs\n             };\n         }\n@@ -161,179 +159,176 @@ where\n }\n \n language_item_table! {\n-//  Variant name,                  Name,                    Method name,             Target;\n-    BoolImplItem,                  sym::bool,               bool_impl,               Target::Impl;\n-    CharImplItem,                  sym::char,               char_impl,               Target::Impl;\n-    StrImplItem,                   sym::str,                str_impl,                Target::Impl;\n-    ArrayImplItem,                 sym::array,              array_impl,              Target::Impl;\n-    SliceImplItem,                 sym::slice,              slice_impl,              Target::Impl;\n-    SliceU8ImplItem,               sym::slice_u8,           slice_u8_impl,           Target::Impl;\n-    StrAllocImplItem,              sym::str_alloc,          str_alloc_impl,          Target::Impl;\n-    SliceAllocImplItem,            sym::slice_alloc,        slice_alloc_impl,        Target::Impl;\n-    SliceU8AllocImplItem,          sym::slice_u8_alloc,     slice_u8_alloc_impl,     Target::Impl;\n-    ConstPtrImplItem,              sym::const_ptr,          const_ptr_impl,          Target::Impl;\n-    MutPtrImplItem,                sym::mut_ptr,            mut_ptr_impl,            Target::Impl;\n-    ConstSlicePtrImplItem,         sym::const_slice_ptr,    const_slice_ptr_impl,    Target::Impl;\n-    MutSlicePtrImplItem,           sym::mut_slice_ptr,      mut_slice_ptr_impl,      Target::Impl;\n-    I8ImplItem,                    sym::i8,                 i8_impl,                 Target::Impl;\n-    I16ImplItem,                   sym::i16,                i16_impl,                Target::Impl;\n-    I32ImplItem,                   sym::i32,                i32_impl,                Target::Impl;\n-    I64ImplItem,                   sym::i64,                i64_impl,                Target::Impl;\n-    I128ImplItem,                  sym::i128,               i128_impl,               Target::Impl;\n-    IsizeImplItem,                 sym::isize,              isize_impl,              Target::Impl;\n-    U8ImplItem,                    sym::u8,                 u8_impl,                 Target::Impl;\n-    U16ImplItem,                   sym::u16,                u16_impl,                Target::Impl;\n-    U32ImplItem,                   sym::u32,                u32_impl,                Target::Impl;\n-    U64ImplItem,                   sym::u64,                u64_impl,                Target::Impl;\n-    U128ImplItem,                  sym::u128,               u128_impl,               Target::Impl;\n-    UsizeImplItem,                 sym::usize,              usize_impl,              Target::Impl;\n-    F32ImplItem,                   sym::f32,                f32_impl,                Target::Impl;\n-    F64ImplItem,                   sym::f64,                f64_impl,                Target::Impl;\n-    F32RuntimeImplItem,            sym::f32_runtime,        f32_runtime_impl,        Target::Impl;\n-    F64RuntimeImplItem,            sym::f64_runtime,        f64_runtime_impl,        Target::Impl;\n-\n-    SizedTraitLangItem,            sym::sized,              sized_trait,             Target::Trait;\n-    UnsizeTraitLangItem,           sym::unsize,             unsize_trait,            Target::Trait;\n-    // trait injected by #[derive(PartialEq)], (i.e. \"Partial EQ\").\n-    StructuralPeqTraitLangItem,    sym::structural_peq,     structural_peq_trait,    Target::Trait;\n-    // trait injected by #[derive(Eq)], (i.e. \"Total EQ\"; no, I will not apologize).\n-    StructuralTeqTraitLangItem,    sym::structural_teq,     structural_teq_trait,    Target::Trait;\n-    CopyTraitLangItem,             sym::copy,               copy_trait,              Target::Trait;\n-    CloneTraitLangItem,            sym::clone,              clone_trait,             Target::Trait;\n-    SyncTraitLangItem,             sym::sync,               sync_trait,              Target::Trait;\n-    DiscriminantKindTraitLangItem, sym::discriminant_kind,  discriminant_kind_trait, Target::Trait;\n+//  Variant name,            Name,                    Method name,             Target;\n+    Bool,                    sym::bool,                bool_impl,                  Target::Impl;\n+    Char,                    sym::char,                char_impl,                  Target::Impl;\n+    Str,                     sym::str,                 str_impl,                   Target::Impl;\n+    Array,                   sym::array,               array_impl,                 Target::Impl;\n+    Slice,                   sym::slice,               slice_impl,                 Target::Impl;\n+    SliceU8,                 sym::slice_u8,            slice_u8_impl,              Target::Impl;\n+    StrAlloc,                sym::str_alloc,           str_alloc_impl,             Target::Impl;\n+    SliceAlloc,              sym::slice_alloc,         slice_alloc_impl,           Target::Impl;\n+    SliceU8Alloc,            sym::slice_u8_alloc,      slice_u8_alloc_impl,        Target::Impl;\n+    ConstPtr,                sym::const_ptr,           const_ptr_impl,             Target::Impl;\n+    MutPtr,                  sym::mut_ptr,             mut_ptr_impl,               Target::Impl;\n+    ConstSlicePtr,           sym::const_slice_ptr,     const_slice_ptr_impl,       Target::Impl;\n+    MutSlicePtr,             sym::mut_slice_ptr,       mut_slice_ptr_impl,         Target::Impl;\n+    I8,                      sym::i8,                  i8_impl,                    Target::Impl;\n+    I16,                     sym::i16,                 i16_impl,                   Target::Impl;\n+    I32,                     sym::i32,                 i32_impl,                   Target::Impl;\n+    I64,                     sym::i64,                 i64_impl,                   Target::Impl;\n+    I128,                    sym::i128,                i128_impl,                  Target::Impl;\n+    Isize,                   sym::isize,               isize_impl,                 Target::Impl;\n+    U8,                      sym::u8,                  u8_impl,                    Target::Impl;\n+    U16,                     sym::u16,                 u16_impl,                   Target::Impl;\n+    U32,                     sym::u32,                 u32_impl,                   Target::Impl;\n+    U64,                     sym::u64,                 u64_impl,                   Target::Impl;\n+    U128,                    sym::u128,                u128_impl,                  Target::Impl;\n+    Usize,                   sym::usize,               usize_impl,                 Target::Impl;\n+    F32,                     sym::f32,                 f32_impl,                   Target::Impl;\n+    F64,                     sym::f64,                 f64_impl,                   Target::Impl;\n+    F32Runtime,              sym::f32_runtime,         f32_runtime_impl,           Target::Impl;\n+    F64Runtime,              sym::f64_runtime,         f64_runtime_impl,           Target::Impl;\n+\n+    Sized,                   sym::sized,               sized_trait,                Target::Trait;\n+    Unsize,                  sym::unsize,              unsize_trait,               Target::Trait;\n+    // Trait injected by #[derive(PartialEq)], (i.e. \"Partial EQ\").\n+    StructuralPeq,           sym::structural_peq,      structural_peq_trait,       Target::Trait;\n+    // Trait injected by #[derive(Eq)], (i.e. \"Total EQ\"; no, I will not apologize).\n+    StructuralTeq,           sym::structural_teq,      structural_teq_trait,       Target::Trait;\n+    Copy,                    sym::copy,                copy_trait,                 Target::Trait;\n+    Clone,                   sym::clone,               clone_trait,                Target::Trait;\n+    Sync,                    sym::sync,                sync_trait,                 Target::Trait;\n+    DiscriminantKind,        sym::discriminant_kind,   discriminant_kind_trait,    Target::Trait;\n     // The associated item of `trait DiscriminantKind`.\n-    DiscriminantTypeLangItem,      sym::discriminant_type,  discriminant_type,       Target::AssocTy;\n-\n-    FreezeTraitLangItem,           sym::freeze,             freeze_trait,            Target::Trait;\n-\n-    DropTraitLangItem,             sym::drop,               drop_trait,              Target::Trait;\n-\n-    CoerceUnsizedTraitLangItem,    sym::coerce_unsized,     coerce_unsized_trait,    Target::Trait;\n-    DispatchFromDynTraitLangItem,  sym::dispatch_from_dyn,  dispatch_from_dyn_trait, Target::Trait;\n-\n-    AddTraitLangItem(Op),          sym::add,                add_trait,               Target::Trait;\n-    SubTraitLangItem(Op),          sym::sub,                sub_trait,               Target::Trait;\n-    MulTraitLangItem(Op),          sym::mul,                mul_trait,               Target::Trait;\n-    DivTraitLangItem(Op),          sym::div,                div_trait,               Target::Trait;\n-    RemTraitLangItem(Op),          sym::rem,                rem_trait,               Target::Trait;\n-    NegTraitLangItem(Op),          sym::neg,                neg_trait,               Target::Trait;\n-    NotTraitLangItem(Op),          sym::not,                not_trait,               Target::Trait;\n-    BitXorTraitLangItem(Op),       sym::bitxor,             bitxor_trait,            Target::Trait;\n-    BitAndTraitLangItem(Op),       sym::bitand,             bitand_trait,            Target::Trait;\n-    BitOrTraitLangItem(Op),        sym::bitor,              bitor_trait,             Target::Trait;\n-    ShlTraitLangItem(Op),          sym::shl,                shl_trait,               Target::Trait;\n-    ShrTraitLangItem(Op),          sym::shr,                shr_trait,               Target::Trait;\n-    AddAssignTraitLangItem(Op),    sym::add_assign,         add_assign_trait,        Target::Trait;\n-    SubAssignTraitLangItem(Op),    sym::sub_assign,         sub_assign_trait,        Target::Trait;\n-    MulAssignTraitLangItem(Op),    sym::mul_assign,         mul_assign_trait,        Target::Trait;\n-    DivAssignTraitLangItem(Op),    sym::div_assign,         div_assign_trait,        Target::Trait;\n-    RemAssignTraitLangItem(Op),    sym::rem_assign,         rem_assign_trait,        Target::Trait;\n-    BitXorAssignTraitLangItem(Op), sym::bitxor_assign,      bitxor_assign_trait,     Target::Trait;\n-    BitAndAssignTraitLangItem(Op), sym::bitand_assign,      bitand_assign_trait,     Target::Trait;\n-    BitOrAssignTraitLangItem(Op),  sym::bitor_assign,       bitor_assign_trait,      Target::Trait;\n-    ShlAssignTraitLangItem(Op),    sym::shl_assign,         shl_assign_trait,        Target::Trait;\n-    ShrAssignTraitLangItem(Op),    sym::shr_assign,         shr_assign_trait,        Target::Trait;\n-    IndexTraitLangItem(Op),        sym::index,              index_trait,             Target::Trait;\n-    IndexMutTraitLangItem(Op),     sym::index_mut,          index_mut_trait,         Target::Trait;\n-\n-    UnsafeCellTypeLangItem,        sym::unsafe_cell,        unsafe_cell_type,        Target::Struct;\n-    VaListTypeLangItem,            sym::va_list,            va_list,                 Target::Struct;\n-\n-    DerefTraitLangItem,            sym::deref,              deref_trait,             Target::Trait;\n-    DerefMutTraitLangItem,         sym::deref_mut,          deref_mut_trait,         Target::Trait;\n-    ReceiverTraitLangItem,         sym::receiver,           receiver_trait,          Target::Trait;\n-\n-    FnTraitLangItem,               kw::Fn,                  fn_trait,                Target::Trait;\n-    FnMutTraitLangItem,            sym::fn_mut,             fn_mut_trait,            Target::Trait;\n-    FnOnceTraitLangItem,           sym::fn_once,            fn_once_trait,           Target::Trait;\n-\n-    FnOnceOutputLangItem,          sym::fn_once_output,     fn_once_output,          Target::AssocTy;\n-\n-    FutureTraitLangItem,           sym::future_trait,       future_trait,            Target::Trait;\n-    GeneratorStateLangItem,        sym::generator_state,    gen_state,               Target::Enum;\n-    GeneratorTraitLangItem,        sym::generator,          gen_trait,               Target::Trait;\n-    UnpinTraitLangItem,            sym::unpin,              unpin_trait,             Target::Trait;\n-    PinTypeLangItem,               sym::pin,                pin_type,                Target::Struct;\n-\n-    // Don't be fooled by the naming here: this lang item denotes `PartialEq`, not `Eq`.\n-    EqTraitLangItem,               sym::eq,                 eq_trait,                Target::Trait;\n-    PartialOrdTraitLangItem,       sym::partial_ord,        partial_ord_trait,       Target::Trait;\n-\n-    // A number of panic-related lang items. The `panic` item corresponds to\n-    // divide-by-zero and various panic cases with `match`. The\n-    // `panic_bounds_check` item is for indexing arrays.\n+    Discriminant,            sym::discriminant_type,   discriminant_type,          Target::AssocTy;\n+\n+    Freeze,                  sym::freeze,              freeze_trait,               Target::Trait;\n+\n+    Drop,                    sym::drop,                drop_trait,                 Target::Trait;\n+\n+    CoerceUnsized,           sym::coerce_unsized,      coerce_unsized_trait,       Target::Trait;\n+    DispatchFromDyn,         sym::dispatch_from_dyn,   dispatch_from_dyn_trait,    Target::Trait;\n+\n+    Add(Op),                 sym::add,                 add_trait,                  Target::Trait;\n+    Sub(Op),                 sym::sub,                 sub_trait,                  Target::Trait;\n+    Mul(Op),                 sym::mul,                 mul_trait,                  Target::Trait;\n+    Div(Op),                 sym::div,                 div_trait,                  Target::Trait;\n+    Rem(Op),                 sym::rem,                 rem_trait,                  Target::Trait;\n+    Neg(Op),                 sym::neg,                 neg_trait,                  Target::Trait;\n+    Not(Op),                 sym::not,                 not_trait,                  Target::Trait;\n+    BitXor(Op),              sym::bitxor,              bitxor_trait,               Target::Trait;\n+    BitAnd(Op),              sym::bitand,              bitand_trait,               Target::Trait;\n+    BitOr(Op),               sym::bitor,               bitor_trait,                Target::Trait;\n+    Shl(Op),                 sym::shl,                 shl_trait,                  Target::Trait;\n+    Shr(Op),                 sym::shr,                 shr_trait,                  Target::Trait;\n+    AddAssign(Op),           sym::add_assign,          add_assign_trait,           Target::Trait;\n+    SubAssign(Op),           sym::sub_assign,          sub_assign_trait,           Target::Trait;\n+    MulAssign(Op),           sym::mul_assign,          mul_assign_trait,           Target::Trait;\n+    DivAssign(Op),           sym::div_assign,          div_assign_trait,           Target::Trait;\n+    RemAssign(Op),           sym::rem_assign,          rem_assign_trait,           Target::Trait;\n+    BitXorAssign(Op),        sym::bitxor_assign,       bitxor_assign_trait,        Target::Trait;\n+    BitAndAssign(Op),        sym::bitand_assign,       bitand_assign_trait,        Target::Trait;\n+    BitOrAssign(Op),         sym::bitor_assign,        bitor_assign_trait,         Target::Trait;\n+    ShlAssign(Op),           sym::shl_assign,          shl_assign_trait,           Target::Trait;\n+    ShrAssign(Op),           sym::shr_assign,          shr_assign_trait,           Target::Trait;\n+    Index(Op),               sym::index,               index_trait,                Target::Trait;\n+    IndexMut(Op),            sym::index_mut,           index_mut_trait,            Target::Trait;\n+\n+    UnsafeCell,              sym::unsafe_cell,         unsafe_cell_type,           Target::Struct;\n+    VaList,                  sym::va_list,             va_list,                    Target::Struct;\n+\n+    Deref,                   sym::deref,               deref_trait,                Target::Trait;\n+    DerefMut,                sym::deref_mut,           deref_mut_trait,            Target::Trait;\n+    Receiver,                sym::receiver,            receiver_trait,             Target::Trait;\n+\n+    Fn,                      kw::Fn,                   fn_trait,                   Target::Trait;\n+    FnMut,                   sym::fn_mut,              fn_mut_trait,               Target::Trait;\n+    FnOnce,                  sym::fn_once,             fn_once_trait,              Target::Trait;\n+\n+    FnOnceOutput,            sym::fn_once_output,      fn_once_output,             Target::AssocTy;\n+\n+    Future,                  sym::future_trait,        future_trait,               Target::Trait;\n+    GeneratorState,          sym::generator_state,     gen_state,                  Target::Enum;\n+    Generator,               sym::generator,           gen_trait,                  Target::Trait;\n+    Unpin,                   sym::unpin,               unpin_trait,                Target::Trait;\n+    Pin,                     sym::pin,                 pin_type,                   Target::Struct;\n+\n+    PartialEq,               sym::eq,                  eq_trait,                   Target::Trait;\n+    PartialOrd,              sym::partial_ord,         partial_ord_trait,          Target::Trait;\n+\n+    // A number of panic-related lang items. The `panic` item corresponds to divide-by-zero and\n+    // various panic cases with `match`. The `panic_bounds_check` item is for indexing arrays.\n     //\n-    // The `begin_unwind` lang item has a predefined symbol name and is sort of\n-    // a \"weak lang item\" in the sense that a crate is not required to have it\n-    // defined to use it, but a final product is required to define it\n-    // somewhere. Additionally, there are restrictions on crates that use a weak\n-    // lang item, but do not have it defined.\n-    PanicFnLangItem,               sym::panic,              panic_fn,                Target::Fn;\n-    PanicBoundsCheckFnLangItem,    sym::panic_bounds_check, panic_bounds_check_fn,   Target::Fn;\n-    PanicInfoLangItem,             sym::panic_info,         panic_info,              Target::Struct;\n-    PanicLocationLangItem,         sym::panic_location,     panic_location,          Target::Struct;\n-    PanicImplLangItem,             sym::panic_impl,         panic_impl,              Target::Fn;\n-    // Libstd panic entry point. Necessary for const eval to be able to catch it\n-    BeginPanicFnLangItem,          sym::begin_panic,        begin_panic_fn,          Target::Fn;\n+    // The `begin_unwind` lang item has a predefined symbol name and is sort of a \"weak lang item\"\n+    // in the sense that a crate is not required to have it defined to use it, but a final product\n+    // is required to define it somewhere. Additionally, there are restrictions on crates that use\n+    // a weak lang item, but do not have it defined.\n+    Panic,                   sym::panic,               panic_fn,                   Target::Fn;\n+    PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn;\n+    PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct;\n+    PanicLocation,           sym::panic_location,      panic_location,             Target::Struct;\n+    PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn;\n+    // libstd panic entry point. Necessary for const eval to be able to catch it\n+    BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn;\n \n-    ExchangeMallocFnLangItem,      sym::exchange_malloc,    exchange_malloc_fn,      Target::Fn;\n-    BoxFreeFnLangItem,             sym::box_free,           box_free_fn,             Target::Fn;\n-    DropInPlaceFnLangItem,         sym::drop_in_place,      drop_in_place_fn,        Target::Fn;\n-    OomLangItem,                   sym::oom,                oom,                     Target::Fn;\n-    AllocLayoutLangItem,           sym::alloc_layout,       alloc_layout,            Target::Struct;\n+    ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn;\n+    BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn;\n+    DropInPlace,             sym::drop_in_place,       drop_in_place_fn,           Target::Fn;\n+    Oom,                     sym::oom,                 oom,                        Target::Fn;\n+    AllocLayout,             sym::alloc_layout,        alloc_layout,               Target::Struct;\n \n-    StartFnLangItem,               sym::start,              start_fn,                Target::Fn;\n+    Start,                   sym::start,               start_fn,                   Target::Fn;\n \n-    EhPersonalityLangItem,         sym::eh_personality,     eh_personality,          Target::Fn;\n-    EhCatchTypeinfoLangItem,       sym::eh_catch_typeinfo,  eh_catch_typeinfo,       Target::Static;\n+    EhPersonality,           sym::eh_personality,      eh_personality,             Target::Fn;\n+    EhCatchTypeinfo,         sym::eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static;\n \n-    OwnedBoxLangItem,              sym::owned_box,          owned_box,               Target::Struct;\n+    OwnedBox,                sym::owned_box,           owned_box,                  Target::Struct;\n \n-    PhantomDataItem,               sym::phantom_data,       phantom_data,            Target::Struct;\n+    PhantomData,             sym::phantom_data,        phantom_data,               Target::Struct;\n \n-    ManuallyDropItem,              sym::manually_drop,      manually_drop,           Target::Struct;\n+    ManuallyDrop,            sym::manually_drop,       manually_drop,              Target::Struct;\n \n-    MaybeUninitLangItem,           sym::maybe_uninit,       maybe_uninit,            Target::Union;\n+    MaybeUninit,             sym::maybe_uninit,        maybe_uninit,               Target::Union;\n \n     // Align offset for stride != 1; must not panic.\n-    AlignOffsetLangItem,           sym::align_offset,       align_offset_fn,         Target::Fn;\n+    AlignOffset,             sym::align_offset,        align_offset_fn,            Target::Fn;\n \n-    TerminationTraitLangItem,      sym::termination,        termination,             Target::Trait;\n+    Termination,             sym::termination,         termination,                Target::Trait;\n \n-    TryTraitLangItem,              kw::Try,                 try_trait,               Target::Trait;\n+    Try,                     kw::Try,                  try_trait,                  Target::Trait;\n \n     // Language items from AST lowering\n-    TryFromError,                  sym::from_error,         from_error_fn,           Target::Method(MethodKind::Trait { body: false });\n-    TryFromOk,                     sym::from_ok,            from_ok_fn,              Target::Method(MethodKind::Trait { body: false });\n-    TryIntoResult,                 sym::into_result,        into_result_fn,          Target::Method(MethodKind::Trait { body: false });\n+    TryFromError,            sym::from_error,          from_error_fn,              Target::Method(MethodKind::Trait { body: false });\n+    TryFromOk,               sym::from_ok,             from_ok_fn,                 Target::Method(MethodKind::Trait { body: false });\n+    TryIntoResult,           sym::into_result,         into_result_fn,             Target::Method(MethodKind::Trait { body: false });\n \n-    PollReady,                     sym::Ready,              poll_ready_variant,      Target::Variant;\n-    PollPending,                   sym::Pending,            poll_pending_variant,    Target::Variant;\n+    PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant;\n+    PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant;\n \n-    FromGenerator,                 sym::from_generator,     from_generator_fn,       Target::Fn;\n-    GetContext,                    sym::get_context,        get_context_fn,          Target::Fn;\n+    FromGenerator,           sym::from_generator,      from_generator_fn,          Target::Fn;\n+    GetContext,              sym::get_context,         get_context_fn,             Target::Fn;\n \n-    FuturePoll,                    sym::poll,               future_poll_fn,          Target::Method(MethodKind::Trait { body: false });\n+    FuturePoll,              sym::poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false });\n \n-    FromFrom,                      sym::from,               from_fn,                 Target::Method(MethodKind::Trait { body: false });\n+    FromFrom,                sym::from,                from_fn,                    Target::Method(MethodKind::Trait { body: false });\n \n-    OptionSome,                    sym::Some,               option_some_variant,     Target::Variant;\n-    OptionNone,                    sym::None,               option_none_variant,     Target::Variant;\n+    OptionSome,              sym::Some,                option_some_variant,        Target::Variant;\n+    OptionNone,              sym::None,                option_none_variant,        Target::Variant;\n \n-    ResultOk,                      sym::Ok,                 result_ok_variant,       Target::Variant;\n-    ResultErr,                     sym::Err,                result_err_variant,      Target::Variant;\n+    ResultOk,                sym::Ok,                  result_ok_variant,          Target::Variant;\n+    ResultErr,               sym::Err,                 result_err_variant,         Target::Variant;\n \n-    IntoIterIntoIter,              sym::into_iter,          into_iter_fn,            Target::Method(MethodKind::Trait { body: false });\n-    IteratorNext,                  sym::next,               next_fn,                 Target::Method(MethodKind::Trait { body: false});\n+    IntoIterIntoIter,        sym::into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false });\n+    IteratorNext,            sym::next,                next_fn,                    Target::Method(MethodKind::Trait { body: false});\n \n-    PinNewUnchecked,               sym::new_unchecked,      new_unchecked_fn,        Target::Method(MethodKind::Inherent);\n+    PinNewUnchecked,         sym::new_unchecked,       new_unchecked_fn,           Target::Method(MethodKind::Inherent);\n \n-    RangeFrom,                     sym::RangeFrom,           range_from_struct,          Target::Struct;\n-    RangeFull,                     sym::RangeFull,           range_full_struct,          Target::Struct;\n-    RangeInclusiveStruct,          sym::RangeInclusive,      range_inclusive_struct,     Target::Struct;\n-    RangeInclusiveNew,             sym::range_inclusive_new, range_inclusive_new_method, Target::Method(MethodKind::Inherent);\n-    Range,                         sym::Range,               range_struct,               Target::Struct;\n-    RangeToInclusive,              sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct;\n-    RangeTo,                       sym::RangeTo,             range_to_struct,            Target::Struct;\n+    RangeFrom,               sym::RangeFrom,           range_from_struct,          Target::Struct;\n+    RangeFull,               sym::RangeFull,           range_full_struct,          Target::Struct;\n+    RangeInclusiveStruct,    sym::RangeInclusive,      range_inclusive_struct,     Target::Struct;\n+    RangeInclusiveNew,       sym::range_inclusive_new, range_inclusive_new_method, Target::Method(MethodKind::Inherent);\n+    Range,                   sym::Range,               range_struct,               Target::Struct;\n+    RangeToInclusive,        sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct;\n+    RangeTo,                 sym::RangeTo,             range_to_struct,            Target::Struct;\n }"}, {"sha": "74e2a90262ce60a3cec9c410ff9ba46d5774f0c8", "filename": "src/librustc_hir/weak_lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_hir%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_hir%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fweak_lang_items.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -15,7 +15,7 @@ macro_rules! weak_lang_items {\n lazy_static! {\n     pub static ref WEAK_ITEMS_REFS: FxHashMap<Symbol, LangItem> = {\n         let mut map = FxHashMap::default();\n-        $(map.insert(sym::$name, lang_items::$item);)*\n+        $(map.insert(sym::$name, LangItem::$item);)*\n         map\n     };\n }\n@@ -46,7 +46,7 @@ impl LanguageItems {\n ) }\n \n weak_lang_items! {\n-    panic_impl,         PanicImplLangItem,          rust_begin_unwind;\n-    eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n-    oom,                OomLangItem,                rust_oom;\n+    panic_impl,         PanicImpl,          rust_begin_unwind;\n+    eh_personality,     EhPersonality,      rust_eh_personality;\n+    oom,                Oom,                rust_oom;\n }"}, {"sha": "3e1caa3b5497799ae4dce83812877d04f7e8a318", "filename": "src/librustc_middle/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Flang_items.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -53,7 +53,7 @@ pub fn required(tcx: TyCtxt<'_>, lang_item: LangItem) -> bool {\n     // symbols. Other panic runtimes ensure that the relevant symbols are\n     // available to link things together, but they're never exercised.\n     match tcx.sess.panic_strategy() {\n-        PanicStrategy::Abort => lang_item != LangItem::EhPersonalityLangItem,\n+        PanicStrategy::Abort => lang_item != LangItem::EhPersonality,\n         PanicStrategy::Unwind => true,\n     }\n }"}, {"sha": "6a9bb8d6c284fc31d09a89c1e12ac8cd283cbfae", "filename": "src/librustc_middle/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fadjustment.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -2,7 +2,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{DerefMutTraitLangItem, DerefTraitLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_macros::HashStable;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n@@ -118,8 +118,8 @@ pub struct OverloadedDeref<'tcx> {\n impl<'tcx> OverloadedDeref<'tcx> {\n     pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> (DefId, SubstsRef<'tcx>) {\n         let trait_def_id = match self.mutbl {\n-            hir::Mutability::Not => tcx.require_lang_item(DerefTraitLangItem, None),\n-            hir::Mutability::Mut => tcx.require_lang_item(DerefMutTraitLangItem, None),\n+            hir::Mutability::Not => tcx.require_lang_item(LangItem::Deref, None),\n+            hir::Mutability::Mut => tcx.require_lang_item(LangItem::DerefMut, None),\n         };\n         let method_def_id = tcx\n             .associated_items(trait_def_id)"}, {"sha": "18ae744cb1ee328792bdf203c039e29155d73a73", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -40,7 +40,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::lang_items::{self, PanicLocationLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -1538,7 +1538,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn caller_location_ty(&self) -> Ty<'tcx> {\n         self.mk_imm_ref(\n             self.lifetimes.re_static,\n-            self.type_of(self.require_lang_item(PanicLocationLangItem, None))\n+            self.type_of(self.require_lang_item(LangItem::PanicLocation, None))\n                 .subst(*self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n         )\n     }\n@@ -2185,12 +2185,12 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem, None);\n+        let def_id = self.require_lang_item(LangItem::OwnedBox, None);\n         self.mk_generic_adt(def_id, ty)\n     }\n \n     #[inline]\n-    pub fn mk_lang_item(self, ty: Ty<'tcx>, item: lang_items::LangItem) -> Option<Ty<'tcx>> {\n+    pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {\n         let def_id = self.lang_items().require(item).ok()?;\n         Some(self.mk_generic_adt(def_id, ty))\n     }\n@@ -2203,7 +2203,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(lang_items::MaybeUninitLangItem, None);\n+        let def_id = self.require_lang_item(LangItem::MaybeUninit, None);\n         self.mk_generic_adt(def_id, ty)\n     }\n "}, {"sha": "8e08fe4b87b8256e2f6677030a00f8403b1b4e77", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -5,7 +5,7 @@ use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_hir::lang_items::{DropInPlaceFnLangItem, FnOnceTraitLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_macros::HashStable;\n \n use std::fmt;\n@@ -408,7 +408,7 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     pub fn resolve_drop_in_place(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::Instance<'tcx> {\n-        let def_id = tcx.require_lang_item(DropInPlaceFnLangItem, None);\n+        let def_id = tcx.require_lang_item(LangItem::DropInPlace, None);\n         let substs = tcx.intern_substs(&[ty.into()]);\n         Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n     }\n@@ -419,7 +419,7 @@ impl<'tcx> Instance<'tcx> {\n         substs: ty::SubstsRef<'tcx>,\n     ) -> Instance<'tcx> {\n         debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n-        let fn_once = tcx.require_lang_item(FnOnceTraitLangItem, None);\n+        let fn_once = tcx.require_lang_item(LangItem::FnOnce, None);\n         let call_once = tcx\n             .associated_items(fn_once)\n             .in_definition_order()"}, {"sha": "08bd131565bfa7b1d0f868331156ac95dd8d7687", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::{self as ast, IntTy, UintTy};\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n-use rustc_hir::lang_items::{GeneratorStateLangItem, PinTypeLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n@@ -2371,13 +2371,13 @@ impl<'tcx> ty::Instance<'tcx> {\n                 let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n-                let pin_did = tcx.require_lang_item(PinTypeLangItem, None);\n+                let pin_did = tcx.require_lang_item(LangItem::Pin, None);\n                 let pin_adt_ref = tcx.adt_def(pin_did);\n                 let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n                 let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n \n                 sig.map_bound(|sig| {\n-                    let state_did = tcx.require_lang_item(GeneratorStateLangItem, None);\n+                    let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n                     let state_adt_ref = tcx.adt_def(state_did);\n                     let state_substs =\n                         tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);"}, {"sha": "a961d02f7a2b1e6b153b2920981eaceebe5dc996", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -32,7 +32,7 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n-use rustc_hir::lang_items::{FnMutTraitLangItem, FnOnceTraitLangItem, FnTraitLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Constness, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -2670,9 +2670,9 @@ impl<'tcx> ClosureKind {\n \n     pub fn trait_did(&self, tcx: TyCtxt<'tcx>) -> DefId {\n         match *self {\n-            ClosureKind::Fn => tcx.require_lang_item(FnTraitLangItem, None),\n-            ClosureKind::FnMut => tcx.require_lang_item(FnMutTraitLangItem, None),\n-            ClosureKind::FnOnce => tcx.require_lang_item(FnOnceTraitLangItem, None),\n+            ClosureKind::Fn => tcx.require_lang_item(LangItem::Fn, None),\n+            ClosureKind::FnMut => tcx.require_lang_item(LangItem::FnMut, None),\n+            ClosureKind::FnOnce => tcx.require_lang_item(LangItem::FnOnce, None),\n         }\n     }\n "}, {"sha": "b95d963759a6190f9a2c1e92fe4650b34710ce9a", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::lang_items::{CoerceUnsizedTraitLangItem, CopyTraitLangItem, SizedTraitLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n@@ -507,7 +507,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n             let trait_ref = ty::TraitRef {\n-                def_id: tcx.require_lang_item(CopyTraitLangItem, Some(self.last_span)),\n+                def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),\n                 substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n             };\n \n@@ -1474,7 +1474,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_rvalue(body, rv, location);\n                 if !self.tcx().features().unsized_locals {\n                     let trait_ref = ty::TraitRef {\n-                        def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n+                        def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                         substs: tcx.mk_substs_trait(place_ty, &[]),\n                     };\n                     self.prove_trait_ref(\n@@ -2025,7 +2025,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     self.param_env,\n                                     ty::Binder::bind(ty::TraitRef::new(\n                                         self.tcx().require_lang_item(\n-                                            CopyTraitLangItem,\n+                                            LangItem::Copy,\n                                             Some(self.last_span),\n                                         ),\n                                         tcx.mk_substs_trait(ty, &[]),\n@@ -2050,7 +2050,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 let trait_ref = ty::TraitRef {\n-                    def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n+                    def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n                 };\n \n@@ -2148,10 +2148,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n                         let trait_ref = ty::TraitRef {\n-                            def_id: tcx.require_lang_item(\n-                                CoerceUnsizedTraitLangItem,\n-                                Some(self.last_span),\n-                            ),\n+                            def_id: tcx\n+                                .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),\n                             substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),\n                         };\n "}, {"sha": "9dfc67bcf67aad353376b31fa0baadbd37be3279", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -17,7 +17,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyOwnerKind, HirId};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -456,7 +456,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         if let DefiningTy::FnDef(def_id, _) = defining_ty {\n             if self.infcx.tcx.fn_sig(def_id).c_variadic() {\n                 let va_list_did = self.infcx.tcx.require_lang_item(\n-                    lang_items::VaListTypeLangItem,\n+                    LangItem::VaList,\n                     Some(self.infcx.tcx.def_span(self.mir_def.did)),\n                 );\n                 let region = self"}, {"sha": "d9be28cf9dbb60c44c5b13234601bcbd050d0198", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -1,6 +1,6 @@\n use std::convert::TryFrom;\n \n-use rustc_hir::lang_items::PanicLocationLangItem;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::TerminatorKind;\n use rustc_middle::ty::subst::Subst;\n use rustc_span::{Span, Symbol};\n@@ -63,7 +63,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Allocate memory for `CallerLocation` struct.\n         let loc_ty = self\n             .tcx\n-            .type_of(self.tcx.require_lang_item(PanicLocationLangItem, None))\n+            .type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n             .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n         let location = self.allocate(loc_layout, MemoryKind::CallerLocation);"}, {"sha": "d379f4ef428a6ce44564c4e6c0596a3e4c17a3e0", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -182,7 +182,7 @@ use rustc_errors::{ErrorReported, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{AllocId, ConstValue};\n@@ -594,7 +594,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::Rvalue::NullaryOp(mir::NullOp::Box, _) => {\n                 let tcx = self.tcx;\n                 let exchange_malloc_fn_def_id =\n-                    tcx.require_lang_item(ExchangeMallocFnLangItem, None);\n+                    tcx.require_lang_item(LangItem::ExchangeMalloc, None);\n                 let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n                 if should_codegen_locally(tcx, &instance) {\n                     self.output.push(create_fn_mono_item(self.tcx, instance, span));\n@@ -1083,7 +1083,7 @@ impl RootCollector<'_, 'v> {\n             _ => return,\n         };\n \n-        let start_def_id = match self.tcx.lang_items().require(StartFnLangItem) {\n+        let start_def_id = match self.tcx.lang_items().require(LangItem::Start) {\n             Ok(s) => s,\n             Err(err) => self.tcx.sess.fatal(&err),\n         };"}, {"sha": "edafa00a03ad0fd597ba0673d59a6481be745b8d", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-use rustc_hir::lang_items::CoerceUnsizedTraitLangItem;\n+use rustc_hir::lang_items::LangItem;\n \n pub mod collector;\n pub mod partitioning;\n@@ -13,7 +13,7 @@ pub fn custom_coerce_unsize_info<'tcx>(\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n-    let def_id = tcx.require_lang_item(CoerceUnsizedTraitLangItem, None);\n+    let def_id = tcx.require_lang_item(LangItem::CoerceUnsized, None);\n \n     let trait_ref = ty::Binder::bind(ty::TraitRef {\n         def_id,"}, {"sha": "08ed0d37701780457fd3fca345124f36db792122", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -1,6 +1,6 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::FnMutTraitLangItem;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -62,7 +62,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             build_call_shim(tcx, instance, None, CallKind::Direct(def_id), None)\n         }\n         ty::InstanceDef::ClosureOnceShim { call_once: _ } => {\n-            let fn_mut = tcx.require_lang_item(FnMutTraitLangItem, None);\n+            let fn_mut = tcx.require_lang_item(LangItem::FnMut, None);\n             let call_mut = tcx\n                 .associated_items(fn_mut)\n                 .in_definition_order()"}, {"sha": "e21f314ca150b03b2a49ffdd6d8889e648c54568", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -1,7 +1,7 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n use rustc_errors::struct_span_err;\n-use rustc_hir::{self as hir, lang_items};\n+use rustc_hir::{self as hir, LangItem};\n use rustc_hir::{def_id::DefId, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n@@ -618,7 +618,7 @@ fn check_return_ty_is_sync(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, hir_id: HirId)\n     tcx.infer_ctxt().enter(|infcx| {\n         let cause = traits::ObligationCause::new(body.span, hir_id, traits::SharedStatic);\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n-        let sync_def_id = tcx.require_lang_item(lang_items::SyncTraitLangItem, Some(body.span));\n+        let sync_def_id = tcx.require_lang_item(LangItem::Sync, Some(body.span));\n         fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), ty, sync_def_id, cause);\n         if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n             infcx.report_fulfillment_errors(&err, None, false);"}, {"sha": "a22075e760a90885dcf2a45b932e8a38e7c4728b", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -62,7 +62,7 @@ use crate::util::storage;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{GeneratorStateLangItem, PinTypeLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::{BitMatrix, BitSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n@@ -395,7 +395,7 @@ fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Bo\n fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n \n-    let pin_did = tcx.require_lang_item(PinTypeLangItem, Some(body.span));\n+    let pin_did = tcx.require_lang_item(LangItem::Pin, Some(body.span));\n     let pin_adt_ref = tcx.adt_def(pin_did);\n     let substs = tcx.intern_substs(&[ref_gen_ty.into()]);\n     let pin_ref_gen_ty = tcx.mk_adt(pin_adt_ref, substs);\n@@ -1270,7 +1270,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         };\n \n         // Compute GeneratorState<yield_ty, return_ty>\n-        let state_did = tcx.require_lang_item(GeneratorStateLangItem, None);\n+        let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n         let state_adt_ref = tcx.adt_def(state_did);\n         let state_substs = tcx.intern_substs(&[yield_ty.into(), body.return_ty().into()]);\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);"}, {"sha": "5d84a008d470e485bcfd2f99f3ba0a139de3e7df", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -1,6 +1,6 @@\n use crate::util::patch::MirPatch;\n use rustc_hir as hir;\n-use rustc_hir::lang_items::{BoxFreeFnLangItem, DropTraitLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::traits::Reveal;\n@@ -613,7 +613,7 @@ where\n     fn destructor_call_block(&mut self, (succ, unwind): (BasicBlock, Unwind)) -> BasicBlock {\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n-        let drop_trait = tcx.require_lang_item(DropTraitLangItem, None);\n+        let drop_trait = tcx.require_lang_item(LangItem::Drop, None);\n         let drop_fn = tcx.associated_items(drop_trait).in_definition_order().next().unwrap();\n         let ty = self.place_ty(self.place);\n         let substs = tcx.mk_substs_trait(ty, &[]);\n@@ -971,7 +971,7 @@ where\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n         let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n-        let free_func = tcx.require_lang_item(BoxFreeFnLangItem, Some(self.source_info.span));\n+        let free_func = tcx.require_lang_item(LangItem::BoxFree, Some(self.source_info.span));\n         let args = adt.variants[VariantIdx::new(0)]\n             .fields\n             .iter()"}, {"sha": "c4a87a554a3d0a41b357f1c06f360576b036b3e5", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -10,7 +10,7 @@ use crate::build::Builder;\n use crate::thir::pattern::compare_const_vals;\n use crate::thir::*;\n use rustc_data_structures::fx::FxIndexMap;\n-use rustc_hir::RangeEnd;\n+use rustc_hir::{LangItem, RangeEnd};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::util::IntTypeExt;\n@@ -359,8 +359,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         place: Place<'tcx>,\n         mut ty: Ty<'tcx>,\n     ) {\n-        use rustc_hir::lang_items::EqTraitLangItem;\n-\n         let mut expect = self.literal_operand(source_info.span, value);\n         let mut val = Operand::Copy(place);\n \n@@ -414,7 +412,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             _ => bug!(\"non_scalar_compare called on non-reference type: {}\", ty),\n         };\n \n-        let eq_def_id = self.hir.tcx().require_lang_item(EqTraitLangItem, None);\n+        let eq_def_id = self.hir.tcx().require_lang_item(LangItem::PartialEq, None);\n         let method = self.hir.trait_method(eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n \n         let bool_ty = self.hir.bool_ty();\n@@ -537,10 +535,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Some(index)\n             }\n \n-            (\n-                &TestKind::SwitchInt { switch_ty: _, ref options },\n-                &PatKind::Range(range),\n-            ) => {\n+            (&TestKind::SwitchInt { switch_ty: _, ref options }, &PatKind::Range(range)) => {\n                 let not_contained =\n                     self.values_not_contained_in_range(range, options).unwrap_or(false);\n "}, {"sha": "71026f5096df6e8f3a2a675af563bd75f247fe14", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -6,7 +6,7 @@ use rustc_attr::{self as attr, UnwindAttr};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GeneratorKind, HirIdMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -145,8 +145,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                 // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n                 // (as it's created inside the body itself, not passed in from outside).\n                 let ty = if fn_sig.c_variadic && index == fn_sig.inputs().len() {\n-                    let va_list_did =\n-                        tcx.require_lang_item(lang_items::VaListTypeLangItem, Some(arg.span));\n+                    let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(arg.span));\n \n                     tcx.type_of(va_list_did).subst(tcx, &[tcx.lifetimes.re_erased.into()])\n                 } else {"}, {"sha": "f6d3ccc1ae0a68fe98c86f803eecc1278e39a242", "filename": "src/librustc_mir_build/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -1,5 +1,4 @@\n use rustc_hir as hir;\n-use rustc_hir::lang_items::EqTraitLangItem;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::Field;\n@@ -164,7 +163,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // not *yet* implement `PartialEq`. So for now we leave this here.\n                 let ty_is_partial_eq: bool = {\n                     let partial_eq_trait_id =\n-                        self.tcx().require_lang_item(EqTraitLangItem, Some(self.span));\n+                        self.tcx().require_lang_item(hir::LangItem::PartialEq, Some(self.span));\n                     let obligation: PredicateObligation<'_> = predicate_for_trait_def(\n                         self.tcx(),\n                         self.param_env,"}, {"sha": "f559d66587b24082a5e5a45bbd181f4d72ee9509", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::{self, LangItem};\n use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n use rustc_middle::middle::lang_items::required;\n use rustc_middle::ty::TyCtxt;\n@@ -24,7 +24,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     // They will never implicitly be added to the `missing` array unless we do\n     // so here.\n     if items.eh_personality().is_none() {\n-        items.missing.push(lang_items::EhPersonalityLangItem);\n+        items.missing.push(LangItem::EhPersonality);\n     }\n \n     {\n@@ -58,9 +58,9 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n \n     for (name, &item) in WEAK_ITEMS_REFS.iter() {\n         if missing.contains(&item) && required(tcx, item) && items.require(item).is_err() {\n-            if item == lang_items::PanicImplLangItem {\n+            if item == LangItem::PanicImpl {\n                 tcx.sess.err(\"`#[panic_handler]` function required, but not found\");\n-            } else if item == lang_items::OomLangItem {\n+            } else if item == LangItem::Oom {\n                 tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found\");\n             } else {\n                 tcx.sess.err(&format!(\"language item required, but not found: `{}`\", name));\n@@ -91,7 +91,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n         let check_name = |attr, sym| self.tcx.sess.check_name(attr, sym);\n-        if let Some((lang_item, _)) = hir::lang_items::extract(check_name, &i.attrs) {\n+        if let Some((lang_item, _)) = lang_items::extract(check_name, &i.attrs) {\n             self.register(lang_item, i.span);\n         }\n         intravisit::walk_foreign_item(self, i)"}, {"sha": "4ec1b29bca4f1286fa01a53accd905e61a616f3c", "filename": "src/librustc_trait_selection/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Finfer.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -2,7 +2,7 @@ use crate::traits::query::outlives_bounds::InferCtxtExt as _;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n \n use rustc_hir as hir;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n@@ -47,7 +47,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n             return ty.is_copy_modulo_regions(self.tcx.at(span), param_env);\n         }\n \n-        let copy_def_id = self.tcx.require_lang_item(lang_items::CopyTraitLangItem, None);\n+        let copy_def_id = self.tcx.require_lang_item(LangItem::Copy, None);\n \n         // This can get called from typeck (by euv), and `moves_by_default`\n         // rightly refuses to work with inference variables, but"}, {"sha": "138293c95331f911adcac7712c4467059d038a36", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -13,7 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_middle::ty::{\n     self, suggest_constraining_type_param, AdtKind, DefIdTree, Infer, InferTy, ToPredicate, Ty,\n@@ -2015,8 +2015,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n             let body = self.tcx.hir().body(body_id);\n             if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n-                let future_trait =\n-                    self.tcx.require_lang_item(lang_items::FutureTraitLangItem, None);\n+                let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n \n                 let self_ty = self.resolve_vars_if_possible(&trait_ref.self_ty());\n "}, {"sha": "c788e4f5c90b38ff88dddeb24ff731d3e7113999", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -23,9 +23,7 @@ use crate::traits::error_reporting::InferCtxtExt;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{\n-    DiscriminantTypeLangItem, FnOnceOutputLangItem, FnOnceTraitLangItem, GeneratorTraitLangItem,\n-};\n+use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n@@ -1300,7 +1298,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n \n     let tcx = selcx.tcx();\n \n-    let gen_def_id = tcx.require_lang_item(GeneratorTraitLangItem, None);\n+    let gen_def_id = tcx.require_lang_item(LangItem::Generator, None);\n \n     let predicate = super::util::generator_trait_ref_and_outputs(\n         tcx,\n@@ -1342,7 +1340,7 @@ fn confirm_discriminant_kind_candidate<'cx, 'tcx>(\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n     let substs = tcx.mk_substs([self_ty.into()].iter());\n \n-    let discriminant_def_id = tcx.require_lang_item(DiscriminantTypeLangItem, None);\n+    let discriminant_def_id = tcx.require_lang_item(LangItem::Discriminant, None);\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: discriminant_def_id },\n@@ -1406,8 +1404,8 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n \n     debug!(\"confirm_callable_candidate({:?},{:?})\", obligation, fn_sig);\n \n-    let fn_once_def_id = tcx.require_lang_item(FnOnceTraitLangItem, None);\n-    let fn_once_output_def_id = tcx.require_lang_item(FnOnceOutputLangItem, None);\n+    let fn_once_def_id = tcx.require_lang_item(LangItem::FnOnce, None);\n+    let fn_once_output_def_id = tcx.require_lang_item(LangItem::FnOnceOutput, None);\n \n     let predicate = super::util::closure_trait_ref_and_return_type(\n         tcx,"}, {"sha": "3d6eb845136361427f6eda4a902c638ea5750fb2", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -7,7 +7,7 @@\n //! [rustc dev guide]:\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n@@ -669,7 +669,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // We can only make objects from sized types.\n                 let tr = ty::TraitRef::new(\n-                    tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n+                    tcx.require_lang_item(LangItem::Sized, None),\n                     tcx.mk_substs_trait(source, &[]),\n                 );\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));"}, {"sha": "78186a5e8a5813003c21a2c775e03ffdb4d5a730", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -4,7 +4,7 @@ use crate::traits::{self, TraitEngine};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::lang_items::{StructuralPeqTraitLangItem, StructuralTeqTraitLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::Span;\n@@ -75,7 +75,7 @@ fn type_marked_structural(\n     let mut fulfillment_cx = traits::FulfillmentContext::new();\n     // require `#[derive(PartialEq)]`\n     let structural_peq_def_id =\n-        infcx.tcx.require_lang_item(StructuralPeqTraitLangItem, Some(cause.span));\n+        infcx.tcx.require_lang_item(LangItem::StructuralPeq, Some(cause.span));\n     fulfillment_cx.register_bound(\n         infcx,\n         ty::ParamEnv::empty(),\n@@ -86,7 +86,7 @@ fn type_marked_structural(\n     // for now, require `#[derive(Eq)]`. (Doing so is a hack to work around\n     // the type `for<'a> fn(&'a ())` failing to implement `Eq` itself.)\n     let structural_teq_def_id =\n-        infcx.tcx.require_lang_item(StructuralTeqTraitLangItem, Some(cause.span));\n+        infcx.tcx.require_lang_item(LangItem::StructuralTeq, Some(cause.span));\n     fulfillment_cx.register_bound(\n         infcx,\n         ty::ParamEnv::empty(),"}, {"sha": "0ac3c6ffe62c89e010a52a45671b348ab496e24d", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -3,7 +3,7 @@ use crate::opaque_types::required_region_bounds;\n use crate::traits;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::Span;\n@@ -340,7 +340,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n             let trait_ref = ty::TraitRef {\n-                def_id: self.infcx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n+                def_id: self.infcx.tcx.require_lang_item(LangItem::Sized, None),\n                 substs: self.infcx.tcx.mk_substs_trait(subty, &[]),\n             };\n             self.out.push(traits::Obligation::new("}, {"sha": "24ba071786607fc4daa5aa03e0661e8be2ab22c7", "filename": "src/librustc_ty/common_traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_ty%2Fcommon_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_ty%2Fcommon_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fcommon_traits.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -1,27 +1,27 @@\n //! Queries for checking whether a type implements one of a few common traits.\n \n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits;\n \n fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    is_item_raw(tcx, query, lang_items::CopyTraitLangItem)\n+    is_item_raw(tcx, query, LangItem::Copy)\n }\n \n fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    is_item_raw(tcx, query, lang_items::SizedTraitLangItem)\n+    is_item_raw(tcx, query, LangItem::Sized)\n }\n \n fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    is_item_raw(tcx, query, lang_items::FreezeTraitLangItem)\n+    is_item_raw(tcx, query, LangItem::Freeze)\n }\n \n fn is_item_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    item: lang_items::LangItem,\n+    item: LangItem,\n ) -> bool {\n     let (param_env, ty) = query.into_parts();\n     let trait_def_id = tcx.require_lang_item(item, None);"}, {"sha": "80dd26e9154b37c26166e0c016196639c8c621cf", "filename": "src/librustc_typeck/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv%2Fmod.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -16,7 +16,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n-use rustc_hir::lang_items::SizedTraitLangItem;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Constness, GenericArg, GenericArgs};\n use rustc_middle::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n@@ -696,7 +696,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        let kind_id = tcx.lang_items().require(SizedTraitLangItem);\n+        let kind_id = tcx.lang_items().require(LangItem::Sized);\n         match unbound {\n             Some(tpb) => {\n                 // FIXME(#8559) currently requires the unbound to be built-in."}, {"sha": "e41314e8ab03f438364ffe092411eb55eb41ff31", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -35,7 +35,7 @@ use crate::type_error_struct;\n use rustc_ast as ast;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n@@ -838,7 +838,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn type_is_known_to_be_sized_modulo_regions(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n+        let lang_item = self.tcx.require_lang_item(LangItem::Sized, None);\n         traits::type_known_to_meet_bound_modulo_regions(self, self.param_env, ty, lang_item, span)\n     }\n }"}, {"sha": "97f7e4537ce9584fda1bfa87d40c9cdab1917bb5", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -5,7 +5,7 @@ use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{FutureTraitLangItem, GeneratorTraitLangItem};\n+use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n@@ -245,7 +245,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_ref = projection.to_poly_trait_ref(tcx);\n \n         let is_fn = tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some();\n-        let gen_trait = tcx.require_lang_item(GeneratorTraitLangItem, cause_span);\n+        let gen_trait = tcx.require_lang_item(LangItem::Generator, cause_span);\n         let is_gen = gen_trait == trait_ref.def_id();\n         if !is_fn && !is_gen {\n             debug!(\"deduce_sig_from_projection: not fn or generator\");\n@@ -668,7 +668,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Check that this is a projection from the `Future` trait.\n         let trait_ref = predicate.projection_ty.trait_ref(self.tcx);\n-        let future_trait = self.tcx.require_lang_item(FutureTraitLangItem, Some(cause_span));\n+        let future_trait = self.tcx.require_lang_item(LangItem::Future, Some(cause_span));\n         if trait_ref.def_id != future_trait {\n             debug!(\"deduce_future_output_from_projection: not a future\");\n             return None;"}, {"sha": "5dc5480c3353c0140b3a6399d1cbfe58c8dd4e61", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -6,7 +6,7 @@ use rustc_trait_selection::traits::ObligationCause;\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::lang_items::CloneTraitLangItem;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self.can_coerce(ref_ty, expected) {\n                     let mut sugg_sp = sp;\n                     if let hir::ExprKind::MethodCall(ref segment, sp, ref args, _) = expr.kind {\n-                        let clone_trait = self.tcx.require_lang_item(CloneTraitLangItem, Some(sp));\n+                        let clone_trait = self.tcx.require_lang_item(LangItem::Clone, Some(sp));\n                         if let ([arg], Some(true), sym::clone) = (\n                             &args[..],\n                             self.typeck_results.borrow().type_dependent_def_id(expr.hir_id).map("}, {"sha": "0e9f64c359690c3ecfe32f051b665722394a385c", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -25,7 +25,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder,\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -926,8 +926,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Try alternative arbitrary self types that could fulfill this call.\n                 // FIXME: probe for all types that *could* be arbitrary self-types, not\n                 // just this list.\n-                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, lang_items::OwnedBoxLangItem));\n-                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, lang_items::PinTypeLangItem));\n+                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, LangItem::OwnedBox));\n+                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, LangItem::Pin));\n                 try_alt_rcvr(&mut err, self.tcx.mk_diagnostic_item(rcvr_t, sym::Arc));\n                 try_alt_rcvr(&mut err, self.tcx.mk_diagnostic_item(rcvr_t, sym::Rc));\n             }"}, {"sha": "896bfc0795434e4ac021e04be9d1f473ff6a8ff3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit;\n-use rustc_hir::lang_items::FnOnceTraitLangItem;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::hir::map as hir_map;\n@@ -36,7 +36,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Closure(..) | ty::FnDef(..) | ty::FnPtr(_) => true,\n             // If it's not a simple function, look for things which implement `FnOnce`.\n             _ => {\n-                let fn_once = match tcx.lang_items().require(FnOnceTraitLangItem) {\n+                let fn_once = match tcx.lang_items().require(LangItem::FnOnce) {\n                     Ok(fn_once) => fn_once,\n                     Err(..) => return false,\n                 };"}, {"sha": "031d48f8a6086f97f10334a2ced7fd121469c056", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -100,9 +100,7 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::lang_items::{\n-    FutureTraitLangItem, PinTypeLangItem, SizedTraitLangItem, VaListTypeLangItem,\n-};\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n@@ -1339,7 +1337,7 @@ fn check_fn<'a, 'tcx>(\n     // (as it's created inside the body itself, not passed in from outside).\n     let maybe_va_list = if fn_sig.c_variadic {\n         let span = body.params.last().unwrap().span;\n-        let va_list_did = tcx.require_lang_item(VaListTypeLangItem, Some(span));\n+        let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(span));\n         let region = fcx.next_region_var(RegionVariableOrigin::MiscVariable(span));\n \n         Some(tcx.type_of(va_list_did).subst(tcx, &[region.into()]))\n@@ -3493,7 +3491,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         code: traits::ObligationCauseCode<'tcx>,\n     ) {\n         if !ty.references_error() {\n-            let lang_item = self.tcx.require_lang_item(SizedTraitLangItem, None);\n+            let lang_item = self.tcx.require_lang_item(LangItem::Sized, None);\n             self.require_type_meets(ty, span, code, lang_item);\n         }\n     }\n@@ -5265,7 +5263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => {}\n         }\n         let boxed_found = self.tcx.mk_box(found);\n-        let new_found = self.tcx.mk_lang_item(boxed_found, PinTypeLangItem).unwrap();\n+        let new_found = self.tcx.mk_lang_item(boxed_found, LangItem::Pin).unwrap();\n         if let (true, Ok(snippet)) = (\n             self.can_coerce(new_found, expected),\n             self.sess().source_map().span_to_snippet(expr.span),\n@@ -5422,7 +5420,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let sp = expr.span;\n                 // Check for `Future` implementations by constructing a predicate to\n                 // prove: `<T as Future>::Output == U`\n-                let future_trait = self.tcx.require_lang_item(FutureTraitLangItem, Some(sp));\n+                let future_trait = self.tcx.require_lang_item(LangItem::Future, Some(sp));\n                 let item_def_id = self\n                     .tcx\n                     .associated_items(future_trait)"}, {"sha": "9c692edaa7fa4412f63ab57870af474933ffca1f", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::ItemKind;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n@@ -495,7 +495,7 @@ fn check_type_defn<'tcx, F>(\n                 let last = idx == variant.fields.len() - 1;\n                 fcx.register_bound(\n                     field.ty,\n-                    fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n+                    fcx.tcx.require_lang_item(LangItem::Sized, None),\n                     traits::ObligationCause::new(\n                         field.span,\n                         fcx.body_id,\n@@ -718,7 +718,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: hir::HirId, ty_span: Span, allow_fo\n         if forbid_unsized {\n             fcx.register_bound(\n                 item_ty,\n-                fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n+                fcx.tcx.require_lang_item(LangItem::Sized, None),\n                 traits::ObligationCause::new(ty_span, fcx.body_id, traits::MiscObligation),\n             );\n         }\n@@ -1223,7 +1223,7 @@ fn receiver_is_valid<'fcx, 'tcx>(\n     // The first type is `receiver_ty`, which we know its not equal to `self_ty`; skip it.\n     autoderef.next();\n \n-    let receiver_trait_def_id = fcx.tcx.require_lang_item(lang_items::ReceiverTraitLangItem, None);\n+    let receiver_trait_def_id = fcx.tcx.require_lang_item(LangItem::Receiver, None);\n \n     // Keep dereferencing `receiver_ty` until we get to `self_ty`.\n     loop {"}, {"sha": "0d3cac7f7f38a2cd7d6a9dc423e4da5a682bc86a", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -4,9 +4,7 @@\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::lang_items::{\n-    CoerceUnsizedTraitLangItem, DispatchFromDynTraitLangItem, UnsizeTraitLangItem,\n-};\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::ItemKind;\n use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n@@ -149,7 +147,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n     let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did);\n     let span = tcx.hir().span(impl_hir_id);\n \n-    let dispatch_from_dyn_trait = tcx.require_lang_item(DispatchFromDynTraitLangItem, Some(span));\n+    let dispatch_from_dyn_trait = tcx.require_lang_item(LangItem::DispatchFromDyn, Some(span));\n \n     let source = tcx.type_of(impl_did);\n     assert!(!source.has_escaping_bound_vars());\n@@ -318,9 +316,9 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n     let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did.expect_local());\n     let span = tcx.hir().span(impl_hir_id);\n \n-    let coerce_unsized_trait = tcx.require_lang_item(CoerceUnsizedTraitLangItem, Some(span));\n+    let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));\n \n-    let unsize_trait = tcx.lang_items().require(UnsizeTraitLangItem).unwrap_or_else(|err| {\n+    let unsize_trait = tcx.lang_items().require(LangItem::Unsize).unwrap_or_else(|err| {\n         tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));\n     });\n "}, {"sha": "1ea1a0910695762bec2c78daf7a0005c513aba1f", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable};\n use rustc_trait_selection::traits::auto_trait::{self, AutoTraitResult};\n \n@@ -454,7 +454,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n         // The `Sized` trait must be handled specially, since we only display it when\n         // it is *not* required (i.e., '?Sized')\n-        let sized_trait = self.cx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n+        let sized_trait = self.cx.tcx.require_lang_item(LangItem::Sized, None);\n \n         let mut replacer = RegionReplacer { vid_to_region: &vid_to_region, tcx };\n \n@@ -742,9 +742,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     fn is_fn_ty(&self, tcx: TyCtxt<'_>, ty: &Type) -> bool {\n         match &ty {\n             &&Type::ResolvedPath { ref did, .. } => {\n-                *did == tcx.require_lang_item(lang_items::FnTraitLangItem, None)\n-                    || *did == tcx.require_lang_item(lang_items::FnMutTraitLangItem, None)\n-                    || *did == tcx.require_lang_item(lang_items::FnOnceTraitLangItem, None)\n+                *did == tcx.require_lang_item(LangItem::Fn, None)\n+                    || *did == tcx.require_lang_item(LangItem::FnMut, None)\n+                    || *did == tcx.require_lang_item(LangItem::FnOnce, None)\n             }\n             _ => false,\n         }"}, {"sha": "a458cdab3030320cca651fc6f9d1458436acbf81", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc268e316d37d97fbdda6c1bf3e5a58dea470fe/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6cc268e316d37d97fbdda6c1bf3e5a58dea470fe", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::stability;\n@@ -710,7 +710,7 @@ pub enum GenericBound {\n \n impl GenericBound {\n     pub fn maybe_sized(cx: &DocContext<'_>) -> GenericBound {\n-        let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n+        let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);"}]}