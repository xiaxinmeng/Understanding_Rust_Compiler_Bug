{"sha": "638acd300fa42a2d0128378a37bffae2c11315ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOGFjZDMwMGZhNDJhMmQwMTI4Mzc4YTM3YmZmYWUyYzExMzE1YWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-07T13:58:09Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-29T21:02:40Z"}, "message": "Fallout from allowing some mutation in guards.\n\nFor some reason, allowing restricted mutation in match arms exposed an\nobvious case where a unique borrow can indeed fail, namely something\nlike:\n\n```rust\nmatch b {\n    ...\n    ref mut r if { (|| { let bar = &mut *r; **bar = false; })(); false } => { &mut *r }\n    //                             ~~~~~~~\n    //                                |\n    // This ends up holding a `&unique` borrow of `r`, but there ends up being an\n    // implicit shared borrow in the guard thanks to rust-lang/rust#49870\n    ...\n}\n```", "tree": {"sha": "af503410b4ee14f41216c9bbee3b299a7e4fdd91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af503410b4ee14f41216c9bbee3b299a7e4fdd91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/638acd300fa42a2d0128378a37bffae2c11315ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/638acd300fa42a2d0128378a37bffae2c11315ad", "html_url": "https://github.com/rust-lang/rust/commit/638acd300fa42a2d0128378a37bffae2c11315ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/638acd300fa42a2d0128378a37bffae2c11315ad/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c30dc85c23d23482148f5eb0485320bc1abc2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c30dc85c23d23482148f5eb0485320bc1abc2a3", "html_url": "https://github.com/rust-lang/rust/commit/5c30dc85c23d23482148f5eb0485320bc1abc2a3"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "ec267104518e46f0a22f80dec94814e3ea1b4283", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/638acd300fa42a2d0128378a37bffae2c11315ad/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638acd300fa42a2d0128378a37bffae2c11315ad/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=638acd300fa42a2d0128378a37bffae2c11315ad", "patch": "@@ -1697,14 +1697,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n         let mut error_reported = false;\n         match kind {\n-            Reservation(WriteKind::MutableBorrow(BorrowKind::Unique))\n-            | Write(WriteKind::MutableBorrow(BorrowKind::Unique)) => {\n-                if let Err(_place_err) = self.is_mutable(place, LocalMutationIsAllowed::Yes) {\n-                    span_bug!(span, \"&unique borrow for {:?} should not fail\", place);\n-                }\n-            }\n-            Reservation(WriteKind::MutableBorrow(BorrowKind::Mut { .. }))\n-            | Write(WriteKind::MutableBorrow(BorrowKind::Mut { .. })) => {\n+            Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Unique))\n+                | Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Mut { .. }))\n+                | Write(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Unique))\n+                | Write(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Mut { .. })) =>\n+            {\n+                let is_local_mutation_allowed = match borrow_kind {\n+                    BorrowKind::Unique => LocalMutationIsAllowed::Yes,\n+                    BorrowKind::Mut { .. } => is_local_mutation_allowed,\n+                    BorrowKind::Shared => unreachable!(),\n+                };\n                 match self.is_mutable(place, is_local_mutation_allowed) {\n                     Ok(root_place) => self.add_used_mut(root_place, flow_state),\n                     Err(place_err) => {"}]}