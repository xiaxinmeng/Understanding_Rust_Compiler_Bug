{"sha": "245f582139ce58d3d963ff7aca9209df308bb28d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NWY1ODIxMzljZTU4ZDNkOTYzZmY3YWNhOTIwOWRmMzA4YmIyOGQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-08T14:25:00Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-08T14:42:22Z"}, "message": "Emit `invalid_doc_attributes` warnings in more cases", "tree": {"sha": "5c26727f8c95b7fa5b7990ce842306d5f5a38145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c26727f8c95b7fa5b7990ce842306d5f5a38145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/245f582139ce58d3d963ff7aca9209df308bb28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/245f582139ce58d3d963ff7aca9209df308bb28d", "html_url": "https://github.com/rust-lang/rust/commit/245f582139ce58d3d963ff7aca9209df308bb28d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/245f582139ce58d3d963ff7aca9209df308bb28d/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e1dc1536264ab71c0850f346b12309477f29f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e1dc1536264ab71c0850f346b12309477f29f7", "html_url": "https://github.com/rust-lang/rust/commit/50e1dc1536264ab71c0850f346b12309477f29f7"}], "stats": {"total": 218, "additions": 169, "deletions": 49}, "files": [{"sha": "f68b79b60434f70f8a928234019d21d7e7571ff9", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 75, "deletions": 12, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/245f582139ce58d3d963ff7aca9209df308bb28d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245f582139ce58d3d963ff7aca9209df308bb28d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=245f582139ce58d3d963ff7aca9209df308bb28d", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_ast::{Attribute, Lit, LitKind, NestedMetaItem};\n+use rustc_ast::{AttrStyle, Attribute, Lit, LitKind, NestedMetaItem};\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -564,7 +564,7 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n-    fn check_attr_crate_level(\n+    fn check_attr_not_crate_level(\n         &self,\n         meta: &NestedMetaItem,\n         hir_id: HirId,\n@@ -586,6 +586,48 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n+    fn check_attr_crate_level(\n+        &self,\n+        attr: &Attribute,\n+        meta: &NestedMetaItem,\n+        hir_id: HirId,\n+    ) -> bool {\n+        if hir_id != CRATE_HIR_ID {\n+            self.tcx.struct_span_lint_hir(\n+                INVALID_DOC_ATTRIBUTES,\n+                hir_id,\n+                meta.span(),\n+                |lint| {\n+                    let mut err = lint.build(\n+                        \"this attribute can only be applied at the crate level\",\n+                    );\n+                    if attr.style == AttrStyle::Outer && self.tcx.hir().get_parent_item(hir_id) == CRATE_HIR_ID {\n+                        if let Ok(mut src) =\n+                            self.tcx.sess.source_map().span_to_snippet(attr.span)\n+                        {\n+                            src.insert(1, '!');\n+                            err.span_suggestion_verbose(\n+                                attr.span,\n+                                \"to apply to the crate, use an inner attribute\",\n+                                src,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_help(\n+                                attr.span,\n+                                \"to apply to the crate, use an inner attribute\",\n+                            );\n+                        }\n+                    }\n+                    err.note(\"read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\")\n+                        .emit();\n+                },\n+            );\n+            return false;\n+        }\n+        true\n+    }\n+\n     fn check_doc_attrs(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n         let mut is_valid = true;\n \n@@ -594,35 +636,58 @@ impl CheckAttrVisitor<'tcx> {\n                 if let Some(i_meta) = meta.meta_item() {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n-                            if !self.check_attr_crate_level(&meta, hir_id, \"alias\")\n+                            if !self.check_attr_not_crate_level(&meta, hir_id, \"alias\")\n                                 || !self.check_doc_alias(&meta, hir_id, target) =>\n                         {\n                             is_valid = false\n                         }\n \n                         sym::keyword\n-                            if !self.check_attr_crate_level(&meta, hir_id, \"keyword\")\n+                            if !self.check_attr_not_crate_level(&meta, hir_id, \"keyword\")\n                                 || !self.check_doc_keyword(&meta, hir_id) =>\n                         {\n                             is_valid = false\n                         }\n \n-                        sym::test if CRATE_HIR_ID != hir_id => {\n+                        sym::html_favicon_url\n+                        | sym::html_logo_url\n+                        | sym::html_playground_url\n+                        | sym::issue_tracker_base_url\n+                        | sym::html_root_url\n+                        | sym::html_no_source\n+                        | sym::test\n+                            if !self.check_attr_crate_level(&attr, &meta, hir_id) =>\n+                        {\n+                            is_valid = false;\n+                        }\n+\n+                        sym::inline | sym::no_inline if target != Target::Use => {\n                             self.tcx.struct_span_lint_hir(\n                                 INVALID_DOC_ATTRIBUTES,\n                                 hir_id,\n                                 meta.span(),\n                                 |lint| {\n-                                    lint.build(\n-                                        \"`#![doc(test(...)]` is only allowed \\\n-                                         as a crate-level attribute\",\n-                                    )\n-                                    .emit();\n+                                    let mut err = lint.build(\n+                                        \"this attribute can only be applied to a `use` item\",\n+                                    );\n+                                    err.span_label(meta.span(), \"only applicable on `use` items\");\n+                                    if attr.style == AttrStyle::Outer {\n+                                        err.span_label(\n+                                            self.tcx.hir().span(hir_id),\n+                                            \"not a `use` item\",\n+                                        );\n+                                    }\n+                                    err.note(\"read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\")\n+                                        .emit();\n                                 },\n                             );\n                             is_valid = false;\n                         }\n \n+                        sym::inline | sym::no_inline => {\n+                            // FIXME(#80275): conflicting inline attributes\n+                        }\n+\n                         // no_default_passes: deprecated\n                         // passes: deprecated\n                         // plugins: removed, but rustdoc warns about it itself\n@@ -635,12 +700,10 @@ impl CheckAttrVisitor<'tcx> {\n                         | sym::html_playground_url\n                         | sym::html_root_url\n                         | sym::include\n-                        | sym::inline\n                         | sym::issue_tracker_base_url\n                         | sym::keyword\n                         | sym::masked\n                         | sym::no_default_passes\n-                        | sym::no_inline\n                         | sym::notable_trait\n                         | sym::passes\n                         | sym::plugins"}, {"sha": "3fb484644d7fa1b643186398a22cc57ecc5cc23d", "filename": "src/test/rustdoc-ui/doc-attr2.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50e1dc1536264ab71c0850f346b12309477f29f7/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1dc1536264ab71c0850f346b12309477f29f7/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.rs?ref=50e1dc1536264ab71c0850f346b12309477f29f7", "patch": "@@ -1,11 +0,0 @@\n-#![crate_type = \"lib\"]\n-#![deny(warnings)]\n-\n-#[doc(test(no_crate_inject))] //~ ERROR\n-//~^ WARN\n-pub fn foo() {}\n-\n-pub mod bar {\n-    #![doc(test(no_crate_inject))] //~ ERROR\n-    //~^ WARN\n-}"}, {"sha": "643107318b9799f371828e3bf9441c8053b5cca1", "filename": "src/test/rustdoc-ui/doc-attr2.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50e1dc1536264ab71c0850f346b12309477f29f7/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50e1dc1536264ab71c0850f346b12309477f29f7/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr?ref=50e1dc1536264ab71c0850f346b12309477f29f7", "patch": "@@ -1,26 +0,0 @@\n-error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n-  --> $DIR/doc-attr2.rs:4:7\n-   |\n-LL | #[doc(test(no_crate_inject))]\n-   |       ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/doc-attr2.rs:2:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-\n-error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n-  --> $DIR/doc-attr2.rs:9:12\n-   |\n-LL |     #![doc(test(no_crate_inject))]\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "b8c6f7bf2ed76839d7d8cf600ed2c008c6d1c36d", "filename": "src/test/rustdoc-ui/invalid-doc-attr.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/245f582139ce58d3d963ff7aca9209df308bb28d/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245f582139ce58d3d963ff7aca9209df308bb28d/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.rs?ref=245f582139ce58d3d963ff7aca9209df308bb28d", "patch": "@@ -0,0 +1,26 @@\n+#![crate_type = \"lib\"]\n+#![deny(warnings)]\n+\n+#[doc(test(no_crate_inject))]\n+//~^ ERROR can only be applied at the crate level\n+//~| WARN is being phased out\n+//~| HELP to apply to the crate, use an inner attribute\n+//~| SUGGESTION #![doc(test(no_crate_inject))]\n+#[doc(inline)]\n+//~^ ERROR can only be applied to a `use` item\n+//~| WARN is being phased out\n+pub fn foo() {}\n+\n+pub mod bar {\n+    #![doc(test(no_crate_inject))]\n+    //~^ ERROR can only be applied at the crate level\n+    //~| WARN is being phased out\n+\n+    #[doc(test(no_crate_inject))]\n+    //~^ ERROR can only be applied at the crate level\n+    //~| WARN is being phased out\n+    #[doc(inline)]\n+    //~^ ERROR can only be applied to a `use` item\n+    //~| WARN is being phased out\n+    pub fn baz() {}\n+}"}, {"sha": "3d2230aa4d2df70eea53bafb3a92032828303b86", "filename": "src/test/rustdoc-ui/invalid-doc-attr.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/245f582139ce58d3d963ff7aca9209df308bb28d/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/245f582139ce58d3d963ff7aca9209df308bb28d/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr?ref=245f582139ce58d3d963ff7aca9209df308bb28d", "patch": "@@ -0,0 +1,68 @@\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:4:7\n+   |\n+LL | #[doc(test(no_crate_inject))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid-doc-attr.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+help: to apply to the crate, use an inner attribute\n+   |\n+LL | #![doc(test(no_crate_inject))]\n+   |\n+\n+error: this attribute can only be applied to a `use` item\n+  --> $DIR/invalid-doc-attr.rs:9:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^ only applicable on `use` items\n+...\n+LL | pub fn foo() {}\n+   | ------------ not a `use` item\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:15:12\n+   |\n+LL |     #![doc(test(no_crate_inject))]\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:19:11\n+   |\n+LL |     #[doc(test(no_crate_inject))]\n+   |           ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+\n+error: this attribute can only be applied to a `use` item\n+  --> $DIR/invalid-doc-attr.rs:22:11\n+   |\n+LL |     #[doc(inline)]\n+   |           ^^^^^^ only applicable on `use` items\n+...\n+LL |     pub fn baz() {}\n+   |     ------------ not a `use` item\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+\n+error: aborting due to 5 previous errors\n+"}]}