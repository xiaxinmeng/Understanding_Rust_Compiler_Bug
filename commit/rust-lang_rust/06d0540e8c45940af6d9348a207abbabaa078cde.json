{"sha": "06d0540e8c45940af6d9348a207abbabaa078cde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDA1NDBlOGM0NTk0MGFmNmQ5MzQ4YTIwN2FiYmFiYWEwNzhjZGU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-29T08:47:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-29T08:47:48Z"}, "message": "Rollup merge of #55426 - fitzgen:nonnull-inline, r=SimonSapin\n\nMake a bunch of trivial methods of NonNull be `#[inline]`\n\nI was seeing super trivial methods not getting inlined in some of my builds, so I went ahead and just marked all the methods inline where it seemed appropriate.\n\nr? @SimonSapin", "tree": {"sha": "f42d1c65631b274dd69a473e90073bbba0170bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f42d1c65631b274dd69a473e90073bbba0170bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d0540e8c45940af6d9348a207abbabaa078cde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb1sk0CRBK7hj4Ov3rIwAAdHIIAK0RHkGMCvgqhMDMsMebUTC8\nsZQG50xwx4GZVBB3Cj3p6JOe3upEhaM2E5dJDvdfRNS5a7EzggglhgDem+Q0xCRU\n6ViG8xbcQ4T99uzJhXTswLVOXD2+nK85iw7tFHJPAYaOCb7YeaPegc54r9Mta4m6\nZSWv4zSet+Jakg+qKv0uPltx8YB7CSbfF+6OehqEsCkXL+alJlEH8QAjvDvUXw/y\njZ3OwOVURclGP/+E4wjQrg/srjcOH58BfN8Hb/0QpBYjjsTNv7Y7nDKRKAQkzcOP\n8RYypWxmQt5ilXc6DT0iZ3L27va+XosQs0JeJIpXXA8c0EUzfTNrvahMutWG6IM=\n=I8gp\n-----END PGP SIGNATURE-----\n", "payload": "tree f42d1c65631b274dd69a473e90073bbba0170bd6\nparent e5d9da76f267d546e5b5e519b0f33f098aa2aed8\nparent dc77d4977555430f3dafb8a725ec69751d7a1b9d\nauthor Pietro Albini <pietro@pietroalbini.org> 1540802868 +0100\ncommitter GitHub <noreply@github.com> 1540802868 +0100\n\nRollup merge of #55426 - fitzgen:nonnull-inline, r=SimonSapin\n\nMake a bunch of trivial methods of NonNull be `#[inline]`\n\nI was seeing super trivial methods not getting inlined in some of my builds, so I went ahead and just marked all the methods inline where it seemed appropriate.\n\nr? @SimonSapin\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d0540e8c45940af6d9348a207abbabaa078cde", "html_url": "https://github.com/rust-lang/rust/commit/06d0540e8c45940af6d9348a207abbabaa078cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d0540e8c45940af6d9348a207abbabaa078cde/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d9da76f267d546e5b5e519b0f33f098aa2aed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d9da76f267d546e5b5e519b0f33f098aa2aed8", "html_url": "https://github.com/rust-lang/rust/commit/e5d9da76f267d546e5b5e519b0f33f098aa2aed8"}, {"sha": "dc77d4977555430f3dafb8a725ec69751d7a1b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc77d4977555430f3dafb8a725ec69751d7a1b9d", "html_url": "https://github.com/rust-lang/rust/commit/dc77d4977555430f3dafb8a725ec69751d7a1b9d"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "0fe82b93ff7a14bca4c961ca03d8ab68dd38ca44", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06d0540e8c45940af6d9348a207abbabaa078cde/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d0540e8c45940af6d9348a207abbabaa078cde/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=06d0540e8c45940af6d9348a207abbabaa078cde", "patch": "@@ -2867,6 +2867,7 @@ impl<T: Sized> NonNull<T> {\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2882,12 +2883,14 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: NonZero(ptr as _) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n             Some(NonNull { pointer: NonZero(ptr as _) })\n@@ -2898,6 +2901,7 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn as_ptr(self) -> *mut T {\n         self.pointer.0 as *mut T\n     }\n@@ -2908,6 +2912,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n         &*self.as_ptr()\n     }\n@@ -2918,12 +2923,14 @@ impl<T: ?Sized> NonNull<T> {\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         &mut *self.as_ptr()\n     }\n \n     /// Cast to a pointer of another type\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n+    #[inline]\n     pub fn cast<U>(self) -> NonNull<U> {\n         unsafe {\n             NonNull::new_unchecked(self.as_ptr() as *mut U)\n@@ -2963,48 +2970,55 @@ impl<T: ?Sized> Eq for NonNull<T> {}\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> PartialEq for NonNull<T> {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.as_ptr() == other.as_ptr()\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Ord for NonNull<T> {\n+    #[inline]\n     fn cmp(&self, other: &Self) -> Ordering {\n         self.as_ptr().cmp(&other.as_ptr())\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> PartialOrd for NonNull<T> {\n+    #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         self.as_ptr().partial_cmp(&other.as_ptr())\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> hash::Hash for NonNull<T> {\n+    #[inline]\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n         self.as_ptr().hash(state)\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n+    #[inline]\n     fn from(unique: Unique<T>) -> Self {\n         NonNull { pointer: unique.pointer }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n+    #[inline]\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n+    #[inline]\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }"}]}