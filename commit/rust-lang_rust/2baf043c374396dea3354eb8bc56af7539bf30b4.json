{"sha": "2baf043c374396dea3354eb8bc56af7539bf30b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYWYwNDNjMzc0Mzk2ZGVhMzM1NGViOGJjNTZhZjc1MzliZjMwYjQ=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-06T09:11:42Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:40:24Z"}, "message": "move filter_map_next to its own module", "tree": {"sha": "a2b05c19d7c936eedb5a50608d16f54171db4499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b05c19d7c936eedb5a50608d16f54171db4499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2baf043c374396dea3354eb8bc56af7539bf30b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2baf043c374396dea3354eb8bc56af7539bf30b4", "html_url": "https://github.com/rust-lang/rust/commit/2baf043c374396dea3354eb8bc56af7539bf30b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2baf043c374396dea3354eb8bc56af7539bf30b4/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "805dcd12d41e72c16bbca83496f4b89ba49eed64", "url": "https://api.github.com/repos/rust-lang/rust/commits/805dcd12d41e72c16bbca83496f4b89ba49eed64", "html_url": "https://github.com/rust-lang/rust/commit/805dcd12d41e72c16bbca83496f4b89ba49eed64"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "a789df922ffdbfb2327419d867438ffbe2466304", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2baf043c374396dea3354eb8bc56af7539bf30b4/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2baf043c374396dea3354eb8bc56af7539bf30b4/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=2baf043c374396dea3354eb8bc56af7539bf30b4", "patch": "@@ -0,0 +1,40 @@\n+use crate::utils::{match_trait_method, meets_msrv, paths, snippet, span_lint, span_lint_and_sugg};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_semver::RustcVersion;\n+\n+use super::FILTER_MAP_NEXT;\n+\n+const FILTER_MAP_NEXT_MSRV: RustcVersion = RustcVersion::new(1, 30, 0);\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    filter_args: &'tcx [hir::Expr<'_>],\n+    msrv: Option<&RustcVersion>,\n+) {\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        if !meets_msrv(msrv, &FILTER_MAP_NEXT_MSRV) {\n+            return;\n+        }\n+\n+        let msg = \"called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n+                   `.find_map(..)` instead\";\n+        let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n+        if filter_snippet.lines().count() <= 1 {\n+            let iter_snippet = snippet(cx, filter_args[0].span, \"..\");\n+            span_lint_and_sugg(\n+                cx,\n+                FILTER_MAP_NEXT,\n+                expr.span,\n+                msg,\n+                \"try this\",\n+                format!(\"{}.find_map({})\", iter_snippet, filter_snippet),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            span_lint(cx, FILTER_MAP_NEXT, expr.span, msg);\n+        }\n+    }\n+}"}, {"sha": "fe1327564b20c5351404c558c421593c0195d8eb", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2baf043c374396dea3354eb8bc56af7539bf30b4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2baf043c374396dea3354eb8bc56af7539bf30b4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2baf043c374396dea3354eb8bc56af7539bf30b4", "patch": "@@ -6,6 +6,7 @@ mod filetype_is_file;\n mod filter_map;\n mod filter_map_identity;\n mod filter_map_map;\n+mod filter_map_next;\n mod filter_next;\n mod from_iter_instead_of_collect;\n mod get_unwrap;\n@@ -1702,7 +1703,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"next\", \"iter\"] => iter_next_slice::check(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => filter_map::check(cx, expr, false),\n             [\"map\", \"filter_map\"] => filter_map_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1], self.msrv.as_ref()),\n+            [\"next\", \"filter_map\"] => filter_map_next::check(cx, expr, arg_lists[1], self.msrv.as_ref()),\n             [\"map\", \"find\"] => filter_map::check(cx, expr, true),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n@@ -2752,40 +2753,6 @@ fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n     );\n }\n \n-const FILTER_MAP_NEXT_MSRV: RustcVersion = RustcVersion::new(1, 30, 0);\n-\n-/// lint use of `filter_map().next()` for `Iterators`\n-fn lint_filter_map_next<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    filter_args: &'tcx [hir::Expr<'_>],\n-    msrv: Option<&RustcVersion>,\n-) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        if !meets_msrv(msrv, &FILTER_MAP_NEXT_MSRV) {\n-            return;\n-        }\n-\n-        let msg = \"called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n-                   `.find_map(..)` instead\";\n-        let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n-        if filter_snippet.lines().count() <= 1 {\n-            let iter_snippet = snippet(cx, filter_args[0].span, \"..\");\n-            span_lint_and_sugg(\n-                cx,\n-                FILTER_MAP_NEXT,\n-                expr.span,\n-                msg,\n-                \"try this\",\n-                format!(\"{}.find_map({})\", iter_snippet, filter_snippet),\n-                Applicability::MachineApplicable,\n-            );\n-        } else {\n-            span_lint(cx, FILTER_MAP_NEXT, expr.span, msg);\n-        }\n-    }\n-}\n-\n /// lint use of `filter().flat_map()` for `Iterators`\n fn lint_filter_flat_map<'tcx>(\n     cx: &LateContext<'tcx>,"}]}