{"sha": "305cb7133f7e68e9ecad6319363909dc371b6fa9", "node_id": "C_kwDOAAsO6NoAKDMwNWNiNzEzM2Y3ZTY4ZTllY2FkNjMxOTM2MzkwOWRjMzcxYjZmYTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-05T17:06:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-05T17:06:06Z"}, "message": "Rollup merge of #103920 - ferrocene:pa-maybe-open-in-browser, r=jyn514\n\nMove browser opening logic in `Builder`\n\nThis allows `open()` to be called from other places in bootstrap (I need this for Ferrocene, as we keep our custom steps in `src/bootstrap/ferrocene`), and it simplifies the callers by moving the `was_invoked_explicitly` check into the function.", "tree": {"sha": "e8e9d585ad9f290f0c8658db641283469b0cb35a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e9d585ad9f290f0c8658db641283469b0cb35a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/305cb7133f7e68e9ecad6319363909dc371b6fa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZpf+CRBK7hj4Ov3rIwAAS5oIAFi04NgitjHNnmCa5C6qMBBC\nQtH9pRp+eClW7vn0ITHebKTMdCHpKlz7ThL8Rca6Ds1iIhZtSTHXeo9g0k6p2Cyi\n9mq8yKT4vdG1jwyUpoGQQV3Zb5Xq8ybun1SvswlX0Dfn1FMS8ZVcmVBE2jjH3nP/\na1YIq4XokeBY1AHLU3N/vRUNrnX3ajY/IbOEz4C9R/UgyE9WGNJDqzuNAuFW8U9Q\nUcfeQ7xG929f9lPNtRVu5EPhxbbkWdFtSCESthcgNpCh3uBeRvU4qNBXog0hwseY\ncoDzFilKmWnMHLi768xA0n7QrEuPbTUOjhZxnORaAT2Vz2+4bG5c715YU2Kt4to=\n=rl33\n-----END PGP SIGNATURE-----\n", "payload": "tree e8e9d585ad9f290f0c8658db641283469b0cb35a\nparent 3eac639e1e1c6e4f0762d81521939ca8555ea77a\nparent 5e4618ff1433e92009c7478933874f5f23b34e29\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667667966 +0100\ncommitter GitHub <noreply@github.com> 1667667966 +0100\n\nRollup merge of #103920 - ferrocene:pa-maybe-open-in-browser, r=jyn514\n\nMove browser opening logic in `Builder`\n\nThis allows `open()` to be called from other places in bootstrap (I need this for Ferrocene, as we keep our custom steps in `src/bootstrap/ferrocene`), and it simplifies the callers by moving the `was_invoked_explicitly` check into the function.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/305cb7133f7e68e9ecad6319363909dc371b6fa9", "html_url": "https://github.com/rust-lang/rust/commit/305cb7133f7e68e9ecad6319363909dc371b6fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/305cb7133f7e68e9ecad6319363909dc371b6fa9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eac639e1e1c6e4f0762d81521939ca8555ea77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eac639e1e1c6e4f0762d81521939ca8555ea77a", "html_url": "https://github.com/rust-lang/rust/commit/3eac639e1e1c6e4f0762d81521939ca8555ea77a"}, {"sha": "5e4618ff1433e92009c7478933874f5f23b34e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4618ff1433e92009c7478933874f5f23b34e29", "html_url": "https://github.com/rust-lang/rust/commit/5e4618ff1433e92009c7478933874f5f23b34e29"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "406bae02d84da581c9b3c37c9d8f7693c22d7a59", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/305cb7133f7e68e9ecad6319363909dc371b6fa9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305cb7133f7e68e9ecad6319363909dc371b6fa9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=305cb7133f7e68e9ecad6319363909dc371b6fa9", "patch": "@@ -2207,6 +2207,24 @@ impl<'a> Builder<'a> {\n \n         false\n     }\n+\n+    pub(crate) fn maybe_open_in_browser<S: Step>(&self, path: impl AsRef<Path>) {\n+        if self.was_invoked_explicitly::<S>(Kind::Doc) {\n+            self.open_in_browser(path);\n+        }\n+    }\n+\n+    pub(crate) fn open_in_browser(&self, path: impl AsRef<Path>) {\n+        if self.config.dry_run || !self.config.cmd.open() {\n+            return;\n+        }\n+\n+        let path = path.as_ref();\n+        self.info(&format!(\"Opening doc {}\", path.display()));\n+        if let Err(err) = opener::open(path) {\n+            self.info(&format!(\"{}\\n\", err));\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "1357718b84e351e67cfe4da6bf4c7d6307db2ae1", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/305cb7133f7e68e9ecad6319363909dc371b6fa9/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305cb7133f7e68e9ecad6319363909dc371b6fa9/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=305cb7133f7e68e9ecad6319363909dc371b6fa9", "patch": "@@ -85,18 +85,6 @@ book!(\n     StyleGuide, \"src/doc/style-guide\", \"style-guide\";\n );\n \n-fn open(builder: &Builder<'_>, path: impl AsRef<Path>) {\n-    if builder.config.dry_run || !builder.config.cmd.open() {\n-        return;\n-    }\n-\n-    let path = path.as_ref();\n-    builder.info(&format!(\"Opening doc {}\", path.display()));\n-    if let Err(err) = opener::open(path) {\n-        builder.info(&format!(\"{}\\n\", err));\n-    }\n-}\n-\n // \"library/std\" -> [\"library\", \"std\"]\n //\n // Used for deciding whether a particular step is one requested by the user on\n@@ -240,11 +228,9 @@ impl Step for TheBook {\n             invoke_rustdoc(builder, compiler, &shared_assets, target, path);\n         }\n \n-        if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n-            let out = builder.doc_out(target);\n-            let index = out.join(\"book\").join(\"index.html\");\n-            open(builder, &index);\n-        }\n+        let out = builder.doc_out(target);\n+        let index = out.join(\"book\").join(\"index.html\");\n+        builder.maybe_open_in_browser::<Self>(index);\n     }\n }\n \n@@ -386,7 +372,7 @@ impl Step for Standalone {\n         // with no particular explicit doc requested (e.g. library/core).\n         if builder.paths.is_empty() || builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n             let index = out.join(\"index.html\");\n-            open(builder, &index);\n+            builder.open_in_browser(&index);\n         }\n     }\n }\n@@ -507,7 +493,7 @@ impl Step for Std {\n         for requested_crate in requested_crates {\n             if STD_PUBLIC_CRATES.iter().any(|k| *k == requested_crate.as_str()) {\n                 let index = out.join(requested_crate).join(\"index.html\");\n-                open(builder, &index);\n+                builder.open_in_browser(index);\n             }\n         }\n     }\n@@ -759,7 +745,7 @@ impl Step for Rustc {\n         // Let's open the first crate documentation page:\n         if let Some(krate) = to_open {\n             let index = out.join(krate).join(\"index.html\");\n-            open(builder, &index);\n+            builder.open_in_browser(index);\n         }\n     }\n }\n@@ -1019,10 +1005,9 @@ impl Step for RustcBook {\n             name: INTERNER.intern_str(\"rustc\"),\n             src: INTERNER.intern_path(out_base),\n         });\n-        if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n-            let out = builder.doc_out(self.target);\n-            let index = out.join(\"rustc\").join(\"index.html\");\n-            open(builder, &index);\n-        }\n+\n+        let out = builder.doc_out(self.target);\n+        let index = out.join(\"rustc\").join(\"index.html\");\n+        builder.maybe_open_in_browser::<Self>(index);\n     }\n }"}]}