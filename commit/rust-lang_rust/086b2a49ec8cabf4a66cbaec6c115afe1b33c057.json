{"sha": "086b2a49ec8cabf4a66cbaec6c115afe1b33c057", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NmIyYTQ5ZWM4Y2FiZjRhNjZjYmFlYzZjMTE1YWZlMWIzM2MwNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T01:51:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T01:51:50Z"}, "message": "Auto merge of #68031 - Marwes:fold_list, r=estebank\n\nperf: Avoid creating a SmallVec if nothing changes during a fold\n\nNot sure if this helps but in theory it should be less work than what\nthe current micro optimization does for `ty::Predicate` lists.\n\n(It would explain the overhead I am seeing from `perf`.)", "tree": {"sha": "e2d29c8c4b125ea5cc8af068d1527d2ce500d7e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d29c8c4b125ea5cc8af068d1527d2ce500d7e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086b2a49ec8cabf4a66cbaec6c115afe1b33c057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086b2a49ec8cabf4a66cbaec6c115afe1b33c057", "html_url": "https://github.com/rust-lang/rust/commit/086b2a49ec8cabf4a66cbaec6c115afe1b33c057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086b2a49ec8cabf4a66cbaec6c115afe1b33c057/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "html_url": "https://github.com/rust-lang/rust/commit/83beb0a118f7508b2a1888bfecf4e46640b9b3c2"}, {"sha": "a1586f1d2b17d687444d3b94aedd7ce24ae074ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1586f1d2b17d687444d3b94aedd7ce24ae074ed", "html_url": "https://github.com/rust-lang/rust/commit/a1586f1d2b17d687444d3b94aedd7ce24ae074ed"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "c1ae4d9fe1724e43178316da8732fdd931ace583", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/086b2a49ec8cabf4a66cbaec6c115afe1b33c057/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086b2a49ec8cabf4a66cbaec6c115afe1b33c057/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=086b2a49ec8cabf4a66cbaec6c115afe1b33c057", "patch": "@@ -805,8 +805,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-        folder.tcx().intern_existential_predicates(&v)\n+        fold_list(*self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n@@ -816,8 +815,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>>\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let v = self.iter().map(|t| t.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-        folder.tcx().intern_type_list(&v)\n+        fold_list(*self, folder, |tcx, v| tcx.intern_type_list(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n@@ -827,8 +825,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let v = self.iter().map(|t| t.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-        folder.tcx().intern_projs(&v)\n+        fold_list(*self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n@@ -992,17 +989,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        // This code is hot enough that it's worth specializing for a list of\n-        // length 0. (No other length is common enough to be worth singling\n-        // out).\n-        if self.len() == 0 {\n-            self\n-        } else {\n-            // Don't bother interning if nothing changed, which is the common\n-            // case.\n-            let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-            if v[..] == self[..] { self } else { folder.tcx().intern_predicates(&v) }\n-        }\n+        fold_list(*self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n@@ -1075,3 +1062,34 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         false\n     }\n }\n+\n+// Does the equivalent of\n+// ```\n+// let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n+// folder.tcx().intern_*(&v)\n+// ```\n+fn fold_list<'tcx, F, T>(\n+    list: &'tcx ty::List<T>,\n+    folder: &mut F,\n+    intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,\n+) -> &'tcx ty::List<T>\n+where\n+    F: TypeFolder<'tcx>,\n+    T: TypeFoldable<'tcx> + PartialEq + Copy,\n+{\n+    let mut iter = list.iter();\n+    // Look for the first element that changed\n+    if let Some((i, new_t)) = iter.by_ref().enumerate().find_map(|(i, t)| {\n+        let new_t = t.fold_with(folder);\n+        if new_t == *t { None } else { Some((i, new_t)) }\n+    }) {\n+        // An element changed, prepare to intern the resulting list\n+        let mut new_list = SmallVec::<[_; 8]>::with_capacity(list.len());\n+        new_list.extend_from_slice(&list[..i]);\n+        new_list.push(new_t);\n+        new_list.extend(iter.map(|t| t.fold_with(folder)));\n+        intern(folder.tcx(), &new_list)\n+    } else {\n+        list\n+    }\n+}"}]}