{"sha": "5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMTVkZDcwYjAzN2IzZDE2MjNlYmQ4M2Q4ZWYwZjY2YWQ2OTUwYWY=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-07T19:39:23Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-07T19:39:23Z"}, "message": "Tidy up binary operator type inference; add test file", "tree": {"sha": "f4e1936de76bee89502613ce038f4ecaef19ec4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e1936de76bee89502613ce038f4ecaef19ec4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "html_url": "https://github.com/rust-lang/rust/commit/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0eaef58072acc087d23faca5a9f9879f1765d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0eaef58072acc087d23faca5a9f9879f1765d5", "html_url": "https://github.com/rust-lang/rust/commit/7b0eaef58072acc087d23faca5a9f9879f1765d5"}], "stats": {"total": 131, "additions": 87, "deletions": 44}, "files": [{"sha": "7827e82c4da2f2a53224e629942173e596e07761", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 41, "deletions": 44, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "patch": "@@ -527,9 +527,7 @@ struct InferenceContext<'a, D: HirDatabase> {\n     return_ty: Ty,\n }\n \n-// helper function that determines whether a binary operator\n-// always returns a boolean\n-fn boolean_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n+fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::BooleanOr\n         | BinaryOp::BooleanAnd\n@@ -566,6 +564,44 @@ fn boolean_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n     }\n }\n \n+fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n+    match op {\n+        BinaryOp::BooleanAnd | BinaryOp::BooleanOr => Ty::Bool,\n+        BinaryOp::Assignment | BinaryOp::EqualityTest => match lhs_ty {\n+            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) | Ty::Str | Ty::Char | Ty::Bool => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n+        BinaryOp::LesserEqualTest\n+        | BinaryOp::GreaterEqualTest\n+        | BinaryOp::LesserTest\n+        | BinaryOp::GreaterTest\n+        | BinaryOp::AddAssign\n+        | BinaryOp::SubAssign\n+        | BinaryOp::DivAssign\n+        | BinaryOp::MulAssign\n+        | BinaryOp::RemAssign\n+        | BinaryOp::ShrAssign\n+        | BinaryOp::ShlAssign\n+        | BinaryOp::BitAndAssign\n+        | BinaryOp::BitOrAssign\n+        | BinaryOp::BitXorAssign\n+        | BinaryOp::Addition\n+        | BinaryOp::Subtraction\n+        | BinaryOp::Multiplication\n+        | BinaryOp::Division\n+        | BinaryOp::Remainder\n+        | BinaryOp::LeftShift\n+        | BinaryOp::RightShift\n+        | BinaryOp::BitwiseAnd\n+        | BinaryOp::BitwiseOr\n+        | BinaryOp::BitwiseXor => match lhs_ty {\n+            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n+        _ => Ty::Unknown,\n+    }\n+}\n+\n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn new(\n         db: &'a D,\n@@ -923,50 +959,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     let lhs_ty = self.infer_expr(*lhs, &lhs_expectation)?;\n                     // TODO: find implementation of trait corresponding to operation\n                     // symbol and resolve associated `Output` type\n-                    let rhs_expectation = match op {\n-                        BinaryOp::BooleanAnd | BinaryOp::BooleanOr => Ty::Bool,\n-                        BinaryOp::Assignment | BinaryOp::EqualityTest => match lhs_ty {\n-                            Ty::Uint(..)\n-                            | Ty::Int(..)\n-                            | Ty::Float(..)\n-                            | Ty::Str\n-                            | Ty::Char\n-                            | Ty::Bool => lhs_ty,\n-                            _ => Ty::Unknown,\n-                        },\n-                        BinaryOp::LesserEqualTest\n-                        | BinaryOp::GreaterEqualTest\n-                        | BinaryOp::LesserTest\n-                        | BinaryOp::GreaterTest\n-                        | BinaryOp::AddAssign\n-                        | BinaryOp::SubAssign\n-                        | BinaryOp::DivAssign\n-                        | BinaryOp::MulAssign\n-                        | BinaryOp::RemAssign\n-                        | BinaryOp::ShrAssign\n-                        | BinaryOp::ShlAssign\n-                        | BinaryOp::BitAndAssign\n-                        | BinaryOp::BitOrAssign\n-                        | BinaryOp::BitXorAssign\n-                        | BinaryOp::Addition\n-                        | BinaryOp::Subtraction\n-                        | BinaryOp::Multiplication\n-                        | BinaryOp::Division\n-                        | BinaryOp::Remainder\n-                        | BinaryOp::LeftShift\n-                        | BinaryOp::RightShift\n-                        | BinaryOp::BitwiseAnd\n-                        | BinaryOp::BitwiseOr\n-                        | BinaryOp::BitwiseXor => match lhs_ty {\n-                            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) => lhs_ty,\n-                            _ => Ty::Unknown,\n-                        },\n-                        _ => Ty::Unknown,\n-                    };\n+                    let rhs_expectation = binary_op_rhs_expectation(*op, lhs_ty);\n                     let rhs_ty = self.infer_expr(*rhs, &Expectation::has_type(rhs_expectation))?;\n \n                     // TODO: similar as above, return ty is often associated trait type\n-                    boolean_op_return_ty(*op, rhs_ty)\n+                    binary_op_return_ty(*op, rhs_ty)\n                 }\n                 _ => Ty::Unknown,\n             },"}, {"sha": "59c07ff4346d5b5031115b4b2f3b167de7876fdb", "filename": "crates/ra_hir/src/ty/tests/data/binary_op.txt", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbinary_op.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbinary_op.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbinary_op.txt?ref=5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "patch": "@@ -0,0 +1,46 @@\n+[6; 7) 'x': [unknown]\n+[22; 34) '{     0i32 }': i32\n+[28; 32) '0i32': i32\n+[46; 342) '{     ... < 3 }': bool\n+[56; 57) 'x': bool\n+[60; 61) 'a': bool\n+[60; 66) 'a && b': bool\n+[65; 66) 'b': bool\n+[76; 77) 'y': bool\n+[80; 84) 'true': bool\n+[80; 93) 'true || false': bool\n+[88; 93) 'false': bool\n+[103; 104) 'z': bool\n+[107; 108) 'x': bool\n+[107; 113) 'x == y': bool\n+[112; 113) 'y': bool\n+[123; 134) 'minus_forty': isize\n+[144; 152) '-40isize': isize\n+[145; 152) '40isize': [unknown]\n+[162; 163) 'h': bool\n+[166; 177) 'minus_forty': isize\n+[166; 188) 'minus_...ONST_2': bool\n+[181; 188) 'CONST_2': isize\n+[198; 199) 'c': i32\n+[202; 203) 'f': fn([unknown],) -> i32\n+[202; 211) 'f(z || y)': i32\n+[202; 215) 'f(z || y) + 5': i32\n+[204; 205) 'z': bool\n+[204; 210) 'z || y': bool\n+[209; 210) 'y': bool\n+[214; 215) '5': i32\n+[225; 226) 'd': [unknown]\n+[229; 230) 'b': [unknown]\n+[240; 241) 'g': ()\n+[244; 255) 'minus_forty': isize\n+[244; 260) 'minus_...y ^= i': ()\n+[259; 260) 'i': isize\n+[270; 273) 'ten': usize\n+[283; 285) '10': usize\n+[295; 308) 'ten_is_eleven': bool\n+[311; 314) 'ten': usize\n+[311; 326) 'ten == some_num': bool\n+[318; 326) 'some_num': usize\n+[333; 336) 'ten': usize\n+[333; 340) 'ten < 3': bool\n+[339; 340) '3': usize"}]}