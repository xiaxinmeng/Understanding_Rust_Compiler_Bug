{"sha": "8866f68a4d038fbb26799f792dcb60d1c5e184cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NjZmNjhhNGQwMzhmYmIyNjc5OWY3OTJkY2I2MGQxYzVlMTg0Y2Q=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-14T10:28:09Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-14T10:29:27Z"}, "message": "format: refactor report_invalid_references", "tree": {"sha": "dd98afe8ace12ccb2da66acc5ffa5166378fe260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd98afe8ace12ccb2da66acc5ffa5166378fe260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8866f68a4d038fbb26799f792dcb60d1c5e184cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8866f68a4d038fbb26799f792dcb60d1c5e184cd", "html_url": "https://github.com/rust-lang/rust/commit/8866f68a4d038fbb26799f792dcb60d1c5e184cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8866f68a4d038fbb26799f792dcb60d1c5e184cd/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d052c920bc6ee6f5f0575f76980f0f69327662f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d052c920bc6ee6f5f0575f76980f0f69327662f", "html_url": "https://github.com/rust-lang/rust/commit/3d052c920bc6ee6f5f0575f76980f0f69327662f"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "f2122a57d272436a3b53d8cdfeaa38d3b1966e05", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8866f68a4d038fbb26799f792dcb60d1c5e184cd/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8866f68a4d038fbb26799f792dcb60d1c5e184cd/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=8866f68a4d038fbb26799f792dcb60d1c5e184cd", "patch": "@@ -273,11 +273,11 @@ impl<'a, 'b> Context<'a, 'b> {\n         } else {\n             MultiSpan::from_span(self.fmtsp)\n         };\n-        let mut refs: Vec<_> = self\n+        let refs_len = self.invalid_refs.len();\n+        let mut refs = self\n             .invalid_refs\n             .iter()\n-            .map(|(r, pos)| (r.to_string(), self.arg_spans.get(*pos)))\n-            .collect();\n+            .map(|(r, pos)| (r.to_string(), self.arg_spans.get(*pos)));\n \n         if self.names.is_empty() && !numbered_position_args {\n             e = self.ecx.mut_span_err(\n@@ -290,28 +290,24 @@ impl<'a, 'b> Context<'a, 'b> {\n                 ),\n             );\n         } else {\n-            let (arg_list, mut sp) = match refs.len() {\n-                1 => {\n-                    let (reg, pos) = refs.pop().unwrap();\n-                    (\n-                        format!(\"argument {}\", reg),\n-                        MultiSpan::from_span(*pos.unwrap_or(&self.fmtsp)),\n-                    )\n-                }\n-                _ => {\n-                    let pos =\n-                        MultiSpan::from_spans(refs.iter().map(|(_, p)| *p.unwrap()).collect());\n-                    let mut refs: Vec<String> = refs.iter().map(|(s, _)| s.to_owned()).collect();\n-                    let reg = refs.pop().unwrap();\n-                    (\n-                        format!(\n-                            \"arguments {head} and {tail}\",\n-                            tail = reg,\n-                            head = refs.join(\", \")\n-                        ),\n-                        pos,\n-                    )\n-                }\n+            let (arg_list, mut sp) = if refs_len == 1 {\n+                let (reg, pos) = refs.next().unwrap();\n+                (\n+                    format!(\"argument {}\", reg),\n+                    MultiSpan::from_span(*pos.unwrap_or(&self.fmtsp)),\n+                )\n+            } else {\n+                let (mut refs, spans): (Vec<_>, Vec<_>) = refs.unzip();\n+                let pos = MultiSpan::from_spans(spans.into_iter().map(|s| *s.unwrap()).collect());\n+                let reg = refs.pop().unwrap();\n+                (\n+                    format!(\n+                        \"arguments {head} and {tail}\",\n+                        head = refs.join(\", \"),\n+                        tail = reg,\n+                    ),\n+                    pos,\n+                )\n             };\n             if !self.is_literal {\n                 sp = MultiSpan::from_span(self.fmtsp);"}]}