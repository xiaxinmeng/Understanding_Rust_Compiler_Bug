{"sha": "10070118add69bd55d8cb0bec574b4dc920c3531", "node_id": "C_kwDOAAsO6NoAKDEwMDcwMTE4YWRkNjliZDU1ZDhjYjBiZWM1NzRiNGRjOTIwYzM1MzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-25T06:30:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-25T06:30:49Z"}, "message": "Rollup merge of #94068 - eholk:drop-track-field-assign, r=tmandry\n\nConsider mutations as borrows in generator drop tracking\n\nThis is needed to match MIR more conservative approximation of any borrowed value being live across a suspend point (See #94067). This change considers an expression such as `x.y = z` to be a borrow of `x` and therefore keeps `x` live across suspend points.\n\nr? `@nikomatsakis`", "tree": {"sha": "df97b704380f5082d3a51cab6693ac7f956873f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df97b704380f5082d3a51cab6693ac7f956873f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10070118add69bd55d8cb0bec574b4dc920c3531", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGHeZCRBK7hj4Ov3rIwAAir0IAGUzfKCY5mD9zdyZDyDGvT2z\nHnLWSBYLYF2tGdQK9hoc2+Zb+/rIna7f0Xy3t8gBA30RBs3yUJBB1hT16xKq5pen\nh3RAADzsxRNHFOK2E8NEUlzCotU8b4NzxPDtS7Q8Z/C6dA3BvPbkbqWiZMs3dMyC\nf3EvKrDiRV+K2eLY/GeWD1Fy9Ma4Iu59ycTx69JzyPlg5GymVWq3qKPGfMET1dR8\nPoDe40PP6FjMQ2tq8hz+vXerDxo4R49QdJPyB6nxVv5VWDfxRL02Jqw/obkdr80w\nRSoIoFxOUGGDMFXxd6XvNhKMC8spkh2VBsqgqgEpdldLzH1Bpwogxz9C4ShojPQ=\n=0Hv4\n-----END PGP SIGNATURE-----\n", "payload": "tree df97b704380f5082d3a51cab6693ac7f956873f0\nparent ae6770e4d5677ae12fa9485a39a3991439434ece\nparent 074d757bc68c5f22d7a59724dae55ea2357bff8b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645770649 +0100\ncommitter GitHub <noreply@github.com> 1645770649 +0100\n\nRollup merge of #94068 - eholk:drop-track-field-assign, r=tmandry\n\nConsider mutations as borrows in generator drop tracking\n\nThis is needed to match MIR more conservative approximation of any borrowed value being live across a suspend point (See #94067). This change considers an expression such as `x.y = z` to be a borrow of `x` and therefore keeps `x` live across suspend points.\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10070118add69bd55d8cb0bec574b4dc920c3531", "html_url": "https://github.com/rust-lang/rust/commit/10070118add69bd55d8cb0bec574b4dc920c3531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10070118add69bd55d8cb0bec574b4dc920c3531/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6770e4d5677ae12fa9485a39a3991439434ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6770e4d5677ae12fa9485a39a3991439434ece", "html_url": "https://github.com/rust-lang/rust/commit/ae6770e4d5677ae12fa9485a39a3991439434ece"}, {"sha": "074d757bc68c5f22d7a59724dae55ea2357bff8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/074d757bc68c5f22d7a59724dae55ea2357bff8b", "html_url": "https://github.com/rust-lang/rust/commit/074d757bc68c5f22d7a59724dae55ea2357bff8b"}], "stats": {"total": 126, "additions": 123, "deletions": 3}, "files": [{"sha": "03d3b23bb23d5cc35d4f6ab5e048bd338c401ef2", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10070118add69bd55d8cb0bec574b4dc920c3531/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10070118add69bd55d8cb0bec574b4dc920c3531/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=10070118add69bd55d8cb0bec574b4dc920c3531", "patch": "@@ -93,19 +93,25 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n     fn borrow(\n         &mut self,\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        _diag_expr_id: HirId,\n+        diag_expr_id: HirId,\n         _bk: rustc_middle::ty::BorrowKind,\n     ) {\n+        debug!(\"borrow {:?}; diag_expr_id={:?}\", place_with_id, diag_expr_id);\n         self.places\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n     }\n \n     fn mutate(\n         &mut self,\n-        _assignee_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        _diag_expr_id: HirId,\n+        assignee_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n     ) {\n+        debug!(\"mutate {:?}; diag_expr_id={:?}\", assignee_place, diag_expr_id);\n+        // Count mutations as a borrow.\n+        self.places\n+            .borrowed\n+            .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));\n     }\n \n     fn fake_read("}, {"sha": "b6c0fda15216a71ad062bb725dcc5f4b54d8ae78", "filename": "src/test/ui/async-await/drop-track-field-assign-nonsend.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/10070118add69bd55d8cb0bec574b4dc920c3531/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10070118add69bd55d8cb0bec574b4dc920c3531/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs?ref=10070118add69bd55d8cb0bec574b4dc920c3531", "patch": "@@ -0,0 +1,45 @@\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+// compile-flags: -Zdrop-tracking\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<std::rc::Rc<String>>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = None;\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn assert_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    let agent = Agent { info_result: InfoResult { node: None } };\n+    // FIXME: It would be nice for this to work. See #94067.\n+    assert_send(agent.handle());\n+    //~^ cannot be sent between threads safely\n+}"}, {"sha": "d95483c81195ce679345bb25a1facb7de7da0f34", "filename": "src/test/ui/async-await/drop-track-field-assign-nonsend.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/10070118add69bd55d8cb0bec574b4dc920c3531/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10070118add69bd55d8cb0bec574b4dc920c3531/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.stderr?ref=10070118add69bd55d8cb0bec574b4dc920c3531", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/drop-track-field-assign-nonsend.rs:43:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/drop-track-field-assign-nonsend.rs:21:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-track-field-assign-nonsend.rs:38:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a393cd164b9980a9423cad19bf599e4f65f551b", "filename": "src/test/ui/async-await/drop-track-field-assign.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/10070118add69bd55d8cb0bec574b4dc920c3531/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10070118add69bd55d8cb0bec574b4dc920c3531/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs?ref=10070118add69bd55d8cb0bec574b4dc920c3531", "patch": "@@ -0,0 +1,44 @@\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+// compile-flags: -Zdrop-tracking\n+// build-pass\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<String>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = Some(\"bar\".into());\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn main() {\n+    let mut agent = Agent {\n+        info_result: InfoResult { node: None }\n+    };\n+    let _ = agent.handle();\n+}"}]}