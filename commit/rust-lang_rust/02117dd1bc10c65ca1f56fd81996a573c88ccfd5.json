{"sha": "02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMTE3ZGQxYmMxMGM2NWNhMWY1NmZkODE5OTZhNTczYzg4Y2NmZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-23T03:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-23T03:56:18Z"}, "message": "auto merge of #14357 : huonw/rust/spelling, r=pnkfelix\n\nThe span on a inner doc-comment would point to the next token, e.g. the span for the `a` line points to the `b` line, and the span of `b` points to the `fn`.\r\n\r\n```rust\r\n//! a\r\n//! b\r\n\r\nfn bar() {}\r\n```", "tree": {"sha": "37eef5dbc14141cacc83d97e025cc398a85f7508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37eef5dbc14141cacc83d97e025cc398a85f7508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "html_url": "https://github.com/rust-lang/rust/commit/02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec0258a381b88b5574e3f8ce72ae553ac3a574b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0258a381b88b5574e3f8ce72ae553ac3a574b7", "html_url": "https://github.com/rust-lang/rust/commit/ec0258a381b88b5574e3f8ce72ae553ac3a574b7"}, {"sha": "d3fde8476b9cdce734dcec6b2003a482c5908235", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fde8476b9cdce734dcec6b2003a482c5908235", "html_url": "https://github.com/rust-lang/rust/commit/d3fde8476b9cdce734dcec6b2003a482c5908235"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "1b79b84ff90852dd9691bb4b689a7ced11aa8400", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -659,7 +659,7 @@ static INITIAL_LOAD_FACTOR: Fraction = (9, 10);\n /// on creation by default, this means the ordering of the keys is\n /// randomized, but makes the tables more resistant to\n /// denial-of-service attacks (Hash DoS). This behaviour can be\n-/// overriden with one of the constructors.\n+/// overridden with one of the constructors.\n ///\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n /// this can frequently be achieved by using `#[deriving(Eq, Hash)]`."}, {"sha": "3b1322cdc1b05a64afafa5559c16dfa686d1b96f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Sharable mutable containers.\n+//! Shareable mutable containers.\n //!\n //! Values of the `Cell` and `RefCell` types may be mutated through\n //! shared references (i.e. the common `&T` type), whereas most Rust\n@@ -41,7 +41,7 @@\n //! preventing crash bugs. Because of that, inherited mutability is\n //! preferred, and interior mutability is something of a last\n //! resort. Since cell types enable mutation where it would otherwise\n-//! be disallowed though, there are occassions when interior\n+//! be disallowed though, there are occasions when interior\n //! mutability might be appropriate, or even *must* be used, e.g.\n //!\n //! * Introducing inherited mutability roots to shared types."}, {"sha": "b44b6919cd9c9389c9d6b2a3618a499a6374a6f0", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -76,7 +76,7 @@ pub trait FormatWriter {\n     /// This function will return an instance of `FormatError` on error.\n     fn write(&mut self, bytes: &[u8]) -> Result;\n \n-    /// Glue for usage of the `write!` macro with implementors of this trait.\n+    /// Glue for usage of the `write!` macro with implementers of this trait.\n     ///\n     /// This method should generally not be invoked manually, but rather through\n     /// the `write!` macro itself."}, {"sha": "e58ef49c17fa608d96dae2ed01fb6bc8010191c9", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -872,10 +872,12 @@ pub trait OrdIterator<A> {\n     /// `min_max` finds the minimum and maximum elements in the iterator.\n     ///\n     /// The return type `MinMaxResult` is an enum of three variants:\n+    ///\n     /// - `NoElements` if the iterator is empty.\n     /// - `OneElement(x)` if the iterator has exactly one element.\n-    /// - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two values are equal if and only if\n-    /// there is more than one element in the iterator and all elements are equal.\n+    /// - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two\n+    ///    values are equal if and only if there is more than one\n+    ///    element in the iterator and all elements are equal.\n     ///\n     /// On an iterator of length `n`, `min_max` does `1.5 * n` comparisons,\n     /// and so faster than calling `min` and `max separately which does `2 * n` comparisons."}, {"sha": "770aa7547ff9449b1d7d4478d89071f41239bc03", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -266,7 +266,7 @@ pub mod marker {\n     #[deriving(Eq,Clone)]\n     pub struct NoCopy;\n \n-    /// A type which is considered \"not sharable\", meaning that\n+    /// A type which is considered \"not shareable\", meaning that\n     /// its contents are not threadsafe, hence they cannot be\n     /// shared between tasks.\n     #[lang=\"no_share_bound\"]"}, {"sha": "aa874b626e899d9b3cc807125fd8074900bc5a41", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -260,7 +260,7 @@\n //! The suitability of `fail!` as an error handling mechanism is\n //! limited by Rust's lack of any way to \"catch\" and resume execution\n //! from a thrown exception. Therefore using failure for error\n-//! handling requires encapsulating fallable code in a task. Calling\n+//! handling requires encapsulating fallible code in a task. Calling\n //! the `fail!` macro, or invoking `fail!` indirectly should be\n //! avoided as an error reporting strategy. Failure is only for\n //! unrecoverable errors and a failing task is typically the sign of"}, {"sha": "850a771a3b4049248a9e9d311640dc8693580584", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -190,7 +190,7 @@ pub enum Fail_ {\n     UnrecognizedOption(StrBuf),\n     /// A required option is not present.\n     OptionMissing(StrBuf),\n-    /// A single occurence option is being used multiple times.\n+    /// A single occurrence option is being used multiple times.\n     OptionDuplicated(StrBuf),\n     /// There's an argument being passed to a non-argument option.\n     UnexpectedArgument(StrBuf),"}, {"sha": "ad9c4f986ec0c37d6f558ed5b01c83a17cb71440", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -395,7 +395,7 @@ pub trait Labeller<'a,N,E> {\n     fn graph_id(&'a self) -> Id<'a>;\n \n     /// Maps `n` to a unique identifier with respect to `self`. The\n-    /// implementor is responsible for ensuring that the returned name\n+    /// implementer is responsible for ensuring that the returned name\n     /// is a valid DOT identifier.\n     fn node_id(&'a self, n: &N) -> Id<'a>;\n \n@@ -457,7 +457,7 @@ pub type Edges<'a,E> = MaybeOwnedVector<'a,E>;\n /// that is bound by the self lifetime `'a`.\n ///\n /// The `nodes` and `edges` method each return instantiations of\n-/// `MaybeOwnedVector` to leave implementors the freedom to create\n+/// `MaybeOwnedVector` to leave implementers the freedom to create\n /// entirely new vectors or to pass back slices into internally owned\n /// vectors.\n pub trait GraphWalk<'a, N, E> {"}, {"sha": "3015b6f12ccd1795047a1024a0d9158ebcf36b38", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -31,7 +31,7 @@ use std::slice;\n /// Some clients will have a pre-allocated vector ready to hand off in\n /// a slice; others will want to create the set on the fly and hand\n /// off ownership, via either `Growable` or `FixedLen` depending on\n-/// which kind of vector they have constucted.  (The `FixedLen`\n+/// which kind of vector they have constructed.  (The `FixedLen`\n /// variant is provided for interoperability with `std::slice` methods\n /// that return `~[T]`.)\n pub enum MaybeOwnedVector<'a,T> {"}, {"sha": "4584c08cbd8984f093ff58639a72c0467f0e0be9", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -125,7 +125,7 @@\n //! }\n //! ```\n //!\n-//! > **Note**: This `main` funciton in this example does *not* have I/O\n+//! > **Note**: This `main` function in this example does *not* have I/O\n //! >           support. The basic event loop does not provide any support\n //!\n //! # Starting with I/O support in libgreen"}, {"sha": "8aa8b12b26d271b257debb26fc313d31ba740b66", "filename": "src/libnative/io/timer_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibnative%2Fio%2Ftimer_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibnative%2Fio%2Ftimer_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_unix.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -23,7 +23,7 @@\n //!\n //! Whenever the call to select() times out, then a channel receives a message.\n //! Whenever the call returns that the file descriptor has information, then the\n-//! channel from timers is drained, enqueueing all incoming requests.\n+//! channel from timers is drained, enqueuing all incoming requests.\n //!\n //! The actual implementation of the helper thread is a sorted array of\n //! timers in terms of target firing date. The target is the absolute time at\n@@ -42,7 +42,7 @@\n //! thread. Whenever the timer is modified, it first takes ownership back from\n //! the worker thread in order to modify the same data structure. This has the\n //! side effect of \"cancelling\" the previous requests while allowing a\n-//! re-enqueueing later on.\n+//! re-enqueuing later on.\n //!\n //! Note that all time units in this file are in *milliseconds*.\n "}, {"sha": "c65501b5355572c1d7381cf20d32a73323706d53", "filename": "src/librustc/middle/borrowck/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -424,7 +424,7 @@ the pointer itself `LV` goes out of scope:\n ```\n \n The scope of a managed referent is also the scope of the pointer.  This\n-is a conservative approximation, since there may be other aliases fo\n+is a conservative approximation, since there may be other aliases for\n that same managed box that would cause it to live longer:\n \n ```notrust\n@@ -536,7 +536,7 @@ The final rules govern the computation of *restrictions*, meaning that\n we compute the set of actions that will be illegal for the life of the\n loan. The predicate is written `RESTRICTIONS(LV, LT, ACTIONS) =\n RESTRICTION*`, which can be read \"in order to prevent `ACTIONS` from\n-occuring on `LV`, the restrictions `RESTRICTION*` must be respected\n+occurring on `LV`, the restrictions `RESTRICTION*` must be respected\n for the lifetime of the loan\".\n \n Note that there is an initial set of restrictions: these restrictions\n@@ -551,7 +551,7 @@ are computed based on the kind of borrow:\n The reasoning here is that a mutable borrow must be the only writer,\n therefore it prevents other writes (`MUTATE`), mutable borrows\n (`CLAIM`), and immutable borrows (`FREEZE`). An immutable borrow\n-permits other immutable borows but forbids writes and mutable borows.\n+permits other immutable borrows but forbids writes and mutable borows.\n Finally, a const borrow just wants to be sure that the value is not\n moved out from under it, so no actions are forbidden.\n "}, {"sha": "a876c68d443db098fab7378d5ed4847f0059bc62", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -73,7 +73,7 @@ pub struct CrateContext {\n     /// came from)\n     pub external_srcs: RefCell<NodeMap<ast::DefId>>,\n     /// A set of static items which cannot be inlined into other crates. This\n-    /// will pevent in IIItem() structures from being encoded into the metadata\n+    /// will prevent in IIItem() structures from being encoded into the metadata\n     /// that is generated\n     pub non_inlineable_statics: RefCell<NodeSet>,\n     /// Cache instances of monomorphized functions"}, {"sha": "8befb1639c122f445c6e9833a2816f7761a08476", "filename": "src/librustc/middle/typeck/infer/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fdoc.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -244,7 +244,7 @@ yet, that's what we're trying to find!  In our code, we opt to unify\n \n # Implementation details\n \n-We make use of a trait-like impementation strategy to consolidate\n+We make use of a trait-like implementation strategy to consolidate\n duplicated code between subtypes, GLB, and LUB computations.  See the\n section on \"Type Combining\" below for details.\n "}, {"sha": "a67b2b481e4ca5cd9fd367acf8741746ee93311e", "filename": "src/librustuv/timeout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustuv%2Ftimeout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibrustuv%2Ftimeout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimeout.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -21,7 +21,7 @@ use uvio::UvIoFactory;\n use {Loop, UvError, uv_error_to_io_error, Request, wakeup};\n use {UvHandle, wait_until_woken_after};\n \n-/// Managment of a timeout when gaining access to a portion of a duplex stream.\n+/// Management of a timeout when gaining access to a portion of a duplex stream.\n pub struct AccessTimeout {\n     state: TimeoutState,\n     timer: Option<Box<TimerWatcher>>,"}, {"sha": "0d71c3de76ca6dc13b211f17a5d78c6e42693ec4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -407,7 +407,7 @@ pub enum IoErrorKind {\n     PermissionDenied,\n     /// A network connection failed for some reason not specified in this list.\n     ConnectionFailed,\n-    /// The network operation failed because the network connection was cloesd.\n+    /// The network operation failed because the network connection was closed.\n     Closed,\n     /// The connection was refused by the remote server.\n     ConnectionRefused,\n@@ -474,7 +474,7 @@ pub trait Reader {\n     /// inspected for in the error's `kind` field. Also note that reading 0\n     /// bytes is not considered an error in all circumstances\n     ///\n-    /// # Implementaton Note\n+    /// # Implementation Note\n     ///\n     /// When implementing this method on a new Reader, you are strongly encouraged\n     /// not to return 0 if you can avoid it.\n@@ -947,9 +947,9 @@ fn extend_sign(val: u64, nbytes: uint) -> i64 {\n \n /// A trait for objects which are byte-oriented streams. Writers are defined by\n /// one method, `write`. This function will block until the provided buffer of\n-/// bytes has been entirely written, and it will return any failurs which occur.\n+/// bytes has been entirely written, and it will return any failures which occur.\n ///\n-/// Another commonly overriden method is the `flush` method for writers such as\n+/// Another commonly overridden method is the `flush` method for writers such as\n /// buffered writers.\n ///\n /// Writers are intended to be composable with one another. Many objects"}, {"sha": "d2a83dd840d6d9a6ed022315b56fb8aaec48ce92", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -123,7 +123,7 @@ impl Command {\n     /// * Inherit the current process's environment\n     /// * Inherit the current process's working directory\n     /// * A readable pipe for stdin (file descriptor 0)\n-    /// * A writeable pipe for stdour and stderr (file descriptors 1 and 2)\n+    /// * A writeable pipe for stdout and stderr (file descriptors 1 and 2)\n     ///\n     /// Builder methods are provided to change these defaults and\n     /// otherwise configure the process."}, {"sha": "ab7001cbc9a88b953ad000af8fab4ba5d65f0e63", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -92,7 +92,7 @@ fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n /// provided unbuffered access to stdin.\n ///\n /// Care should be taken when creating multiple handles to the stdin of a\n-/// process. Beause this is a buffered reader by default, it's possible for\n+/// process. Because this is a buffered reader by default, it's possible for\n /// pending input to be unconsumed in one reader and unavailable to other\n /// readers. It is recommended that only one handle at a time is created for the\n /// stdin of a process."}, {"sha": "2df6062b7acc62d4e0e8de2930bbc301efb4d4a4", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -52,7 +52,7 @@ use rt::rtio::{IoFactory, LocalIo, RtioTimer};\n /// # }\n /// ```\n ///\n-/// If only sleeping is necessary, then a convenience api is provided through\n+/// If only sleeping is necessary, then a convenience API is provided through\n /// the `io::timer` module.\n ///\n /// ```"}, {"sha": "89d1b8f9342dd8b14e7e9948f86f6c662bac60d3", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use codemap::{spanned, Spanned, mk_sp};\n+use codemap::{spanned, Spanned, mk_sp, Span};\n use parse::common::*; //resolve bug?\n use parse::token;\n use parse::parser::Parser;\n@@ -129,10 +129,10 @@ impl<'a> ParserAttr for Parser<'a> {\n                     self.parse_attribute(true)\n                 }\n                 token::DOC_COMMENT(s) => {\n+                    // we need to get the position of this token before we bump.\n+                    let Span { lo, hi, .. } = self.span;\n                     self.bump();\n-                    ::attr::mk_sugared_doc_attr(self.id_to_interned_str(s),\n-                                                self.span.lo,\n-                                                self.span.hi)\n+                    ::attr::mk_sugared_doc_attr(self.id_to_interned_str(s), lo, hi)\n                 }\n                 _ => {\n                     break;"}, {"sha": "63ae349b0efe1383ceb8a2be9278a5694d482e7a", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02117dd1bc10c65ca1f56fd81996a573c88ccfd5/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=02117dd1bc10c65ca1f56fd81996a573c88ccfd5", "patch": "@@ -11,7 +11,7 @@\n //! Terminal formatting library.\n //!\n //! This crate provides the `Terminal` trait, which abstracts over an [ANSI\n-//! Termina][ansi] to provide color printing, among other things. There are two implementations,\n+//! Terminal][ansi] to provide color printing, among other things. There are two implementations,\n //! the `TerminfoTerminal`, which uses control characters from a\n //! [terminfo][ti] database, and `WinConsole`, which uses the [Win32 Console\n //! API][win]."}]}