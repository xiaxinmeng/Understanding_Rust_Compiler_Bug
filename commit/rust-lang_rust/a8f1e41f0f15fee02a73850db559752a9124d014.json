{"sha": "a8f1e41f0f15fee02a73850db559752a9124d014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjFlNDFmMGYxNWZlZTAyYTczODUwZGI1NTk3NTJhOTEyNGQwMTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-07T09:35:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-07T09:35:40Z"}, "message": "Merge #8394\n\n8394: Infer variants through type aliased enums r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f3325cfcd6565c87f93a9215d44106203eb20d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3325cfcd6565c87f93a9215d44106203eb20d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f1e41f0f15fee02a73850db559752a9124d014", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbXzsCRBK7hj4Ov3rIwAAdHIIAI5/u0Oi7XJ9XBsWFDgVVQ66\n1Tl9hmbrC4H6Tqmf5KWtN/CZCXwA43zOcmbE5qPM1wu3y4L8qUqWhTiydEslZ1Ad\ndzZrSYmOyu44XV7CkA83Q2g9s7iOvoejv8Y0ikT9ACiiFLTHFR6Mq8mIJht8cCwi\nu8G+eekbkLrxOTuD44MEaNpxI4GDXfDxbem6XjGSLeCcHMtoitfkuZ7XpRYZTEm/\nFcDLZIhcDubnquAqbS5kEyenHueg7H0+IdNSiVOgDY0ofIhYiUCKC4RlGSAHhzJP\nsUawVjE8W3FzfI91ihynGvxAmCnHpqUzaDpKrjkpmG3mZqg1oeTKET+jgrqgz04=\n=xZcq\n-----END PGP SIGNATURE-----\n", "payload": "tree f3325cfcd6565c87f93a9215d44106203eb20d9b\nparent ad50f5007f7fe0e02b128a2643cfca2468056f9a\nparent 41563fd6128e94e1fe1ae4006e4e183dff1a645c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617788140 +0000\ncommitter GitHub <noreply@github.com> 1617788140 +0000\n\nMerge #8394\n\n8394: Infer variants through type aliased enums r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f1e41f0f15fee02a73850db559752a9124d014", "html_url": "https://github.com/rust-lang/rust/commit/a8f1e41f0f15fee02a73850db559752a9124d014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f1e41f0f15fee02a73850db559752a9124d014/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad50f5007f7fe0e02b128a2643cfca2468056f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad50f5007f7fe0e02b128a2643cfca2468056f9a", "html_url": "https://github.com/rust-lang/rust/commit/ad50f5007f7fe0e02b128a2643cfca2468056f9a"}, {"sha": "41563fd6128e94e1fe1ae4006e4e183dff1a645c", "url": "https://api.github.com/repos/rust-lang/rust/commits/41563fd6128e94e1fe1ae4006e4e183dff1a645c", "html_url": "https://github.com/rust-lang/rust/commit/41563fd6128e94e1fe1ae4006e4e183dff1a645c"}], "stats": {"total": 103, "additions": 70, "deletions": 33}, "files": [{"sha": "6af0c59b8d190ae701a5c807a277d2c906533dab", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1e41f0f15fee02a73850db559752a9124d014/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1e41f0f15fee02a73850db559752a9124d014/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=a8f1e41f0f15fee02a73850db559752a9124d014", "patch": "@@ -487,36 +487,13 @@ impl<'a> InferenceContext<'a> {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n                 let substs = generics.type_params_subst(self.db);\n                 let ty = self.db.impl_self_ty(impl_id).substitute(&Interner, &substs);\n-                match unresolved {\n-                    None => {\n-                        let variant = ty_variant(&ty);\n-                        (ty, variant)\n-                    }\n-                    Some(1) => {\n-                        let segment = path.mod_path().segments().last().unwrap();\n-                        // this could be an enum variant or associated type\n-                        if let Some((AdtId::EnumId(enum_id), _)) = ty.as_adt() {\n-                            let enum_data = self.db.enum_data(enum_id);\n-                            if let Some(local_id) = enum_data.variant(segment) {\n-                                let variant = EnumVariantId { parent: enum_id, local_id };\n-                                return (ty, Some(variant.into()));\n-                            }\n-                        }\n-                        // FIXME potentially resolve assoc type\n-                        (self.err_ty(), None)\n-                    }\n-                    Some(_) => {\n-                        // FIXME diagnostic\n-                        (self.err_ty(), None)\n-                    }\n-                }\n+                self.resolve_variant_on_alias(ty, unresolved, path)\n             }\n             TypeNs::TypeAliasId(it) => {\n                 let ty = TyBuilder::def_ty(self.db, it.into())\n                     .fill(std::iter::repeat_with(|| self.table.new_type_var()))\n                     .build();\n-                let variant = ty_variant(&ty);\n-                forbid_unresolved_segments((ty, variant), unresolved)\n+                self.resolve_variant_on_alias(ty, unresolved, path)\n             }\n             TypeNs::AdtSelfType(_) => {\n                 // FIXME this could happen in array size expressions, once we're checking them\n@@ -543,16 +520,43 @@ impl<'a> InferenceContext<'a> {\n                 (TyKind::Error.intern(&Interner), None)\n             }\n         }\n+    }\n \n-        fn ty_variant(ty: &Ty) -> Option<VariantId> {\n-            ty.as_adt().and_then(|(adt_id, _)| match adt_id {\n-                AdtId::StructId(s) => Some(VariantId::StructId(s)),\n-                AdtId::UnionId(u) => Some(VariantId::UnionId(u)),\n-                AdtId::EnumId(_) => {\n-                    // FIXME Error E0071, expected struct, variant or union type, found enum `Foo`\n-                    None\n+    fn resolve_variant_on_alias(\n+        &mut self,\n+        ty: Ty,\n+        unresolved: Option<usize>,\n+        path: &Path,\n+    ) -> (Ty, Option<VariantId>) {\n+        match unresolved {\n+            None => {\n+                let variant = ty.as_adt().and_then(|(adt_id, _)| match adt_id {\n+                    AdtId::StructId(s) => Some(VariantId::StructId(s)),\n+                    AdtId::UnionId(u) => Some(VariantId::UnionId(u)),\n+                    AdtId::EnumId(_) => {\n+                        // FIXME Error E0071, expected struct, variant or union type, found enum `Foo`\n+                        None\n+                    }\n+                });\n+                (ty, variant)\n+            }\n+            Some(1) => {\n+                let segment = path.mod_path().segments().last().unwrap();\n+                // this could be an enum variant or associated type\n+                if let Some((AdtId::EnumId(enum_id), _)) = ty.as_adt() {\n+                    let enum_data = self.db.enum_data(enum_id);\n+                    if let Some(local_id) = enum_data.variant(segment) {\n+                        let variant = EnumVariantId { parent: enum_id, local_id };\n+                        return (ty, Some(variant.into()));\n+                    }\n                 }\n-            })\n+                // FIXME potentially resolve assoc type\n+                (self.err_ty(), None)\n+            }\n+            Some(_) => {\n+                // FIXME diagnostic\n+                (self.err_ty(), None)\n+            }\n         }\n     }\n "}, {"sha": "84c5c05fd30158eeeda19970aab3d48398171e4d", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1e41f0f15fee02a73850db559752a9124d014/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1e41f0f15fee02a73850db559752a9124d014/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=a8f1e41f0f15fee02a73850db559752a9124d014", "patch": "@@ -2564,3 +2564,36 @@ fn f() {\n     \"#,\n     )\n }\n+\n+#[test]\n+fn infer_type_alias_variant() {\n+    check_infer(\n+        r#\"\n+type Qux = Foo;\n+enum Foo {\n+    Bar(i32),\n+    Baz { baz: f32 }\n+}\n+\n+fn f() {\n+    match Foo::Bar(3) {\n+        Qux::Bar(bar) => (),\n+        Qux::Baz { baz } => (),\n+    }\n+}\n+    \"#,\n+        expect![[r#\"\n+            72..166 '{     ...   } }': ()\n+            78..164 'match ...     }': ()\n+            84..92 'Foo::Bar': Bar(i32) -> Foo\n+            84..95 'Foo::Bar(3)': Foo\n+            93..94 '3': i32\n+            106..119 'Qux::Bar(bar)': Foo\n+            115..118 'bar': i32\n+            123..125 '()': ()\n+            135..151 'Qux::B... baz }': Foo\n+            146..149 'baz': f32\n+            155..157 '()': ()\n+        \"#]],\n+    )\n+}"}]}