{"sha": "9c6f4b6d1d57ef53886034b91f46e09f892a2851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNmY0YjZkMWQ1N2VmNTM4ODYwMzRiOTFmNDZlMDlmODkyYTI4NTE=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T16:27:41Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T17:31:54Z"}, "message": "rustc: Add long diagnostics for E0297", "tree": {"sha": "c56ea79a8b94320775c57b54462670ed764c8688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56ea79a8b94320775c57b54462670ed764c8688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c6f4b6d1d57ef53886034b91f46e09f892a2851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6f4b6d1d57ef53886034b91f46e09f892a2851", "html_url": "https://github.com/rust-lang/rust/commit/9c6f4b6d1d57ef53886034b91f46e09f892a2851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c6f4b6d1d57ef53886034b91f46e09f892a2851/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47551b57456c108c69f698b114606a275fb01643", "url": "https://api.github.com/repos/rust-lang/rust/commits/47551b57456c108c69f698b114606a275fb01643", "html_url": "https://github.com/rust-lang/rust/commit/47551b57456c108c69f698b114606a275fb01643"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "63d10a837519571587f8ad83b62b93203e362c99", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9c6f4b6d1d57ef53886034b91f46e09f892a2851/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6f4b6d1d57ef53886034b91f46e09f892a2851/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=9c6f4b6d1d57ef53886034b91f46e09f892a2851", "patch": "@@ -112,6 +112,33 @@ reference when using guards or refactor the entire expression, perhaps by\n putting the condition inside the body of the arm.\n \"##,\n \n+E0297: r##\"\n+Patterns used to bind names must be irrefutable. That is, they must guarantee\n+that a name will be extracted in all cases. Instead of pattern matching the\n+loop variable, consider using a `match` or `if let` inside the loop body. For\n+instance:\n+\n+// This fails because `None` is not covered.\n+for Some(x) in xs {\n+    ...\n+}\n+\n+// Match inside the loop instead:\n+for item in xs {\n+    match item {\n+        Some(x) => ...\n+        None => ...\n+    }\n+}\n+\n+// Or use `if let`:\n+for item in xs {\n+    if let Some(x) = item {\n+        ...\n+    }\n+}\n+\"##,\n+\n E0303: r##\"\n In certain cases it is possible for sub-bindings to violate memory safety.\n Updates to the borrow checker in a future version of Rust may remove this\n@@ -194,7 +221,6 @@ register_diagnostics! {\n     E0284, // cannot resolve type\n     E0285, // overflow evaluation builtin bounds\n     E0296, // malformed recursion limit attribute\n-    E0297, // refutable pattern in for loop binding\n     E0298, // mismatched types between arms\n     E0299, // mismatched types between arms\n     E0300, // unexpanded macro"}]}