{"sha": "55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZjJkZTljZjFmZjQyMzhkZGM4NDdiODllMjc0MmIxYjgxNzEzZjM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-08T00:18:09Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-08T00:18:09Z"}, "message": "Merge pull request #84 from marcusklaas/tests\n\nImplement framework for system tests", "tree": {"sha": "c8cdfb23400f30c55d000c1de4c36a76cd3ff85a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8cdfb23400f30c55d000c1de4c36a76cd3ff85a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "html_url": "https://github.com/rust-lang/rust/commit/55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e572a2e1181533172934d158220cf27bbe9977", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e572a2e1181533172934d158220cf27bbe9977", "html_url": "https://github.com/rust-lang/rust/commit/98e572a2e1181533172934d158220cf27bbe9977"}, {"sha": "98c9c6e9ef758e3ec27131d7d35114135453fbef", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c9c6e9ef758e3ec27131d7d35114135453fbef", "html_url": "https://github.com/rust-lang/rust/commit/98c9c6e9ef758e3ec27131d7d35114135453fbef"}], "stats": {"total": 401, "additions": 262, "deletions": 139}, "files": [{"sha": "975888e0267beb2e6f4cd65845d825764a5a539c", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "patch": "@@ -3,6 +3,7 @@ name = \"rustfmt\"\n version = \"0.0.1\"\n dependencies = [\n  \"diff 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n  \"toml 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -13,6 +14,19 @@ name = \"diff\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"regex\"\n+version = \"0.1.33\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"regex-syntax 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustc-serialize\"\n version = \"0.3.14\""}, {"sha": "57c47fec54cd90cc637499533d95ead79f2027cc", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "patch": "@@ -19,3 +19,4 @@ rustc-serialize = \"0.3.14\"\n \n [dev-dependencies]\n diff = \"0.1.0\"\n+regex = \"0.1\""}, {"sha": "316ee8ae288d2e4a1bc94d8e931da965dc560c06", "filename": "tests/config/small_tabs.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "patch": "@@ -0,0 +1,11 @@\n+max_width = 100\n+ideal_width = 80\n+leeway = 5\n+tab_spaces = 2\n+newline_style = \"Unix\"\n+fn_brace_style = \"SameLineWhere\"\n+fn_return_indent = \"WithArgs\"\n+fn_args_paren_newline = true\n+struct_trailing_comma = true\n+struct_lit_trailing_comma = \"Vertical\"\n+enum_trailing_comma = true"}, {"sha": "50329b258d14ca907568e995ac11f5a2b10ad69b", "filename": "tests/idem.rs", "status": "removed", "additions": 0, "deletions": 134, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/98e572a2e1181533172934d158220cf27bbe9977/tests%2Fidem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e572a2e1181533172934d158220cf27bbe9977/tests%2Fidem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem.rs?ref=98e572a2e1181533172934d158220cf27bbe9977", "patch": "@@ -1,134 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(catch_panic)]\n-\n-extern crate rustfmt;\n-extern crate diff;\n-\n-use std::collections::HashMap;\n-use std::fs;\n-use std::io::Read;\n-use std::thread;\n-use rustfmt::*;\n-\n-// For now, the only supported regression tests are idempotent tests - the input and\n-// output must match exactly.\n-// FIXME(#28) would be good to check for error messages and fail on them, or at least report.\n-#[test]\n-fn idempotent_tests() {\n-    println!(\"Idempotent tests:\");\n-\n-    // Get all files in the tests/idem directory\n-    let files = fs::read_dir(\"tests/idem\").unwrap();\n-    let files = files.chain(fs::read_dir(\"tests\").unwrap());\n-    let files = files.chain(fs::read_dir(\"src/bin\").unwrap());\n-    // turn a DirEntry into a String that represents the relative path to the file\n-    let files = files.map(|e| e.unwrap().path().to_str().unwrap().to_owned());\n-    // hack because there's no `IntoIterator` impl for `[T; N]`\n-    let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n-\n-    // For each file, run rustfmt and collect the output\n-    let mut count = 0;\n-    let mut fails = 0;\n-    for file_name in files.filter(|f| f.ends_with(\".rs\")) {\n-        println!(\"Testing '{}'...\", file_name);\n-        match idempotent_check(file_name) {\n-            Ok(()) => {},\n-            Err(m) => {\n-                print_mismatches(m);\n-                fails += 1;\n-            },\n-        }\n-        count += 1;\n-    }\n-\n-    // Display results\n-    println!(\"Ran {} idempotent tests; {} failures.\", count, fails);\n-    assert!(fails == 0, \"{} idempotent tests failed\", fails);\n-}\n-\n-// Compare output to input.\n-fn print_mismatches(result: HashMap<String, String>) {\n-    for (_, fmt_text) in result {\n-        println!(\"{}\", fmt_text);\n-    }\n-}\n-\n-// Ick, just needed to get a &'static to handle_result.\n-static HANDLE_RESULT: &'static Fn(HashMap<String, String>) = &handle_result;\n-\n-pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, String>> {\n-    let args = vec![\"rustfmt\".to_owned(), filename];\n-    let mut def_config_file = fs::File::open(\"default.toml\").unwrap();\n-    let mut def_config = String::new();\n-    def_config_file.read_to_string(&mut def_config).unwrap();\n-    // this thread is not used for concurrency, but rather to workaround the issue that the passed\n-    // function handle needs to have static lifetime. Instead of using a global RefCell, we use\n-    // panic to return a result in case of failure. This has the advantage of smoothing the road to\n-    // multithreaded rustfmt\n-    thread::catch_panic(move || {\n-        run(args, WriteMode::Return(HANDLE_RESULT), &def_config);\n-    }).map_err(|any|\n-        *any.downcast().unwrap()\n-    )\n-}\n-\n-// Compare output to input.\n-fn handle_result(result: HashMap<String, String>) {\n-    let mut failures = HashMap::new();\n-\n-    for (file_name, fmt_text) in result {\n-        let mut f = fs::File::open(&file_name).unwrap();\n-        let mut text = String::new();\n-        // TODO: speedup by running through bytes iterator\n-        f.read_to_string(&mut text).unwrap();\n-        if fmt_text != text {\n-            let diff_str = make_diff(&file_name, &fmt_text, &text);\n-            failures.insert(file_name, diff_str);\n-        }\n-    }\n-    if !failures.is_empty() {\n-        panic!(failures);\n-    }\n-}\n-\n-\n-fn make_diff(file_name: &str, expected: &str, actual: &str) -> String {\n-    let mut line_number = 1;\n-    let mut prev_both = true;\n-    let mut text = String::new();\n-\n-    for result in diff::lines(expected, actual) {\n-        match result {\n-            diff::Result::Left(str) => {\n-                if prev_both {\n-                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n-                }\n-                text.push_str(&format!(\"-{}\u23ce\\n\", str));\n-                prev_both = false;\n-            }\n-            diff::Result::Right(str) => {\n-                if prev_both {\n-                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n-                }\n-                text.push_str(&format!(\"+{}\u23ce\\n\", str));\n-                prev_both = false;\n-                line_number += 1;\n-            }\n-            diff::Result::Both(..) => {\n-                line_number += 1;\n-                prev_both = true;\n-            }\n-        }\n-    }\n-\n-    text\n-}"}, {"sha": "593d943cbdbb383f1e34ee51f133c9f5c83cbdb8", "filename": "tests/idem/hello.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98e572a2e1181533172934d158220cf27bbe9977/tests%2Fidem%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e572a2e1181533172934d158220cf27bbe9977/tests%2Fidem%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fhello.rs?ref=98e572a2e1181533172934d158220cf27bbe9977", "patch": "@@ -1,5 +0,0 @@\n-// Smoke test - hello world.\n-\n-fn main() {\n-    println!(\"Hello world!\");\n-}"}, {"sha": "f892e6debb10d81831174f295e7177d73c37cdd9", "filename": "tests/source/hello.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fsource%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fsource%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fhello.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-config: small_tabs.toml\n+// rustfmt-target: hello.rs\n+\n+// Smoke test - hello world.\n+\n+fn main() { println!(\"Hello world!\"); }"}, {"sha": "48af7de3887474f0d9452370431940692284382c", "filename": "tests/source/hello2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fsource%2Fhello2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fsource%2Fhello2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fhello2.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-config: small_tabs.toml\n+// rustfmt-target: hello.rs\n+\n+// Smoke test - hello world.\n+\n+fn main( ) {\n+println!(\"Hello world!\");\n+}"}, {"sha": "1cdd43abbfa167eafae48565af4553217064daaa", "filename": "tests/system.rs", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "patch": "@@ -0,0 +1,214 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(catch_panic)]\n+\n+extern crate rustfmt;\n+extern crate diff;\n+extern crate regex;\n+\n+use std::collections::HashMap;\n+use std::fs;\n+use std::io::{self, Read, BufRead, BufReader};\n+use std::thread;\n+use rustfmt::*;\n+\n+fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n+    let path = dir_entry.ok().expect(\"Couldn't get DirEntry.\").path();\n+\n+    path.to_str().expect(\"Couldn't stringify path.\").to_owned()\n+}\n+\n+// For now, the only supported regression tests are idempotent tests - the input and\n+// output must match exactly.\n+// FIXME(#28) would be good to check for error messages and fail on them, or at least report.\n+#[test]\n+fn system_tests() {\n+    // Get all files in the tests/target directory\n+    let files = fs::read_dir(\"tests/target\").ok().expect(\"Couldn't read dir 1.\");\n+    let files = files.chain(fs::read_dir(\"tests\").ok().expect(\"Couldn't read dir 2.\"));\n+    let files = files.chain(fs::read_dir(\"src/bin\").ok().expect(\"Couldn't read dir 3.\"));\n+    // turn a DirEntry into a String that represents the relative path to the file\n+    let files = files.map(get_path_string);\n+    // hack because there's no `IntoIterator` impl for `[T; N]`\n+    let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n+\n+    let (count, fails) = check_files(files);\n+\n+    // Display results\n+    println!(\"Ran {} idempotent tests.\", count);\n+    assert!(fails == 0, \"{} idempotent tests failed\", fails);\n+\n+    // Get all files in the tests/source directory\n+    let files = fs::read_dir(\"tests/source\").ok().expect(\"Couldn't read dir 4.\");\n+    // turn a DirEntry into a String that represents the relative path to the file\n+    let files = files.map(get_path_string);\n+\n+    let (count, fails) = check_files(files);\n+\n+    // Display results\n+    println!(\"Ran {} system tests.\", count);\n+    assert!(fails == 0, \"{} system tests failed\", fails);\n+}\n+\n+// For each file, run rustfmt and collect the output.\n+// Returns the number of files checked and the number of failures.\n+fn check_files<I>(files: I) -> (u32, u32)\n+    where I: Iterator<Item = String>\n+{\n+    let mut count = 0;\n+    let mut fails = 0;\n+\n+    for file_name in files.filter(|f| f.ends_with(\".rs\")) {\n+        println!(\"Testing '{}'...\", file_name);\n+        match idempotent_check(file_name) {\n+            Ok(()) => {},\n+            Err(m) => {\n+                print_mismatches(m);\n+                fails += 1;\n+            },\n+        }\n+        count += 1;\n+    }\n+\n+    (count, fails)\n+}\n+\n+fn print_mismatches(result: HashMap<String, String>) {\n+    for (_, fmt_text) in result {\n+        println!(\"{}\", fmt_text);\n+    }\n+}\n+\n+// Ick, just needed to get a &'static to handle_result.\n+static HANDLE_RESULT: &'static Fn(HashMap<String, String>) = &handle_result;\n+\n+pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, String>> {\n+    let config = get_config(&filename);\n+    let args = vec![\"rustfmt\".to_owned(), filename];\n+    // this thread is not used for concurrency, but rather to workaround the issue that the passed\n+    // function handle needs to have static lifetime. Instead of using a global RefCell, we use\n+    // panic to return a result in case of failure. This has the advantage of smoothing the road to\n+    // multithreaded rustfmt\n+    thread::catch_panic(move || {\n+        run(args, WriteMode::Return(HANDLE_RESULT), &config);\n+    }).map_err(|any|\n+        *any.downcast().ok().expect(\"Downcast failed.\")\n+    )\n+}\n+\n+// Reads test config file from comments and loads it\n+fn get_config(file_name: &str) -> String {\n+    let config_file_name = read_significant_comment(file_name, \"config\")\n+        .map(|file_name| {\n+            let mut full_path = \"tests/config/\".to_owned();\n+            full_path.push_str(&file_name);\n+            full_path\n+        })\n+        .unwrap_or(\"default.toml\".to_owned());\n+\n+    let mut def_config_file = fs::File::open(config_file_name).ok().expect(\"Couldn't open config.\");\n+    let mut def_config = String::new();\n+    def_config_file.read_to_string(&mut def_config).ok().expect(\"Couldn't read config.\");\n+\n+    def_config\n+}\n+\n+fn read_significant_comment(file_name: &str, option: &str) -> Option<String> {\n+    let file = fs::File::open(file_name).ok().expect(\"Couldn't read file for comment.\");\n+    let reader = BufReader::new(file);\n+    let pattern = format!(\"^\\\\s*//\\\\s*rustfmt-{}:\\\\s*(\\\\S+)\", option);\n+    let regex = regex::Regex::new(&pattern).ok().expect(\"Failed creating pattern 1.\");\n+\n+    // matches exactly the lines containing significant comments or whitespace\n+    let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[:alpha:]+:\\s*\\S+)\")\n+        .ok().expect(\"Failed creating pattern 2.\");\n+\n+    reader.lines()\n+          .map(|line| line.ok().expect(\"Failed getting line.\"))\n+          .take_while(|line| line_regex.is_match(&line))\n+          .filter_map(|line| {\n+              regex.captures_iter(&line).next().map(|capture| {\n+                  capture.at(1).expect(\"Couldn't unwrap capture.\").to_owned()\n+              })\n+          })\n+          .next()\n+}\n+\n+// Compare output to input.\n+fn handle_result(result: HashMap<String, String>) {\n+    let mut failures = HashMap::new();\n+\n+    for (file_name, fmt_text) in result {\n+        // If file is in tests/source, compare to file with same name in tests/target\n+        let target_file_name = get_target(&file_name);\n+        let mut f = fs::File::open(&target_file_name).ok().expect(\"Couldn't open target.\");\n+\n+        let mut text = String::new();\n+        // TODO: speedup by running through bytes iterator\n+        f.read_to_string(&mut text).ok().expect(\"Failed reading target.\");\n+        if fmt_text != text {\n+            let diff_str = make_diff(&file_name, &fmt_text, &text);\n+            failures.insert(file_name, diff_str);\n+        }\n+    }\n+    if !failures.is_empty() {\n+        panic!(failures);\n+    }\n+}\n+\n+// Map source file paths to their target paths.\n+fn get_target(file_name: &str) -> String {\n+    if file_name.starts_with(\"tests/source/\") {\n+        let target = read_significant_comment(file_name, \"target\");\n+        let base = target.unwrap_or(file_name.trim_left_matches(\"tests/source/\").to_owned());\n+\n+        let mut target_file = \"tests/target/\".to_owned();\n+        target_file.push_str(&base);\n+\n+        target_file\n+    } else {\n+        file_name.to_owned()\n+    }\n+}\n+\n+// Produces a diff string between the expected output and actual output of\n+// rustfmt on a given file\n+fn make_diff(file_name: &str, expected: &str, actual: &str) -> String {\n+    let mut line_number = 1;\n+    let mut prev_both = true;\n+    let mut text = String::new();\n+\n+    for result in diff::lines(expected, actual) {\n+        match result {\n+            diff::Result::Left(str) => {\n+                if prev_both {\n+                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n+                }\n+                text.push_str(&format!(\"-{}\u23ce\\n\", str));\n+                prev_both = false;\n+            }\n+            diff::Result::Right(str) => {\n+                if prev_both {\n+                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n+                }\n+                text.push_str(&format!(\"+{}\u23ce\\n\", str));\n+                prev_both = false;\n+                line_number += 1;\n+            }\n+            diff::Result::Both(..) => {\n+                line_number += 1;\n+                prev_both = true;\n+            }\n+        }\n+    }\n+\n+    text\n+}"}, {"sha": "fe06195b154d3ad10fce6a766f35eaa7bd9aee88", "filename": "tests/target/attrib-extern-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fattrib-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fattrib-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib-extern-crate.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/attrib-extern-crate.rs"}, {"sha": "ee7da10081e2b49f8028dbc6f9e7d6bee0ca8566", "filename": "tests/target/attrib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/attrib.rs"}, {"sha": "748a6edb6ca12075fe139a0cc73e66933de4cb40", "filename": "tests/target/comments-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fcomments-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fcomments-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-fn.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/comments-fn.rs"}, {"sha": "b78f6d9ffc33e4e0325c5e08349d966fa4bdafbf", "filename": "tests/target/fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/fn.rs"}, {"sha": "d9f90b0b5e800460c9c4db9b3d8ac7dc69158995", "filename": "tests/target/hello.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhello.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-config: small_tabs.toml\n+// rustfmt-target: hello.rs\n+\n+// Smoke test - hello world.\n+\n+fn main() {\n+  println!(\"Hello world!\");\n+}"}, {"sha": "9644c62dde767b2bdeb31d50bf459704806751e0", "filename": "tests/target/imports.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/imports.rs"}, {"sha": "0e299aaecc15eba5e2ca4a5bc2de02d3d5036364", "filename": "tests/target/long-fn-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Flong-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Flong-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-fn-1.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/long-fn-1.rs"}, {"sha": "c6d5f355f61667cf2fdff9309ed923cf0b843c92", "filename": "tests/target/mod-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fmod-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fmod-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmod-1.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/mod-1.rs"}, {"sha": "9816988357582a4d9d407f892a7f74bff97baaad", "filename": "tests/target/paren.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fparen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fparen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fparen.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/paren.rs"}, {"sha": "bd5a132cced049965b0baf33ed7f716c93770988", "filename": "tests/target/skip.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/skip.rs"}, {"sha": "1d32171d7d095e562e2bba6ab59f11d1878db2e3", "filename": "tests/target/struct_lits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/struct_lits.rs"}, {"sha": "0852b5c31990adbdbf9e4f98528a5d5bfc51be92", "filename": "tests/target/structs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/structs.rs"}, {"sha": "8f7f4be67c9ba3044c6b50e6c3383a84c6a478d4", "filename": "tests/target/trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2de9cf1ff4238ddc847b89e2742b1b81713f3/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=55f2de9cf1ff4238ddc847b89e2742b1b81713f3", "previous_filename": "tests/idem/trait.rs"}]}