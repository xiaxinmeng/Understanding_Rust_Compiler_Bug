{"sha": "04079190835c04e8c671daef492144dfe06564ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDc5MTkwODM1YzA0ZThjNjcxZGFlZjQ5MjE0NGRmZTA2NTY0YWI=", "commit": {"author": {"name": "Andy Wang", "email": "qian.wang19@imperial.ac.uk", "date": "2021-04-10T12:48:06Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:10:57Z"}, "message": "Use RealFileName for Session::working_dir as it may also be remapped", "tree": {"sha": "eb1ae6913927e715446fdfd90a6d5de0062d8319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb1ae6913927e715446fdfd90a6d5de0062d8319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04079190835c04e8c671daef492144dfe06564ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSp3EACgkQGBtJ+fOP\nM3RQsgv8CCDdhGOkKuHOi9GI2lXTd3N/CPyzJlOXu7ceWALJ2Nc3BBPfksDiaY2B\nXx2L3xU1gqNvgB/iTfrKd6/k7CzJ50sgwXM//dhaDWUQ07Er37AnTnOkM5+OU4JH\noAn3JxxWLRYQwo0ua0Wkh4taVpS+/k4D8g7X0m5AafJgYvUEKzjPnt6+6trLncQF\npJimb+lBwR0vKorOq3vLi6lzzJGl2sjOx2ssHnAzYTmTw0qfpMm+uGWUlYWmPkOo\nSmnf+4S1b8gvskS+kzuuvIi4ph8FtKfNN4b3tB8wbvMx+h1xTZD4u8mrlIF+wbtJ\nD5wd9C4sC7E2yFHo7CSPqsRQYzxEzJuRYLlP8D6CD9yQumxF9lBx0cQCvvTN5Dc7\nDy9YTUIXErVgjwhrtEsqZOIkCZiWpMWqBq1/gcKIX26SjyrV6jjz80alYXJreae+\nwu3GKxo6ccFn40TbeXbB+ujvq/ZSUFZJcLwc4dLfn2ahJsrIV7DXXJMBk693wQ9R\nlNYGlZBe\n=XsKT\n-----END PGP SIGNATURE-----", "payload": "tree eb1ae6913927e715446fdfd90a6d5de0062d8319\nparent 9e0426d7842c4a603237789b59e6c491d2dd3b4a\nauthor Andy Wang <qian.wang19@imperial.ac.uk> 1618058886 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620223857 +0100\n\nUse RealFileName for Session::working_dir as it may also be remapped\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04079190835c04e8c671daef492144dfe06564ab", "html_url": "https://github.com/rust-lang/rust/commit/04079190835c04e8c671daef492144dfe06564ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04079190835c04e8c671daef492144dfe06564ab/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e0426d7842c4a603237789b59e6c491d2dd3b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0426d7842c4a603237789b59e6c491d2dd3b4a", "html_url": "https://github.com/rust-lang/rust/commit/9e0426d7842c4a603237789b59e6c491d2dd3b4a"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "10d3651789b3a0d0b9d0d5d2cd8835586f7f0721", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=04079190835c04e8c671daef492144dfe06564ab", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> DebugContext<'tcx> {\n         // FIXME: how to get version when building out of tree?\n         // Normally this would use option_env!(\"CFG_VERSION\").\n         let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n-        let comp_dir = tcx.sess.working_dir.0.to_string_lossy().into_owned();\n+        let comp_dir = tcx.sess.working_dir.stable_name().to_string_lossy().into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();"}, {"sha": "ccef95308500f346b74eaf55dfd262db28136678", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=04079190835c04e8c671daef492144dfe06564ab", "patch": "@@ -764,7 +764,7 @@ pub fn file_metadata(cx: &CodegenCx<'ll, '_>, source_file: &SourceFile) -> &'ll\n     let hash = Some(&source_file.src_hash);\n     let file_name = Some(source_file.name.to_string());\n     let directory = if source_file.is_real_file() && !source_file.is_imported() {\n-        Some(cx.sess().working_dir.0.to_string_lossy().to_string())\n+        Some(cx.sess().working_dir.stable_name().to_string_lossy().to_string())\n     } else {\n         // If the path comes from an upstream crate we assume it has been made\n         // independent of the compiler's working directory one way or another.\n@@ -992,7 +992,7 @@ pub fn compile_unit_metadata(\n     let producer = format!(\"clang LLVM ({})\", rustc_producer);\n \n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n-    let work_dir = tcx.sess.working_dir.0.to_string_lossy();\n+    let work_dir = tcx.sess.working_dir.stable_name().to_string_lossy();\n     let flags = \"\\0\";\n     let out_dir = &tcx.output_filenames(LOCAL_CRATE).out_directory;\n     let split_name = if tcx.sess.target_can_use_split_dwarf() {"}, {"sha": "9253f421cfe11ff944fe9aed79a3fed3f54f52ba", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=04079190835c04e8c671daef492144dfe06564ab", "patch": "@@ -469,7 +469,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let source_map = self.tcx.sess.source_map();\n         let all_source_files = source_map.files();\n \n-        let (working_dir, _cwd_remapped) = self.tcx.sess.working_dir.clone();\n+        let working_dir = self.tcx.sess.working_dir.stable_name();\n         // By replacing the `Option` with `None`, we ensure that we can't\n         // accidentally serialize any more `Span`s after the source map encoding\n         // is done."}, {"sha": "ab1b4db6293bd8526323dfbd2287a8aa1339798b", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=04079190835c04e8c671daef492144dfe06564ab", "patch": "@@ -190,7 +190,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         };\n \n         let data = CompilationOptions {\n-            directory: self.tcx.sess.working_dir.0.clone(),\n+            directory: self.tcx.sess.working_dir.stable_name().into(),\n             program,\n             arguments,\n             output: self.save_ctxt.compilation_output(crate_name),"}, {"sha": "bcda3a6d006f1f65f279cad6462b5badd027160d", "filename": "compiler/rustc_save_analysis/src/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs?ref=04079190835c04e8c671daef492144dfe06564ab", "patch": "@@ -26,7 +26,7 @@ impl<'a> SpanUtils<'a> {\n                         .display()\n                         .to_string()\n                 } else {\n-                    self.sess.working_dir.0.join(&path).display().to_string()\n+                    self.sess.working_dir.stable_name().join(&path).display().to_string()\n                 }\n             }\n             // If the file name was remapped, we assume the user"}, {"sha": "724ad35855e4798e0e75ef8dd6ca889e14f5ff2b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04079190835c04e8c671daef492144dfe06564ab/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=04079190835c04e8c671daef492144dfe06564ab", "patch": "@@ -23,8 +23,8 @@ use rustc_errors::registry::Registry;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_lint_defs::FutureBreakage;\n pub use rustc_span::crate_disambiguator::CrateDisambiguator;\n-use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n+use rustc_span::{edition::Edition, RealFileName};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n@@ -125,9 +125,8 @@ pub struct Session {\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n     pub local_crate_source_file: Option<PathBuf>,\n-    /// The directory the compiler has been executed in plus a flag indicating\n-    /// if the value stored here has been affected by path remapping.\n-    pub working_dir: (PathBuf, bool),\n+    /// The directory the compiler has been executed in\n+    pub working_dir: RealFileName,\n \n     /// Set of `(DiagnosticId, Option<Span>, message)` tuples tracking\n     /// (sub)diagnostics that have been set once, but should not be set again,\n@@ -1361,7 +1360,12 @@ pub fn build_session(\n     let working_dir = env::current_dir().unwrap_or_else(|e| {\n         parse_sess.span_diagnostic.fatal(&format!(\"Current directory is invalid: {}\", e)).raise()\n     });\n-    let working_dir = file_path_mapping.map_prefix(working_dir);\n+    let (path, remapped) = file_path_mapping.map_prefix(working_dir.clone());\n+    let working_dir = if remapped {\n+        RealFileName::Remapped { local_path: Some(working_dir), virtual_name: path }\n+    } else {\n+        RealFileName::LocalPath(path)\n+    };\n \n     let cgu_reuse_tracker = if sopts.debugging_opts.query_dep_graph {\n         CguReuseTracker::new()"}]}