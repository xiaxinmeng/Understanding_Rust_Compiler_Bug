{"sha": "555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWY1YTQ5YTI3YzcyZWVjMGFkMmQ3MmRlOGM4NDZhM2NiY2ZlMWU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-16T15:50:36Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-02T23:10:29Z"}, "message": "Test fixes", "tree": {"sha": "bea643afef343ea95d45078627956b2de85f4011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea643afef343ea95d45078627956b2de85f4011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "html_url": "https://github.com/rust-lang/rust/commit/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667223c35d9be21e91a9ffbe626213767c066dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/667223c35d9be21e91a9ffbe626213767c066dda", "html_url": "https://github.com/rust-lang/rust/commit/667223c35d9be21e91a9ffbe626213767c066dda"}], "stats": {"total": 110, "additions": 59, "deletions": 51}, "files": [{"sha": "69cd046a855e3112de5f3a9d29c292b49cf2a625", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -100,10 +100,7 @@ pub fn run(check: bool, verbose: bool) {\n }\n \n fn format_command(program: impl AsRef<OsStr>, dir: impl AsRef<Path>, args: &[impl AsRef<OsStr>]) -> String {\n-    let arg_display: Vec<_> = args\n-        .iter()\n-        .map(|a| escape(a.as_ref().to_string_lossy()).to_owned())\n-        .collect();\n+    let arg_display: Vec<_> = args.iter().map(|a| escape(a.as_ref().to_string_lossy())).collect();\n \n     format!(\n         \"cd {} && {} {}\","}, {"sha": "e65a4a9a40ac901c6e7c2381a10ddebeb6f22899", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -38,8 +38,7 @@ fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n \n     let cfg_mode = mode.parse().expect(\"Invalid mode\");\n     if let Ok(name) = var::<&str>(\"TESTNAME\") {\n-        let s: String = name.to_owned();\n-        config.filter = Some(s)\n+        config.filter = Some(name)\n     }\n \n     if rustc_test_suite().is_some() {"}, {"sha": "086548e58ed677b2ca1f85e53c925c956f39f0fc", "filename": "tests/ui/crashes/auxiliary/proc_macro_crash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -30,7 +30,7 @@ pub fn macro_test(input_stream: TokenStream) -> TokenStream {\n                 TokenTree::Ident(Ident::new(\"true\", Span::call_site())),\n                 TokenTree::Group(clause.clone()),\n                 TokenTree::Ident(Ident::new(\"else\", Span::call_site())),\n-                TokenTree::Group(clause.clone()),\n+                TokenTree::Group(clause),\n             ])\n         })),\n     ])"}, {"sha": "d435484d3e3d3f1a5e8cb864d17a7385f3548e6d", "filename": "tests/ui/escape_analysis.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,5 +1,10 @@\n #![feature(box_syntax)]\n-#![allow(clippy::borrowed_box, clippy::needless_pass_by_value, clippy::unused_unit)]\n+#![allow(\n+    clippy::borrowed_box,\n+    clippy::needless_pass_by_value,\n+    clippy::unused_unit,\n+    clippy::redundant_clone\n+)]\n #![warn(clippy::boxed_local)]\n \n #[derive(Clone)]"}, {"sha": "73fa9bfe19b5e4a2a6633372efa5dd23287a0e7b", "filename": "tests/ui/escape_analysis.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fescape_analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fescape_analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.stderr?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,19 +1,19 @@\n error: local variable doesn't need to be boxed here\n-  --> $DIR/escape_analysis.rs:34:13\n+  --> $DIR/escape_analysis.rs:39:13\n    |\n LL | fn warn_arg(x: Box<A>) {\n    |             ^\n    |\n    = note: `-D clippy::boxed-local` implied by `-D warnings`\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/escape_analysis.rs:125:12\n+  --> $DIR/escape_analysis.rs:130:12\n    |\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/escape_analysis.rs:165:23\n+  --> $DIR/escape_analysis.rs:170:23\n    |\n LL |     fn closure_borrow(x: Box<A>) {\n    |                       ^"}, {"sha": "2029c81d0d5aa7b9f40d267da2de7cfd0e5e832c", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n-#![allow(clippy::clone_on_copy)]\n+#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n "}, {"sha": "495c18f311f5cc2a59a5e87431995b786f02ea88", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n-#![allow(clippy::clone_on_copy)]\n+#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n "}, {"sha": "ca94daa24e84bdbb3c4e84e52811cfb49367fdd9", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -4,7 +4,8 @@\n     clippy::single_match,\n     clippy::redundant_pattern_matching,\n     clippy::many_single_char_names,\n-    clippy::option_option\n+    clippy::option_option,\n+    clippy::redundant_clone\n )]\n \n use std::borrow::Borrow;"}, {"sha": "5efeea0685c64e5e061a7eff21892d56f08fcef9", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,31 +1,31 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:16:23\n+  --> $DIR/needless_pass_by_value.rs:17:23\n    |\n LL | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n    |                       ^^^^^^ help: consider changing the type to: `&[T]`\n    |\n    = note: `-D clippy::needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:30:11\n+  --> $DIR/needless_pass_by_value.rs:31:11\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:30:22\n+  --> $DIR/needless_pass_by_value.rs:31:22\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:36:71\n+  --> $DIR/needless_pass_by_value.rs:37:71\n    |\n LL | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:48:18\n+  --> $DIR/needless_pass_by_value.rs:49:18\n    |\n LL | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,13 +36,13 @@ LL |     match *x {\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:61:24\n+  --> $DIR/needless_pass_by_value.rs:62:24\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:61:36\n+  --> $DIR/needless_pass_by_value.rs:62:36\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n@@ -55,19 +55,19 @@ LL |     let Wrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:77:49\n+  --> $DIR/needless_pass_by_value.rs:78:49\n    |\n LL | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:79:18\n+  --> $DIR/needless_pass_by_value.rs:80:18\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:79:29\n+  --> $DIR/needless_pass_by_value.rs:80:29\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n@@ -81,13 +81,13 @@ LL |     let _ = t.to_string();\n    |             ^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:79:40\n+  --> $DIR/needless_pass_by_value.rs:80:40\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:79:53\n+  --> $DIR/needless_pass_by_value.rs:80:53\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n@@ -101,61 +101,61 @@ LL |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:92:12\n+  --> $DIR/needless_pass_by_value.rs:93:12\n    |\n LL |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:93:12\n+  --> $DIR/needless_pass_by_value.rs:94:12\n    |\n LL |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:102:23\n+  --> $DIR/needless_pass_by_value.rs:103:23\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                       ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:102:30\n+  --> $DIR/needless_pass_by_value.rs:103:30\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                              ^^^^ help: consider taking a reference instead: `&Self`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:124:24\n+  --> $DIR/needless_pass_by_value.rs:125:24\n    |\n LL | fn bar_copy(x: u32, y: CopyWrapper) {\n    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:122:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:130:29\n+  --> $DIR/needless_pass_by_value.rs:131:29\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:122:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:130:45\n+  --> $DIR/needless_pass_by_value.rs:131:45\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                             ^^^^^^^^^^^\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:122:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -168,13 +168,13 @@ LL |     let CopyWrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:130:61\n+  --> $DIR/needless_pass_by_value.rs:131:61\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                                             ^^^^^^^^^^^\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:122:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -185,13 +185,13 @@ LL |     let CopyWrapper(s) = *z; // moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:142:40\n+  --> $DIR/needless_pass_by_value.rs:143:40\n    |\n LL | fn some_fun<'b, S: Bar<'b, ()>>(_item: S) {}\n    |                                        ^ help: consider taking a reference instead: `&S`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:147:20\n+  --> $DIR/needless_pass_by_value.rs:148:20\n    |\n LL | fn more_fun(_item: impl Club<'static, i32>) {}\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&impl Club<'static, i32>`"}, {"sha": "30f39e9b06398519302fc7a870da680f0fe5806b", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::many_single_char_names)]\n+#![allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;"}, {"sha": "57237c52e8c9a4f628a6a0753cd3eb0619842495", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -104,7 +104,7 @@ fn main() {\n     };\n     move_struct.ref_func();\n     move_struct.clone().mov_func_reuse();\n-    move_struct.clone().mov_func_no_use();\n+    move_struct.mov_func_no_use();\n \n     let so = SeemsOption::Some(45);\n     returns_something_similar_to_option(so);"}, {"sha": "b508c1ee0096479d62100acd4bfac92baed1528b", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::all)]\n-#![allow(clippy::blacklisted_name, clippy::no_effect, redundant_semicolon, unused_assignments)]\n+#![allow(\n+    clippy::blacklisted_name,\n+    clippy::no_effect,\n+    clippy::redundant_clone,\n+    redundant_semicolon,\n+    unused_assignments\n+)]\n \n struct Foo(u32);\n "}, {"sha": "b45187b5805015cc39c70a97dee9a613abf390a5", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,5 +1,5 @@\n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:27:5\n+  --> $DIR/swap.rs:33:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n@@ -9,23 +9,23 @@ LL | |     foo[1] = temp;\n    = note: `-D clippy::manual-swap` implied by `-D warnings`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:36:5\n+  --> $DIR/swap.rs:42:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:45:5\n+  --> $DIR/swap.rs:51:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:65:7\n+  --> $DIR/swap.rs:71:7\n    |\n LL |       ; let t = a;\n    |  _______^\n@@ -36,7 +36,7 @@ LL | |     b = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `c.0` and `a` manually\n-  --> $DIR/swap.rs:74:7\n+  --> $DIR/swap.rs:80:7\n    |\n LL |       ; let t = c.0;\n    |  _______^\n@@ -47,7 +47,7 @@ LL | |     a = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `a` and `b`\n-  --> $DIR/swap.rs:62:5\n+  --> $DIR/swap.rs:68:5\n    |\n LL | /     a = b;\n LL | |     b = a;\n@@ -57,7 +57,7 @@ LL | |     b = a;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `c.0` and `a`\n-  --> $DIR/swap.rs:71:5\n+  --> $DIR/swap.rs:77:5\n    |\n LL | /     c.0 = a;\n LL | |     a = c.0;"}, {"sha": "6dff8d87bae0df29acfe224711372217a6193176", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=555f5a49a27c72eec0ad2d72de8c846a3cbcfe1e", "patch": "@@ -1,7 +1,7 @@\n // does not test any rustfixable lints\n \n #![warn(clippy::clone_on_ref_ptr)]\n-#![allow(unused)]\n+#![allow(unused, clippy::redundant_clone)]\n \n use std::cell::RefCell;\n use std::rc::{self, Rc};"}]}