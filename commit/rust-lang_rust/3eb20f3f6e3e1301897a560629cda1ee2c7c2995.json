{"sha": "3eb20f3f6e3e1301897a560629cda1ee2c7c2995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYjIwZjNmNmUzZTEzMDE4OTdhNTYwNjI5Y2RhMWVlMmM3YzI5OTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-06T20:46:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-06T20:46:33Z"}, "message": "Correct signatures and arguments associated with call into vec_append_glue.", "tree": {"sha": "e4aa7cf7b7900271052f581e48e4ce03c7416a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4aa7cf7b7900271052f581e48e4ce03c7416a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb20f3f6e3e1301897a560629cda1ee2c7c2995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb20f3f6e3e1301897a560629cda1ee2c7c2995", "html_url": "https://github.com/rust-lang/rust/commit/3eb20f3f6e3e1301897a560629cda1ee2c7c2995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb20f3f6e3e1301897a560629cda1ee2c7c2995/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d97c800e3179604db82e35bff682ea1ed6ec3909", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97c800e3179604db82e35bff682ea1ed6ec3909", "html_url": "https://github.com/rust-lang/rust/commit/d97c800e3179604db82e35bff682ea1ed6ec3909"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "c30373e27eab3f1105e97ce0504d6c9b5852fc7d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3eb20f3f6e3e1301897a560629cda1ee2c7c2995/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb20f3f6e3e1301897a560629cda1ee2c7c2995/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3eb20f3f6e3e1301897a560629cda1ee2c7c2995", "patch": "@@ -321,6 +321,10 @@ fn T_vec(TypeRef t) -> TypeRef {\n                      ));\n }\n \n+fn T_opaque_vec_ptr() -> TypeRef {\n+    ret T_ptr(T_vec(T_int()));\n+}\n+\n fn T_str() -> TypeRef {\n     ret T_vec(T_i8());\n }\n@@ -2464,20 +2468,23 @@ fn trans_vec_append(@block_ctxt cx, @ty.t t,\n     auto llelt_tydesc = get_tydesc(bcx, elt_ty);\n     bcx = llelt_tydesc.bcx;\n \n-    ret res(cx, cx.build.FastCall(cx.fcx.ccx.glues.memcpy_glue,\n-                                  vec(cx.fcx.lltaskptr,\n-                                      llvec_tydesc.val,\n-                                      llelt_tydesc.val,\n-                                      lhs,\n-                                      load_scalar_or_boxed(cx, rhs, t),\n-                                      skip_null)));\n+    auto dst = bcx.build.PointerCast(lhs, T_ptr(T_opaque_vec_ptr()));\n+    auto src = bcx.build.PointerCast(rhs, T_opaque_vec_ptr());\n+\n+    ret res(bcx, bcx.build.FastCall(cx.fcx.ccx.glues.vec_append_glue,\n+                                    vec(cx.fcx.lltaskptr,\n+                                        llvec_tydesc.val,\n+                                        llelt_tydesc.val,\n+                                        dst, src, skip_null)));\n }\n \n fn trans_vec_add(@block_ctxt cx, @ty.t t,\n                  ValueRef lhs, ValueRef rhs) -> result {\n     auto r = alloc_ty(cx, t);\n-    r = copy_ty(r.bcx, INIT, r.val, lhs, t);\n-    ret trans_vec_append(r.bcx, t, lhs, rhs);\n+    auto tmp = r.val;\n+    find_scope_cx(cx).cleanups += clean(bind drop_ty(_, tmp, t));\n+    r = copy_ty(r.bcx, INIT, tmp, lhs, t);\n+    ret trans_vec_append(r.bcx, t, tmp, rhs);\n }\n \n \n@@ -5423,7 +5430,7 @@ fn make_vec_append_glue(ModuleRef llmod, type_names tn) -> ValueRef {\n      *      elements can be copied to a newly alloc'ed vec if one must be\n      *      created.\n      *\n-     *   3. Dst vec alias (i.e. ptr to ptr to rust_vec, we will mutate it).\n+     *   3. Dst vec ptr (i.e. ptr to ptr to rust_vec).\n      *\n      *   4. Src vec (i.e. ptr to rust_vec).\n      *\n@@ -5434,9 +5441,9 @@ fn make_vec_append_glue(ModuleRef llmod, type_names tn) -> ValueRef {\n     auto ty = T_fn(vec(T_taskptr(tn),\n                        T_ptr(T_tydesc(tn)),\n                        T_ptr(T_tydesc(tn)),\n-                       T_ptr(T_ptr(T_vec(T_int()))), // a lie.\n-                       T_ptr(T_vec(T_int())), // a lie.\n-                       T_bool()), T_void());\n+                       T_ptr(T_opaque_vec_ptr()),\n+                       T_opaque_vec_ptr(), T_bool()),\n+                   T_void());\n \n     auto llfn = decl_fastcall_fn(llmod, abi.vec_append_glue_name(), ty);\n     ret llfn;\n@@ -5488,10 +5495,8 @@ fn trans_vec_append_glue(@crate_ctxt cx) {\n                          vp2i(bcx, llvec_tydesc)));\n \n     bcx = llnew_vec_res.bcx;\n-    auto llnew_vec = vi2p(bcx,\n-                          llnew_vec_res.val,\n-                          T_ptr(T_vec(T_int())) // a lie.\n-                          );\n+    auto llnew_vec = vi2p(bcx, llnew_vec_res.val,\n+                          T_opaque_vec_ptr());\n \n \n     // FIXME: complete this."}]}