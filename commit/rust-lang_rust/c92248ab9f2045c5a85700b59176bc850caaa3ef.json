{"sha": "c92248ab9f2045c5a85700b59176bc850caaa3ef", "node_id": "C_kwDOAAsO6NoAKGM5MjI0OGFiOWYyMDQ1YzVhODU3MDBiNTkxNzZiYzg1MGNhYWEzZWY", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-08T19:12:56Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-13T22:27:18Z"}, "message": "Add bound_type_of", "tree": {"sha": "13b6f51702152182d42c42fcab77a2ca7273f7f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13b6f51702152182d42c42fcab77a2ca7273f7f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c92248ab9f2045c5a85700b59176bc850caaa3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c92248ab9f2045c5a85700b59176bc850caaa3ef", "html_url": "https://github.com/rust-lang/rust/commit/c92248ab9f2045c5a85700b59176bc850caaa3ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c92248ab9f2045c5a85700b59176bc850caaa3ef/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319575ae8c3f6ea5db1c850c8f4c786c8cc203fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/319575ae8c3f6ea5db1c850c8f4c786c8cc203fe", "html_url": "https://github.com/rust-lang/rust/commit/319575ae8c3f6ea5db1c850c8f4c786c8cc203fe"}], "stats": {"total": 173, "additions": 90, "deletions": 83}, "files": [{"sha": "0fcac9a1c6c7b8ddddcd2155aa912a5c2bf112b6", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -23,9 +23,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{\n-    self, EarlyBinder, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt,\n-};\n+use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n use std::iter;\n \n use crate::nll::ToRegionVid;\n@@ -479,7 +477,10 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     .infcx\n                     .tcx\n                     .mk_region(ty::ReVar(self.infcx.next_nll_region_var(FR).to_region_vid()));\n-                let va_list_ty = EarlyBinder(self.infcx.tcx.type_of(va_list_did))\n+                let va_list_ty = self\n+                    .infcx\n+                    .tcx\n+                    .bound_type_of(va_list_did)\n                     .subst(self.infcx.tcx, &[region.into()]);\n \n                 unnormalized_input_tys = self.infcx.tcx.mk_type_list("}, {"sha": "5ece19d7fb3d34ef843da492817fc9d1e43d447c", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -5,7 +5,6 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::TerminatorKind;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::EarlyBinder;\n use rustc_span::{Span, Symbol};\n \n use crate::interpret::{\n@@ -94,10 +93,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let col = if loc_details.column { Scalar::from_u32(col) } else { Scalar::from_u32(0) };\n \n         // Allocate memory for `CallerLocation` struct.\n-        let loc_ty = EarlyBinder(\n-            self.tcx.type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None)),\n-        )\n-        .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n+        let loc_ty = self\n+            .tcx\n+            .bound_type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n+            .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n         // This can fail if rustc runs out of memory right here. Trying to emit an error would be\n         // pointless, since that would require allocating more memory than a Location."}, {"sha": "4e6404035f42796569b447b3b6938ca106f48e6d", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -968,7 +968,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n                 GenericArgKind::Type(ty) => {\n-                    if EarlyBinder(self.tcx.type_of(def_id)).subst(self.tcx, substs) != ty {\n+                    if self.tcx.bound_type_of(def_id).subst(self.tcx, substs) != ty {\n                         break;\n                     }\n                 }"}, {"sha": "6ea831f255aba880917b76c49779c6202f2d8dd8", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -10,7 +10,7 @@ use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n-use crate::ty::{self, EarlyBinder, List, Ty, TyCtxt};\n+use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n \n use rustc_errors::ErrorGuaranteed;\n@@ -2387,7 +2387,7 @@ impl<'tcx> Operand<'tcx> {\n         substs: SubstsRef<'tcx>,\n         span: Span,\n     ) -> Self {\n-        let ty = EarlyBinder(tcx.type_of(def_id)).subst(tcx, substs);\n+        let ty = tcx.bound_type_of(def_id).subst(tcx, substs);\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,"}, {"sha": "c93b7a955022925bd0b01d2168dd9a2f8a7ac3b2", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -5,7 +5,7 @@\n \n use crate::mir::*;\n use crate::ty::subst::Subst;\n-use crate::ty::{self, EarlyBinder, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_target::abi::VariantIdx;\n \n@@ -203,7 +203,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n                 AggregateKind::Tuple => tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx))),\n                 AggregateKind::Adt(did, _, substs, _, _) => {\n-                    EarlyBinder(tcx.type_of(did)).subst(tcx, substs)\n+                    tcx.bound_type_of(did).subst(tcx, substs)\n                 }\n                 AggregateKind::Closure(did, substs) => tcx.mk_closure(did, substs),\n                 AggregateKind::Generator(did, substs, movability) => {"}, {"sha": "4821109ca45a5262694608d08d865421ce541835", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -19,11 +19,10 @@ use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, Substs\n use crate::ty::TyKind::*;\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n-    ClosureSizeProfileData, Const, ConstS, ConstVid, DefIdTree, EarlyBinder, ExistentialPredicate,\n-    FloatTy, FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid,\n-    List, ParamConst, ParamTy, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy,\n-    Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut,\n-    UintTy,\n+    ClosureSizeProfileData, Const, ConstS, ConstVid, DefIdTree, ExistentialPredicate, FloatTy,\n+    FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List,\n+    ParamConst, ParamTy, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy, Region,\n+    RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n };\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -1605,7 +1604,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn caller_location_ty(self) -> Ty<'tcx> {\n         self.mk_imm_ref(\n             self.lifetimes.re_static,\n-            EarlyBinder(self.type_of(self.require_lang_item(LangItem::PanicLocation, None)))\n+            self.bound_type_of(self.require_lang_item(LangItem::PanicLocation, None))\n                 .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n         )\n     }\n@@ -2334,7 +2333,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         ty_param.into()\n                     } else {\n                         assert!(has_default);\n-                        EarlyBinder(self.type_of(param.def_id)).subst(self, substs).into()\n+                        self.bound_type_of(param.def_id).subst(self, substs).into()\n                     }\n                 }\n             });"}, {"sha": "7b31abea449590b4e8f9e954cf3f88b11c06b1bf", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -1932,7 +1932,7 @@ impl<'tcx> FieldDef {\n     /// Returns the type of this field. The resulting type is not normalized. The `subst` is\n     /// typically obtained via the second field of [`TyKind::Adt`].\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        EarlyBinder(tcx.type_of(self.did)).subst(tcx, subst)\n+        tcx.bound_type_of(self.did).subst(tcx, subst)\n     }\n \n     /// Computes the `Ident` of this variant by looking up the `Span`"}, {"sha": "51cdd9c2d478016edc3d868c168278bf7048ceb4", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -115,12 +115,16 @@ pub trait Printer<'tcx>: Sized {\n \n             DefPathData::Impl => {\n                 let generics = self.tcx().generics_of(def_id);\n-                let mut self_ty = self.tcx().type_of(def_id);\n-                let mut impl_trait_ref = self.tcx().impl_trait_ref(def_id);\n-                if substs.len() >= generics.count() {\n-                    self_ty = EarlyBinder(self_ty).subst(self.tcx(), substs);\n-                    impl_trait_ref = EarlyBinder(impl_trait_ref).subst(self.tcx(), substs);\n-                }\n+                let self_ty = self.tcx().bound_type_of(def_id);\n+                let impl_trait_ref = self.tcx().impl_trait_ref(def_id);\n+                let (self_ty, impl_trait_ref) = if substs.len() >= generics.count() {\n+                    (\n+                        self_ty.subst(self.tcx(), substs),\n+                        EarlyBinder(impl_trait_ref).subst(self.tcx(), substs),\n+                    )\n+                } else {\n+                    (self_ty.0, impl_trait_ref)\n+                };\n                 self.print_impl_path(def_id, substs, self_ty, impl_trait_ref)\n             }\n \n@@ -203,8 +207,7 @@ pub trait Printer<'tcx>: Sized {\n                     has_default\n                         && substs[param.index as usize]\n                             == GenericArg::from(\n-                                EarlyBinder(self.tcx().type_of(param.def_id))\n-                                    .subst(self.tcx(), substs),\n+                                self.tcx().bound_type_of(param.def_id).subst(self.tcx(), substs),\n                             )\n                 }\n                 ty::GenericParamDefKind::Const { has_default } => {"}, {"sha": "8677405eebedac5aa8443288f05734b56e0865b0", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -7,7 +7,7 @@\n use crate::mir::interpret::{get_slice_bytes, ConstValue, GlobalAlloc, Scalar};\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n-use crate::ty::{self, EarlyBinder, ImplSubject, Term, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, ImplSubject, Term, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;\n@@ -159,8 +159,8 @@ pub fn relate_substs_with_variances<'tcx, R: TypeRelation<'tcx>>(\n     let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n         let variance = variances[i];\n         let variance_info = if variance == ty::Invariant {\n-            let ty = *cached_ty\n-                .get_or_insert_with(|| EarlyBinder(tcx.type_of(ty_def_id)).subst(tcx, a_subst));\n+            let ty =\n+                *cached_ty.get_or_insert_with(|| tcx.bound_type_of(ty_def_id).subst(tcx, a_subst));\n             ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n         } else {\n             ty::VarianceDiagInfo::default()"}, {"sha": "e93620f3510ffdeed7391c3149fb3fd7a8d985a4", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -2347,7 +2347,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n                 let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n-                (EarlyBinder(tcx.type_of(dyn_metadata)).subst(tcx, &[tail.into()]), false)\n+                (tcx.bound_type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n             },\n \n             // type parameters only have unit metadata if they're sized, so return true"}, {"sha": "b5162e3a93593bef961d818ddc083ea5cf8aa48b", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -592,6 +592,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         trace!(?expanded_type);\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n+\n+    pub fn bound_type_of(self, def_id: DefId) -> EarlyBinder<Ty<'tcx>> {\n+        EarlyBinder(self.type_of(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {\n@@ -623,8 +627,8 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n             let expanded_ty = match self.expanded_cache.get(&(def_id, substs)) {\n                 Some(expanded_ty) => *expanded_ty,\n                 None => {\n-                    let generic_ty = self.tcx.type_of(def_id);\n-                    let concrete_ty = EarlyBinder(generic_ty).subst(self.tcx, substs);\n+                    let generic_ty = self.tcx.bound_type_of(def_id);\n+                    let concrete_ty = generic_ty.subst(self.tcx, substs);\n                     let expanded_ty = self.fold_ty(concrete_ty);\n                     self.expanded_cache.insert((def_id, substs), expanded_ty);\n                     expanded_ty"}, {"sha": "d7993ce1cf4fa9c6ae27a2b072983d9387a1f17e", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::subst::{GenericArg, Subst};\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, adjustment::PointerCast, EarlyBinder, Ty, TyCtxt};\n+use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -834,8 +834,8 @@ fn trait_method<'tcx>(\n         .find(|item| item.kind == ty::AssocKind::Fn)\n         .expect(\"trait method not found\");\n \n-    let method_ty = tcx.type_of(item.def_id);\n-    let method_ty = EarlyBinder(method_ty).subst(tcx, substs);\n+    let method_ty = tcx.bound_type_of(item.def_id);\n+    let method_ty = method_ty.subst(tcx, substs);\n \n     ConstantKind::zero_sized(method_ty)\n }"}, {"sha": "b7e6180fc782f550e57ef909083efa4344011780", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n@@ -177,8 +177,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                 let ty = if fn_sig.c_variadic && index == fn_sig.inputs().len() {\n                     let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(arg.span));\n \n-                    EarlyBinder(tcx.type_of(va_list_did))\n-                        .subst(tcx, &[tcx.lifetimes.re_erased.into()])\n+                    tcx.bound_type_of(va_list_did).subst(tcx, &[tcx.lifetimes.re_erased.into()])\n                 } else {\n                     fn_sig.inputs()[index]\n                 };"}, {"sha": "b7dec57b75768e0dac9f3489c1f6f82b1dd37803", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -62,7 +62,7 @@ use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::GeneratorSubsts;\n-use rustc_middle::ty::{self, AdtDef, EarlyBinder, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_mir_dataflow::impls::{\n     MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n };\n@@ -245,7 +245,9 @@ impl<'tcx> TransformVisitor<'tcx> {\n     ) -> impl Iterator<Item = Statement<'tcx>> {\n         let kind = AggregateKind::Adt(self.state_adt_ref.did(), idx, self.state_substs, None, None);\n         assert_eq!(self.state_adt_ref.variant(idx).fields.len(), 1);\n-        let ty = EarlyBinder(self.tcx.type_of(self.state_adt_ref.variant(idx).fields[0].did))\n+        let ty = self\n+            .tcx\n+            .bound_type_of(self.state_adt_ref.variant(idx).fields[0].did)\n             .subst(self.tcx, self.state_substs);\n         expand_aggregate(\n             Place::return_place(),"}, {"sha": "f434b3e7c160a81f62ab794d58ad9fcf2a0347a4", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -135,7 +135,7 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n \n     let header = ty::ImplHeader {\n         impl_def_id,\n-        self_ty: EarlyBinder(tcx.type_of(impl_def_id)).subst(tcx, impl_substs),\n+        self_ty: tcx.bound_type_of(impl_def_id).subst(tcx, impl_substs),\n         trait_ref: EarlyBinder(tcx.impl_trait_ref(impl_def_id)).subst(tcx, impl_substs),\n         predicates: tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs).predicates,\n     };"}, {"sha": "004091661fa8c56759206389df6fac77331de0a3", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -515,8 +515,8 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                         }\n \n                         let substs = substs.super_fold_with(self);\n-                        let generic_ty = self.tcx().type_of(def_id);\n-                        let concrete_ty = EarlyBinder(generic_ty).subst(self.tcx(), substs);\n+                        let generic_ty = self.tcx().bound_type_of(def_id);\n+                        let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.depth += 1;\n                         let folded_ty = self.fold_ty(concrete_ty);\n                         self.depth -= 1;"}, {"sha": "6a81a7764afd9143047b90f89a9496c4a8e51898", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n use std::ops::ControlFlow;\n \n@@ -217,8 +217,8 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                             self.infcx.report_overflow_error(&obligation, true);\n                         }\n \n-                        let generic_ty = self.tcx().type_of(def_id);\n-                        let concrete_ty = EarlyBinder(generic_ty).subst(self.tcx(), substs);\n+                        let generic_ty = self.tcx().bound_type_of(def_id);\n+                        let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n                             bug!("}, {"sha": "fe80d02595a5346690b4f83fd2a9ea563b258b7a", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -1006,10 +1006,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // The last field of the structure has to exist and contain type/const parameters.\n                 let (tail_field, prefix_fields) =\n                     def.non_enum_variant().fields.split_last().ok_or(Unimplemented)?;\n-                let tail_field_ty = tcx.type_of(tail_field.did);\n+                let tail_field_ty = tcx.bound_type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                for arg in tail_field_ty.walk() {\n+                for arg in tail_field_ty.0.walk() {\n                     if let Some(i) = maybe_unsizing_param_idx(arg) {\n                         unsizing_params.insert(i);\n                     }\n@@ -1030,8 +1030,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 // Extract `TailField<T>` and `TailField<U>` from `Struct<T>` and `Struct<U>`.\n-                let source_tail = EarlyBinder(tail_field_ty).subst(tcx, substs_a);\n-                let target_tail = EarlyBinder(tail_field_ty).subst(tcx, substs_b);\n+                let source_tail = tail_field_ty.subst(tcx, substs_a);\n+                let target_tail = tail_field_ty.subst(tcx, substs_b);\n \n                 // Check that the source struct with the target's\n                 // unsizing parameters is equal to the target."}, {"sha": "70cb208b616ba34fbb402740f4928db44c2cfdb4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -1960,7 +1960,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // We can resolve the `impl Trait` to its concrete type,\n                 // which enforces a DAG between the functions requiring\n                 // the auto trait bounds in question.\n-                t.rebind(vec![EarlyBinder(self.tcx().type_of(def_id)).subst(self.tcx(), substs)])\n+                t.rebind(vec![self.tcx().bound_type_of(def_id).subst(self.tcx(), substs)])\n             }\n         }\n     }"}, {"sha": "31934c97168d62823c8cc1f080372e5c183d7231", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -464,7 +464,10 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let trait_item_id = assoc_item.trait_item_def_id.expect(\"assoc_ty with no trait version\");\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n         let binders = binders_for(self.interner, bound_vars);\n-        let ty = EarlyBinder(self.interner.tcx.type_of(def_id))\n+        let ty = self\n+            .interner\n+            .tcx\n+            .bound_type_of(def_id)\n             .subst(self.interner.tcx, bound_vars)\n             .lower_into(self.interner);\n "}, {"sha": "9ad44d14d61802e37e380508a1322cb3fbd5fcac", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -237,7 +237,7 @@ fn drop_tys_helper<'tcx>(\n             Ok(Vec::new())\n         } else {\n             let field_tys = adt_def.all_fields().map(|field| {\n-                let r = EarlyBinder(tcx.type_of(field.did)).subst(tcx, substs);\n+                let r = tcx.bound_type_of(field.did).subst(tcx, substs);\n                 debug!(\"drop_tys_helper: Subst into {:?} with {:?} gettng {:?}\", field, substs, r);\n                 r\n             });"}, {"sha": "23700e653e36a23359a66ebc382dd11183ec01f6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -444,7 +444,7 @@ pub fn conservative_is_privately_uninhabited_raw<'tcx>(\n             //     one uninhabited field.\n             def.variants().iter().all(|var| {\n                 var.fields.iter().any(|field| {\n-                    let ty = EarlyBinder(tcx.type_of(field.did)).subst(tcx, substs);\n+                    let ty = tcx.bound_type_of(field.did).subst(tcx, substs);\n                     tcx.conservative_is_privately_uninhabited(param_env.and(ty))\n                 })\n             })"}, {"sha": "36a0e29736008750b0e5c66af2619d33d65c8792", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, EarlyBinder, ParamEnv, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ParamEnv, ToPredicate, Ty, TyCtxt};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n@@ -171,7 +171,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(span));\n         let region = fcx.next_region_var(RegionVariableOrigin::MiscVariable(span));\n \n-        Some(EarlyBinder(tcx.type_of(va_list_did)).subst(tcx, &[region.into()]))\n+        Some(tcx.bound_type_of(va_list_did).subst(tcx, &[region.into()]))\n     } else {\n         None\n     };\n@@ -655,7 +655,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n-    let hidden_type = EarlyBinder(tcx.type_of(def_id)).subst(tcx, substs);\n+    let hidden_type = tcx.bound_type_of(def_id.to_def_id()).subst(tcx, substs);\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let defining_use_anchor = match *origin {"}, {"sha": "4b6c36e9dde7e70efea1068c2dbfcad467d573e8", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -1066,7 +1066,7 @@ crate fn compare_const_impl<'tcx>(\n \n         // Compute placeholder form of impl and trait const tys.\n         let impl_ty = tcx.type_of(impl_c.def_id);\n-        let trait_ty = EarlyBinder(tcx.type_of(trait_c.def_id)).subst(tcx, trait_to_impl_substs);\n+        let trait_ty = tcx.bound_type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n         let mut cause = ObligationCause::new(\n             impl_c_span,\n             impl_c_hir_id,"}, {"sha": "6207a61ca95f751bda915a9bbd65bb1f77c5ecd3", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -838,12 +838,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let def_kind = self.tcx.def_kind(def_id);\n \n         let item_ty = if let DefKind::Variant = def_kind {\n-            self.tcx.type_of(self.tcx.parent(def_id))\n+            self.tcx.bound_type_of(self.tcx.parent(def_id))\n         } else {\n-            self.tcx.type_of(def_id)\n+            self.tcx.bound_type_of(def_id)\n         };\n         let substs = self.infcx.fresh_substs_for_item(span, def_id);\n-        let ty = EarlyBinder(item_ty).subst(self.tcx, substs);\n+        let ty = item_ty.subst(self.tcx, substs);\n \n         self.write_resolution(hir_id, Ok((def_kind, def_id)));\n         self.add_required_obligations_with_code(\n@@ -1401,12 +1401,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // If we have a default, then we it doesn't matter that we're not\n                             // inferring the type arguments: we provide the default where any\n                             // is missing.\n-                            let default = tcx.type_of(param.def_id);\n+                            let default = tcx.bound_type_of(param.def_id);\n                             self.fcx\n-                                .normalize_ty(\n-                                    self.span,\n-                                    EarlyBinder(default).subst(tcx, substs.unwrap()),\n-                                )\n+                                .normalize_ty(self.span, default.subst(tcx, substs.unwrap()))\n                                 .into()\n                         } else {\n                             // If no type arguments were provided, we have to infer them."}, {"sha": "c291d841211d5aade4c468c62905e89e4af100a0", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, EarlyBinder, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n@@ -129,7 +129,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 ty::INNERMOST,\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(1), kind: ty::BrEnv },\n             ));\n-            let va_list_ty = EarlyBinder(tcx.type_of(did)).subst(tcx, &[region.into()]);\n+            let va_list_ty = tcx.bound_type_of(did).subst(tcx, &[region.into()]);\n             (tcx.mk_ref(env_region, ty::TypeAndMut { ty: va_list_ty, mutbl }), va_list_ty)\n         })\n     };"}, {"sha": "60f55b02fdfd06b9f8d4de6816190ad901ab9468", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -15,14 +15,14 @@ crate struct BlanketImplFinder<'a, 'tcx> {\n impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n     crate fn get_blanket_impls(&mut self, item_def_id: DefId) -> Vec<Item> {\n         let param_env = self.cx.tcx.param_env(item_def_id);\n-        let ty = self.cx.tcx.type_of(item_def_id);\n+        let ty = self.cx.tcx.bound_type_of(item_def_id);\n \n         trace!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         self.cx.with_all_traits(|cx, all_traits| {\n             for &trait_def_id in all_traits {\n                 if !cx.cache.access_levels.is_public(trait_def_id)\n-                    || cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n+                    || cx.generated_synthetics.get(&(ty.0, trait_def_id)).is_some()\n                 {\n                     continue;\n                 }\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     let is_param = matches!(trait_ref.self_ty().kind(), ty::Param(_));\n                     let may_apply = is_param && cx.tcx.infer_ctxt().enter(|infcx| {\n                         let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);\n-                        let ty = EarlyBinder(ty).subst(infcx.tcx, substs);\n+                        let ty = ty.subst(infcx.tcx, substs);\n                         let param_env = EarlyBinder(param_env).subst(infcx.tcx, substs);\n \n                         let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n@@ -99,7 +99,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    cx.generated_synthetics.insert((ty, trait_def_id));\n+                    cx.generated_synthetics.insert((ty.0, trait_def_id));\n \n                     impls.push(Item {\n                         name: None,\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             // FIXME(eddyb) compute both `trait_` and `for_` from\n                             // the post-inference `trait_ref`, as it's more accurate.\n                             trait_: Some(trait_ref.clean(cx)),\n-                            for_: ty.clean(cx),\n+                            for_: ty.0.clean(cx),\n                             items: cx.tcx\n                                 .associated_items(impl_def_id)\n                                 .in_definition_order()"}, {"sha": "530d6d4de35f1c2bceb58e92c6b8624c9db23c75", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -12,7 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ClosureKind, EarlyBinder, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ClosureKind, Ty, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, args);\n             let method_def_id = cx.typeck_results().type_dependent_def_id(body.value.hir_id).unwrap();\n             let substs = cx.typeck_results().node_substs(body.value.hir_id);\n-            let call_ty = EarlyBinder(cx.tcx.type_of(method_def_id)).subst(cx.tcx, substs);\n+            let call_ty = cx.tcx.bound_type_of(method_def_id).subst(cx.tcx, substs);\n             if check_sig(cx, closure_ty, call_ty);\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure\", |diag| {"}, {"sha": "9d8f8999ce409488a8c33f5c1c5a7dd0956a70a2", "filename": "src/tools/clippy/clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, EarlyBinder, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::iter;\n \n@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n             ExprKind::MethodCall(path, arguments, _) => {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n-                let method_type = EarlyBinder(cx.tcx.type_of(def_id)).subst(cx.tcx, substs);\n+                let method_type = cx.tcx.bound_type_of(def_id).subst(cx.tcx, substs);\n                 check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),"}, {"sha": "be6277332db4dbd5d7d9530388c36c62f46e4b13", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92248ab9f2045c5a85700b59176bc850caaa3ef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=c92248ab9f2045c5a85700b59176bc850caaa3ef", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::ty::is_c_void;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, IntTy, Ty, TypeAndMut, UintTy};\n+use rustc_middle::ty::{self, IntTy, Ty, TypeAndMut, UintTy};\n use rustc_span::Span;\n \n #[allow(clippy::too_many_lines)]\n@@ -307,7 +307,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     .non_enum_variant()\n                     .fields\n                     .iter()\n-                    .map(|f| EarlyBinder(cx.tcx.type_of(f.did)).subst(cx.tcx, substs));\n+                    .map(|f| cx.tcx.bound_type_of(f.did).subst(cx.tcx, substs));\n                 let Some(sized_ty) = iter.find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n                     return ReducedTy::TypeErasure;\n                 };"}]}