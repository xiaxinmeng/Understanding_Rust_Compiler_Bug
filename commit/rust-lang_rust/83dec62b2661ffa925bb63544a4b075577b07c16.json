{"sha": "83dec62b2661ffa925bb63544a4b075577b07c16", "node_id": "C_kwDOAAsO6NoAKDgzZGVjNjJiMjY2MWZmYTkyNWJiNjM1NDRhNGIwNzU1NzdiMDdjMTY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T08:52:31Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T08:52:31Z"}, "message": "Add a layout argument to `enforce_validity`.\n\nThis is in preparation of checking the validity only of certain types.", "tree": {"sha": "8967c0a1b462ed3c6579482489b27ce18e5b7ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8967c0a1b462ed3c6579482489b27ce18e5b7ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83dec62b2661ffa925bb63544a4b075577b07c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83dec62b2661ffa925bb63544a4b075577b07c16", "html_url": "https://github.com/rust-lang/rust/commit/83dec62b2661ffa925bb63544a4b075577b07c16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83dec62b2661ffa925bb63544a4b075577b07c16/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c47b8279b39e165dfebeb529eb6d92592e4f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c47b8279b39e165dfebeb529eb6d92592e4f8d", "html_url": "https://github.com/rust-lang/rust/commit/84c47b8279b39e165dfebeb529eb6d92592e4f8d"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "5675973df8cfb09cf1a8c8349b1274db5f3648d9", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=83dec62b2661ffa925bb63544a4b075577b07c16", "patch": "@@ -2,7 +2,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::{LangItem, CRATE_HIR_ID};\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::PointerArithmetic;\n-use rustc_middle::ty::layout::FnAbiOf;\n+use rustc_middle::ty::layout::{FnAbiOf, TyAndLayout};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::builtin::INVALID_ALIGNMENT;\n use std::borrow::Borrow;\n@@ -335,7 +335,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>, _layout: TyAndLayout<'tcx>) -> bool {\n         ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n     }\n "}, {"sha": "aca68dc454beeeb6c32e1790c2a9a4e724863b6c", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=83dec62b2661ffa925bb63544a4b075577b07c16", "patch": "@@ -8,6 +8,7 @@ use std::hash::Hash;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_middle::mir;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{Align, Size};\n@@ -145,8 +146,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         check: CheckAlignment,\n     ) -> InterpResult<'tcx, ()>;\n \n-    /// Whether to enforce the validity invariant\n-    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+    /// Whether to enforce the validity invariant for a specific layout.\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>, layout: TyAndLayout<'tcx>) -> bool;\n \n     /// Whether function calls should be [ABI](CallAbi)-checked.\n     fn enforce_abi(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "ff6db143ddfd974979fb1efac580cebf064e13c5", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=83dec62b2661ffa925bb63544a4b075577b07c16", "patch": "@@ -461,7 +461,7 @@ where\n     ) -> InterpResult<'tcx> {\n         self.write_immediate_no_validate(src, dest)?;\n \n-        if M::enforce_validity(self) {\n+        if M::enforce_validity(self, dest.layout) {\n             // Data got changed, better make sure it matches the type!\n             self.validate_operand(&self.place_to_op(dest)?)?;\n         }\n@@ -616,7 +616,7 @@ where\n     ) -> InterpResult<'tcx> {\n         self.copy_op_no_validate(src, dest, allow_transmute)?;\n \n-        if M::enforce_validity(self) {\n+        if M::enforce_validity(self, dest.layout) {\n             // Data got changed, better make sure it matches the type!\n             self.validate_operand(&self.place_to_op(dest)?)?;\n         }"}, {"sha": "a735dcec2d2ffbd83e4a61d4c792a09c1da31250", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=83dec62b2661ffa925bb63544a4b075577b07c16", "patch": "@@ -174,7 +174,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>, _layout: TyAndLayout<'tcx>) -> bool {\n         false // for now, we don't enforce validity\n     }\n     fn alignment_check_failed("}, {"sha": "a7218a4f2500d97b91792b6a19facbc446943257", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83dec62b2661ffa925bb63544a4b075577b07c16/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=83dec62b2661ffa925bb63544a4b075577b07c16", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::*;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, ValueOrPlace};\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n@@ -548,7 +549,7 @@ impl<'mir, 'tcx> rustc_const_eval::interpret::Machine<'mir, 'tcx> for DummyMachi\n         unimplemented!()\n     }\n \n-    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>, _layout: TyAndLayout<'tcx>) -> bool {\n         unimplemented!()\n     }\n     fn alignment_check_failed("}, {"sha": "cc1964de332c2183daeed04465116d58f5a5e164", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83dec62b2661ffa925bb63544a4b075577b07c16/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83dec62b2661ffa925bb63544a4b075577b07c16/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=83dec62b2661ffa925bb63544a4b075577b07c16", "patch": "@@ -812,7 +812,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n+    fn enforce_validity(ecx: &MiriInterpCx<'mir, 'tcx>, _layout: TyAndLayout<'tcx>) -> bool {\n         ecx.machine.validate\n     }\n "}]}