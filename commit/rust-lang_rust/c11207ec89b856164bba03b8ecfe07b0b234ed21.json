{"sha": "c11207ec89b856164bba03b8ecfe07b0b234ed21", "node_id": "C_kwDOAAsO6NoAKGMxMTIwN2VjODliODU2MTY0YmJhMDNiOGVjZmUwN2IwYjIzNGVkMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T16:47:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T16:47:36Z"}, "message": "Auto merge of #99764 - matthiaskrgr:rollup-fawyb3m, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #99235 (rustdoc: Add support for `#[rustc_must_implement_one_of]`)\n - #99716 (remove useless mut from examples)\n - #99724 (Fix some broken link fragments.)\n - #99729 (Remove unused tuple fields)\n - #99757 (Make `transmute_copy` docs read better)\n - #99758 (remove useless `#[allow]` in a test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a48271db603732855a230a2d9c99945a2a02b248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48271db603732855a230a2d9c99945a2a02b248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c11207ec89b856164bba03b8ecfe07b0b234ed21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c11207ec89b856164bba03b8ecfe07b0b234ed21", "html_url": "https://github.com/rust-lang/rust/commit/c11207ec89b856164bba03b8ecfe07b0b234ed21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c11207ec89b856164bba03b8ecfe07b0b234ed21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b31839b624345d59fda6e595b9abae71fcea13", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b31839b624345d59fda6e595b9abae71fcea13", "html_url": "https://github.com/rust-lang/rust/commit/c9b31839b624345d59fda6e595b9abae71fcea13"}, {"sha": "8e5bc0635464f55b624955804897b71fcedf3d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5bc0635464f55b624955804897b71fcedf3d24", "html_url": "https://github.com/rust-lang/rust/commit/8e5bc0635464f55b624955804897b71fcedf3d24"}], "stats": {"total": 116, "additions": 66, "deletions": 50}, "files": [{"sha": "39faed0bf365cbbb8a9e772fb5c5c7484b0f994f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -2412,9 +2412,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         #[derive(Debug)]\n         enum SubOrigin<'hir> {\n             GAT(&'hir hir::Generics<'hir>),\n-            Impl(&'hir hir::Generics<'hir>),\n-            Trait(&'hir hir::Generics<'hir>),\n-            Fn(&'hir hir::Generics<'hir>),\n+            Impl,\n+            Trait,\n+            Fn,\n             Unknown,\n         }\n         let sub_origin = 'origin: {\n@@ -2429,34 +2429,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                         kind: hir::ImplItemKind::TyAlias(..),\n                                         generics,\n                                         ..\n-                                    }) => SubOrigin::GAT(generics),\n-                                    Node::ImplItem(hir::ImplItem {\n-                                        kind: hir::ImplItemKind::Fn(..),\n-                                        generics,\n-                                        ..\n-                                    }) => SubOrigin::Fn(generics),\n-                                    Node::TraitItem(hir::TraitItem {\n+                                    })\n+                                    | Node::TraitItem(hir::TraitItem {\n                                         kind: hir::TraitItemKind::Type(..),\n                                         generics,\n                                         ..\n                                     }) => SubOrigin::GAT(generics),\n-                                    Node::TraitItem(hir::TraitItem {\n-                                        kind: hir::TraitItemKind::Fn(..),\n-                                        generics,\n+                                    Node::ImplItem(hir::ImplItem {\n+                                        kind: hir::ImplItemKind::Fn(..),\n                                         ..\n-                                    }) => SubOrigin::Fn(generics),\n-                                    Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Trait(_, _, generics, _, _),\n+                                    })\n+                                    | Node::TraitItem(hir::TraitItem {\n+                                        kind: hir::TraitItemKind::Fn(..),\n                                         ..\n-                                    }) => SubOrigin::Trait(generics),\n+                                    })\n+                                    | Node::Item(hir::Item {\n+                                        kind: hir::ItemKind::Fn(..), ..\n+                                    }) => SubOrigin::Fn,\n                                     Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Impl(hir::Impl { generics, .. }),\n+                                        kind: hir::ItemKind::Trait(..),\n                                         ..\n-                                    }) => SubOrigin::Impl(generics),\n+                                    }) => SubOrigin::Trait,\n                                     Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Fn(_, generics, _),\n-                                        ..\n-                                    }) => SubOrigin::Fn(generics),\n+                                        kind: hir::ItemKind::Impl(..), ..\n+                                    }) => SubOrigin::Impl,\n                                     _ => continue,\n                                 };\n                             }"}, {"sha": "e955a1798b73563199056b85371e71c56ed16475", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         let crate_root = self.r.resolve_crate_root(source.ident);\n                         let crate_name = match crate_root.kind {\n                             ModuleKind::Def(.., name) => name,\n-                            ModuleKind::Block(..) => unreachable!(),\n+                            ModuleKind::Block => unreachable!(),\n                         };\n                         // HACK(eddyb) unclear how good this is, but keeping `$crate`\n                         // in `source` breaks `src/test/ui/imports/import-crate-var.rs`,\n@@ -936,7 +936,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         if self.block_needs_anonymous_module(block) {\n             let module = self.r.new_module(\n                 Some(parent),\n-                ModuleKind::Block(block.id),\n+                ModuleKind::Block,\n                 expansion.to_expn_id(),\n                 block.span,\n                 parent.no_implicit_prelude,"}, {"sha": "0343e8d9b8ec34f5ac8181d90480f79f0e2a09a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -163,7 +163,7 @@ impl<'a> Resolver<'a> {\n \n         let container = match parent.kind {\n             ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id()),\n-            ModuleKind::Block(..) => \"block\",\n+            ModuleKind::Block => \"block\",\n         };\n \n         let old_noun = match old_binding.is_import() {"}, {"sha": "6e6782881427b678e1ecc863a7bd31524dba17eb", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -218,7 +218,7 @@ impl<'a> Resolver<'a> {\n             return Some((self.expn_def_scope(ctxt.remove_mark()), None));\n         }\n \n-        if let ModuleKind::Block(..) = module.kind {\n+        if let ModuleKind::Block = module.kind {\n             return Some((module.parent.unwrap().nearest_item_scope(), None));\n         }\n \n@@ -333,7 +333,7 @@ impl<'a> Resolver<'a> {\n             };\n \n             match module.kind {\n-                ModuleKind::Block(..) => {} // We can see through blocks\n+                ModuleKind::Block => {} // We can see through blocks\n                 _ => break,\n             }\n "}, {"sha": "6b49c6b1ac63eeaeb66086678a5c6e06d302791e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -1444,7 +1444,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     // Items from this module\n                     self.r.add_module_candidates(module, &mut names, &filter_fn);\n \n-                    if let ModuleKind::Block(..) = module.kind {\n+                    if let ModuleKind::Block = module.kind {\n                         // We can see through blocks\n                     } else {\n                         // Items from the prelude"}, {"sha": "31d10008efbfbe8b9278f8c66c4cf356df41d73c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -437,7 +437,7 @@ enum ModuleKind {\n     ///     f(); // Resolves to (1)\n     /// }\n     /// ```\n-    Block(NodeId),\n+    Block,\n     /// Any module with a name.\n     ///\n     /// This could be:\n@@ -454,7 +454,7 @@ impl ModuleKind {\n     /// Get name of the module.\n     pub fn name(&self) -> Option<Symbol> {\n         match self {\n-            ModuleKind::Block(..) => None,\n+            ModuleKind::Block => None,\n             ModuleKind::Def(.., name) => Some(*name),\n         }\n     }\n@@ -530,7 +530,7 @@ impl<'a> ModuleData<'a> {\n     ) -> Self {\n         let is_foreign = match kind {\n             ModuleKind::Def(_, def_id, _) => !def_id.is_local(),\n-            ModuleKind::Block(_) => false,\n+            ModuleKind::Block => false,\n         };\n         ModuleData {\n             parent,"}, {"sha": "234fa213da89f4ee3101d15cd4d5a4752e7ab329", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -1000,7 +1000,7 @@ pub fn copy<T: Copy>(x: &T) -> T {\n ///\n /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]\n /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way\n-/// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also\n+/// that is correct even when `&U` has stricter alignment requirements than `&T`). It will also\n /// unsafely create a copy of the contained value instead of moving out of `src`.\n ///\n /// It is not a compile-time error if `T` and `U` have different sizes, but it"}, {"sha": "96addbd1a0558c5273c2a3a2bf55a27c62d8411f", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -898,7 +898,7 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// fn main() -> io::Result<()> {\n-    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let f = File::open(\"foo.txt\")?;\n     ///\n     ///     for byte in f.bytes() {\n     ///         println!(\"{}\", byte.unwrap());\n@@ -932,8 +932,8 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// fn main() -> io::Result<()> {\n-    ///     let mut f1 = File::open(\"foo.txt\")?;\n-    ///     let mut f2 = File::open(\"bar.txt\")?;\n+    ///     let f1 = File::open(\"foo.txt\")?;\n+    ///     let f2 = File::open(\"bar.txt\")?;\n     ///\n     ///     let mut handle = f1.chain(f2);\n     ///     let mut buffer = String::new();\n@@ -973,7 +973,7 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// fn main() -> io::Result<()> {\n-    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let f = File::open(\"foo.txt\")?;\n     ///     let mut buffer = [0; 5];\n     ///\n     ///     // read at most five bytes"}, {"sha": "9438948af544a86a22fac07b7d79b87b2777ce97", "filename": "src/doc/rustdoc/src/deprecated-features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Fdoc%2Frustdoc%2Fsrc%2Fdeprecated-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Fdoc%2Frustdoc%2Fsrc%2Fdeprecated-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdeprecated-features.md?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -10,4 +10,4 @@ change in any release.\n \n In the past the most common use case for customizing passes was to omit the `strip-private` pass.\n You can do this more easily, and without risk of the pass being changed, by passing\n-[`--document-private-items`](./unstable-features.md#--document-private-items).\n+[`--document-private-items`](command-line-arguments.md#--document-private-items-show-items-that-are-not-public)."}, {"sha": "32b350074903e14e24e62212020e052c18be7183", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -466,7 +466,7 @@ Note that the third item is the crate root, which in this case is undocumented.\n and is also accepted on stable toolchains.\n \n It can also be used with `--show-coverage`. Take a look at its\n-[documentation](#--show-coverage-get-statistics-about-code-documentation-coverage) for more\n+[documentation](#--show-coverage-calculate-the-percentage-of-items-with-documentation) for more\n information.\n \n ### `--enable-per-target-ignores`: allow `ignore-foo` style filters for doctests"}, {"sha": "07237438a0d3267697a2f754d4fbe369e1bd0b93", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -1993,6 +1993,7 @@ fn clean_maybe_renamed_item<'tcx>(\n             ItemKind::Trait(_, _, generics, bounds, item_ids) => {\n                 let items =\n                     item_ids.iter().map(|ti| cx.tcx.hir().trait_item(ti.id).clean(cx)).collect();\n+\n                 TraitItem(Trait {\n                     def_id,\n                     items,"}, {"sha": "dcd2eaac7ea60e346071aa940e860d6e8200839d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -1,9 +1,5 @@\n use clean::AttributesExt;\n \n-use std::cmp::Ordering;\n-use std::fmt;\n-use std::rc::Rc;\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n@@ -15,6 +11,9 @@ use rustc_middle::ty::{Adt, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n+use std::cmp::Ordering;\n+use std::fmt;\n+use std::rc::Rc;\n \n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_section,\n@@ -37,6 +36,7 @@ use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n use crate::html::url_parts_builder::UrlPartsBuilder;\n \n use askama::Template;\n+use itertools::Itertools;\n \n const ITEM_TABLE_OPEN: &str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &str = \"</div>\";\n@@ -539,6 +539,8 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n     let count_types = required_types.len() + provided_types.len();\n     let count_consts = required_consts.len() + provided_consts.len();\n     let count_methods = required_methods.len() + provided_methods.len();\n+    let must_implement_one_of_functions =\n+        cx.tcx().trait_def(t.def_id).must_implement_one_of.clone();\n \n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n@@ -784,13 +786,22 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n     }\n \n     // Output the documentation for each function individually\n-    if !required_methods.is_empty() {\n+    if !required_methods.is_empty() || must_implement_one_of_functions.is_some() {\n         write_small_section_header(\n             w,\n             \"required-methods\",\n             \"Required Methods\",\n             \"<div class=\\\"methods\\\">\",\n         );\n+\n+        if let Some(list) = must_implement_one_of_functions.as_deref() {\n+            write!(\n+                w,\n+                \"<div class=\\\"stab must_implement\\\">At least one of the `{}` methods is required.</div>\",\n+                list.iter().join(\"`, `\")\n+            );\n+        }\n+\n         for m in required_methods {\n             trait_item(w, cx, m, it);\n         }"}, {"sha": "c42cac59bd6fa36f43bf262b9ae74b15478d91da", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -205,11 +205,13 @@ details.rustdoc-toggle > summary::before {\n \n /* Created this empty rule to satisfy the theme checks. */\n .stab.empty-impl {}\n+.stab.must_implement {}\n \n .stab.unstable,\n .stab.deprecated,\n .stab.portability,\n-.stab.empty-impl {\n+.stab.empty-impl,\n+.stab.must_implement {\n \tcolor: #c5c5c5;\n \tbackground: #314559 !important;\n \tborder-style: none !important;"}, {"sha": "62d9eaa02e6a7e645b8969972c1d199e087b6f81", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -180,6 +180,7 @@ details.rustdoc-toggle > summary::before {\n .stab.empty-impl { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n .stab.deprecated { background: #ffc4c4; border-color: #db7b7b; color: #2f2f2f; }\n+.stab.must_implement { background: #F3DFFF; border-color: #b07bdb; color: #2f2f2f; }\n .stab.portability { background: #F3DFFF; border-color: #b07bdb; color: #2f2f2f; }\n .stab.portability > code { background: none; }\n "}, {"sha": "b751acff152cb4b2863fcd600999bc4c57728033", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -163,6 +163,7 @@ details.rustdoc-toggle > summary::before {\n .stab.empty-impl { background: #FFF5D6; border-color: #FFC600; }\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n .stab.deprecated { background: #ffc4c4; border-color: #db7b7b; }\n+.stab.must_implement { background: #F3DFFF; border-color: #b07bdb; }\n .stab.portability { background: #F3DFFF; border-color: #b07bdb; }\n .stab.portability > code { background: none; }\n "}, {"sha": "1f1dd5d5796ee9ca015a899b01229bc21e6f9775", "filename": "src/test/rustdoc/must_implement_one_of.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Ftest%2Frustdoc%2Fmust_implement_one_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Ftest%2Frustdoc%2Fmust_implement_one_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmust_implement_one_of.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -0,0 +1,10 @@\n+#![crate_name = \"c\"]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_must_implement_one_of(a, b)]\n+// @matches c/trait.Trait.html '//*[@class=\"stab must_implement\"]' \\\n+//      'At least one of the `a`, `b` methods is required.$'\n+pub trait Trait {\n+    fn a() {}\n+    fn b() {}\n+}"}, {"sha": "a1ae9a36bc1d728f6ae99d9bad3727d48b70204a", "filename": "src/test/ui/issues/issue-30371.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unreachable_code)]\n-#![allow(unused_mut)] // rust-lang/rust#54586\n #![deny(unused_variables)]\n \n fn main() {"}, {"sha": "a7c78d80ccd768d1cd0484bed46b93a997040cb5", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11207ec89b856164bba03b8ecfe07b0b234ed21/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=c11207ec89b856164bba03b8ecfe07b0b234ed21", "patch": "@@ -348,11 +348,6 @@ impl Checker {\n                     return;\n                 }\n \n-                // These appear to be broken in mdbook right now?\n-                if fragment.starts_with('-') {\n-                    return;\n-                }\n-\n                 parse_ids(&mut target_ids.borrow_mut(), &pretty_path, target_source, report);\n \n                 if target_ids.borrow().contains(*fragment) {"}]}