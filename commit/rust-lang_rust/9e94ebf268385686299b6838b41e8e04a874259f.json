{"sha": "9e94ebf268385686299b6838b41e8e04a874259f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTRlYmYyNjgzODU2ODYyOTliNjgzOGI0MWU4ZTA0YTg3NDI1OWY=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-03T05:55:30Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-03T05:55:30Z"}, "message": "Make sure the documentation compiles", "tree": {"sha": "4011322a6248c72539e05e0fe24ed97bb8cc9ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4011322a6248c72539e05e0fe24ed97bb8cc9ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e94ebf268385686299b6838b41e8e04a874259f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e94ebf268385686299b6838b41e8e04a874259f", "html_url": "https://github.com/rust-lang/rust/commit/9e94ebf268385686299b6838b41e8e04a874259f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e94ebf268385686299b6838b41e8e04a874259f/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377bbfe96b9d5f20ca6aec84f68ad8161f307ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5", "html_url": "https://github.com/rust-lang/rust/commit/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5"}], "stats": {"total": 169, "additions": 92, "deletions": 77}, "files": [{"sha": "ce87bd3ba326ccf9234a5bd5d35663a5b2b78999", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 92, "deletions": 77, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/9e94ebf268385686299b6838b41e8e04a874259f/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e94ebf268385686299b6838b41e8e04a874259f/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9e94ebf268385686299b6838b41e8e04a874259f", "patch": "@@ -287,12 +287,12 @@ extern \"rust-intrinsic\" {\n     ///\n     /// ```\n     /// // assuming that T and U are the same size\n-    /// fn transmute<T, U>(t: T) -> U {\n-    ///     let u: U = std::mem::uninitialized();\n+    /// unsafe fn transmute<T, U>(t: T) -> U {\n+    ///     let u: U = mem::uninitialized();\n     ///     std::ptr::copy_nonoverlapping(&t as *const T as *const u8,\n     ///                                   &mut u as *mut U as *mut u8,\n-    ///                                   std::mem::size_of::<T>());\n-    ///     std::mem::forget(t);\n+    ///                                   mem::size_of::<T>());\n+    ///     mem::forget(t);\n     ///     u\n     /// }\n     /// ```\n@@ -314,76 +314,85 @@ extern \"rust-intrinsic\" {\n     /// use std::mem;\n     ///\n     /// // turning a pointer into a usize\n-    /// let ptr = &0;\n-    /// let ptr_num_transmute = std::mem::transmute::<&i32, usize>(ptr);\n-    /// // Use `as` casts instead\n-    /// let ptr_num_cast = ptr as *const i32 as usize;\n-    ///\n+    /// {\n+    ///     let ptr = &0;\n+    ///     let ptr_num_transmute = mem::transmute::<&i32, usize>(ptr);\n+    ///     // Use `as` casts instead\n+    ///     let ptr_num_cast = ptr as *const i32 as usize;\n+    /// }\n     ///\n     /// // Turning a *mut T into an &mut T\n-    /// let ptr: *mut i32 = &mut 0;\n-    /// let ref_transmuted = std::mem::transmute::<*mut i32, &mut i32>(ptr);\n-    /// // Use reborrows\n-    /// let ref_casted = &mut *ptr;\n-    ///\n+    /// {\n+    ///     let ptr: *mut i32 = &mut 0;\n+    ///     let ref_transmuted = mem::transmute::<*mut i32, &mut i32>(ptr);\n+    ///     // Use reborrows\n+    ///     let ref_casted = &mut *ptr;\n+    /// }\n     ///\n     /// // Turning an &mut T into an &mut U\n-    /// let ptr = &mut 0;\n-    /// let val_transmuted = std::mem::transmute::<&mut i32, &mut u32>(ptr);\n-    /// // Now let's put together `as` and reborrowing\n-    /// let val_casts = &mut *(ptr as *mut i32 as *mut u32);\n-    ///\n+    /// {\n+    ///     let ptr = &mut 0;\n+    ///     let val_transmuted = mem::transmute::<&mut i32, &mut u32>(ptr);\n+    ///     // Now let's put together `as` and reborrowing\n+    ///     let val_casts = &mut *(ptr as *mut i32 as *mut u32);\n+    /// }\n     ///\n     /// // Turning an `&str` into an `&[u8]`\n-    /// // this is not a good way to do this.\n-    /// let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n-    /// assert_eq!(slice, [82, 117, 115, 116]);\n-    /// // You could use `str::as_bytes`\n-    /// let slice = \"Rust\".as_bytes();\n-    /// assert_eq!(slice, [82, 117, 115, 116]);\n-    /// // Or, just use a byte string, if you have control over the string\n-    /// // literal\n-    /// assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n-    ///\n+    /// {\n+    ///     // this is not a good way to do this.\n+    ///     let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n+    ///     assert_eq!(slice, [82, 117, 115, 116]);\n+    ///     // You could use `str::as_bytes`\n+    ///     let slice = \"Rust\".as_bytes();\n+    ///     assert_eq!(slice, [82, 117, 115, 116]);\n+    ///     // Or, just use a byte string, if you have control over the string\n+    ///     // literal\n+    ///     assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n+    /// }\n     ///\n     /// // Turning a Vec<&T> into a Vec<Option<&T>>\n-    /// let store = [0, 1, 2, 3];\n-    /// let v_orig = store.iter().collect::<Vec<&i32>>();\n-    /// // Using transmute; Undefined Behavior\n-    /// let v_transmuted = mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n-    ///     v_orig);\n-    /// // The suggested, safe way\n-    /// let v_collected = v_orig.into_iter()\n-    ///                         .map(|r| Some(r))\n-    ///                         .collect::<Vec<Option<&i32>>>();\n-    /// // The no-copy, unsafe way, still using transmute, but not UB\n-    /// let v_no_copy = Vec::from_raw_parts(v_orig.as_mut_ptr(),\n-    ///                                     v_orig.len(),\n-    ///                                     v_orig.capacity());\n-    /// mem::forget(v_orig);\n-    /// // This is equivalent to the original, but safer, and reuses the same\n-    /// // Vec internals. Therefore the new inner type must have the exact same\n-    /// // size, and the same or lesser alignment, as the old type.\n-    /// // The same caveats exist for this method as transmute, for the original\n-    /// // inner type (`&i32`) to the converted inner type (`Option<&i32>`), so\n-    /// // read the nomicon page linked above.\n+    /// {\n+    ///     let store = [0, 1, 2, 3];\n+    ///     let v_orig = store.iter().collect::<Vec<&i32>>();\n+    ///     // Using transmute; Undefined Behavior\n+    ///     let v_transmuted = mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n+    ///         v_orig.clone());\n+    ///     // The suggested, safe way\n+    ///     let v_collected = v_orig.clone()\n+    ///                             .into_iter()\n+    ///                             .map(|r| Some(r))\n+    ///                             .collect::<Vec<Option<&i32>>>();\n+    ///     // The no-copy, unsafe way, still using transmute, but not UB\n+    ///     // This is equivalent to the original, but safer, and reuses the\n+    ///     // same Vec internals. Therefore the new inner type must have the\n+    ///     // exact same size, and the same or lesser alignment, as the old\n+    ///     // type. The same caveats exist for this method as transmute, for\n+    ///     // the original inner type (`&i32`) to the converted inner type\n+    ///     // (`Option<&i32>`), so read the nomicon page linked above.\n+    ///     let v_no_copy = Vec::from_raw_parts(v_orig.as_mut_ptr(),\n+    ///                                         v_orig.len(),\n+    ///                                         v_orig.capacity());\n+    ///     mem::forget(v_orig);\n+    /// }\n     ///\n     ///\n     /// // Copying an `&mut T` to reslice:\n-    /// fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n+    /// {\n+    ///     fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n+    ///                                  -> (&mut [T], &mut [T]) {\n+    ///         let len = slice.len();\n+    ///         assert!(index < len);\n+    ///         let slice2 = mem::transmute::<&mut [T], &mut [T]>(slice);\n+    ///         (slice[0..index], slice2[index..len])\n+    ///     }\n+    ///     // Again, use `as` and reborrowing\n+    ///     fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n     ///                              -> (&mut [T], &mut [T]) {\n-    ///     let len = slice.len();\n-    ///     assert!(index < len);\n-    ///     let slice2 = std::mem::transmute::<&mut [T], &mut [T]>(slice);\n-    ///     (slice[0..index], slice2[index..len])\n-    /// }\n-    /// // Again, use `as` and reborrowing\n-    /// fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n-    ///                          -> (&mut [T], &mut [T]) {\n-    ///     let len = slice.len();\n-    ///     assert!(index < len);\n-    ///     let slice2 = &mut *(slice as *mut [T]); // actually typesafe!\n-    ///     (slice[0..index], slice2[index..len])\n+    ///         let len = slice.len();\n+    ///         assert!(index < len);\n+    ///         let slice2 = &mut *(slice as *mut [T]); // actually typesafe!\n+    ///         (slice[0..index], slice2[index..len])\n+    ///     }\n     /// }\n     /// ```\n     ///\n@@ -393,27 +402,33 @@ extern \"rust-intrinsic\" {\n     ///\n     /// ```\n     /// // getting the bitpattern of a floating point type\n-    /// let x = std::mem::transmute::<f32, u32>(0.0/0.0)\n+    /// {\n+    ///     let x = mem::transmute::<f32, u32>(0.0/0.0)\n+    /// }\n     ///\n     ///\n     /// // turning a pointer into a function pointer\n-    /// // in file.c: `int foo(void) { ... }`\n-    /// let handle: *mut libc::c_void = libc::dlopen(\n-    ///     b\"file.so\\0\".as_ptr() as *const libc::c_char, libc::RTLD_LAZY);\n-    /// let foo: *mut libc::c_void = libc::dlsym(\n-    ///     handle,\n-    ///     b\"foo\\0\".as_ptr() as *const libc::c_char);\n-    /// let foo = std::mem::transmute::<*mut libc::c_void,\n-    ///                                 extern fn() -> libc::c_int>(foo);\n-    /// println!(\"{}\", foo());\n+    /// {\n+    ///     // in file.c: `int foo(void) { ... }`\n+    ///     let handle: *mut libc::c_void = libc::dlopen(\n+    ///         b\"file.so\\0\".as_ptr() as *const libc::c_char, libc::RTLD_LAZY);\n+    ///     let foo: *mut libc::c_void = libc::dlsym(\n+    ///         handle,\n+    ///         b\"foo\\0\".as_ptr() as *const libc::c_char);\n+    ///     let foo = mem::transmute::<*mut libc::c_void,\n+    ///                                     extern fn() -> libc::c_int>(foo);\n+    ///     println!(\"{}\", foo());\n+    /// }\n     ///\n     ///\n     /// // extending an invariant lifetime; this is advanced, very unsafe rust\n-    /// struct T<'a>(&'a i32);\n-    /// let value = 0;\n-    /// let t = T::new(&value);\n-    /// let ptr = &mut t;\n-    /// let ptr_extended = std::mem::transmute::<&mut T, &mut T<'static>>(ptr);\n+    /// {\n+    ///     struct T<'a>(&'a i32);\n+    ///     let value = 0;\n+    ///     let t = T::new(&value);\n+    ///     let ptr = &mut t;\n+    ///     let ptr_extended = mem::transmute::<&mut T, &mut T<'static>>(ptr);\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn transmute<T, U>(e: T) -> U;"}]}