{"sha": "8823634db8c4ee65b4a3d47ccb1d81891e33d0de", "node_id": "C_kwDOAAsO6NoAKDg4MjM2MzRkYjhjNGVlNjViNGEzZDQ3Y2NiMWQ4MTg5MWUzM2QwZGU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-07T22:05:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-13T17:46:01Z"}, "message": "Manually cleanup token stream when macro expansion aborts.", "tree": {"sha": "5ca7c1ad571ba288dcf120ffa2546a5be2d7e99a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca7c1ad571ba288dcf120ffa2546a5be2d7e99a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8823634db8c4ee65b4a3d47ccb1d81891e33d0de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8823634db8c4ee65b4a3d47ccb1d81891e33d0de", "html_url": "https://github.com/rust-lang/rust/commit/8823634db8c4ee65b4a3d47ccb1d81891e33d0de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8823634db8c4ee65b4a3d47ccb1d81891e33d0de/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "url": "https://api.github.com/repos/rust-lang/rust/commits/5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "html_url": "https://github.com/rust-lang/rust/commit/5338f5f1d4ad9c99706e5cb691f8d5bbac341262"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "34021c40ba967b08fae9c2eb34c5868e91383b4d", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8823634db8c4ee65b4a3d47ccb1d81891e33d0de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823634db8c4ee65b4a3d47ccb1d81891e33d0de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=8823634db8c4ee65b4a3d47ccb1d81891e33d0de", "patch": "@@ -442,23 +442,38 @@ fn make_token_stream(\n         }\n         token_and_spacing = iter.next();\n     }\n-    let mut final_buf = stack.pop().expect(\"Missing final buf!\");\n-    if break_last_token {\n-        let last_token = final_buf.inner.pop().unwrap();\n-        if let AttrTokenTree::Token(last_token, spacing) = last_token {\n-            let unglued_first = last_token.kind.break_two_token_op().unwrap().0;\n-\n-            // An 'unglued' token is always two ASCII characters\n-            let mut first_span = last_token.span.shrink_to_lo();\n-            first_span = first_span.with_hi(first_span.lo() + rustc_span::BytePos(1));\n-\n-            final_buf\n+    while let Some(FrameData { open_delim_sp, mut inner }) = stack.pop() {\n+        // A former macro expansion could give us malformed tokens.\n+        // In that case, manually close all open delimitors so downstream users\n+        // don't ICE on them.\n+        if let Some((delim, open_sp)) = open_delim_sp {\n+            let dspan = DelimSpan::from_pair(open_sp, rustc_span::DUMMY_SP);\n+            let stream = AttrTokenStream::new(inner);\n+            let delimited = AttrTokenTree::Delimited(dspan, delim, stream);\n+            stack\n+                .last_mut()\n+                .unwrap_or_else(|| panic!(\"Bottom token frame is missing for recovered token\"))\n                 .inner\n-                .push(AttrTokenTree::Token(Token::new(unglued_first, first_span), spacing));\n+                .push(delimited);\n         } else {\n-            panic!(\"Unexpected last token {:?}\", last_token)\n+            if break_last_token {\n+                let last_token = inner.pop().unwrap();\n+                if let AttrTokenTree::Token(last_token, spacing) = last_token {\n+                    let unglued_first = last_token.kind.break_two_token_op().unwrap().0;\n+\n+                    // An 'unglued' token is always two ASCII characters\n+                    let mut first_span = last_token.span.shrink_to_lo();\n+                    first_span = first_span.with_hi(first_span.lo() + rustc_span::BytePos(1));\n+\n+                    inner\n+                        .push(AttrTokenTree::Token(Token::new(unglued_first, first_span), spacing));\n+                } else {\n+                    panic!(\"Unexpected last token {:?}\", last_token)\n+                }\n+            }\n+            assert!(stack.is_empty(), \"Stack should be empty: stack={:?}\", stack);\n+            return AttrTokenStream::new(inner);\n         }\n     }\n-    assert!(stack.is_empty(), \"Stack should be empty: final_buf={:?} stack={:?}\", final_buf, stack);\n-    AttrTokenStream::new(final_buf.inner)\n+    panic!(\"Missing final buf!\")\n }"}, {"sha": "2b2eec047058f6ad69f6a85a2c913ff3629734be", "filename": "src/test/ui/macros/syntax-error-recovery.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8823634db8c4ee65b4a3d47ccb1d81891e33d0de/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823634db8c4ee65b4a3d47ccb1d81891e33d0de/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.rs?ref=8823634db8c4ee65b4a3d47ccb1d81891e33d0de", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! values {\n+    ($($token:ident($value:literal) $(as $inner:ty)? => $attr:meta,)*) => {\n+        #[derive(Debug)]\n+        pub enum TokenKind {\n+            $(\n+                #[$attr]\n+                $token $($inner)? = $value,\n+            )*\n+        }\n+    };\n+}\n+//~^^^^^ ERROR expected one of `(`, `,`, `=`, `{`, or `}`, found `(String)`\n+//~| ERROR macro expansion ignores token `(String)` and any following\n+\n+values!(STRING(1) as (String) => cfg(test),);\n+\n+fn main() {}"}, {"sha": "1d9ce110d7b6e3ee13eb4ef049888c3bcf66ad39", "filename": "src/test/ui/macros/syntax-error-recovery.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8823634db8c4ee65b4a3d47ccb1d81891e33d0de/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8823634db8c4ee65b4a3d47ccb1d81891e33d0de/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr?ref=8823634db8c4ee65b4a3d47ccb1d81891e33d0de", "patch": "@@ -0,0 +1,24 @@\n+error: expected one of `(`, `,`, `=`, `{`, or `}`, found `(String)`\n+  --> $DIR/syntax-error-recovery.rs:7:26\n+   |\n+LL |                 $token $($inner)? = $value,\n+   |                          ^^^^^^ expected one of `(`, `,`, `=`, `{`, or `}`\n+...\n+LL | values!(STRING(1) as (String) => cfg(test),);\n+   | -------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `values` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: macro expansion ignores token `(String)` and any following\n+  --> $DIR/syntax-error-recovery.rs:7:26\n+   |\n+LL |                 $token $($inner)? = $value,\n+   |                          ^^^^^^\n+...\n+LL | values!(STRING(1) as (String) => cfg(test),);\n+   | -------------------------------------------- caused by the macro expansion here\n+   |\n+   = note: the usage of `values!` is likely invalid in item context\n+\n+error: aborting due to 2 previous errors\n+"}]}