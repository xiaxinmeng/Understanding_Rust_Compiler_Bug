{"sha": "7e603d4e3b2551608a225e115da4e83559b94761", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjAzZDRlM2IyNTUxNjA4YTIyNWUxMTVkYTRlODM1NTliOTQ3NjE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-10-21T14:51:59Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-10-21T15:42:29Z"}, "message": "Implement `From<Cow<str>> for String` and `From<Cow<[T]>> for Vec<T>`.\n\nMotivation: the `selectors` crate is generic over a string type,\nin order to support all of `String`, `string_cache::Atom`, and\n`gecko_string_cache::Atom`. Multiple trait bounds are used\nfor the various operations done with these strings.\nOne of these operations is creating a string (as efficiently as possible,\nre-using an existing memory allocation if possible) from `Cow<str>`.\n\nThe `std::convert::From` trait seems natural for this, but\nthe relevant implementation was missing before this PR.\nTo work around this I\u2019ve added a `FromCowStr` trait in `selectors`,\nbut with trait coherence that means one of `selectors` or `string_cache`\nneeds to depend on the other to implement this trait.\nUsing a trait from `std` would solve this.\n\nThe `Vec<T>` implementation is just added for consistency.\nI also tried a more general\n`impl<'a, O, B: ?Sized + ToOwned<Owned=O>> From<Cow<'a, B>> for O`,\nbut (the compiler thinks?) it conflicts with `From<T> for T` the impl\n(after moving all of `collections::borrow` into `core::borrow`\nto work around trait coherence).", "tree": {"sha": "9bb200cfcbad55de7f3ed5bc539d96fa7dc103f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb200cfcbad55de7f3ed5bc539d96fa7dc103f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e603d4e3b2551608a225e115da4e83559b94761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e603d4e3b2551608a225e115da4e83559b94761", "html_url": "https://github.com/rust-lang/rust/commit/7e603d4e3b2551608a225e115da4e83559b94761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e603d4e3b2551608a225e115da4e83559b94761/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5b6467c33f7f86b4964b08b37726f7611a8f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5b6467c33f7f86b4964b08b37726f7611a8f0c", "html_url": "https://github.com/rust-lang/rust/commit/da5b6467c33f7f86b4964b08b37726f7611a8f0c"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "ce9fec32917242d7b5549e4dc666ce6b81381153", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=7e603d4e3b2551608a225e115da4e83559b94761", "patch": "@@ -1860,6 +1860,13 @@ impl<'a> From<&'a str> for String {\n     }\n }\n \n+#[stable(feature = \"string_from_cow_str\", since = \"1.14.0\")]\n+impl<'a> From<Cow<'a, str>> for String {\n+    fn from(s: Cow<'a, str>) -> String {\n+        s.into_owned()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for Cow<'a, str> {\n     #[inline]"}, {"sha": "f7c3e8ea1ede49e329a6c0c9a0a4deeb908e978f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7e603d4e3b2551608a225e115da4e83559b94761", "patch": "@@ -1764,6 +1764,13 @@ impl<'a, T: Clone> From<&'a [T]> for Vec<T> {\n     }\n }\n \n+#[stable(feature = \"vec_from_cow_slice\", since = \"1.14.0\")]\n+impl<'a, T> From<Cow<'a, [T]>> for Vec<T> where [T]: ToOwned<Owned=Vec<T>> {\n+    fn from(s: Cow<'a, [T]>) -> Vec<T> {\n+        s.into_owned()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for Vec<u8> {\n     fn from(s: &'a str) -> Vec<u8> {"}, {"sha": "98de33bdaa8e14d587708ba710a5bd605b49ee1e", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=7e603d4e3b2551608a225e115da4e83559b94761", "patch": "@@ -35,6 +35,12 @@ fn test_from_str() {\n     assert_eq!(owned.as_ref().map(|s| &**s), Some(\"string\"));\n }\n \n+#[test]\n+fn test_from_cow_str() {\n+    assert_eq!(String::from(Cow::Borrowed(\"string\")), \"string\");\n+    assert_eq!(String::from(Cow::Owned(String::from(\"string\"))), \"string\");\n+}\n+\n #[test]\n fn test_unsized_to_string() {\n     let s: &str = \"abc\";"}, {"sha": "9a04673d1da0d5b1835d658f9cf0234bc2a655dc", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e603d4e3b2551608a225e115da4e83559b94761/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=7e603d4e3b2551608a225e115da4e83559b94761", "patch": "@@ -597,6 +597,14 @@ fn test_cow_from() {\n     }\n }\n \n+#[test]\n+fn test_from_cow() {\n+    let borrowed: &[_] = &[\"borrowed\", \"(slice)\"];\n+    let owned = vec![\"owned\", \"(vec)\"];\n+    assert_eq!(Vec::from(Cow::Borrowed(borrowed)), vec![\"borrowed\", \"(slice)\"]);\n+    assert_eq!(Vec::from(Cow::Owned(owned)), vec![\"owned\", \"(vec)\"]);\n+}\n+\n #[allow(dead_code)]\n fn assert_covariance() {\n     fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }"}]}