{"sha": "54af57018b57810c4467b6ed092a0294c3467ef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YWY1NzAxOGI1NzgxMGM0NDY3YjZlZDA5MmEwMjk0YzM0NjdlZjU=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-11T18:28:29Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-12T04:36:29Z"}, "message": "correct depth initialisation", "tree": {"sha": "36db7a7e55c20ae88c44c1e76aa57f72d7ff8d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36db7a7e55c20ae88c44c1e76aa57f72d7ff8d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54af57018b57810c4467b6ed092a0294c3467ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54af57018b57810c4467b6ed092a0294c3467ef5", "html_url": "https://github.com/rust-lang/rust/commit/54af57018b57810c4467b6ed092a0294c3467ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54af57018b57810c4467b6ed092a0294c3467ef5/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d869dc8075a78d5f2f163f6691bad14b16e4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d869dc8075a78d5f2f163f6691bad14b16e4b0", "html_url": "https://github.com/rust-lang/rust/commit/b2d869dc8075a78d5f2f163f6691bad14b16e4b0"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "420ac040b309d0a81c16ae95031abfee19e34a33", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/54af57018b57810c4467b6ed092a0294c3467ef5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54af57018b57810c4467b6ed092a0294c3467ef5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=54af57018b57810c4467b6ed092a0294c3467ef5", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             hir_map: &self.tcx.hir,\n             bound_region: *br,\n             found_type: None,\n-            depth: 0,\n+            depth: 1,\n         };\n         nested_visitor.visit_ty(arg);\n         nested_visitor.found_type\n@@ -233,6 +233,14 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n         };\n \n         match arg.node {\n+\n+            hir::TyBareFn(ref fndecl) => {\n+                self.depth += 1;\n+                intravisit::walk_ty(self, arg);\n+                self.depth -= 1;\n+                return;\n+            }\n+\n             hir::TyRptr(ref lifetime, _) => {\n                 match self.infcx.tcx.named_region_map.defs.get(&lifetime.id) {\n                     // the lifetime of the TyRptr\n@@ -266,38 +274,13 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            hir::TyBareFn(ref fndecl) => {\n-                fndecl.lifetimes.iter().map(|lf| {\n-                                            debug!(\"arg we are handling is...{:?}\",arg);\n-                    match self.infcx.tcx.named_region_map.defs.get(&lf.lifetime.id) {\n-                        Some(&rl::Region::LateBoundAnon(debuijn_index, anon_index)) => {\n-                            debug!(\"debuijn_index.depth ={:?} self.depth = {:?} anon_index ={:?} br_index={:?}\",\n-                            debuijn_index.depth, self.depth, anon_index, br_index);\n-                        if debuijn_index.depth == self.depth && anon_index == br_index {\n-                            debug!(\"arg is {:?}\",Some(arg));\n-                            self.found_type = Some(arg);\n-                            return; // we can stop visiting now\n-                        }\n-                    }\n-                    Some(&rl::Region::Static) |\n-                    Some(&rl::Region::EarlyBound(_, _)) |\n-                    Some(&rl::Region::LateBound(_, _)) |\n-                    Some(&rl::Region::Free(_, _)) |\n-                    None => {\n-                        debug!(\"no arg found\");\n-                    }\n-                }       \n-            \n-            }).next();}\n-            \n             _ => {}\n         }\n         // walk the embedded contents: e.g., if we are visiting `Vec<&Foo>`,\n         // go on to visit `&Foo`\n-        self.depth += 1;\n-        debug!(\"depth is {:?}\",self.depth);\n+        debug!(\"depth is {:?}\", self.depth);\n         intravisit::walk_ty(self, arg);\n-        self.depth += 1;\n+\n     }\n }\n \n@@ -325,7 +308,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n             _ => return,\n         };\n \n-\n         match self.infcx.tcx.named_region_map.defs.get(&lifetime.id) {\n             // the lifetime of the TyPath!\n             Some(&rl::Region::LateBoundAnon(debuijn_index, anon_index)) => {"}]}