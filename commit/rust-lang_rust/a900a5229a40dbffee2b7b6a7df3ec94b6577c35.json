{"sha": "a900a5229a40dbffee2b7b6a7df3ec94b6577c35", "node_id": "C_kwDOAAsO6NoAKGE5MDBhNTIyOWE0MGRiZmZlZTJiN2I2YTdkZjNlYzk0YjY1NzdjMzU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-15T11:06:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-15T11:44:06Z"}, "message": "Download tarballs from github instead of cloning full repos\n\nThis saves 40-50s on CI as the repo history can be skipped", "tree": {"sha": "1aebacd49d6d60e3e68176d4cd4a5479a41413a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aebacd49d6d60e3e68176d4cd4a5479a41413a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a900a5229a40dbffee2b7b6a7df3ec94b6577c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a900a5229a40dbffee2b7b6a7df3ec94b6577c35", "html_url": "https://github.com/rust-lang/rust/commit/a900a5229a40dbffee2b7b6a7df3ec94b6577c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a900a5229a40dbffee2b7b6a7df3ec94b6577c35/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af008bdc66a4c38d4c4f02481838dfdb3ba73f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/af008bdc66a4c38d4c4f02481838dfdb3ba73f7b", "html_url": "https://github.com/rust-lang/rust/commit/af008bdc66a4c38d4c4f02481838dfdb3ba73f7b"}], "stats": {"total": 91, "additions": 68, "deletions": 23}, "files": [{"sha": "133aea2acc08180d2cba6ca106bd6ea5e3929a7a", "filename": "build_system/prepare.rs", "status": "modified", "additions": 68, "deletions": 23, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/a900a5229a40dbffee2b7b6a7df3ec94b6577c35/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a900a5229a40dbffee2b7b6a7df3ec94b6577c35/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=a900a5229a40dbffee2b7b6a7df3ec94b6577c35", "patch": "@@ -14,30 +14,33 @@ pub(crate) fn prepare() {\n     eprintln!(\"[INSTALL] hyperfine\");\n     Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n \n-    // FIXME download source archives where possible instead\n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"rand\",\n+        \"rust-random\",\n         \"rand\",\n-        \"https://github.com/rust-random/rand.git\",\n         \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\",\n     );\n     apply_patches(\"rand\", Path::new(\"rand\"));\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"regex\",\n+        \"rust-lang\",\n         \"regex\",\n-        \"https://github.com/rust-lang/regex.git\",\n         \"341f207c1071f7290e3f228c710817c280c8dca1\",\n     );\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"portable-simd\",\n+        \"rust-lang\",\n         \"portable-simd\",\n-        \"https://github.com/rust-lang/portable-simd\",\n         \"b8d6b6844602f80af79cd96401339ec594d472d8\",\n     );\n     apply_patches(\"portable-simd\", Path::new(\"portable-simd\"));\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"simple-raytracer\",\n+        \"ebobby\",\n         \"simple-raytracer\",\n-        \"https://github.com/ebobby/simple-raytracer\",\n         \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n     );\n \n@@ -75,29 +78,20 @@ fn prepare_sysroot() {\n     git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(&sysroot_src);\n     spawn_and_wait(git_init_cmd);\n \n-    let mut git_add_cmd = Command::new(\"git\");\n-    git_add_cmd.arg(\"add\").arg(\".\").current_dir(&sysroot_src);\n-    spawn_and_wait(git_add_cmd);\n-\n-    let mut git_commit_cmd = Command::new(\"git\");\n-    git_commit_cmd\n-        .arg(\"commit\")\n-        .arg(\"-m\")\n-        .arg(\"Initial commit\")\n-        .arg(\"-q\")\n-        .current_dir(&sysroot_src);\n-    spawn_and_wait(git_commit_cmd);\n+    init_git_repo(&sysroot_src);\n \n     apply_patches(\"sysroot\", &sysroot_src);\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n         \"build_sysroot/compiler-builtins\",\n-        \"https://github.com/rust-lang/compiler-builtins.git\",\n+        \"rust-lang\",\n+        \"compiler-builtins\",\n         \"0.1.70\",\n     );\n     apply_patches(\"compiler-builtins\", Path::new(\"build_sysroot/compiler-builtins\"));\n }\n \n+#[allow(dead_code)]\n fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n     eprintln!(\"[CLONE] {}\", repo);\n     // Ignore exit code as the repo may already have been checked out\n@@ -112,6 +106,57 @@ fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n     spawn_and_wait(checkout_cmd);\n }\n \n+fn clone_repo_shallow_github(target_dir: &str, username: &str, repo: &str, rev: &str) {\n+    if cfg!(windows) {\n+        // Older windows doesn't have tar or curl by default. Fall back to using git.\n+        clone_repo(target_dir, &format!(\"https://github.com/{}/{}.git\", username, repo), rev);\n+        return;\n+    }\n+\n+    let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", username, repo, rev);\n+    let archive_file = format!(\"{}.tar.gz\", rev);\n+    let archive_dir = format!(\"{}-{}\", repo, rev);\n+\n+    eprintln!(\"[DOWNLOAD] {}/{} from {}\", username, repo, archive_url);\n+\n+    // Remove previous results if they exists\n+    let _ = std::fs::remove_file(&archive_file);\n+    let _ = std::fs::remove_dir_all(&archive_dir);\n+    let _ = std::fs::remove_dir_all(target_dir);\n+\n+    // Download zip archive\n+    let mut download_cmd = Command::new(\"curl\");\n+    download_cmd.arg(\"--location\").arg(\"--output\").arg(&archive_file).arg(archive_url);\n+    spawn_and_wait(download_cmd);\n+\n+    // Unpack tar archive\n+    let mut unpack_cmd = Command::new(\"tar\");\n+    unpack_cmd.arg(\"xf\").arg(&archive_file);\n+    spawn_and_wait(unpack_cmd);\n+\n+    // Rename unpacked dir to the expected name\n+    std::fs::rename(archive_dir, target_dir).unwrap();\n+\n+    init_git_repo(Path::new(target_dir));\n+\n+    // Cleanup\n+    std::fs::remove_file(archive_file).unwrap();\n+}\n+\n+fn init_git_repo(repo_dir: &Path) {\n+    let mut git_init_cmd = Command::new(\"git\");\n+    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(repo_dir);\n+    spawn_and_wait(git_init_cmd);\n+\n+    let mut git_add_cmd = Command::new(\"git\");\n+    git_add_cmd.arg(\"add\").arg(\".\").current_dir(repo_dir);\n+    spawn_and_wait(git_add_cmd);\n+\n+    let mut git_commit_cmd = Command::new(\"git\");\n+    git_commit_cmd.arg(\"commit\").arg(\"-m\").arg(\"Initial commit\").arg(\"-q\").current_dir(repo_dir);\n+    spawn_and_wait(git_commit_cmd);\n+}\n+\n fn get_patches(crate_name: &str) -> Vec<OsString> {\n     let mut patches: Vec<_> = fs::read_dir(\"patches\")\n         .unwrap()"}]}