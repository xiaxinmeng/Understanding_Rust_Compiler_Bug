{"sha": "11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYmNhNmIwN2ZjN2IyMWUxYzBhYzlhMDExOTg4YjQzNDY4ZTlmZTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-01-13T02:20:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-13T02:20:11Z"}, "message": "Rollup merge of #79588 - estebank:issue-79187, r=oli-obk\n\nProvide more information for HRTB lifetime errors involving closures", "tree": {"sha": "a404209b5e430e31007b6ef04282fd67f98c8980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a404209b5e430e31007b6ef04282fd67f98c8980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/ljbCRBK7hj4Ov3rIwAAdHIIAIuSb7qQuFwHtFzzlTJDmI1P\nju8pKxNH5hrx/xvIRTD212erPlb8FIYC9YOcagaMSyPaO972R+axrKn/ZiHmUgiS\nPw2gIJcYcX7K9eTgC/ZNLhKtBakK8NDvA8LNpMvkByddR1aPv8pFnltsn2Yub9je\nFgh57uyFRXNLPaAKw+RVtuzHtA7ilo47irtgk4Ori4bD8F9al9osieT1jVE+le1r\nEPbNztNa+1pZkyGAP4SryePn5hzyFJ780SPqN9x9rWKZ0YbDhcpMFUA6nuj0Tbbe\ndFjqKtIPIWRf5g2bIBXjAgsG7RyL4fanMLSxyNcN1Z5/BWC0FfxgMuqqQL2urWg=\n=uGZ6\n-----END PGP SIGNATURE-----\n", "payload": "tree a404209b5e430e31007b6ef04282fd67f98c8980\nparent 45ba015357b5b2f131c98c83984341640857a650\nparent a8a974245e239c995166e33f37fe6504fc8795c1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1610504411 +0100\ncommitter GitHub <noreply@github.com> 1610504411 +0100\n\nRollup merge of #79588 - estebank:issue-79187, r=oli-obk\n\nProvide more information for HRTB lifetime errors involving closures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "html_url": "https://github.com/rust-lang/rust/commit/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ba015357b5b2f131c98c83984341640857a650", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ba015357b5b2f131c98c83984341640857a650", "html_url": "https://github.com/rust-lang/rust/commit/45ba015357b5b2f131c98c83984341640857a650"}, {"sha": "a8a974245e239c995166e33f37fe6504fc8795c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a974245e239c995166e33f37fe6504fc8795c1", "html_url": "https://github.com/rust-lang/rust/commit/a8a974245e239c995166e33f37fe6504fc8795c1"}], "stats": {"total": 417, "additions": 392, "deletions": 25}, "files": [{"sha": "5d56744805f893c9882819d5a5f0a36d3e16dcf8", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -98,7 +98,7 @@ pub(super) fn note_and_explain_region(\n         // uh oh, hope no user ever sees THIS\n         ty::ReEmpty(ui) => (format!(\"the empty lifetime in universe {:?}\", ui), None),\n \n-        ty::RePlaceholder(_) => (\"any other region\".to_string(), None),\n+        ty::RePlaceholder(_) => return,\n \n         // FIXME(#13998) RePlaceholder should probably print like\n         // ReFree rather than dumping Debug output on the user.\n@@ -1675,6 +1675,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.check_and_note_conflicting_crates(diag, terr);\n         self.tcx.note_and_explain_type_err(diag, terr, cause, span, body_owner_def_id.to_def_id());\n \n+        if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values {\n+            if let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind() {\n+                if let Some(def_id) = def_id.as_local() {\n+                    let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    let span = self.tcx.hir().span(hir_id);\n+                    diag.span_note(span, \"this closure does not fulfill the lifetime requirements\");\n+                }\n+            }\n+        }\n+\n         // It reads better to have the error origin as the final\n         // thing.\n         self.note_error_origin(diag, cause, exp_found);"}, {"sha": "c88869abc29e4d0b797752466059b61e45f6104c", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -1,6 +1,7 @@\n use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Region};\n \n@@ -107,14 +108,37 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 let mut err = self.report_and_explain_type_error(trace, &terr);\n-                note_and_explain_region(self.tcx, &mut err, \"\", sup, \"...\");\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"...does not necessarily outlive \",\n-                    sub,\n-                    \"\",\n-                );\n+                match (sub, sup) {\n+                    (ty::RePlaceholder(_), ty::RePlaceholder(_)) => {}\n+                    (ty::RePlaceholder(_), _) => {\n+                        note_and_explain_region(\n+                            self.tcx,\n+                            &mut err,\n+                            \"\",\n+                            sup,\n+                            \" doesn't meet the lifetime requirements\",\n+                        );\n+                    }\n+                    (_, ty::RePlaceholder(_)) => {\n+                        note_and_explain_region(\n+                            self.tcx,\n+                            &mut err,\n+                            \"the required lifetime does not necessarily outlive \",\n+                            sub,\n+                            \"\",\n+                        );\n+                    }\n+                    _ => {\n+                        note_and_explain_region(self.tcx, &mut err, \"\", sup, \"...\");\n+                        note_and_explain_region(\n+                            self.tcx,\n+                            &mut err,\n+                            \"...does not necessarily outlive \",\n+                            sub,\n+                            \"\",\n+                        );\n+                    }\n+                }\n                 err\n             }\n             infer::Reborrow(span) => {\n@@ -286,13 +310,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         sup: Region<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         // I can't think how to do better than this right now. -nikomatsakis\n+        debug!(?placeholder_origin, ?sub, ?sup, \"report_placeholder_failure\");\n         match placeholder_origin {\n+            infer::Subtype(box ref trace)\n+                if matches!(\n+                    &trace.cause.code.peel_derives(),\n+                    ObligationCauseCode::BindingObligation(..)\n+                ) =>\n+            {\n+                // Hack to get around the borrow checker because trace.cause has an `Rc`.\n+                if let ObligationCauseCode::BindingObligation(_, span) =\n+                    &trace.cause.code.peel_derives()\n+                {\n+                    let span = *span;\n+                    let mut err = self.report_concrete_failure(placeholder_origin, sub, sup);\n+                    err.span_note(span, \"the lifetime requirement is introduced here\");\n+                    err\n+                } else {\n+                    unreachable!()\n+                }\n+            }\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsPlaceholderMismatch;\n-                self.report_and_explain_type_error(trace, &terr)\n+                return self.report_and_explain_type_error(trace, &terr);\n             }\n-\n-            _ => self.report_concrete_failure(placeholder_origin, sub, sup),\n+            _ => return self.report_concrete_failure(placeholder_origin, sub, sup),\n         }\n     }\n }"}, {"sha": "e2847b6b72b8638f741e7a8d9ff8f71ee9d2f682", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -2,10 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `&'a ()`\n               found type `&()`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/higher-ranked-projection.rs:15:33\n+   |\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "63411b59280bba93d7042f7e52bee46ba601122e", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -2,19 +2,47 @@ error[E0308]: mismatched types\n   --> $DIR/resume-arg-late-bound.rs:15:5\n    |\n LL |     test(gen);\n-   |     ^^^^ one type is more general than the other\n+   |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n+note: the required lifetime does not necessarily outlive the anonymous lifetime #1 defined on the body at 11:15\n+  --> $DIR/resume-arg-late-bound.rs:11:15\n+   |\n+LL |       let gen = |arg: &mut bool| {\n+   |  _______________^\n+LL | |         yield ();\n+LL | |         *arg = true;\n+LL | |     };\n+   | |_____^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/resume-arg-late-bound.rs:8:17\n+   |\n+LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/resume-arg-late-bound.rs:15:5\n    |\n LL |     test(gen);\n-   |     ^^^^ one type is more general than the other\n+   |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n+note: the anonymous lifetime #1 defined on the body at 11:15 doesn't meet the lifetime requirements\n+  --> $DIR/resume-arg-late-bound.rs:11:15\n+   |\n+LL |       let gen = |arg: &mut bool| {\n+   |  _______________^\n+LL | |         yield ();\n+LL | |         *arg = true;\n+LL | |     };\n+   | |_____^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/resume-arg-late-bound.rs:8:17\n+   |\n+LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ed810d443bef7f098f209e71dceb32decdb9b5a8", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -2,19 +2,39 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-perfect-forwarding.rs:46:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Bar<&'a isize>`\n               found type `Bar<&'b isize>`\n+note: the required lifetime does not necessarily outlive the lifetime `'b` as defined on the function body at 39:21\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n+   |\n+LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+   |                     ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n+   |\n+LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/hrtb-perfect-forwarding.rs:46:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Bar<&'a isize>`\n               found type `Bar<&'b isize>`\n+note: the lifetime `'b` as defined on the function body at 39:21 doesn't meet the lifetime requirements\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n+   |\n+LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+   |                     ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n+   |\n+LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f5c641be2d47c3126ca959929ce93a0d48db7a2e", "filename": "src/test/ui/issues/issue-26217.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -3,8 +3,6 @@ error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n    |\n LL |     foo::<&'a i32>();\n    |     ^^^^^^^^^^^^^^\n-   |\n-   = note: type must outlive any other region\n \n error: aborting due to previous error\n "}, {"sha": "7699e97da99ad2f4a9ed4939dba35963f9f6b6cc", "filename": "src/test/ui/issues/issue-57843.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -6,6 +6,11 @@ LL |     Foo(Box::new(|_| ()));\n    |\n    = note: expected type `FnOnce<(&'a bool,)>`\n               found type `FnOnce<(&bool,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57843.rs:23:18\n+   |\n+LL |     Foo(Box::new(|_| ()));\n+   |                  ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4970c579e7b9857962f8d608d6447fc4ee2f94b4", "filename": "src/test/ui/lifetimes/issue-79187-2.nll.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -0,0 +1,44 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-79187-2.rs:9:24\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |                  -   - ^ returning this value requires that `'1` must outlive `'2`\n+   |                  |   |\n+   |                  |   return type of closure is &'2 i32\n+   |                  let's call the lifetime of this reference `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-79187-2.rs:10:34\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |                  -        -      ^ returning this value requires that `'1` must outlive `'2`\n+   |                  |        |\n+   |                  |        let's call the lifetime of this reference `'2`\n+   |                  let's call the lifetime of this reference `'1`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:8:5\n+   |\n+LL |     take_foo(|a| a);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:8:5\n+   |\n+LL |     take_foo(|a| a);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:9:5\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187-2.rs:10:5\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "29d108facab3fc775bcd6f9f9c6b97aeb9f43621", "filename": "src/test/ui/lifetimes/issue-79187-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -0,0 +1,23 @@\n+trait Foo {}\n+\n+impl<F> Foo for F where F: Fn(&i32) -> &i32 {}\n+\n+fn take_foo(_: impl Foo) {}\n+\n+fn main() {\n+    take_foo(|a| a); //~ ERROR mismatched types\n+    take_foo(|a: &i32| a); //~ ERROR mismatched types\n+    take_foo(|a: &i32| -> &i32 { a }); //~ ERROR mismatched types\n+\n+    // OK\n+    take_foo(identity(|a| a));\n+    take_foo(identity(|a: &i32| a));\n+    take_foo(identity(|a: &i32| -> &i32 { a }));\n+\n+    fn identity<F>(t: F) -> F\n+    where\n+        F: Fn(&i32) -> &i32,\n+    {\n+        t\n+    }\n+}"}, {"sha": "a156c74fb3304e1beaeb29b2a0db0f756f144275", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -0,0 +1,60 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187-2.rs:8:5\n+   |\n+LL |     take_foo(|a| a);\n+   |     ^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `for<'r> Fn<(&'r i32,)>`\n+              found type `Fn<(&i32,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-79187-2.rs:8:14\n+   |\n+LL |     take_foo(|a| a);\n+   |              ^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187-2.rs:5:21\n+   |\n+LL | fn take_foo(_: impl Foo) {}\n+   |                     ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187-2.rs:9:5\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |     ^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n+note: the anonymous lifetime #1 defined on the body at 9:14 doesn't meet the lifetime requirements\n+  --> $DIR/issue-79187-2.rs:9:14\n+   |\n+LL |     take_foo(|a: &i32| a);\n+   |              ^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187-2.rs:5:21\n+   |\n+LL | fn take_foo(_: impl Foo) {}\n+   |                     ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187-2.rs:10:5\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |     ^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n+note: the anonymous lifetime #1 defined on the body at 10:14 doesn't meet the lifetime requirements\n+  --> $DIR/issue-79187-2.rs:10:14\n+   |\n+LL |     take_foo(|a: &i32| -> &i32 { a });\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187-2.rs:5:21\n+   |\n+LL | fn take_foo(_: impl Foo) {}\n+   |                     ^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "aa8809dbc95f7794401bbe8363be29fee3dbc822", "filename": "src/test/ui/lifetimes/issue-79187.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187.rs:5:5\n+   |\n+LL |     thing(f);\n+   |     ^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-79187.rs:5:5\n+   |\n+LL |     thing(f);\n+   |     ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bf331d8a6068e5861867161a0e6b4b1da18cc34b", "filename": "src/test/ui/lifetimes/issue-79187.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -0,0 +1,6 @@\n+fn thing(x: impl FnOnce(&u32)) {}\n+\n+fn main() {\n+    let f = |_| ();\n+    thing(f); //~ERROR mismatched types\n+}"}, {"sha": "63f501e08fce4ead09fcd54677196dcb4069f226", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79187.rs:5:5\n+   |\n+LL |     thing(f);\n+   |     ^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `FnOnce<(&u32,)>`\n+              found type `FnOnce<(&u32,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-79187.rs:4:13\n+   |\n+LL |     let f = |_| ();\n+   |             ^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-79187.rs:1:18\n+   |\n+LL | fn thing(x: impl FnOnce(&u32)) {}\n+   |                  ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "02ba60f7f4b737635a730c4a386784fa80d9e3d9", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -26,37 +26,77 @@ error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n+note: the required lifetime does not necessarily outlive the lifetime `'a` as defined on the function body at 9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `FnOnce<(*mut &u32,)>`\n               found type `FnOnce<(*mut &'a u32,)>`\n+note: the required lifetime does not necessarily outlive the lifetime `'a` as defined on the function body at 9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n+note: the lifetime `'a` as defined on the function body at 9:10 doesn't meet the lifetime requirements\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `FnOnce<(*mut &u32,)>`\n               found type `FnOnce<(*mut &'a u32,)>`\n+note: the lifetime `'a` as defined on the function body at 9:10 doesn't meet the lifetime requirements\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   |           ^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "c41bece3c196fd2becd3c5745064363bfe4a91bf", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -2,10 +2,20 @@ error[E0308]: mismatched types\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL |     baz(|_| ());\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(&'r (),)>`\n               found type `Fn<(&(),)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/closure-mismatch.rs:8:9\n+   |\n+LL |     baz(|_| ());\n+   |         ^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-mismatch.rs:5:11\n+   |\n+LL | fn baz<T: Foo>(_: T) {}\n+   |           ^^^\n \n error: aborting due to previous error\n "}, {"sha": "be1dd1a8524c803bebced010c2bc5140cb950b66", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -18,6 +18,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'static X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -27,6 +32,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&'static X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9d9293e958eeb909069a44a2c25923ae3c513559", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -6,6 +6,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -15,6 +20,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -24,6 +34,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -33,6 +48,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -42,6 +62,11 @@ LL |     type Bar = impl Baz<Self, Self>;\n    |\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ecf3a96b5a8dcaf1bdf41823e7d64de11e847ca5", "filename": "src/test/ui/unboxed-closures/issue-30906.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11bca6b07fc7b21e1c0ac9a011988b43468e9fe6/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr?ref=11bca6b07fc7b21e1c0ac9a011988b43468e9fe6", "patch": "@@ -2,10 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-30906.rs:15:5\n    |\n LL |     test(Compose(f, |_| {}));\n-   |     ^^^^ one type is more general than the other\n+   |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `FnOnce<(&'x str,)>`\n               found type `FnOnce<(&str,)>`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-30906.rs:3:12\n+   |\n+LL | fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}