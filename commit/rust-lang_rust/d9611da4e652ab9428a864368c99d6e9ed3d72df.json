{"sha": "d9611da4e652ab9428a864368c99d6e9ed3d72df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NjExZGE0ZTY1MmFiOTQyOGE4NjQzNjhjOTlkNmU5ZWQzZDcyZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-24T07:56:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-24T07:56:51Z"}, "message": "auto merge of #15066 : pcwalton/rust/lang-and-intrinsic-feature-gate, r=alexcrichton\n\nIf you define lang items in your crate, add `#[feature(lang_items)]`.\r\n\r\nIf you define intrinsics (`extern \"rust-intrinsic\"`), add\r\n`#[feature(intrinsics)]`.\r\n\r\nCloses #12858.\r\n\r\n[breaking-change]\r\n\r\nr? @brson", "tree": {"sha": "4f72359dc016a4df4c70aea0d208453f888c2b42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f72359dc016a4df4c70aea0d208453f888c2b42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9611da4e652ab9428a864368c99d6e9ed3d72df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9611da4e652ab9428a864368c99d6e9ed3d72df", "html_url": "https://github.com/rust-lang/rust/commit/d9611da4e652ab9428a864368c99d6e9ed3d72df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9611da4e652ab9428a864368c99d6e9ed3d72df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c12d32a2e989d02d26a80f91d2c49a8bc1aaad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c12d32a2e989d02d26a80f91d2c49a8bc1aaad", "html_url": "https://github.com/rust-lang/rust/commit/e8c12d32a2e989d02d26a80f91d2c49a8bc1aaad"}, {"sha": "5466d13d4320252f57d276c566dbee44617b63b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5466d13d4320252f57d276c566dbee44617b63b2", "html_url": "https://github.com/rust-lang/rust/commit/5466d13d4320252f57d276c566dbee44617b63b2"}], "stats": {"total": 123, "additions": 106, "deletions": 17}, "files": [{"sha": "d069cb4d09363514ebe820fac75f6d63717cf876", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -451,6 +451,7 @@ in the same format as a C:\n \n ```\n #![no_std]\n+#![feature(lang_items)]\n \n // Pull in the system libc library for what crt0.o likely requires\n extern crate libc;\n@@ -477,6 +478,7 @@ compiler's name mangling too:\n ```ignore\n #![no_std]\n #![no_main]\n+#![feature(lang_items)]\n \n extern crate libc;\n \n@@ -528,6 +530,7 @@ vectors provided from C, using idiomatic Rust practices.\n ```\n #![no_std]\n #![feature(globs)]\n+#![feature(lang_items)]\n \n # extern crate libc;\n extern crate core;\n@@ -619,6 +622,9 @@ perform efficient pointer arithmetic, one would import those functions\n via a declaration like\n \n ```\n+# #![feature(intrinsics)]\n+# fn main() {}\n+\n extern \"rust-intrinsic\" {\n     fn transmute<T, U>(x: T) -> U;\n \n@@ -647,6 +653,7 @@ sugar for dynamic allocations via `malloc` and `free`:\n \n ```\n #![no_std]\n+#![feature(lang_items)]\n \n extern crate libc;\n "}, {"sha": "e89a9c019bb7a2ce1b67dec3514a152683c41ec8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -69,7 +69,8 @@\n        html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![no_std]\n-#![feature(phase, unsafe_destructor)]\n+#![feature(lang_items, phase, unsafe_destructor)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n #[phase(plugin, link)]\n extern crate core;"}, {"sha": "aa55f204f459fd5ddf0ae1b1defc0fe509f778fc", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -55,8 +55,10 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![no_std]\n-#![feature(globs, macro_rules, managed_boxes, phase, simd, unsafe_destructor)]\n+#![feature(globs, intrinsics, lang_items, macro_rules, managed_boxes, phase)]\n+#![feature(simd, unsafe_destructor)]\n #![deny(missing_doc)]\n+#![allow(unknown_features)] // NOTE: remove after stage0 snapshot\n \n #[cfg(test)] extern crate realcore = \"core\";\n #[cfg(test)] extern crate libc;"}, {"sha": "3438661ffb3e3ae34a88dac7027ca70bbf56214d", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -55,6 +55,8 @@\n \n #![deny(unused_result, unused_must_use)]\n #![allow(non_camel_case_types, deprecated)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n+#![feature(default_type_params, lang_items)]\n \n // NB this crate explicitly does *not* allow glob imports, please seriously\n //    consider whether they're needed before adding that feature here (the"}, {"sha": "0d917e20c25c6e15feec8f880c91554b9b43df60", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -26,6 +26,8 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\")]\n+#![feature(intrinsics)]\n+#![allow(unknown_features)] // NOTE: remove after stage0 snapshot\n \n #![no_std]\n #![experimental]"}, {"sha": "59e52b9359f50c4fce71e08b0c3419dafb489d79", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -20,6 +20,8 @@\n \n use middle::lint;\n \n+use syntax::abi::RustIntrinsic;\n+use syntax::ast::NodeId;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n@@ -51,6 +53,8 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"trace_macros\", Active),\n     (\"concat_idents\", Active),\n     (\"unsafe_destructor\", Active),\n+    (\"intrinsics\", Active),\n+    (\"lang_items\", Active),\n \n     (\"simd\", Active),\n     (\"default_type_params\", Active),\n@@ -187,13 +191,18 @@ impl<'a> Visitor<()> for Context<'a> {\n                 }\n             }\n \n-            ast::ItemForeignMod(..) => {\n+            ast::ItemForeignMod(ref foreign_module) => {\n                 if attr::contains_name(i.attrs.as_slice(), \"link_args\") {\n                     self.gate_feature(\"link_args\", i.span,\n                                       \"the `link_args` attribute is not portable \\\n                                        across platforms, it is recommended to \\\n                                        use `#[link(name = \\\"foo\\\")]` instead\")\n                 }\n+                if foreign_module.abi == RustIntrinsic {\n+                    self.gate_feature(\"intrinsics\",\n+                                      i.span,\n+                                      \"intrinsics are subject to change\")\n+                }\n             }\n \n             ast::ItemFn(..) => {\n@@ -283,14 +292,10 @@ impl<'a> Visitor<()> for Context<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem, _: ()) {\n-        match i.node {\n-            ast::ForeignItemFn(..) | ast::ForeignItemStatic(..) => {\n-                if attr::contains_name(i.attrs.as_slice(), \"linkage\") {\n-                    self.gate_feature(\"linkage\", i.span,\n-                                      \"the `linkage` attribute is experimental \\\n-                                       and not portable across platforms\")\n-                }\n-            }\n+        if attr::contains_name(i.attrs.as_slice(), \"linkage\") {\n+            self.gate_feature(\"linkage\", i.span,\n+                              \"the `linkage` attribute is experimental \\\n+                               and not portable across platforms\")\n         }\n         visit::walk_foreign_item(self, i, ())\n     }\n@@ -338,6 +343,32 @@ impl<'a> Visitor<()> for Context<'a> {\n         }\n         visit::walk_generics(self, generics, ());\n     }\n+\n+    fn visit_attribute(&mut self, attr: &ast::Attribute, _: ()) {\n+        if attr::contains_name([*attr], \"lang\") {\n+            self.gate_feature(\"lang_items\",\n+                              attr.span,\n+                              \"language items are subject to change\");\n+        }\n+    }\n+\n+    fn visit_fn(&mut self,\n+                fn_kind: &visit::FnKind,\n+                fn_decl: &ast::FnDecl,\n+                block: &ast::Block,\n+                span: Span,\n+                _: NodeId,\n+                (): ()) {\n+        match *fn_kind {\n+            visit::FkItemFn(_, _, _, ref abi) if *abi == RustIntrinsic => {\n+                self.gate_feature(\"intrinsics\",\n+                                  span,\n+                                  \"intrinsics are subject to change\")\n+            }\n+            _ => {}\n+        }\n+        visit::walk_fn(self, fn_kind, fn_decl, block, span, ());\n+    }\n }\n \n pub fn check_crate(sess: &Session, krate: &ast::Crate) {"}, {"sha": "34898ea64acf7d31e513a04ebe0ff13f0613bf6e", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -17,7 +17,8 @@\n        html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_rules, phase, globs, thread_local, managed_boxes, asm)]\n-#![feature(linkage, unsafe_destructor)]\n+#![feature(linkage, lang_items, unsafe_destructor)]\n+#![allow(unknown_features)] // NOTE: remove after stage0 snapshot\n #![no_std]\n #![experimental]\n "}, {"sha": "8106d516dad6e96c9ef7462ba89cb97cc8b653b8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -104,13 +104,14 @@\n        html_root_url = \"http://doc.rust-lang.org/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![feature(macro_rules, globs, managed_boxes)]\n-#![feature(linkage, default_type_params, phase, unsafe_destructor)]\n+#![feature(macro_rules, globs, managed_boxes, linkage)]\n+#![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n \n // Don't link to std. We are std.\n #![no_std]\n \n #![allow(deprecated)]\n+#![allow(unknown_features)] // NOTE: remove after stage0 snapshot\n #![deny(missing_doc)]\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print"}, {"sha": "a3a3dbac2b5515ca0b5d4eb3aff5f659c7bb615f", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(intrinsics)]\n+\n pub mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn atomic_xchg<T>(dst: *mut T, src: T) -> T;"}, {"sha": "7b84e11ef31f020b9d1db86cd3fb1a91cbdd4a8d", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![no_std]\n+#![feature(lang_items)]\n \n #[lang=\"fail_\"]\n fn fail(_: &'static str, _: &'static str, _: uint) -> ! { loop {} }"}, {"sha": "4bd61412731418a82d6d13257cf8b4b201eb6f4e", "filename": "src/test/compile-fail/attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(lang_items)]\n+\n fn main() {}\n \n #![lang(foo)] //~ ERROR an inner attribute is not permitted in this context"}, {"sha": "3a2a75586576ead6e8a0fa34d377103b8d8539d3", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -11,6 +11,7 @@\n // ignore-tidy-linelength\n \n #![no_std]\n+#![feature(lang_items)]\n \n #[lang=\"sized\"]\n pub trait Sized {}"}, {"sha": "986d52b1787ec65be2c1b296ab9bba8d29e7ab83", "filename": "src/test/compile-fail/feature-gate-intrinsics-and-lang-items.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Ffeature-gate-intrinsics-and-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Ffeature-gate-intrinsics-and-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-intrinsics-and-lang-items.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[lang=\"foo\"]   //~ ERROR language items are subject to change\n+trait Foo {}\n+\n+extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n+    fn bar();\n+}\n+\n+extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change\n+}\n+\n+fn main() {\n+}\n+"}, {"sha": "b68a2241e1a39a9dc63d6d1fea0e4f86e386b729", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -13,6 +13,7 @@\n #![allow(non_camel_case_types)]\n #![allow(visible_private_types)]\n #![deny(dead_code)]\n+#![feature(lang_items)]\n \n #![crate_type=\"lib\"]\n "}, {"sha": "6df52c394fc0ed7b7dc3eb0bfdd7af2d3a0e969a", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n+#![feature(globs, lang_items)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n #[lang=\"sized\"]"}, {"sha": "84593ececd0af6a23005bfca1bac0e7ca5e3e657", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(intrinsics)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {"}, {"sha": "8a856b14eae02bff853bc6345ca9866ed62ca744", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(intrinsics)]\n+\n mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> T;"}, {"sha": "84b80d43f0902ba3dcf5e69f99672f10ae55113c", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(intrinsics)]\n+\n use std::mem::transmute;\n \n mod rusti {"}, {"sha": "34fd8effd4912de05a826f1a6002ba0491017ee9", "filename": "src/test/run-pass/intrinsic-uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(intrinsics)]\n+\n mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn uninit<T>() -> T;"}, {"sha": "5121e2185cb7ba2eb0d06adb3c0d2dd77e9fe9af", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n+#![feature(globs, intrinsics)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {"}, {"sha": "164a6845a9f0b308e4e2ab77de12e6d203032249", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs, macro_rules)]\n+#![feature(globs, macro_rules, intrinsics)]\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({"}, {"sha": "d741b80ef5e4946c2b754f0aa8ad9e7fd79fc4c9", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -10,6 +10,8 @@\n \n // Issue #2303\n \n+#![feature(intrinsics)]\n+\n extern crate debug;\n \n use std::mem;"}, {"sha": "cf254d54793a44f0584e1bac4c287efbe5df45eb", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -10,6 +10,8 @@\n \n // Issue #2303\n \n+#![feature(intrinsics)]\n+\n extern crate debug;\n \n use std::mem;"}, {"sha": "bdba5aa9cfe153d7384d1b72b1e4a94cd60688d9", "filename": "src/test/run-pass/smallest-hello-world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9611da4e652ab9428a864368c99d6e9ed3d72df/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs?ref=d9611da4e652ab9428a864368c99d6e9ed3d72df", "patch": "@@ -13,6 +13,7 @@\n // Smallest \"hello world\" with a libc runtime\n \n #![no_std]\n+#![feature(intrinsics, lang_items)]\n \n extern crate libc;\n "}]}