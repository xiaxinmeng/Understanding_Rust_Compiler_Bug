{"sha": "09d988521dac5f5b49787faa8243c72e4dbae792", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZDk4ODUyMWRhYzVmNWI0OTc4N2ZhYTgyNDNjNzJlNGRiYWU3OTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-11-10T09:11:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-10T09:11:20Z"}, "message": "Merge pull request #2214 from rust-lang-nursery/nrlfp\n\nImprove `needless_range_loop`", "tree": {"sha": "f5473e92e9765b1e813850286e90b68e24538548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5473e92e9765b1e813850286e90b68e24538548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d988521dac5f5b49787faa8243c72e4dbae792", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaBW04CRBK7hj4Ov3rIwAAdHIIAFSU8EeNtIS0Rfa1wFNkZEhq\n9eZwIj/W9Fu0LWTSEUfMshDCEU2CHVYePRuGcZrv3oURRMb9P6LYtUzNjRnMxE5K\nuoVYlMX62sOonBMHXrNsvpvleQQog3/VjkcZrz59HI+XFSAV2ocsMV08ivsmGIzT\n9cig5qk4otObyMzy6FuUpDtzcjTlPrIIp0qdzfeaXLvmmZM8qpYj74DSBT4XhJ5y\n8sm3+urCtpq9s2RZvGvfDQl3Fw30qwqGMTt+rhZZ/3E1SIMPIme3F/e8ZD3tIgu9\nqiIIwbFNXKwqnsYtYjST6MsjEgjSB0jLlLUfgupHAJHi75t9KU9ACGpv1bwvtxA=\n=BGpj\n-----END PGP SIGNATURE-----\n", "payload": "tree f5473e92e9765b1e813850286e90b68e24538548\nparent 299f1270a6d0dfa9b77ab0c61b1f25f257a9b692\nparent 1b323b9f355c0b3cdf0729f57880240ade00d56f\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1510305080 +0100\ncommitter GitHub <noreply@github.com> 1510305080 +0100\n\nMerge pull request #2214 from rust-lang-nursery/nrlfp\n\nImprove `needless_range_loop`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d988521dac5f5b49787faa8243c72e4dbae792", "html_url": "https://github.com/rust-lang/rust/commit/09d988521dac5f5b49787faa8243c72e4dbae792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d988521dac5f5b49787faa8243c72e4dbae792/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299f1270a6d0dfa9b77ab0c61b1f25f257a9b692", "url": "https://api.github.com/repos/rust-lang/rust/commits/299f1270a6d0dfa9b77ab0c61b1f25f257a9b692", "html_url": "https://github.com/rust-lang/rust/commit/299f1270a6d0dfa9b77ab0c61b1f25f257a9b692"}, {"sha": "1b323b9f355c0b3cdf0729f57880240ade00d56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b323b9f355c0b3cdf0729f57880240ade00d56f", "html_url": "https://github.com/rust-lang/rust/commit/1b323b9f355c0b3cdf0729f57880240ade00d56f"}], "stats": {"total": 171, "additions": 151, "deletions": 20}, "files": [{"sha": "babf3d3cc16fc9c372c115c1eca2d729ecf9d892", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 96, "deletions": 20, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/09d988521dac5f5b49787faa8243c72e4dbae792/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d988521dac5f5b49787faa8243c72e4dbae792/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=09d988521dac5f5b49787faa8243c72e4dbae792", "patch": "@@ -952,16 +952,17 @@ fn check_for_loop_range<'a, 'tcx>(\n             let mut visitor = VarVisitor {\n                 cx: cx,\n                 var: canonical_id,\n-                indexed: HashMap::new(),\n+                indexed_mut: HashSet::new(),\n+                indexed_indirectly: HashMap::new(),\n                 indexed_directly: HashMap::new(),\n                 referenced: HashSet::new(),\n                 nonindex: false,\n+                prefer_mutable: false,\n             };\n             walk_expr(&mut visitor, body);\n \n             // linting condition: we only indexed one variable, and indexed it directly\n-            // (`indexed_directly` is subset of `indexed`)\n-            if visitor.indexed.len() == 1 && visitor.indexed_directly.len() == 1 {\n+            if visitor.indexed_indirectly.is_empty() && visitor.indexed_directly.len() == 1 {\n                 let (indexed, indexed_extent) = visitor\n                     .indexed_directly\n                     .into_iter()\n@@ -1009,6 +1010,12 @@ fn check_for_loop_range<'a, 'tcx>(\n                     \"\".to_owned()\n                 };\n \n+                let (ref_mut, method) = if visitor.indexed_mut.contains(&indexed) {\n+                    (\"mut \", \"iter_mut\")\n+                } else {\n+                    (\"\", \"iter\")\n+                };\n+\n                 if visitor.nonindex {\n                     span_lint_and_then(\n                         cx,\n@@ -1021,16 +1028,16 @@ fn check_for_loop_range<'a, 'tcx>(\n                                 \"consider using an iterator\".to_string(),\n                                 vec![\n                                     (pat.span, format!(\"({}, <item>)\", ident.node)),\n-                                    (arg.span, format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip)),\n+                                    (arg.span, format!(\"{}.{}().enumerate(){}{}\", indexed, method, take, skip)),\n                                 ],\n                             );\n                         },\n                     );\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n-                        format!(\"&{}\", indexed)\n+                        format!(\"&{}{}\", ref_mut, indexed)\n                     } else {\n-                        format!(\"{}.iter(){}{}\", indexed, take, skip)\n+                        format!(\"{}.{}(){}{}\", indexed, method, take, skip)\n                     };\n \n                     span_lint_and_then(\n@@ -1537,8 +1544,10 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     /// var name to look for as index\n     var: ast::NodeId,\n-    /// indexed variables, the extend is `None` for global\n-    indexed: HashMap<Name, Option<region::Scope>>,\n+    /// indexed variables that are used mutably\n+    indexed_mut: HashSet<Name>,\n+    /// indirectly indexed variables (`v[(i + 4) % N]`), the extend is `None` for global\n+    indexed_indirectly: HashMap<Name, Option<region::Scope>>,\n     /// subset of `indexed` of vars that are indexed directly: `v[i]`\n     /// this will not contain cases like `v[calc_index(i)]` or `v[(i + 4) % N]`\n     indexed_directly: HashMap<Name, Option<region::Scope>>,\n@@ -1548,20 +1557,21 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     /// has the loop variable been used in expressions other than the index of\n     /// an index op?\n     nonindex: bool,\n+    /// Whether we are inside the `$` in `&mut $` or `$ = foo` or `$.bar`, where bar\n+    /// takes `&mut self`\n+    prefer_mutable: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n-    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n+    fn check(&mut self, idx: &'tcx Expr, seqexpr: &'tcx Expr, expr: &'tcx Expr) -> bool {\n         if_chain! {\n-            // an index op\n-            if let ExprIndex(ref seqexpr, ref idx) = expr.node;\n             // the indexed container is referenced by a name\n             if let ExprPath(ref seqpath) = seqexpr.node;\n             if let QPath::Resolved(None, ref seqvar) = *seqpath;\n             if seqvar.segments.len() == 1;\n             then {\n                 let index_used_directly = same_var(self.cx, idx, self.var);\n-                let index_used = index_used_directly || {\n+                let indexed_indirectly = {\n                     let mut used_visitor = LocalUsedVisitor {\n                         cx: self.cx,\n                         local: self.var,\n@@ -1571,7 +1581,10 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     used_visitor.used\n                 };\n \n-                if index_used {\n+                if indexed_indirectly || index_used_directly {\n+                    if self.prefer_mutable {\n+                        self.indexed_mut.insert(seqvar.segments[0].name);\n+                    }\n                     let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n                     match def {\n                         Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n@@ -1580,24 +1593,48 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                             let parent_id = self.cx.tcx.hir.get_parent(expr.id);\n                             let parent_def_id = self.cx.tcx.hir.local_def_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n-                            self.indexed.insert(seqvar.segments[0].name, Some(extent));\n+                            if indexed_indirectly {\n+                                self.indexed_indirectly.insert(seqvar.segments[0].name, Some(extent));\n+                            }\n                             if index_used_directly {\n                                 self.indexed_directly.insert(seqvar.segments[0].name, Some(extent));\n                             }\n-                            return;  // no need to walk further *on the variable*\n+                            return false;  // no need to walk further *on the variable*\n                         }\n                         Def::Static(..) | Def::Const(..) => {\n-                            self.indexed.insert(seqvar.segments[0].name, None);\n+                            if indexed_indirectly {\n+                                self.indexed_indirectly.insert(seqvar.segments[0].name, None);\n+                            }\n                             if index_used_directly {\n                                 self.indexed_directly.insert(seqvar.segments[0].name, None);\n                             }\n-                            return;  // no need to walk further *on the variable*\n+                            return false;  // no need to walk further *on the variable*\n                         }\n                         _ => (),\n                     }\n                 }\n             }\n         }\n+        true\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        if_chain! {\n+            // a range index op\n+            if let ExprMethodCall(ref meth, _, ref args) = expr.node;\n+            if meth.name == \"index\" || meth.name == \"index_mut\";\n+            if !self.check(&args[1], &args[0], expr);\n+            then { return }\n+        }\n+\n+        if_chain! {\n+            // an index op\n+            if let ExprIndex(ref seqexpr, ref idx) = expr.node;\n+            if !self.check(idx, seqexpr, expr);\n+            then { return }\n+        }\n \n         if_chain! {\n             // directly using a variable\n@@ -1615,8 +1652,47 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-\n-        walk_expr(self, expr);\n+        let old = self.prefer_mutable;\n+        match expr.node {\n+            ExprAssignOp(_, ref lhs, ref rhs) |\n+            ExprAssign(ref lhs, ref rhs) => {\n+                self.prefer_mutable = true;\n+                self.visit_expr(lhs);\n+                self.prefer_mutable = false;\n+                self.visit_expr(rhs);\n+            },\n+            ExprAddrOf(mutbl, ref expr) => {\n+                if mutbl == MutMutable {\n+                    self.prefer_mutable = true;\n+                }\n+                self.visit_expr(expr);\n+            },\n+            ExprCall(ref f, ref args) => {\n+                for (ty, expr) in self.cx.tables.expr_ty(f).fn_sig(self.cx.tcx).inputs().skip_binder().iter().zip(args) {\n+                    self.prefer_mutable = false;\n+                    if let ty::TyRef(_, mutbl) = ty.sty {\n+                        if mutbl.mutbl == MutMutable {\n+                            self.prefer_mutable = true;\n+                        }\n+                    }\n+                    self.visit_expr(expr);\n+                }\n+            },\n+            ExprMethodCall(_, _, ref args) => {\n+                let def_id = self.cx.tables.type_dependent_defs()[expr.hir_id].def_id();\n+                for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n+                    self.prefer_mutable = false;\n+                    if let ty::TyRef(_, mutbl) = ty.sty {\n+                        if mutbl.mutbl == MutMutable {\n+                            self.prefer_mutable = true;\n+                        }\n+                    }\n+                    self.visit_expr(expr);\n+                }\n+            },\n+            _ => walk_expr(self, expr),\n+        }\n+        self.prefer_mutable = old;\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None"}, {"sha": "30613f98f2bce3be8a6b8d8668d235cd74019801", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09d988521dac5f5b49787faa8243c72e4dbae792/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d988521dac5f5b49787faa8243c72e4dbae792/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=09d988521dac5f5b49787faa8243c72e4dbae792", "patch": "@@ -24,4 +24,32 @@ fn main() {\n     for i in 3..10 {\n         println!(\"{}\", ns[calc_idx(i) % 4]);\n     }\n+\n+    let mut ms = vec![1, 2, 3, 4, 5, 6];\n+    for i in 0..ms.len() {\n+        ms[i] *= 2;\n+    }\n+    assert_eq!(ms, vec![2, 4, 6, 8, 10, 12]);\n+\n+    let mut ms = vec![1, 2, 3, 4, 5, 6];\n+    for i in 0..ms.len() {\n+        let x = &mut ms[i];\n+        *x *= 2;\n+    }\n+    assert_eq!(ms, vec![2, 4, 6, 8, 10, 12]);\n+\n+    let g = vec![1, 2, 3, 4, 5, 6];\n+    let glen = g.len();\n+    for i in 0..glen {\n+        let x: u32 = g[i+1..].iter().sum();\n+        println!(\"{}\", g[i] + x);\n+    }\n+    assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n+\n+    let mut g = vec![1, 2, 3, 4, 5, 6];\n+    let glen = g.len();\n+    for i in 0..glen {\n+        g[i] = g[i+1..].iter().sum();\n+    }\n+    assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n }"}, {"sha": "97328f3d4d1d6f278ff4248743c620b06e9b4616", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/09d988521dac5f5b49787faa8243c72e4dbae792/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09d988521dac5f5b49787faa8243c72e4dbae792/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=09d988521dac5f5b49787faa8243c72e4dbae792", "patch": "@@ -12,3 +12,30 @@ help: consider using an iterator\n 8  |     for <item> in ns.iter().take(10).skip(3) {\n    |\n \n+error: the loop variable `i` is only used to index `ms`.\n+  --> $DIR/needless_range_loop.rs:29:5\n+   |\n+29 | /     for i in 0..ms.len() {\n+30 | |         ms[i] *= 2;\n+31 | |     }\n+   | |_____^\n+   |\n+help: consider using an iterator\n+   |\n+29 |     for <item> in &mut ms {\n+   |         ^^^^^^\n+\n+error: the loop variable `i` is only used to index `ms`.\n+  --> $DIR/needless_range_loop.rs:35:5\n+   |\n+35 | /     for i in 0..ms.len() {\n+36 | |         let x = &mut ms[i];\n+37 | |         *x *= 2;\n+38 | |     }\n+   | |_____^\n+   |\n+help: consider using an iterator\n+   |\n+35 |     for <item> in &mut ms {\n+   |         ^^^^^^\n+"}]}