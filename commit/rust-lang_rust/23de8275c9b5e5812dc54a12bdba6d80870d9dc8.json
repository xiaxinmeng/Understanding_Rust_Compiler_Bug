{"sha": "23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGU4Mjc1YzliNWU1ODEyZGM1NGExMmJkYmE2ZDgwODcwZDlkYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T09:16:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T09:16:53Z"}, "message": "Auto merge of #68551 - Marwes:allocations_mir, r=ecstatic-morse\n\nperf: Reuse a Vec in mir simplification\n\nJust moves the vec out of the outer loop so it is reused every iteration", "tree": {"sha": "8db5224c597044c43761d3b33a7d5b30524f0e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db5224c597044c43761d3b33a7d5b30524f0e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "html_url": "https://github.com/rust-lang/rust/commit/23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23de8275c9b5e5812dc54a12bdba6d80870d9dc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "html_url": "https://github.com/rust-lang/rust/commit/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c"}, {"sha": "851e9d64baa8d54a2960a3e5946143cb24b772b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/851e9d64baa8d54a2960a3e5946143cb24b772b5", "html_url": "https://github.com/rust-lang/rust/commit/851e9d64baa8d54a2960a3e5946143cb24b772b5"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "4c54a46642f11e3cecd151357d03a050a3b26526", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/23de8275c9b5e5812dc54a12bdba6d80870d9dc8/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de8275c9b5e5812dc54a12bdba6d80870d9dc8/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "patch": "@@ -95,6 +95,11 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n         let mut start = START_BLOCK;\n \n+        // Vec of the blocks that should be merged. We store the indices here, instead of the\n+        // statements itself to avoid moving the (relatively) large statements twice.\n+        // We do not push the statements directly into the target block (`bb`) as that is slower\n+        // due to additional reallocations\n+        let mut merged_blocks = Vec::new();\n         loop {\n             let mut changed = false;\n \n@@ -114,18 +119,28 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n                     self.collapse_goto_chain(successor, &mut changed);\n                 }\n \n-                let mut new_stmts = vec![];\n                 let mut inner_changed = true;\n+                merged_blocks.clear();\n                 while inner_changed {\n                     inner_changed = false;\n                     inner_changed |= self.simplify_branch(&mut terminator);\n-                    inner_changed |= self.merge_successor(&mut new_stmts, &mut terminator);\n+                    inner_changed |= self.merge_successor(&mut merged_blocks, &mut terminator);\n                     changed |= inner_changed;\n                 }\n \n-                let data = &mut self.basic_blocks[bb];\n-                data.statements.extend(new_stmts);\n-                data.terminator = Some(terminator);\n+                let statements_to_merge =\n+                    merged_blocks.iter().map(|&i| self.basic_blocks[i].statements.len()).sum();\n+\n+                if statements_to_merge > 0 {\n+                    let mut statements = std::mem::take(&mut self.basic_blocks[bb].statements);\n+                    statements.reserve(statements_to_merge);\n+                    for &from in &merged_blocks {\n+                        statements.append(&mut self.basic_blocks[from].statements);\n+                    }\n+                    self.basic_blocks[bb].statements = statements;\n+                }\n+\n+                self.basic_blocks[bb].terminator = Some(terminator);\n \n                 changed |= inner_changed;\n             }\n@@ -199,7 +214,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     // merge a block with 1 `goto` predecessor to its parent\n     fn merge_successor(\n         &mut self,\n-        new_stmts: &mut Vec<Statement<'tcx>>,\n+        merged_blocks: &mut Vec<BasicBlock>,\n         terminator: &mut Terminator<'tcx>,\n     ) -> bool {\n         let target = match terminator.kind {\n@@ -216,7 +231,8 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n                 return false;\n             }\n         };\n-        new_stmts.extend(self.basic_blocks[target].statements.drain(..));\n+\n+        merged_blocks.push(target);\n         self.pred_count[target] = 0;\n \n         true"}]}