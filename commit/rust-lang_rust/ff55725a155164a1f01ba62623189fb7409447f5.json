{"sha": "ff55725a155164a1f01ba62623189fb7409447f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNTU3MjVhMTU1MTY0YTFmMDFiYTYyNjIzMTg5ZmI3NDA5NDQ3ZjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-05T05:41:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-06T05:47:11Z"}, "message": "Make double ended string searchers use dependent fingers (fixes #47175)", "tree": {"sha": "babbc54eebff868b7ec53ec1dd53108323e7b7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/babbc54eebff868b7ec53ec1dd53108323e7b7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff55725a155164a1f01ba62623189fb7409447f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff55725a155164a1f01ba62623189fb7409447f5", "html_url": "https://github.com/rust-lang/rust/commit/ff55725a155164a1f01ba62623189fb7409447f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff55725a155164a1f01ba62623189fb7409447f5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd582ac38ec066859334061e71faf2631220d98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd582ac38ec066859334061e71faf2631220d98b", "html_url": "https://github.com/rust-lang/rust/commit/dd582ac38ec066859334061e71faf2631220d98b"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "089d691773a1bcf94a6b1ab31407006cb022e9ee", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff55725a155164a1f01ba62623189fb7409447f5/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff55725a155164a1f01ba62623189fb7409447f5/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=ff55725a155164a1f01ba62623189fb7409447f5", "patch": "@@ -284,7 +284,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn next(&mut self) -> SearchStep {\n         let old_finger = self.finger;\n-        let slice = unsafe { self.haystack.get_unchecked(old_finger..self.haystack.len()) };\n+        let slice = unsafe { self.haystack.get_unchecked(old_finger..self.finger_back) };\n         let mut iter = slice.chars();\n         let old_len = iter.iter.len();\n         if let Some(ch) = iter.next() {\n@@ -304,7 +304,8 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n     fn next_match(&mut self) -> Option<(usize, usize)> {\n         loop {\n             // get the haystack after the last character found\n-            let bytes = if let Some(slice) = self.haystack.as_bytes().get(self.finger..) {\n+            let bytes = if let Some(slice) = self.haystack.as_bytes()\n+                                                 .get(self.finger..self.finger_back) {\n                 slice\n             } else {\n                 return None;\n@@ -340,7 +341,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n                 }\n             } else {\n                 // found nothing, exit\n-                self.finger = self.haystack.len();\n+                self.finger = self.finger_back;\n                 return None;\n             }\n         }\n@@ -353,7 +354,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn next_back(&mut self) -> SearchStep {\n         let old_finger = self.finger_back;\n-        let slice = unsafe { self.haystack.slice_unchecked(0, old_finger) };\n+        let slice = unsafe { self.haystack.slice_unchecked(self.finger, old_finger) };\n         let mut iter = slice.chars();\n         let old_len = iter.iter.len();\n         if let Some(ch) = iter.next_back() {\n@@ -374,14 +375,17 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n         let haystack = self.haystack.as_bytes();\n         loop {\n             // get the haystack up to but not including the last character searched\n-            let bytes = if let Some(slice) = haystack.get(..self.finger_back) {\n+            let bytes = if let Some(slice) = haystack.get(self.finger..self.finger_back) {\n                 slice\n             } else {\n                 return None;\n             };\n             // the last byte of the utf8 encoded needle\n             let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size - 1) };\n             if let Some(index) = memchr::memrchr(last_byte, bytes) {\n+                // we searched a slice that was offset by self.finger,\n+                // add self.finger to recoup the original index\n+                let index = self.finger + index;\n                 // memrchr will return the index of the byte we wish to\n                 // find. In case of an ASCII character, this is indeed\n                 // were we wish our new finger to be (\"after\" the found\n@@ -412,7 +416,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n                 // found the last byte when searching in reverse.\n                 self.finger_back = index;\n             } else {\n-                self.finger_back = 0;\n+                self.finger_back = self.finger;\n                 // found nothing, exit\n                 return None;\n             }"}]}