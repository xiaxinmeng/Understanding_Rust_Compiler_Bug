{"sha": "c9b7b1f73b8d256a0885506d8e7e76cd35067318", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YjdiMWY3M2I4ZDI1NmEwODg1NTA2ZDhlN2U3NmNkMzUwNjczMTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-22T01:43:24Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-22T00:28:48Z"}, "message": "Refactor `create_substs_for_generic_args` a little", "tree": {"sha": "b724ff8de0cf07550c5e0eb10d2b6724b9e9e8c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b724ff8de0cf07550c5e0eb10d2b6724b9e9e8c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b7b1f73b8d256a0885506d8e7e76cd35067318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b7b1f73b8d256a0885506d8e7e76cd35067318", "html_url": "https://github.com/rust-lang/rust/commit/c9b7b1f73b8d256a0885506d8e7e76cd35067318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b7b1f73b8d256a0885506d8e7e76cd35067318/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "039045c49bec06f3a42aed90d3bc94520d92514e", "url": "https://api.github.com/repos/rust-lang/rust/commits/039045c49bec06f3a42aed90d3bc94520d92514e", "html_url": "https://github.com/rust-lang/rust/commit/039045c49bec06f3a42aed90d3bc94520d92514e"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "54c0a267fe7b2cbdaf688ddb34b262f21237b9f5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c9b7b1f73b8d256a0885506d8e7e76cd35067318", "patch": "@@ -931,6 +931,16 @@ pub enum GenericParamDefKind {\n     Const,\n }\n \n+impl GenericParamDefKind {\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            GenericParamDefKind::Lifetime => \"lifetime\",\n+            GenericParamDefKind::Type { .. } => \"type\",\n+            GenericParamDefKind::Const => \"constant\",\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GenericParamDef {\n     pub name: Symbol,"}, {"sha": "388afc15c855973e71dc1af03750b8c0f3488635", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=c9b7b1f73b8d256a0885506d8e7e76cd35067318", "patch": "@@ -19,12 +19,7 @@ use std::sync::Arc;\n \n impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let type_name = match self.kind {\n-            ty::GenericParamDefKind::Lifetime => \"Lifetime\",\n-            ty::GenericParamDefKind::Type { .. } => \"Type\",\n-            ty::GenericParamDefKind::Const => \"Const\",\n-        };\n-        write!(f, \"{}({}, {:?}, {})\", type_name, self.name, self.def_id, self.index)\n+        write!(f, \"{}({}, {:?}, {})\", self.kind.descr(), self.name, self.def_id, self.index)\n     }\n }\n "}, {"sha": "9bdfb5ef0bc2d23d9c2e580178b319cabcfbd3c3", "filename": "src/librustc_error_codes/error_codes/E0747.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md?ref=c9b7b1f73b8d256a0885506d8e7e76cd35067318", "patch": "@@ -1,10 +1,11 @@\n-Generic arguments must be provided in the same order as the corresponding generic\n-parameters are declared.\n+Generic arguments must be provided in the same order as the corresponding\n+generic parameters are declared.\n \n Erroneous code example:\n \n ```compile_fail,E0747\n struct S<'a, T>(&'a T);\n \n-type X = S<(), 'static>; // error: the type argument is provided before the lifetime argument\n+type X = S<(), 'static>; // error: the type argument is provided before the\n+                         // lifetime argument\n ```"}, {"sha": "4a6871e023296c9617eac22a0d3bb05540ef1f1b", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=c9b7b1f73b8d256a0885506d8e7e76cd35067318", "patch": "@@ -298,6 +298,14 @@ impl GenericArg<'_> {\n             _ => false,\n         }\n     }\n+\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            GenericArg::Lifetime(_) => \"lifetime\",\n+            GenericArg::Type(_) => \"type\",\n+            GenericArg::Const(_) => \"constant\",\n+        }\n+    }\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]"}, {"sha": "a590a942e4274e46f7e623ba8ad5441a2427c930", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b7b1f73b8d256a0885506d8e7e76cd35067318/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c9b7b1f73b8d256a0885506d8e7e76cd35067318", "patch": "@@ -12,7 +12,7 @@ use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n-use rustc::session::parse::feature_err;\n+use rustc::session::{parse::feature_err, Session};\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n@@ -446,6 +446,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         (arg_count_mismatch, unexpected_spans)\n     }\n \n+    /// Report an error that a generic argument did not match the generic parameter that was\n+    /// expected.\n+    fn generic_arg_mismatch_err(sess: &Session, arg: &GenericArg<'_>, kind: &'static str) {\n+        struct_span_err!(\n+            sess,\n+            arg.span(),\n+            E0747,\n+            \"{} provided when a {} was expected\",\n+            arg.descr(),\n+            kind,\n+        )\n+        .emit();\n+    }\n+\n     /// Creates the relevant generic argument substitutions\n     /// corresponding to a set of generic parameters. This is a\n     /// rather complex function. Let us try to explain the role\n@@ -541,12 +555,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let mut args =\n                 generic_args.iter().flat_map(|generic_args| generic_args.args.iter()).peekable();\n \n-            let arg_kind = |arg| match arg {\n-                &GenericArg::Lifetime(_) => \"lifetime\",\n-                &GenericArg::Type(_) => \"type\",\n-                &GenericArg::Const(_) => \"constant\",\n-            };\n-\n             // If we encounter a type or const when we expect a lifetime, we infer the lifetimes.\n             // If we later encounter a lifetime, we know that the arguments were provided in the\n             // wrong order. `force_infer_lt` records the type or const that forced lifetimes to be\n@@ -582,20 +590,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // the arguments don't match up with the parameters, we won't issue\n                                 // an additional error, as the user already knows what's wrong.\n                                 if !arg_count_mismatch {\n-                                    let param_kind = match kind {\n-                                        GenericParamDefKind::Lifetime => \"lifetime\",\n-                                        GenericParamDefKind::Type { .. } => \"type\",\n-                                        GenericParamDefKind::Const => \"constant\",\n-                                    };\n-                                    struct_span_err!(\n-                                        tcx.sess,\n-                                        arg.span(),\n-                                        E0747,\n-                                        \"{} provided when a {} was expected\",\n-                                        arg_kind(arg),\n-                                        param_kind,\n-                                    )\n-                                    .emit();\n+                                    Self::generic_arg_mismatch_err(tcx.sess, arg, kind.descr());\n                                 }\n \n                                 // We've reported the error, but we want to make sure that this\n@@ -607,6 +602,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             }\n                         }\n                     }\n+\n                     (Some(&arg), None) => {\n                         // We should never be able to reach this point with well-formed input.\n                         // There are two situations in which we can encounter this issue.\n@@ -620,29 +616,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         //      after a type or const). We want to throw an error in this case.\n \n                         if !arg_count_mismatch {\n-                            let kind = arg_kind(arg);\n+                            let kind = arg.descr();\n                             assert_eq!(kind, \"lifetime\");\n                             let provided =\n                                 force_infer_lt.expect(\"lifetimes ought to have been inferred\");\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                provided.span(),\n-                                E0747,\n-                                \"{} provided when a {} was expected\",\n-                                arg_kind(provided),\n-                                kind,\n-                            )\n-                            .emit();\n+                            Self::generic_arg_mismatch_err(tcx.sess, provided, kind);\n                         }\n \n                         break;\n                     }\n+\n                     (None, Some(&param)) => {\n                         // If there are fewer arguments than parameters, it means\n                         // we're inferring the remaining arguments.\n                         substs.push(inferred_kind(Some(&substs), param, infer_args));\n                         params.next();\n                     }\n+\n                     (None, None) => break,\n                 }\n             }"}]}