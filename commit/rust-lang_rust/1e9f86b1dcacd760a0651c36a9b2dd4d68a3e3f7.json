{"sha": "1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOWY4NmIxZGNhY2Q3NjBhMDY1MWMzNmE5YjJkZDRkNjhhM2UzZjc=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-07-21T23:39:16Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-07-21T23:39:16Z"}, "message": "Guide: fix headings", "tree": {"sha": "8d7611ff6d7dda1f74979fc253af2e82a27dcd1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7611ff6d7dda1f74979fc253af2e82a27dcd1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7", "html_url": "https://github.com/rust-lang/rust/commit/1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "428d814a7d100f07feb87e4ffb7f4a0999bd556a", "url": "https://api.github.com/repos/rust-lang/rust/commits/428d814a7d100f07feb87e4ffb7f4a0999bd556a", "html_url": "https://github.com/rust-lang/rust/commit/428d814a7d100f07feb87e4ffb7f4a0999bd556a"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "9c52e3814624ef100deb62d8a0c2b81945134c63", "filename": "src/doc/guide.md", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=1e9f86b1dcacd760a0651c36a9b2dd4d68a3e3f7", "patch": "@@ -7,7 +7,7 @@ displayed here in line with Rust's open development policy. Please open any\n issues you find as usual.\n </div>\n \n-## Welcome!\n+# Welcome!\n \n Hey there! Welcome to the Rust guide. This is the place to be if you'd like to\n learn how to program in Rust. Rust is a systems programming language with a\n@@ -24,7 +24,7 @@ more advanced things.\n \n Sound good? Let's go!\n \n-## Installing Rust\n+# Installing Rust\n \n The first step to using Rust is to install it! There are a number of ways to\n install Rust, but the easiest is to use the the `rustup` script. If you're on\n@@ -106,7 +106,7 @@ mailing list](https://mail.mozilla.org/listinfo/rust-dev), [the /r/rust\n subreddit](http://www.reddit.com/r/rust), and [Stack\n Overflow](http://stackoverflow.com/questions/tagged/rust).\n \n-## Hello, world!\n+# Hello, world!\n \n Now that you have Rust installed, let's write your first Rust program. It's\n traditional to make your first program in any new language one that prints the\n@@ -266,7 +266,7 @@ your project grows, you'll want something to help you manage all of the options\n that it has, and to make it easy to share your code with other people and\n projects.\n \n-## Hello, Cargo!\n+# Hello, Cargo!\n \n [Cargo](http://crates.io) is a tool that Rustaceans use to help manage their\n Rust projects. Cargo is currently in an alpha state, just like Rust, and so it\n@@ -362,7 +362,7 @@ Now that you've got the tools down, let's actually learn more about the Rust\n language itself. These are the basics that will serve you well through the rest\n of your time with Rust.\n \n-## Variable bindings\n+# Variable bindings\n \n The first thing we'll learn about are 'variable bindings.' They look like this:\n \n@@ -532,7 +532,7 @@ must initialize the binding before we use it? And how does it know that we have\n or have not initialized the binding? For that, we need to learn our next\n concept: `if`.\n \n-## If\n+# If\n \n Rust's take on `if` is not particularly complex, but it's much more like the\n `if` you'll find in a dynamically typed language than in a more traditional\n@@ -593,7 +593,7 @@ This reveals two interesting things about Rust: it is an expression-based\n language, and semicolons are different than in other 'curly brace and\n semicolon'-based languages. These two things are related.\n \n-### Expressions vs. Statements\n+## Expressions vs. Statements\n \n Rust is primarily an expression based language. There are only two kinds of\n statements, and everything else is an expression.\n@@ -681,7 +681,7 @@ unit instead.\n There's one more time in which you won't see a semicolon at the end of a line\n of Rust code. For that, we'll need our next concept: functions.\n \n-## Functions\n+# Functions\n \n You've already seen one function so far, the `main` function:\n \n@@ -829,7 +829,7 @@ There are some additional ways to define functions, but they involve features\n that we haven't learned about yet, so let's just leave it at that for now.\n \n \n-## Comments\n+# Comments\n \n Now that we have some functions, it's a good idea to learn about comments.\n Comments are notes that you leave to other programmers to help explain things\n@@ -877,13 +877,13 @@ You can use the `rustdoc` tool to generate HTML documentation from these doc\n comments. We will talk more about `rustdoc` when we get to modules, as\n generally, you want to export documentation for a full module.\n \n-## Compound Data Types\n+# Compound Data Types\n \n Rust, like many programming languages, has a number of different data types\n that are built-in. You've already done some simple work with integers and\n strings, but next, let's talk about some more complicated ways of storing data.\n \n-### Tuples\n+## Tuples\n \n The first compound data type we're going to talk about are called **tuple**s.\n Tuples are an ordered list of a fixed size. Like this:\n@@ -958,7 +958,7 @@ can destructure a pattern returned by a function, as well.\n Tuples are a very simple data structure, and so are not often what you want.\n Let's move on to their bigger sibling, structs.\n \n-### Structs\n+## Structs\n \n A struct is another form of a 'record type,' just like a tuple. There's a\n difference: structs give each element that they contain a name, called a\n@@ -1008,7 +1008,7 @@ fn main() {\n \n This will print `The point is at (5, 0)`.\n \n-### Tuple Structs and Newtypes\n+## Tuple Structs and Newtypes\n \n Rust has another data type that's like a hybrid between a tuple and a struct,\n called a **tuple struct**. Tuple structs do have a name, but their fields\n@@ -1064,7 +1064,7 @@ println!(\"length is {} inches\", integer_length);\n As you can see here, you can extract the inner integer type through a\n destructuring `let`.\n \n-### Enums\n+## Enums\n \n Finally, Rust has a \"sum type\", an **enum**. Enums are an incredibly useful\n feature of Rust, and are used throughout the standard library. Enums look\n@@ -1161,7 +1161,7 @@ useful when they're generic across types. But before we get to generics, let's\n talk about how to fix this big `if`/`else` statements we've been writing. We'll\n do that with `match`.\n \n-## Match\n+# Match\n \n Often, a simple `if`/`else` isn't enough, because you have more than two\n possible options. And `else` conditions can get incredibly complicated. So\n@@ -1283,12 +1283,12 @@ fn main() {\n In this case, it doesn't make a lot of sense, as we are just making a temporary\n string where we don't need to, but sometimes, it's a nice pattern.\n \n-## Looping\n+# Looping\n \n Looping is the last basic construct that we haven't learned yet in Rust. Rust has\n two main looping constructs: `for` and `while`.\n \n-### `for`\n+## `for`\n \n The `for` loop is used to loop a particular number of times. Rust's `for` loops\n work a bit differently than in other systems languages, however. Rust's `for`\n@@ -1337,7 +1337,7 @@ lists three things. This happens quite a bit with \"C style\" `for` loops.\n \n We'll talk more about `for` when we cover **vector**s, later in the Guide.\n \n-### `while`\n+## `while`\n \n The other kind of looping construct in Rust is the `while` loop. It looks like\n this:\n@@ -1375,7 +1375,7 @@ general, the more information we can give to the compiler, the better it\n can do with safety and code generation. So you should always prefer\n `loop` when you plan to loop infinitely.\n \n-### Ending iteration early\n+## Ending iteration early\n \n Let's take a look at that `while` loop we had earlier:\n \n@@ -1426,7 +1426,7 @@ building our guessing game, but we need to know how to do one last thing first:\n get input from the keyboard. You can't have a guessing game without the ability\n to guess!\n \n-## Standard Input\n+# Standard Input\n \n Getting input from the keyboard is pretty easy, but uses some things\n we haven't seen before. Here's a simple program that reads some input,\n@@ -1586,7 +1586,7 @@ here.\n That's all you need to get basic input from the standard input! It's not too\n complicated, but there are a number of small parts.\n \n-## Guessing Game\n+# Guessing Game\n \n Okay! We've got the basics of Rust down. Let's write a bigger program.\n \n@@ -1597,7 +1597,7 @@ Upon entering our guess, it will tell us if we're too low or too high. Once we\n guess correctly, it will congratulate us, and print the number of guesses we've\n taken to the screen. Sound good?\n \n-### Set up\n+## Set up\n \n Let's set up a new project. Go to your projects directory, and make a new\n directory for the project, as well as a `src` directory for our code:\n@@ -1645,7 +1645,7 @@ Excellent! Open up your `src/guessing_game.rs` again. We'll be writing all of\n our code in this file. We'll talk about multiple-file projects later on in the\n guide.\n \n-### Processing a Guess\n+## Processing a Guess\n \n Let's get to it! The first thing we need to do for our guessing game is\n allow our player to input a guess. Put this in your `src/guessing_game.rs`:\n@@ -1674,7 +1674,7 @@ user to input a guess, get their input, and then print it out.\n Because we talked about this in the section on standard I/O, I won't go into\n more details here. If you need a refresher, go re-read that section.\n \n-### Generating a secret number\n+## Generating a secret number\n \n Next, we need to generate a secret number. To do that, we need to use Rust's\n random number generation, which we haven't talked about yet. Rust includes a\n@@ -1845,7 +1845,7 @@ You guessed: 3\n \n Great! Next up: let's compare our guess to the secret guess.\n \n-### Comparing guesses\n+## Comparing guesses\n \n If you remember, earlier in the tutorial, we made a `cmp` function that compared\n two numbers. Let's add that in, along with a `match` statement to compare the\n@@ -2194,7 +2194,7 @@ the error messages help guide you towards the correct types.\n Now we've got most of the game working, but we can only make one guess. Let's\n change that by adding loops!\n \n-### Looping\n+## Looping\n \n As we already discussed, the `loop` key word gives us an infinite loop. So\n let's add that in:\n@@ -2455,7 +2455,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n }\n ```\n \n-### Complete!\n+## Complete!\n \n At this point, you have successfully built the Guessing Game! Congratulations!\n \n@@ -2467,36 +2467,36 @@ rest of your Rust education.\n Now that you're an expert at the basics, it's time to learn about some of\n Rust's more unique features.\n \n-## iterators\n+# iterators\n \n-## Lambdas\n+# Lambdas\n \n-## Testing\n+# Testing\n \n attributes\n \n stability markers\n \n-## Crates and Modules\n+# Crates and Modules\n \n visibility\n \n \n-## Generics\n+# Generics\n \n-## Traits\n+# Traits\n \n-## Operators and built-in Traits\n+# Operators and built-in Traits\n \n-## Ownership and Lifetimes\n+# Ownership and Lifetimes\n \n Move vs. Copy\n \n Allocation\n \n-## Tasks\n+# Tasks\n \n-## Macros\n+# Macros\n \n-## Unsafe\n+# Unsafe\n "}]}