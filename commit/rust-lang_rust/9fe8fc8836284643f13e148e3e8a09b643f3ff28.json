{"sha": "9fe8fc8836284643f13e148e3e8a09b643f3ff28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZThmYzg4MzYyODQ2NDNmMTNlMTQ4ZTNlOGEwOWI2NDNmM2ZmMjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-24T18:55:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-25T05:22:19Z"}, "message": "Cache a task's stderr logger\n\nThis is both useful for performance (otherwise logging is unbuffered), but also\nuseful for correctness. Because when a task is destroyed we can't block the task\nwaiting for the logger to close, loggers are opened with a 'CloseAsynchronously'\nspecification. This causes libuv do defer the call to close() until the next\nturn of the event loop.\n\nIf you spin in a tight loop around printing, you never yield control back to the\nlibuv event loop, meaning that you simply enqueue a large number of close\nrequests but nothing is actually closed. This queue ends up never getting\nclosed, meaning that if you keep trying to create handles one will eventually\nfail, which the runtime will attempt to print the failure, causing mass\ndestruction.\n\nCaching will provide better performance as well as prevent creation of too many\nhandles.\n\nCloses #10626", "tree": {"sha": "019e6d9c264802e986c7082f53bd1d3d9e7bee6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/019e6d9c264802e986c7082f53bd1d3d9e7bee6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe8fc8836284643f13e148e3e8a09b643f3ff28", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe8fc8836284643f13e148e3e8a09b643f3ff28", "html_url": "https://github.com/rust-lang/rust/commit/9fe8fc8836284643f13e148e3e8a09b643f3ff28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe8fc8836284643f13e148e3e8a09b643f3ff28/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "html_url": "https://github.com/rust-lang/rust/commit/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "4af6d1d53be3b5bb376b413cf1eba82aecaae47f", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe8fc8836284643f13e148e3e8a09b643f3ff28/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe8fc8836284643f13e148e3e8a09b643f3ff28/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=9fe8fc8836284643f13e148e3e8a09b643f3ff28", "patch": "@@ -110,7 +110,11 @@ pub fn log(_level: u32, args: &fmt::Arguments) {\n                 match (*local).logger {\n                     // Use the available logger if we have one\n                     Some(ref mut logger) => return logger.log(args),\n-                    None => {}\n+                    None => {\n+                        let mut logger = StdErrLogger::new();\n+                        logger.log(args);\n+                        (*local).logger = Some(logger);\n+                    }\n                 }\n             }\n             None => {}"}, {"sha": "02c1e47ddc13f8f3c09f48e6f3f887f5a509b54d", "filename": "src/test/run-pass/issue-10626.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9fe8fc8836284643f13e148e3e8a09b643f3ff28/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe8fc8836284643f13e148e3e8a09b643f3ff28/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=9fe8fc8836284643f13e148e3e8a09b643f3ff28", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+\n+// Make sure that if a process doesn't have its stdio/stderr descriptors set up\n+// that we don't die in a large ball of fire\n+\n+use std::os;\n+use std::io::process;\n+\n+fn main () {\n+    let args = os::args();\n+    if args.len() > 1 && args[1] == ~\"child\" {\n+        for _ in range(0, 1000) {\n+            error!(\"hello?\");\n+        }\n+        for _ in range(0, 1000) {\n+            println!(\"hello?\");\n+        }\n+    }\n+\n+    let config = process::ProcessConfig {\n+        program : args[0].as_slice(),\n+        args : [~\"child\"],\n+        env : None,\n+        cwd : None,\n+        io : []\n+    };\n+\n+    let mut p = process::Process::new(config).unwrap();\n+    println!(\"{}\", p.wait());\n+}"}]}