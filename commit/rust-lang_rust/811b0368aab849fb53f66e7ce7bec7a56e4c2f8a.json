{"sha": "811b0368aab849fb53f66e7ce7bec7a56e4c2f8a", "node_id": "C_kwDOAAsO6NoAKDgxMWIwMzY4YWFiODQ5ZmI1M2Y2NmU3Y2U3YmVjN2E1NmU0YzJmOGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-06T14:16:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-06T14:16:00Z"}, "message": "Rollup merge of #100193 - GuillaumeGomez:rm-clean-impls, r=notriddle\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`", "tree": {"sha": "3be0fff6162d278ff3617f2d6d18ae35c6044c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3be0fff6162d278ff3617f2d6d18ae35c6044c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7negCRBK7hj4Ov3rIwAAaooIAEtHYBxNyZIb/UPe+N+U9P8b\nqNDVwV/+SOM8Mknr+1CZq9LiXDVI+i/rM+g3j9SKKJYyzuFFAx+0oso/1XAvCsTR\nO77mIfliCWF8i4bgJ4pxSKl0Qma+l/uC5ML98ARtRmesIbhMz/+URkWCEK5jztUW\nnzZ4wNzmB6Rja05zvdUEkyjj8y8KjNr2F0cHIZM8aH9IFPGjmUMNTKqMVvV2Rjwu\n4bHNi61jCH6uCowfr6UT62nfugodS6rdmUq5Wsd1AnosFBRfJRiba5FIBezy+yyM\n7ULXVGE/lzUdgI9FI7IQZB2SY0vYM8zKp4Q0jr8Zct7qcg0QOzRdXoABIqfHnUk=\n=d4ah\n-----END PGP SIGNATURE-----\n", "payload": "tree 3be0fff6162d278ff3617f2d6d18ae35c6044c9b\nparent 18ddb4118463b20bca2a0fb8dec21964f6ae5c43\nparent 71edb3168fcc351e8693d84d3bec6cfcb452560a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659795360 +0200\ncommitter GitHub <noreply@github.com> 1659795360 +0200\n\nRollup merge of #100193 - GuillaumeGomez:rm-clean-impls, r=notriddle\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a", "html_url": "https://github.com/rust-lang/rust/commit/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ddb4118463b20bca2a0fb8dec21964f6ae5c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ddb4118463b20bca2a0fb8dec21964f6ae5c43", "html_url": "https://github.com/rust-lang/rust/commit/18ddb4118463b20bca2a0fb8dec21964f6ae5c43"}, {"sha": "71edb3168fcc351e8693d84d3bec6cfcb452560a", "url": "https://api.github.com/repos/rust-lang/rust/commits/71edb3168fcc351e8693d84d3bec6cfcb452560a", "html_url": "https://github.com/rust-lang/rust/commit/71edb3168fcc351e8693d84d3bec6cfcb452560a"}], "stats": {"total": 90, "additions": 42, "deletions": 48}, "files": [{"sha": "5fb9747a944d1ec27b2cf25f2183623b990ec08d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=811b0368aab849fb53f66e7ce7bec7a56e4c2f8a", "patch": "@@ -126,40 +126,40 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<GenericBound> {\n-        Some(match *self {\n-            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n-            hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n-                let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n-\n-                let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n-\n-                let generic_args = generic_args.clean(cx);\n-                let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n-                else {\n-                    bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n-                };\n+fn clean_generic_bound<'tcx>(\n+    bound: &hir::GenericBound<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<GenericBound> {\n+    Some(match *bound {\n+        hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n+        hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n+            let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n+\n+            let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n+\n+            let generic_args = generic_args.clean(cx);\n+            let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n+            else {\n+                bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n+            };\n \n-                let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n-                GenericBound::TraitBound(\n-                    PolyTrait { trait_, generic_params: vec![] },\n-                    hir::TraitBoundModifier::None,\n-                )\n+            let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n+            GenericBound::TraitBound(\n+                PolyTrait { trait_, generic_params: vec![] },\n+                hir::TraitBoundModifier::None,\n+            )\n+        }\n+        hir::GenericBound::Trait(ref t, modifier) => {\n+            // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n+            if modifier == hir::TraitBoundModifier::MaybeConst\n+                && cx.tcx.lang_items().destruct_trait() == Some(t.trait_ref.trait_def_id().unwrap())\n+            {\n+                return None;\n             }\n-            hir::GenericBound::Trait(ref t, modifier) => {\n-                // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n-                if modifier == hir::TraitBoundModifier::MaybeConst\n-                    && cx.tcx.lang_items().destruct_trait()\n-                        == Some(t.trait_ref.trait_def_id().unwrap())\n-                {\n-                    return None;\n-                }\n \n-                GenericBound::TraitBound(clean_poly_trait_ref(t, cx), modifier)\n-            }\n-        })\n-    }\n+            GenericBound::TraitBound(clean_poly_trait_ref(t, cx), modifier)\n+        }\n+    })\n }\n \n pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n@@ -207,12 +207,6 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n     )\n }\n \n-impl<'tcx> Clean<'tcx, GenericBound> for ty::PolyTraitRef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> GenericBound {\n-        clean_poly_trait_ref_with_bindings(cx, *self, &[])\n-    }\n-}\n-\n fn clean_lifetime<'tcx>(lifetime: hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {\n     let def = cx.tcx.named_region(lifetime.hir_id);\n     if let Some(\n@@ -294,14 +288,14 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for hir::WherePredicate<'tcx> {\n                     .collect();\n                 WherePredicate::BoundPredicate {\n                     ty: clean_ty(wbp.bounded_ty, cx),\n-                    bounds: wbp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                    bounds: wbp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                     bound_params,\n                 }\n             }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n                 lifetime: clean_lifetime(wrp.lifetime, cx),\n-                bounds: wrp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: wrp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n             },\n \n             hir::WherePredicate::EqPredicate(ref wrp) => WherePredicate::EqPredicate {\n@@ -349,7 +343,7 @@ fn clean_poly_trait_predicate<'tcx>(\n     let poly_trait_ref = pred.map_bound(|pred| pred.trait_ref);\n     Some(WherePredicate::BoundPredicate {\n         ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n-        bounds: vec![poly_trait_ref.clean(cx)],\n+        bounds: vec![clean_poly_trait_ref_with_bindings(cx, poly_trait_ref, &[])],\n         bound_params: Vec::new(),\n     })\n }\n@@ -531,7 +525,7 @@ fn clean_generic_param<'tcx>(\n                     .bounds_for_param(did)\n                     .filter(|bp| bp.origin != PredicateOrigin::WhereClause)\n                     .flat_map(|bp| bp.bounds)\n-                    .filter_map(|x| x.clean(cx))\n+                    .filter_map(|x| clean_generic_bound(x, cx))\n                     .collect()\n             } else {\n                 Vec::new()\n@@ -1041,7 +1035,7 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             }\n             hir::TraitItemKind::Type(bounds, Some(default)) => {\n                 let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n-                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                let bounds = bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect();\n                 let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, default), cx, None);\n                 AssocTypeItem(\n                     Box::new(Typedef {\n@@ -1054,7 +1048,7 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             }\n             hir::TraitItemKind::Type(bounds, None) => {\n                 let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n-                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                let bounds = bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect();\n                 TyAssocTypeItem(Box::new(generics), bounds)\n             }\n         };\n@@ -1507,7 +1501,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         TyKind::OpaqueDef(item_id, _) => {\n             let item = cx.tcx.hir().item(item_id);\n             if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n-                ImplTrait(ty.bounds.iter().filter_map(|x| x.clean(cx)).collect())\n+                ImplTrait(ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect())\n             } else {\n                 unreachable!()\n             }\n@@ -1911,7 +1905,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                 kind: ConstantKind::Local { body: body_id, def_id },\n             }),\n             ItemKind::OpaqueTy(ref ty) => OpaqueTyItem(OpaqueTy {\n-                bounds: ty.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                 generics: ty.generics.clean(cx),\n             }),\n             ItemKind::TyAlias(hir_ty, generics) => {\n@@ -1929,7 +1923,7 @@ fn clean_maybe_renamed_item<'tcx>(\n             }),\n             ItemKind::TraitAlias(generics, bounds) => TraitAliasItem(TraitAlias {\n                 generics: generics.clean(cx),\n-                bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n             }),\n             ItemKind::Union(ref variant_data, generics) => UnionItem(Union {\n                 generics: generics.clean(cx),\n@@ -1961,7 +1955,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                     def_id,\n                     items,\n                     generics: generics.clean(cx),\n-                    bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                    bounds: bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                 })\n             }\n             ItemKind::ExternCrate(orig_name) => {\n@@ -2241,7 +2235,7 @@ fn clean_type_binding<'tcx>(\n                 TypeBindingKind::Equality { term: clean_hir_term(term, cx) }\n             }\n             hir::TypeBindingKind::Constraint { bounds } => TypeBindingKind::Constraint {\n-                bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),\n+                bounds: bounds.iter().filter_map(|b| clean_generic_bound(b, cx)).collect(),\n             },\n         },\n     }"}]}