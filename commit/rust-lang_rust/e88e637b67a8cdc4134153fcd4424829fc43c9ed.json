{"sha": "e88e637b67a8cdc4134153fcd4424829fc43c9ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGU2MzdiNjdhOGNkYzQxMzQxNTNmY2Q0NDI0ODI5ZmM0M2M5ZWQ=", "commit": {"author": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2017-02-05T04:07:54Z"}, "committer": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2017-02-05T04:07:54Z"}, "message": "Add empty_enum lint (just a copy of large_enum_variant for now)", "tree": {"sha": "4d3b2dacaff52e0865d8e0b1e16f2cea9dc1439f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d3b2dacaff52e0865d8e0b1e16f2cea9dc1439f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88e637b67a8cdc4134153fcd4424829fc43c9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88e637b67a8cdc4134153fcd4424829fc43c9ed", "html_url": "https://github.com/rust-lang/rust/commit/e88e637b67a8cdc4134153fcd4424829fc43c9ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88e637b67a8cdc4134153fcd4424829fc43c9ed/comments", "author": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fbaacd76828f332448a874e2f895f8b95646c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fbaacd76828f332448a874e2f895f8b95646c21", "html_url": "https://github.com/rust-lang/rust/commit/3fbaacd76828f332448a874e2f895f8b95646c21"}], "stats": {"total": 148, "additions": 120, "deletions": 28}, "files": [{"sha": "1e4959a9cccc55e044f41e9a3b51a9a8bff8ed4e", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -173,6 +173,8 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                            EXPL_IMPL_CLONE_ON_COPY,\n                            item.span,\n                            \"you are implementing `Clone` explicitly on a `Copy` type\",\n-                           |db| { db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\"); });\n+                           |db| {\n+            db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n+        });\n     }\n }"}, {"sha": "17be52d659aedc160088c64fd86608ba37aa596a", "filename": "clippy_lints/src/empty_enum.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -0,0 +1,82 @@\n+//! lint when there is an enum with no variants\n+\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{span_lint_and_then, snippet_opt};\n+use rustc::ty::layout::TargetDataLayout;\n+use rustc::ty::TypeFoldable;\n+use rustc::traits::Reveal;\n+\n+/// **What it does:** Checks for `enum`s with no variants.\n+///\n+/// **Why is this bad?** Enum's with no variants should be replaced with `!`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// enum Test {}\n+/// ```\n+declare_lint! {\n+    pub EMPTY_ENUM,\n+    Warn,\n+    \"enum with no variants\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct EmptyEnum;\n+\n+impl LintPass for EmptyEnum {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(EMPTY_ENUM)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n+    fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        let did = cx.tcx.hir.local_def_id(item.id);\n+        if let ItemEnum(ref def, _) = item.node {\n+            let ty = cx.tcx.item_type(did);\n+            let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n+            for (i, variant) in adt.variants.iter().enumerate() {\n+                let data_layout = TargetDataLayout::parse(cx.sess());\n+                cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n+                    let size: u64 = variant.fields\n+                        .iter()\n+                        .map(|f| {\n+                            let ty = cx.tcx.item_type(f.did);\n+                            if ty.needs_subst() {\n+                                0 // we can't reason about generics, so we treat them as zero sized\n+                            } else {\n+                                ty.layout(&infcx)\n+                                    .expect(\"layout should be computable for concrete type\")\n+                                    .size(&data_layout)\n+                                    .bytes()\n+                            }\n+                        })\n+                        .sum();\n+                    if size > 0 {\n+                        span_lint_and_then(cx, EMPTY_ENUM, def.variants[i].span, \"large enum variant found\", |db| {\n+                            if variant.fields.len() == 1 {\n+                                let span = match def.variants[i].node.data {\n+                                    VariantData::Struct(ref fields, _) |\n+                                    VariantData::Tuple(ref fields, _) => fields[0].ty.span,\n+                                    VariantData::Unit(_) => unreachable!(),\n+                                };\n+                                if let Some(snip) = snippet_opt(cx, span) {\n+                                    db.span_suggestion(span,\n+                                                       \"consider boxing the large fields to reduce the total size of \\\n+                                                        the enum\",\n+                                                       format!(\"Box<{}>\", snip));\n+                                    return;\n+                                }\n+                            }\n+                            db.span_help(def.variants[i].span,\n+                                         \"consider boxing the large fields to reduce the total size of the enum\");\n+                        });\n+                    }\n+                });\n+            }\n+        }\n+    }\n+}"}, {"sha": "650ad08f15455a18f2abcb0a01be68b0536211d9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -72,6 +72,7 @@ pub mod derive;\n pub mod doc;\n pub mod double_parens;\n pub mod drop_forget_ref;\n+pub mod empty_enum;\n pub mod entry;\n pub mod enum_clike;\n pub mod enum_glob_use;\n@@ -265,6 +266,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         max_single_char_names: conf.max_single_char_names,\n     });\n     reg.register_late_lint_pass(box drop_forget_ref::Pass);\n+    reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n     reg.register_late_lint_pass(box regex::Pass::default());"}, {"sha": "2cf5cd981ccf04eed4368f7c1df071826a8c11a0", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -1,8 +1,8 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use syntax::ast;\n-use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet, span_help_and_lint,\n-            walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n+use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet,\n+            span_help_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n \n /// **What it does:** Checks for mapping `clone()` over an iterator.\n ///"}, {"sha": "f0732c1cd903b9c4fdf29d1b95ba0fe435d0e8e8", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -1213,7 +1213,9 @@ fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr)\n                                SINGLE_CHAR_PATTERN,\n                                arg.span,\n                                \"single-character string constant used as pattern\",\n-                               |db| { db.span_suggestion(expr.span, \"try using a char instead:\", hint); });\n+                               |db| {\n+                db.span_suggestion(expr.span, \"try using a char instead:\", hint);\n+            });\n         }\n     }\n }"}, {"sha": "5eae3034aff31e9e1f9368cc8c73b861f0340043", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -74,7 +74,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                                    NEEDLESS_BOOL,\n                                    e.span,\n                                    \"this if-then-else expression returns a bool literal\",\n-                                   |db| { db.span_suggestion(e.span, \"you can reduce it to\", hint); });\n+                                   |db| {\n+                    db.span_suggestion(e.span, \"you can reduce it to\", hint);\n+                });\n             };\n             match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n                 (RetBool(true), RetBool(true)) |\n@@ -121,15 +123,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n-                                       |db| { db.span_suggestion(e.span, \"try simplifying it as shown:\", hint); });\n+                                       |db| {\n+                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                    });\n                 },\n                 (Other, Bool(true)) => {\n                     let hint = snippet(cx, left_side.span, \"..\").into_owned();\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n-                                       |db| { db.span_suggestion(e.span, \"try simplifying it as shown:\", hint); });\n+                                       |db| {\n+                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                    });\n                 },\n                 (Bool(false), Other) => {\n                     let hint = Sugg::hir(cx, right_side, \"..\");"}, {"sha": "c0ca07b34661a25dc8edaed70a828871948493ec", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -120,11 +120,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         return;\n                     }\n                 }\n-                span_lint_and_then(cx,\n-                                   UNNECESSARY_OPERATION,\n-                                   stmt.span,\n-                                   \"statement can be reduced\",\n-                                   |db| { db.span_suggestion(stmt.span, \"replace it with\", snippet); });\n+                span_lint_and_then(cx, UNNECESSARY_OPERATION, stmt.span, \"statement can be reduced\", |db| {\n+                    db.span_suggestion(stmt.span, \"replace it with\", snippet);\n+                });\n             }\n         }\n     }"}, {"sha": "949a2c7e7672a26447f3c900bf740f125e6b169c", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -36,12 +36,11 @@ impl LintPass for Precedence {\n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprKind::Binary(Spanned { node: op, .. }, ref left, ref right) = expr.node {\n-            let span_sugg =\n-                |expr: &Expr, sugg| {\n-                    span_lint_and_then(cx, PRECEDENCE, expr.span, \"operator precedence can trip the unwary\", |db| {\n-                        db.span_suggestion(expr.span, \"consider parenthesizing your expression\", sugg);\n-                    });\n-                };\n+            let span_sugg = |expr: &Expr, sugg| {\n+                span_lint_and_then(cx, PRECEDENCE, expr.span, \"operator precedence can trip the unwary\", |db| {\n+                    db.span_suggestion(expr.span, \"consider parenthesizing your expression\", sugg);\n+                });\n+            };\n \n             if !is_bit_op(op) {\n                 return;"}, {"sha": "689e45ef87a6ea6db308a2a715172244d395825d", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -250,7 +250,9 @@ fn lint_shadow<'a, 'tcx: 'a>(\n                                &format!(\"`{}` is shadowed by itself in `{}`\",\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")),\n-                               |db| { db.span_note(prev_span, \"previous binding is here\"); });\n+                               |db| {\n+                db.span_note(prev_span, \"previous binding is here\");\n+            });\n         } else if contains_self(cx, name, expr) {\n             span_lint_and_then(cx,\n                                SHADOW_REUSE,\n@@ -280,7 +282,9 @@ fn lint_shadow<'a, 'tcx: 'a>(\n                            SHADOW_UNRELATED,\n                            span,\n                            &format!(\"`{}` shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n-                           |db| { db.span_note(prev_span, \"previous binding is here\"); });\n+                           |db| {\n+            db.span_note(prev_span, \"previous binding is here\");\n+        });\n     }\n }\n "}, {"sha": "378af61f58d3a7eb35c3c277d51c4e969ea7abc7", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -258,9 +258,8 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n     fn needs_paren(op: &AssocOp, other: &AssocOp, dir: Associativity) -> bool {\n         other.precedence() < op.precedence() ||\n         (other.precedence() == op.precedence() &&\n-         ((op != other && associativity(op) != dir) ||\n-          (op == other && associativity(op) != Associativity::Both))) || is_shift(op) && is_arith(other) ||\n-        is_shift(other) && is_arith(op)\n+         ((op != other && associativity(op) != dir) || (op == other && associativity(op) != Associativity::Both))) ||\n+        is_shift(op) && is_arith(other) || is_shift(other) && is_arith(op)\n     }\n \n     let lhs_paren = if let Sugg::BinOp(ref lop, _) = *lhs {"}, {"sha": "fafe39170bb3f199c0a85b5e658bdfbe97265dc7", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e637b67a8cdc4134153fcd4424829fc43c9ed/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=e88e637b67a8cdc4134153fcd4424829fc43c9ed", "patch": "@@ -81,11 +81,9 @@ fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n         },\n     };\n \n-    span_lint_and_then(cx,\n-                       USELESS_VEC,\n-                       span,\n-                       \"useless use of `vec!`\",\n-                       |db| { db.span_suggestion(span, \"you can use a slice directly\", snippet); });\n+    span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n+        db.span_suggestion(span, \"you can use a slice directly\", snippet);\n+    });\n }\n \n /// Return the item type of the vector (ie. the `T` in `Vec<T>`)."}]}