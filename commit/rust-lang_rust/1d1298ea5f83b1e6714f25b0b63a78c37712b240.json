{"sha": "1d1298ea5f83b1e6714f25b0b63a78c37712b240", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTI5OGVhNWY4M2IxZTY3MTRmMjViMGI2M2E3OGMzNzcxMmIyNDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T19:12:19Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-02T16:21:11Z"}, "message": "rustc: include ParamEnv in global trait select/eval cache keys.", "tree": {"sha": "98afe2ea30ce63ba668b3416509514ae3330f93a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98afe2ea30ce63ba668b3416509514ae3330f93a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d1298ea5f83b1e6714f25b0b63a78c37712b240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1298ea5f83b1e6714f25b0b63a78c37712b240", "html_url": "https://github.com/rust-lang/rust/commit/1d1298ea5f83b1e6714f25b0b63a78c37712b240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d1298ea5f83b1e6714f25b0b63a78c37712b240/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af3ee8ee2a2bc1286b021db7600ba990359cf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af3ee8ee2a2bc1286b021db7600ba990359cf3f", "html_url": "https://github.com/rust-lang/rust/commit/4af3ee8ee2a2bc1286b021db7600ba990359cf3f"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "1fdec5f0152512c73a3bd1fcd38a2b22bd74eaf1", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=1d1298ea5f83b1e6714f25b0b63a78c37712b240", "patch": "@@ -1079,12 +1079,10 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 if !is_default {\n                     true\n                 } else if obligation.param_env.reveal == Reveal::All {\n-                    debug_assert!(!poly_trait_ref.needs_infer());\n-                    if !poly_trait_ref.needs_subst() {\n-                        true\n-                    } else {\n-                        false\n-                    }\n+                    // NOTE(eddyb) inference variables can resolve to parameters, so\n+                    // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n+                    let poly_trait_ref = selcx.infcx().resolve_vars_if_possible(&poly_trait_ref);\n+                    !poly_trait_ref.needs_infer() && !poly_trait_ref.needs_subst()\n                 } else {\n                     false\n                 }"}, {"sha": "4e172f50b8f2dc37ea1bd82fd314df5ae69536be", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1d1298ea5f83b1e6714f25b0b63a78c37712b240", "patch": "@@ -204,7 +204,10 @@ struct TraitObligationStack<'prev, 'tcx> {\n #[derive(Clone, Default)]\n pub struct SelectionCache<'tcx> {\n     hashmap: Lock<\n-        FxHashMap<ty::TraitRef<'tcx>, WithDepNode<SelectionResult<'tcx, SelectionCandidate<'tcx>>>>,\n+        FxHashMap<\n+            ty::ParamEnvAnd<'tcx, ty::TraitRef<'tcx>>,\n+            WithDepNode<SelectionResult<'tcx, SelectionCandidate<'tcx>>>,\n+        >,\n     >,\n }\n \n@@ -490,7 +493,9 @@ impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n \n #[derive(Clone, Default)]\n pub struct EvaluationCache<'tcx> {\n-    hashmap: Lock<FxHashMap<ty::PolyTraitRef<'tcx>, WithDepNode<EvaluationResult>>>,\n+    hashmap: Lock<\n+        FxHashMap<ty::ParamEnvAnd<'tcx, ty::PolyTraitRef<'tcx>>, WithDepNode<EvaluationResult>>,\n+    >,\n }\n \n impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n@@ -1143,15 +1148,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         if self.can_use_global_caches(param_env) {\n             let cache = tcx.evaluation_cache.hashmap.borrow();\n-            if let Some(cached) = cache.get(&trait_ref) {\n+            if let Some(cached) = cache.get(&param_env.and(trait_ref)) {\n                 return Some(cached.get(tcx));\n             }\n         }\n         self.infcx\n             .evaluation_cache\n             .hashmap\n             .borrow()\n-            .get(&trait_ref)\n+            .get(&param_env.and(trait_ref))\n             .map(|v| v.get(tcx))\n     }\n \n@@ -1182,7 +1187,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     .evaluation_cache\n                     .hashmap\n                     .borrow_mut()\n-                    .insert(trait_ref, WithDepNode::new(dep_node, result));\n+                    .insert(param_env.and(trait_ref), WithDepNode::new(dep_node, result));\n                 return;\n             }\n         }\n@@ -1195,7 +1200,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .evaluation_cache\n             .hashmap\n             .borrow_mut()\n-            .insert(trait_ref, WithDepNode::new(dep_node, result));\n+            .insert(param_env.and(trait_ref), WithDepNode::new(dep_node, result));\n     }\n \n     /// For various reasons, it's possible for a subobligation\n@@ -1602,15 +1607,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let trait_ref = &cache_fresh_trait_pred.skip_binder().trait_ref;\n         if self.can_use_global_caches(param_env) {\n             let cache = tcx.selection_cache.hashmap.borrow();\n-            if let Some(cached) = cache.get(&trait_ref) {\n+            if let Some(cached) = cache.get(&param_env.and(*trait_ref)) {\n                 return Some(cached.get(tcx));\n             }\n         }\n         self.infcx\n             .selection_cache\n             .hashmap\n             .borrow()\n-            .get(trait_ref)\n+            .get(&param_env.and(*trait_ref))\n             .map(|v| v.get(tcx))\n     }\n \n@@ -1671,7 +1676,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     tcx.selection_cache\n                         .hashmap\n                         .borrow_mut()\n-                        .insert(trait_ref, WithDepNode::new(dep_node, candidate));\n+                        .insert(param_env.and(trait_ref), WithDepNode::new(dep_node, candidate));\n                     return;\n                 }\n             }\n@@ -1685,7 +1690,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .selection_cache\n             .hashmap\n             .borrow_mut()\n-            .insert(trait_ref, WithDepNode::new(dep_node, candidate));\n+            .insert(param_env.and(trait_ref), WithDepNode::new(dep_node, candidate));\n     }\n \n     fn assemble_candidates<'o>("}, {"sha": "1becb1e83a5acafae49e8a1e42a9c4907e32b070", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=1d1298ea5f83b1e6714f25b0b63a78c37712b240", "patch": "@@ -9,6 +9,7 @@ trait TraitWithAssoc {\n \n type Foo<V> = impl Trait<V>;\n //~^ ERROR could not find defining uses\n+//~| ERROR the trait bound `T: TraitWithAssoc` is not satisfied\n \n trait Trait<U> {}\n "}, {"sha": "1eb4cf2a8025570056529636870c9df4d5de23aa", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d1298ea5f83b1e6714f25b0b63a78c37712b240/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=1d1298ea5f83b1e6714f25b0b63a78c37712b240", "patch": "@@ -1,5 +1,14 @@\n+error[E0277]: the trait bound `T: TraitWithAssoc` is not satisfied\n+  --> $DIR/bound_reduction2.rs:10:1\n+   |\n+LL | type Foo<V> = impl Trait<V>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitWithAssoc` is not implemented for `T`\n+...\n+LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n+   |                  -- help: consider further restricting this bound: `T: TraitWithAssoc +`\n+\n error: defining opaque type use does not fully define opaque type: generic parameter `V` is specified as concrete type `<T as TraitWithAssoc>::Assoc`\n-  --> $DIR/bound_reduction2.rs:17:1\n+  --> $DIR/bound_reduction2.rs:18:1\n    |\n LL | / fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n LL | |     ()\n@@ -12,5 +21,6 @@ error: could not find defining uses\n LL | type Foo<V> = impl Trait<V>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}]}